#include "main.h"


typedef struct {
    GPIO_TypeDef *port;
    uint16_t pin;
} pin_type;

#define NUM_LEN 20

typedef struct {
    pin_type digit_activators[4];
    pin_type BCD_input[4];
    int64_t digits[NUM_LEN + 8];
    uint32_t number;
    uint32_t shift_flag;
    uint32_t shift_counter;
} seven_segment_type;

seven_segment_type seven_segment = {
    .digit_activators={
        {.port=GPIOB, .pin=GPIO_PIN_2},
        {.port=GPIOB, .pin=GPIO_PIN_0},
        {.port=GPIOC, .pin=GPIO_PIN_4},
        {.port=GPIOA, .pin=GPIO_PIN_4}
    },
    .BCD_input={
        {.port=GPIOC, .pin=GPIO_PIN_6},
        {.port=GPIOD, .pin=GPIO_PIN_13},
        {.port=GPIOD, .pin=GPIO_PIN_9},
        {.port=GPIOB, .pin=GPIO_PIN_13}
    },
    .digits={0, 0, 0, 0},
    .number = 0,
	.shift_flag = 0,
    .shift_counter = 0};

void seven_segment_display_decimal(uint32_t n) {
    if (n < 10) {
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
                          (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
                          (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
                          (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
                          (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}

void seven_segment_deactivate_digits(void) {
    for (int i = 0; i < 4; ++i) {
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin,
                          GPIO_PIN_SET);
    }
}

void seven_segment_deactivate_digit(int i) {
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin,
                          GPIO_PIN_SET);
}

void seven_segment_activate_digit(uint32_t d) {
    if (d < 4) {
        HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
                          GPIO_PIN_RESET);
    }
}

void seven_segment_set_num(uint64_t n) {
        seven_segment.number = n;
        if(NUM_LEN > 4){
        	seven_segment.shift_flag = 1;
        	seven_segment.shift_counter = NUM_LEN + 4;

        }
        for (uint32_t i = 0; i < 4; ++i){
            seven_segment.digits[i] = -1;
        }
        for (uint32_t j = 0; j < NUM_LEN; ++j) {
        	seven_segment.digits[4 + NUM_LEN - 1  - j] = n % 10;
            n /= 10;

        }

        for (uint32_t i = 4 + NUM_LEN ; i < 8 + NUM_LEN; ++i){
            seven_segment.digits[i] = -1;
        }
}

uint32_t shift_time_rate = 250;
void seven_segment_refresh(void) {
    static uint32_t state = 0;
    static uint32_t last_time = 0;
    static uint32_t last_time_shift = 0;
    static uint32_t st_index = 0;
    if (HAL_GetTick() - last_time > 5) {
        seven_segment_deactivate_digits();
//        seven_segment_activate_digit(state);
//	   seven_segment_display_decimal(seven_segment.digits[st_index + state]);
        if(st_index + state == 13){
            seven_segment_activate_digit(0);
        }
        if(seven_segment.digits[st_index + state] != -1){
            seven_segment_activate_digit(state);
            seven_segment_display_decimal(seven_segment.digits[st_index + state]);
        }

        if(seven_segment.shift_flag == 1 && HAL_GetTick() - last_time_shift > shift_time_rate && state == 3){
        	if(seven_segment.shift_counter == 0){
        		st_index = 0;
        		seven_segment.shift_counter = NUM_LEN + 4;
        	}else{
    			st_index = st_index + 1;
    			seven_segment.shift_counter--;
        	}
        	last_time_shift =  HAL_GetTick();
        }

        state = (state + 1) % 4;
        last_time = HAL_GetTick();


    }

}

void programInit() {
    seven_segment_set_num(12345678987654321085);

}


void programLoop() {
    seven_segment_refresh();

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	static uint32_t last_time = 0;
	if(HAL_GetTick() > - last_time < 100){
		return
    if (GPIO_Pin == GPIO_PIN_1) {
    	if( seven_segment.shift_flag == 0){
    		seven_segment.shift_flag =1;
    	}
    	else{
    		seven_segment.shift_flag = 0;
    	}
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
    } else if (GPIO_Pin == GPIO_PIN_1) {

    }
}
