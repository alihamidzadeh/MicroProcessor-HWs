
E8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008574  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08008704  08008704  00018704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d0  080087d0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080087d0  080087d0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087d0  080087d0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080087d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000005b8  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000064c  2000064c  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8e2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035a7  00000000  00000000  0003d9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  00040f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001698  00000000  00000000  00042708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021000  00000000  00000000  00043da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e5b7  00000000  00000000  00064da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7bba  00000000  00000000  00083357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014af11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000693c  00000000  00000000  0014af64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086ec 	.word	0x080086ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080086ec 	.word	0x080086ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000b2 	.word	0x200000b2
 800039c:	200000b4 	.word	0x200000b4
 80003a0:	200000b6 	.word	0x200000b6
 80003a4:	200000c8 	.word	0x200000c8
 80003a8:	200000b8 	.word	0x200000b8
 80003ac:	200000cc 	.word	0x200000cc

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 f81d 	bl	80034f0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fb76 	bl	8001ba8 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f98c 	bl	80037e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f984 	bl	80037e4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 f978 	bl	80037e4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fb4e 	bl	8001ba8 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fb48 	bl	8001ba8 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fb42 	bl	8001ba8 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fb33 	bl	8001ba8 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fb28 	bl	8001ba8 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000cc 	.word	0x200000cc
 80005a8:	200000cf 	.word	0x200000cf
 80005ac:	200000b0 	.word	0x200000b0
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000b2 	.word	0x200000b2
 80005b8:	200000b4 	.word	0x200000b4
 80005bc:	200000b6 	.word	0x200000b6
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	200000c8 	.word	0x200000c8
 80005c8:	200000cd 	.word	0x200000cd
 80005cc:	200000ce 	.word	0x200000ce

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000c8 	.word	0x200000c8
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000d0 	.word	0x200000d0

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fa30 	bl	8001ba8 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000cf 	.word	0x200000cf
 80007ac:	200000d0 	.word	0x200000d0

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000cd 	.word	0x200000cd

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff82 	bl	80037e4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 ff76 	bl	80037e4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000c8 	.word	0x200000c8
 8000930:	200000b2 	.word	0x200000b2
 8000934:	200000b4 	.word	0x200000b4
 8000938:	200000cc 	.word	0x200000cc

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 ff4a 	bl	80037e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f001 f929 	bl	8001ba8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 ff3f 	bl	80037e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 f91e 	bl	8001ba8 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff34 	bl	80037e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 f913 	bl	8001ba8 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000c8 	.word	0x200000c8
 800098c:	200000b6 	.word	0x200000b6

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 ff11 	bl	80037e4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fee7 	bl	80037e4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	200000b8 	.word	0x200000b8

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f001 f84e 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f826 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa90 	bl	8000f68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8f8 	bl	8000c3c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f936 	bl	8000cbc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fa68 	bl	8000f24 <MX_USB_PCD_Init>
  MX_ADC3_Init();
 8000a54:	f000 f882 	bl	8000b5c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000a58:	f000 f96e 	bl	8000d38 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 fa32 	bl	8000ec4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000a60:	f000 f9b8 	bl	8000dd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <main+0x4c>)
 8000a66:	f004 fe25 	bl	80056b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <main+0x50>)
 8000a6c:	f004 fe22 	bl	80056b4 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_IT(&hadc3);
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <main+0x54>)
 8000a72:	f001 fab1 	bl	8001fd8 <HAL_ADC_Start_IT>

  uart_rx_enable_it();
 8000a76:	f000 fcf5 	bl	8001464 <uart_rx_enable_it>
  programInit();
 8000a7a:	f000 fc21 	bl	80012c0 <programInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000a7e:	f000 fc59 	bl	8001334 <programLoop>
  {
 8000a82:	e7fc      	b.n	8000a7e <main+0x46>
 8000a84:	200001dc 	.word	0x200001dc
 8000a88:	20000228 	.word	0x20000228
 8000a8c:	200000d4 	.word	0x200000d4

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09e      	sub	sp, #120	; 0x78
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a9a:	2228      	movs	r2, #40	; 0x28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 f9ae 	bl	8007e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	223c      	movs	r2, #60	; 0x3c
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f007 f9a0 	bl	8007e00 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ac4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ade:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ae4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 f8bc 	bl	8003c68 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000af6:	f000 facd 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 f8e4 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b22:	f000 fab7 	bl	8001094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <SystemClock_Config+0xc8>)
 8000b28:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 fb05 	bl	8005150 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b4c:	f000 faa2 	bl	8001094 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3778      	adds	r7, #120	; 0x78
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	00020124 	.word	0x00020124

08000b5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b80:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <MX_ADC3_Init+0xdc>)
 8000b82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bd8:	f001 f81e 	bl	8001c18 <HAL_ADC_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000be2:	f000 fa57 	bl	8001094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000bf2:	f002 f939 	bl	8002e68 <HAL_ADCEx_MultiModeConfigChannel>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000bfc:	f000 fa4a 	bl	8001094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c00:	2305      	movs	r3, #5
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_ADC3_Init+0xd8>)
 8000c1e:	f001 fe37 	bl	8002890 <HAL_ADC_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c28:	f000 fa34 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000d4 	.word	0x200000d4
 8000c38:	50000400 	.word	0x50000400

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	f002 fdfe 	bl	8003878 <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 fa07 	bl	8001094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c8a:	f002 fe84 	bl	8003996 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f9fe 	bl	8001094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9c:	f002 fec6 	bl	8003a2c <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f9f5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000124 	.word	0x20000124
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	2000090e 	.word	0x2000090e

08000cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <MX_SPI1_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cd6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000d16:	2208      	movs	r2, #8
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_SPI1_Init+0x74>)
 8000d1c:	f004 fbc8 	bl	80054b0 <HAL_SPI_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f9b5 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000178 	.word	0x20000178
 8000d34:	40013000 	.word	0x40013000

08000d38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d60:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d80:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d82:	f004 fc40 	bl	8005606 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d8c:	f000 f982 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000d9e:	f004 ff87 	bl	8005cb0 <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000da8:	f000 f974 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_TIM2_Init+0x98>)
 8000dba:	f005 fc6b 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dc4:	f000 f966 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001dc 	.word	0x200001dc

08000dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e08:	4a2d      	ldr	r2, [pc, #180]	; (8000ec0 <MX_TIM3_Init+0xec>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2c:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e2e:	f004 fbea 	bl	8005606 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e38:	f000 f92c 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	4619      	mov	r1, r3
 8000e48:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e4a:	f004 ff31 	bl	8005cb0 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e54:	f000 f91e 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e5a:	f004 fc95 	bl	8005788 <HAL_TIM_PWM_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e64:	f000 f916 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e78:	f005 fc0c 	bl	8006694 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e82:	f000 f907 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	; 0x60
 8000e88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000e9e:	f004 fdf3 	bl	8005a88 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ea8:	f000 f8f4 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM3_Init+0xe8>)
 8000eae:	f000 fc81 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	; 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000228 	.word	0x20000228
 8000ec0:	40000400 	.word	0x40000400

08000ec4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART3_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ed0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART3_UART_Init+0x58>)
 8000f08:	f005 fc62 	bl	80067d0 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f8bf 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000274 	.word	0x20000274
 8000f20:	40004800 	.word	0x40004800

08000f24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <MX_USB_PCD_Init+0x40>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_USB_PCD_Init+0x3c>)
 8000f4e:	f002 fdb9 	bl	8003ac4 <HAL_PCD_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f58:	f000 f89c 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200002fc 	.word	0x200002fc
 8000f64:	40005c00 	.word	0x40005c00

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b42      	ldr	r3, [pc, #264]	; (8001088 <MX_GPIO_Init+0x120>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a41      	ldr	r2, [pc, #260]	; (8001088 <MX_GPIO_Init+0x120>)
 8000f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <MX_GPIO_Init+0x120>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <MX_GPIO_Init+0x120>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <MX_GPIO_Init+0x120>)
 8000f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a35      	ldr	r2, [pc, #212]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a29      	ldr	r2, [pc, #164]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b27      	ldr	r3, [pc, #156]	; (8001088 <MX_GPIO_Init+0x120>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ffc:	4823      	ldr	r0, [pc, #140]	; (800108c <MX_GPIO_Init+0x124>)
 8000ffe:	f002 fbf1 	bl	80037e4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 8001002:	2335      	movs	r3, #53	; 0x35
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001006:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	481d      	ldr	r0, [pc, #116]	; (800108c <MX_GPIO_Init+0x124>)
 8001018:	f002 fa6a 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800101c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001020:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4815      	ldr	r0, [pc, #84]	; (800108c <MX_GPIO_Init+0x124>)
 8001036:	f002 fa5b 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800103e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	2301      	movs	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <MX_GPIO_Init+0x128>)
 8001050:	f002 fa4e 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001054:	2301      	movs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106a:	f002 fa41 	bl	80034f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2007      	movs	r0, #7
 8001074:	f002 f98f 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001078:	2007      	movs	r0, #7
 800107a:	f002 f9a8 	bl	80033ce <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	48001000 	.word	0x48001000
 8001090:	48000800 	.word	0x48000800

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim3; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_1;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]

//  volume=5;
  if (pwm_freq == 0 || pwm_freq > 20000)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <PWM_Change_Tone+0x1c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d937      	bls.n	800112c <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 80010bc:	4b52      	ldr	r3, [pc, #328]	; (8001208 <PWM_Change_Tone+0x168>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d105      	bne.n	80010d0 <PWM_Change_Tone+0x30>
 80010c4:	4b51      	ldr	r3, [pc, #324]	; (800120c <PWM_Change_Tone+0x16c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
 80010ce:	e097      	b.n	8001200 <PWM_Change_Tone+0x160>
 80010d0:	4b4d      	ldr	r3, [pc, #308]	; (8001208 <PWM_Change_Tone+0x168>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d105      	bne.n	80010e4 <PWM_Change_Tone+0x44>
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <PWM_Change_Tone+0x16c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	2300      	movs	r3, #0
 80010e0:	6393      	str	r3, [r2, #56]	; 0x38
 80010e2:	e08d      	b.n	8001200 <PWM_Change_Tone+0x160>
 80010e4:	4b48      	ldr	r3, [pc, #288]	; (8001208 <PWM_Change_Tone+0x168>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d105      	bne.n	80010f8 <PWM_Change_Tone+0x58>
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <PWM_Change_Tone+0x16c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010f6:	e083      	b.n	8001200 <PWM_Change_Tone+0x160>
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <PWM_Change_Tone+0x168>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d105      	bne.n	800110c <PWM_Change_Tone+0x6c>
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <PWM_Change_Tone+0x16c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	e079      	b.n	8001200 <PWM_Change_Tone+0x160>
 800110c:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <PWM_Change_Tone+0x168>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d105      	bne.n	8001120 <PWM_Change_Tone+0x80>
 8001114:	4b3d      	ldr	r3, [pc, #244]	; (800120c <PWM_Change_Tone+0x16c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	6593      	str	r3, [r2, #88]	; 0x58
 800111e:	e06f      	b.n	8001200 <PWM_Change_Tone+0x160>
 8001120:	4b3a      	ldr	r3, [pc, #232]	; (800120c <PWM_Change_Tone+0x16c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	65d3      	str	r3, [r2, #92]	; 0x5c
 800112a:	e069      	b.n	8001200 <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800112c:	f003 ff56 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8001130:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	4a35      	ldr	r2, [pc, #212]	; (8001210 <PWM_Change_Tone+0x170>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0b9b      	lsrs	r3, r3, #14
 8001142:	b29b      	uxth	r3, r3
 8001144:	3301      	adds	r3, #1
 8001146:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001148:	8b7b      	ldrh	r3, [r7, #26]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001150:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <PWM_Change_Tone+0x174>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	09db      	lsrs	r3, r3, #7
 800116c:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 800116e:	8b7b      	ldrh	r3, [r7, #26]
 8001170:	1e5a      	subs	r2, r3, #1
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <PWM_Change_Tone+0x16c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <PWM_Change_Tone+0x16c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	3a01      	subs	r2, #1
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <PWM_Change_Tone+0x16c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <PWM_Change_Tone+0x168>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <PWM_Change_Tone+0x104>
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <PWM_Change_Tone+0x16c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80011a2:	e02d      	b.n	8001200 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <PWM_Change_Tone+0x168>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d105      	bne.n	80011b8 <PWM_Change_Tone+0x118>
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <PWM_Change_Tone+0x16c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011b6:	e023      	b.n	8001200 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <PWM_Change_Tone+0x168>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d105      	bne.n	80011cc <PWM_Change_Tone+0x12c>
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <PWM_Change_Tone+0x16c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80011ca:	e019      	b.n	8001200 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <PWM_Change_Tone+0x168>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	d105      	bne.n	80011e0 <PWM_Change_Tone+0x140>
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <PWM_Change_Tone+0x16c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80011de:	e00f      	b.n	8001200 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <PWM_Change_Tone+0x168>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b10      	cmp	r3, #16
 80011e6:	d105      	bne.n	80011f4 <PWM_Change_Tone+0x154>
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <PWM_Change_Tone+0x16c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80011f2:	e005      	b.n	8001200 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <PWM_Change_Tone+0x16c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80011fe:	e7ff      	b.n	8001200 <PWM_Change_Tone+0x160>
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200005e8 	.word	0x200005e8
 800120c:	20000004 	.word	0x20000004
 8001210:	45e7b273 	.word	0x45e7b273
 8001214:	10624dd3 	.word	0x10624dd3

08001218 <HAL_ADC_ConvCpltCallback>:
//	}
//
//}
int currentBR = 5;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b09e      	sub	sp, #120	; 0x78
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11f      	bne.n	800126a <HAL_ADC_ConvCpltCallback+0x52>
		int x = HAL_ADC_GetValue(&hadc3);
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_ADC_ConvCpltCallback+0x60>)
 800122c:	f001 f814 	bl	8002258 <HAL_ADC_GetValue>
 8001230:	4603      	mov	r3, r0
 8001232:	677b      	str	r3, [r7, #116]	; 0x74
		currentBR = ((int) x * 100 / 3800);
 8001234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_ADC_ConvCpltCallback+0x64>)
 8001238:	fb82 1203 	smull	r1, r2, r2, r3
 800123c:	1112      	asrs	r2, r2, #4
 800123e:	17db      	asrs	r3, r3, #31
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_ADC_ConvCpltCallback+0x68>)
 8001244:	6013      	str	r3, [r2, #0]
		unsigned char data[100];

		int n = sprintf(data, "LDR: %d  %d \n", x, currentBR);
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_ADC_ConvCpltCallback+0x68>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f107 000c 	add.w	r0, r7, #12
 800124e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001252:	f006 fddd 	bl	8007e10 <siprintf>
 8001256:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart3, data, n, 1000);
 8001258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800125a:	b29a      	uxth	r2, r3
 800125c:	f107 010c 	add.w	r1, r7, #12
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	4808      	ldr	r0, [pc, #32]	; (8001288 <HAL_ADC_ConvCpltCallback+0x70>)
 8001266:	f005 fb01 	bl	800686c <HAL_UART_Transmit>
//		checkBrightness();
	}
}
 800126a:	bf00      	nop
 800126c:	3778      	adds	r7, #120	; 0x78
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	50000400 	.word	0x50000400
 8001278:	200000d4 	.word	0x200000d4
 800127c:	6bca1af3 	.word	0x6bca1af3
 8001280:	20000008 	.word	0x20000008
 8001284:	08008704 	.word	0x08008704
 8001288:	20000274 	.word	0x20000274

0800128c <checkBrightness>:
//}

int threshhold = 15;


void checkBrightness(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
		if (currentBR <= threshhold){
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <checkBrightness+0x2c>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <checkBrightness+0x30>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	dc06      	bgt.n	80012aa <checkBrightness+0x1e>
				  PWM_Change_Tone(2000,1000);
 800129c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a4:	f7ff fefc 	bl	80010a0 <PWM_Change_Tone>
		}else{
			  PWM_Change_Tone(0,0);
	}
}
 80012a8:	e003      	b.n	80012b2 <checkBrightness+0x26>
			  PWM_Change_Tone(0,0);
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fef7 	bl	80010a0 <PWM_Change_Tone>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	2000000c 	.word	0x2000000c

080012c0 <programInit>:
  0x11,
  0x1F,
  0x00
};

void programInit() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b092      	sub	sp, #72	; 0x48
 80012c4:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 80012c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ca:	9303      	str	r3, [sp, #12]
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <programInit+0x64>)
 80012ec:	f7fe ffc8 	bl	8000280 <LiquidCrystal>

	char data[50];
	int n = sprintf(data, "Program Started...\n");
 80012f0:	463b      	mov	r3, r7
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <programInit+0x68>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f006 fd8b 	bl	8007e10 <siprintf>
 80012fa:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart3, data, n, 1000);
 80012fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012fe:	b29a      	uxth	r2, r3
 8001300:	4639      	mov	r1, r7
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <programInit+0x6c>)
 8001308:	f005 fab0 	bl	800686c <HAL_UART_Transmit>
	begin(20, 4);
 800130c:	2104      	movs	r1, #4
 800130e:	2014      	movs	r0, #20
 8001310:	f7ff f84e 	bl	80003b0 <begin>

	write("vv");
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <programInit+0x70>)
 8001316:	f7ff fac3 	bl	80008a0 <write>
}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	48000c00 	.word	0x48000c00
 8001328:	08008714 	.word	0x08008714
 800132c:	20000274 	.word	0x20000274
 8001330:	08008728 	.word	0x08008728

08001334 <programLoop>:
int flag = 0; //0 ==> light, 1 ==> message

int flag_current = 1;
int message_arrived = 0;

void programLoop() {
 8001334:	b580      	push	{r7, lr}
 8001336:	b0b6      	sub	sp, #216	; 0xd8
 8001338:	af00      	add	r7, sp, #0
	char data[100];
	char data2[100];
	if (flag_current == 1 && flag == 0){
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <programLoop+0xe4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d139      	bne.n	80013b6 <programLoop+0x82>
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <programLoop+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d135      	bne.n	80013b6 <programLoop+0x82>
		clear();
 800134a:	f7ff f9f5 	bl	8000738 <clear>
		// lamp
		int percent = currentBR;
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <programLoop+0xec>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		int n = sprintf(data, " Light: %d%%",percent);
 8001356:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800135a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800135e:	4931      	ldr	r1, [pc, #196]	; (8001424 <programLoop+0xf0>)
 8001360:	4618      	mov	r0, r3
 8001362:	f006 fd55 	bl	8007e10 <siprintf>
 8001366:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		createChar(0, lamp);
 800136a:	492f      	ldr	r1, [pc, #188]	; (8001428 <programLoop+0xf4>)
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fa60 	bl	8000832 <createChar>
		setCursor(0, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff f9e9 	bl	800074c <setCursor>
		write(0);
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff fa90 	bl	80008a0 <write>
		print(data);
 8001380:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fa29 	bl	80007dc <print>
		n = sprintf(data2, "Critical Light < %d%%",threshhold);
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <programLoop+0xf8>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4927      	ldr	r1, [pc, #156]	; (8001430 <programLoop+0xfc>)
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fd3c 	bl	8007e10 <siprintf>
 8001398:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		setCursor(0, 4);
 800139c:	2104      	movs	r1, #4
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff f9d4 	bl	800074c <setCursor>
		print(data2);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fa18 	bl	80007dc <print>
		flag_current = 0;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <programLoop+0xe4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
	if (flag_current == 1 && flag == 0){
 80013b2:	bf00      	nop
		int n = sprintf(data, " Message: %s",input);
		print(data);
		flag_current = 1;
		message_arrived = 0;
	}
}
 80013b4:	e02c      	b.n	8001410 <programLoop+0xdc>
	else if((flag_current == 0 && flag == 1) || message_arrived){
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <programLoop+0xe4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <programLoop+0x92>
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <programLoop+0xe8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d003      	beq.n	80013ce <programLoop+0x9a>
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <programLoop+0x100>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d020      	beq.n	8001410 <programLoop+0xdc>
		clear();
 80013ce:	f7ff f9b3 	bl	8000738 <clear>
		createChar(0, message);
 80013d2:	4919      	ldr	r1, [pc, #100]	; (8001438 <programLoop+0x104>)
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fa2c 	bl	8000832 <createChar>
		setCursor(0, 1);
 80013da:	2101      	movs	r1, #1
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff f9b5 	bl	800074c <setCursor>
		write(0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fa5c 	bl	80008a0 <write>
		int n = sprintf(data, " Message: %s",input);
 80013e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013ec:	4a13      	ldr	r2, [pc, #76]	; (800143c <programLoop+0x108>)
 80013ee:	4914      	ldr	r1, [pc, #80]	; (8001440 <programLoop+0x10c>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fd0d 	bl	8007e10 <siprintf>
 80013f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		print(data);
 80013fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f9ec 	bl	80007dc <print>
		flag_current = 1;
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <programLoop+0xe4>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
		message_arrived = 0;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <programLoop+0x100>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	37d8      	adds	r7, #216	; 0xd8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000020 	.word	0x20000020
 800141c:	20000620 	.word	0x20000620
 8001420:	20000008 	.word	0x20000008
 8001424:	0800872c 	.word	0x0800872c
 8001428:	20000010 	.word	0x20000010
 800142c:	2000000c 	.word	0x2000000c
 8001430:	0800873c 	.word	0x0800873c
 8001434:	20000624 	.word	0x20000624
 8001438:	20000018 	.word	0x20000018
 800143c:	200005ec 	.word	0x200005ec
 8001440:	08008754 	.word	0x08008754

08001444 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001454:	d101      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x16>
    	checkBrightness();
 8001456:	f7ff ff19 	bl	800128c <checkBrightness>
//    	int n = sprintf(data, "hhhh...\n");
//    	HAL_UART_Transmit(&huart3, data, n, 1000);
//     	programLoop();
//    	write("------");
    }
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <uart_rx_enable_it>:

char character;
int index_arr = 0;

void uart_rx_enable_it(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 8001468:	2201      	movs	r2, #1
 800146a:	4903      	ldr	r1, [pc, #12]	; (8001478 <uart_rx_enable_it+0x14>)
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <uart_rx_enable_it+0x18>)
 800146e:	f005 fa87 	bl	8006980 <HAL_UART_Receive_IT>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000628 	.word	0x20000628
 800147c:	20000274 	.word	0x20000274

08001480 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <HAL_UART_RxCpltCallback+0x58>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d11d      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x4e>
		if(character != 10){
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_UART_RxCpltCallback+0x5c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b0a      	cmp	r3, #10
 8001498:	d009      	beq.n	80014ae <HAL_UART_RxCpltCallback+0x2e>
			input[index_arr++] = character;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_RxCpltCallback+0x60>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	490f      	ldr	r1, [pc, #60]	; (80014e0 <HAL_UART_RxCpltCallback+0x60>)
 80014a2:	600a      	str	r2, [r1, #0]
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <HAL_UART_RxCpltCallback+0x5c>)
 80014a6:	7811      	ldrb	r1, [r2, #0]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_UART_RxCpltCallback+0x64>)
 80014aa:	54d1      	strb	r1, [r2, r3]
 80014ac:	e00d      	b.n	80014ca <HAL_UART_RxCpltCallback+0x4a>
		} else{
			input[index_arr++] = '\0';
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_UART_RxCpltCallback+0x60>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	490a      	ldr	r1, [pc, #40]	; (80014e0 <HAL_UART_RxCpltCallback+0x60>)
 80014b6:	600a      	str	r2, [r1, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <HAL_UART_RxCpltCallback+0x64>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_UART_RxCpltCallback+0x60>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
//			strncpy(messages, input, sizeof(input));
//			memcpy(messages, input, sizeof(input));
			message_arrived = 1;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_UART_RxCpltCallback+0x68>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
		}
		uart_rx_enable_it();
 80014ca:	f7ff ffcb 	bl	8001464 <uart_rx_enable_it>
	}
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40004800 	.word	0x40004800
 80014dc:	20000628 	.word	0x20000628
 80014e0:	2000062c 	.word	0x2000062c
 80014e4:	200005ec 	.word	0x200005ec
 80014e8:	20000624 	.word	0x20000624

080014ec <HAL_GPIO_EXTI_Callback>:

int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) { //button: PC1 for change LCD flag
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d11e      	bne.n	800153a <HAL_GPIO_EXTI_Callback+0x4e>
		if (HAL_GetTick() - last_time2 > 400){
 80014fc:	f000 fb48 	bl	8001b90 <HAL_GetTick>
 8001500:	4603      	mov	r3, r0
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_GPIO_EXTI_Callback+0x58>)
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800150c:	d915      	bls.n	800153a <HAL_GPIO_EXTI_Callback+0x4e>
			if (flag == 1)
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d103      	bne.n	800151e <HAL_GPIO_EXTI_Callback+0x32>
				flag = 0;
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e002      	b.n	8001524 <HAL_GPIO_EXTI_Callback+0x38>
			else
				flag = 1;
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]

//			clear(); //programLoop(); //doesnt work, maybe cause for Priority
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <HAL_GPIO_EXTI_Callback+0x60>)
 800152a:	f002 f973 	bl	8003814 <HAL_GPIO_TogglePin>
			last_time2=HAL_GetTick();
 800152e:	f000 fb2f 	bl	8001b90 <HAL_GetTick>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GPIO_EXTI_Callback+0x58>)
 8001538:	601a      	str	r2, [r3, #0]
		}
    }
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000630 	.word	0x20000630
 8001548:	20000620 	.word	0x20000620
 800154c:	48001000 	.word	0x48001000

08001550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x44>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <HAL_MspInit+0x44>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6193      	str	r3, [r2, #24]
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x44>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x44>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x44>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x44>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001586:	2007      	movs	r0, #7
 8001588:	f001 fefa 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_ADC_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015c4:	6153      	str	r3, [r2, #20]
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6153      	str	r3, [r2, #20]
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_ADC_MspInit+0x88>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f0:	2303      	movs	r3, #3
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <HAL_ADC_MspInit+0x8c>)
 8001600:	f001 ff76 	bl	80034f0 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	202f      	movs	r0, #47	; 0x2f
 800160a:	f001 fec4 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800160e:	202f      	movs	r0, #47	; 0x2f
 8001610:	f001 fedd 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	50000400 	.word	0x50000400
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_I2C_MspInit+0x7c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d127      	bne.n	800169a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001662:	23c0      	movs	r3, #192	; 0xc0
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166a:	2301      	movs	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001672:	2304      	movs	r3, #4
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <HAL_I2C_MspInit+0x84>)
 800167e:	f001 ff37 	bl	80034f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_I2C_MspInit+0x80>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	; 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40005400 	.word	0x40005400
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <HAL_SPI_MspInit+0x7c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d128      	bne.n	8001724 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_SPI_MspInit+0x80>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001702:	23e0      	movs	r3, #224	; 0xe0
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001712:	2305      	movs	r3, #5
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001720:	f001 fee6 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3728      	adds	r7, #40	; 0x28
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40013000 	.word	0x40013000
 8001730:	40021000 	.word	0x40021000

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d114      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	201c      	movs	r0, #28
 8001764:	f001 fe17 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f001 fe30 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800176e:	e018      	b.n	80017a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d113      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_TIM_Base_MspInit+0x78>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201d      	movs	r0, #29
 8001798:	f001 fdfd 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800179c:	201d      	movs	r0, #29
 800179e:	f001 fe16 	bl	80033ce <HAL_NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40000400 	.word	0x40000400

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a11      	ldr	r2, [pc, #68]	; (8001818 <HAL_TIM_MspPostInit+0x64>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11b      	bne.n	800180e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ee:	2340      	movs	r3, #64	; 0x40
 80017f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017fe:	2302      	movs	r3, #2
 8001800:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 800180a:	f001 fe71 	bl	80034f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3720      	adds	r7, #32
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40000400 	.word	0x40000400
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800

08001824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_UART_MspInit+0x8c>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d130      	bne.n	80018a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_UART_MspInit+0x90>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a1a      	ldr	r2, [pc, #104]	; (80018b4 <HAL_UART_MspInit+0x90>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_UART_MspInit+0x90>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0x90>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_UART_MspInit+0x90>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_UART_MspInit+0x90>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001876:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001888:	2307      	movs	r3, #7
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <HAL_UART_MspInit+0x94>)
 8001894:	f001 fe2c 	bl	80034f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2027      	movs	r0, #39	; 0x27
 800189e:	f001 fd7a 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018a2:	2027      	movs	r0, #39	; 0x27
 80018a4:	f001 fd93 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40004800 	.word	0x40004800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a18      	ldr	r2, [pc, #96]	; (800193c <HAL_PCD_MspInit+0x80>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d129      	bne.n	8001932 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_PCD_MspInit+0x84>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_PCD_MspInit+0x84>)
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_PCD_MspInit+0x84>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80018f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001908:	230e      	movs	r3, #14
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 fdeb 	bl	80034f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_PCD_MspInit+0x84>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_PCD_MspInit+0x84>)
 8001920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_PCD_MspInit+0x84>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40005c00 	.word	0x40005c00
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 f8ea 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800199c:	2002      	movs	r0, #2
 800199e:	f001 ff53 	bl	8003848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <TIM2_IRQHandler+0x10>)
 80019ae:	f003 ff4c 	bl	800584a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001dc 	.word	0x200001dc

080019bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM3_IRQHandler+0x10>)
 80019c2:	f003 ff42 	bl	800584a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000228 	.word	0x20000228

080019d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART3_IRQHandler+0x10>)
 80019d6:	f005 f817 	bl	8006a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000274 	.word	0x20000274

080019e4 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <ADC3_IRQHandler+0x10>)
 80019ea:	f000 fc43 	bl	8002274 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200000d4 	.word	0x200000d4

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f006 f9c0 	bl	8007dac <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000a000 	.word	0x2000a000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	20000634 	.word	0x20000634
 8001a60:	20000650 	.word	0x20000650

08001a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff ffea 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopForever+0xe>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopForever+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f006 f97f 	bl	8007db8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7fe ffbd 	bl	8000a38 <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ac0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001acc:	080087d8 	.word	0x080087d8
  ldr r2, =_sbss
 8001ad0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001ad4:	2000064c 	.word	0x2000064c

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_Init+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_Init+0x28>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aec:	2003      	movs	r0, #3
 8001aee:	f001 fc47 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 f808 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af8:	f7ff fd2a 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000

08001b08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <HAL_InitTick+0x54>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_InitTick+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 fc5f 	bl	80033ea <HAL_SYSTICK_Config>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00e      	b.n	8001b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	d80a      	bhi.n	8001b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f001 fc27 	bl	8003396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_InitTick+0x5c>)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000024 	.word	0x20000024
 8001b60:	2000002c 	.word	0x2000002c
 8001b64:	20000028 	.word	0x20000028

08001b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000002c 	.word	0x2000002c
 8001b8c:	20000638 	.word	0x20000638

08001b90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000638 	.word	0x20000638

08001ba8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff ffee 	bl	8001b90 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000002c 	.word	0x2000002c

08001bf0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09a      	sub	sp, #104	; 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e1c9      	b.n	8001fcc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d176      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d152      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fc93 	bl	8001598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d13b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fa47 	bl	8003114 <ADC_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d12f      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
 8001c98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd4:	4b86      	ldr	r3, [pc, #536]	; (8001ef0 <HAL_ADC_Init+0x2d8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a86      	ldr	r2, [pc, #536]	; (8001ef4 <HAL_ADC_Init+0x2dc>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9a      	lsrs	r2, r3, #18
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cea:	e002      	b.n	8001cf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1f9      	bne.n	8001cec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d14:	d110      	bne.n	8001d38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f023 0312 	bic.w	r3, r3, #18
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 8136 	bne.w	8001fb2 <HAL_ADC_Init+0x39a>
 8001d46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8131 	bne.w	8001fb2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8129 	bne.w	8001fb2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d78:	d004      	beq.n	8001d84 <HAL_ADC_Init+0x16c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5e      	ldr	r2, [pc, #376]	; (8001ef8 <HAL_ADC_Init+0x2e0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Init+0x170>
 8001d84:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_ADC_Init+0x2e4>)
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_Init+0x172>
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_ADC_Init+0x2e8>)
 8001d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d102      	bne.n	8001d9c <HAL_ADC_Init+0x184>
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_ADC_Init+0x2e0>)
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e01a      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a55      	ldr	r2, [pc, #340]	; (8001ef8 <HAL_ADC_Init+0x2e0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d103      	bne.n	8001dae <HAL_ADC_Init+0x196>
 8001da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	e011      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a54      	ldr	r2, [pc, #336]	; (8001f04 <HAL_ADC_Init+0x2ec>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_ADC_Init+0x1a6>
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_ADC_Init+0x2f0>)
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	e009      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <HAL_ADC_Init+0x2f0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d102      	bne.n	8001dce <HAL_ADC_Init+0x1b6>
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_ADC_Init+0x2ec>)
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e001      	b.n	8001dd2 <HAL_ADC_Init+0x1ba>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x1da>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_ADC_Init+0x1dc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11c      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_Init+0x202>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_Init+0x204>
 8001e1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d108      	bne.n	8001e32 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7e5b      	ldrb	r3, [r3, #25]
 8001e36:	035b      	lsls	r3, r3, #13
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_Init+0x22e>
 8001e40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e44:	e000      	b.n	8001e48 <HAL_ADC_Init+0x230>
 8001e46:	2200      	movs	r2, #0
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d11b      	bne.n	8001e9e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7e5b      	ldrb	r3, [r3, #25]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	045a      	lsls	r2, r3, #17
 8001e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	e00d      	b.n	8001e9e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e8a:	f043 0220 	orr.w	r2, r3, #32
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d03a      	beq.n	8001f1c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_ADC_Init+0x2ec>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_Init+0x2a2>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_ADC_Init+0x2f0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d128      	bne.n	8001f0c <HAL_ADC_Init+0x2f4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ec2:	d012      	beq.n	8001eea <HAL_ADC_Init+0x2d2>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ecc:	d00a      	beq.n	8001ee4 <HAL_ADC_Init+0x2cc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Init+0x2c6>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	e018      	b.n	8001f10 <HAL_ADC_Init+0x2f8>
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	e015      	b.n	8001f10 <HAL_ADC_Init+0x2f8>
 8001ee4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ee8:	e012      	b.n	8001f10 <HAL_ADC_Init+0x2f8>
 8001eea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001eee:	e00f      	b.n	8001f10 <HAL_ADC_Init+0x2f8>
 8001ef0:	20000024 	.word	0x20000024
 8001ef4:	431bde83 	.word	0x431bde83
 8001ef8:	50000100 	.word	0x50000100
 8001efc:	50000300 	.word	0x50000300
 8001f00:	50000700 	.word	0x50000700
 8001f04:	50000400 	.word	0x50000400
 8001f08:	50000500 	.word	0x50000500
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f14:	4313      	orrs	r3, r2
 8001f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d114      	bne.n	8001f54 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f38:	f023 0302 	bic.w	r3, r3, #2
 8001f3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	039a      	lsls	r2, r3, #14
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f50:	4313      	orrs	r3, r2
 8001f52:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_ADC_Init+0x3bc>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f64:	430b      	orrs	r3, r1
 8001f66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d10c      	bne.n	8001f8a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f023 010f 	bic.w	r1, r3, #15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
 8001f88:	e007      	b.n	8001f9a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 020f 	bic.w	r2, r2, #15
 8001f98:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f023 0303 	bic.w	r3, r3, #3
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb0:	e00a      	b.n	8001fc8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f023 0312 	bic.w	r3, r3, #18
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3768      	adds	r7, #104	; 0x68
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	fff0c007 	.word	0xfff0c007

08001fd8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 8123 	bne.w	800223a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Start_IT+0x2a>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e11e      	b.n	8002240 <HAL_ADC_Start_IT+0x268>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f001 f81e 	bl	800304c <ADC_Enable>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 810a 	bne.w	8002230 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002038:	d004      	beq.n	8002044 <HAL_ADC_Start_IT+0x6c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a82      	ldr	r2, [pc, #520]	; (8002248 <HAL_ADC_Start_IT+0x270>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d106      	bne.n	8002052 <HAL_ADC_Start_IT+0x7a>
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_ADC_Start_IT+0x274>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	2b00      	cmp	r3, #0
 800204e:	d010      	beq.n	8002072 <HAL_ADC_Start_IT+0x9a>
 8002050:	e005      	b.n	800205e <HAL_ADC_Start_IT+0x86>
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_ADC_Start_IT+0x278>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_ADC_Start_IT+0x9a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Start_IT+0x9a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_ADC_Start_IT+0x27c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d115      	bne.n	800209e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d036      	beq.n	80020fa <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002094:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800209c:	e02d      	b.n	80020fa <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b2:	d004      	beq.n	80020be <HAL_ADC_Start_IT+0xe6>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_ADC_Start_IT+0x270>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_Start_IT+0xfc>
 80020be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e008      	b.n	80020e6 <HAL_ADC_Start_IT+0x10e>
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_ADC_Start_IT+0x27c>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002106:	d106      	bne.n	8002116 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	f023 0206 	bic.w	r2, r3, #6
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
 8002114:	e002      	b.n	800211c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	221c      	movs	r2, #28
 800212a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d110      	bne.n	8002156 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	605a      	str	r2, [r3, #4]
          break;
 8002154:	e008      	b.n	8002168 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 020c 	orr.w	r2, r2, #12
 8002164:	605a      	str	r2, [r3, #4]
          break;
 8002166:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	2b01      	cmp	r3, #1
 800216e:	d107      	bne.n	8002180 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0210 	bic.w	r2, r2, #16
 800217e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002188:	d004      	beq.n	8002194 <HAL_ADC_Start_IT+0x1bc>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <HAL_ADC_Start_IT+0x270>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d106      	bne.n	80021a2 <HAL_ADC_Start_IT+0x1ca>
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_ADC_Start_IT+0x274>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	2b00      	cmp	r3, #0
 800219e:	d03e      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 80021a0:	e005      	b.n	80021ae <HAL_ADC_Start_IT+0x1d6>
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_ADC_Start_IT+0x278>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d037      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_Start_IT+0x1ea>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_ADC_Start_IT+0x270>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d106      	bne.n	80021d0 <HAL_ADC_Start_IT+0x1f8>
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_ADC_Start_IT+0x274>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d027      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 80021ce:	e005      	b.n	80021dc <HAL_ADC_Start_IT+0x204>
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_ADC_Start_IT+0x278>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d020      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e4:	d004      	beq.n	80021f0 <HAL_ADC_Start_IT+0x218>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_ADC_Start_IT+0x270>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d106      	bne.n	80021fe <HAL_ADC_Start_IT+0x226>
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <HAL_ADC_Start_IT+0x274>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d010      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 80021fc:	e005      	b.n	800220a <HAL_ADC_Start_IT+0x232>
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_ADC_Start_IT+0x278>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2b09      	cmp	r3, #9
 8002208:	d009      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002212:	d004      	beq.n	800221e <HAL_ADC_Start_IT+0x246>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <HAL_ADC_Start_IT+0x27c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10f      	bne.n	800223e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0204 	orr.w	r2, r2, #4
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	e006      	b.n	800223e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002238:	e001      	b.n	800223e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	50000100 	.word	0x50000100
 800224c:	50000300 	.word	0x50000300
 8002250:	50000700 	.word	0x50000700
 8002254:	50000400 	.word	0x50000400

08002258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002280:	2300      	movs	r3, #0
 8002282:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_ADC_IRQHandler+0x38>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80bc 	beq.w	8002430 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80b6 	beq.w	8002430 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x7c>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a90      	ldr	r2, [pc, #576]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_IRQHandler+0x8a>
 80022f0:	4b8f      	ldr	r3, [pc, #572]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03e      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 80022fc:	e005      	b.n	800230a <HAL_ADC_IRQHandler+0x96>
 80022fe:	4b8d      	ldr	r3, [pc, #564]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2b00      	cmp	r3, #0
 8002308:	d037      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002312:	d004      	beq.n	800231e <HAL_ADC_IRQHandler+0xaa>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a84      	ldr	r2, [pc, #528]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d106      	bne.n	800232c <HAL_ADC_IRQHandler+0xb8>
 800231e:	4b84      	ldr	r3, [pc, #528]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2b05      	cmp	r3, #5
 8002328:	d027      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 800232a:	e005      	b.n	8002338 <HAL_ADC_IRQHandler+0xc4>
 800232c:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2b05      	cmp	r3, #5
 8002336:	d020      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002340:	d004      	beq.n	800234c <HAL_ADC_IRQHandler+0xd8>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a79      	ldr	r2, [pc, #484]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d106      	bne.n	800235a <HAL_ADC_IRQHandler+0xe6>
 800234c:	4b78      	ldr	r3, [pc, #480]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	2b09      	cmp	r3, #9
 8002356:	d010      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 8002358:	e005      	b.n	8002366 <HAL_ADC_IRQHandler+0xf2>
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2b09      	cmp	r3, #9
 8002364:	d009      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236e:	d004      	beq.n	800237a <HAL_ADC_IRQHandler+0x106>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a70      	ldr	r2, [pc, #448]	; (8002538 <HAL_ADC_IRQHandler+0x2c4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d104      	bne.n	8002384 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e00f      	b.n	80023a4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238c:	d004      	beq.n	8002398 <HAL_ADC_IRQHandler+0x124>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a66      	ldr	r2, [pc, #408]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_ADC_IRQHandler+0x12a>
 8002398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800239c:	e000      	b.n	80023a0 <HAL_ADC_IRQHandler+0x12c>
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_ADC_IRQHandler+0x2c4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d137      	bne.n	8002422 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d132      	bne.n	8002422 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02d      	beq.n	8002422 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11a      	bne.n	800240a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020c 	bic.w	r2, r2, #12
 80023e2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d112      	bne.n	8002422 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
 8002408:	e00b      	b.n	8002422 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fef8 	bl	8001218 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	220c      	movs	r2, #12
 800242e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_ADC_IRQHandler+0x1d0>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10b      	bne.n	800245c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 8138 	beq.w	80026c0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8132 	beq.w	80026c0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002470:	d004      	beq.n	800247c <HAL_ADC_IRQHandler+0x208>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a2d      	ldr	r2, [pc, #180]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d106      	bne.n	800248a <HAL_ADC_IRQHandler+0x216>
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03e      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 8002488:	e005      	b.n	8002496 <HAL_ADC_IRQHandler+0x222>
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d037      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249e:	d004      	beq.n	80024aa <HAL_ADC_IRQHandler+0x236>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a21      	ldr	r2, [pc, #132]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x244>
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	2b05      	cmp	r3, #5
 80024b4:	d027      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 80024b6:	e005      	b.n	80024c4 <HAL_ADC_IRQHandler+0x250>
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d020      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024cc:	d004      	beq.n	80024d8 <HAL_ADC_IRQHandler+0x264>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d106      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x272>
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_ADC_IRQHandler+0x2bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d010      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 80024e4:	e005      	b.n	80024f2 <HAL_ADC_IRQHandler+0x27e>
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_ADC_IRQHandler+0x2c0>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d009      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_IRQHandler+0x292>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_ADC_IRQHandler+0x2c4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d104      	bne.n	8002510 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e018      	b.n	8002542 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002518:	d004      	beq.n	8002524 <HAL_ADC_IRQHandler+0x2b0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_ADC_IRQHandler+0x2b8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10b      	bne.n	800253c <HAL_ADC_IRQHandler+0x2c8>
 8002524:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002528:	e009      	b.n	800253e <HAL_ADC_IRQHandler+0x2ca>
 800252a:	bf00      	nop
 800252c:	50000100 	.word	0x50000100
 8002530:	50000300 	.word	0x50000300
 8002534:	50000700 	.word	0x50000700
 8002538:	50000400 	.word	0x50000400
 800253c:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_ADC_IRQHandler+0x514>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 80b0 	bne.w	80026b2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00d      	beq.n	8002578 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80a3 	bne.w	80026b2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 809d 	bne.w	80026b2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8097 	beq.w	80026b2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADC_IRQHandler+0x324>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7e      	ldr	r2, [pc, #504]	; (800278c <HAL_ADC_IRQHandler+0x518>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d106      	bne.n	80025a6 <HAL_ADC_IRQHandler+0x332>
 8002598:	4b7d      	ldr	r3, [pc, #500]	; (8002790 <HAL_ADC_IRQHandler+0x51c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d03e      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 80025a4:	e005      	b.n	80025b2 <HAL_ADC_IRQHandler+0x33e>
 80025a6:	4b7b      	ldr	r3, [pc, #492]	; (8002794 <HAL_ADC_IRQHandler+0x520>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d037      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x352>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_ADC_IRQHandler+0x518>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x360>
 80025c6:	4b72      	ldr	r3, [pc, #456]	; (8002790 <HAL_ADC_IRQHandler+0x51c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d027      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 80025d2:	e005      	b.n	80025e0 <HAL_ADC_IRQHandler+0x36c>
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_ADC_IRQHandler+0x520>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d020      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e8:	d004      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x380>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_ADC_IRQHandler+0x518>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_IRQHandler+0x38e>
 80025f4:	4b66      	ldr	r3, [pc, #408]	; (8002790 <HAL_ADC_IRQHandler+0x51c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d010      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 8002600:	e005      	b.n	800260e <HAL_ADC_IRQHandler+0x39a>
 8002602:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_ADC_IRQHandler+0x520>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2b07      	cmp	r3, #7
 800260c:	d009      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002616:	d004      	beq.n	8002622 <HAL_ADC_IRQHandler+0x3ae>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_ADC_IRQHandler+0x514>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d104      	bne.n	800262c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e00f      	b.n	800264c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002634:	d004      	beq.n	8002640 <HAL_ADC_IRQHandler+0x3cc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a54      	ldr	r2, [pc, #336]	; (800278c <HAL_ADC_IRQHandler+0x518>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d102      	bne.n	8002646 <HAL_ADC_IRQHandler+0x3d2>
 8002640:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002644:	e000      	b.n	8002648 <HAL_ADC_IRQHandler+0x3d4>
 8002646:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_ADC_IRQHandler+0x514>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d12d      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d11a      	bne.n	800269a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002672:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
 8002698:	e00b      	b.n	80026b2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c4 	bl	8002840 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2260      	movs	r2, #96	; 0x60
 80026be:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d011      	beq.n	80026ee <HAL_ADC_IRQHandler+0x47a>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00c      	beq.n	80026ee <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fa85 	bl	8001bf0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <HAL_ADC_IRQHandler+0x4aa>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8aa 	bl	8002868 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_ADC_IRQHandler+0x4da>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f89c 	bl	800287c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800274c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d04f      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x584>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d04a      	beq.n	80027f8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	2b01      	cmp	r3, #1
 8002768:	d102      	bne.n	8002770 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800276a:	2301      	movs	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e02d      	b.n	80027cc <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d004      	beq.n	8002784 <HAL_ADC_IRQHandler+0x510>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a03      	ldr	r2, [pc, #12]	; (800278c <HAL_ADC_IRQHandler+0x518>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d109      	bne.n	8002798 <HAL_ADC_IRQHandler+0x524>
 8002784:	4b02      	ldr	r3, [pc, #8]	; (8002790 <HAL_ADC_IRQHandler+0x51c>)
 8002786:	e008      	b.n	800279a <HAL_ADC_IRQHandler+0x526>
 8002788:	50000400 	.word	0x50000400
 800278c:	50000100 	.word	0x50000100
 8002790:	50000300 	.word	0x50000300
 8002794:	50000700 	.word	0x50000700
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <HAL_ADC_IRQHandler+0x5c8>)
 800279a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10a      	bne.n	80027cc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e007      	b.n	80027cc <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80027c8:	2301      	movs	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fa0a 	bl	8001c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d018      	beq.n	8002834 <HAL_ADC_IRQHandler+0x5c0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f043 0208 	orr.w	r2, r3, #8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f810 	bl	8002854 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002834:	bf00      	nop
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	50000700 	.word	0x50000700

08002840 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b09b      	sub	sp, #108	; 0x6c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x22>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e2ca      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x5b8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 82ae 	bne.w	8002e26 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d81c      	bhi.n	800290c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	461a      	mov	r2, r3
 80028e6:	231f      	movs	r3, #31
 80028e8:	4093      	lsls	r3, r2
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4019      	ands	r1, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
 800290a:	e063      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b09      	cmp	r3, #9
 8002912:	d81e      	bhi.n	8002952 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	3b1e      	subs	r3, #30
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	4019      	ands	r1, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3b1e      	subs	r3, #30
 8002944:	fa00 f203 	lsl.w	r2, r0, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	635a      	str	r2, [r3, #52]	; 0x34
 8002950:	e040      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b0e      	cmp	r3, #14
 8002958:	d81e      	bhi.n	8002998 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	3b3c      	subs	r3, #60	; 0x3c
 800296e:	221f      	movs	r2, #31
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	4019      	ands	r1, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	3b3c      	subs	r3, #60	; 0x3c
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
 8002996:	e01d      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	3b5a      	subs	r3, #90	; 0x5a
 80029ac:	221f      	movs	r2, #31
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4019      	ands	r1, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	3b5a      	subs	r3, #90	; 0x5a
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 80e5 	bne.w	8002bae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b09      	cmp	r3, #9
 80029ea:	d91c      	bls.n	8002a26 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6999      	ldr	r1, [r3, #24]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	3b1e      	subs	r3, #30
 80029fe:	2207      	movs	r2, #7
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4019      	ands	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6898      	ldr	r0, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	3b1e      	subs	r3, #30
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	619a      	str	r2, [r3, #24]
 8002a24:	e019      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6959      	ldr	r1, [r3, #20]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	2207      	movs	r2, #7
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4019      	ands	r1, r3
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6898      	ldr	r0, [r3, #8]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d84f      	bhi.n	8002b1c <HAL_ADC_ConfigChannel+0x28c>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002a95 	.word	0x08002a95
 8002a88:	08002ab7 	.word	0x08002ab7
 8002a8c:	08002ad9 	.word	0x08002ad9
 8002a90:	08002afb 	.word	0x08002afb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9a:	4b9a      	ldr	r3, [pc, #616]	; (8002d04 <HAL_ADC_ConfigChannel+0x474>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	0691      	lsls	r1, r2, #26
 8002aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ab2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ab4:	e07e      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002abc:	4b91      	ldr	r3, [pc, #580]	; (8002d04 <HAL_ADC_ConfigChannel+0x474>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	0691      	lsls	r1, r2, #26
 8002ac6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ad4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ad6:	e06d      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <HAL_ADC_ConfigChannel+0x474>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	0691      	lsls	r1, r2, #26
 8002ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aea:	430a      	orrs	r2, r1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002af6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002af8:	e05c      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b00:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <HAL_ADC_ConfigChannel+0x474>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	0691      	lsls	r1, r2, #26
 8002b0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b18:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b1a:	e04b      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	069b      	lsls	r3, r3, #26
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	069b      	lsls	r3, r3, #26
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b62:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	069b      	lsls	r3, r3, #26
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d107      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b86:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	069b      	lsls	r3, r3, #26
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002baa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002bac:	e001      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002bb2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x344>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x344>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x346>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8130 	bne.w	8002e3c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d00f      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c02:	e049      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d91c      	bls.n	8002c60 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6999      	ldr	r1, [r3, #24]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	3b1b      	subs	r3, #27
 8002c38:	2207      	movs	r2, #7
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4019      	ands	r1, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6898      	ldr	r0, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b1b      	subs	r3, #27
 8002c52:	fa00 f203 	lsl.w	r2, r0, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	e01b      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6959      	ldr	r1, [r3, #20]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	2207      	movs	r2, #7
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4019      	ands	r1, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	6898      	ldr	r0, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca0:	d004      	beq.n	8002cac <HAL_ADC_ConfigChannel+0x41c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a18      	ldr	r2, [pc, #96]	; (8002d08 <HAL_ADC_ConfigChannel+0x478>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x420>
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_ADC_ConfigChannel+0x47c>)
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x422>
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_ADC_ConfigChannel+0x480>)
 8002cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d105      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ce0:	2b12      	cmp	r3, #18
 8002ce2:	f040 80ab 	bne.w	8002e3c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80a4 	bne.w	8002e3c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x484>
 8002cfe:	4b02      	ldr	r3, [pc, #8]	; (8002d08 <HAL_ADC_ConfigChannel+0x478>)
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e022      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4ba>
 8002d04:	83fff000 	.word	0x83fff000
 8002d08:	50000100 	.word	0x50000100
 8002d0c:	50000300 	.word	0x50000300
 8002d10:	50000700 	.word	0x50000700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_ADC_ConfigChannel+0x5c4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d103      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x496>
 8002d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e011      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4ba>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x4a6>
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_ADC_ConfigChannel+0x5cc>)
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	e009      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4ba>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a48      	ldr	r2, [pc, #288]	; (8002e5c <HAL_ADC_ConfigChannel+0x5cc>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x4b6>
 8002d40:	4b45      	ldr	r3, [pc, #276]	; (8002e58 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	e001      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x4ba>
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x4da>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x4da>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x4dc>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d150      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d70:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x502>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x502>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x504>
 8002d92:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13c      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d11d      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x54c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da8:	d118      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002db6:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <HAL_ADC_ConfigChannel+0x5d0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_ADC_ConfigChannel+0x5d4>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	0c9a      	lsrs	r2, r3, #18
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dda:	e02e      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b11      	cmp	r3, #17
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x56c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dec:	d106      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dfa:	e01e      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d11a      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e10:	e013      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e24:	e00a      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e38:	e000      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e3a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	376c      	adds	r7, #108	; 0x6c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	50000100 	.word	0x50000100
 8002e58:	50000400 	.word	0x50000400
 8002e5c:	50000500 	.word	0x50000500
 8002e60:	20000024 	.word	0x20000024
 8002e64:	431bde83 	.word	0x431bde83

08002e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b099      	sub	sp, #100	; 0x64
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e80:	d102      	bne.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	e01a      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d103      	bne.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	e011      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a67      	ldr	r2, [pc, #412]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ea4:	4b66      	ldr	r3, [pc, #408]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	e009      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a64      	ldr	r2, [pc, #400]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eb4:	4b61      	ldr	r3, [pc, #388]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	e001      	b.n	8002ebe <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0b0      	b.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0a9      	b.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 808d 	bne.w	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 8086 	bne.w	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f04:	d004      	beq.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f10:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f12:	e000      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f14:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f16:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d040      	beq.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f32:	035b      	lsls	r3, r3, #13
 8002f34:	430b      	orrs	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d15c      	bne.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f7e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d14b      	bne.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8c:	f023 030f 	bic.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6892      	ldr	r2, [r2, #8]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	e03c      	b.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d123      	bne.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d107      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002ff0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d112      	bne.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ffe:	f023 030f 	bic.w	r3, r3, #15
 8003002:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003004:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003006:	e009      	b.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f043 0220 	orr.w	r2, r3, #32
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800301a:	e000      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800301c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800302a:	4618      	mov	r0, r3
 800302c:	3764      	adds	r7, #100	; 0x64
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	50000100 	.word	0x50000100
 800303c:	50000400 	.word	0x50000400
 8003040:	50000500 	.word	0x50000500
 8003044:	50000300 	.word	0x50000300
 8003048:	50000700 	.word	0x50000700

0800304c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d108      	bne.n	8003078 <ADC_Enable+0x2c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <ADC_Enable+0x2c>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <ADC_Enable+0x2e>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d143      	bne.n	8003106 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <ADC_Enable+0xc4>)
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00d      	beq.n	80030a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e02f      	b.n	8003108 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030b8:	f7fe fd6a 	bl	8001b90 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030be:	e01b      	b.n	80030f8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030c0:	f7fe fd66 	bl	8001b90 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d914      	bls.n	80030f8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d00d      	beq.n	80030f8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0210 	orr.w	r2, r3, #16
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d1dc      	bne.n	80030c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	8000003f 	.word	0x8000003f

08003114 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d108      	bne.n	8003140 <ADC_Disable+0x2c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <ADC_Disable+0x2c>
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <ADC_Disable+0x2e>
 8003140:	2300      	movs	r3, #0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d047      	beq.n	80031d6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030d 	and.w	r3, r3, #13
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10f      	bne.n	8003174 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0202 	orr.w	r2, r2, #2
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2203      	movs	r2, #3
 800316a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800316c:	f7fe fd10 	bl	8001b90 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003172:	e029      	b.n	80031c8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e023      	b.n	80031d8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003190:	f7fe fcfe 	bl	8001b90 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d914      	bls.n	80031c8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10d      	bne.n	80031c8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d0dc      	beq.n	8003190 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	; (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	; (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	; (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	; (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800334c:	d301      	bcc.n	8003352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334e:	2301      	movs	r3, #1
 8003350:	e00f      	b.n	8003372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <SysTick_Config+0x40>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335a:	210f      	movs	r1, #15
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f7ff ff8e 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <SysTick_Config+0x40>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <SysTick_Config+0x40>)
 800336c:	2207      	movs	r2, #7
 800336e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff29 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a8:	f7ff ff3e 	bl	8003228 <__NVIC_GetPriorityGrouping>
 80033ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	6978      	ldr	r0, [r7, #20]
 80033b4:	f7ff ff8e 	bl	80032d4 <NVIC_EncodePriority>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff5d 	bl	8003280 <__NVIC_SetPriority>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff31 	bl	8003244 <__NVIC_EnableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffa2 	bl	800333c <SysTick_Config>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003410:	2b02      	cmp	r3, #2
 8003412:	d008      	beq.n	8003426 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2204      	movs	r2, #4
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e020      	b.n	8003468 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 020e 	bic.w	r2, r2, #14
 8003434:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0201 	bic.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003486:	2b02      	cmp	r3, #2
 8003488:	d005      	beq.n	8003496 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e027      	b.n	80034e6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 020e 	bic.w	r2, r2, #14
 80034a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
    } 
  }
  return status;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fe:	e154      	b.n	80037aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8146 	beq.w	80037a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d005      	beq.n	8003530 <HAL_GPIO_Init+0x40>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d130      	bne.n	8003592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003566:	2201      	movs	r2, #1
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	f003 0201 	and.w	r2, r3, #1
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	2b03      	cmp	r3, #3
 800359c:	d017      	beq.n	80035ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	2203      	movs	r2, #3
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d123      	bne.n	8003622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	08da      	lsrs	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	220f      	movs	r2, #15
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	6939      	ldr	r1, [r7, #16]
 800361e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	2203      	movs	r2, #3
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a0 	beq.w	80037a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003664:	4b58      	ldr	r3, [pc, #352]	; (80037c8 <HAL_GPIO_Init+0x2d8>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	4a57      	ldr	r2, [pc, #348]	; (80037c8 <HAL_GPIO_Init+0x2d8>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6193      	str	r3, [r2, #24]
 8003670:	4b55      	ldr	r3, [pc, #340]	; (80037c8 <HAL_GPIO_Init+0x2d8>)
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800367c:	4a53      	ldr	r2, [pc, #332]	; (80037cc <HAL_GPIO_Init+0x2dc>)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	3302      	adds	r3, #2
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	220f      	movs	r2, #15
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036a6:	d019      	beq.n	80036dc <HAL_GPIO_Init+0x1ec>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a49      	ldr	r2, [pc, #292]	; (80037d0 <HAL_GPIO_Init+0x2e0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d013      	beq.n	80036d8 <HAL_GPIO_Init+0x1e8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a48      	ldr	r2, [pc, #288]	; (80037d4 <HAL_GPIO_Init+0x2e4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00d      	beq.n	80036d4 <HAL_GPIO_Init+0x1e4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <HAL_GPIO_Init+0x2e8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <HAL_GPIO_Init+0x1e0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a46      	ldr	r2, [pc, #280]	; (80037dc <HAL_GPIO_Init+0x2ec>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_GPIO_Init+0x1dc>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e008      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036cc:	2305      	movs	r3, #5
 80036ce:	e006      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e004      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e002      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <HAL_GPIO_Init+0x1ee>
 80036dc:	2300      	movs	r3, #0
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	f002 0203 	and.w	r2, r2, #3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4093      	lsls	r3, r2
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80036ee:	4937      	ldr	r1, [pc, #220]	; (80037cc <HAL_GPIO_Init+0x2dc>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003720:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800374a:	4a25      	ldr	r2, [pc, #148]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003750:	4b23      	ldr	r3, [pc, #140]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377a:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <HAL_GPIO_Init+0x2f0>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3301      	adds	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f aea3 	bne.w	8003500 <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010000 	.word	0x40010000
 80037d0:	48000400 	.word	0x48000400
 80037d4:	48000800 	.word	0x48000800
 80037d8:	48000c00 	.word	0x48000c00
 80037dc:	48001000 	.word	0x48001000
 80037e0:	40010400 	.word	0x40010400

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003800:	e002      	b.n	8003808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	041a      	lsls	r2, r3, #16
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43d9      	mvns	r1, r3
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	400b      	ands	r3, r1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800385e:	4a05      	ldr	r2, [pc, #20]	; (8003874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fe40 	bl	80014ec <HAL_GPIO_EXTI_Callback>
  }
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40010400 	.word	0x40010400

08003878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e081      	b.n	800398e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fec2 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d107      	bne.n	80038f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	e006      	b.n	8003900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d104      	bne.n	8003912 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69d9      	ldr	r1, [r3, #28]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d138      	bne.n	8003a1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e032      	b.n	8003a20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2224      	movs	r2, #36	; 0x24
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d139      	bne.n	8003ab6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e033      	b.n	8003ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e000      	b.n	8003ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	b08b      	sub	sp, #44	; 0x2c
 8003ac8:	af06      	add	r7, sp, #24
 8003aca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0c4      	b.n	8003c60 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fee6 	bl	80018bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2203      	movs	r2, #3
 8003af4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f004 f919 	bl	8007d34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
 8003b06:	e040      	b.n	8003b8a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	3301      	adds	r3, #1
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	440b      	add	r3, r1
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	440b      	add	r3, r1
 8003b42:	3303      	adds	r3, #3
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	440b      	add	r3, r1
 8003b56:	3338      	adds	r3, #56	; 0x38
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	440b      	add	r3, r1
 8003b6a:	333c      	adds	r3, #60	; 0x3c
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3340      	adds	r3, #64	; 0x40
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	3301      	adds	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3b9      	bcc.n	8003b08 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e044      	b.n	8003c24 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3301      	adds	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3b5      	bcc.n	8003b9a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	687e      	ldr	r6, [r7, #4]
 8003c36:	466d      	mov	r5, sp
 8003c38:	f106 0410 	add.w	r4, r6, #16
 8003c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c40:	6823      	ldr	r3, [r4, #0]
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	1d33      	adds	r3, r6, #4
 8003c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c48:	6838      	ldr	r0, [r7, #0]
 8003c4a:	f004 f88e 	bl	8007d6a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f001 b823 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 817d 	beq.w	8003f9e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ca4:	4bbc      	ldr	r3, [pc, #752]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d00c      	beq.n	8003cca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cb0:	4bb9      	ldr	r3, [pc, #740]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d15c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x10e>
 8003cbc:	4bb6      	ldr	r3, [pc, #728]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d155      	bne.n	8003d76 <HAL_RCC_OscConfig+0x10e>
 8003cca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cde:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <HAL_RCC_OscConfig+0x94>
 8003cf6:	4ba8      	ldr	r3, [pc, #672]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	e015      	b.n	8003d28 <HAL_RCC_OscConfig+0xc0>
 8003cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003d24:	4b9c      	ldr	r3, [pc, #624]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003d30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003d3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003d40:	fab2 f282 	clz	r2, r2
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	f002 021f 	and.w	r2, r2, #31
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 811f 	beq.w	8003f9c <HAL_RCC_OscConfig+0x334>
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 8116 	bne.w	8003f9c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f000 bfaf 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d106      	bne.n	8003d96 <HAL_RCC_OscConfig+0x12e>
 8003d88:	4b83      	ldr	r3, [pc, #524]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a82      	ldr	r2, [pc, #520]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	e036      	b.n	8003e04 <HAL_RCC_OscConfig+0x19c>
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x158>
 8003da6:	4b7c      	ldr	r3, [pc, #496]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7b      	ldr	r2, [pc, #492]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b79      	ldr	r3, [pc, #484]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a78      	ldr	r2, [pc, #480]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e021      	b.n	8003e04 <HAL_RCC_OscConfig+0x19c>
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x184>
 8003dd2:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a70      	ldr	r2, [pc, #448]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6d      	ldr	r2, [pc, #436]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0x19c>
 8003dec:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a69      	ldr	r2, [pc, #420]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a66      	ldr	r2, [pc, #408]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e04:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f023 020f 	bic.w	r2, r3, #15
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	495f      	ldr	r1, [pc, #380]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d059      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd feaf 	bl	8001b90 <HAL_GetTick>
 8003e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e38:	f7fd feaa 	bl	8001b90 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d902      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	f000 bf43 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8003e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003e62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d102      	bne.n	8003e80 <HAL_RCC_OscConfig+0x218>
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	e015      	b.n	8003eac <HAL_RCC_OscConfig+0x244>
 8003e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003e8c:	fa93 f3a3 	rbit	r3, r3
 8003e90:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e9c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ea0:	fa93 f3a3 	rbit	r3, r3
 8003ea4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ea8:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003eb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003eb8:	fa92 f2a2 	rbit	r2, r2
 8003ebc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003ec0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f042 0220 	orr.w	r2, r2, #32
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f002 021f 	and.w	r2, r2, #31
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ab      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1d0>
 8003ee0:	e05d      	b.n	8003f9e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fd fe55 	bl	8001b90 <HAL_GetTick>
 8003ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fd fe50 	bl	8001b90 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	; 0x64
 8003efa:	d902      	bls.n	8003f02 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	f000 bee9 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8003f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f06:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003f0e:	fa93 f3a3 	rbit	r3, r3
 8003f12:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003f16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d102      	bne.n	8003f34 <HAL_RCC_OscConfig+0x2cc>
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	e015      	b.n	8003f60 <HAL_RCC_OscConfig+0x2f8>
 8003f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <HAL_RCC_OscConfig+0x330>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f64:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003f68:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f6c:	fa92 f2a2 	rbit	r2, r2
 8003f70:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f74:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f78:	fab2 f282 	clz	r2, r2
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f002 021f 	and.w	r2, r2, #31
 8003f88:	2101      	movs	r1, #1
 8003f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ab      	bne.n	8003eec <HAL_RCC_OscConfig+0x284>
 8003f94:	e003      	b.n	8003f9e <HAL_RCC_OscConfig+0x336>
 8003f96:	bf00      	nop
 8003f98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 817d 	beq.w	80042ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fb4:	4ba6      	ldr	r3, [pc, #664]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fc0:	4ba3      	ldr	r3, [pc, #652]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d172      	bne.n	80040b2 <HAL_RCC_OscConfig+0x44a>
 8003fcc:	4ba0      	ldr	r3, [pc, #640]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d16c      	bne.n	80040b2 <HAL_RCC_OscConfig+0x44a>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003fea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <HAL_RCC_OscConfig+0x3a0>
 8004002:	4b93      	ldr	r3, [pc, #588]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	e013      	b.n	8004030 <HAL_RCC_OscConfig+0x3c8>
 8004008:	2302      	movs	r3, #2
 800400a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800401a:	2302      	movs	r3, #2
 800401c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004020:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004024:	fa93 f3a3 	rbit	r3, r3
 8004028:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800402c:	4b88      	ldr	r3, [pc, #544]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2202      	movs	r2, #2
 8004032:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004036:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800403a:	fa92 f2a2 	rbit	r2, r2
 800403e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004042:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004046:	fab2 f282 	clz	r2, r2
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f042 0220 	orr.w	r2, r2, #32
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	f002 021f 	and.w	r2, r2, #31
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f202 	lsl.w	r2, r1, r2
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCC_OscConfig+0x410>
 8004062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004066:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d002      	beq.n	8004078 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f000 be2e 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b75      	ldr	r3, [pc, #468]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	21f8      	movs	r1, #248	; 0xf8
 800408e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004096:	fa91 f1a1 	rbit	r1, r1
 800409a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800409e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80040a2:	fab1 f181 	clz	r1, r1
 80040a6:	b2c9      	uxtb	r1, r1
 80040a8:	408b      	lsls	r3, r1
 80040aa:	4969      	ldr	r1, [pc, #420]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b0:	e0fd      	b.n	80042ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8088 	beq.w	80041d4 <HAL_RCC_OscConfig+0x56c>
 80040c4:	2301      	movs	r3, #1
 80040c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040ce:	fa93 f3a3 	rbit	r3, r3
 80040d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80040d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	461a      	mov	r2, r3
 80040ec:	2301      	movs	r3, #1
 80040ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fd fd4e 	bl	8001b90 <HAL_GetTick>
 80040f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fd fd49 	bl	8001b90 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	f000 bde2 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8004110:	2302      	movs	r3, #2
 8004112:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004122:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_RCC_OscConfig+0x4d8>
 800413a:	4b45      	ldr	r3, [pc, #276]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	e013      	b.n	8004168 <HAL_RCC_OscConfig+0x500>
 8004140:	2302      	movs	r3, #2
 8004142:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800414a:	fa93 f3a3 	rbit	r3, r3
 800414e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004152:	2302      	movs	r3, #2
 8004154:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004158:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004164:	4b3a      	ldr	r3, [pc, #232]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	2202      	movs	r2, #2
 800416a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800416e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004172:	fa92 f2a2 	rbit	r2, r2
 8004176:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800417a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800417e:	fab2 f282 	clz	r2, r2
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f002 021f 	and.w	r2, r2, #31
 800418e:	2101      	movs	r1, #1
 8004190:	fa01 f202 	lsl.w	r2, r1, r2
 8004194:	4013      	ands	r3, r2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0af      	beq.n	80040fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	21f8      	movs	r1, #248	; 0xf8
 80041b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041b8:	fa91 f1a1 	rbit	r1, r1
 80041bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80041c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80041c4:	fab1 f181 	clz	r1, r1
 80041c8:	b2c9      	uxtb	r1, r1
 80041ca:	408b      	lsls	r3, r1
 80041cc:	4920      	ldr	r1, [pc, #128]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
 80041d2:	e06c      	b.n	80042ae <HAL_RCC_OscConfig+0x646>
 80041d4:	2301      	movs	r3, #1
 80041d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80041e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	461a      	mov	r2, r3
 80041fc:	2300      	movs	r3, #0
 80041fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fcc6 	bl	8001b90 <HAL_GetTick>
 8004204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800420a:	f7fd fcc1 	bl	8001b90 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	f000 bd5a 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8004220:	2302      	movs	r3, #2
 8004222:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d104      	bne.n	8004254 <HAL_RCC_OscConfig+0x5ec>
 800424a:	4b01      	ldr	r3, [pc, #4]	; (8004250 <HAL_RCC_OscConfig+0x5e8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e015      	b.n	800427c <HAL_RCC_OscConfig+0x614>
 8004250:	40021000 	.word	0x40021000
 8004254:	2302      	movs	r3, #2
 8004256:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004266:	2302      	movs	r3, #2
 8004268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800426c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004278:	4bc8      	ldr	r3, [pc, #800]	; (800459c <HAL_RCC_OscConfig+0x934>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2202      	movs	r2, #2
 800427e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004282:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004286:	fa92 f2a2 	rbit	r2, r2
 800428a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800428e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f002 021f 	and.w	r2, r2, #31
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ad      	bne.n	800420a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8110 	beq.w	80044e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d079      	beq.n	80043c8 <HAL_RCC_OscConfig+0x760>
 80042d4:	2301      	movs	r3, #1
 80042d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80042e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	fab3 f383 	clz	r3, r3
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	4bab      	ldr	r3, [pc, #684]	; (80045a0 <HAL_RCC_OscConfig+0x938>)
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	461a      	mov	r2, r3
 80042fa:	2301      	movs	r3, #1
 80042fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fe:	f7fd fc47 	bl	8001b90 <HAL_GetTick>
 8004302:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e00a      	b.n	800431e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004308:	f7fd fc42 	bl	8001b90 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d902      	bls.n	800431e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	f000 bcdb 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 800431e:	2302      	movs	r3, #2
 8004320:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004334:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004340:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	fa93 f2a3 	rbit	r2, r3
 800434a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800434e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800435c:	2202      	movs	r2, #2
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004376:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004378:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_OscConfig+0x934>)
 800437a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004384:	2102      	movs	r1, #2
 8004386:	6019      	str	r1, [r3, #0]
 8004388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	fa93 f1a3 	rbit	r1, r3
 8004396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800439e:	6019      	str	r1, [r3, #0]
  return result;
 80043a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2101      	movs	r1, #1
 80043bc:	fa01 f303 	lsl.w	r3, r1, r3
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0a0      	beq.n	8004308 <HAL_RCC_OscConfig+0x6a0>
 80043c6:	e08d      	b.n	80044e4 <HAL_RCC_OscConfig+0x87c>
 80043c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043d0:	2201      	movs	r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	fa93 f2a3 	rbit	r2, r3
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043ea:	601a      	str	r2, [r3, #0]
  return result;
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80043f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <HAL_RCC_OscConfig+0x938>)
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fd fbc1 	bl	8001b90 <HAL_GetTick>
 800440e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004412:	e00a      	b.n	800442a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd fbbc 	bl	8001b90 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d902      	bls.n	800442a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	f000 bc55 	b.w	8004cd4 <HAL_RCC_OscConfig+0x106c>
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004432:	2202      	movs	r2, #2
 8004434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	fa93 f2a3 	rbit	r2, r3
 8004444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004452:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004456:	2202      	movs	r2, #2
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f2a3 	rbit	r2, r3
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447a:	2202      	movs	r2, #2
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	fa93 f2a3 	rbit	r2, r3
 800448c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004490:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004494:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCC_OscConfig+0x934>)
 8004498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044a2:	2102      	movs	r1, #2
 80044a4:	6019      	str	r1, [r3, #0]
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	fa93 f1a3 	rbit	r1, r3
 80044b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044bc:	6019      	str	r1, [r3, #0]
  return result;
 80044be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2101      	movs	r1, #1
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d197      	bne.n	8004414 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 81a1 	beq.w	800483c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_RCC_OscConfig+0x934>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d116      	bne.n	800453a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b23      	ldr	r3, [pc, #140]	; (800459c <HAL_RCC_OscConfig+0x934>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <HAL_RCC_OscConfig+0x934>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b20      	ldr	r3, [pc, #128]	; (800459c <HAL_RCC_OscConfig+0x934>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004524:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004532:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <HAL_RCC_OscConfig+0x93c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11a      	bne.n	800457c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004546:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_RCC_OscConfig+0x93c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_RCC_OscConfig+0x93c>)
 800454c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004550:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004552:	f7fd fb1d 	bl	8001b90 <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	e009      	b.n	8004570 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fd fb18 	bl	8001b90 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e3b1      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCC_OscConfig+0x93c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <HAL_RCC_OscConfig+0x940>
 800458c:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_OscConfig+0x934>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	4a02      	ldr	r2, [pc, #8]	; (800459c <HAL_RCC_OscConfig+0x934>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6213      	str	r3, [r2, #32]
 8004598:	e03c      	b.n	8004614 <HAL_RCC_OscConfig+0x9ac>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	10908120 	.word	0x10908120
 80045a4:	40007000 	.word	0x40007000
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCC_OscConfig+0x96a>
 80045b8:	4bc1      	ldr	r3, [pc, #772]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4ac0      	ldr	r2, [pc, #768]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6213      	str	r3, [r2, #32]
 80045c4:	4bbe      	ldr	r3, [pc, #760]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4abd      	ldr	r2, [pc, #756]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045ca:	f023 0304 	bic.w	r3, r3, #4
 80045ce:	6213      	str	r3, [r2, #32]
 80045d0:	e020      	b.n	8004614 <HAL_RCC_OscConfig+0x9ac>
 80045d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x994>
 80045e2:	4bb7      	ldr	r3, [pc, #732]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4ab6      	ldr	r2, [pc, #728]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045e8:	f043 0304 	orr.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	4bb4      	ldr	r3, [pc, #720]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4ab3      	ldr	r2, [pc, #716]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	6213      	str	r3, [r2, #32]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0x9ac>
 80045fc:	4bb0      	ldr	r3, [pc, #704]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4aaf      	ldr	r2, [pc, #700]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	6213      	str	r3, [r2, #32]
 8004608:	4bad      	ldr	r3, [pc, #692]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4aac      	ldr	r2, [pc, #688]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 800460e:	f023 0304 	bic.w	r3, r3, #4
 8004612:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8081 	beq.w	8004728 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fd fab3 	bl	8001b90 <HAL_GetTick>
 800462a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fd faae 	bl	8001b90 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e345      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8004648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004658:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004666:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004670:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004674:	2202      	movs	r2, #2
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	fa93 f2a3 	rbit	r2, r3
 8004686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800468e:	601a      	str	r2, [r3, #0]
  return result;
 8004690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004694:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004698:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0302 	orr.w	r3, r3, #2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_OscConfig+0xa4c>
 80046ae:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	e013      	b.n	80046dc <HAL_RCC_OscConfig+0xa74>
 80046b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046bc:	2202      	movs	r2, #2
 80046be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	fa93 f2a3 	rbit	r2, r3
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80046e4:	2102      	movs	r1, #2
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	fa92 f1a2 	rbit	r1, r2
 80046f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80046fe:	6011      	str	r1, [r2, #0]
  return result;
 8004700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004704:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	fab2 f282 	clz	r2, r2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	f002 021f 	and.w	r2, r2, #31
 800471a:	2101      	movs	r1, #1
 800471c:	fa01 f202 	lsl.w	r2, r1, r2
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d084      	beq.n	8004630 <HAL_RCC_OscConfig+0x9c8>
 8004726:	e07f      	b.n	8004828 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004728:	f7fd fa32 	bl	8001b90 <HAL_GetTick>
 800472c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004730:	e00b      	b.n	800474a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fd fa2d 	bl	8001b90 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e2c4      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
 800474a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004752:	2202      	movs	r2, #2
 8004754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	fa93 f2a3 	rbit	r2, r3
 8004764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004768:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004772:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004776:	2202      	movs	r2, #2
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	fa93 f2a3 	rbit	r2, r3
 8004788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004790:	601a      	str	r2, [r3, #0]
  return result;
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800479a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f043 0302 	orr.w	r3, r3, #2
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d102      	bne.n	80047b6 <HAL_RCC_OscConfig+0xb4e>
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	e013      	b.n	80047de <HAL_RCC_OscConfig+0xb76>
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047be:	2202      	movs	r2, #2
 80047c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80047e6:	2102      	movs	r1, #2
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	fa92 f1a2 	rbit	r1, r2
 80047f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004800:	6011      	str	r1, [r2, #0]
  return result;
 8004802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004806:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	f002 021f 	and.w	r2, r2, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f202 	lsl.w	r2, r1, r2
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d184      	bne.n	8004732 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800483c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8242 	beq.w	8004cd2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCC_OscConfig+0xc58>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b08      	cmp	r3, #8
 8004858:	f000 8213 	beq.w	8004c82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f040 8162 	bne.w	8004b32 <HAL_RCC_OscConfig+0xeca>
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800487a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	fa93 f2a3 	rbit	r2, r3
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004892:	601a      	str	r2, [r3, #0]
  return result;
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800489c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	461a      	mov	r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fd f96c 	bl	8001b90 <HAL_GetTick>
 80048b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048bc:	e00c      	b.n	80048d8 <HAL_RCC_OscConfig+0xc70>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd f964 	bl	8001b90 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1fd      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
 80048d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048dc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	fa93 f2a3 	rbit	r2, r3
 80048f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80048fc:	601a      	str	r2, [r3, #0]
  return result;
 80048fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004902:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004906:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <HAL_RCC_OscConfig+0xcba>
 800491c:	4bb0      	ldr	r3, [pc, #704]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	e027      	b.n	8004972 <HAL_RCC_OscConfig+0xd0a>
 8004922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004926:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800492a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800492e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004934:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	fa93 f2a3 	rbit	r2, r3
 800493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004942:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	fa93 f2a3 	rbit	r2, r3
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	4b9c      	ldr	r3, [pc, #624]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004976:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800497a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800497e:	6011      	str	r1, [r2, #0]
 8004980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004984:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	fa92 f1a2 	rbit	r1, r2
 800498e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004992:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004996:	6011      	str	r1, [r2, #0]
  return result;
 8004998:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800499c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	fab2 f282 	clz	r2, r2
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	f042 0220 	orr.w	r2, r2, #32
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	f002 021f 	and.w	r2, r2, #31
 80049b2:	2101      	movs	r1, #1
 80049b4:	fa01 f202 	lsl.w	r2, r1, r2
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d182      	bne.n	80048c4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049be:	4b88      	ldr	r3, [pc, #544]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	430b      	orrs	r3, r1
 80049e0:	497f      	ldr	r1, [pc, #508]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	604b      	str	r3, [r1, #4]
 80049e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80049ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	fa93 f2a3 	rbit	r2, r3
 8004a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a0a:	601a      	str	r2, [r3, #0]
  return result;
 8004a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	461a      	mov	r2, r3
 8004a28:	2301      	movs	r3, #1
 8004a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fd f8b0 	bl	8001b90 <HAL_GetTick>
 8004a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a34:	e009      	b.n	8004a4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a36:	f7fd f8ab 	bl	8001b90 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e144      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fa93 f2a3 	rbit	r2, r3
 8004a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a6e:	601a      	str	r2, [r3, #0]
  return result;
 8004a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCC_OscConfig+0xe2c>
 8004a8e:	4b54      	ldr	r3, [pc, #336]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	e027      	b.n	8004ae4 <HAL_RCC_OscConfig+0xe7c>
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	fa93 f2a3 	rbit	r2, r3
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	fa93 f2a3 	rbit	r2, r3
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ae8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004aec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004af0:	6011      	str	r1, [r2, #0]
 8004af2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	fa92 f1a2 	rbit	r1, r2
 8004b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b08:	6011      	str	r1, [r2, #0]
  return result;
 8004b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	fab2 f282 	clz	r2, r2
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	f042 0220 	orr.w	r2, r2, #32
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	f002 021f 	and.w	r2, r2, #31
 8004b24:	2101      	movs	r1, #1
 8004b26:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d082      	beq.n	8004a36 <HAL_RCC_OscConfig+0xdce>
 8004b30:	e0cf      	b.n	8004cd2 <HAL_RCC_OscConfig+0x106a>
 8004b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	fa93 f2a3 	rbit	r2, r3
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b56:	601a      	str	r2, [r3, #0]
  return result;
 8004b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	461a      	mov	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fd f80a 	bl	8001b90 <HAL_GetTick>
 8004b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b80:	e009      	b.n	8004b96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fd f805 	bl	8001b90 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e09e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bba:	601a      	str	r2, [r3, #0]
  return result;
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d104      	bne.n	8004be4 <HAL_RCC_OscConfig+0xf7c>
 8004bda:	4b01      	ldr	r3, [pc, #4]	; (8004be0 <HAL_RCC_OscConfig+0xf78>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	e029      	b.n	8004c34 <HAL_RCC_OscConfig+0xfcc>
 8004be0:	40021000 	.word	0x40021000
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	fa93 f2a3 	rbit	r2, r3
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	4b2b      	ldr	r3, [pc, #172]	; (8004ce0 <HAL_RCC_OscConfig+0x1078>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	fa92 f1a2 	rbit	r1, r2
 8004c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c58:	6011      	str	r1, [r2, #0]
  return result;
 8004c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	fab2 f282 	clz	r2, r2
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	f042 0220 	orr.w	r2, r2, #32
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	f002 021f 	and.w	r2, r2, #31
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f202 	lsl.w	r2, r1, r2
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d180      	bne.n	8004b82 <HAL_RCC_OscConfig+0xf1a>
 8004c80:	e027      	b.n	8004cd2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e01e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <HAL_RCC_OscConfig+0x1078>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004ca2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004caa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d10b      	bne.n	8004cce <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b09e      	sub	sp, #120	; 0x78
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e162      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cfc:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d910      	bls.n	8004d2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	4b8d      	ldr	r3, [pc, #564]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f023 0207 	bic.w	r2, r3, #7
 8004d12:	498b      	ldr	r1, [pc, #556]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1a:	4b89      	ldr	r3, [pc, #548]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d001      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e14a      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d38:	4b82      	ldr	r3, [pc, #520]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	497f      	ldr	r1, [pc, #508]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 80dc 	beq.w	8004f10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d13c      	bne.n	8004dda <HAL_RCC_ClockConfig+0xf6>
 8004d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d70:	fab3 f383 	clz	r3, r3
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d102      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xa6>
 8004d84:	4b6f      	ldr	r3, [pc, #444]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	e00f      	b.n	8004daa <HAL_RCC_ClockConfig+0xc6>
 8004d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	667b      	str	r3, [r7, #100]	; 0x64
 8004d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da6:	4b67      	ldr	r3, [pc, #412]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dae:	65ba      	str	r2, [r7, #88]	; 0x58
 8004db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db2:	fa92 f2a2 	rbit	r2, r2
 8004db6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dba:	fab2 f282 	clz	r2, r2
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	f042 0220 	orr.w	r2, r2, #32
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f002 021f 	and.w	r2, r2, #31
 8004dca:	2101      	movs	r1, #1
 8004dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d17b      	bne.n	8004ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0f3      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d13c      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x178>
 8004de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x128>
 8004e06:	4b4f      	ldr	r3, [pc, #316]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	e00f      	b.n	8004e2c <HAL_RCC_ClockConfig+0x148>
 8004e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	647b      	str	r3, [r7, #68]	; 0x44
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e30:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e34:	fa92 f2a2 	rbit	r2, r2
 8004e38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e3c:	fab2 f282 	clz	r2, r2
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	f042 0220 	orr.w	r2, r2, #32
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	f002 021f 	and.w	r2, r2, #31
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d13a      	bne.n	8004ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0b2      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	fa93 f3a3 	rbit	r3, r3
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x1a0>
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e00d      	b.n	8004ea0 <HAL_RCC_ClockConfig+0x1bc>
 8004e84:	2302      	movs	r3, #2
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	fa93 f3a3 	rbit	r3, r3
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e90:	2302      	movs	r3, #2
 8004e92:	623b      	str	r3, [r7, #32]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	61ba      	str	r2, [r7, #24]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	fa92 f2a2 	rbit	r2, r2
 8004eaa:	617a      	str	r2, [r7, #20]
  return result;
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	fab2 f282 	clz	r2, r2
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	f042 0220 	orr.w	r2, r2, #32
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	f002 021f 	and.w	r2, r2, #31
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e079      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	491a      	ldr	r1, [pc, #104]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7fc fe56 	bl	8001b90 <HAL_GetTick>
 8004ee4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7fc fe52 	bl	8001b90 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e061      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b11      	ldr	r3, [pc, #68]	; (8004f44 <HAL_RCC_ClockConfig+0x260>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1eb      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d214      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f023 0207 	bic.w	r2, r3, #7
 8004f26:	4906      	ldr	r1, [pc, #24]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <HAL_RCC_ClockConfig+0x25c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e040      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x2de>
 8004f40:	40022000 	.word	0x40022000
 8004f44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_RCC_ClockConfig+0x2e8>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	491a      	ldr	r1, [pc, #104]	; (8004fcc <HAL_RCC_ClockConfig+0x2e8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f72:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x2e8>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4912      	ldr	r1, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x2e8>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f86:	f000 f829 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <HAL_RCC_ClockConfig+0x2e8>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f94:	22f0      	movs	r2, #240	; 0xf0
 8004f96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	fa92 f2a2 	rbit	r2, r2
 8004f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	fab2 f282 	clz	r2, r2
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	40d3      	lsrs	r3, r2
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_ClockConfig+0x2ec>)
 8004fac:	5cd3      	ldrb	r3, [r2, r3]
 8004fae:	fa21 f303 	lsr.w	r3, r1, r3
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <HAL_RCC_ClockConfig+0x2f0>)
 8004fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <HAL_RCC_ClockConfig+0x2f4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc fda4 	bl	8001b08 <HAL_InitTick>
  
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3778      	adds	r7, #120	; 0x78
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	08008764 	.word	0x08008764
 8004fd4:	20000024 	.word	0x20000024
 8004fd8:	20000028 	.word	0x20000028

08004fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b08b      	sub	sp, #44	; 0x2c
 8004fe0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b04      	cmp	r3, #4
 8005004:	d002      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x30>
 8005006:	2b08      	cmp	r3, #8
 8005008:	d003      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x36>
 800500a:	e03c      	b.n	8005086 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800500c:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800500e:	623b      	str	r3, [r7, #32]
      break;
 8005010:	e03c      	b.n	800508c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005018:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800501c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	fa92 f2a2 	rbit	r2, r2
 8005024:	607a      	str	r2, [r7, #4]
  return result;
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	fab2 f282 	clz	r2, r2
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	40d3      	lsrs	r3, r2
 8005030:	4a1c      	ldr	r2, [pc, #112]	; (80050a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005032:	5cd3      	ldrb	r3, [r2, r3]
 8005034:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005036:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	220f      	movs	r2, #15
 8005040:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	fa92 f2a2 	rbit	r2, r2
 8005048:	60fa      	str	r2, [r7, #12]
  return result;
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	fab2 f282 	clz	r2, r2
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	40d3      	lsrs	r3, r2
 8005054:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005056:	5cd3      	ldrb	r3, [r2, r3]
 8005058:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005064:	4a0e      	ldr	r2, [pc, #56]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	fbb2 f2f3 	udiv	r2, r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
 8005074:	e004      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	4a0c      	ldr	r2, [pc, #48]	; (80050ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	623b      	str	r3, [r7, #32]
      break;
 8005084:	e002      	b.n	800508c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005088:	623b      	str	r3, [r7, #32]
      break;
 800508a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508c:	6a3b      	ldr	r3, [r7, #32]
}
 800508e:	4618      	mov	r0, r3
 8005090:	372c      	adds	r7, #44	; 0x2c
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	007a1200 	.word	0x007a1200
 80050a4:	0800877c 	.word	0x0800877c
 80050a8:	0800878c 	.word	0x0800878c
 80050ac:	003d0900 	.word	0x003d0900

080050b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b4:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000024 	.word	0x20000024

080050c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050ce:	f7ff ffef 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 80050d2:	4601      	mov	r1, r0
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	fa92 f2a2 	rbit	r2, r2
 80050e8:	603a      	str	r2, [r7, #0]
  return result;
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	fab2 f282 	clz	r2, r2
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	40d3      	lsrs	r3, r2
 80050f4:	4a04      	ldr	r2, [pc, #16]	; (8005108 <HAL_RCC_GetPCLK1Freq+0x40>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	08008774 	.word	0x08008774

0800510c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005112:	f7ff ffcd 	bl	80050b0 <HAL_RCC_GetHCLKFreq>
 8005116:	4601      	mov	r1, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005120:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005124:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	fa92 f2a2 	rbit	r2, r2
 800512c:	603a      	str	r2, [r7, #0]
  return result;
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	fab2 f282 	clz	r2, r2
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	40d3      	lsrs	r3, r2
 8005138:	4a04      	ldr	r2, [pc, #16]	; (800514c <HAL_RCC_GetPCLK2Freq+0x40>)
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005140:	4618      	mov	r0, r3
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000
 800514c:	08008774 	.word	0x08008774

08005150 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b092      	sub	sp, #72	; 0x48
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80d4 	beq.w	800531c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005174:	4b4e      	ldr	r3, [pc, #312]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10e      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518a:	61d3      	str	r3, [r2, #28]
 800518c:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005198:	2301      	movs	r3, #1
 800519a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d118      	bne.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051aa:	4b42      	ldr	r3, [pc, #264]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a41      	ldr	r2, [pc, #260]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b6:	f7fc fceb 	bl	8001b90 <HAL_GetTick>
 80051ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7fc fce7 	bl	8001b90 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b64      	cmp	r3, #100	; 0x64
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e169      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	4b38      	ldr	r3, [pc, #224]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8084 	beq.w	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d07c      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800520a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005216:	fab3 f383 	clz	r3, r3
 800521a:	b2db      	uxtb	r3, r3
 800521c:	461a      	mov	r2, r3
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	461a      	mov	r2, r3
 8005226:	2301      	movs	r3, #1
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800522e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	fa93 f3a3 	rbit	r3, r3
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800523a:	fab3 f383 	clz	r3, r3
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	461a      	mov	r2, r3
 800524a:	2300      	movs	r3, #0
 800524c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800524e:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005252:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d04b      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fc fc97 	bl	8001b90 <HAL_GetTick>
 8005262:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	e00a      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fc fc93 	bl	8001b90 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e113      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800527c:	2302      	movs	r3, #2
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
 8005288:	2302      	movs	r3, #2
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	61fb      	str	r3, [r7, #28]
  return result;
 8005294:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005296:	fab3 f383 	clz	r3, r3
 800529a:	b2db      	uxtb	r3, r3
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f043 0302 	orr.w	r3, r3, #2
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d108      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052aa:	4b01      	ldr	r3, [pc, #4]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	e00d      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40007000 	.word	0x40007000
 80052b8:	10908100 	.word	0x10908100
 80052bc:	2302      	movs	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	fa93 f3a3 	rbit	r3, r3
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	4b78      	ldr	r3, [pc, #480]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2202      	movs	r2, #2
 80052ce:	613a      	str	r2, [r7, #16]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	fa92 f2a2 	rbit	r2, r2
 80052d6:	60fa      	str	r2, [r7, #12]
  return result;
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	fab2 f282 	clz	r2, r2
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f002 021f 	and.w	r2, r2, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0b7      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	496a      	ldr	r1, [pc, #424]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005304:	4313      	orrs	r3, r2
 8005306:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005308:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b66      	ldr	r3, [pc, #408]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005328:	4b60      	ldr	r3, [pc, #384]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	f023 0203 	bic.w	r2, r3, #3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	495d      	ldr	r1, [pc, #372]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005346:	4b59      	ldr	r3, [pc, #356]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	4956      	ldr	r1, [pc, #344]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005354:	4313      	orrs	r3, r2
 8005356:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d008      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005364:	4b51      	ldr	r3, [pc, #324]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	494e      	ldr	r1, [pc, #312]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d008      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005382:	4b4a      	ldr	r3, [pc, #296]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f023 0210 	bic.w	r2, r3, #16
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4947      	ldr	r1, [pc, #284]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053a0:	4b42      	ldr	r3, [pc, #264]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	493f      	ldr	r1, [pc, #252]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053be:	4b3b      	ldr	r3, [pc, #236]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	f023 0220 	bic.w	r2, r3, #32
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	4938      	ldr	r1, [pc, #224]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b33      	ldr	r3, [pc, #204]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	4930      	ldr	r1, [pc, #192]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fa:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	4929      	ldr	r1, [pc, #164]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005408:	4313      	orrs	r3, r2
 800540a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005414:	2b00      	cmp	r3, #0
 8005416:	d008      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005418:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	4921      	ldr	r1, [pc, #132]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	491a      	ldr	r1, [pc, #104]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005444:	4313      	orrs	r3, r2
 8005446:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005454:	4b15      	ldr	r3, [pc, #84]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	4912      	ldr	r1, [pc, #72]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005462:	4313      	orrs	r3, r2
 8005464:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	490b      	ldr	r1, [pc, #44]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005480:	4313      	orrs	r3, r2
 8005482:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005490:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	4903      	ldr	r1, [pc, #12]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3748      	adds	r7, #72	; 0x48
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40021000 	.word	0x40021000

080054b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e09d      	b.n	80055fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d108      	bne.n	80054dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d2:	d009      	beq.n	80054e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	61da      	str	r2, [r3, #28]
 80054da:	e005      	b.n	80054e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fc f8d4 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005528:	d902      	bls.n	8005530 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e002      	b.n	8005536 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005534:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800553e:	d007      	beq.n	8005550 <HAL_SPI_Init+0xa0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	ea42 0103 	orr.w	r1, r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	f003 0204 	and.w	r2, r3, #4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055cc:	ea42 0103 	orr.w	r1, r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e049      	b.n	80056ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fc f881 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3304      	adds	r3, #4
 8005642:	4619      	mov	r1, r3
 8005644:	4610      	mov	r0, r2
 8005646:	f000 fc25 	bl	8005e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d001      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e04a      	b.n	8005762 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <HAL_TIM_Base_Start_IT+0xbc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x6c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d013      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x6c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_TIM_Base_Start_IT+0xc0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x6c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_TIM_Base_Start_IT+0xc4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x6c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_TIM_Base_Start_IT+0xc8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x6c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a19      	ldr	r2, [pc, #100]	; (8005780 <HAL_TIM_Base_Start_IT+0xcc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d115      	bne.n	800574c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	4b17      	ldr	r3, [pc, #92]	; (8005784 <HAL_TIM_Base_Start_IT+0xd0>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b06      	cmp	r3, #6
 8005730:	d015      	beq.n	800575e <HAL_TIM_Base_Start_IT+0xaa>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d011      	beq.n	800575e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	e008      	b.n	800575e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e000      	b.n	8005760 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40013400 	.word	0x40013400
 8005780:	40014000 	.word	0x40014000
 8005784:	00010007 	.word	0x00010007

08005788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e049      	b.n	800582e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f841 	bl	8005836 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 fb64 	bl	8005e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005836:	b480      	push	{r7}
 8005838:	b083      	sub	sp, #12
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d122      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d11b      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0202 	mvn.w	r2, #2
 8005876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fae2 	bl	8005e56 <HAL_TIM_IC_CaptureCallback>
 8005892:	e005      	b.n	80058a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fad4 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fae5 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d122      	bne.n	80058fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d11b      	bne.n	80058fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f06f 0204 	mvn.w	r2, #4
 80058ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fab8 	bl	8005e56 <HAL_TIM_IC_CaptureCallback>
 80058e6:	e005      	b.n	80058f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 faaa 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fabb 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d122      	bne.n	800594e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11b      	bne.n	800594e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f06f 0208 	mvn.w	r2, #8
 800591e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fa8e 	bl	8005e56 <HAL_TIM_IC_CaptureCallback>
 800593a:	e005      	b.n	8005948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fa80 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa91 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b10      	cmp	r3, #16
 800595a:	d122      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0310 	and.w	r3, r3, #16
 8005966:	2b10      	cmp	r3, #16
 8005968:	d11b      	bne.n	80059a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0210 	mvn.w	r2, #16
 8005972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2208      	movs	r2, #8
 8005978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fa64 	bl	8005e56 <HAL_TIM_IC_CaptureCallback>
 800598e:	e005      	b.n	800599c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa56 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa67 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10e      	bne.n	80059ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0201 	mvn.w	r2, #1
 80059c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fb fd3b 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d10e      	bne.n	80059fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d107      	bne.n	80059fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fed7 	bl	80067a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a08:	d10e      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d107      	bne.n	8005a28 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 feca 	bl	80067bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d10e      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b40      	cmp	r3, #64	; 0x40
 8005a42:	d107      	bne.n	8005a54 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa15 	bl	8005e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d10e      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d107      	bne.n	8005a80 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f06f 0220 	mvn.w	r2, #32
 8005a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe8a 	bl	8006794 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a80:	bf00      	nop
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0ff      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b14      	cmp	r3, #20
 8005ab2:	f200 80f0 	bhi.w	8005c96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005c97 	.word	0x08005c97
 8005ac4:	08005c97 	.word	0x08005c97
 8005ac8:	08005c97 	.word	0x08005c97
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005c97 	.word	0x08005c97
 8005ad4:	08005c97 	.word	0x08005c97
 8005ad8:	08005c97 	.word	0x08005c97
 8005adc:	08005b93 	.word	0x08005b93
 8005ae0:	08005c97 	.word	0x08005c97
 8005ae4:	08005c97 	.word	0x08005c97
 8005ae8:	08005c97 	.word	0x08005c97
 8005aec:	08005bd3 	.word	0x08005bd3
 8005af0:	08005c97 	.word	0x08005c97
 8005af4:	08005c97 	.word	0x08005c97
 8005af8:	08005c97 	.word	0x08005c97
 8005afc:	08005c15 	.word	0x08005c15
 8005b00:	08005c97 	.word	0x08005c97
 8005b04:	08005c97 	.word	0x08005c97
 8005b08:	08005c97 	.word	0x08005c97
 8005b0c:	08005c55 	.word	0x08005c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa4c 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0208 	orr.w	r2, r2, #8
 8005b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6999      	ldr	r1, [r3, #24]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	619a      	str	r2, [r3, #24]
      break;
 8005b4e:	e0a5      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68b9      	ldr	r1, [r7, #8]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fabc 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699a      	ldr	r2, [r3, #24]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6999      	ldr	r1, [r3, #24]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	619a      	str	r2, [r3, #24]
      break;
 8005b90:	e084      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fb25 	bl	80061e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69da      	ldr	r2, [r3, #28]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0208 	orr.w	r2, r2, #8
 8005bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0204 	bic.w	r2, r2, #4
 8005bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69d9      	ldr	r1, [r3, #28]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	61da      	str	r2, [r3, #28]
      break;
 8005bd0:	e064      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68b9      	ldr	r1, [r7, #8]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fb8d 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69da      	ldr	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69d9      	ldr	r1, [r3, #28]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	021a      	lsls	r2, r3, #8
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	61da      	str	r2, [r3, #28]
      break;
 8005c12:	e043      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 fbd6 	bl	80063cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0208 	orr.w	r2, r2, #8
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0204 	bic.w	r2, r2, #4
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c52:	e023      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fc1a 	bl	8006494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c94:	e002      	b.n	8005c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop

08005cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_ConfigClockSource+0x1c>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e0b6      	b.n	8005e3a <HAL_TIM_ConfigClockSource+0x18a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d08:	d03e      	beq.n	8005d88 <HAL_TIM_ConfigClockSource+0xd8>
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0e:	f200 8087 	bhi.w	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	f000 8086 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x176>
 8005d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1e:	d87f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d20:	2b70      	cmp	r3, #112	; 0x70
 8005d22:	d01a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xaa>
 8005d24:	2b70      	cmp	r3, #112	; 0x70
 8005d26:	d87b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d28:	2b60      	cmp	r3, #96	; 0x60
 8005d2a:	d050      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x11e>
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d877      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d30:	2b50      	cmp	r3, #80	; 0x50
 8005d32:	d03c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0xfe>
 8005d34:	2b50      	cmp	r3, #80	; 0x50
 8005d36:	d873      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d38:	2b40      	cmp	r3, #64	; 0x40
 8005d3a:	d058      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x13e>
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d86f      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d40:	2b30      	cmp	r3, #48	; 0x30
 8005d42:	d064      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15e>
 8005d44:	2b30      	cmp	r3, #48	; 0x30
 8005d46:	d86b      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d060      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15e>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d867      	bhi.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d05c      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15e>
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d05a      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x15e>
 8005d58:	e062      	b.n	8005e20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6899      	ldr	r1, [r3, #8]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f000 fc73 	bl	8006654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	609a      	str	r2, [r3, #8]
      break;
 8005d86:	e04f      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6899      	ldr	r1, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f000 fc5c 	bl	8006654 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005daa:	609a      	str	r2, [r3, #8]
      break;
 8005dac:	e03c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fbd0 	bl	8006560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2150      	movs	r1, #80	; 0x50
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fc29 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e02c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fbef 	bl	80065be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2160      	movs	r1, #96	; 0x60
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fc19 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005dec:	e01c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 fbb0 	bl	8006560 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2140      	movs	r1, #64	; 0x40
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fc09 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e00c      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 fc00 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005e1e:	e003      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a3c      	ldr	r2, [pc, #240]	; (8005f98 <TIM_Base_SetConfig+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00f      	beq.n	8005ecc <TIM_Base_SetConfig+0x38>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d00b      	beq.n	8005ecc <TIM_Base_SetConfig+0x38>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a39      	ldr	r2, [pc, #228]	; (8005f9c <TIM_Base_SetConfig+0x108>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_Base_SetConfig+0x38>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a38      	ldr	r2, [pc, #224]	; (8005fa0 <TIM_Base_SetConfig+0x10c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_Base_SetConfig+0x38>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <TIM_Base_SetConfig+0x110>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	; (8005f98 <TIM_Base_SetConfig+0x104>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01b      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eec:	d017      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2a      	ldr	r2, [pc, #168]	; (8005f9c <TIM_Base_SetConfig+0x108>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a29      	ldr	r2, [pc, #164]	; (8005fa0 <TIM_Base_SetConfig+0x10c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00f      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <TIM_Base_SetConfig+0x110>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00b      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a27      	ldr	r2, [pc, #156]	; (8005fa8 <TIM_Base_SetConfig+0x114>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d007      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a26      	ldr	r2, [pc, #152]	; (8005fac <TIM_Base_SetConfig+0x118>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d003      	beq.n	8005f1e <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a25      	ldr	r2, [pc, #148]	; (8005fb0 <TIM_Base_SetConfig+0x11c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d108      	bne.n	8005f30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <TIM_Base_SetConfig+0x104>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_Base_SetConfig+0xe8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <TIM_Base_SetConfig+0x110>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_Base_SetConfig+0xe8>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <TIM_Base_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_Base_SetConfig+0xe8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <TIM_Base_SetConfig+0x118>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0xe8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a0e      	ldr	r2, [pc, #56]	; (8005fb0 <TIM_Base_SetConfig+0x11c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40012c00 	.word	0x40012c00
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <TIM_OC1_SetConfig+0x10c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <TIM_OC1_SetConfig+0x110>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <TIM_OC1_SetConfig+0x114>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <TIM_OC1_SetConfig+0x118>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d10c      	bne.n	800604e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0308 	bic.w	r3, r3, #8
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0304 	bic.w	r3, r3, #4
 800604c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <TIM_OC1_SetConfig+0x10c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <TIM_OC1_SetConfig+0x110>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <TIM_OC1_SetConfig+0x114>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_OC1_SetConfig+0x118>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <TIM_OC2_SetConfig+0x100>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x6c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <TIM_OC2_SetConfig+0x104>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10d      	bne.n	800615c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <TIM_OC2_SetConfig+0x100>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00f      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <TIM_OC2_SetConfig+0x104>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <TIM_OC2_SetConfig+0x108>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <TIM_OC2_SetConfig+0x10c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <TIM_OC2_SetConfig+0x110>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d113      	bne.n	80061ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006192:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40013400 	.word	0x40013400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <TIM_OC3_SetConfig+0xfc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_OC3_SetConfig+0x6a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <TIM_OC3_SetConfig+0x100>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10d      	bne.n	800626e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800626c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <TIM_OC3_SetConfig+0xfc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1b      	ldr	r2, [pc, #108]	; (80062e8 <TIM_OC3_SetConfig+0x100>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1a      	ldr	r2, [pc, #104]	; (80062ec <TIM_OC3_SetConfig+0x104>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <TIM_OC3_SetConfig+0x108>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <TIM_OC3_SetConfig+0x10c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d113      	bne.n	80062be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_OC4_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00f      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC4_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00b      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC4_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <TIM_OC4_SetConfig+0xcc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <TIM_OC4_SetConfig+0xd0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <TIM_OC5_SetConfig+0xb4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a16      	ldr	r2, [pc, #88]	; (8006484 <TIM_OC5_SetConfig+0xb8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <TIM_OC5_SetConfig+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <TIM_OC5_SetConfig+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <TIM_OC5_SetConfig+0xc4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d109      	bne.n	800645a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <TIM_OC6_SetConfig+0xb8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <TIM_OC6_SetConfig+0xbc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a16      	ldr	r2, [pc, #88]	; (8006554 <TIM_OC6_SetConfig+0xc0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <TIM_OC6_SetConfig+0xc4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <TIM_OC6_SetConfig+0xc8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0201 	bic.w	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800658a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 030a 	bic.w	r3, r3, #10
 800659c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065be:	b480      	push	{r7}
 80065c0:	b087      	sub	sp, #28
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f023 0210 	bic.w	r2, r3, #16
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	f043 0307 	orr.w	r3, r3, #7
 8006640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	431a      	orrs	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e063      	b.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d004      	beq.n	80066e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a1b      	ldr	r2, [pc, #108]	; (8006780 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d018      	beq.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800671e:	d013      	beq.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00e      	beq.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a17      	ldr	r2, [pc, #92]	; (800678c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d009      	beq.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a12      	ldr	r2, [pc, #72]	; (8006784 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d004      	beq.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a13      	ldr	r2, [pc, #76]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d10c      	bne.n	8006762 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800674e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	4313      	orrs	r3, r2
 8006758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40012c00 	.word	0x40012c00
 8006784:	40013400 	.word	0x40013400
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40014000 	.word	0x40014000

08006794 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e040      	b.n	8006864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fb f816 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2224      	movs	r2, #36	; 0x24
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0201 	bic.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc00 	bl	8007014 <UART_SetConfig>
 8006814:	4603      	mov	r3, r0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e022      	b.n	8006864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fdc8 	bl	80073bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800683a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800684a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fe4f 	bl	8007500 <UART_CheckIdleState>
 8006862:	4603      	mov	r3, r0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006880:	2b20      	cmp	r3, #32
 8006882:	d178      	bne.n	8006976 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_UART_Transmit+0x24>
 800688a:	88fb      	ldrh	r3, [r7, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e071      	b.n	8006978 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2221      	movs	r2, #33	; 0x21
 80068a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068a2:	f7fb f975 	bl	8001b90 <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c0:	d108      	bne.n	80068d4 <HAL_UART_Transmit+0x68>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d104      	bne.n	80068d4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e003      	b.n	80068dc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068dc:	e030      	b.n	8006940 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2200      	movs	r2, #0
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 feb1 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2220      	movs	r2, #32
 80068f8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e03c      	b.n	8006978 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10b      	bne.n	800691c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	881a      	ldrh	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006910:	b292      	uxth	r2, r2
 8006912:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	3302      	adds	r3, #2
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	e008      	b.n	800692e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	b292      	uxth	r2, r2
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3301      	adds	r3, #1
 800692c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1c8      	bne.n	80068de <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	2140      	movs	r1, #64	; 0x40
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fe7a 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2220      	movs	r2, #32
 8006966:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e005      	b.n	8006978 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006994:	2b20      	cmp	r3, #32
 8006996:	d132      	bne.n	80069fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_UART_Receive_IT+0x24>
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e02b      	b.n	8006a00 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d018      	beq.n	80069ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	69f9      	ldr	r1, [r7, #28]
 80069e0:	6a3a      	ldr	r2, [r7, #32]
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e6      	bne.n	80069bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	461a      	mov	r2, r3
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 fe93 	bl	8007720 <UART_Start_Receive_IT>
 80069fa:	4603      	mov	r3, r0
 80069fc:	e000      	b.n	8006a00 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3728      	adds	r7, #40	; 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b0ba      	sub	sp, #232	; 0xe8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a32:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a36:	4013      	ands	r3, r2
 8006a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d115      	bne.n	8006a70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d009      	beq.n	8006a70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 82ab 	beq.w	8006fbc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
      }
      return;
 8006a6e:	e2a5      	b.n	8006fbc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8117 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006a86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006a8a:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <HAL_UART_IRQHandler+0x298>)
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 810a 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d011      	beq.n	8006ac4 <HAL_UART_IRQHandler+0xbc>
 8006aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aba:	f043 0201 	orr.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d011      	beq.n	8006af4 <HAL_UART_IRQHandler+0xec>
 8006ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aea:	f043 0204 	orr.w	r2, r3, #4
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d011      	beq.n	8006b24 <HAL_UART_IRQHandler+0x11c>
 8006b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2204      	movs	r2, #4
 8006b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1a:	f043 0202 	orr.w	r2, r3, #2
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b34:	f003 0320 	and.w	r3, r3, #32
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b56:	f043 0208 	orr.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d012      	beq.n	8006b92 <HAL_UART_IRQHandler+0x18a>
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 8211 	beq.w	8006fc0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00d      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d005      	beq.n	8006bea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04f      	beq.n	8006c8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fe4c 	bl	8007888 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d141      	bne.n	8006c82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d9      	bne.n	8006bfe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <HAL_UART_IRQHandler+0x29c>)
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fc fc08 	bl	8003474 <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d017      	beq.n	8006c9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00f      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9b4 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e00b      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9b0 	bl	8006fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e007      	b.n	8006c9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9ac 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006c98:	e192      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	bf00      	nop
    return;
 8006c9c:	e190      	b.n	8006fc0 <HAL_UART_IRQHandler+0x5b8>
 8006c9e:	bf00      	nop
 8006ca0:	04000120 	.word	0x04000120
 8006ca4:	08007951 	.word	0x08007951

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 814b 	bne.w	8006f48 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 8144 	beq.w	8006f48 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 813d 	beq.w	8006f48 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce0:	2b40      	cmp	r3, #64	; 0x40
 8006ce2:	f040 80b5 	bne.w	8006e50 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8164 	beq.w	8006fc4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f080 815c 	bcs.w	8006fc4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	f000 8086 	beq.w	8006e2e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1da      	bne.n	8006d22 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d76:	e853 3f00 	ldrex	r3, [r3]
 8006d7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d7e:	f023 0301 	bic.w	r3, r3, #1
 8006d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e1      	bne.n	8006d6c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e3      	bne.n	8006da8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfe:	f023 0310 	bic.w	r3, r3, #16
 8006e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e4      	bne.n	8006dee <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fc faea 	bl	8003402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f8d7 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e4e:	e0b9      	b.n	8006fc4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80ab 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 80a6 	beq.w	8006fc8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e4      	bne.n	8006e7c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e3      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	69b9      	ldr	r1, [r7, #24]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e4      	bne.n	8006efe <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f85b 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f46:	e03f      	b.n	8006fc8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00e      	beq.n	8006f72 <HAL_UART_IRQHandler+0x56a>
 8006f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fed8 	bl	8007d20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f70:	e02d      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d008      	beq.n	8006f9c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d01c      	beq.n	8006fcc <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
    }
    return;
 8006f9a:	e017      	b.n	8006fcc <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_UART_IRQHandler+0x5c6>
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fce1 	bl	800797c <UART_EndTransmit_IT>
    return;
 8006fba:	e008      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fbc:	bf00      	nop
 8006fbe:	e006      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
    return;
 8006fc0:	bf00      	nop
 8006fc2:	e004      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fc4:	bf00      	nop
 8006fc6:	e002      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
      return;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <HAL_UART_IRQHandler+0x5c6>
    return;
 8006fcc:	bf00      	nop
  }

}
 8006fce:	37e8      	adds	r7, #232	; 0xe8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	4313      	orrs	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007042:	f023 030c 	bic.w	r3, r3, #12
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	430b      	orrs	r3, r1
 800704e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4313      	orrs	r3, r2
 8007074:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	430a      	orrs	r2, r1
 8007088:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4aa7      	ldr	r2, [pc, #668]	; (800732c <UART_SetConfig+0x318>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d120      	bne.n	80070d6 <UART_SetConfig+0xc2>
 8007094:	4ba6      	ldr	r3, [pc, #664]	; (8007330 <UART_SetConfig+0x31c>)
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	2b03      	cmp	r3, #3
 800709e:	d817      	bhi.n	80070d0 <UART_SetConfig+0xbc>
 80070a0:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x94>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	080070c5 	.word	0x080070c5
 80070b0:	080070cb 	.word	0x080070cb
 80070b4:	080070bf 	.word	0x080070bf
 80070b8:	2301      	movs	r3, #1
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e0b5      	b.n	800722a <UART_SetConfig+0x216>
 80070be:	2302      	movs	r3, #2
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e0b2      	b.n	800722a <UART_SetConfig+0x216>
 80070c4:	2304      	movs	r3, #4
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e0af      	b.n	800722a <UART_SetConfig+0x216>
 80070ca:	2308      	movs	r3, #8
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e0ac      	b.n	800722a <UART_SetConfig+0x216>
 80070d0:	2310      	movs	r3, #16
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e0a9      	b.n	800722a <UART_SetConfig+0x216>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a96      	ldr	r2, [pc, #600]	; (8007334 <UART_SetConfig+0x320>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d124      	bne.n	800712a <UART_SetConfig+0x116>
 80070e0:	4b93      	ldr	r3, [pc, #588]	; (8007330 <UART_SetConfig+0x31c>)
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070ec:	d011      	beq.n	8007112 <UART_SetConfig+0xfe>
 80070ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070f2:	d817      	bhi.n	8007124 <UART_SetConfig+0x110>
 80070f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070f8:	d011      	beq.n	800711e <UART_SetConfig+0x10a>
 80070fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070fe:	d811      	bhi.n	8007124 <UART_SetConfig+0x110>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <UART_SetConfig+0xf8>
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007108:	d006      	beq.n	8007118 <UART_SetConfig+0x104>
 800710a:	e00b      	b.n	8007124 <UART_SetConfig+0x110>
 800710c:	2300      	movs	r3, #0
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e08b      	b.n	800722a <UART_SetConfig+0x216>
 8007112:	2302      	movs	r3, #2
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e088      	b.n	800722a <UART_SetConfig+0x216>
 8007118:	2304      	movs	r3, #4
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e085      	b.n	800722a <UART_SetConfig+0x216>
 800711e:	2308      	movs	r3, #8
 8007120:	77fb      	strb	r3, [r7, #31]
 8007122:	e082      	b.n	800722a <UART_SetConfig+0x216>
 8007124:	2310      	movs	r3, #16
 8007126:	77fb      	strb	r3, [r7, #31]
 8007128:	e07f      	b.n	800722a <UART_SetConfig+0x216>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a82      	ldr	r2, [pc, #520]	; (8007338 <UART_SetConfig+0x324>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d124      	bne.n	800717e <UART_SetConfig+0x16a>
 8007134:	4b7e      	ldr	r3, [pc, #504]	; (8007330 <UART_SetConfig+0x31c>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007138:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800713c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007140:	d011      	beq.n	8007166 <UART_SetConfig+0x152>
 8007142:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007146:	d817      	bhi.n	8007178 <UART_SetConfig+0x164>
 8007148:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800714c:	d011      	beq.n	8007172 <UART_SetConfig+0x15e>
 800714e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007152:	d811      	bhi.n	8007178 <UART_SetConfig+0x164>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <UART_SetConfig+0x14c>
 8007158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800715c:	d006      	beq.n	800716c <UART_SetConfig+0x158>
 800715e:	e00b      	b.n	8007178 <UART_SetConfig+0x164>
 8007160:	2300      	movs	r3, #0
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e061      	b.n	800722a <UART_SetConfig+0x216>
 8007166:	2302      	movs	r3, #2
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e05e      	b.n	800722a <UART_SetConfig+0x216>
 800716c:	2304      	movs	r3, #4
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e05b      	b.n	800722a <UART_SetConfig+0x216>
 8007172:	2308      	movs	r3, #8
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e058      	b.n	800722a <UART_SetConfig+0x216>
 8007178:	2310      	movs	r3, #16
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e055      	b.n	800722a <UART_SetConfig+0x216>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a6e      	ldr	r2, [pc, #440]	; (800733c <UART_SetConfig+0x328>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d124      	bne.n	80071d2 <UART_SetConfig+0x1be>
 8007188:	4b69      	ldr	r3, [pc, #420]	; (8007330 <UART_SetConfig+0x31c>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007194:	d011      	beq.n	80071ba <UART_SetConfig+0x1a6>
 8007196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800719a:	d817      	bhi.n	80071cc <UART_SetConfig+0x1b8>
 800719c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a0:	d011      	beq.n	80071c6 <UART_SetConfig+0x1b2>
 80071a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071a6:	d811      	bhi.n	80071cc <UART_SetConfig+0x1b8>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <UART_SetConfig+0x1a0>
 80071ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071b0:	d006      	beq.n	80071c0 <UART_SetConfig+0x1ac>
 80071b2:	e00b      	b.n	80071cc <UART_SetConfig+0x1b8>
 80071b4:	2300      	movs	r3, #0
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e037      	b.n	800722a <UART_SetConfig+0x216>
 80071ba:	2302      	movs	r3, #2
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e034      	b.n	800722a <UART_SetConfig+0x216>
 80071c0:	2304      	movs	r3, #4
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e031      	b.n	800722a <UART_SetConfig+0x216>
 80071c6:	2308      	movs	r3, #8
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e02e      	b.n	800722a <UART_SetConfig+0x216>
 80071cc:	2310      	movs	r3, #16
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e02b      	b.n	800722a <UART_SetConfig+0x216>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a5a      	ldr	r2, [pc, #360]	; (8007340 <UART_SetConfig+0x32c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d124      	bne.n	8007226 <UART_SetConfig+0x212>
 80071dc:	4b54      	ldr	r3, [pc, #336]	; (8007330 <UART_SetConfig+0x31c>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80071e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071e8:	d011      	beq.n	800720e <UART_SetConfig+0x1fa>
 80071ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071ee:	d817      	bhi.n	8007220 <UART_SetConfig+0x20c>
 80071f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071f4:	d011      	beq.n	800721a <UART_SetConfig+0x206>
 80071f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071fa:	d811      	bhi.n	8007220 <UART_SetConfig+0x20c>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <UART_SetConfig+0x1f4>
 8007200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007204:	d006      	beq.n	8007214 <UART_SetConfig+0x200>
 8007206:	e00b      	b.n	8007220 <UART_SetConfig+0x20c>
 8007208:	2300      	movs	r3, #0
 800720a:	77fb      	strb	r3, [r7, #31]
 800720c:	e00d      	b.n	800722a <UART_SetConfig+0x216>
 800720e:	2302      	movs	r3, #2
 8007210:	77fb      	strb	r3, [r7, #31]
 8007212:	e00a      	b.n	800722a <UART_SetConfig+0x216>
 8007214:	2304      	movs	r3, #4
 8007216:	77fb      	strb	r3, [r7, #31]
 8007218:	e007      	b.n	800722a <UART_SetConfig+0x216>
 800721a:	2308      	movs	r3, #8
 800721c:	77fb      	strb	r3, [r7, #31]
 800721e:	e004      	b.n	800722a <UART_SetConfig+0x216>
 8007220:	2310      	movs	r3, #16
 8007222:	77fb      	strb	r3, [r7, #31]
 8007224:	e001      	b.n	800722a <UART_SetConfig+0x216>
 8007226:	2310      	movs	r3, #16
 8007228:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007232:	d15b      	bne.n	80072ec <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b08      	cmp	r3, #8
 8007238:	d827      	bhi.n	800728a <UART_SetConfig+0x276>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x22c>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007265 	.word	0x08007265
 8007244:	0800726d 	.word	0x0800726d
 8007248:	08007275 	.word	0x08007275
 800724c:	0800728b 	.word	0x0800728b
 8007250:	0800727b 	.word	0x0800727b
 8007254:	0800728b 	.word	0x0800728b
 8007258:	0800728b 	.word	0x0800728b
 800725c:	0800728b 	.word	0x0800728b
 8007260:	08007283 	.word	0x08007283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007264:	f7fd ff30 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8007268:	61b8      	str	r0, [r7, #24]
        break;
 800726a:	e013      	b.n	8007294 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800726c:	f7fd ff4e 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8007270:	61b8      	str	r0, [r7, #24]
        break;
 8007272:	e00f      	b.n	8007294 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007274:	4b33      	ldr	r3, [pc, #204]	; (8007344 <UART_SetConfig+0x330>)
 8007276:	61bb      	str	r3, [r7, #24]
        break;
 8007278:	e00c      	b.n	8007294 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727a:	f7fd feaf 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 800727e:	61b8      	str	r0, [r7, #24]
        break;
 8007280:	e008      	b.n	8007294 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007286:	61bb      	str	r3, [r7, #24]
        break;
 8007288:	e004      	b.n	8007294 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	77bb      	strb	r3, [r7, #30]
        break;
 8007292:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8082 	beq.w	80073a0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	005a      	lsls	r2, r3, #1
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	085b      	lsrs	r3, r3, #1
 80072a6:	441a      	add	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	2b0f      	cmp	r3, #15
 80072b6:	d916      	bls.n	80072e6 <UART_SetConfig+0x2d2>
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072be:	d212      	bcs.n	80072e6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f023 030f 	bic.w	r3, r3, #15
 80072c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	89fb      	ldrh	r3, [r7, #14]
 80072d8:	4313      	orrs	r3, r2
 80072da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	89fa      	ldrh	r2, [r7, #14]
 80072e2:	60da      	str	r2, [r3, #12]
 80072e4:	e05c      	b.n	80073a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	77bb      	strb	r3, [r7, #30]
 80072ea:	e059      	b.n	80073a0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ec:	7ffb      	ldrb	r3, [r7, #31]
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d835      	bhi.n	800735e <UART_SetConfig+0x34a>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <UART_SetConfig+0x2e4>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	08007325 	.word	0x08007325
 8007300:	08007349 	.word	0x08007349
 8007304:	0800735f 	.word	0x0800735f
 8007308:	0800734f 	.word	0x0800734f
 800730c:	0800735f 	.word	0x0800735f
 8007310:	0800735f 	.word	0x0800735f
 8007314:	0800735f 	.word	0x0800735f
 8007318:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800731c:	f7fd fed4 	bl	80050c8 <HAL_RCC_GetPCLK1Freq>
 8007320:	61b8      	str	r0, [r7, #24]
        break;
 8007322:	e021      	b.n	8007368 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fd fef2 	bl	800510c <HAL_RCC_GetPCLK2Freq>
 8007328:	61b8      	str	r0, [r7, #24]
        break;
 800732a:	e01d      	b.n	8007368 <UART_SetConfig+0x354>
 800732c:	40013800 	.word	0x40013800
 8007330:	40021000 	.word	0x40021000
 8007334:	40004400 	.word	0x40004400
 8007338:	40004800 	.word	0x40004800
 800733c:	40004c00 	.word	0x40004c00
 8007340:	40005000 	.word	0x40005000
 8007344:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b1b      	ldr	r3, [pc, #108]	; (80073b8 <UART_SetConfig+0x3a4>)
 800734a:	61bb      	str	r3, [r7, #24]
        break;
 800734c:	e00c      	b.n	8007368 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fd fe45 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8007352:	61b8      	str	r0, [r7, #24]
        break;
 8007354:	e008      	b.n	8007368 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735a:	61bb      	str	r3, [r7, #24]
        break;
 800735c:	e004      	b.n	8007368 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	77bb      	strb	r3, [r7, #30]
        break;
 8007366:	bf00      	nop
    }

    if (pclk != 0U)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d018      	beq.n	80073a0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	085a      	lsrs	r2, r3, #1
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	441a      	add	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007380:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b0f      	cmp	r3, #15
 8007386:	d909      	bls.n	800739c <UART_SetConfig+0x388>
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738e:	d205      	bcs.n	800739c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	b29a      	uxth	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e001      	b.n	80073a0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	007a1200 	.word	0x007a1200

080073bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ba:	d10a      	bne.n	80074d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b098      	sub	sp, #96	; 0x60
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007510:	f7fa fb3e 	bl	8001b90 <HAL_GetTick>
 8007514:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b08      	cmp	r3, #8
 8007522:	d12e      	bne.n	8007582 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800752c:	2200      	movs	r2, #0
 800752e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f88c 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d021      	beq.n	8007582 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800754c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	653b      	str	r3, [r7, #80]	; 0x50
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755c:	647b      	str	r3, [r7, #68]	; 0x44
 800755e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800756a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e6      	bne.n	800753e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2220      	movs	r2, #32
 8007574:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e062      	b.n	8007648 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b04      	cmp	r3, #4
 800758e:	d149      	bne.n	8007624 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007590:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007598:	2200      	movs	r2, #0
 800759a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f856 	bl	8007650 <UART_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03c      	beq.n	8007624 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	623b      	str	r3, [r7, #32]
   return(result);
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	633b      	str	r3, [r7, #48]	; 0x30
 80075ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	61fa      	str	r2, [r7, #28]
 80075fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e5      	bne.n	80075dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e011      	b.n	8007648 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3758      	adds	r7, #88	; 0x58
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007660:	e049      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d045      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766a:	f7fa fa91 	bl	8001b90 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <UART_WaitOnFlagUntilTimeout+0x30>
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e048      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d031      	beq.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b08      	cmp	r3, #8
 800769e:	d110      	bne.n	80076c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2208      	movs	r2, #8
 80076a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 f8ed 	bl	8007888 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2208      	movs	r2, #8
 80076b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e029      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d0:	d111      	bne.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f8d3 	bl	8007888 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e00f      	b.n	8007716 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69da      	ldr	r2, [r3, #28]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4013      	ands	r3, r2
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	429a      	cmp	r2, r3
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	429a      	cmp	r2, r3
 8007712:	d0a6      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007720:	b480      	push	{r7}
 8007722:	b097      	sub	sp, #92	; 0x5c
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007752:	d10e      	bne.n	8007772 <UART_Start_Receive_IT+0x52>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <UART_Start_Receive_IT+0x48>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007766:	e01a      	b.n	800779e <UART_Start_Receive_IT+0x7e>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	22ff      	movs	r2, #255	; 0xff
 800776c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007770:	e015      	b.n	800779e <UART_Start_Receive_IT+0x7e>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10d      	bne.n	8007796 <UART_Start_Receive_IT+0x76>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d104      	bne.n	800778c <UART_Start_Receive_IT+0x6c>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	22ff      	movs	r2, #255	; 0xff
 8007786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800778a:	e008      	b.n	800779e <UART_Start_Receive_IT+0x7e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	227f      	movs	r2, #127	; 0x7f
 8007790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007794:	e003      	b.n	800779e <UART_Start_Receive_IT+0x7e>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2222      	movs	r2, #34	; 0x22
 80077aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	f043 0301 	orr.w	r3, r3, #1
 80077c4:	657b      	str	r3, [r7, #84]	; 0x54
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80077d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d107      	bne.n	80077fc <UART_Start_Receive_IT+0xdc>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a22      	ldr	r2, [pc, #136]	; (8007880 <UART_Start_Receive_IT+0x160>)
 80077f8:	669a      	str	r2, [r3, #104]	; 0x68
 80077fa:	e002      	b.n	8007802 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <UART_Start_Receive_IT+0x164>)
 8007800:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d019      	beq.n	800783e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800781e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
 800782a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800782e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e6      	bne.n	800780a <UART_Start_Receive_IT+0xea>
 800783c:	e018      	b.n	8007870 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	613b      	str	r3, [r7, #16]
   return(result);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f043 0320 	orr.w	r3, r3, #32
 8007852:	653b      	str	r3, [r7, #80]	; 0x50
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785c:	623b      	str	r3, [r7, #32]
 800785e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69f9      	ldr	r1, [r7, #28]
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	61bb      	str	r3, [r7, #24]
   return(result);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	375c      	adds	r7, #92	; 0x5c
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	08007b79 	.word	0x08007b79
 8007884:	080079d1 	.word	0x080079d1

08007888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007888:	b480      	push	{r7}
 800788a:	b095      	sub	sp, #84	; 0x54
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ae:	643b      	str	r3, [r7, #64]	; 0x40
 80078b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e6      	bne.n	8007890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	f023 0301 	bic.w	r3, r3, #1
 80078d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d118      	bne.n	8007930 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	60bb      	str	r3, [r7, #8]
   return(result);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f023 0310 	bic.w	r3, r3, #16
 8007912:	647b      	str	r3, [r7, #68]	; 0x44
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6979      	ldr	r1, [r7, #20]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	613b      	str	r3, [r7, #16]
   return(result);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007944:	bf00      	nop
 8007946:	3754      	adds	r7, #84	; 0x54
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fb3a 	bl	8006fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	60bb      	str	r3, [r7, #8]
   return(result);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6979      	ldr	r1, [r7, #20]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	613b      	str	r3, [r7, #16]
   return(result);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e6      	bne.n	8007984 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff fb06 	bl	8006fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c8:	bf00      	nop
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b09c      	sub	sp, #112	; 0x70
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e8:	2b22      	cmp	r3, #34	; 0x22
 80079ea:	f040 80b9 	bne.w	8007b60 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80079fc:	b2d9      	uxtb	r1, r3
 80079fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a08:	400a      	ands	r2, r1
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	3b01      	subs	r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 809c 	bne.w	8007b70 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e6      	bne.n	8007a38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	667b      	str	r3, [r7, #100]	; 0x64
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a8a:	647a      	str	r2, [r7, #68]	; 0x44
 8007a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d018      	beq.n	8007af2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e6      	bne.n	8007ac0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d12e      	bne.n	8007b58 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f023 0310 	bic.w	r3, r3, #16
 8007b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	69b9      	ldr	r1, [r7, #24]
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1e6      	bne.n	8007b00 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d103      	bne.n	8007b48 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2210      	movs	r2, #16
 8007b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fa53 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b56:	e00b      	b.n	8007b70 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7f9 fc91 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 8007b5e:	e007      	b.n	8007b70 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0208 	orr.w	r2, r2, #8
 8007b6e:	619a      	str	r2, [r3, #24]
}
 8007b70:	bf00      	nop
 8007b72:	3770      	adds	r7, #112	; 0x70
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b09c      	sub	sp, #112	; 0x70
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b90:	2b22      	cmp	r3, #34	; 0x22
 8007b92:	f040 80b9 	bne.w	8007d08 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ba6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007baa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007bae:	4013      	ands	r3, r2
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bb4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 809c 	bne.w	8007d18 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8007c00:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e6      	bne.n	8007be0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3308      	adds	r3, #8
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	f023 0301 	bic.w	r3, r3, #1
 8007c28:	663b      	str	r3, [r7, #96]	; 0x60
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c32:	643a      	str	r2, [r7, #64]	; 0x40
 8007c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d018      	beq.n	8007c9a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d12e      	bne.n	8007d00 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0310 	bic.w	r3, r3, #16
 8007cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d103      	bne.n	8007cf0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2210      	movs	r2, #16
 8007cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff f97f 	bl	8006ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cfe:	e00b      	b.n	8007d18 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7f9 fbbd 	bl	8001480 <HAL_UART_RxCpltCallback>
}
 8007d06:	e007      	b.n	8007d18 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0208 	orr.w	r2, r2, #8
 8007d16:	619a      	str	r2, [r3, #24]
}
 8007d18:	bf00      	nop
 8007d1a:	3770      	adds	r7, #112	; 0x70
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d3c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	43db      	mvns	r3, r3
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	4013      	ands	r3, r2
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	f107 0014 	add.w	r0, r7, #20
 8007d78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	b004      	add	sp, #16
 8007daa:	4770      	bx	lr

08007dac <__errno>:
 8007dac:	4b01      	ldr	r3, [pc, #4]	; (8007db4 <__errno+0x8>)
 8007dae:	6818      	ldr	r0, [r3, #0]
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000030 	.word	0x20000030

08007db8 <__libc_init_array>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4d0d      	ldr	r5, [pc, #52]	; (8007df0 <__libc_init_array+0x38>)
 8007dbc:	4c0d      	ldr	r4, [pc, #52]	; (8007df4 <__libc_init_array+0x3c>)
 8007dbe:	1b64      	subs	r4, r4, r5
 8007dc0:	10a4      	asrs	r4, r4, #2
 8007dc2:	2600      	movs	r6, #0
 8007dc4:	42a6      	cmp	r6, r4
 8007dc6:	d109      	bne.n	8007ddc <__libc_init_array+0x24>
 8007dc8:	4d0b      	ldr	r5, [pc, #44]	; (8007df8 <__libc_init_array+0x40>)
 8007dca:	4c0c      	ldr	r4, [pc, #48]	; (8007dfc <__libc_init_array+0x44>)
 8007dcc:	f000 fc8e 	bl	80086ec <_init>
 8007dd0:	1b64      	subs	r4, r4, r5
 8007dd2:	10a4      	asrs	r4, r4, #2
 8007dd4:	2600      	movs	r6, #0
 8007dd6:	42a6      	cmp	r6, r4
 8007dd8:	d105      	bne.n	8007de6 <__libc_init_array+0x2e>
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de0:	4798      	blx	r3
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7ee      	b.n	8007dc4 <__libc_init_array+0xc>
 8007de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dea:	4798      	blx	r3
 8007dec:	3601      	adds	r6, #1
 8007dee:	e7f2      	b.n	8007dd6 <__libc_init_array+0x1e>
 8007df0:	080087d0 	.word	0x080087d0
 8007df4:	080087d0 	.word	0x080087d0
 8007df8:	080087d0 	.word	0x080087d0
 8007dfc:	080087d4 	.word	0x080087d4

08007e00 <memset>:
 8007e00:	4402      	add	r2, r0
 8007e02:	4603      	mov	r3, r0
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d100      	bne.n	8007e0a <memset+0xa>
 8007e08:	4770      	bx	lr
 8007e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e0e:	e7f9      	b.n	8007e04 <memset+0x4>

08007e10 <siprintf>:
 8007e10:	b40e      	push	{r1, r2, r3}
 8007e12:	b500      	push	{lr}
 8007e14:	b09c      	sub	sp, #112	; 0x70
 8007e16:	ab1d      	add	r3, sp, #116	; 0x74
 8007e18:	9002      	str	r0, [sp, #8]
 8007e1a:	9006      	str	r0, [sp, #24]
 8007e1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <siprintf+0x38>)
 8007e22:	9107      	str	r1, [sp, #28]
 8007e24:	9104      	str	r1, [sp, #16]
 8007e26:	4909      	ldr	r1, [pc, #36]	; (8007e4c <siprintf+0x3c>)
 8007e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2c:	9105      	str	r1, [sp, #20]
 8007e2e:	6800      	ldr	r0, [r0, #0]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	a902      	add	r1, sp, #8
 8007e34:	f000 f868 	bl	8007f08 <_svfiprintf_r>
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
 8007e3e:	b01c      	add	sp, #112	; 0x70
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	20000030 	.word	0x20000030
 8007e4c:	ffff0208 	.word	0xffff0208

08007e50 <__ssputs_r>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	688e      	ldr	r6, [r1, #8]
 8007e56:	429e      	cmp	r6, r3
 8007e58:	4682      	mov	sl, r0
 8007e5a:	460c      	mov	r4, r1
 8007e5c:	4690      	mov	r8, r2
 8007e5e:	461f      	mov	r7, r3
 8007e60:	d838      	bhi.n	8007ed4 <__ssputs_r+0x84>
 8007e62:	898a      	ldrh	r2, [r1, #12]
 8007e64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e68:	d032      	beq.n	8007ed0 <__ssputs_r+0x80>
 8007e6a:	6825      	ldr	r5, [r4, #0]
 8007e6c:	6909      	ldr	r1, [r1, #16]
 8007e6e:	eba5 0901 	sub.w	r9, r5, r1
 8007e72:	6965      	ldr	r5, [r4, #20]
 8007e74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	444b      	add	r3, r9
 8007e80:	106d      	asrs	r5, r5, #1
 8007e82:	429d      	cmp	r5, r3
 8007e84:	bf38      	it	cc
 8007e86:	461d      	movcc	r5, r3
 8007e88:	0553      	lsls	r3, r2, #21
 8007e8a:	d531      	bpl.n	8007ef0 <__ssputs_r+0xa0>
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	f000 fb63 	bl	8008558 <_malloc_r>
 8007e92:	4606      	mov	r6, r0
 8007e94:	b950      	cbnz	r0, 8007eac <__ssputs_r+0x5c>
 8007e96:	230c      	movs	r3, #12
 8007e98:	f8ca 3000 	str.w	r3, [sl]
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea2:	81a3      	strh	r3, [r4, #12]
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eac:	6921      	ldr	r1, [r4, #16]
 8007eae:	464a      	mov	r2, r9
 8007eb0:	f000 fabe 	bl	8008430 <memcpy>
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	6126      	str	r6, [r4, #16]
 8007ec2:	6165      	str	r5, [r4, #20]
 8007ec4:	444e      	add	r6, r9
 8007ec6:	eba5 0509 	sub.w	r5, r5, r9
 8007eca:	6026      	str	r6, [r4, #0]
 8007ecc:	60a5      	str	r5, [r4, #8]
 8007ece:	463e      	mov	r6, r7
 8007ed0:	42be      	cmp	r6, r7
 8007ed2:	d900      	bls.n	8007ed6 <__ssputs_r+0x86>
 8007ed4:	463e      	mov	r6, r7
 8007ed6:	6820      	ldr	r0, [r4, #0]
 8007ed8:	4632      	mov	r2, r6
 8007eda:	4641      	mov	r1, r8
 8007edc:	f000 fab6 	bl	800844c <memmove>
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	1b9b      	subs	r3, r3, r6
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	4433      	add	r3, r6
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	2000      	movs	r0, #0
 8007eee:	e7db      	b.n	8007ea8 <__ssputs_r+0x58>
 8007ef0:	462a      	mov	r2, r5
 8007ef2:	f000 fba5 	bl	8008640 <_realloc_r>
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1e1      	bne.n	8007ec0 <__ssputs_r+0x70>
 8007efc:	6921      	ldr	r1, [r4, #16]
 8007efe:	4650      	mov	r0, sl
 8007f00:	f000 fabe 	bl	8008480 <_free_r>
 8007f04:	e7c7      	b.n	8007e96 <__ssputs_r+0x46>
	...

08007f08 <_svfiprintf_r>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	898b      	ldrh	r3, [r1, #12]
 8007f10:	061b      	lsls	r3, r3, #24
 8007f12:	b09d      	sub	sp, #116	; 0x74
 8007f14:	4607      	mov	r7, r0
 8007f16:	460d      	mov	r5, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	d50e      	bpl.n	8007f3a <_svfiprintf_r+0x32>
 8007f1c:	690b      	ldr	r3, [r1, #16]
 8007f1e:	b963      	cbnz	r3, 8007f3a <_svfiprintf_r+0x32>
 8007f20:	2140      	movs	r1, #64	; 0x40
 8007f22:	f000 fb19 	bl	8008558 <_malloc_r>
 8007f26:	6028      	str	r0, [r5, #0]
 8007f28:	6128      	str	r0, [r5, #16]
 8007f2a:	b920      	cbnz	r0, 8007f36 <_svfiprintf_r+0x2e>
 8007f2c:	230c      	movs	r3, #12
 8007f2e:	603b      	str	r3, [r7, #0]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e0d1      	b.n	80080da <_svfiprintf_r+0x1d2>
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	616b      	str	r3, [r5, #20]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	2320      	movs	r3, #32
 8007f40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f48:	2330      	movs	r3, #48	; 0x30
 8007f4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080f4 <_svfiprintf_r+0x1ec>
 8007f4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f52:	f04f 0901 	mov.w	r9, #1
 8007f56:	4623      	mov	r3, r4
 8007f58:	469a      	mov	sl, r3
 8007f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f5e:	b10a      	cbz	r2, 8007f64 <_svfiprintf_r+0x5c>
 8007f60:	2a25      	cmp	r2, #37	; 0x25
 8007f62:	d1f9      	bne.n	8007f58 <_svfiprintf_r+0x50>
 8007f64:	ebba 0b04 	subs.w	fp, sl, r4
 8007f68:	d00b      	beq.n	8007f82 <_svfiprintf_r+0x7a>
 8007f6a:	465b      	mov	r3, fp
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ff6d 	bl	8007e50 <__ssputs_r>
 8007f76:	3001      	adds	r0, #1
 8007f78:	f000 80aa 	beq.w	80080d0 <_svfiprintf_r+0x1c8>
 8007f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f7e:	445a      	add	r2, fp
 8007f80:	9209      	str	r2, [sp, #36]	; 0x24
 8007f82:	f89a 3000 	ldrb.w	r3, [sl]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a2 	beq.w	80080d0 <_svfiprintf_r+0x1c8>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f96:	f10a 0a01 	add.w	sl, sl, #1
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9307      	str	r3, [sp, #28]
 8007f9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa4:	4654      	mov	r4, sl
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fac:	4851      	ldr	r0, [pc, #324]	; (80080f4 <_svfiprintf_r+0x1ec>)
 8007fae:	f7f8 f917 	bl	80001e0 <memchr>
 8007fb2:	9a04      	ldr	r2, [sp, #16]
 8007fb4:	b9d8      	cbnz	r0, 8007fee <_svfiprintf_r+0xe6>
 8007fb6:	06d0      	lsls	r0, r2, #27
 8007fb8:	bf44      	itt	mi
 8007fba:	2320      	movmi	r3, #32
 8007fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc0:	0711      	lsls	r1, r2, #28
 8007fc2:	bf44      	itt	mi
 8007fc4:	232b      	movmi	r3, #43	; 0x2b
 8007fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fca:	f89a 3000 	ldrb.w	r3, [sl]
 8007fce:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd0:	d015      	beq.n	8007ffe <_svfiprintf_r+0xf6>
 8007fd2:	9a07      	ldr	r2, [sp, #28]
 8007fd4:	4654      	mov	r4, sl
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f04f 0c0a 	mov.w	ip, #10
 8007fdc:	4621      	mov	r1, r4
 8007fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	2b09      	cmp	r3, #9
 8007fe6:	d94e      	bls.n	8008086 <_svfiprintf_r+0x17e>
 8007fe8:	b1b0      	cbz	r0, 8008018 <_svfiprintf_r+0x110>
 8007fea:	9207      	str	r2, [sp, #28]
 8007fec:	e014      	b.n	8008018 <_svfiprintf_r+0x110>
 8007fee:	eba0 0308 	sub.w	r3, r0, r8
 8007ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	46a2      	mov	sl, r4
 8007ffc:	e7d2      	b.n	8007fa4 <_svfiprintf_r+0x9c>
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	9103      	str	r1, [sp, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	bfbb      	ittet	lt
 800800a:	425b      	neglt	r3, r3
 800800c:	f042 0202 	orrlt.w	r2, r2, #2
 8008010:	9307      	strge	r3, [sp, #28]
 8008012:	9307      	strlt	r3, [sp, #28]
 8008014:	bfb8      	it	lt
 8008016:	9204      	strlt	r2, [sp, #16]
 8008018:	7823      	ldrb	r3, [r4, #0]
 800801a:	2b2e      	cmp	r3, #46	; 0x2e
 800801c:	d10c      	bne.n	8008038 <_svfiprintf_r+0x130>
 800801e:	7863      	ldrb	r3, [r4, #1]
 8008020:	2b2a      	cmp	r3, #42	; 0x2a
 8008022:	d135      	bne.n	8008090 <_svfiprintf_r+0x188>
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	1d1a      	adds	r2, r3, #4
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	9203      	str	r2, [sp, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfb8      	it	lt
 8008030:	f04f 33ff 	movlt.w	r3, #4294967295
 8008034:	3402      	adds	r4, #2
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008104 <_svfiprintf_r+0x1fc>
 800803c:	7821      	ldrb	r1, [r4, #0]
 800803e:	2203      	movs	r2, #3
 8008040:	4650      	mov	r0, sl
 8008042:	f7f8 f8cd 	bl	80001e0 <memchr>
 8008046:	b140      	cbz	r0, 800805a <_svfiprintf_r+0x152>
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	eba0 000a 	sub.w	r0, r0, sl
 800804e:	fa03 f000 	lsl.w	r0, r3, r0
 8008052:	9b04      	ldr	r3, [sp, #16]
 8008054:	4303      	orrs	r3, r0
 8008056:	3401      	adds	r4, #1
 8008058:	9304      	str	r3, [sp, #16]
 800805a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805e:	4826      	ldr	r0, [pc, #152]	; (80080f8 <_svfiprintf_r+0x1f0>)
 8008060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008064:	2206      	movs	r2, #6
 8008066:	f7f8 f8bb 	bl	80001e0 <memchr>
 800806a:	2800      	cmp	r0, #0
 800806c:	d038      	beq.n	80080e0 <_svfiprintf_r+0x1d8>
 800806e:	4b23      	ldr	r3, [pc, #140]	; (80080fc <_svfiprintf_r+0x1f4>)
 8008070:	bb1b      	cbnz	r3, 80080ba <_svfiprintf_r+0x1b2>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	3307      	adds	r3, #7
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	3308      	adds	r3, #8
 800807c:	9303      	str	r3, [sp, #12]
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	4433      	add	r3, r6
 8008082:	9309      	str	r3, [sp, #36]	; 0x24
 8008084:	e767      	b.n	8007f56 <_svfiprintf_r+0x4e>
 8008086:	fb0c 3202 	mla	r2, ip, r2, r3
 800808a:	460c      	mov	r4, r1
 800808c:	2001      	movs	r0, #1
 800808e:	e7a5      	b.n	8007fdc <_svfiprintf_r+0xd4>
 8008090:	2300      	movs	r3, #0
 8008092:	3401      	adds	r4, #1
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	4619      	mov	r1, r3
 8008098:	f04f 0c0a 	mov.w	ip, #10
 800809c:	4620      	mov	r0, r4
 800809e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a2:	3a30      	subs	r2, #48	; 0x30
 80080a4:	2a09      	cmp	r2, #9
 80080a6:	d903      	bls.n	80080b0 <_svfiprintf_r+0x1a8>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0c5      	beq.n	8008038 <_svfiprintf_r+0x130>
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	e7c3      	b.n	8008038 <_svfiprintf_r+0x130>
 80080b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b4:	4604      	mov	r4, r0
 80080b6:	2301      	movs	r3, #1
 80080b8:	e7f0      	b.n	800809c <_svfiprintf_r+0x194>
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	462a      	mov	r2, r5
 80080c0:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <_svfiprintf_r+0x1f8>)
 80080c2:	a904      	add	r1, sp, #16
 80080c4:	4638      	mov	r0, r7
 80080c6:	f3af 8000 	nop.w
 80080ca:	1c42      	adds	r2, r0, #1
 80080cc:	4606      	mov	r6, r0
 80080ce:	d1d6      	bne.n	800807e <_svfiprintf_r+0x176>
 80080d0:	89ab      	ldrh	r3, [r5, #12]
 80080d2:	065b      	lsls	r3, r3, #25
 80080d4:	f53f af2c 	bmi.w	8007f30 <_svfiprintf_r+0x28>
 80080d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080da:	b01d      	add	sp, #116	; 0x74
 80080dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	ab03      	add	r3, sp, #12
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	462a      	mov	r2, r5
 80080e6:	4b06      	ldr	r3, [pc, #24]	; (8008100 <_svfiprintf_r+0x1f8>)
 80080e8:	a904      	add	r1, sp, #16
 80080ea:	4638      	mov	r0, r7
 80080ec:	f000 f87a 	bl	80081e4 <_printf_i>
 80080f0:	e7eb      	b.n	80080ca <_svfiprintf_r+0x1c2>
 80080f2:	bf00      	nop
 80080f4:	0800879c 	.word	0x0800879c
 80080f8:	080087a6 	.word	0x080087a6
 80080fc:	00000000 	.word	0x00000000
 8008100:	08007e51 	.word	0x08007e51
 8008104:	080087a2 	.word	0x080087a2

08008108 <_printf_common>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	4699      	mov	r9, r3
 8008110:	688a      	ldr	r2, [r1, #8]
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008118:	4293      	cmp	r3, r2
 800811a:	bfb8      	it	lt
 800811c:	4613      	movlt	r3, r2
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008124:	4607      	mov	r7, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b10a      	cbz	r2, 800812e <_printf_common+0x26>
 800812a:	3301      	adds	r3, #1
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	0699      	lsls	r1, r3, #26
 8008132:	bf42      	ittt	mi
 8008134:	6833      	ldrmi	r3, [r6, #0]
 8008136:	3302      	addmi	r3, #2
 8008138:	6033      	strmi	r3, [r6, #0]
 800813a:	6825      	ldr	r5, [r4, #0]
 800813c:	f015 0506 	ands.w	r5, r5, #6
 8008140:	d106      	bne.n	8008150 <_printf_common+0x48>
 8008142:	f104 0a19 	add.w	sl, r4, #25
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	6832      	ldr	r2, [r6, #0]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc26      	bgt.n	800819e <_printf_common+0x96>
 8008150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008154:	1e13      	subs	r3, r2, #0
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	2301      	movne	r3, #1
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d42b      	bmi.n	80081b8 <_printf_common+0xb0>
 8008160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008164:	4649      	mov	r1, r9
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d01e      	beq.n	80081ac <_printf_common+0xa4>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	68e5      	ldr	r5, [r4, #12]
 8008172:	6832      	ldr	r2, [r6, #0]
 8008174:	f003 0306 	and.w	r3, r3, #6
 8008178:	2b04      	cmp	r3, #4
 800817a:	bf08      	it	eq
 800817c:	1aad      	subeq	r5, r5, r2
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	6922      	ldr	r2, [r4, #16]
 8008182:	bf0c      	ite	eq
 8008184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008188:	2500      	movne	r5, #0
 800818a:	4293      	cmp	r3, r2
 800818c:	bfc4      	itt	gt
 800818e:	1a9b      	subgt	r3, r3, r2
 8008190:	18ed      	addgt	r5, r5, r3
 8008192:	2600      	movs	r6, #0
 8008194:	341a      	adds	r4, #26
 8008196:	42b5      	cmp	r5, r6
 8008198:	d11a      	bne.n	80081d0 <_printf_common+0xc8>
 800819a:	2000      	movs	r0, #0
 800819c:	e008      	b.n	80081b0 <_printf_common+0xa8>
 800819e:	2301      	movs	r3, #1
 80081a0:	4652      	mov	r2, sl
 80081a2:	4649      	mov	r1, r9
 80081a4:	4638      	mov	r0, r7
 80081a6:	47c0      	blx	r8
 80081a8:	3001      	adds	r0, #1
 80081aa:	d103      	bne.n	80081b4 <_printf_common+0xac>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	3501      	adds	r5, #1
 80081b6:	e7c6      	b.n	8008146 <_printf_common+0x3e>
 80081b8:	18e1      	adds	r1, r4, r3
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	2030      	movs	r0, #48	; 0x30
 80081be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c2:	4422      	add	r2, r4
 80081c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7c7      	b.n	8008160 <_printf_common+0x58>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4622      	mov	r2, r4
 80081d4:	4649      	mov	r1, r9
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	3001      	adds	r0, #1
 80081dc:	d0e6      	beq.n	80081ac <_printf_common+0xa4>
 80081de:	3601      	adds	r6, #1
 80081e0:	e7d9      	b.n	8008196 <_printf_common+0x8e>
	...

080081e4 <_printf_i>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	7e0f      	ldrb	r7, [r1, #24]
 80081ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081ec:	2f78      	cmp	r7, #120	; 0x78
 80081ee:	4691      	mov	r9, r2
 80081f0:	4680      	mov	r8, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	469a      	mov	sl, r3
 80081f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081fa:	d807      	bhi.n	800820c <_printf_i+0x28>
 80081fc:	2f62      	cmp	r7, #98	; 0x62
 80081fe:	d80a      	bhi.n	8008216 <_printf_i+0x32>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f000 80d8 	beq.w	80083b6 <_printf_i+0x1d2>
 8008206:	2f58      	cmp	r7, #88	; 0x58
 8008208:	f000 80a3 	beq.w	8008352 <_printf_i+0x16e>
 800820c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008214:	e03a      	b.n	800828c <_printf_i+0xa8>
 8008216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800821a:	2b15      	cmp	r3, #21
 800821c:	d8f6      	bhi.n	800820c <_printf_i+0x28>
 800821e:	a101      	add	r1, pc, #4	; (adr r1, 8008224 <_printf_i+0x40>)
 8008220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008291 	.word	0x08008291
 800822c:	0800820d 	.word	0x0800820d
 8008230:	0800820d 	.word	0x0800820d
 8008234:	0800820d 	.word	0x0800820d
 8008238:	0800820d 	.word	0x0800820d
 800823c:	08008291 	.word	0x08008291
 8008240:	0800820d 	.word	0x0800820d
 8008244:	0800820d 	.word	0x0800820d
 8008248:	0800820d 	.word	0x0800820d
 800824c:	0800820d 	.word	0x0800820d
 8008250:	0800839d 	.word	0x0800839d
 8008254:	080082c1 	.word	0x080082c1
 8008258:	0800837f 	.word	0x0800837f
 800825c:	0800820d 	.word	0x0800820d
 8008260:	0800820d 	.word	0x0800820d
 8008264:	080083bf 	.word	0x080083bf
 8008268:	0800820d 	.word	0x0800820d
 800826c:	080082c1 	.word	0x080082c1
 8008270:	0800820d 	.word	0x0800820d
 8008274:	0800820d 	.word	0x0800820d
 8008278:	08008387 	.word	0x08008387
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	602a      	str	r2, [r5, #0]
 8008284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800828c:	2301      	movs	r3, #1
 800828e:	e0a3      	b.n	80083d8 <_printf_i+0x1f4>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	6829      	ldr	r1, [r5, #0]
 8008294:	0606      	lsls	r6, r0, #24
 8008296:	f101 0304 	add.w	r3, r1, #4
 800829a:	d50a      	bpl.n	80082b2 <_printf_i+0xce>
 800829c:	680e      	ldr	r6, [r1, #0]
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	2e00      	cmp	r6, #0
 80082a2:	da03      	bge.n	80082ac <_printf_i+0xc8>
 80082a4:	232d      	movs	r3, #45	; 0x2d
 80082a6:	4276      	negs	r6, r6
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ac:	485e      	ldr	r0, [pc, #376]	; (8008428 <_printf_i+0x244>)
 80082ae:	230a      	movs	r3, #10
 80082b0:	e019      	b.n	80082e6 <_printf_i+0x102>
 80082b2:	680e      	ldr	r6, [r1, #0]
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082ba:	bf18      	it	ne
 80082bc:	b236      	sxthne	r6, r6
 80082be:	e7ef      	b.n	80082a0 <_printf_i+0xbc>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	6820      	ldr	r0, [r4, #0]
 80082c4:	1d19      	adds	r1, r3, #4
 80082c6:	6029      	str	r1, [r5, #0]
 80082c8:	0601      	lsls	r1, r0, #24
 80082ca:	d501      	bpl.n	80082d0 <_printf_i+0xec>
 80082cc:	681e      	ldr	r6, [r3, #0]
 80082ce:	e002      	b.n	80082d6 <_printf_i+0xf2>
 80082d0:	0646      	lsls	r6, r0, #25
 80082d2:	d5fb      	bpl.n	80082cc <_printf_i+0xe8>
 80082d4:	881e      	ldrh	r6, [r3, #0]
 80082d6:	4854      	ldr	r0, [pc, #336]	; (8008428 <_printf_i+0x244>)
 80082d8:	2f6f      	cmp	r7, #111	; 0x6f
 80082da:	bf0c      	ite	eq
 80082dc:	2308      	moveq	r3, #8
 80082de:	230a      	movne	r3, #10
 80082e0:	2100      	movs	r1, #0
 80082e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082e6:	6865      	ldr	r5, [r4, #4]
 80082e8:	60a5      	str	r5, [r4, #8]
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	bfa2      	ittt	ge
 80082ee:	6821      	ldrge	r1, [r4, #0]
 80082f0:	f021 0104 	bicge.w	r1, r1, #4
 80082f4:	6021      	strge	r1, [r4, #0]
 80082f6:	b90e      	cbnz	r6, 80082fc <_printf_i+0x118>
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	d04d      	beq.n	8008398 <_printf_i+0x1b4>
 80082fc:	4615      	mov	r5, r2
 80082fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008302:	fb03 6711 	mls	r7, r3, r1, r6
 8008306:	5dc7      	ldrb	r7, [r0, r7]
 8008308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800830c:	4637      	mov	r7, r6
 800830e:	42bb      	cmp	r3, r7
 8008310:	460e      	mov	r6, r1
 8008312:	d9f4      	bls.n	80082fe <_printf_i+0x11a>
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10b      	bne.n	8008330 <_printf_i+0x14c>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	07de      	lsls	r6, r3, #31
 800831c:	d508      	bpl.n	8008330 <_printf_i+0x14c>
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	6861      	ldr	r1, [r4, #4]
 8008322:	4299      	cmp	r1, r3
 8008324:	bfde      	ittt	le
 8008326:	2330      	movle	r3, #48	; 0x30
 8008328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800832c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008330:	1b52      	subs	r2, r2, r5
 8008332:	6122      	str	r2, [r4, #16]
 8008334:	f8cd a000 	str.w	sl, [sp]
 8008338:	464b      	mov	r3, r9
 800833a:	aa03      	add	r2, sp, #12
 800833c:	4621      	mov	r1, r4
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fee2 	bl	8008108 <_printf_common>
 8008344:	3001      	adds	r0, #1
 8008346:	d14c      	bne.n	80083e2 <_printf_i+0x1fe>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	b004      	add	sp, #16
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	4835      	ldr	r0, [pc, #212]	; (8008428 <_printf_i+0x244>)
 8008354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008358:	6829      	ldr	r1, [r5, #0]
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008360:	6029      	str	r1, [r5, #0]
 8008362:	061d      	lsls	r5, r3, #24
 8008364:	d514      	bpl.n	8008390 <_printf_i+0x1ac>
 8008366:	07df      	lsls	r7, r3, #31
 8008368:	bf44      	itt	mi
 800836a:	f043 0320 	orrmi.w	r3, r3, #32
 800836e:	6023      	strmi	r3, [r4, #0]
 8008370:	b91e      	cbnz	r6, 800837a <_printf_i+0x196>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f023 0320 	bic.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	2310      	movs	r3, #16
 800837c:	e7b0      	b.n	80082e0 <_printf_i+0xfc>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f043 0320 	orr.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	2378      	movs	r3, #120	; 0x78
 8008388:	4828      	ldr	r0, [pc, #160]	; (800842c <_printf_i+0x248>)
 800838a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800838e:	e7e3      	b.n	8008358 <_printf_i+0x174>
 8008390:	0659      	lsls	r1, r3, #25
 8008392:	bf48      	it	mi
 8008394:	b2b6      	uxthmi	r6, r6
 8008396:	e7e6      	b.n	8008366 <_printf_i+0x182>
 8008398:	4615      	mov	r5, r2
 800839a:	e7bb      	b.n	8008314 <_printf_i+0x130>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	6826      	ldr	r6, [r4, #0]
 80083a0:	6961      	ldr	r1, [r4, #20]
 80083a2:	1d18      	adds	r0, r3, #4
 80083a4:	6028      	str	r0, [r5, #0]
 80083a6:	0635      	lsls	r5, r6, #24
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	d501      	bpl.n	80083b0 <_printf_i+0x1cc>
 80083ac:	6019      	str	r1, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <_printf_i+0x1d2>
 80083b0:	0670      	lsls	r0, r6, #25
 80083b2:	d5fb      	bpl.n	80083ac <_printf_i+0x1c8>
 80083b4:	8019      	strh	r1, [r3, #0]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	4615      	mov	r5, r2
 80083bc:	e7ba      	b.n	8008334 <_printf_i+0x150>
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	602a      	str	r2, [r5, #0]
 80083c4:	681d      	ldr	r5, [r3, #0]
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	2100      	movs	r1, #0
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7f7 ff08 	bl	80001e0 <memchr>
 80083d0:	b108      	cbz	r0, 80083d6 <_printf_i+0x1f2>
 80083d2:	1b40      	subs	r0, r0, r5
 80083d4:	6060      	str	r0, [r4, #4]
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	2300      	movs	r3, #0
 80083dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e0:	e7a8      	b.n	8008334 <_printf_i+0x150>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	462a      	mov	r2, r5
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d0ab      	beq.n	8008348 <_printf_i+0x164>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	d413      	bmi.n	800841e <_printf_i+0x23a>
 80083f6:	68e0      	ldr	r0, [r4, #12]
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	4298      	cmp	r0, r3
 80083fc:	bfb8      	it	lt
 80083fe:	4618      	movlt	r0, r3
 8008400:	e7a4      	b.n	800834c <_printf_i+0x168>
 8008402:	2301      	movs	r3, #1
 8008404:	4632      	mov	r2, r6
 8008406:	4649      	mov	r1, r9
 8008408:	4640      	mov	r0, r8
 800840a:	47d0      	blx	sl
 800840c:	3001      	adds	r0, #1
 800840e:	d09b      	beq.n	8008348 <_printf_i+0x164>
 8008410:	3501      	adds	r5, #1
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	9903      	ldr	r1, [sp, #12]
 8008416:	1a5b      	subs	r3, r3, r1
 8008418:	42ab      	cmp	r3, r5
 800841a:	dcf2      	bgt.n	8008402 <_printf_i+0x21e>
 800841c:	e7eb      	b.n	80083f6 <_printf_i+0x212>
 800841e:	2500      	movs	r5, #0
 8008420:	f104 0619 	add.w	r6, r4, #25
 8008424:	e7f5      	b.n	8008412 <_printf_i+0x22e>
 8008426:	bf00      	nop
 8008428:	080087ad 	.word	0x080087ad
 800842c:	080087be 	.word	0x080087be

08008430 <memcpy>:
 8008430:	440a      	add	r2, r1
 8008432:	4291      	cmp	r1, r2
 8008434:	f100 33ff 	add.w	r3, r0, #4294967295
 8008438:	d100      	bne.n	800843c <memcpy+0xc>
 800843a:	4770      	bx	lr
 800843c:	b510      	push	{r4, lr}
 800843e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008446:	4291      	cmp	r1, r2
 8008448:	d1f9      	bne.n	800843e <memcpy+0xe>
 800844a:	bd10      	pop	{r4, pc}

0800844c <memmove>:
 800844c:	4288      	cmp	r0, r1
 800844e:	b510      	push	{r4, lr}
 8008450:	eb01 0402 	add.w	r4, r1, r2
 8008454:	d902      	bls.n	800845c <memmove+0x10>
 8008456:	4284      	cmp	r4, r0
 8008458:	4623      	mov	r3, r4
 800845a:	d807      	bhi.n	800846c <memmove+0x20>
 800845c:	1e43      	subs	r3, r0, #1
 800845e:	42a1      	cmp	r1, r4
 8008460:	d008      	beq.n	8008474 <memmove+0x28>
 8008462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800846a:	e7f8      	b.n	800845e <memmove+0x12>
 800846c:	4402      	add	r2, r0
 800846e:	4601      	mov	r1, r0
 8008470:	428a      	cmp	r2, r1
 8008472:	d100      	bne.n	8008476 <memmove+0x2a>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800847a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800847e:	e7f7      	b.n	8008470 <memmove+0x24>

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d044      	beq.n	8008510 <_free_r+0x90>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f000 f913 	bl	80086c0 <__malloc_lock>
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <_free_r+0x94>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	b933      	cbnz	r3, 80084b0 <_free_r+0x30>
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ac:	f000 b90e 	b.w	80086cc <__malloc_unlock>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d908      	bls.n	80084c6 <_free_r+0x46>
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1949      	addeq	r1, r1, r5
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	e7ed      	b.n	80084a2 <_free_r+0x22>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x50>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x46>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x70>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1e0      	bne.n	80084a6 <_free_r+0x26>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <_free_r+0x26>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x78>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d6      	b.n	80084a6 <_free_r+0x26>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7ca      	b.n	80084a6 <_free_r+0x26>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	2000063c 	.word	0x2000063c

08008518 <sbrk_aligned>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0e      	ldr	r6, [pc, #56]	; (8008554 <sbrk_aligned+0x3c>)
 800851c:	460c      	mov	r4, r1
 800851e:	6831      	ldr	r1, [r6, #0]
 8008520:	4605      	mov	r5, r0
 8008522:	b911      	cbnz	r1, 800852a <sbrk_aligned+0x12>
 8008524:	f000 f8bc 	bl	80086a0 <_sbrk_r>
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 f8b7 	bl	80086a0 <_sbrk_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d00a      	beq.n	800854c <sbrk_aligned+0x34>
 8008536:	1cc4      	adds	r4, r0, #3
 8008538:	f024 0403 	bic.w	r4, r4, #3
 800853c:	42a0      	cmp	r0, r4
 800853e:	d007      	beq.n	8008550 <sbrk_aligned+0x38>
 8008540:	1a21      	subs	r1, r4, r0
 8008542:	4628      	mov	r0, r5
 8008544:	f000 f8ac 	bl	80086a0 <_sbrk_r>
 8008548:	3001      	adds	r0, #1
 800854a:	d101      	bne.n	8008550 <sbrk_aligned+0x38>
 800854c:	f04f 34ff 	mov.w	r4, #4294967295
 8008550:	4620      	mov	r0, r4
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	20000640 	.word	0x20000640

08008558 <_malloc_r>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	1ccd      	adds	r5, r1, #3
 800855e:	f025 0503 	bic.w	r5, r5, #3
 8008562:	3508      	adds	r5, #8
 8008564:	2d0c      	cmp	r5, #12
 8008566:	bf38      	it	cc
 8008568:	250c      	movcc	r5, #12
 800856a:	2d00      	cmp	r5, #0
 800856c:	4607      	mov	r7, r0
 800856e:	db01      	blt.n	8008574 <_malloc_r+0x1c>
 8008570:	42a9      	cmp	r1, r5
 8008572:	d905      	bls.n	8008580 <_malloc_r+0x28>
 8008574:	230c      	movs	r3, #12
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	2600      	movs	r6, #0
 800857a:	4630      	mov	r0, r6
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	4e2e      	ldr	r6, [pc, #184]	; (800863c <_malloc_r+0xe4>)
 8008582:	f000 f89d 	bl	80086c0 <__malloc_lock>
 8008586:	6833      	ldr	r3, [r6, #0]
 8008588:	461c      	mov	r4, r3
 800858a:	bb34      	cbnz	r4, 80085da <_malloc_r+0x82>
 800858c:	4629      	mov	r1, r5
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff ffc2 	bl	8008518 <sbrk_aligned>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	4604      	mov	r4, r0
 8008598:	d14d      	bne.n	8008636 <_malloc_r+0xde>
 800859a:	6834      	ldr	r4, [r6, #0]
 800859c:	4626      	mov	r6, r4
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d140      	bne.n	8008624 <_malloc_r+0xcc>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4631      	mov	r1, r6
 80085a6:	4638      	mov	r0, r7
 80085a8:	eb04 0803 	add.w	r8, r4, r3
 80085ac:	f000 f878 	bl	80086a0 <_sbrk_r>
 80085b0:	4580      	cmp	r8, r0
 80085b2:	d13a      	bne.n	800862a <_malloc_r+0xd2>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	3503      	adds	r5, #3
 80085b8:	1a6d      	subs	r5, r5, r1
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa5 	bl	8008518 <sbrk_aligned>
 80085ce:	3001      	adds	r0, #1
 80085d0:	d02b      	beq.n	800862a <_malloc_r+0xd2>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	442b      	add	r3, r5
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	e00e      	b.n	80085f8 <_malloc_r+0xa0>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	d41e      	bmi.n	800861e <_malloc_r+0xc6>
 80085e0:	2a0b      	cmp	r2, #11
 80085e2:	d916      	bls.n	8008612 <_malloc_r+0xba>
 80085e4:	1961      	adds	r1, r4, r5
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	bf18      	it	ne
 80085ec:	6059      	strne	r1, [r3, #4]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	bf08      	it	eq
 80085f2:	6031      	streq	r1, [r6, #0]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4638      	mov	r0, r7
 80085fa:	f104 060b 	add.w	r6, r4, #11
 80085fe:	f000 f865 	bl	80086cc <__malloc_unlock>
 8008602:	f026 0607 	bic.w	r6, r6, #7
 8008606:	1d23      	adds	r3, r4, #4
 8008608:	1af2      	subs	r2, r6, r3
 800860a:	d0b6      	beq.n	800857a <_malloc_r+0x22>
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	50a3      	str	r3, [r4, r2]
 8008610:	e7b3      	b.n	800857a <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	6032      	streq	r2, [r6, #0]
 800861a:	605a      	strne	r2, [r3, #4]
 800861c:	e7ec      	b.n	80085f8 <_malloc_r+0xa0>
 800861e:	4623      	mov	r3, r4
 8008620:	6864      	ldr	r4, [r4, #4]
 8008622:	e7b2      	b.n	800858a <_malloc_r+0x32>
 8008624:	4634      	mov	r4, r6
 8008626:	6876      	ldr	r6, [r6, #4]
 8008628:	e7b9      	b.n	800859e <_malloc_r+0x46>
 800862a:	230c      	movs	r3, #12
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	4638      	mov	r0, r7
 8008630:	f000 f84c 	bl	80086cc <__malloc_unlock>
 8008634:	e7a1      	b.n	800857a <_malloc_r+0x22>
 8008636:	6025      	str	r5, [r4, #0]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa0>
 800863a:	bf00      	nop
 800863c:	2000063c 	.word	0x2000063c

08008640 <_realloc_r>:
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008644:	4680      	mov	r8, r0
 8008646:	4614      	mov	r4, r2
 8008648:	460e      	mov	r6, r1
 800864a:	b921      	cbnz	r1, 8008656 <_realloc_r+0x16>
 800864c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008650:	4611      	mov	r1, r2
 8008652:	f7ff bf81 	b.w	8008558 <_malloc_r>
 8008656:	b92a      	cbnz	r2, 8008664 <_realloc_r+0x24>
 8008658:	f7ff ff12 	bl	8008480 <_free_r>
 800865c:	4625      	mov	r5, r4
 800865e:	4628      	mov	r0, r5
 8008660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008664:	f000 f838 	bl	80086d8 <_malloc_usable_size_r>
 8008668:	4284      	cmp	r4, r0
 800866a:	4607      	mov	r7, r0
 800866c:	d802      	bhi.n	8008674 <_realloc_r+0x34>
 800866e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008672:	d812      	bhi.n	800869a <_realloc_r+0x5a>
 8008674:	4621      	mov	r1, r4
 8008676:	4640      	mov	r0, r8
 8008678:	f7ff ff6e 	bl	8008558 <_malloc_r>
 800867c:	4605      	mov	r5, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	d0ed      	beq.n	800865e <_realloc_r+0x1e>
 8008682:	42bc      	cmp	r4, r7
 8008684:	4622      	mov	r2, r4
 8008686:	4631      	mov	r1, r6
 8008688:	bf28      	it	cs
 800868a:	463a      	movcs	r2, r7
 800868c:	f7ff fed0 	bl	8008430 <memcpy>
 8008690:	4631      	mov	r1, r6
 8008692:	4640      	mov	r0, r8
 8008694:	f7ff fef4 	bl	8008480 <_free_r>
 8008698:	e7e1      	b.n	800865e <_realloc_r+0x1e>
 800869a:	4635      	mov	r5, r6
 800869c:	e7df      	b.n	800865e <_realloc_r+0x1e>
	...

080086a0 <_sbrk_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_sbrk_r+0x1c>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	602b      	str	r3, [r5, #0]
 80086ac:	f7f9 f9a4 	bl	80019f8 <_sbrk>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d102      	bne.n	80086ba <_sbrk_r+0x1a>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	b103      	cbz	r3, 80086ba <_sbrk_r+0x1a>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd38      	pop	{r3, r4, r5, pc}
 80086bc:	20000644 	.word	0x20000644

080086c0 <__malloc_lock>:
 80086c0:	4801      	ldr	r0, [pc, #4]	; (80086c8 <__malloc_lock+0x8>)
 80086c2:	f000 b811 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 80086c6:	bf00      	nop
 80086c8:	20000648 	.word	0x20000648

080086cc <__malloc_unlock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_unlock+0x8>)
 80086ce:	f000 b80c 	b.w	80086ea <__retarget_lock_release_recursive>
 80086d2:	bf00      	nop
 80086d4:	20000648 	.word	0x20000648

080086d8 <_malloc_usable_size_r>:
 80086d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086dc:	1f18      	subs	r0, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bfbc      	itt	lt
 80086e2:	580b      	ldrlt	r3, [r1, r0]
 80086e4:	18c0      	addlt	r0, r0, r3
 80086e6:	4770      	bx	lr

080086e8 <__retarget_lock_acquire_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_release_recursive>:
 80086ea:	4770      	bx	lr

080086ec <_init>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr

080086f8 <_fini>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr
