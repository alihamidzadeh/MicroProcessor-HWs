
E8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008a38  08008a38  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a38  08008a38  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000005b4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000064c  2000064c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8eb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000358d  00000000  00000000  0003d9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b0  00000000  00000000  00040f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001690  00000000  00000000  000426f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021000  00000000  00000000  00043d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dfde  00000000  00000000  00064d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7b94  00000000  00000000  00082d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a8f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006920  00000000  00000000  0014a944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008958 	.word	0x08008958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08008958 	.word	0x08008958

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000b6 	.word	0x200000b6
 800039c:	200000b8 	.word	0x200000b8
 80003a0:	200000ba 	.word	0x200000ba
 80003a4:	200000cc 	.word	0x200000cc
 80003a8:	200000bc 	.word	0x200000bc
 80003ac:	200000d0 	.word	0x200000d0

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f003 f82b 	bl	800350c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fb84 	bl	8001bc4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f99a 	bl	8003800 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f992 	bl	8003800 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 f986 	bl	8003800 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 fb5c 	bl	8001bc4 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 fb56 	bl	8001bc4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fb50 	bl	8001bc4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 fb41 	bl	8001bc4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 fb36 	bl	8001bc4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000d0 	.word	0x200000d0
 80005a8:	200000d3 	.word	0x200000d3
 80005ac:	200000b4 	.word	0x200000b4
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000b6 	.word	0x200000b6
 80005b8:	200000b8 	.word	0x200000b8
 80005bc:	200000ba 	.word	0x200000ba
 80005c0:	200000bc 	.word	0x200000bc
 80005c4:	200000cc 	.word	0x200000cc
 80005c8:	200000d1 	.word	0x200000d1
 80005cc:	200000d2 	.word	0x200000d2

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000d4 	.word	0x200000d4

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 fa3e 	bl	8001bc4 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000d3 	.word	0x200000d3
 80007ac:	200000d4 	.word	0x200000d4

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000d1 	.word	0x200000d1

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff90 	bl	8003800 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 ff84 	bl	8003800 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000cc 	.word	0x200000cc
 8000930:	200000b6 	.word	0x200000b6
 8000934:	200000b8 	.word	0x200000b8
 8000938:	200000d0 	.word	0x200000d0

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 ff58 	bl	8003800 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f001 f937 	bl	8001bc4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 ff4d 	bl	8003800 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f001 f92c 	bl	8001bc4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 ff42 	bl	8003800 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f001 f921 	bl	8001bc4 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000cc 	.word	0x200000cc
 800098c:	200000ba 	.word	0x200000ba

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 ff1f 	bl	8003800 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000cc 	.word	0x200000cc
 80009e0:	200000bc 	.word	0x200000bc

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fef5 	bl	8003800 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000cc 	.word	0x200000cc
 8000a34:	200000bc 	.word	0x200000bc

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f001 f85c 	bl	8001af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f82a 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa94 	bl	8000f70 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8fc 	bl	8000c44 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f93a 	bl	8000cc4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 fa6c 	bl	8000f2c <MX_USB_PCD_Init>
  MX_ADC3_Init();
 8000a54:	f000 f886 	bl	8000b64 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000a58:	f000 f972 	bl	8000d40 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 fa36 	bl	8000ecc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000a60:	f000 f9bc 	bl	8000ddc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <main+0x54>)
 8000a66:	f004 fe33 	bl	80056d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000a6a:	4809      	ldr	r0, [pc, #36]	; (8000a90 <main+0x58>)
 8000a6c:	f004 fe30 	bl	80056d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a70:	210c      	movs	r1, #12
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <main+0x58>)
 8000a74:	f004 fef8 	bl	8005868 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc3);
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <main+0x5c>)
 8000a7a:	f001 fabb 	bl	8001ff4 <HAL_ADC_Start_IT>

  uart_rx_enable_it();
 8000a7e:	f000 fd11 	bl	80014a4 <uart_rx_enable_it>
  programInit();
 8000a82:	f000 fc43 	bl	800130c <programInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000a86:	f000 fc75 	bl	8001374 <programLoop>
  {
 8000a8a:	e7fc      	b.n	8000a86 <main+0x4e>
 8000a8c:	200001e0 	.word	0x200001e0
 8000a90:	2000022c 	.word	0x2000022c
 8000a94:	200000d8 	.word	0x200000d8

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b09e      	sub	sp, #120	; 0x78
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aa2:	2228      	movs	r2, #40	; 0x28
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fae0 	bl	800806c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	223c      	movs	r2, #60	; 0x3c
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f007 fad2 	bl	800806c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000acc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ada:	2310      	movs	r3, #16
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aec:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 f8c6 	bl	8003c84 <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000afe:	f000 faef 	bl	80010e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 f8ee 	bl	8004d00 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b2a:	f000 fad9 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <SystemClock_Config+0xc8>)
 8000b30:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 fb0f 	bl	800516c <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b54:	f000 fac4 	bl	80010e0 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3778      	adds	r7, #120	; 0x78
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	00020124 	.word	0x00020124

08000b64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000b88:	4a2d      	ldr	r2, [pc, #180]	; (8000c40 <MX_ADC3_Init+0xdc>)
 8000b8a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ba4:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bac:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bb8:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bde:	4817      	ldr	r0, [pc, #92]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000be0:	f001 f828 	bl	8001c34 <HAL_ADC_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000bea:	f000 fa79 	bl	80010e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4810      	ldr	r0, [pc, #64]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000bfa:	f002 f943 	bl	8002e84 <HAL_ADCEx_MultiModeConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000c04:	f000 fa6c 	bl	80010e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000c14:	2307      	movs	r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_ADC3_Init+0xd8>)
 8000c26:	f001 fe41 	bl	80028ac <HAL_ADC_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c30:	f000 fa56 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000d8 	.word	0x200000d8
 8000c40:	50000400 	.word	0x50000400

08000c44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c4a:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <MX_I2C1_Init+0x78>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c50:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <MX_I2C1_Init+0x7c>)
 8000c52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c54:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c80:	f002 fe08 	bl	8003894 <HAL_I2C_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c8a:	f000 fa29 	bl	80010e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000c92:	f002 fe8e 	bl	80039b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f000 fa20 	bl	80010e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_I2C1_Init+0x74>)
 8000ca4:	f002 fed0 	bl	8003a48 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cae:	f000 fa17 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000128 	.word	0x20000128
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	2000090e 	.word	0x2000090e

08000cc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_SPI1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d12:	2207      	movs	r2, #7
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_SPI1_Init+0x74>)
 8000d24:	f004 fbd2 	bl	80054cc <HAL_SPI_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 f9d7 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000017c 	.word	0x2000017c
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d68:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000d6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000d8a:	f004 fc4a 	bl	8005622 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 f9a4 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000da6:	f005 f893 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000db0:	f000 f996 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_TIM2_Init+0x98>)
 8000dc2:	f005 fd9d 	bl	8006900 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dcc:	f000 f988 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200001e0 	.word	0x200001e0

08000ddc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]
 8000e0a:	615a      	str	r2, [r3, #20]
 8000e0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e10:	4a2d      	ldr	r2, [pc, #180]	; (8000ec8 <MX_TIM4_Init+0xec>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e34:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e36:	f004 fbf4 	bl	8005622 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e40:	f000 f94e 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e52:	f005 f83d 	bl	8005ed0 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e5c:	f000 f940 	bl	80010e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e62:	f004 fc9f 	bl	80057a4 <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e6c:	f000 f938 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000e80:	f005 fd3e 	bl	8006900 <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 f929 	bl	80010e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000ea6:	f004 feff 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000eb0:	f000 f916 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM4_Init+0xe8>)
 8000eb6:	f000 fc95 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000eba:	bf00      	nop
 8000ebc:	3738      	adds	r7, #56	; 0x38
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000022c 	.word	0x2000022c
 8000ec8:	40000800 	.word	0x40000800

08000ecc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <MX_USART3_UART_Init+0x5c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ed8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000edc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART3_UART_Init+0x58>)
 8000f10:	f005 fd94 	bl	8006a3c <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f1a:	f000 f8e1 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000278 	.word	0x20000278
 8000f28:	40004800 	.word	0x40004800

08000f2c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <MX_USB_PCD_Init+0x40>)
 8000f34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f38:	2208      	movs	r2, #8
 8000f3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_USB_PCD_Init+0x3c>)
 8000f56:	f002 fdc3 	bl	8003ae0 <HAL_PCD_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f60:	f000 f8be 	bl	80010e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000300 	.word	0x20000300
 8000f6c:	40005c00 	.word	0x40005c00

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a51      	ldr	r2, [pc, #324]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa8:	6153      	str	r3, [r2, #20]
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb6:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a3f      	ldr	r2, [pc, #252]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a39      	ldr	r2, [pc, #228]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <MX_GPIO_Init+0x160>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <MX_GPIO_Init+0x160>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <MX_GPIO_Init+0x160>)
 8001004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <MX_GPIO_Init+0x160>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001016:	2200      	movs	r2, #0
 8001018:	f64f 7108 	movw	r1, #65288	; 0xff08
 800101c:	482d      	ldr	r0, [pc, #180]	; (80010d4 <MX_GPIO_Init+0x164>)
 800101e:	f002 fbef 	bl	8003800 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
 8001028:	482b      	ldr	r0, [pc, #172]	; (80010d8 <MX_GPIO_Init+0x168>)
 800102a:	f002 fbe9 	bl	8003800 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 800102e:	2335      	movs	r3, #53	; 0x35
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001032:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4824      	ldr	r0, [pc, #144]	; (80010d4 <MX_GPIO_Init+0x164>)
 8001044:	f002 fa62 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001048:	f64f 7308 	movw	r3, #65288	; 0xff08
 800104c:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	481c      	ldr	r0, [pc, #112]	; (80010d4 <MX_GPIO_Init+0x164>)
 8001062:	f002 fa53 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4818      	ldr	r0, [pc, #96]	; (80010dc <MX_GPIO_Init+0x16c>)
 800107c:	f002 fa46 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001080:	2301      	movs	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001088:	2302      	movs	r3, #2
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001096:	f002 fa39 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800109a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 800109e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x168>)
 80010b4:	f002 fa2a 	bl	800350c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2007      	movs	r0, #7
 80010be:	f002 f978 	bl	80033b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010c2:	2007      	movs	r0, #7
 80010c4:	f002 f991 	bl	80033ea <HAL_NVIC_EnableIRQ>

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48001000 	.word	0x48001000
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48000800 	.word	0x48000800

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim4; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_4;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]

//  volume=5;
  if (pwm_freq == 0 || pwm_freq > 20000)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <PWM_Change_Tone+0x1c>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001104:	4293      	cmp	r3, r2
 8001106:	d937      	bls.n	8001178 <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 8001108:	4b52      	ldr	r3, [pc, #328]	; (8001254 <PWM_Change_Tone+0x168>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d105      	bne.n	800111c <PWM_Change_Tone+0x30>
 8001110:	4b51      	ldr	r3, [pc, #324]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
 800111a:	e097      	b.n	800124c <PWM_Change_Tone+0x160>
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <PWM_Change_Tone+0x168>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d105      	bne.n	8001130 <PWM_Change_Tone+0x44>
 8001124:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	6393      	str	r3, [r2, #56]	; 0x38
 800112e:	e08d      	b.n	800124c <PWM_Change_Tone+0x160>
 8001130:	4b48      	ldr	r3, [pc, #288]	; (8001254 <PWM_Change_Tone+0x168>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b08      	cmp	r3, #8
 8001136:	d105      	bne.n	8001144 <PWM_Change_Tone+0x58>
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <PWM_Change_Tone+0x16c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001142:	e083      	b.n	800124c <PWM_Change_Tone+0x160>
 8001144:	4b43      	ldr	r3, [pc, #268]	; (8001254 <PWM_Change_Tone+0x168>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b0c      	cmp	r3, #12
 800114a:	d105      	bne.n	8001158 <PWM_Change_Tone+0x6c>
 800114c:	4b42      	ldr	r3, [pc, #264]	; (8001258 <PWM_Change_Tone+0x16c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	e079      	b.n	800124c <PWM_Change_Tone+0x160>
 8001158:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <PWM_Change_Tone+0x168>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b10      	cmp	r3, #16
 800115e:	d105      	bne.n	800116c <PWM_Change_Tone+0x80>
 8001160:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2300      	movs	r3, #0
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	e06f      	b.n	800124c <PWM_Change_Tone+0x160>
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <PWM_Change_Tone+0x16c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001176:	e069      	b.n	800124c <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001178:	f003 ff3e 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 800117c:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 800117e:	69fa      	ldr	r2, [r7, #28]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4a35      	ldr	r2, [pc, #212]	; (800125c <PWM_Change_Tone+0x170>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0b9b      	lsrs	r3, r3, #14
 800118e:	b29b      	uxth	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001194:	8b7b      	ldrh	r3, [r7, #26]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	fbb2 f3f3 	udiv	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <PWM_Change_Tone+0x174>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	09db      	lsrs	r3, r3, #7
 80011b8:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 80011ba:	8b7b      	ldrh	r3, [r7, #26]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <PWM_Change_Tone+0x16c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <PWM_Change_Tone+0x16c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	3a01      	subs	r2, #1
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <PWM_Change_Tone+0x16c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <PWM_Change_Tone+0x168>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <PWM_Change_Tone+0x104>
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <PWM_Change_Tone+0x16c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80011ee:	e02d      	b.n	800124c <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <PWM_Change_Tone+0x168>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d105      	bne.n	8001204 <PWM_Change_Tone+0x118>
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <PWM_Change_Tone+0x16c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001202:	e023      	b.n	800124c <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001204:	4b13      	ldr	r3, [pc, #76]	; (8001254 <PWM_Change_Tone+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d105      	bne.n	8001218 <PWM_Change_Tone+0x12c>
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <PWM_Change_Tone+0x16c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001216:	e019      	b.n	800124c <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <PWM_Change_Tone+0x168>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b0c      	cmp	r3, #12
 800121e:	d105      	bne.n	800122c <PWM_Change_Tone+0x140>
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
}
 800122a:	e00f      	b.n	800124c <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <PWM_Change_Tone+0x168>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b10      	cmp	r3, #16
 8001232:	d105      	bne.n	8001240 <PWM_Change_Tone+0x154>
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800123e:	e005      	b.n	800124c <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <PWM_Change_Tone+0x16c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800124a:	e7ff      	b.n	800124c <PWM_Change_Tone+0x160>
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004
 800125c:	45e7b273 	.word	0x45e7b273
 8001260:	10624dd3 	.word	0x10624dd3

08001264 <HAL_ADC_ConvCpltCallback>:
//	}
//
//}
int currentBR = 5;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b09e      	sub	sp, #120	; 0x78
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d11f      	bne.n	80012b6 <HAL_ADC_ConvCpltCallback+0x52>
		int x = HAL_ADC_GetValue(&hadc3);
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x60>)
 8001278:	f000 fffc 	bl	8002274 <HAL_ADC_GetValue>
 800127c:	4603      	mov	r3, r0
 800127e:	677b      	str	r3, [r7, #116]	; 0x74
		currentBR = ((int) x * 100 / 3800);
 8001280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001282:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x64>)
 8001284:	fb82 1203 	smull	r1, r2, r2, r3
 8001288:	1112      	asrs	r2, r2, #4
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_ADC_ConvCpltCallback+0x68>)
 8001290:	6013      	str	r3, [r2, #0]
		unsigned char data[100];

		int n = sprintf(data, "LDR: %d  %d \n", x, currentBR);
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_ADC_ConvCpltCallback+0x68>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f107 000c 	add.w	r0, r7, #12
 800129a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800129e:	f006 feed 	bl	800807c <siprintf>
 80012a2:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart3, data, n, 1000);
 80012a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 010c 	add.w	r1, r7, #12
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_ADC_ConvCpltCallback+0x70>)
 80012b2:	f005 fc11 	bl	8006ad8 <HAL_UART_Transmit>
//		checkBrightness();
//		HAL_ADC_Start_IT(&hadc3);

	}
}
 80012b6:	bf00      	nop
 80012b8:	3778      	adds	r7, #120	; 0x78
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	50000400 	.word	0x50000400
 80012c4:	200000d8 	.word	0x200000d8
 80012c8:	6bca1af3 	.word	0x6bca1af3
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	08008970 	.word	0x08008970
 80012d4:	20000278 	.word	0x20000278

080012d8 <checkBrightness>:
//}

int threshhold = 5;


void checkBrightness(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
		if (currentBR <= threshhold){
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <checkBrightness+0x2c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <checkBrightness+0x30>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dc06      	bgt.n	80012f6 <checkBrightness+0x1e>
				  PWM_Change_Tone(2000,1000);
 80012e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012f0:	f7ff fefc 	bl	80010ec <PWM_Change_Tone>
		}else{
			  PWM_Change_Tone(0,0);
	}
}
 80012f4:	e003      	b.n	80012fe <checkBrightness+0x26>
			  PWM_Change_Tone(0,0);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fef7 	bl	80010ec <PWM_Change_Tone>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000000c 	.word	0x2000000c
 8001308:	20000010 	.word	0x20000010

0800130c <programInit>:
  0x11,
  0x1F,
  0x00
};

void programInit() {
 800130c:	b580      	push	{r7, lr}
 800130e:	b092      	sub	sp, #72	; 0x48
 8001310:	af04      	add	r7, sp, #16



	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8001312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <programInit+0x5c>)
 8001338:	f7fe ffa2 	bl	8000280 <LiquidCrystal>

	char data[50];
	int n = sprintf(data, "Program Started...\n");
 800133c:	463b      	mov	r3, r7
 800133e:	490b      	ldr	r1, [pc, #44]	; (800136c <programInit+0x60>)
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fe9b 	bl	800807c <siprintf>
 8001346:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart3, data, n, 1000);
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	b29a      	uxth	r2, r3
 800134c:	4639      	mov	r1, r7
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <programInit+0x64>)
 8001354:	f005 fbc0 	bl	8006ad8 <HAL_UART_Transmit>
	begin(20, 4);
 8001358:	2104      	movs	r1, #4
 800135a:	2014      	movs	r0, #20
 800135c:	f7ff f828 	bl	80003b0 <begin>

}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	; 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000c00 	.word	0x48000c00
 800136c:	08008980 	.word	0x08008980
 8001370:	20000278 	.word	0x20000278

08001374 <programLoop>:
int flag = 0; //0 ==> light, 1 ==> message

int flag_current = 1;
int message_arrived = 0;

void programLoop() {
 8001374:	b580      	push	{r7, lr}
 8001376:	b0b6      	sub	sp, #216	; 0xd8
 8001378:	af00      	add	r7, sp, #0
	char data[100];
	char data2[100];
	if (flag_current == 1 && flag == 0){
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <programLoop+0xe4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d139      	bne.n	80013f6 <programLoop+0x82>
 8001382:	4b36      	ldr	r3, [pc, #216]	; (800145c <programLoop+0xe8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d135      	bne.n	80013f6 <programLoop+0x82>
		clear();
 800138a:	f7ff f9d5 	bl	8000738 <clear>
		// lamp
		int percent = currentBR;
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <programLoop+0xec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		int n = sprintf(data, " Light: %d%%",percent);
 8001396:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800139a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800139e:	4931      	ldr	r1, [pc, #196]	; (8001464 <programLoop+0xf0>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f006 fe6b 	bl	800807c <siprintf>
 80013a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		createChar(0, lamp);
 80013aa:	492f      	ldr	r1, [pc, #188]	; (8001468 <programLoop+0xf4>)
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fa40 	bl	8000832 <createChar>
		setCursor(0, 1);
 80013b2:	2101      	movs	r1, #1
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff f9c9 	bl	800074c <setCursor>
		write(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fa70 	bl	80008a0 <write>
		print(data);
 80013c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fa09 	bl	80007dc <print>
		n = sprintf(data2, "Critical Light < %d%%",threshhold);
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <programLoop+0xf8>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	4927      	ldr	r1, [pc, #156]	; (8001470 <programLoop+0xfc>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f006 fe52 	bl	800807c <siprintf>
 80013d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
		setCursor(0, 4);
 80013dc:	2104      	movs	r1, #4
 80013de:	2000      	movs	r0, #0
 80013e0:	f7ff f9b4 	bl	800074c <setCursor>
		print(data2);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f9f8 	bl	80007dc <print>
		flag_current = 0;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <programLoop+0xe4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
	if (flag_current == 1 && flag == 0){
 80013f2:	bf00      	nop
		int n = sprintf(data, " Message: %s",input);
		print(data);
		flag_current = 1;
		message_arrived = 0;
	}
}
 80013f4:	e02c      	b.n	8001450 <programLoop+0xdc>
	else if((flag_current == 0 && flag == 1) || message_arrived){
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <programLoop+0xe4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <programLoop+0x92>
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <programLoop+0xe8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d003      	beq.n	800140e <programLoop+0x9a>
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <programLoop+0x100>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d020      	beq.n	8001450 <programLoop+0xdc>
		clear();
 800140e:	f7ff f993 	bl	8000738 <clear>
		createChar(0, message);
 8001412:	4919      	ldr	r1, [pc, #100]	; (8001478 <programLoop+0x104>)
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fa0c 	bl	8000832 <createChar>
		setCursor(0, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff f995 	bl	800074c <setCursor>
		write(0);
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fa3c 	bl	80008a0 <write>
		int n = sprintf(data, " Message: %s",input);
 8001428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <programLoop+0x108>)
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <programLoop+0x10c>)
 8001430:	4618      	mov	r0, r3
 8001432:	f006 fe23 	bl	800807c <siprintf>
 8001436:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
		print(data);
 800143a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9cc 	bl	80007dc <print>
		flag_current = 1;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <programLoop+0xe4>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
		message_arrived = 0;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <programLoop+0x100>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	37d8      	adds	r7, #216	; 0xd8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000024 	.word	0x20000024
 800145c:	20000620 	.word	0x20000620
 8001460:	2000000c 	.word	0x2000000c
 8001464:	08008994 	.word	0x08008994
 8001468:	20000014 	.word	0x20000014
 800146c:	20000010 	.word	0x20000010
 8001470:	080089a4 	.word	0x080089a4
 8001474:	20000624 	.word	0x20000624
 8001478:	2000001c 	.word	0x2000001c
 800147c:	200005ec 	.word	0x200005ec
 8001480:	080089bc 	.word	0x080089bc

08001484 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d101      	bne.n	800149a <HAL_TIM_PeriodElapsedCallback+0x16>
    	checkBrightness();
 8001496:	f7ff ff1f 	bl	80012d8 <checkBrightness>
//    	int n = sprintf(data, "hhhh...\n");
//    	HAL_UART_Transmit(&huart3, data, n, 1000);
//     	programLoop();
//    	write("------");
    }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <uart_rx_enable_it>:

char character;
int index_arr = 0;

void uart_rx_enable_it(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 80014a8:	2201      	movs	r2, #1
 80014aa:	4903      	ldr	r1, [pc, #12]	; (80014b8 <uart_rx_enable_it+0x14>)
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <uart_rx_enable_it+0x18>)
 80014ae:	f005 fb9d 	bl	8006bec <HAL_UART_Receive_IT>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000628 	.word	0x20000628
 80014bc:	20000278 	.word	0x20000278

080014c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <HAL_UART_RxCpltCallback+0x58>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d11d      	bne.n	800150e <HAL_UART_RxCpltCallback+0x4e>
		if(character != 10){
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_UART_RxCpltCallback+0x5c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	d009      	beq.n	80014ee <HAL_UART_RxCpltCallback+0x2e>
			input[index_arr++] = character;
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	490f      	ldr	r1, [pc, #60]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 80014e2:	600a      	str	r2, [r1, #0]
 80014e4:	4a0d      	ldr	r2, [pc, #52]	; (800151c <HAL_UART_RxCpltCallback+0x5c>)
 80014e6:	7811      	ldrb	r1, [r2, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_UART_RxCpltCallback+0x64>)
 80014ea:	54d1      	strb	r1, [r2, r3]
 80014ec:	e00d      	b.n	800150a <HAL_UART_RxCpltCallback+0x4a>
		} else{
			input[index_arr++] = '\0';
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	490a      	ldr	r1, [pc, #40]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 80014f6:	600a      	str	r2, [r1, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_UART_RxCpltCallback+0x64>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_UART_RxCpltCallback+0x60>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
//			strncpy(messages, input, sizeof(input));
//			memcpy(messages, input, sizeof(input));
			message_arrived = 1;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_UART_RxCpltCallback+0x68>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
		}
		uart_rx_enable_it();
 800150a:	f7ff ffcb 	bl	80014a4 <uart_rx_enable_it>
	}
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40004800 	.word	0x40004800
 800151c:	20000628 	.word	0x20000628
 8001520:	2000062c 	.word	0x2000062c
 8001524:	200005ec 	.word	0x200005ec
 8001528:	20000624 	.word	0x20000624

0800152c <HAL_GPIO_EXTI_Callback>:

int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) { //button: PC1 for change LCD flag
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d11e      	bne.n	800157a <HAL_GPIO_EXTI_Callback+0x4e>
		if (HAL_GetTick() - last_time2 > 400){
 800153c:	f000 fb36 	bl	8001bac <HAL_GetTick>
 8001540:	4603      	mov	r3, r0
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_GPIO_EXTI_Callback+0x58>)
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800154c:	d915      	bls.n	800157a <HAL_GPIO_EXTI_Callback+0x4e>
			if (flag == 1)
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d103      	bne.n	800155e <HAL_GPIO_EXTI_Callback+0x32>
				flag = 0;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e002      	b.n	8001564 <HAL_GPIO_EXTI_Callback+0x38>
			else
				flag = 1;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8001564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <HAL_GPIO_EXTI_Callback+0x60>)
 800156a:	f002 f961 	bl	8003830 <HAL_GPIO_TogglePin>
			last_time2=HAL_GetTick();
 800156e:	f000 fb1d 	bl	8001bac <HAL_GetTick>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GPIO_EXTI_Callback+0x58>)
 8001578:	601a      	str	r2, [r3, #0]
		}
    }
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000630 	.word	0x20000630
 8001588:	20000620 	.word	0x20000620
 800158c:	48001000 	.word	0x48001000

08001590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6193      	str	r3, [r2, #24]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f001 fee8 	bl	800339c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <HAL_ADC_MspInit+0x84>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12c      	bne.n	8001654 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_ADC_MspInit+0x88>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_ADC_MspInit+0x88>)
 8001600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001604:	6153      	str	r3, [r2, #20]
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_ADC_MspInit+0x88>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_ADC_MspInit+0x88>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_ADC_MspInit+0x88>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_ADC_MspInit+0x88>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800162a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_ADC_MspInit+0x8c>)
 8001640:	f001 ff64 	bl	800350c <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	2100      	movs	r1, #0
 8001648:	202f      	movs	r0, #47	; 0x2f
 800164a:	f001 feb2 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800164e:	202f      	movs	r0, #47	; 0x2f
 8001650:	f001 fecb 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	50000400 	.word	0x50000400
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x7c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d127      	bne.n	80016da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016b2:	2304      	movs	r3, #4
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <HAL_I2C_MspInit+0x84>)
 80016be:	f001 ff25 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_I2C_MspInit+0x80>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_SPI_MspInit+0x7c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d128      	bne.n	8001764 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SPI_MspInit+0x80>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_SPI_MspInit+0x80>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001742:	23e0      	movs	r3, #224	; 0xe0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f001 fed4 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013000 	.word	0x40013000
 8001770:	40021000 	.word	0x40021000

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d114      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	2100      	movs	r1, #0
 80017a2:	201c      	movs	r0, #28
 80017a4:	f001 fe05 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a8:	201c      	movs	r0, #28
 80017aa:	f001 fe1e 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017ae:	e010      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40000800 	.word	0x40000800

080017e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0x64>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11c      	bne.n	8001840 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_TIM_MspPostInit+0x68>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_TIM_MspPostInit+0x68>)
 800180c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001810:	6153      	str	r3, [r2, #20]
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0x68>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800181e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001822:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001830:	2302      	movs	r3, #2
 8001832:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4619      	mov	r1, r3
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_TIM_MspPostInit+0x6c>)
 800183c:	f001 fe66 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40000800 	.word	0x40000800
 800184c:	40021000 	.word	0x40021000
 8001850:	48000c00 	.word	0x48000c00

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <HAL_UART_MspInit+0x8c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d130      	bne.n	80018d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_UART_MspInit+0x90>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_UART_MspInit+0x90>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0x90>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0x90>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_UART_MspInit+0x90>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6153      	str	r3, [r2, #20]
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_UART_MspInit+0x90>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018b8:	2307      	movs	r3, #7
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4809      	ldr	r0, [pc, #36]	; (80018e8 <HAL_UART_MspInit+0x94>)
 80018c4:	f001 fe22 	bl	800350c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2027      	movs	r0, #39	; 0x27
 80018ce:	f001 fd70 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018d2:	2027      	movs	r0, #39	; 0x27
 80018d4:	f001 fd89 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004800 	.word	0x40004800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000400 	.word	0x48000400

080018ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_PCD_MspInit+0x80>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d129      	bne.n	8001962 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_PCD_MspInit+0x84>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <HAL_PCD_MspInit+0x84>)
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	6153      	str	r3, [r2, #20]
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_PCD_MspInit+0x84>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001934:	2303      	movs	r3, #3
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001938:	230e      	movs	r3, #14
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001946:	f001 fde1 	bl	800350c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_PCD_MspInit+0x84>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_PCD_MspInit+0x84>)
 8001950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_PCD_MspInit+0x84>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40005c00 	.word	0x40005c00
 8001970:	40021000 	.word	0x40021000

08001974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <NMI_Handler+0x4>

0800197a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <MemManage_Handler+0x4>

08001986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler+0x4>

0800198c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <UsageFault_Handler+0x4>

08001992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c0:	f000 f8e0 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f001 ff49 	bl	8003864 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <TIM2_IRQHandler+0x10>)
 80019de:	f004 f843 	bl	8005a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001e0 	.word	0x200001e0

080019ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <USART3_IRQHandler+0x10>)
 80019f2:	f005 f93f 	bl	8006c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000278 	.word	0x20000278

08001a00 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <ADC3_IRQHandler+0x10>)
 8001a06:	f000 fc43 	bl	8002290 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000d8 	.word	0x200000d8

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f006 fae8 	bl	8008018 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000a000 	.word	0x2000a000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	20000634 	.word	0x20000634
 8001a7c:	20000650 	.word	0x20000650

08001a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <SystemInit+0x20>)
 8001a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <SystemInit+0x20>)
 8001a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001adc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa8:	f7ff ffea 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad2:	f006 faa7 	bl	8008024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ad6:	f7fe ffaf 	bl	8000a38 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001adc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001ae8:	08008a40 	.word	0x08008a40
  ldr r2, =_sbss
 8001aec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001af0:	2000064c 	.word	0x2000064c

08001af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC1_2_IRQHandler>
	...

08001af8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_Init+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_Init+0x28>)
 8001b02:	f043 0310 	orr.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f001 fc47 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f808 	bl	8001b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b14:	f7ff fd3c 	bl	8001590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000

08001b24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0x54>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x58>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fc5f 	bl	8003406 <HAL_SYSTICK_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e00e      	b.n	8001b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d80a      	bhi.n	8001b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b60:	f001 fc27 	bl	80033b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b64:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <HAL_InitTick+0x5c>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000028 	.word	0x20000028
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	2000002c 	.word	0x2000002c

08001b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000030 	.word	0x20000030
 8001ba8:	20000638 	.word	0x20000638

08001bac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000638 	.word	0x20000638

08001bc4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000030 	.word	0x20000030

08001c0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b09a      	sub	sp, #104	; 0x68
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e1c9      	b.n	8001fe8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d176      	bne.n	8001d54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d152      	bne.n	8001d14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fca5 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d13b      	bne.n	8001d14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f001 fa47 	bl	8003130 <ADC_Disable>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d12f      	bne.n	8001d14 <HAL_ADC_Init+0xe0>
 8001cb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d12b      	bne.n	8001d14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cc4:	f023 0302 	bic.w	r3, r3, #2
 8001cc8:	f043 0202 	orr.w	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cde:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf0:	4b86      	ldr	r3, [pc, #536]	; (8001f0c <HAL_ADC_Init+0x2d8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a86      	ldr	r2, [pc, #536]	; (8001f10 <HAL_ADC_Init+0x2dc>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9a      	lsrs	r2, r3, #18
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d30:	d110      	bne.n	8001d54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f023 0312 	bic.w	r3, r3, #18
 8001d3a:	f043 0210 	orr.w	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 8136 	bne.w	8001fce <HAL_ADC_Init+0x39a>
 8001d62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8131 	bne.w	8001fce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8129 	bne.w	8001fce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d84:	f043 0202 	orr.w	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Init+0x16c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <HAL_ADC_Init+0x2e0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_Init+0x170>
 8001da0:	4b5d      	ldr	r3, [pc, #372]	; (8001f18 <HAL_ADC_Init+0x2e4>)
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_Init+0x172>
 8001da4:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <HAL_ADC_Init+0x2e8>)
 8001da6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db0:	d102      	bne.n	8001db8 <HAL_ADC_Init+0x184>
 8001db2:	4b58      	ldr	r3, [pc, #352]	; (8001f14 <HAL_ADC_Init+0x2e0>)
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e01a      	b.n	8001dee <HAL_ADC_Init+0x1ba>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <HAL_ADC_Init+0x2e0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d103      	bne.n	8001dca <HAL_ADC_Init+0x196>
 8001dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e011      	b.n	8001dee <HAL_ADC_Init+0x1ba>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <HAL_ADC_Init+0x2ec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d102      	bne.n	8001dda <HAL_ADC_Init+0x1a6>
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_ADC_Init+0x2f0>)
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e009      	b.n	8001dee <HAL_ADC_Init+0x1ba>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_ADC_Init+0x2f0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d102      	bne.n	8001dea <HAL_ADC_Init+0x1b6>
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <HAL_ADC_Init+0x2ec>)
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e001      	b.n	8001dee <HAL_ADC_Init+0x1ba>
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d108      	bne.n	8001e0e <HAL_ADC_Init+0x1da>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x1da>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_Init+0x1dc>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11c      	bne.n	8001e4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_ADC_Init+0x202>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x202>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_ADC_Init+0x204>
 8001e36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d108      	bne.n	8001e4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7e5b      	ldrb	r3, [r3, #25]
 8001e52:	035b      	lsls	r3, r3, #13
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e58:	2a01      	cmp	r2, #1
 8001e5a:	d002      	beq.n	8001e62 <HAL_ADC_Init+0x22e>
 8001e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e60:	e000      	b.n	8001e64 <HAL_ADC_Init+0x230>
 8001e62:	2200      	movs	r2, #0
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e74:	4313      	orrs	r3, r2
 8001e76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d11b      	bne.n	8001eba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7e5b      	ldrb	r3, [r3, #25]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	045a      	lsls	r2, r3, #17
 8001e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e9c:	e00d      	b.n	8001eba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d03a      	beq.n	8001f38 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <HAL_ADC_Init+0x2ec>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Init+0x2a2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_ADC_Init+0x2f0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d128      	bne.n	8001f28 <HAL_ADC_Init+0x2f4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ede:	d012      	beq.n	8001f06 <HAL_ADC_Init+0x2d2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d00a      	beq.n	8001f00 <HAL_ADC_Init+0x2cc>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ef2:	d002      	beq.n	8001efa <HAL_ADC_Init+0x2c6>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	e018      	b.n	8001f2c <HAL_ADC_Init+0x2f8>
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	e015      	b.n	8001f2c <HAL_ADC_Init+0x2f8>
 8001f00:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001f04:	e012      	b.n	8001f2c <HAL_ADC_Init+0x2f8>
 8001f06:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001f0a:	e00f      	b.n	8001f2c <HAL_ADC_Init+0x2f8>
 8001f0c:	20000028 	.word	0x20000028
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	50000100 	.word	0x50000100
 8001f18:	50000300 	.word	0x50000300
 8001f1c:	50000700 	.word	0x50000700
 8001f20:	50000400 	.word	0x50000400
 8001f24:	50000500 	.word	0x50000500
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f30:	4313      	orrs	r3, r2
 8001f32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f34:	4313      	orrs	r3, r2
 8001f36:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f54:	f023 0302 	bic.w	r3, r3, #2
 8001f58:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e1b      	ldrb	r3, [r3, #24]
 8001f5e:	039a      	lsls	r2, r3, #14
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_ADC_Init+0x3bc>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f80:	430b      	orrs	r3, r1
 8001f82:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10c      	bne.n	8001fa6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f023 010f 	bic.w	r1, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	1e5a      	subs	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa4:	e007      	b.n	8001fb6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020f 	bic.w	r2, r2, #15
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f023 0303 	bic.w	r3, r3, #3
 8001fc4:	f043 0201 	orr.w	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
 8001fcc:	e00a      	b.n	8001fe4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f023 0312 	bic.w	r3, r3, #18
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fe4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3768      	adds	r7, #104	; 0x68
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	fff0c007 	.word	0xfff0c007

08001ff4 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 8123 	bne.w	8002256 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_ADC_Start_IT+0x2a>
 800201a:	2302      	movs	r3, #2
 800201c:	e11e      	b.n	800225c <HAL_ADC_Start_IT+0x268>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f001 f81e 	bl	8003068 <ADC_Enable>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 810a 	bne.w	800224c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Start_IT+0x6c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a82      	ldr	r2, [pc, #520]	; (8002264 <HAL_ADC_Start_IT+0x270>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d106      	bne.n	800206e <HAL_ADC_Start_IT+0x7a>
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_ADC_Start_IT+0x274>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_ADC_Start_IT+0x9a>
 800206c:	e005      	b.n	800207a <HAL_ADC_Start_IT+0x86>
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_ADC_Start_IT+0x278>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_ADC_Start_IT+0x9a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002082:	d004      	beq.n	800208e <HAL_ADC_Start_IT+0x9a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_ADC_Start_IT+0x27c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d115      	bne.n	80020ba <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d036      	beq.n	8002116 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020b8:	e02d      	b.n	8002116 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ce:	d004      	beq.n	80020da <HAL_ADC_Start_IT+0xe6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a63      	ldr	r2, [pc, #396]	; (8002264 <HAL_ADC_Start_IT+0x270>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10a      	bne.n	80020f0 <HAL_ADC_Start_IT+0xfc>
 80020da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e008      	b.n	8002102 <HAL_ADC_Start_IT+0x10e>
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_ADC_Start_IT+0x27c>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800210e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002122:	d106      	bne.n	8002132 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f023 0206 	bic.w	r2, r3, #6
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
 8002130:	e002      	b.n	8002138 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	221c      	movs	r2, #28
 8002146:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d110      	bne.n	8002172 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0204 	bic.w	r2, r2, #4
 800215e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0208 	orr.w	r2, r2, #8
 800216e:	605a      	str	r2, [r3, #4]
          break;
 8002170:	e008      	b.n	8002184 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 020c 	orr.w	r2, r2, #12
 8002180:	605a      	str	r2, [r3, #4]
          break;
 8002182:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0210 	bic.w	r2, r2, #16
 800219a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_Start_IT+0x1bc>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2e      	ldr	r2, [pc, #184]	; (8002264 <HAL_ADC_Start_IT+0x270>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d106      	bne.n	80021be <HAL_ADC_Start_IT+0x1ca>
 80021b0:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <HAL_ADC_Start_IT+0x274>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03e      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 80021bc:	e005      	b.n	80021ca <HAL_ADC_Start_IT+0x1d6>
 80021be:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_ADC_Start_IT+0x278>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d037      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d2:	d004      	beq.n	80021de <HAL_ADC_Start_IT+0x1ea>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_ADC_Start_IT+0x270>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_Start_IT+0x1f8>
 80021de:	4b22      	ldr	r3, [pc, #136]	; (8002268 <HAL_ADC_Start_IT+0x274>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d027      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 80021ea:	e005      	b.n	80021f8 <HAL_ADC_Start_IT+0x204>
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_ADC_Start_IT+0x278>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d020      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002200:	d004      	beq.n	800220c <HAL_ADC_Start_IT+0x218>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_ADC_Start_IT+0x270>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d106      	bne.n	800221a <HAL_ADC_Start_IT+0x226>
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_ADC_Start_IT+0x274>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2b09      	cmp	r3, #9
 8002216:	d010      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 8002218:	e005      	b.n	8002226 <HAL_ADC_Start_IT+0x232>
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_ADC_Start_IT+0x278>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2b09      	cmp	r3, #9
 8002224:	d009      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800222e:	d004      	beq.n	800223a <HAL_ADC_Start_IT+0x246>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0e      	ldr	r2, [pc, #56]	; (8002270 <HAL_ADC_Start_IT+0x27c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10f      	bne.n	800225a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	e006      	b.n	800225a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002254:	e001      	b.n	800225a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	50000100 	.word	0x50000100
 8002268:	50000300 	.word	0x50000300
 800226c:	50000700 	.word	0x50000700
 8002270:	50000400 	.word	0x50000400

08002274 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_IRQHandler+0x38>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 80bc 	beq.w	800244c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80b6 	beq.w	800244c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002300:	d004      	beq.n	800230c <HAL_ADC_IRQHandler+0x7c>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d106      	bne.n	800231a <HAL_ADC_IRQHandler+0x8a>
 800230c:	4b8f      	ldr	r3, [pc, #572]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03e      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002318:	e005      	b.n	8002326 <HAL_ADC_IRQHandler+0x96>
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b00      	cmp	r3, #0
 8002324:	d037      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800232e:	d004      	beq.n	800233a <HAL_ADC_IRQHandler+0xaa>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a84      	ldr	r2, [pc, #528]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d106      	bne.n	8002348 <HAL_ADC_IRQHandler+0xb8>
 800233a:	4b84      	ldr	r3, [pc, #528]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2b05      	cmp	r3, #5
 8002344:	d027      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002346:	e005      	b.n	8002354 <HAL_ADC_IRQHandler+0xc4>
 8002348:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2b05      	cmp	r3, #5
 8002352:	d020      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235c:	d004      	beq.n	8002368 <HAL_ADC_IRQHandler+0xd8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a79      	ldr	r2, [pc, #484]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d106      	bne.n	8002376 <HAL_ADC_IRQHandler+0xe6>
 8002368:	4b78      	ldr	r3, [pc, #480]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2b09      	cmp	r3, #9
 8002372:	d010      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002374:	e005      	b.n	8002382 <HAL_ADC_IRQHandler+0xf2>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2b09      	cmp	r3, #9
 8002380:	d009      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238a:	d004      	beq.n	8002396 <HAL_ADC_IRQHandler+0x106>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a70      	ldr	r2, [pc, #448]	; (8002554 <HAL_ADC_IRQHandler+0x2c4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d104      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e00f      	b.n	80023c0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a8:	d004      	beq.n	80023b4 <HAL_ADC_IRQHandler+0x124>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a66      	ldr	r2, [pc, #408]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_ADC_IRQHandler+0x12a>
 80023b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023b8:	e000      	b.n	80023bc <HAL_ADC_IRQHandler+0x12c>
 80023ba:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_ADC_IRQHandler+0x2c4>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d137      	bne.n	800243e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d132      	bne.n	800243e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d02d      	beq.n	800243e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11a      	bne.n	8002426 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 020c 	bic.w	r2, r2, #12
 80023fe:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d112      	bne.n	800243e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
 8002424:	e00b      	b.n	800243e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe ff10 	bl	8001264 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	220c      	movs	r2, #12
 800244a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_ADC_IRQHandler+0x1d0>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8138 	beq.w	80026dc <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8132 	beq.w	80026dc <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248c:	d004      	beq.n	8002498 <HAL_ADC_IRQHandler+0x208>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2d      	ldr	r2, [pc, #180]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_IRQHandler+0x216>
 8002498:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d03e      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 80024a4:	e005      	b.n	80024b2 <HAL_ADC_IRQHandler+0x222>
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d037      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ba:	d004      	beq.n	80024c6 <HAL_ADC_IRQHandler+0x236>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d106      	bne.n	80024d4 <HAL_ADC_IRQHandler+0x244>
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d027      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 80024d2:	e005      	b.n	80024e0 <HAL_ADC_IRQHandler+0x250>
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d020      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e8:	d004      	beq.n	80024f4 <HAL_ADC_IRQHandler+0x264>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d106      	bne.n	8002502 <HAL_ADC_IRQHandler+0x272>
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_ADC_IRQHandler+0x2bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d010      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 8002500:	e005      	b.n	800250e <HAL_ADC_IRQHandler+0x27e>
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <HAL_ADC_IRQHandler+0x2c0>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2b09      	cmp	r3, #9
 800250c:	d009      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002516:	d004      	beq.n	8002522 <HAL_ADC_IRQHandler+0x292>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0d      	ldr	r2, [pc, #52]	; (8002554 <HAL_ADC_IRQHandler+0x2c4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d104      	bne.n	800252c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e018      	b.n	800255e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002534:	d004      	beq.n	8002540 <HAL_ADC_IRQHandler+0x2b0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_ADC_IRQHandler+0x2b8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10b      	bne.n	8002558 <HAL_ADC_IRQHandler+0x2c8>
 8002540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002544:	e009      	b.n	800255a <HAL_ADC_IRQHandler+0x2ca>
 8002546:	bf00      	nop
 8002548:	50000100 	.word	0x50000100
 800254c:	50000300 	.word	0x50000300
 8002550:	50000700 	.word	0x50000700
 8002554:	50000400 	.word	0x50000400
 8002558:	4b92      	ldr	r3, [pc, #584]	; (80027a4 <HAL_ADC_IRQHandler+0x514>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002564:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 80b0 	bne.w	80026ce <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80a3 	bne.w	80026ce <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 809d 	bne.w	80026ce <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8097 	beq.w	80026ce <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a8:	d004      	beq.n	80025b4 <HAL_ADC_IRQHandler+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7e      	ldr	r2, [pc, #504]	; (80027a8 <HAL_ADC_IRQHandler+0x518>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d106      	bne.n	80025c2 <HAL_ADC_IRQHandler+0x332>
 80025b4:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <HAL_ADC_IRQHandler+0x51c>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d03e      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 80025c0:	e005      	b.n	80025ce <HAL_ADC_IRQHandler+0x33e>
 80025c2:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_ADC_IRQHandler+0x520>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d037      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d6:	d004      	beq.n	80025e2 <HAL_ADC_IRQHandler+0x352>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a72      	ldr	r2, [pc, #456]	; (80027a8 <HAL_ADC_IRQHandler+0x518>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x360>
 80025e2:	4b72      	ldr	r3, [pc, #456]	; (80027ac <HAL_ADC_IRQHandler+0x51c>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d027      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 80025ee:	e005      	b.n	80025fc <HAL_ADC_IRQHandler+0x36c>
 80025f0:	4b6f      	ldr	r3, [pc, #444]	; (80027b0 <HAL_ADC_IRQHandler+0x520>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2b06      	cmp	r3, #6
 80025fa:	d020      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002604:	d004      	beq.n	8002610 <HAL_ADC_IRQHandler+0x380>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a67      	ldr	r2, [pc, #412]	; (80027a8 <HAL_ADC_IRQHandler+0x518>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d106      	bne.n	800261e <HAL_ADC_IRQHandler+0x38e>
 8002610:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_ADC_IRQHandler+0x51c>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2b07      	cmp	r3, #7
 800261a:	d010      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 800261c:	e005      	b.n	800262a <HAL_ADC_IRQHandler+0x39a>
 800261e:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_ADC_IRQHandler+0x520>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2b07      	cmp	r3, #7
 8002628:	d009      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002632:	d004      	beq.n	800263e <HAL_ADC_IRQHandler+0x3ae>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5a      	ldr	r2, [pc, #360]	; (80027a4 <HAL_ADC_IRQHandler+0x514>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d104      	bne.n	8002648 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e00f      	b.n	8002668 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002650:	d004      	beq.n	800265c <HAL_ADC_IRQHandler+0x3cc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a54      	ldr	r2, [pc, #336]	; (80027a8 <HAL_ADC_IRQHandler+0x518>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d102      	bne.n	8002662 <HAL_ADC_IRQHandler+0x3d2>
 800265c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002660:	e000      	b.n	8002664 <HAL_ADC_IRQHandler+0x3d4>
 8002662:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_ADC_IRQHandler+0x514>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d12d      	bne.n	80026ce <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11a      	bne.n	80026b6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800268e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d112      	bne.n	80026ce <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
 80026b4:	e00b      	b.n	80026ce <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f043 0210 	orr.w	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0201 	orr.w	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8c4 	bl	800285c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2260      	movs	r2, #96	; 0x60
 80026da:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d011      	beq.n	800270a <HAL_ADC_IRQHandler+0x47a>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00c      	beq.n	800270a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fa85 	bl	8001c0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d012      	beq.n	800273a <HAL_ADC_IRQHandler+0x4aa>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8aa 	bl	8002884 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	2b00      	cmp	r3, #0
 8002742:	d012      	beq.n	800276a <HAL_ADC_IRQHandler+0x4da>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00d      	beq.n	800276a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f89c 	bl	8002898 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002768:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d04f      	beq.n	8002814 <HAL_ADC_IRQHandler+0x584>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d04a      	beq.n	8002814 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e02d      	b.n	80027e8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x510>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_ADC_IRQHandler+0x518>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d109      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x524>
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_ADC_IRQHandler+0x51c>)
 80027a2:	e008      	b.n	80027b6 <HAL_ADC_IRQHandler+0x526>
 80027a4:	50000400 	.word	0x50000400
 80027a8:	50000100 	.word	0x50000100
 80027ac:	50000300 	.word	0x50000300
 80027b0:	50000700 	.word	0x50000700
 80027b4:	4b28      	ldr	r3, [pc, #160]	; (8002858 <HAL_ADC_IRQHandler+0x5c8>)
 80027b6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	e007      	b.n	80027e8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80027e4:	2301      	movs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d10e      	bne.n	800280c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fa0a 	bl	8001c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2210      	movs	r2, #16
 8002812:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d018      	beq.n	8002850 <HAL_ADC_IRQHandler+0x5c0>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f043 0208 	orr.w	r2, r3, #8
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f810 	bl	8002870 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002850:	bf00      	nop
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	50000700 	.word	0x50000700

0800285c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b09b      	sub	sp, #108	; 0x6c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x22>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e2ca      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x5b8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 82ae 	bne.w	8002e42 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d81c      	bhi.n	8002928 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	461a      	mov	r2, r3
 8002902:	231f      	movs	r3, #31
 8002904:	4093      	lsls	r3, r2
 8002906:	43db      	mvns	r3, r3
 8002908:	4019      	ands	r1, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa00 f203 	lsl.w	r2, r0, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
 8002926:	e063      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b09      	cmp	r3, #9
 800292e:	d81e      	bhi.n	800296e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	3b1e      	subs	r3, #30
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3b1e      	subs	r3, #30
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	635a      	str	r2, [r3, #52]	; 0x34
 800296c:	e040      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b0e      	cmp	r3, #14
 8002974:	d81e      	bhi.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	3b3c      	subs	r3, #60	; 0x3c
 800298a:	221f      	movs	r2, #31
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	4019      	ands	r1, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	3b3c      	subs	r3, #60	; 0x3c
 80029a6:	fa00 f203 	lsl.w	r2, r0, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
 80029b2:	e01d      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	3b5a      	subs	r3, #90	; 0x5a
 80029c8:	221f      	movs	r2, #31
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4019      	ands	r1, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	3b5a      	subs	r3, #90	; 0x5a
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 80e5 	bne.w	8002bca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d91c      	bls.n	8002a42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6999      	ldr	r1, [r3, #24]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	3b1e      	subs	r3, #30
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6898      	ldr	r0, [r3, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	619a      	str	r2, [r3, #24]
 8002a40:	e019      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	2207      	movs	r2, #7
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6898      	ldr	r0, [r3, #8]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	08db      	lsrs	r3, r3, #3
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d84f      	bhi.n	8002b38 <HAL_ADC_ConfigChannel+0x28c>
 8002a98:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9e:	bf00      	nop
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ad3 	.word	0x08002ad3
 8002aa8:	08002af5 	.word	0x08002af5
 8002aac:	08002b17 	.word	0x08002b17
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab6:	4b9a      	ldr	r3, [pc, #616]	; (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	0691      	lsls	r1, r2, #26
 8002ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ad0:	e07e      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ad8:	4b91      	ldr	r3, [pc, #580]	; (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	0691      	lsls	r1, r2, #26
 8002ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002af0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002af2:	e06d      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002afa:	4b89      	ldr	r3, [pc, #548]	; (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	0691      	lsls	r1, r2, #26
 8002b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b06:	430a      	orrs	r2, r1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b12:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b14:	e05c      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b1c:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <HAL_ADC_ConfigChannel+0x474>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	0691      	lsls	r1, r2, #26
 8002b26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b34:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b36:	e04b      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b7e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	069b      	lsls	r3, r3, #26
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10a      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002bc8:	e001      	b.n	8002bce <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002bce:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x344>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x344>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x346>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8130 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d00f      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c1e:	e049      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b09      	cmp	r3, #9
 8002c40:	d91c      	bls.n	8002c7c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6999      	ldr	r1, [r3, #24]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	3b1b      	subs	r3, #27
 8002c54:	2207      	movs	r2, #7
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4019      	ands	r1, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6898      	ldr	r0, [r3, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b1b      	subs	r3, #27
 8002c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	619a      	str	r2, [r3, #24]
 8002c7a:	e01b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6959      	ldr	r1, [r3, #20]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	2207      	movs	r2, #7
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	4019      	ands	r1, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6898      	ldr	r0, [r3, #8]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d004      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0x41c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <HAL_ADC_ConfigChannel+0x478>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x420>
 8002cc8:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <HAL_ADC_ConfigChannel+0x47c>)
 8002cca:	e000      	b.n	8002cce <HAL_ADC_ConfigChannel+0x422>
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_ADC_ConfigChannel+0x480>)
 8002cce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d105      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d015      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ce8:	2b11      	cmp	r3, #17
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cfc:	2b12      	cmp	r3, #18
 8002cfe:	f040 80ab 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f040 80a4 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d18:	d10a      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x484>
 8002d1a:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <HAL_ADC_ConfigChannel+0x478>)
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e022      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4ba>
 8002d20:	83fff000 	.word	0x83fff000
 8002d24:	50000100 	.word	0x50000100
 8002d28:	50000300 	.word	0x50000300
 8002d2c:	50000700 	.word	0x50000700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4e      	ldr	r2, [pc, #312]	; (8002e70 <HAL_ADC_ConfigChannel+0x5c4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d103      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x496>
 8002d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e011      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4ba>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x4a6>
 8002d4c:	4b4a      	ldr	r3, [pc, #296]	; (8002e78 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e009      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4ba>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a48      	ldr	r2, [pc, #288]	; (8002e78 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d102      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x4b6>
 8002d5c:	4b45      	ldr	r3, [pc, #276]	; (8002e74 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e001      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x4ba>
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d108      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x4da>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x4da>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x4dc>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d150      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d8c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d107      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x502>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x502>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x504>
 8002dae:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d13c      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d11d      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x54c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d118      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_ADC_ConfigChannel+0x5d0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_ADC_ConfigChannel+0x5d4>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	0c9a      	lsrs	r2, r3, #18
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002de8:	e002      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f9      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df6:	e02e      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b11      	cmp	r3, #17
 8002dfe:	d10b      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x56c>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e08:	d106      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e16:	e01e      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b12      	cmp	r3, #18
 8002e1e:	d11a      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e2c:	e013      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e40:	e00a      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e54:	e000      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e56:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	376c      	adds	r7, #108	; 0x6c
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	50000100 	.word	0x50000100
 8002e74:	50000400 	.word	0x50000400
 8002e78:	50000500 	.word	0x50000500
 8002e7c:	20000028 	.word	0x20000028
 8002e80:	431bde83 	.word	0x431bde83

08002e84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b099      	sub	sp, #100	; 0x64
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9c:	d102      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	e01a      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d103      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	e011      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a67      	ldr	r2, [pc, #412]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e009      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d102      	bne.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ed0:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	e001      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b0      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0a9      	b.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f040 808d 	bne.w	8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 8086 	bne.w	8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	d004      	beq.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f2c:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f2e:	e000      	b.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f30:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f32:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d040      	beq.n	8002fbe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4e:	035b      	lsls	r3, r3, #13
 8002f50:	430b      	orrs	r3, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f56:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d15c      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d107      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f9a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d14b      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fa8:	f023 030f 	bic.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6811      	ldr	r1, [r2, #0]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	6892      	ldr	r2, [r2, #8]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fba:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fbc:	e03c      	b.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d123      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800300c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800301a:	f023 030f 	bic.w	r3, r3, #15
 800301e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003020:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003022:	e009      	b.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003036:	e000      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003038:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003042:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003046:	4618      	mov	r0, r3
 8003048:	3764      	adds	r7, #100	; 0x64
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	50000100 	.word	0x50000100
 8003058:	50000400 	.word	0x50000400
 800305c:	50000500 	.word	0x50000500
 8003060:	50000300 	.word	0x50000300
 8003064:	50000700 	.word	0x50000700

08003068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d108      	bne.n	8003094 <ADC_Enable+0x2c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <ADC_Enable+0x2c>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <ADC_Enable+0x2e>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d143      	bne.n	8003122 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	4b22      	ldr	r3, [pc, #136]	; (800312c <ADC_Enable+0xc4>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f043 0201 	orr.w	r2, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e02f      	b.n	8003124 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80030d4:	f7fe fd6a 	bl	8001bac <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030da:	e01b      	b.n	8003114 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030dc:	f7fe fd66 	bl	8001bac <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d914      	bls.n	8003114 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d00d      	beq.n	8003114 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0210 	orr.w	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d1dc      	bne.n	80030dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	8000003f 	.word	0x8000003f

08003130 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <ADC_Disable+0x2c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <ADC_Disable+0x2c>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <ADC_Disable+0x2e>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d047      	beq.n	80031f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030d 	and.w	r3, r3, #13
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10f      	bne.n	8003190 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0202 	orr.w	r2, r2, #2
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2203      	movs	r2, #3
 8003186:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003188:	f7fe fd10 	bl	8001bac <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800318e:	e029      	b.n	80031e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f043 0210 	orr.w	r2, r3, #16
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e023      	b.n	80031f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ac:	f7fe fcfe 	bl	8001bac <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d914      	bls.n	80031e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10d      	bne.n	80031e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e007      	b.n	80031f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d0dc      	beq.n	80031ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <__NVIC_EnableIRQ+0x38>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db0a      	blt.n	80032c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	490c      	ldr	r1, [pc, #48]	; (80032e8 <__NVIC_SetPriority+0x4c>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	440b      	add	r3, r1
 80032c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c4:	e00a      	b.n	80032dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4908      	ldr	r1, [pc, #32]	; (80032ec <__NVIC_SetPriority+0x50>)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3b04      	subs	r3, #4
 80032d4:	0112      	lsls	r2, r2, #4
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	440b      	add	r3, r1
 80032da:	761a      	strb	r2, [r3, #24]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	bf28      	it	cs
 800330e:	2304      	movcs	r3, #4
 8003310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3304      	adds	r3, #4
 8003316:	2b06      	cmp	r3, #6
 8003318:	d902      	bls.n	8003320 <NVIC_EncodePriority+0x30>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b03      	subs	r3, #3
 800331e:	e000      	b.n	8003322 <NVIC_EncodePriority+0x32>
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	401a      	ands	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43d9      	mvns	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003348:	4313      	orrs	r3, r2
         );
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	; 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800337c:	f7ff ff8e 	bl	800329c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff29 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff3e 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff8e 	bl	80032f0 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff5d 	bl	800329c <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff31 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa2 	bl	8003358 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800342c:	2b02      	cmp	r3, #2
 800342e:	d008      	beq.n	8003442 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2204      	movs	r2, #4
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e020      	b.n	8003484 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 020e 	bic.w	r2, r2, #14
 8003450:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	2101      	movs	r1, #1
 800346c:	fa01 f202 	lsl.w	r2, r1, r2
 8003470:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d005      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2204      	movs	r2, #4
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e027      	b.n	8003502 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020e 	bic.w	r2, r2, #14
 80034c0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
    } 
  }
  return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e154      	b.n	80037c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8146 	beq.w	80037c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b01      	cmp	r3, #1
 800353e:	d005      	beq.n	800354c <HAL_GPIO_Init+0x40>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d130      	bne.n	80035ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0201 	and.w	r2, r3, #1
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d017      	beq.n	80035ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	6939      	ldr	r1, [r7, #16]
 800363a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0203 	and.w	r2, r3, #3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a0 	beq.w	80037c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003680:	4b58      	ldr	r3, [pc, #352]	; (80037e4 <HAL_GPIO_Init+0x2d8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_GPIO_Init+0x2d8>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6193      	str	r3, [r2, #24]
 800368c:	4b55      	ldr	r3, [pc, #340]	; (80037e4 <HAL_GPIO_Init+0x2d8>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003698:	4a53      	ldr	r2, [pc, #332]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036c2:	d019      	beq.n	80036f8 <HAL_GPIO_Init+0x1ec>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a49      	ldr	r2, [pc, #292]	; (80037ec <HAL_GPIO_Init+0x2e0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_GPIO_Init+0x1e8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a48      	ldr	r2, [pc, #288]	; (80037f0 <HAL_GPIO_Init+0x2e4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00d      	beq.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a47      	ldr	r2, [pc, #284]	; (80037f4 <HAL_GPIO_Init+0x2e8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <HAL_GPIO_Init+0x1e0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a46      	ldr	r2, [pc, #280]	; (80037f8 <HAL_GPIO_Init+0x2ec>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_GPIO_Init+0x1dc>
 80036e4:	2304      	movs	r3, #4
 80036e6:	e008      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036e8:	2305      	movs	r3, #5
 80036ea:	e006      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036ec:	2303      	movs	r3, #3
 80036ee:	e004      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e002      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f8:	2300      	movs	r3, #0
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	f002 0203 	and.w	r2, r2, #3
 8003700:	0092      	lsls	r2, r2, #2
 8003702:	4093      	lsls	r3, r2
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800370a:	4937      	ldr	r1, [pc, #220]	; (80037e8 <HAL_GPIO_Init+0x2dc>)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	3302      	adds	r3, #2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003718:	4b38      	ldr	r3, [pc, #224]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	43db      	mvns	r3, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800373c:	4a2f      	ldr	r2, [pc, #188]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003742:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	43db      	mvns	r3, r3
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003766:	4a25      	ldr	r2, [pc, #148]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	43db      	mvns	r3, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003790:	4a1a      	ldr	r2, [pc, #104]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	43db      	mvns	r3, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_GPIO_Init+0x2f0>)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3301      	adds	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f47f aea3 	bne.w	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010000 	.word	0x40010000
 80037ec:	48000400 	.word	0x48000400
 80037f0:	48000800 	.word	0x48000800
 80037f4:	48000c00 	.word	0x48000c00
 80037f8:	48001000 	.word	0x48001000
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800381c:	e002      	b.n	8003824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381e:	887a      	ldrh	r2, [r7, #2]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	43d9      	mvns	r1, r3
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	400b      	ands	r3, r1
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	619a      	str	r2, [r3, #24]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800387a:	4a05      	ldr	r2, [pc, #20]	; (8003890 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fe52 	bl	800152c <HAL_GPIO_EXTI_Callback>
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e081      	b.n	80039aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fed4 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	e006      	b.n	800391c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800391a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d104      	bne.n	800392e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800392c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003950:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69d9      	ldr	r1, [r3, #28]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1a      	ldr	r2, [r3, #32]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d138      	bne.n	8003a3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e032      	b.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2224      	movs	r2, #36	; 0x24
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0201 	orr.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d139      	bne.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e033      	b.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2224      	movs	r2, #36	; 0x24
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
  }
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae2:	b08b      	sub	sp, #44	; 0x2c
 8003ae4:	af06      	add	r7, sp, #24
 8003ae6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0c4      	b.n	8003c7c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d106      	bne.n	8003b0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fef0 	bl	80018ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 fa41 	bl	8007fa0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	e040      	b.n	8003ba6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	440b      	add	r3, r1
 8003b34:	3301      	adds	r3, #1
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3303      	adds	r3, #3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	3338      	adds	r3, #56	; 0x38
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	440b      	add	r3, r1
 8003b9a:	3340      	adds	r3, #64	; 0x40
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d3b9      	bcc.n	8003b24 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e044      	b.n	8003c40 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bb6:	7bfa      	ldrb	r2, [r7, #15]
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	440b      	add	r3, r1
 8003c32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d3b5      	bcc.n	8003bb6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	687e      	ldr	r6, [r7, #4]
 8003c52:	466d      	mov	r5, sp
 8003c54:	f106 0410 	add.w	r4, r6, #16
 8003c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	1d33      	adds	r3, r6, #4
 8003c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c64:	6838      	ldr	r0, [r7, #0]
 8003c66:	f004 f9b6 	bl	8007fd6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f001 b823 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 817d 	beq.w	8003fba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cc0:	4bbc      	ldr	r3, [pc, #752]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d00c      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ccc:	4bb9      	ldr	r3, [pc, #740]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d15c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x10e>
 8003cd8:	4bb6      	ldr	r3, [pc, #728]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce4:	d155      	bne.n	8003d92 <HAL_RCC_OscConfig+0x10e>
 8003ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003cfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfe:	fab3 f383 	clz	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_RCC_OscConfig+0x94>
 8003d12:	4ba8      	ldr	r3, [pc, #672]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	e015      	b.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003d40:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003d4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003d50:	fa92 f2a2 	rbit	r2, r2
 8003d54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003d58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003d5c:	fab2 f282 	clz	r2, r2
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	f042 0220 	orr.w	r2, r2, #32
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	f002 021f 	and.w	r2, r2, #31
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 811f 	beq.w	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 8116 	bne.w	8003fb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f000 bfaf 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d106      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12e>
 8003da4:	4b83      	ldr	r3, [pc, #524]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a82      	ldr	r2, [pc, #520]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	e036      	b.n	8003e20 <HAL_RCC_OscConfig+0x19c>
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x158>
 8003dc2:	4b7c      	ldr	r3, [pc, #496]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7b      	ldr	r2, [pc, #492]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	4b79      	ldr	r3, [pc, #484]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a78      	ldr	r2, [pc, #480]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e021      	b.n	8003e20 <HAL_RCC_OscConfig+0x19c>
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x184>
 8003dee:	4b71      	ldr	r3, [pc, #452]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a70      	ldr	r2, [pc, #448]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b6e      	ldr	r3, [pc, #440]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6d      	ldr	r2, [pc, #436]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0x19c>
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a69      	ldr	r2, [pc, #420]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a66      	ldr	r2, [pc, #408]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e20:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	f023 020f 	bic.w	r2, r3, #15
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	495f      	ldr	r1, [pc, #380]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d059      	beq.n	8003efe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fd feaf 	bl	8001bac <HAL_GetTick>
 8003e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fd feaa 	bl	8001bac <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b64      	cmp	r3, #100	; 0x64
 8003e62:	d902      	bls.n	8003e6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	f000 bf43 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8003e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003e7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	fab3 f383 	clz	r3, r3
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <HAL_RCC_OscConfig+0x218>
 8003e96:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	e015      	b.n	8003ec8 <HAL_RCC_OscConfig+0x244>
 8003e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003eb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003ec4:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ecc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003ed0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003ed4:	fa92 f2a2 	rbit	r2, r2
 8003ed8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003edc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ee0:	fab2 f282 	clz	r2, r2
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	f002 021f 	and.w	r2, r2, #31
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ab      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1d0>
 8003efc:	e05d      	b.n	8003fba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd fe55 	bl	8001bac <HAL_GetTick>
 8003f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fd fe50 	bl	8001bac <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d902      	bls.n	8003f1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f000 bee9 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8003f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003f32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_RCC_OscConfig+0x2cc>
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	e015      	b.n	8003f7c <HAL_RCC_OscConfig+0x2f8>
 8003f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003f5c:	fa93 f3a3 	rbit	r3, r3
 8003f60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003f6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003f70:	fa93 f3a3 	rbit	r3, r3
 8003f74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003f78:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0x330>)
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003f84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003f88:	fa92 f2a2 	rbit	r2, r2
 8003f8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f94:	fab2 f282 	clz	r2, r2
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	f042 0220 	orr.w	r2, r2, #32
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	f002 021f 	and.w	r2, r2, #31
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ab      	bne.n	8003f08 <HAL_RCC_OscConfig+0x284>
 8003fb0:	e003      	b.n	8003fba <HAL_RCC_OscConfig+0x336>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 817d 	beq.w	80042ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fd0:	4ba6      	ldr	r3, [pc, #664]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fdc:	4ba3      	ldr	r3, [pc, #652]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d172      	bne.n	80040ce <HAL_RCC_OscConfig+0x44a>
 8003fe8:	4ba0      	ldr	r3, [pc, #640]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d16c      	bne.n	80040ce <HAL_RCC_OscConfig+0x44a>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004006:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	fab3 f383 	clz	r3, r3
 800400e:	b2db      	uxtb	r3, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d102      	bne.n	8004024 <HAL_RCC_OscConfig+0x3a0>
 800401e:	4b93      	ldr	r3, [pc, #588]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	e013      	b.n	800404c <HAL_RCC_OscConfig+0x3c8>
 8004024:	2302      	movs	r3, #2
 8004026:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004036:	2302      	movs	r3, #2
 8004038:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800403c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004048:	4b88      	ldr	r3, [pc, #544]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2202      	movs	r2, #2
 800404e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004052:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004056:	fa92 f2a2 	rbit	r2, r2
 800405a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800405e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004062:	fab2 f282 	clz	r2, r2
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f042 0220 	orr.w	r2, r2, #32
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	f002 021f 	and.w	r2, r2, #31
 8004072:	2101      	movs	r1, #1
 8004074:	fa01 f202 	lsl.w	r2, r1, r2
 8004078:	4013      	ands	r3, r2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_RCC_OscConfig+0x410>
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d002      	beq.n	8004094 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f000 be2e 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004094:	4b75      	ldr	r3, [pc, #468]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	21f8      	movs	r1, #248	; 0xf8
 80040aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80040b2:	fa91 f1a1 	rbit	r1, r1
 80040b6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80040ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80040be:	fab1 f181 	clz	r1, r1
 80040c2:	b2c9      	uxtb	r1, r1
 80040c4:	408b      	lsls	r3, r1
 80040c6:	4969      	ldr	r1, [pc, #420]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040cc:	e0fd      	b.n	80042ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8088 	beq.w	80041f0 <HAL_RCC_OscConfig+0x56c>
 80040e0:	2301      	movs	r3, #1
 80040e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80040f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	461a      	mov	r2, r3
 8004108:	2301      	movs	r3, #1
 800410a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fd fd4e 	bl	8001bac <HAL_GetTick>
 8004110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004116:	f7fd fd49 	bl	8001bac <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	f000 bde2 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 800412c:	2302      	movs	r3, #2
 800412e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800413e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	fab3 f383 	clz	r3, r3
 8004146:	b2db      	uxtb	r3, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d102      	bne.n	800415c <HAL_RCC_OscConfig+0x4d8>
 8004156:	4b45      	ldr	r3, [pc, #276]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	e013      	b.n	8004184 <HAL_RCC_OscConfig+0x500>
 800415c:	2302      	movs	r3, #2
 800415e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004162:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800416e:	2302      	movs	r3, #2
 8004170:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004174:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2202      	movs	r2, #2
 8004186:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800418a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800418e:	fa92 f2a2 	rbit	r2, r2
 8004192:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004196:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800419a:	fab2 f282 	clz	r2, r2
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	f042 0220 	orr.w	r2, r2, #32
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	f002 021f 	and.w	r2, r2, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0af      	beq.n	8004116 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b6:	4b2d      	ldr	r3, [pc, #180]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	21f8      	movs	r1, #248	; 0xf8
 80041cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80041d4:	fa91 f1a1 	rbit	r1, r1
 80041d8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80041dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80041e0:	fab1 f181 	clz	r1, r1
 80041e4:	b2c9      	uxtb	r1, r1
 80041e6:	408b      	lsls	r3, r1
 80041e8:	4920      	ldr	r1, [pc, #128]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
 80041ee:	e06c      	b.n	80042ca <HAL_RCC_OscConfig+0x646>
 80041f0:	2301      	movs	r3, #1
 80041f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fcc6 	bl	8001bac <HAL_GetTick>
 8004220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004224:	e00a      	b.n	800423c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004226:	f7fd fcc1 	bl	8001bac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d902      	bls.n	800423c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	f000 bd5a 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 800423c:	2302      	movs	r3, #2
 800423e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800424e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	fab3 f383 	clz	r3, r3
 8004256:	b2db      	uxtb	r3, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d104      	bne.n	8004270 <HAL_RCC_OscConfig+0x5ec>
 8004266:	4b01      	ldr	r3, [pc, #4]	; (800426c <HAL_RCC_OscConfig+0x5e8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	e015      	b.n	8004298 <HAL_RCC_OscConfig+0x614>
 800426c:	40021000 	.word	0x40021000
 8004270:	2302      	movs	r3, #2
 8004272:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004282:	2302      	movs	r3, #2
 8004284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004294:	4bc8      	ldr	r3, [pc, #800]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	2202      	movs	r2, #2
 800429a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800429e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80042a2:	fa92 f2a2 	rbit	r2, r2
 80042a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80042aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80042ae:	fab2 f282 	clz	r2, r2
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	f042 0220 	orr.w	r2, r2, #32
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f002 021f 	and.w	r2, r2, #31
 80042be:	2101      	movs	r1, #1
 80042c0:	fa01 f202 	lsl.w	r2, r1, r2
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ad      	bne.n	8004226 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8110 	beq.w	8004500 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d079      	beq.n	80043e4 <HAL_RCC_OscConfig+0x760>
 80042f0:	2301      	movs	r3, #1
 80042f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	4bab      	ldr	r3, [pc, #684]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	461a      	mov	r2, r3
 8004316:	2301      	movs	r3, #1
 8004318:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fd fc47 	bl	8001bac <HAL_GetTick>
 800431e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004324:	f7fd fc42 	bl	8001bac <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d902      	bls.n	800433a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	f000 bcdb 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 800433a:	2302      	movs	r3, #2
 800433c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800434c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004354:	2202      	movs	r2, #2
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	fa93 f2a3 	rbit	r2, r3
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004378:	2202      	movs	r2, #2
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	fa93 f2a3 	rbit	r2, r3
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004392:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004394:	4b88      	ldr	r3, [pc, #544]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 8004396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043a0:	2102      	movs	r1, #2
 80043a2:	6019      	str	r1, [r3, #0]
 80043a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	fa93 f1a3 	rbit	r1, r3
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043ba:	6019      	str	r1, [r3, #0]
  return result;
 80043bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0a0      	beq.n	8004324 <HAL_RCC_OscConfig+0x6a0>
 80043e2:	e08d      	b.n	8004500 <HAL_RCC_OscConfig+0x87c>
 80043e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043ec:	2201      	movs	r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	fa93 f2a3 	rbit	r2, r3
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004406:	601a      	str	r2, [r3, #0]
  return result;
 8004408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004410:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	4b68      	ldr	r3, [pc, #416]	; (80045bc <HAL_RCC_OscConfig+0x938>)
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004426:	f7fd fbc1 	bl	8001bac <HAL_GetTick>
 800442a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800442e:	e00a      	b.n	8004446 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fd fbbc 	bl	8001bac <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d902      	bls.n	8004446 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	f000 bc55 	b.w	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8004446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800444e:	2202      	movs	r2, #2
 8004450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004456:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fa93 f2a3 	rbit	r2, r3
 8004460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004464:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004472:	2202      	movs	r2, #2
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	fa93 f2a3 	rbit	r2, r3
 8004484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004496:	2202      	movs	r2, #2
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	fa93 f2a3 	rbit	r2, r3
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80044b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b2:	4b41      	ldr	r3, [pc, #260]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 80044b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044be:	2102      	movs	r1, #2
 80044c0:	6019      	str	r1, [r3, #0]
 80044c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	fa93 f1a3 	rbit	r1, r3
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044d8:	6019      	str	r1, [r3, #0]
  return result;
 80044da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d197      	bne.n	8004430 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 81a1 	beq.w	8004858 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451c:	4b26      	ldr	r3, [pc, #152]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004528:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4a22      	ldr	r2, [pc, #136]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 800452e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004532:	61d3      	str	r3, [r2, #28]
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800454e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCC_OscConfig+0x93c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d11a      	bne.n	8004598 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <HAL_RCC_OscConfig+0x93c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <HAL_RCC_OscConfig+0x93c>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fd fb1d 	bl	8001bac <HAL_GetTick>
 8004572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	e009      	b.n	800458c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fd fb18 	bl	8001bac <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b64      	cmp	r3, #100	; 0x64
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e3b1      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_RCC_OscConfig+0x93c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800459c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10d      	bne.n	80045c4 <HAL_RCC_OscConfig+0x940>
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <HAL_RCC_OscConfig+0x934>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6213      	str	r3, [r2, #32]
 80045b4:	e03c      	b.n	8004630 <HAL_RCC_OscConfig+0x9ac>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	10908120 	.word	0x10908120
 80045c0:	40007000 	.word	0x40007000
 80045c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x96a>
 80045d4:	4bc1      	ldr	r3, [pc, #772]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	4ac0      	ldr	r2, [pc, #768]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6213      	str	r3, [r2, #32]
 80045e0:	4bbe      	ldr	r3, [pc, #760]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	4abd      	ldr	r2, [pc, #756]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80045e6:	f023 0304 	bic.w	r3, r3, #4
 80045ea:	6213      	str	r3, [r2, #32]
 80045ec:	e020      	b.n	8004630 <HAL_RCC_OscConfig+0x9ac>
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x994>
 80045fe:	4bb7      	ldr	r3, [pc, #732]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	4ab6      	ldr	r2, [pc, #728]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 8004604:	f043 0304 	orr.w	r3, r3, #4
 8004608:	6213      	str	r3, [r2, #32]
 800460a:	4bb4      	ldr	r3, [pc, #720]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4ab3      	ldr	r2, [pc, #716]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	e00b      	b.n	8004630 <HAL_RCC_OscConfig+0x9ac>
 8004618:	4bb0      	ldr	r3, [pc, #704]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	4aaf      	ldr	r2, [pc, #700]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	6213      	str	r3, [r2, #32]
 8004624:	4bad      	ldr	r3, [pc, #692]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4aac      	ldr	r2, [pc, #688]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800462a:	f023 0304 	bic.w	r3, r3, #4
 800462e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 8081 	beq.w	8004744 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fd fab3 	bl	8001bac <HAL_GetTick>
 8004646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fd faae 	bl	8001bac <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e345      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8004664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004668:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800466c:	2202      	movs	r2, #2
 800466e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004674:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fa93 f2a3 	rbit	r2, r3
 800467e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004682:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004690:	2202      	movs	r2, #2
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004698:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	fa93 f2a3 	rbit	r2, r3
 80046a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046aa:	601a      	str	r2, [r3, #0]
  return result;
 80046ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d102      	bne.n	80046d0 <HAL_RCC_OscConfig+0xa4c>
 80046ca:	4b84      	ldr	r3, [pc, #528]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	e013      	b.n	80046f8 <HAL_RCC_OscConfig+0xa74>
 80046d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046d8:	2202      	movs	r2, #2
 80046da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f2a3 	rbit	r2, r3
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	4b79      	ldr	r3, [pc, #484]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004700:	2102      	movs	r1, #2
 8004702:	6011      	str	r1, [r2, #0]
 8004704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004708:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	fa92 f1a2 	rbit	r1, r2
 8004712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004716:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800471a:	6011      	str	r1, [r2, #0]
  return result;
 800471c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004720:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	fab2 f282 	clz	r2, r2
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	f002 021f 	and.w	r2, r2, #31
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f202 	lsl.w	r2, r1, r2
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d084      	beq.n	800464c <HAL_RCC_OscConfig+0x9c8>
 8004742:	e07f      	b.n	8004844 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004744:	f7fd fa32 	bl	8001bac <HAL_GetTick>
 8004748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474c:	e00b      	b.n	8004766 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd fa2d 	bl	8001bac <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e2c4      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8004766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800476e:	2202      	movs	r2, #2
 8004770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004776:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	fa93 f2a3 	rbit	r2, r3
 8004780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004784:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004792:	2202      	movs	r2, #2
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	fa93 f2a3 	rbit	r2, r3
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047ac:	601a      	str	r2, [r3, #0]
  return result;
 80047ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_OscConfig+0xb4e>
 80047cc:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	e013      	b.n	80047fa <HAL_RCC_OscConfig+0xb76>
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047da:	2202      	movs	r2, #2
 80047dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	fa93 f2a3 	rbit	r2, r3
 80047ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004802:	2102      	movs	r1, #2
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800480a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	fa92 f1a2 	rbit	r1, r2
 8004814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004818:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800481c:	6011      	str	r1, [r2, #0]
  return result;
 800481e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004822:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	fab2 f282 	clz	r2, r2
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	f002 021f 	and.w	r2, r2, #31
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d184      	bne.n	800474e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004844:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 8004852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004856:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8242 	beq.w	8004cee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <HAL_RCC_OscConfig+0xc58>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	f000 8213 	beq.w	8004c9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2b02      	cmp	r3, #2
 8004886:	f040 8162 	bne.w	8004b4e <HAL_RCC_OscConfig+0xeca>
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800489c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	fa93 f2a3 	rbit	r2, r3
 80048a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048ae:	601a      	str	r2, [r3, #0]
  return result;
 80048b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	fab3 f383 	clz	r3, r3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	461a      	mov	r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f96c 	bl	8001bac <HAL_GetTick>
 80048d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d8:	e00c      	b.n	80048f4 <HAL_RCC_OscConfig+0xc70>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fd f964 	bl	8001bac <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e1fd      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
 80048f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	fa93 f2a3 	rbit	r2, r3
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004918:	601a      	str	r2, [r3, #0]
  return result;
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004922:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004924:	fab3 f383 	clz	r3, r3
 8004928:	b2db      	uxtb	r3, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_RCC_OscConfig+0xcba>
 8004938:	4bb0      	ldr	r3, [pc, #704]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	e027      	b.n	800498e <HAL_RCC_OscConfig+0xd0a>
 800493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004942:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800494a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	fa93 f2a3 	rbit	r2, r3
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004968:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800496c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	fa93 f2a3 	rbit	r2, r3
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	4b9c      	ldr	r3, [pc, #624]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004992:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004996:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800499a:	6011      	str	r1, [r2, #0]
 800499c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	fa92 f1a2 	rbit	r1, r2
 80049aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049b2:	6011      	str	r1, [r2, #0]
  return result;
 80049b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	f042 0220 	orr.w	r2, r2, #32
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	f002 021f 	and.w	r2, r2, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f202 	lsl.w	r2, r1, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d182      	bne.n	80048e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049da:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	430b      	orrs	r3, r1
 80049fc:	497f      	ldr	r1, [pc, #508]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
 8004a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a06:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fa93 f2a3 	rbit	r2, r3
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a26:	601a      	str	r2, [r3, #0]
  return result;
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a30:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	461a      	mov	r2, r3
 8004a44:	2301      	movs	r3, #1
 8004a46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fd f8b0 	bl	8001bac <HAL_GetTick>
 8004a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a50:	e009      	b.n	8004a66 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a52:	f7fd f8ab 	bl	8001bac <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e144      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8004a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	fa93 f2a3 	rbit	r2, r3
 8004a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a86:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a8a:	601a      	str	r2, [r3, #0]
  return result;
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe2c>
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e027      	b.n	8004b00 <HAL_RCC_OscConfig+0xe7c>
 8004ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	fa93 f2a3 	rbit	r2, r3
 8004af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b04:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b12:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	fa92 f1a2 	rbit	r1, r2
 8004b1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b24:	6011      	str	r1, [r2, #0]
  return result;
 8004b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b2a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	fab2 f282 	clz	r2, r2
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f042 0220 	orr.w	r2, r2, #32
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	f002 021f 	and.w	r2, r2, #31
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f202 	lsl.w	r2, r1, r2
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d082      	beq.n	8004a52 <HAL_RCC_OscConfig+0xdce>
 8004b4c:	e0cf      	b.n	8004cee <HAL_RCC_OscConfig+0x106a>
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fa93 f2a3 	rbit	r2, r3
 8004b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b72:	601a      	str	r2, [r3, #0]
  return result;
 8004b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b78:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004b7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fd f80a 	bl	8001bac <HAL_GetTick>
 8004b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b9c:	e009      	b.n	8004bb2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9e:	f7fd f805 	bl	8001bac <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e09e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	fa93 f2a3 	rbit	r2, r3
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004bd6:	601a      	str	r2, [r3, #0]
  return result;
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d104      	bne.n	8004c00 <HAL_RCC_OscConfig+0xf7c>
 8004bf6:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <HAL_RCC_OscConfig+0xf78>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	e029      	b.n	8004c50 <HAL_RCC_OscConfig+0xfcc>
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fa93 f2a3 	rbit	r2, r3
 8004c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	fa93 f2a3 	rbit	r2, r3
 8004c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <HAL_RCC_OscConfig+0x1078>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c5c:	6011      	str	r1, [r2, #0]
 8004c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	fa92 f1a2 	rbit	r1, r2
 8004c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c74:	6011      	str	r1, [r2, #0]
  return result;
 8004c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	fab2 f282 	clz	r2, r2
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	f042 0220 	orr.w	r2, r2, #32
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	f002 021f 	and.w	r2, r2, #31
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f202 	lsl.w	r2, r1, r2
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d180      	bne.n	8004b9e <HAL_RCC_OscConfig+0xf1a>
 8004c9c:	e027      	b.n	8004cee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e01e      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <HAL_RCC_OscConfig+0x1078>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004cd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b09e      	sub	sp, #120	; 0x78
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e162      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d18:	4b90      	ldr	r3, [pc, #576]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d910      	bls.n	8004d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b8d      	ldr	r3, [pc, #564]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 0207 	bic.w	r2, r3, #7
 8004d2e:	498b      	ldr	r1, [pc, #556]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b89      	ldr	r3, [pc, #548]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d001      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e14a      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d54:	4b82      	ldr	r3, [pc, #520]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	497f      	ldr	r1, [pc, #508]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80dc 	beq.w	8004f2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d13c      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xf6>
 8004d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xa6>
 8004da0:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	e00f      	b.n	8004dc6 <HAL_RCC_ClockConfig+0xc6>
 8004da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004daa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
 8004db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc2:	4b67      	ldr	r3, [pc, #412]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004dca:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dce:	fa92 f2a2 	rbit	r2, r2
 8004dd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004dd6:	fab2 f282 	clz	r2, r2
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	f042 0220 	orr.w	r2, r2, #32
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	f002 021f 	and.w	r2, r2, #31
 8004de6:	2101      	movs	r1, #1
 8004de8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d17b      	bne.n	8004eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0f3      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d13c      	bne.n	8004e78 <HAL_RCC_ClockConfig+0x178>
 8004dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	fab3 f383 	clz	r3, r3
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x128>
 8004e22:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	e00f      	b.n	8004e48 <HAL_RCC_ClockConfig+0x148>
 8004e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
 8004e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e50:	fa92 f2a2 	rbit	r2, r2
 8004e54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e58:	fab2 f282 	clz	r2, r2
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	f042 0220 	orr.w	r2, r2, #32
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	f002 021f 	and.w	r2, r2, #31
 8004e68:	2101      	movs	r1, #1
 8004e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d13a      	bne.n	8004eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0b2      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d102      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x1a0>
 8004e9a:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	e00d      	b.n	8004ebc <HAL_RCC_ClockConfig+0x1bc>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	fa93 f3a3 	rbit	r3, r3
 8004eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004eac:	2302      	movs	r3, #2
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	61ba      	str	r2, [r7, #24]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	fa92 f2a2 	rbit	r2, r2
 8004ec6:	617a      	str	r2, [r7, #20]
  return result;
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0220 	orr.w	r2, r2, #32
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e079      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f023 0203 	bic.w	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	491a      	ldr	r1, [pc, #104]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004efc:	f7fc fe56 	bl	8001bac <HAL_GetTick>
 8004f00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f04:	f7fc fe52 	bl	8001bac <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e061      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <HAL_RCC_ClockConfig+0x260>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 020c 	and.w	r2, r3, #12
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d1eb      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d214      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 0207 	bic.w	r2, r3, #7
 8004f42:	4906      	ldr	r1, [pc, #24]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <HAL_RCC_ClockConfig+0x25c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e040      	b.n	8004fde <HAL_RCC_ClockConfig+0x2de>
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f70:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	491a      	ldr	r1, [pc, #104]	; (8004fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4912      	ldr	r1, [pc, #72]	; (8004fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004fa2:	f000 f829 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb0:	22f0      	movs	r2, #240	; 0xf0
 8004fb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	fa92 f2a2 	rbit	r2, r2
 8004fba:	60fa      	str	r2, [r7, #12]
  return result;
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	40d3      	lsrs	r3, r2
 8004fc6:	4a09      	ldr	r2, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x2ec>)
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	fa21 f303 	lsr.w	r3, r1, r3
 8004fce:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <HAL_RCC_ClockConfig+0x2f0>)
 8004fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <HAL_RCC_ClockConfig+0x2f4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fc fda4 	bl	8001b24 <HAL_InitTick>
  
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3778      	adds	r7, #120	; 0x78
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	080089cc 	.word	0x080089cc
 8004ff0:	20000028 	.word	0x20000028
 8004ff4:	2000002c 	.word	0x2000002c

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b08b      	sub	sp, #44	; 0x2c
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 030c 	and.w	r3, r3, #12
 800501e:	2b04      	cmp	r3, #4
 8005020:	d002      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x30>
 8005022:	2b08      	cmp	r3, #8
 8005024:	d003      	beq.n	800502e <HAL_RCC_GetSysClockFreq+0x36>
 8005026:	e03c      	b.n	80050a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005028:	4b24      	ldr	r3, [pc, #144]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800502a:	623b      	str	r3, [r7, #32]
      break;
 800502c:	e03c      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005034:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005038:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	fa92 f2a2 	rbit	r2, r2
 8005040:	607a      	str	r2, [r7, #4]
  return result;
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	fab2 f282 	clz	r2, r2
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	40d3      	lsrs	r3, r2
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	220f      	movs	r2, #15
 800505c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	fa92 f2a2 	rbit	r2, r2
 8005064:	60fa      	str	r2, [r7, #12]
  return result;
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	fab2 f282 	clz	r2, r2
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	40d3      	lsrs	r3, r2
 8005070:	4a14      	ldr	r2, [pc, #80]	; (80050c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005080:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	fbb2 f2f3 	udiv	r2, r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	e004      	b.n	800509c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4a0c      	ldr	r2, [pc, #48]	; (80050c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	623b      	str	r3, [r7, #32]
      break;
 80050a0:	e002      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80050a4:	623b      	str	r3, [r7, #32]
      break;
 80050a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050a8:	6a3b      	ldr	r3, [r7, #32]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	372c      	adds	r7, #44	; 0x2c
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	007a1200 	.word	0x007a1200
 80050c0:	080089e4 	.word	0x080089e4
 80050c4:	080089f4 	.word	0x080089f4
 80050c8:	003d0900 	.word	0x003d0900

080050cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050d2:	681b      	ldr	r3, [r3, #0]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	20000028 	.word	0x20000028

080050e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80050ea:	f7ff ffef 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80050fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	fa92 f2a2 	rbit	r2, r2
 8005104:	603a      	str	r2, [r7, #0]
  return result;
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	fab2 f282 	clz	r2, r2
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	40d3      	lsrs	r3, r2
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005112:	5cd3      	ldrb	r3, [r2, r3]
 8005114:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	080089dc 	.word	0x080089dc

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800512e:	f7ff ffcd 	bl	80050cc <HAL_RCC_GetHCLKFreq>
 8005132:	4601      	mov	r1, r0
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800513c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005140:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	fa92 f2a2 	rbit	r2, r2
 8005148:	603a      	str	r2, [r7, #0]
  return result;
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	fab2 f282 	clz	r2, r2
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	40d3      	lsrs	r3, r2
 8005154:	4a04      	ldr	r2, [pc, #16]	; (8005168 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005156:	5cd3      	ldrb	r3, [r2, r3]
 8005158:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	080089dc 	.word	0x080089dc

0800516c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b092      	sub	sp, #72	; 0x48
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80d4 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005190:	4b4e      	ldr	r3, [pc, #312]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10e      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	61d3      	str	r3, [r2, #28]
 80051a8:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ba:	4b45      	ldr	r3, [pc, #276]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d118      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051c6:	4b42      	ldr	r3, [pc, #264]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d2:	f7fc fceb 	bl	8001bac <HAL_GetTick>
 80051d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	e008      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fc fce7 	bl	8001bac <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b64      	cmp	r3, #100	; 0x64
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e169      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f8:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8084 	beq.w	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005214:	429a      	cmp	r2, r3
 8005216:	d07c      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005218:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	461a      	mov	r2, r3
 800523a:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	2301      	movs	r3, #1
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800524a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005256:	fab3 f383 	clz	r3, r3
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	4b1d      	ldr	r3, [pc, #116]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800526a:	4a18      	ldr	r2, [pc, #96]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d04b      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc fc97 	bl	8001bac <HAL_GetTick>
 800527e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005280:	e00a      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fc fc93 	bl	8001bac <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005290:	4293      	cmp	r3, r2
 8005292:	d901      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e113      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005298:	2302      	movs	r3, #2
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	2302      	movs	r3, #2
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
  return result;
 80052b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f043 0302 	orr.w	r3, r3, #2
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d108      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052c6:	4b01      	ldr	r3, [pc, #4]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	e00d      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40007000 	.word	0x40007000
 80052d4:	10908100 	.word	0x10908100
 80052d8:	2302      	movs	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	fa93 f3a3 	rbit	r3, r3
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	4b78      	ldr	r3, [pc, #480]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	2202      	movs	r2, #2
 80052ea:	613a      	str	r2, [r7, #16]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	fa92 f2a2 	rbit	r2, r2
 80052f2:	60fa      	str	r2, [r7, #12]
  return result;
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	fab2 f282 	clz	r2, r2
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	f002 021f 	and.w	r2, r2, #31
 8005306:	2101      	movs	r1, #1
 8005308:	fa01 f202 	lsl.w	r2, r1, r2
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0b7      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005312:	4b6d      	ldr	r3, [pc, #436]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	496a      	ldr	r1, [pc, #424]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005320:	4313      	orrs	r3, r2
 8005322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005324:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532c:	4b66      	ldr	r3, [pc, #408]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	4a65      	ldr	r2, [pc, #404]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005344:	4b60      	ldr	r3, [pc, #384]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f023 0203 	bic.w	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	495d      	ldr	r1, [pc, #372]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005362:	4b59      	ldr	r3, [pc, #356]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4956      	ldr	r1, [pc, #344]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005380:	4b51      	ldr	r3, [pc, #324]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	494e      	ldr	r1, [pc, #312]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f023 0210 	bic.w	r2, r3, #16
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4947      	ldr	r1, [pc, #284]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80053bc:	4b42      	ldr	r3, [pc, #264]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	493f      	ldr	r1, [pc, #252]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053da:	4b3b      	ldr	r3, [pc, #236]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	f023 0220 	bic.w	r2, r3, #32
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4938      	ldr	r1, [pc, #224]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f8:	4b33      	ldr	r3, [pc, #204]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	4930      	ldr	r1, [pc, #192]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005416:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	4929      	ldr	r1, [pc, #164]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005424:	4313      	orrs	r3, r2
 8005426:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4921      	ldr	r1, [pc, #132]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	491a      	ldr	r1, [pc, #104]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005460:	4313      	orrs	r3, r2
 8005462:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005470:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	4912      	ldr	r1, [pc, #72]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d008      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800548e:	4b0e      	ldr	r3, [pc, #56]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	490b      	ldr	r1, [pc, #44]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3748      	adds	r7, #72	; 0x48
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000

080054cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e09d      	b.n	800561a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ee:	d009      	beq.n	8005504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	61da      	str	r2, [r3, #28]
 80054f6:	e005      	b.n	8005504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fc f8e6 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800553a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005544:	d902      	bls.n	800554c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	e002      	b.n	8005552 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800554c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005550:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800555a:	d007      	beq.n	800556c <HAL_SPI_Init+0xa0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005564:	d002      	beq.n	800556c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	ea42 0103 	orr.w	r1, r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	f003 0204 	and.w	r2, r3, #4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055e8:	ea42 0103 	orr.w	r1, r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e049      	b.n	80056c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fc f893 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f000 fd27 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d001      	beq.n	80056e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e04a      	b.n	800577e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a21      	ldr	r2, [pc, #132]	; (800578c <HAL_TIM_Base_Start_IT+0xbc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x6c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d013      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x6c>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1d      	ldr	r2, [pc, #116]	; (8005790 <HAL_TIM_Base_Start_IT+0xc0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x6c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_TIM_Base_Start_IT+0xc4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x6c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <HAL_TIM_Base_Start_IT+0xc8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x6c>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a19      	ldr	r2, [pc, #100]	; (800579c <HAL_TIM_Base_Start_IT+0xcc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d115      	bne.n	8005768 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d015      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xaa>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d011      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	e008      	b.n	800577a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e000      	b.n	800577c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40013400 	.word	0x40013400
 800579c:	40014000 	.word	0x40014000
 80057a0:	00010007 	.word	0x00010007

080057a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e049      	b.n	800584a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f841 	bl	8005852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fc66 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_TIM_PWM_Start+0x24>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e03c      	b.n	8005906 <HAL_TIM_PWM_Start+0x9e>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d109      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x3e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e02f      	b.n	8005906 <HAL_TIM_PWM_Start+0x9e>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d109      	bne.n	80058c0 <HAL_TIM_PWM_Start+0x58>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e022      	b.n	8005906 <HAL_TIM_PWM_Start+0x9e>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b0c      	cmp	r3, #12
 80058c4:	d109      	bne.n	80058da <HAL_TIM_PWM_Start+0x72>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	bf14      	ite	ne
 80058d2:	2301      	movne	r3, #1
 80058d4:	2300      	moveq	r3, #0
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e015      	b.n	8005906 <HAL_TIM_PWM_Start+0x9e>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d109      	bne.n	80058f4 <HAL_TIM_PWM_Start+0x8c>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	bf14      	ite	ne
 80058ec:	2301      	movne	r3, #1
 80058ee:	2300      	moveq	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e008      	b.n	8005906 <HAL_TIM_PWM_Start+0x9e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e097      	b.n	8005a3e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d104      	bne.n	800591e <HAL_TIM_PWM_Start+0xb6>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	e023      	b.n	8005966 <HAL_TIM_PWM_Start+0xfe>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b04      	cmp	r3, #4
 8005922:	d104      	bne.n	800592e <HAL_TIM_PWM_Start+0xc6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592c:	e01b      	b.n	8005966 <HAL_TIM_PWM_Start+0xfe>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d104      	bne.n	800593e <HAL_TIM_PWM_Start+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800593c:	e013      	b.n	8005966 <HAL_TIM_PWM_Start+0xfe>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b0c      	cmp	r3, #12
 8005942:	d104      	bne.n	800594e <HAL_TIM_PWM_Start+0xe6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800594c:	e00b      	b.n	8005966 <HAL_TIM_PWM_Start+0xfe>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b10      	cmp	r3, #16
 8005952:	d104      	bne.n	800595e <HAL_TIM_PWM_Start+0xf6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595c:	e003      	b.n	8005966 <HAL_TIM_PWM_Start+0xfe>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2202      	movs	r2, #2
 8005962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ffa0 	bl	80068b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a33      	ldr	r2, [pc, #204]	; (8005a48 <HAL_TIM_PWM_Start+0x1e0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x13e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a32      	ldr	r2, [pc, #200]	; (8005a4c <HAL_TIM_PWM_Start+0x1e4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x13e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a30      	ldr	r2, [pc, #192]	; (8005a50 <HAL_TIM_PWM_Start+0x1e8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x13e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2f      	ldr	r2, [pc, #188]	; (8005a54 <HAL_TIM_PWM_Start+0x1ec>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_PWM_Start+0x13e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2d      	ldr	r2, [pc, #180]	; (8005a58 <HAL_TIM_PWM_Start+0x1f0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_PWM_Start+0x142>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_TIM_PWM_Start+0x144>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <HAL_TIM_PWM_Start+0x1e0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIM_PWM_Start+0x194>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d013      	beq.n	80059fc <HAL_TIM_PWM_Start+0x194>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a20      	ldr	r2, [pc, #128]	; (8005a5c <HAL_TIM_PWM_Start+0x1f4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_PWM_Start+0x194>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <HAL_TIM_PWM_Start+0x1f8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_PWM_Start+0x194>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_TIM_PWM_Start+0x1e4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIM_PWM_Start+0x194>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_TIM_PWM_Start+0x1e8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d115      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <HAL_TIM_PWM_Start+0x1fc>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d015      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x1d2>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d011      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e000      	b.n	8005a3c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40012c00 	.word	0x40012c00
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40014400 	.word	0x40014400
 8005a58:	40014800 	.word	0x40014800
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	00010007 	.word	0x00010007

08005a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0202 	mvn.w	r2, #2
 8005a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fae3 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fad5 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fae6 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0204 	mvn.w	r2, #4
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fab9 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 faab 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fabc 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d122      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d11b      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0208 	mvn.w	r2, #8
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2204      	movs	r2, #4
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa8f 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa81 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa92 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d122      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d11b      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0210 	mvn.w	r2, #16
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2208      	movs	r2, #8
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa65 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005bac:	e005      	b.n	8005bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fa57 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa68 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0201 	mvn.w	r2, #1
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb fc4c 	bl	8001484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf6:	2b80      	cmp	r3, #128	; 0x80
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	2b80      	cmp	r3, #128	; 0x80
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fefe 	bl	8006a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c26:	d10e      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d107      	bne.n	8005c46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fef1 	bl	8006a28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d10e      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d107      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fa16 	bl	800609e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d10e      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d107      	bne.n	8005c9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f06f 0220 	mvn.w	r2, #32
 8005c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 feb1 	bl	8006a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0ff      	b.n	8005ec6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b14      	cmp	r3, #20
 8005cd2:	f200 80f0 	bhi.w	8005eb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005eb7 	.word	0x08005eb7
 8005ce4:	08005eb7 	.word	0x08005eb7
 8005ce8:	08005eb7 	.word	0x08005eb7
 8005cec:	08005d71 	.word	0x08005d71
 8005cf0:	08005eb7 	.word	0x08005eb7
 8005cf4:	08005eb7 	.word	0x08005eb7
 8005cf8:	08005eb7 	.word	0x08005eb7
 8005cfc:	08005db3 	.word	0x08005db3
 8005d00:	08005eb7 	.word	0x08005eb7
 8005d04:	08005eb7 	.word	0x08005eb7
 8005d08:	08005eb7 	.word	0x08005eb7
 8005d0c:	08005df3 	.word	0x08005df3
 8005d10:	08005eb7 	.word	0x08005eb7
 8005d14:	08005eb7 	.word	0x08005eb7
 8005d18:	08005eb7 	.word	0x08005eb7
 8005d1c:	08005e35 	.word	0x08005e35
 8005d20:	08005eb7 	.word	0x08005eb7
 8005d24:	08005eb7 	.word	0x08005eb7
 8005d28:	08005eb7 	.word	0x08005eb7
 8005d2c:	08005e75 	.word	0x08005e75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fa4c 	bl	80061d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	619a      	str	r2, [r3, #24]
      break;
 8005d6e:	e0a5      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fabc 	bl	80062f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	619a      	str	r2, [r3, #24]
      break;
 8005db0:	e084      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fb25 	bl	8006408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0208 	orr.w	r2, r2, #8
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0204 	bic.w	r2, r2, #4
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	61da      	str	r2, [r3, #28]
      break;
 8005df0:	e064      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fb8d 	bl	8006518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	021a      	lsls	r2, r3, #8
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	61da      	str	r2, [r3, #28]
      break;
 8005e32:	e043      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fbd6 	bl	80065ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0208 	orr.w	r2, r2, #8
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0204 	bic.w	r2, r2, #4
 8005e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e72:	e023      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fc1a 	bl	80066b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eb4:	e002      	b.n	8005ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop

08005ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_TIM_ConfigClockSource+0x1c>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e0b6      	b.n	800605a <HAL_TIM_ConfigClockSource+0x18a>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f28:	d03e      	beq.n	8005fa8 <HAL_TIM_ConfigClockSource+0xd8>
 8005f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f2e:	f200 8087 	bhi.w	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f36:	f000 8086 	beq.w	8006046 <HAL_TIM_ConfigClockSource+0x176>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	d87f      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f40:	2b70      	cmp	r3, #112	; 0x70
 8005f42:	d01a      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0xaa>
 8005f44:	2b70      	cmp	r3, #112	; 0x70
 8005f46:	d87b      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f48:	2b60      	cmp	r3, #96	; 0x60
 8005f4a:	d050      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x11e>
 8005f4c:	2b60      	cmp	r3, #96	; 0x60
 8005f4e:	d877      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f50:	2b50      	cmp	r3, #80	; 0x50
 8005f52:	d03c      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xfe>
 8005f54:	2b50      	cmp	r3, #80	; 0x50
 8005f56:	d873      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f58:	2b40      	cmp	r3, #64	; 0x40
 8005f5a:	d058      	beq.n	800600e <HAL_TIM_ConfigClockSource+0x13e>
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d86f      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d064      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x15e>
 8005f64:	2b30      	cmp	r3, #48	; 0x30
 8005f66:	d86b      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d060      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x15e>
 8005f6c:	2b20      	cmp	r3, #32
 8005f6e:	d867      	bhi.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d05c      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x15e>
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d05a      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x15e>
 8005f78:	e062      	b.n	8006040 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f000 fc73 	bl	8006874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	609a      	str	r2, [r3, #8]
      break;
 8005fa6:	e04f      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6899      	ldr	r1, [r3, #8]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f000 fc5c 	bl	8006874 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fca:	609a      	str	r2, [r3, #8]
      break;
 8005fcc:	e03c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 fbd0 	bl	8006780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2150      	movs	r1, #80	; 0x50
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fc29 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 8005fec:	e02c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6859      	ldr	r1, [r3, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f000 fbef 	bl	80067de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2160      	movs	r1, #96	; 0x60
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc19 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 800600c:	e01c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fbb0 	bl	8006780 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2140      	movs	r1, #64	; 0x40
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fc09 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 800602c:	e00c      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f000 fc00 	bl	800683e <TIM_ITRx_SetConfig>
      break;
 800603e:	e003      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	73fb      	strb	r3, [r7, #15]
      break;
 8006044:	e000      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3c      	ldr	r2, [pc, #240]	; (80061b8 <TIM_Base_SetConfig+0x104>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00f      	beq.n	80060ec <TIM_Base_SetConfig+0x38>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d00b      	beq.n	80060ec <TIM_Base_SetConfig+0x38>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a39      	ldr	r2, [pc, #228]	; (80061bc <TIM_Base_SetConfig+0x108>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d007      	beq.n	80060ec <TIM_Base_SetConfig+0x38>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a38      	ldr	r2, [pc, #224]	; (80061c0 <TIM_Base_SetConfig+0x10c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0x38>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <TIM_Base_SetConfig+0x110>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d108      	bne.n	80060fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2d      	ldr	r2, [pc, #180]	; (80061b8 <TIM_Base_SetConfig+0x104>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01b      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610c:	d017      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2a      	ldr	r2, [pc, #168]	; (80061bc <TIM_Base_SetConfig+0x108>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <TIM_Base_SetConfig+0x10c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <TIM_Base_SetConfig+0x110>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <TIM_Base_SetConfig+0x114>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a26      	ldr	r2, [pc, #152]	; (80061cc <TIM_Base_SetConfig+0x118>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_Base_SetConfig+0x8a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a25      	ldr	r2, [pc, #148]	; (80061d0 <TIM_Base_SetConfig+0x11c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <TIM_Base_SetConfig+0x104>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00f      	beq.n	800619c <TIM_Base_SetConfig+0xe8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <TIM_Base_SetConfig+0x110>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_Base_SetConfig+0xe8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a10      	ldr	r2, [pc, #64]	; (80061c8 <TIM_Base_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <TIM_Base_SetConfig+0xe8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a0f      	ldr	r2, [pc, #60]	; (80061cc <TIM_Base_SetConfig+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_Base_SetConfig+0xe8>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a0e      	ldr	r2, [pc, #56]	; (80061d0 <TIM_Base_SetConfig+0x11c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d103      	bne.n	80061a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	615a      	str	r2, [r3, #20]
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40013400 	.word	0x40013400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800

080061d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 0302 	bic.w	r3, r3, #2
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a2c      	ldr	r2, [pc, #176]	; (80062e0 <TIM_OC1_SetConfig+0x10c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00f      	beq.n	8006254 <TIM_OC1_SetConfig+0x80>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2b      	ldr	r2, [pc, #172]	; (80062e4 <TIM_OC1_SetConfig+0x110>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00b      	beq.n	8006254 <TIM_OC1_SetConfig+0x80>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <TIM_OC1_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d007      	beq.n	8006254 <TIM_OC1_SetConfig+0x80>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a29      	ldr	r2, [pc, #164]	; (80062ec <TIM_OC1_SetConfig+0x118>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC1_SetConfig+0x80>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a28      	ldr	r2, [pc, #160]	; (80062f0 <TIM_OC1_SetConfig+0x11c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d10c      	bne.n	800626e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0308 	bic.w	r3, r3, #8
 800625a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 0304 	bic.w	r3, r3, #4
 800626c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1b      	ldr	r2, [pc, #108]	; (80062e0 <TIM_OC1_SetConfig+0x10c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_OC1_SetConfig+0xc2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <TIM_OC1_SetConfig+0x110>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_OC1_SetConfig+0xc2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <TIM_OC1_SetConfig+0x114>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_OC1_SetConfig+0xc2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a18      	ldr	r2, [pc, #96]	; (80062ec <TIM_OC1_SetConfig+0x118>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC1_SetConfig+0xc2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC1_SetConfig+0x11c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	621a      	str	r2, [r3, #32]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40012c00 	.word	0x40012c00
 80062e4:	40013400 	.word	0x40013400
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40014400 	.word	0x40014400
 80062f0:	40014800 	.word	0x40014800

080062f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b087      	sub	sp, #28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0210 	bic.w	r2, r3, #16
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 0320 	bic.w	r3, r3, #32
 8006342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a28      	ldr	r2, [pc, #160]	; (80063f4 <TIM_OC2_SetConfig+0x100>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_OC2_SetConfig+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <TIM_OC2_SetConfig+0x104>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10d      	bne.n	800637c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <TIM_OC2_SetConfig+0x100>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00f      	beq.n	80063a4 <TIM_OC2_SetConfig+0xb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a1c      	ldr	r2, [pc, #112]	; (80063f8 <TIM_OC2_SetConfig+0x104>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00b      	beq.n	80063a4 <TIM_OC2_SetConfig+0xb0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <TIM_OC2_SetConfig+0x108>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <TIM_OC2_SetConfig+0xb0>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a1a      	ldr	r2, [pc, #104]	; (8006400 <TIM_OC2_SetConfig+0x10c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_OC2_SetConfig+0xb0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a19      	ldr	r2, [pc, #100]	; (8006404 <TIM_OC2_SetConfig+0x110>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d113      	bne.n	80063cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063aa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063b2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	621a      	str	r2, [r3, #32]
}
 80063e6:	bf00      	nop
 80063e8:	371c      	adds	r7, #28
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a27      	ldr	r2, [pc, #156]	; (8006504 <TIM_OC3_SetConfig+0xfc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d003      	beq.n	8006472 <TIM_OC3_SetConfig+0x6a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a26      	ldr	r2, [pc, #152]	; (8006508 <TIM_OC3_SetConfig+0x100>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d10d      	bne.n	800648e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800648c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1c      	ldr	r2, [pc, #112]	; (8006504 <TIM_OC3_SetConfig+0xfc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00f      	beq.n	80064b6 <TIM_OC3_SetConfig+0xae>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <TIM_OC3_SetConfig+0x100>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_OC3_SetConfig+0xae>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1a      	ldr	r2, [pc, #104]	; (800650c <TIM_OC3_SetConfig+0x104>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_OC3_SetConfig+0xae>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <TIM_OC3_SetConfig+0x108>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC3_SetConfig+0xae>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a18      	ldr	r2, [pc, #96]	; (8006514 <TIM_OC3_SetConfig+0x10c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d113      	bne.n	80064de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40013400 	.word	0x40013400
 800650c:	40014000 	.word	0x40014000
 8006510:	40014400 	.word	0x40014400
 8006514:	40014800 	.word	0x40014800

08006518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	031b      	lsls	r3, r3, #12
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <TIM_OC4_SetConfig+0xc0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00f      	beq.n	800659c <TIM_OC4_SetConfig+0x84>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a17      	ldr	r2, [pc, #92]	; (80065dc <TIM_OC4_SetConfig+0xc4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00b      	beq.n	800659c <TIM_OC4_SetConfig+0x84>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <TIM_OC4_SetConfig+0xc8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d007      	beq.n	800659c <TIM_OC4_SetConfig+0x84>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a15      	ldr	r2, [pc, #84]	; (80065e4 <TIM_OC4_SetConfig+0xcc>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC4_SetConfig+0x84>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <TIM_OC4_SetConfig+0xd0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d109      	bne.n	80065b0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	019b      	lsls	r3, r3, #6
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	40013400 	.word	0x40013400
 80065e0:	40014000 	.word	0x40014000
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800

080065ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006630:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <TIM_OC5_SetConfig+0xb4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00f      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <TIM_OC5_SetConfig+0xb8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00b      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <TIM_OC5_SetConfig+0xbc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a14      	ldr	r2, [pc, #80]	; (80066ac <TIM_OC5_SetConfig+0xc0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_OC5_SetConfig+0x7a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <TIM_OC5_SetConfig+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d109      	bne.n	800667a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	621a      	str	r2, [r3, #32]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40014000 	.word	0x40014000
 80066ac:	40014400 	.word	0x40014400
 80066b0:	40014800 	.word	0x40014800

080066b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a18      	ldr	r2, [pc, #96]	; (800676c <TIM_OC6_SetConfig+0xb8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00f      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a17      	ldr	r2, [pc, #92]	; (8006770 <TIM_OC6_SetConfig+0xbc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a16      	ldr	r2, [pc, #88]	; (8006774 <TIM_OC6_SetConfig+0xc0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a15      	ldr	r2, [pc, #84]	; (8006778 <TIM_OC6_SetConfig+0xc4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_OC6_SetConfig+0x7c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a14      	ldr	r2, [pc, #80]	; (800677c <TIM_OC6_SetConfig+0xc8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d109      	bne.n	8006744 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	621a      	str	r2, [r3, #32]
}
 800675e:	bf00      	nop
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40012c00 	.word	0x40012c00
 8006770:	40013400 	.word	0x40013400
 8006774:	40014000 	.word	0x40014000
 8006778:	40014400 	.word	0x40014400
 800677c:	40014800 	.word	0x40014800

08006780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 030a 	bic.w	r3, r3, #10
 80067bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	621a      	str	r2, [r3, #32]
}
 80067d2:	bf00      	nop
 80067d4:	371c      	adds	r7, #28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067de:	b480      	push	{r7}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0210 	bic.w	r2, r3, #16
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1b      	ldr	r3, [r3, #32]
 8006800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	031b      	lsls	r3, r3, #12
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800681a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	621a      	str	r2, [r3, #32]
}
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	f043 0307 	orr.w	r3, r3, #7
 8006860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	609a      	str	r2, [r3, #8]
}
 8006868:	bf00      	nop
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	021a      	lsls	r2, r3, #8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	431a      	orrs	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	2201      	movs	r2, #1
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1a      	ldr	r2, [r3, #32]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	43db      	mvns	r3, r3
 80068d6:	401a      	ands	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1a      	ldr	r2, [r3, #32]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	431a      	orrs	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	621a      	str	r2, [r3, #32]
}
 80068f2:	bf00      	nop
 80068f4:	371c      	adds	r7, #28
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006914:	2302      	movs	r3, #2
 8006916:	e063      	b.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d108      	bne.n	800695e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006952:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006964:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1b      	ldr	r2, [pc, #108]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d018      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d013      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a18      	ldr	r2, [pc, #96]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a12      	ldr	r2, [pc, #72]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d004      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a13      	ldr	r2, [pc, #76]	; (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d10c      	bne.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40013400 	.word	0x40013400
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40014000 	.word	0x40014000

08006a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e040      	b.n	8006ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fa fef8 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	; 0x24
 8006a68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fc00 	bl	8007280 <UART_SetConfig>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e022      	b.n	8006ad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fdc8 	bl	8007628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fe4f 	bl	800776c <UART_CheckIdleState>
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d178      	bne.n	8006be2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_UART_Transmit+0x24>
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e071      	b.n	8006be4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2221      	movs	r2, #33	; 0x21
 8006b0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b0e:	f7fb f84d 	bl	8001bac <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d108      	bne.n	8006b40 <HAL_UART_Transmit+0x68>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e003      	b.n	8006b48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b48:	e030      	b.n	8006bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 feb1 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e03c      	b.n	8006be4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b7c:	b292      	uxth	r2, r2
 8006b7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	3302      	adds	r3, #2
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e008      	b.n	8006b9a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	781a      	ldrb	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	b292      	uxth	r2, r2
 8006b92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1c8      	bne.n	8006b4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fe7a 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e005      	b.n	8006be4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d132      	bne.n	8006c6a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <HAL_UART_Receive_IT+0x24>
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e02b      	b.n	8006c6c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d018      	beq.n	8006c5a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	613b      	str	r3, [r7, #16]
   return(result);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69f9      	ldr	r1, [r7, #28]
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e6      	bne.n	8006c28 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fe93 	bl	800798c <UART_Start_Receive_IT>
 8006c66:	4603      	mov	r3, r0
 8006c68:	e000      	b.n	8006c6c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	; 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b0ba      	sub	sp, #232	; 0xe8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d115      	bne.n	8006cdc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb4:	f003 0320 	and.w	r3, r3, #32
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 82ab 	beq.w	8007228 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
      }
      return;
 8006cda:	e2a5      	b.n	8007228 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8117 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d106      	bne.n	8006d00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cf6:	4b85      	ldr	r3, [pc, #532]	; (8006f0c <HAL_UART_IRQHandler+0x298>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 810a 	beq.w	8006f14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d011      	beq.n	8006d30 <HAL_UART_IRQHandler+0xbc>
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d011      	beq.n	8006d60 <HAL_UART_IRQHandler+0xec>
 8006d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d56:	f043 0204 	orr.w	r2, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d011      	beq.n	8006d90 <HAL_UART_IRQHandler+0x11c>
 8006d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00b      	beq.n	8006d90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d86:	f043 0202 	orr.w	r2, r3, #2
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d017      	beq.n	8006dcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d105      	bne.n	8006db4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2208      	movs	r2, #8
 8006dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc2:	f043 0208 	orr.w	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <HAL_UART_IRQHandler+0x18a>
 8006dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00c      	beq.n	8006dfe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8211 	beq.w	800722c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00d      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d005      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d04f      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fe4c 	bl	8007af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d141      	bne.n	8006eee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1d9      	bne.n	8006e6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d013      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <HAL_UART_IRQHandler+0x29c>)
 8006ec4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fc fae0 	bl	8003490 <HAL_DMA_Abort_IT>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d017      	beq.n	8006f06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee4:	e00f      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9b4 	bl	8007254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	e00b      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f9b0 	bl	8007254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef4:	e007      	b.n	8006f06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9ac 	bl	8007254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006f04:	e192      	b.n	800722c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f06:	bf00      	nop
    return;
 8006f08:	e190      	b.n	800722c <HAL_UART_IRQHandler+0x5b8>
 8006f0a:	bf00      	nop
 8006f0c:	04000120 	.word	0x04000120
 8006f10:	08007bbd 	.word	0x08007bbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 814b 	bne.w	80071b4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8144 	beq.w	80071b4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 813d 	beq.w	80071b4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	f040 80b5 	bne.w	80070bc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8164 	beq.w	8007230 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f080 815c 	bcs.w	8007230 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	f000 8086 	beq.w	800709a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1da      	bne.n	8006f8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fea:	f023 0301 	bic.w	r3, r3, #1
 8006fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ffc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007000:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007004:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800700e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e1      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3308      	adds	r3, #8
 800701a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007038:	66fa      	str	r2, [r7, #108]	; 0x6c
 800703a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800703e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e3      	bne.n	8007014 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706a:	f023 0310 	bic.w	r3, r3, #16
 800706e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800707c:	65bb      	str	r3, [r7, #88]	; 0x58
 800707e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007082:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800708a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e4      	bne.n	800705a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007094:	4618      	mov	r0, r3
 8007096:	f7fc f9c2 	bl	800341e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2202      	movs	r2, #2
 800709e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f8d7 	bl	8007268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070ba:	e0b9      	b.n	8007230 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80ab 	beq.w	8007234 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80070de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80a6 	beq.w	8007234 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e4      	bne.n	80070e8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	623b      	str	r3, [r7, #32]
   return(result);
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007142:	633a      	str	r2, [r7, #48]	; 0x30
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	e841 2300 	strex	r3, r2, [r1]
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1e3      	bne.n	800711e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	60fb      	str	r3, [r7, #12]
   return(result);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0310 	bic.w	r3, r3, #16
 800717e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	69b9      	ldr	r1, [r7, #24]
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	617b      	str	r3, [r7, #20]
   return(result);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e4      	bne.n	800716a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f85b 	bl	8007268 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071b2:	e03f      	b.n	8007234 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00e      	beq.n	80071de <HAL_UART_IRQHandler+0x56a>
 80071c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fed8 	bl	8007f8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071dc:	e02d      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d01c      	beq.n	8007238 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
    }
    return;
 8007206:	e017      	b.n	8007238 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d012      	beq.n	800723a <HAL_UART_IRQHandler+0x5c6>
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00c      	beq.n	800723a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fce1 	bl	8007be8 <UART_EndTransmit_IT>
    return;
 8007226:	e008      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007228:	bf00      	nop
 800722a:	e006      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
    return;
 800722c:	bf00      	nop
 800722e:	e004      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007230:	bf00      	nop
 8007232:	e002      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007234:	bf00      	nop
 8007236:	e000      	b.n	800723a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007238:	bf00      	nop
  }

}
 800723a:	37e8      	adds	r7, #232	; 0xe8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80072ae:	f023 030c 	bic.w	r3, r3, #12
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4aa7      	ldr	r2, [pc, #668]	; (8007598 <UART_SetConfig+0x318>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d120      	bne.n	8007342 <UART_SetConfig+0xc2>
 8007300:	4ba6      	ldr	r3, [pc, #664]	; (800759c <UART_SetConfig+0x31c>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d817      	bhi.n	800733c <UART_SetConfig+0xbc>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <UART_SetConfig+0x94>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007325 	.word	0x08007325
 8007318:	08007331 	.word	0x08007331
 800731c:	08007337 	.word	0x08007337
 8007320:	0800732b 	.word	0x0800732b
 8007324:	2301      	movs	r3, #1
 8007326:	77fb      	strb	r3, [r7, #31]
 8007328:	e0b5      	b.n	8007496 <UART_SetConfig+0x216>
 800732a:	2302      	movs	r3, #2
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e0b2      	b.n	8007496 <UART_SetConfig+0x216>
 8007330:	2304      	movs	r3, #4
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e0af      	b.n	8007496 <UART_SetConfig+0x216>
 8007336:	2308      	movs	r3, #8
 8007338:	77fb      	strb	r3, [r7, #31]
 800733a:	e0ac      	b.n	8007496 <UART_SetConfig+0x216>
 800733c:	2310      	movs	r3, #16
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e0a9      	b.n	8007496 <UART_SetConfig+0x216>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a96      	ldr	r2, [pc, #600]	; (80075a0 <UART_SetConfig+0x320>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d124      	bne.n	8007396 <UART_SetConfig+0x116>
 800734c:	4b93      	ldr	r3, [pc, #588]	; (800759c <UART_SetConfig+0x31c>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007358:	d011      	beq.n	800737e <UART_SetConfig+0xfe>
 800735a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800735e:	d817      	bhi.n	8007390 <UART_SetConfig+0x110>
 8007360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007364:	d011      	beq.n	800738a <UART_SetConfig+0x10a>
 8007366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800736a:	d811      	bhi.n	8007390 <UART_SetConfig+0x110>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <UART_SetConfig+0xf8>
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d006      	beq.n	8007384 <UART_SetConfig+0x104>
 8007376:	e00b      	b.n	8007390 <UART_SetConfig+0x110>
 8007378:	2300      	movs	r3, #0
 800737a:	77fb      	strb	r3, [r7, #31]
 800737c:	e08b      	b.n	8007496 <UART_SetConfig+0x216>
 800737e:	2302      	movs	r3, #2
 8007380:	77fb      	strb	r3, [r7, #31]
 8007382:	e088      	b.n	8007496 <UART_SetConfig+0x216>
 8007384:	2304      	movs	r3, #4
 8007386:	77fb      	strb	r3, [r7, #31]
 8007388:	e085      	b.n	8007496 <UART_SetConfig+0x216>
 800738a:	2308      	movs	r3, #8
 800738c:	77fb      	strb	r3, [r7, #31]
 800738e:	e082      	b.n	8007496 <UART_SetConfig+0x216>
 8007390:	2310      	movs	r3, #16
 8007392:	77fb      	strb	r3, [r7, #31]
 8007394:	e07f      	b.n	8007496 <UART_SetConfig+0x216>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a82      	ldr	r2, [pc, #520]	; (80075a4 <UART_SetConfig+0x324>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d124      	bne.n	80073ea <UART_SetConfig+0x16a>
 80073a0:	4b7e      	ldr	r3, [pc, #504]	; (800759c <UART_SetConfig+0x31c>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80073a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073ac:	d011      	beq.n	80073d2 <UART_SetConfig+0x152>
 80073ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80073b2:	d817      	bhi.n	80073e4 <UART_SetConfig+0x164>
 80073b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073b8:	d011      	beq.n	80073de <UART_SetConfig+0x15e>
 80073ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073be:	d811      	bhi.n	80073e4 <UART_SetConfig+0x164>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <UART_SetConfig+0x14c>
 80073c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073c8:	d006      	beq.n	80073d8 <UART_SetConfig+0x158>
 80073ca:	e00b      	b.n	80073e4 <UART_SetConfig+0x164>
 80073cc:	2300      	movs	r3, #0
 80073ce:	77fb      	strb	r3, [r7, #31]
 80073d0:	e061      	b.n	8007496 <UART_SetConfig+0x216>
 80073d2:	2302      	movs	r3, #2
 80073d4:	77fb      	strb	r3, [r7, #31]
 80073d6:	e05e      	b.n	8007496 <UART_SetConfig+0x216>
 80073d8:	2304      	movs	r3, #4
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e05b      	b.n	8007496 <UART_SetConfig+0x216>
 80073de:	2308      	movs	r3, #8
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e058      	b.n	8007496 <UART_SetConfig+0x216>
 80073e4:	2310      	movs	r3, #16
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e055      	b.n	8007496 <UART_SetConfig+0x216>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a6e      	ldr	r2, [pc, #440]	; (80075a8 <UART_SetConfig+0x328>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d124      	bne.n	800743e <UART_SetConfig+0x1be>
 80073f4:	4b69      	ldr	r3, [pc, #420]	; (800759c <UART_SetConfig+0x31c>)
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80073fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007400:	d011      	beq.n	8007426 <UART_SetConfig+0x1a6>
 8007402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007406:	d817      	bhi.n	8007438 <UART_SetConfig+0x1b8>
 8007408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800740c:	d011      	beq.n	8007432 <UART_SetConfig+0x1b2>
 800740e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007412:	d811      	bhi.n	8007438 <UART_SetConfig+0x1b8>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <UART_SetConfig+0x1a0>
 8007418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741c:	d006      	beq.n	800742c <UART_SetConfig+0x1ac>
 800741e:	e00b      	b.n	8007438 <UART_SetConfig+0x1b8>
 8007420:	2300      	movs	r3, #0
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e037      	b.n	8007496 <UART_SetConfig+0x216>
 8007426:	2302      	movs	r3, #2
 8007428:	77fb      	strb	r3, [r7, #31]
 800742a:	e034      	b.n	8007496 <UART_SetConfig+0x216>
 800742c:	2304      	movs	r3, #4
 800742e:	77fb      	strb	r3, [r7, #31]
 8007430:	e031      	b.n	8007496 <UART_SetConfig+0x216>
 8007432:	2308      	movs	r3, #8
 8007434:	77fb      	strb	r3, [r7, #31]
 8007436:	e02e      	b.n	8007496 <UART_SetConfig+0x216>
 8007438:	2310      	movs	r3, #16
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	e02b      	b.n	8007496 <UART_SetConfig+0x216>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a5a      	ldr	r2, [pc, #360]	; (80075ac <UART_SetConfig+0x32c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d124      	bne.n	8007492 <UART_SetConfig+0x212>
 8007448:	4b54      	ldr	r3, [pc, #336]	; (800759c <UART_SetConfig+0x31c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007450:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007454:	d011      	beq.n	800747a <UART_SetConfig+0x1fa>
 8007456:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800745a:	d817      	bhi.n	800748c <UART_SetConfig+0x20c>
 800745c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007460:	d011      	beq.n	8007486 <UART_SetConfig+0x206>
 8007462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007466:	d811      	bhi.n	800748c <UART_SetConfig+0x20c>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <UART_SetConfig+0x1f4>
 800746c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007470:	d006      	beq.n	8007480 <UART_SetConfig+0x200>
 8007472:	e00b      	b.n	800748c <UART_SetConfig+0x20c>
 8007474:	2300      	movs	r3, #0
 8007476:	77fb      	strb	r3, [r7, #31]
 8007478:	e00d      	b.n	8007496 <UART_SetConfig+0x216>
 800747a:	2302      	movs	r3, #2
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e00a      	b.n	8007496 <UART_SetConfig+0x216>
 8007480:	2304      	movs	r3, #4
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e007      	b.n	8007496 <UART_SetConfig+0x216>
 8007486:	2308      	movs	r3, #8
 8007488:	77fb      	strb	r3, [r7, #31]
 800748a:	e004      	b.n	8007496 <UART_SetConfig+0x216>
 800748c:	2310      	movs	r3, #16
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e001      	b.n	8007496 <UART_SetConfig+0x216>
 8007492:	2310      	movs	r3, #16
 8007494:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800749e:	d15b      	bne.n	8007558 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80074a0:	7ffb      	ldrb	r3, [r7, #31]
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d827      	bhi.n	80074f6 <UART_SetConfig+0x276>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <UART_SetConfig+0x22c>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074d1 	.word	0x080074d1
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	080074f7 	.word	0x080074f7
 80074bc:	080074e7 	.word	0x080074e7
 80074c0:	080074f7 	.word	0x080074f7
 80074c4:	080074f7 	.word	0x080074f7
 80074c8:	080074f7 	.word	0x080074f7
 80074cc:	080074ef 	.word	0x080074ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074d0:	f7fd fe08 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 80074d4:	61b8      	str	r0, [r7, #24]
        break;
 80074d6:	e013      	b.n	8007500 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074d8:	f7fd fe26 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 80074dc:	61b8      	str	r0, [r7, #24]
        break;
 80074de:	e00f      	b.n	8007500 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074e0:	4b33      	ldr	r3, [pc, #204]	; (80075b0 <UART_SetConfig+0x330>)
 80074e2:	61bb      	str	r3, [r7, #24]
        break;
 80074e4:	e00c      	b.n	8007500 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074e6:	f7fd fd87 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80074ea:	61b8      	str	r0, [r7, #24]
        break;
 80074ec:	e008      	b.n	8007500 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f2:	61bb      	str	r3, [r7, #24]
        break;
 80074f4:	e004      	b.n	8007500 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	77bb      	strb	r3, [r7, #30]
        break;
 80074fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8082 	beq.w	800760c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	005a      	lsls	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	085b      	lsrs	r3, r3, #1
 8007512:	441a      	add	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b0f      	cmp	r3, #15
 8007522:	d916      	bls.n	8007552 <UART_SetConfig+0x2d2>
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752a:	d212      	bcs.n	8007552 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	b29b      	uxth	r3, r3
 8007530:	f023 030f 	bic.w	r3, r3, #15
 8007534:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	b29b      	uxth	r3, r3
 800753c:	f003 0307 	and.w	r3, r3, #7
 8007540:	b29a      	uxth	r2, r3
 8007542:	89fb      	ldrh	r3, [r7, #14]
 8007544:	4313      	orrs	r3, r2
 8007546:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	89fa      	ldrh	r2, [r7, #14]
 800754e:	60da      	str	r2, [r3, #12]
 8007550:	e05c      	b.n	800760c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	77bb      	strb	r3, [r7, #30]
 8007556:	e059      	b.n	800760c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007558:	7ffb      	ldrb	r3, [r7, #31]
 800755a:	2b08      	cmp	r3, #8
 800755c:	d835      	bhi.n	80075ca <UART_SetConfig+0x34a>
 800755e:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <UART_SetConfig+0x2e4>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	080075b5 	.word	0x080075b5
 8007570:	080075cb 	.word	0x080075cb
 8007574:	080075bb 	.word	0x080075bb
 8007578:	080075cb 	.word	0x080075cb
 800757c:	080075cb 	.word	0x080075cb
 8007580:	080075cb 	.word	0x080075cb
 8007584:	080075c3 	.word	0x080075c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fd fdac 	bl	80050e4 <HAL_RCC_GetPCLK1Freq>
 800758c:	61b8      	str	r0, [r7, #24]
        break;
 800758e:	e021      	b.n	80075d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fd fdca 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8007594:	61b8      	str	r0, [r7, #24]
        break;
 8007596:	e01d      	b.n	80075d4 <UART_SetConfig+0x354>
 8007598:	40013800 	.word	0x40013800
 800759c:	40021000 	.word	0x40021000
 80075a0:	40004400 	.word	0x40004400
 80075a4:	40004800 	.word	0x40004800
 80075a8:	40004c00 	.word	0x40004c00
 80075ac:	40005000 	.word	0x40005000
 80075b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <UART_SetConfig+0x3a4>)
 80075b6:	61bb      	str	r3, [r7, #24]
        break;
 80075b8:	e00c      	b.n	80075d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ba:	f7fd fd1d 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80075be:	61b8      	str	r0, [r7, #24]
        break;
 80075c0:	e008      	b.n	80075d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	61bb      	str	r3, [r7, #24]
        break;
 80075c8:	e004      	b.n	80075d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	77bb      	strb	r3, [r7, #30]
        break;
 80075d2:	bf00      	nop
    }

    if (pclk != 0U)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d018      	beq.n	800760c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	085a      	lsrs	r2, r3, #1
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	441a      	add	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b0f      	cmp	r3, #15
 80075f2:	d909      	bls.n	8007608 <UART_SetConfig+0x388>
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fa:	d205      	bcs.n	8007608 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e001      	b.n	800760c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007618:	7fbb      	ldrb	r3, [r7, #30]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	007a1200 	.word	0x007a1200

08007628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01a      	beq.n	800773e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007726:	d10a      	bne.n	800773e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b098      	sub	sp, #96	; 0x60
 8007770:	af02      	add	r7, sp, #8
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800777c:	f7fa fa16 	bl	8001bac <HAL_GetTick>
 8007780:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b08      	cmp	r3, #8
 800778e:	d12e      	bne.n	80077ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007798:	2200      	movs	r2, #0
 800779a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f88c 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d021      	beq.n	80077ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077be:	653b      	str	r3, [r7, #80]	; 0x50
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	647b      	str	r3, [r7, #68]	; 0x44
 80077ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e6      	bne.n	80077aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e062      	b.n	80078b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d149      	bne.n	8007890 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007804:	2200      	movs	r2, #0
 8007806:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f856 	bl	80078bc <UART_WaitOnFlagUntilTimeout>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d03c      	beq.n	8007890 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	e853 3f00 	ldrex	r3, [r3]
 8007822:	623b      	str	r3, [r7, #32]
   return(result);
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007834:	633b      	str	r3, [r7, #48]	; 0x30
 8007836:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800783a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800783c:	e841 2300 	strex	r3, r2, [r1]
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1e6      	bne.n	8007816 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3308      	adds	r3, #8
 800784e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	60fb      	str	r3, [r7, #12]
   return(result);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0301 	bic.w	r3, r3, #1
 800785e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3308      	adds	r3, #8
 8007866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007868:	61fa      	str	r2, [r7, #28]
 800786a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	617b      	str	r3, [r7, #20]
   return(result);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e011      	b.n	80078b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3758      	adds	r7, #88	; 0x58
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078cc:	e049      	b.n	8007962 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d4:	d045      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d6:	f7fa f969 	bl	8001bac <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <UART_WaitOnFlagUntilTimeout+0x30>
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e048      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d031      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	f003 0308 	and.w	r3, r3, #8
 8007908:	2b08      	cmp	r3, #8
 800790a:	d110      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f8ed 	bl	8007af4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2208      	movs	r2, #8
 800791e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e029      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800793c:	d111      	bne.n	8007962 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 f8d3 	bl	8007af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e00f      	b.n	8007982 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d0a6      	beq.n	80078ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800798c:	b480      	push	{r7}
 800798e:	b097      	sub	sp, #92	; 0x5c
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079be:	d10e      	bne.n	80079de <UART_Start_Receive_IT+0x52>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <UART_Start_Receive_IT+0x48>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d2:	e01a      	b.n	8007a0a <UART_Start_Receive_IT+0x7e>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	22ff      	movs	r2, #255	; 0xff
 80079d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079dc:	e015      	b.n	8007a0a <UART_Start_Receive_IT+0x7e>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10d      	bne.n	8007a02 <UART_Start_Receive_IT+0x76>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <UART_Start_Receive_IT+0x6c>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	22ff      	movs	r2, #255	; 0xff
 80079f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f6:	e008      	b.n	8007a0a <UART_Start_Receive_IT+0x7e>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	227f      	movs	r2, #127	; 0x7f
 80079fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007a00:	e003      	b.n	8007a0a <UART_Start_Receive_IT+0x7e>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2222      	movs	r2, #34	; 0x22
 8007a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	657b      	str	r3, [r7, #84]	; 0x54
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e5      	bne.n	8007a1a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d107      	bne.n	8007a68 <UART_Start_Receive_IT+0xdc>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4a22      	ldr	r2, [pc, #136]	; (8007aec <UART_Start_Receive_IT+0x160>)
 8007a64:	669a      	str	r2, [r3, #104]	; 0x68
 8007a66:	e002      	b.n	8007a6e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a21      	ldr	r2, [pc, #132]	; (8007af0 <UART_Start_Receive_IT+0x164>)
 8007a6c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d019      	beq.n	8007aaa <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a94:	637b      	str	r3, [r7, #52]	; 0x34
 8007a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_Start_Receive_IT+0xea>
 8007aa8:	e018      	b.n	8007adc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f043 0320 	orr.w	r3, r3, #32
 8007abe:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac8:	623b      	str	r3, [r7, #32]
 8007aca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	6a3a      	ldr	r2, [r7, #32]
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e6      	bne.n	8007aaa <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	375c      	adds	r7, #92	; 0x5c
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	08007de5 	.word	0x08007de5
 8007af0:	08007c3d 	.word	0x08007c3d

08007af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b095      	sub	sp, #84	; 0x54
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e6      	bne.n	8007afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e5      	bne.n	8007b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d118      	bne.n	8007b9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f023 0310 	bic.w	r3, r3, #16
 8007b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b88:	61bb      	str	r3, [r7, #24]
 8007b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	613b      	str	r3, [r7, #16]
   return(result);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e6      	bne.n	8007b6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007bb0:	bf00      	nop
 8007bb2:	3754      	adds	r7, #84	; 0x54
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fb3a 	bl	8007254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e853 3f00 	ldrex	r3, [r3]
 8007bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	61bb      	str	r3, [r7, #24]
 8007c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6979      	ldr	r1, [r7, #20]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e6      	bne.n	8007bf0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7ff fb06 	bl	8007240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c34:	bf00      	nop
 8007c36:	3720      	adds	r7, #32
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b09c      	sub	sp, #112	; 0x70
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c54:	2b22      	cmp	r3, #34	; 0x22
 8007c56:	f040 80b9 	bne.w	8007dcc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007c68:	b2d9      	uxtb	r1, r3
 8007c6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	400a      	ands	r2, r1
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 809c 	bne.w	8007ddc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cc4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e6      	bne.n	8007ca4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	3308      	adds	r3, #8
 8007cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	667b      	str	r3, [r7, #100]	; 0x64
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cf6:	647a      	str	r2, [r7, #68]	; 0x44
 8007cf8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d018      	beq.n	8007d5e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d40:	663b      	str	r3, [r7, #96]	; 0x60
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e6      	bne.n	8007d2c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d12e      	bne.n	8007dc4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	69b9      	ldr	r1, [r7, #24]
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	617b      	str	r3, [r7, #20]
   return(result);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d103      	bne.n	8007db4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2210      	movs	r2, #16
 8007db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff fa53 	bl	8007268 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dc2:	e00b      	b.n	8007ddc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7f9 fb7b 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8007dca:	e007      	b.n	8007ddc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0208 	orr.w	r2, r2, #8
 8007dda:	619a      	str	r2, [r3, #24]
}
 8007ddc:	bf00      	nop
 8007dde:	3770      	adds	r7, #112	; 0x70
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b09c      	sub	sp, #112	; 0x70
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007df2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dfc:	2b22      	cmp	r3, #34	; 0x22
 8007dfe:	f040 80b9 	bne.w	8007f74 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007e08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e26:	1c9a      	adds	r2, r3, #2
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f040 809c 	bne.w	8007f84 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e60:	667b      	str	r3, [r7, #100]	; 0x64
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3308      	adds	r3, #8
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	663b      	str	r3, [r7, #96]	; 0x60
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3308      	adds	r3, #8
 8007e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e9e:	643a      	str	r2, [r7, #64]	; 0x40
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e5      	bne.n	8007e7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d018      	beq.n	8007f06 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e6      	bne.n	8007ed4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d12e      	bne.n	8007f6c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f023 0310 	bic.w	r3, r3, #16
 8007f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f32:	61bb      	str	r3, [r7, #24]
 8007f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6979      	ldr	r1, [r7, #20]
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e6      	bne.n	8007f14 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d103      	bne.n	8007f5c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2210      	movs	r2, #16
 8007f5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff f97f 	bl	8007268 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f6a:	e00b      	b.n	8007f84 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7f9 faa7 	bl	80014c0 <HAL_UART_RxCpltCallback>
}
 8007f72:	e007      	b.n	8007f84 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0208 	orr.w	r2, r2, #8
 8007f82:	619a      	str	r2, [r3, #24]
}
 8007f84:	bf00      	nop
 8007f86:	3770      	adds	r7, #112	; 0x70
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fa8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007fac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	f107 0014 	add.w	r0, r7, #20
 8007fe4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	b004      	add	sp, #16
 8008016:	4770      	bx	lr

08008018 <__errno>:
 8008018:	4b01      	ldr	r3, [pc, #4]	; (8008020 <__errno+0x8>)
 800801a:	6818      	ldr	r0, [r3, #0]
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	20000034 	.word	0x20000034

08008024 <__libc_init_array>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	4d0d      	ldr	r5, [pc, #52]	; (800805c <__libc_init_array+0x38>)
 8008028:	4c0d      	ldr	r4, [pc, #52]	; (8008060 <__libc_init_array+0x3c>)
 800802a:	1b64      	subs	r4, r4, r5
 800802c:	10a4      	asrs	r4, r4, #2
 800802e:	2600      	movs	r6, #0
 8008030:	42a6      	cmp	r6, r4
 8008032:	d109      	bne.n	8008048 <__libc_init_array+0x24>
 8008034:	4d0b      	ldr	r5, [pc, #44]	; (8008064 <__libc_init_array+0x40>)
 8008036:	4c0c      	ldr	r4, [pc, #48]	; (8008068 <__libc_init_array+0x44>)
 8008038:	f000 fc8e 	bl	8008958 <_init>
 800803c:	1b64      	subs	r4, r4, r5
 800803e:	10a4      	asrs	r4, r4, #2
 8008040:	2600      	movs	r6, #0
 8008042:	42a6      	cmp	r6, r4
 8008044:	d105      	bne.n	8008052 <__libc_init_array+0x2e>
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	f855 3b04 	ldr.w	r3, [r5], #4
 800804c:	4798      	blx	r3
 800804e:	3601      	adds	r6, #1
 8008050:	e7ee      	b.n	8008030 <__libc_init_array+0xc>
 8008052:	f855 3b04 	ldr.w	r3, [r5], #4
 8008056:	4798      	blx	r3
 8008058:	3601      	adds	r6, #1
 800805a:	e7f2      	b.n	8008042 <__libc_init_array+0x1e>
 800805c:	08008a38 	.word	0x08008a38
 8008060:	08008a38 	.word	0x08008a38
 8008064:	08008a38 	.word	0x08008a38
 8008068:	08008a3c 	.word	0x08008a3c

0800806c <memset>:
 800806c:	4402      	add	r2, r0
 800806e:	4603      	mov	r3, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <siprintf>:
 800807c:	b40e      	push	{r1, r2, r3}
 800807e:	b500      	push	{lr}
 8008080:	b09c      	sub	sp, #112	; 0x70
 8008082:	ab1d      	add	r3, sp, #116	; 0x74
 8008084:	9002      	str	r0, [sp, #8]
 8008086:	9006      	str	r0, [sp, #24]
 8008088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800808c:	4809      	ldr	r0, [pc, #36]	; (80080b4 <siprintf+0x38>)
 800808e:	9107      	str	r1, [sp, #28]
 8008090:	9104      	str	r1, [sp, #16]
 8008092:	4909      	ldr	r1, [pc, #36]	; (80080b8 <siprintf+0x3c>)
 8008094:	f853 2b04 	ldr.w	r2, [r3], #4
 8008098:	9105      	str	r1, [sp, #20]
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	9301      	str	r3, [sp, #4]
 800809e:	a902      	add	r1, sp, #8
 80080a0:	f000 f868 	bl	8008174 <_svfiprintf_r>
 80080a4:	9b02      	ldr	r3, [sp, #8]
 80080a6:	2200      	movs	r2, #0
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	b01c      	add	sp, #112	; 0x70
 80080ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b0:	b003      	add	sp, #12
 80080b2:	4770      	bx	lr
 80080b4:	20000034 	.word	0x20000034
 80080b8:	ffff0208 	.word	0xffff0208

080080bc <__ssputs_r>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	688e      	ldr	r6, [r1, #8]
 80080c2:	429e      	cmp	r6, r3
 80080c4:	4682      	mov	sl, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4690      	mov	r8, r2
 80080ca:	461f      	mov	r7, r3
 80080cc:	d838      	bhi.n	8008140 <__ssputs_r+0x84>
 80080ce:	898a      	ldrh	r2, [r1, #12]
 80080d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080d4:	d032      	beq.n	800813c <__ssputs_r+0x80>
 80080d6:	6825      	ldr	r5, [r4, #0]
 80080d8:	6909      	ldr	r1, [r1, #16]
 80080da:	eba5 0901 	sub.w	r9, r5, r1
 80080de:	6965      	ldr	r5, [r4, #20]
 80080e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080e8:	3301      	adds	r3, #1
 80080ea:	444b      	add	r3, r9
 80080ec:	106d      	asrs	r5, r5, #1
 80080ee:	429d      	cmp	r5, r3
 80080f0:	bf38      	it	cc
 80080f2:	461d      	movcc	r5, r3
 80080f4:	0553      	lsls	r3, r2, #21
 80080f6:	d531      	bpl.n	800815c <__ssputs_r+0xa0>
 80080f8:	4629      	mov	r1, r5
 80080fa:	f000 fb63 	bl	80087c4 <_malloc_r>
 80080fe:	4606      	mov	r6, r0
 8008100:	b950      	cbnz	r0, 8008118 <__ssputs_r+0x5c>
 8008102:	230c      	movs	r3, #12
 8008104:	f8ca 3000 	str.w	r3, [sl]
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008118:	6921      	ldr	r1, [r4, #16]
 800811a:	464a      	mov	r2, r9
 800811c:	f000 fabe 	bl	800869c <memcpy>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	6126      	str	r6, [r4, #16]
 800812e:	6165      	str	r5, [r4, #20]
 8008130:	444e      	add	r6, r9
 8008132:	eba5 0509 	sub.w	r5, r5, r9
 8008136:	6026      	str	r6, [r4, #0]
 8008138:	60a5      	str	r5, [r4, #8]
 800813a:	463e      	mov	r6, r7
 800813c:	42be      	cmp	r6, r7
 800813e:	d900      	bls.n	8008142 <__ssputs_r+0x86>
 8008140:	463e      	mov	r6, r7
 8008142:	6820      	ldr	r0, [r4, #0]
 8008144:	4632      	mov	r2, r6
 8008146:	4641      	mov	r1, r8
 8008148:	f000 fab6 	bl	80086b8 <memmove>
 800814c:	68a3      	ldr	r3, [r4, #8]
 800814e:	1b9b      	subs	r3, r3, r6
 8008150:	60a3      	str	r3, [r4, #8]
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	4433      	add	r3, r6
 8008156:	6023      	str	r3, [r4, #0]
 8008158:	2000      	movs	r0, #0
 800815a:	e7db      	b.n	8008114 <__ssputs_r+0x58>
 800815c:	462a      	mov	r2, r5
 800815e:	f000 fba5 	bl	80088ac <_realloc_r>
 8008162:	4606      	mov	r6, r0
 8008164:	2800      	cmp	r0, #0
 8008166:	d1e1      	bne.n	800812c <__ssputs_r+0x70>
 8008168:	6921      	ldr	r1, [r4, #16]
 800816a:	4650      	mov	r0, sl
 800816c:	f000 fabe 	bl	80086ec <_free_r>
 8008170:	e7c7      	b.n	8008102 <__ssputs_r+0x46>
	...

08008174 <_svfiprintf_r>:
 8008174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4698      	mov	r8, r3
 800817a:	898b      	ldrh	r3, [r1, #12]
 800817c:	061b      	lsls	r3, r3, #24
 800817e:	b09d      	sub	sp, #116	; 0x74
 8008180:	4607      	mov	r7, r0
 8008182:	460d      	mov	r5, r1
 8008184:	4614      	mov	r4, r2
 8008186:	d50e      	bpl.n	80081a6 <_svfiprintf_r+0x32>
 8008188:	690b      	ldr	r3, [r1, #16]
 800818a:	b963      	cbnz	r3, 80081a6 <_svfiprintf_r+0x32>
 800818c:	2140      	movs	r1, #64	; 0x40
 800818e:	f000 fb19 	bl	80087c4 <_malloc_r>
 8008192:	6028      	str	r0, [r5, #0]
 8008194:	6128      	str	r0, [r5, #16]
 8008196:	b920      	cbnz	r0, 80081a2 <_svfiprintf_r+0x2e>
 8008198:	230c      	movs	r3, #12
 800819a:	603b      	str	r3, [r7, #0]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a0:	e0d1      	b.n	8008346 <_svfiprintf_r+0x1d2>
 80081a2:	2340      	movs	r3, #64	; 0x40
 80081a4:	616b      	str	r3, [r5, #20]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9309      	str	r3, [sp, #36]	; 0x24
 80081aa:	2320      	movs	r3, #32
 80081ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081b4:	2330      	movs	r3, #48	; 0x30
 80081b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008360 <_svfiprintf_r+0x1ec>
 80081ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081be:	f04f 0901 	mov.w	r9, #1
 80081c2:	4623      	mov	r3, r4
 80081c4:	469a      	mov	sl, r3
 80081c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ca:	b10a      	cbz	r2, 80081d0 <_svfiprintf_r+0x5c>
 80081cc:	2a25      	cmp	r2, #37	; 0x25
 80081ce:	d1f9      	bne.n	80081c4 <_svfiprintf_r+0x50>
 80081d0:	ebba 0b04 	subs.w	fp, sl, r4
 80081d4:	d00b      	beq.n	80081ee <_svfiprintf_r+0x7a>
 80081d6:	465b      	mov	r3, fp
 80081d8:	4622      	mov	r2, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff ff6d 	bl	80080bc <__ssputs_r>
 80081e2:	3001      	adds	r0, #1
 80081e4:	f000 80aa 	beq.w	800833c <_svfiprintf_r+0x1c8>
 80081e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ea:	445a      	add	r2, fp
 80081ec:	9209      	str	r2, [sp, #36]	; 0x24
 80081ee:	f89a 3000 	ldrb.w	r3, [sl]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80a2 	beq.w	800833c <_svfiprintf_r+0x1c8>
 80081f8:	2300      	movs	r3, #0
 80081fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008202:	f10a 0a01 	add.w	sl, sl, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800820e:	931a      	str	r3, [sp, #104]	; 0x68
 8008210:	4654      	mov	r4, sl
 8008212:	2205      	movs	r2, #5
 8008214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008218:	4851      	ldr	r0, [pc, #324]	; (8008360 <_svfiprintf_r+0x1ec>)
 800821a:	f7f7 ffe1 	bl	80001e0 <memchr>
 800821e:	9a04      	ldr	r2, [sp, #16]
 8008220:	b9d8      	cbnz	r0, 800825a <_svfiprintf_r+0xe6>
 8008222:	06d0      	lsls	r0, r2, #27
 8008224:	bf44      	itt	mi
 8008226:	2320      	movmi	r3, #32
 8008228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800822c:	0711      	lsls	r1, r2, #28
 800822e:	bf44      	itt	mi
 8008230:	232b      	movmi	r3, #43	; 0x2b
 8008232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008236:	f89a 3000 	ldrb.w	r3, [sl]
 800823a:	2b2a      	cmp	r3, #42	; 0x2a
 800823c:	d015      	beq.n	800826a <_svfiprintf_r+0xf6>
 800823e:	9a07      	ldr	r2, [sp, #28]
 8008240:	4654      	mov	r4, sl
 8008242:	2000      	movs	r0, #0
 8008244:	f04f 0c0a 	mov.w	ip, #10
 8008248:	4621      	mov	r1, r4
 800824a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800824e:	3b30      	subs	r3, #48	; 0x30
 8008250:	2b09      	cmp	r3, #9
 8008252:	d94e      	bls.n	80082f2 <_svfiprintf_r+0x17e>
 8008254:	b1b0      	cbz	r0, 8008284 <_svfiprintf_r+0x110>
 8008256:	9207      	str	r2, [sp, #28]
 8008258:	e014      	b.n	8008284 <_svfiprintf_r+0x110>
 800825a:	eba0 0308 	sub.w	r3, r0, r8
 800825e:	fa09 f303 	lsl.w	r3, r9, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	46a2      	mov	sl, r4
 8008268:	e7d2      	b.n	8008210 <_svfiprintf_r+0x9c>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	1d19      	adds	r1, r3, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	9103      	str	r1, [sp, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfbb      	ittet	lt
 8008276:	425b      	neglt	r3, r3
 8008278:	f042 0202 	orrlt.w	r2, r2, #2
 800827c:	9307      	strge	r3, [sp, #28]
 800827e:	9307      	strlt	r3, [sp, #28]
 8008280:	bfb8      	it	lt
 8008282:	9204      	strlt	r2, [sp, #16]
 8008284:	7823      	ldrb	r3, [r4, #0]
 8008286:	2b2e      	cmp	r3, #46	; 0x2e
 8008288:	d10c      	bne.n	80082a4 <_svfiprintf_r+0x130>
 800828a:	7863      	ldrb	r3, [r4, #1]
 800828c:	2b2a      	cmp	r3, #42	; 0x2a
 800828e:	d135      	bne.n	80082fc <_svfiprintf_r+0x188>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	9203      	str	r2, [sp, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfb8      	it	lt
 800829c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082a0:	3402      	adds	r4, #2
 80082a2:	9305      	str	r3, [sp, #20]
 80082a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008370 <_svfiprintf_r+0x1fc>
 80082a8:	7821      	ldrb	r1, [r4, #0]
 80082aa:	2203      	movs	r2, #3
 80082ac:	4650      	mov	r0, sl
 80082ae:	f7f7 ff97 	bl	80001e0 <memchr>
 80082b2:	b140      	cbz	r0, 80082c6 <_svfiprintf_r+0x152>
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	eba0 000a 	sub.w	r0, r0, sl
 80082ba:	fa03 f000 	lsl.w	r0, r3, r0
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	4303      	orrs	r3, r0
 80082c2:	3401      	adds	r4, #1
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ca:	4826      	ldr	r0, [pc, #152]	; (8008364 <_svfiprintf_r+0x1f0>)
 80082cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d0:	2206      	movs	r2, #6
 80082d2:	f7f7 ff85 	bl	80001e0 <memchr>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d038      	beq.n	800834c <_svfiprintf_r+0x1d8>
 80082da:	4b23      	ldr	r3, [pc, #140]	; (8008368 <_svfiprintf_r+0x1f4>)
 80082dc:	bb1b      	cbnz	r3, 8008326 <_svfiprintf_r+0x1b2>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	3307      	adds	r3, #7
 80082e2:	f023 0307 	bic.w	r3, r3, #7
 80082e6:	3308      	adds	r3, #8
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ec:	4433      	add	r3, r6
 80082ee:	9309      	str	r3, [sp, #36]	; 0x24
 80082f0:	e767      	b.n	80081c2 <_svfiprintf_r+0x4e>
 80082f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80082f6:	460c      	mov	r4, r1
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7a5      	b.n	8008248 <_svfiprintf_r+0xd4>
 80082fc:	2300      	movs	r3, #0
 80082fe:	3401      	adds	r4, #1
 8008300:	9305      	str	r3, [sp, #20]
 8008302:	4619      	mov	r1, r3
 8008304:	f04f 0c0a 	mov.w	ip, #10
 8008308:	4620      	mov	r0, r4
 800830a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800830e:	3a30      	subs	r2, #48	; 0x30
 8008310:	2a09      	cmp	r2, #9
 8008312:	d903      	bls.n	800831c <_svfiprintf_r+0x1a8>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0c5      	beq.n	80082a4 <_svfiprintf_r+0x130>
 8008318:	9105      	str	r1, [sp, #20]
 800831a:	e7c3      	b.n	80082a4 <_svfiprintf_r+0x130>
 800831c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008320:	4604      	mov	r4, r0
 8008322:	2301      	movs	r3, #1
 8008324:	e7f0      	b.n	8008308 <_svfiprintf_r+0x194>
 8008326:	ab03      	add	r3, sp, #12
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	462a      	mov	r2, r5
 800832c:	4b0f      	ldr	r3, [pc, #60]	; (800836c <_svfiprintf_r+0x1f8>)
 800832e:	a904      	add	r1, sp, #16
 8008330:	4638      	mov	r0, r7
 8008332:	f3af 8000 	nop.w
 8008336:	1c42      	adds	r2, r0, #1
 8008338:	4606      	mov	r6, r0
 800833a:	d1d6      	bne.n	80082ea <_svfiprintf_r+0x176>
 800833c:	89ab      	ldrh	r3, [r5, #12]
 800833e:	065b      	lsls	r3, r3, #25
 8008340:	f53f af2c 	bmi.w	800819c <_svfiprintf_r+0x28>
 8008344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008346:	b01d      	add	sp, #116	; 0x74
 8008348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834c:	ab03      	add	r3, sp, #12
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	462a      	mov	r2, r5
 8008352:	4b06      	ldr	r3, [pc, #24]	; (800836c <_svfiprintf_r+0x1f8>)
 8008354:	a904      	add	r1, sp, #16
 8008356:	4638      	mov	r0, r7
 8008358:	f000 f87a 	bl	8008450 <_printf_i>
 800835c:	e7eb      	b.n	8008336 <_svfiprintf_r+0x1c2>
 800835e:	bf00      	nop
 8008360:	08008a04 	.word	0x08008a04
 8008364:	08008a0e 	.word	0x08008a0e
 8008368:	00000000 	.word	0x00000000
 800836c:	080080bd 	.word	0x080080bd
 8008370:	08008a0a 	.word	0x08008a0a

08008374 <_printf_common>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	4616      	mov	r6, r2
 800837a:	4699      	mov	r9, r3
 800837c:	688a      	ldr	r2, [r1, #8]
 800837e:	690b      	ldr	r3, [r1, #16]
 8008380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008384:	4293      	cmp	r3, r2
 8008386:	bfb8      	it	lt
 8008388:	4613      	movlt	r3, r2
 800838a:	6033      	str	r3, [r6, #0]
 800838c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008390:	4607      	mov	r7, r0
 8008392:	460c      	mov	r4, r1
 8008394:	b10a      	cbz	r2, 800839a <_printf_common+0x26>
 8008396:	3301      	adds	r3, #1
 8008398:	6033      	str	r3, [r6, #0]
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0699      	lsls	r1, r3, #26
 800839e:	bf42      	ittt	mi
 80083a0:	6833      	ldrmi	r3, [r6, #0]
 80083a2:	3302      	addmi	r3, #2
 80083a4:	6033      	strmi	r3, [r6, #0]
 80083a6:	6825      	ldr	r5, [r4, #0]
 80083a8:	f015 0506 	ands.w	r5, r5, #6
 80083ac:	d106      	bne.n	80083bc <_printf_common+0x48>
 80083ae:	f104 0a19 	add.w	sl, r4, #25
 80083b2:	68e3      	ldr	r3, [r4, #12]
 80083b4:	6832      	ldr	r2, [r6, #0]
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	42ab      	cmp	r3, r5
 80083ba:	dc26      	bgt.n	800840a <_printf_common+0x96>
 80083bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c0:	1e13      	subs	r3, r2, #0
 80083c2:	6822      	ldr	r2, [r4, #0]
 80083c4:	bf18      	it	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	0692      	lsls	r2, r2, #26
 80083ca:	d42b      	bmi.n	8008424 <_printf_common+0xb0>
 80083cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d0:	4649      	mov	r1, r9
 80083d2:	4638      	mov	r0, r7
 80083d4:	47c0      	blx	r8
 80083d6:	3001      	adds	r0, #1
 80083d8:	d01e      	beq.n	8008418 <_printf_common+0xa4>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	68e5      	ldr	r5, [r4, #12]
 80083de:	6832      	ldr	r2, [r6, #0]
 80083e0:	f003 0306 	and.w	r3, r3, #6
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	bf08      	it	eq
 80083e8:	1aad      	subeq	r5, r5, r2
 80083ea:	68a3      	ldr	r3, [r4, #8]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	bf0c      	ite	eq
 80083f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f4:	2500      	movne	r5, #0
 80083f6:	4293      	cmp	r3, r2
 80083f8:	bfc4      	itt	gt
 80083fa:	1a9b      	subgt	r3, r3, r2
 80083fc:	18ed      	addgt	r5, r5, r3
 80083fe:	2600      	movs	r6, #0
 8008400:	341a      	adds	r4, #26
 8008402:	42b5      	cmp	r5, r6
 8008404:	d11a      	bne.n	800843c <_printf_common+0xc8>
 8008406:	2000      	movs	r0, #0
 8008408:	e008      	b.n	800841c <_printf_common+0xa8>
 800840a:	2301      	movs	r3, #1
 800840c:	4652      	mov	r2, sl
 800840e:	4649      	mov	r1, r9
 8008410:	4638      	mov	r0, r7
 8008412:	47c0      	blx	r8
 8008414:	3001      	adds	r0, #1
 8008416:	d103      	bne.n	8008420 <_printf_common+0xac>
 8008418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008420:	3501      	adds	r5, #1
 8008422:	e7c6      	b.n	80083b2 <_printf_common+0x3e>
 8008424:	18e1      	adds	r1, r4, r3
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	2030      	movs	r0, #48	; 0x30
 800842a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800842e:	4422      	add	r2, r4
 8008430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008438:	3302      	adds	r3, #2
 800843a:	e7c7      	b.n	80083cc <_printf_common+0x58>
 800843c:	2301      	movs	r3, #1
 800843e:	4622      	mov	r2, r4
 8008440:	4649      	mov	r1, r9
 8008442:	4638      	mov	r0, r7
 8008444:	47c0      	blx	r8
 8008446:	3001      	adds	r0, #1
 8008448:	d0e6      	beq.n	8008418 <_printf_common+0xa4>
 800844a:	3601      	adds	r6, #1
 800844c:	e7d9      	b.n	8008402 <_printf_common+0x8e>
	...

08008450 <_printf_i>:
 8008450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	7e0f      	ldrb	r7, [r1, #24]
 8008456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008458:	2f78      	cmp	r7, #120	; 0x78
 800845a:	4691      	mov	r9, r2
 800845c:	4680      	mov	r8, r0
 800845e:	460c      	mov	r4, r1
 8008460:	469a      	mov	sl, r3
 8008462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008466:	d807      	bhi.n	8008478 <_printf_i+0x28>
 8008468:	2f62      	cmp	r7, #98	; 0x62
 800846a:	d80a      	bhi.n	8008482 <_printf_i+0x32>
 800846c:	2f00      	cmp	r7, #0
 800846e:	f000 80d8 	beq.w	8008622 <_printf_i+0x1d2>
 8008472:	2f58      	cmp	r7, #88	; 0x58
 8008474:	f000 80a3 	beq.w	80085be <_printf_i+0x16e>
 8008478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800847c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008480:	e03a      	b.n	80084f8 <_printf_i+0xa8>
 8008482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008486:	2b15      	cmp	r3, #21
 8008488:	d8f6      	bhi.n	8008478 <_printf_i+0x28>
 800848a:	a101      	add	r1, pc, #4	; (adr r1, 8008490 <_printf_i+0x40>)
 800848c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008490:	080084e9 	.word	0x080084e9
 8008494:	080084fd 	.word	0x080084fd
 8008498:	08008479 	.word	0x08008479
 800849c:	08008479 	.word	0x08008479
 80084a0:	08008479 	.word	0x08008479
 80084a4:	08008479 	.word	0x08008479
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008479 	.word	0x08008479
 80084b0:	08008479 	.word	0x08008479
 80084b4:	08008479 	.word	0x08008479
 80084b8:	08008479 	.word	0x08008479
 80084bc:	08008609 	.word	0x08008609
 80084c0:	0800852d 	.word	0x0800852d
 80084c4:	080085eb 	.word	0x080085eb
 80084c8:	08008479 	.word	0x08008479
 80084cc:	08008479 	.word	0x08008479
 80084d0:	0800862b 	.word	0x0800862b
 80084d4:	08008479 	.word	0x08008479
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	08008479 	.word	0x08008479
 80084e0:	08008479 	.word	0x08008479
 80084e4:	080085f3 	.word	0x080085f3
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	1d1a      	adds	r2, r3, #4
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0a3      	b.n	8008644 <_printf_i+0x1f4>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	0606      	lsls	r6, r0, #24
 8008502:	f101 0304 	add.w	r3, r1, #4
 8008506:	d50a      	bpl.n	800851e <_printf_i+0xce>
 8008508:	680e      	ldr	r6, [r1, #0]
 800850a:	602b      	str	r3, [r5, #0]
 800850c:	2e00      	cmp	r6, #0
 800850e:	da03      	bge.n	8008518 <_printf_i+0xc8>
 8008510:	232d      	movs	r3, #45	; 0x2d
 8008512:	4276      	negs	r6, r6
 8008514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008518:	485e      	ldr	r0, [pc, #376]	; (8008694 <_printf_i+0x244>)
 800851a:	230a      	movs	r3, #10
 800851c:	e019      	b.n	8008552 <_printf_i+0x102>
 800851e:	680e      	ldr	r6, [r1, #0]
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008526:	bf18      	it	ne
 8008528:	b236      	sxthne	r6, r6
 800852a:	e7ef      	b.n	800850c <_printf_i+0xbc>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0601      	lsls	r1, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xec>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xf2>
 800853c:	0646      	lsls	r6, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe8>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	4854      	ldr	r0, [pc, #336]	; (8008694 <_printf_i+0x244>)
 8008544:	2f6f      	cmp	r7, #111	; 0x6f
 8008546:	bf0c      	ite	eq
 8008548:	2308      	moveq	r3, #8
 800854a:	230a      	movne	r3, #10
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	2d00      	cmp	r5, #0
 8008558:	bfa2      	ittt	ge
 800855a:	6821      	ldrge	r1, [r4, #0]
 800855c:	f021 0104 	bicge.w	r1, r1, #4
 8008560:	6021      	strge	r1, [r4, #0]
 8008562:	b90e      	cbnz	r6, 8008568 <_printf_i+0x118>
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04d      	beq.n	8008604 <_printf_i+0x1b4>
 8008568:	4615      	mov	r5, r2
 800856a:	fbb6 f1f3 	udiv	r1, r6, r3
 800856e:	fb03 6711 	mls	r7, r3, r1, r6
 8008572:	5dc7      	ldrb	r7, [r0, r7]
 8008574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008578:	4637      	mov	r7, r6
 800857a:	42bb      	cmp	r3, r7
 800857c:	460e      	mov	r6, r1
 800857e:	d9f4      	bls.n	800856a <_printf_i+0x11a>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <_printf_i+0x14c>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07de      	lsls	r6, r3, #31
 8008588:	d508      	bpl.n	800859c <_printf_i+0x14c>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	4299      	cmp	r1, r3
 8008590:	bfde      	ittt	le
 8008592:	2330      	movle	r3, #48	; 0x30
 8008594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008598:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	f8cd a000 	str.w	sl, [sp]
 80085a4:	464b      	mov	r3, r9
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fee2 	bl	8008374 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d14c      	bne.n	800864e <_printf_i+0x1fe>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b8:	b004      	add	sp, #16
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	4835      	ldr	r0, [pc, #212]	; (8008694 <_printf_i+0x244>)
 80085c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085c4:	6829      	ldr	r1, [r5, #0]
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085cc:	6029      	str	r1, [r5, #0]
 80085ce:	061d      	lsls	r5, r3, #24
 80085d0:	d514      	bpl.n	80085fc <_printf_i+0x1ac>
 80085d2:	07df      	lsls	r7, r3, #31
 80085d4:	bf44      	itt	mi
 80085d6:	f043 0320 	orrmi.w	r3, r3, #32
 80085da:	6023      	strmi	r3, [r4, #0]
 80085dc:	b91e      	cbnz	r6, 80085e6 <_printf_i+0x196>
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	f023 0320 	bic.w	r3, r3, #32
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	2310      	movs	r3, #16
 80085e8:	e7b0      	b.n	800854c <_printf_i+0xfc>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f043 0320 	orr.w	r3, r3, #32
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2378      	movs	r3, #120	; 0x78
 80085f4:	4828      	ldr	r0, [pc, #160]	; (8008698 <_printf_i+0x248>)
 80085f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085fa:	e7e3      	b.n	80085c4 <_printf_i+0x174>
 80085fc:	0659      	lsls	r1, r3, #25
 80085fe:	bf48      	it	mi
 8008600:	b2b6      	uxthmi	r6, r6
 8008602:	e7e6      	b.n	80085d2 <_printf_i+0x182>
 8008604:	4615      	mov	r5, r2
 8008606:	e7bb      	b.n	8008580 <_printf_i+0x130>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	6826      	ldr	r6, [r4, #0]
 800860c:	6961      	ldr	r1, [r4, #20]
 800860e:	1d18      	adds	r0, r3, #4
 8008610:	6028      	str	r0, [r5, #0]
 8008612:	0635      	lsls	r5, r6, #24
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	d501      	bpl.n	800861c <_printf_i+0x1cc>
 8008618:	6019      	str	r1, [r3, #0]
 800861a:	e002      	b.n	8008622 <_printf_i+0x1d2>
 800861c:	0670      	lsls	r0, r6, #25
 800861e:	d5fb      	bpl.n	8008618 <_printf_i+0x1c8>
 8008620:	8019      	strh	r1, [r3, #0]
 8008622:	2300      	movs	r3, #0
 8008624:	6123      	str	r3, [r4, #16]
 8008626:	4615      	mov	r5, r2
 8008628:	e7ba      	b.n	80085a0 <_printf_i+0x150>
 800862a:	682b      	ldr	r3, [r5, #0]
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	602a      	str	r2, [r5, #0]
 8008630:	681d      	ldr	r5, [r3, #0]
 8008632:	6862      	ldr	r2, [r4, #4]
 8008634:	2100      	movs	r1, #0
 8008636:	4628      	mov	r0, r5
 8008638:	f7f7 fdd2 	bl	80001e0 <memchr>
 800863c:	b108      	cbz	r0, 8008642 <_printf_i+0x1f2>
 800863e:	1b40      	subs	r0, r0, r5
 8008640:	6060      	str	r0, [r4, #4]
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	2300      	movs	r3, #0
 8008648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864c:	e7a8      	b.n	80085a0 <_printf_i+0x150>
 800864e:	6923      	ldr	r3, [r4, #16]
 8008650:	462a      	mov	r2, r5
 8008652:	4649      	mov	r1, r9
 8008654:	4640      	mov	r0, r8
 8008656:	47d0      	blx	sl
 8008658:	3001      	adds	r0, #1
 800865a:	d0ab      	beq.n	80085b4 <_printf_i+0x164>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	079b      	lsls	r3, r3, #30
 8008660:	d413      	bmi.n	800868a <_printf_i+0x23a>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	4298      	cmp	r0, r3
 8008668:	bfb8      	it	lt
 800866a:	4618      	movlt	r0, r3
 800866c:	e7a4      	b.n	80085b8 <_printf_i+0x168>
 800866e:	2301      	movs	r3, #1
 8008670:	4632      	mov	r2, r6
 8008672:	4649      	mov	r1, r9
 8008674:	4640      	mov	r0, r8
 8008676:	47d0      	blx	sl
 8008678:	3001      	adds	r0, #1
 800867a:	d09b      	beq.n	80085b4 <_printf_i+0x164>
 800867c:	3501      	adds	r5, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	9903      	ldr	r1, [sp, #12]
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	42ab      	cmp	r3, r5
 8008686:	dcf2      	bgt.n	800866e <_printf_i+0x21e>
 8008688:	e7eb      	b.n	8008662 <_printf_i+0x212>
 800868a:	2500      	movs	r5, #0
 800868c:	f104 0619 	add.w	r6, r4, #25
 8008690:	e7f5      	b.n	800867e <_printf_i+0x22e>
 8008692:	bf00      	nop
 8008694:	08008a15 	.word	0x08008a15
 8008698:	08008a26 	.word	0x08008a26

0800869c <memcpy>:
 800869c:	440a      	add	r2, r1
 800869e:	4291      	cmp	r1, r2
 80086a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80086a4:	d100      	bne.n	80086a8 <memcpy+0xc>
 80086a6:	4770      	bx	lr
 80086a8:	b510      	push	{r4, lr}
 80086aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b2:	4291      	cmp	r1, r2
 80086b4:	d1f9      	bne.n	80086aa <memcpy+0xe>
 80086b6:	bd10      	pop	{r4, pc}

080086b8 <memmove>:
 80086b8:	4288      	cmp	r0, r1
 80086ba:	b510      	push	{r4, lr}
 80086bc:	eb01 0402 	add.w	r4, r1, r2
 80086c0:	d902      	bls.n	80086c8 <memmove+0x10>
 80086c2:	4284      	cmp	r4, r0
 80086c4:	4623      	mov	r3, r4
 80086c6:	d807      	bhi.n	80086d8 <memmove+0x20>
 80086c8:	1e43      	subs	r3, r0, #1
 80086ca:	42a1      	cmp	r1, r4
 80086cc:	d008      	beq.n	80086e0 <memmove+0x28>
 80086ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086d6:	e7f8      	b.n	80086ca <memmove+0x12>
 80086d8:	4402      	add	r2, r0
 80086da:	4601      	mov	r1, r0
 80086dc:	428a      	cmp	r2, r1
 80086de:	d100      	bne.n	80086e2 <memmove+0x2a>
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ea:	e7f7      	b.n	80086dc <memmove+0x24>

080086ec <_free_r>:
 80086ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d044      	beq.n	800877c <_free_r+0x90>
 80086f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f6:	9001      	str	r0, [sp, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f1a1 0404 	sub.w	r4, r1, #4
 80086fe:	bfb8      	it	lt
 8008700:	18e4      	addlt	r4, r4, r3
 8008702:	f000 f913 	bl	800892c <__malloc_lock>
 8008706:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <_free_r+0x94>)
 8008708:	9801      	ldr	r0, [sp, #4]
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	b933      	cbnz	r3, 800871c <_free_r+0x30>
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	6014      	str	r4, [r2, #0]
 8008712:	b003      	add	sp, #12
 8008714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008718:	f000 b90e 	b.w	8008938 <__malloc_unlock>
 800871c:	42a3      	cmp	r3, r4
 800871e:	d908      	bls.n	8008732 <_free_r+0x46>
 8008720:	6825      	ldr	r5, [r4, #0]
 8008722:	1961      	adds	r1, r4, r5
 8008724:	428b      	cmp	r3, r1
 8008726:	bf01      	itttt	eq
 8008728:	6819      	ldreq	r1, [r3, #0]
 800872a:	685b      	ldreq	r3, [r3, #4]
 800872c:	1949      	addeq	r1, r1, r5
 800872e:	6021      	streq	r1, [r4, #0]
 8008730:	e7ed      	b.n	800870e <_free_r+0x22>
 8008732:	461a      	mov	r2, r3
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b10b      	cbz	r3, 800873c <_free_r+0x50>
 8008738:	42a3      	cmp	r3, r4
 800873a:	d9fa      	bls.n	8008732 <_free_r+0x46>
 800873c:	6811      	ldr	r1, [r2, #0]
 800873e:	1855      	adds	r5, r2, r1
 8008740:	42a5      	cmp	r5, r4
 8008742:	d10b      	bne.n	800875c <_free_r+0x70>
 8008744:	6824      	ldr	r4, [r4, #0]
 8008746:	4421      	add	r1, r4
 8008748:	1854      	adds	r4, r2, r1
 800874a:	42a3      	cmp	r3, r4
 800874c:	6011      	str	r1, [r2, #0]
 800874e:	d1e0      	bne.n	8008712 <_free_r+0x26>
 8008750:	681c      	ldr	r4, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	4421      	add	r1, r4
 8008758:	6011      	str	r1, [r2, #0]
 800875a:	e7da      	b.n	8008712 <_free_r+0x26>
 800875c:	d902      	bls.n	8008764 <_free_r+0x78>
 800875e:	230c      	movs	r3, #12
 8008760:	6003      	str	r3, [r0, #0]
 8008762:	e7d6      	b.n	8008712 <_free_r+0x26>
 8008764:	6825      	ldr	r5, [r4, #0]
 8008766:	1961      	adds	r1, r4, r5
 8008768:	428b      	cmp	r3, r1
 800876a:	bf04      	itt	eq
 800876c:	6819      	ldreq	r1, [r3, #0]
 800876e:	685b      	ldreq	r3, [r3, #4]
 8008770:	6063      	str	r3, [r4, #4]
 8008772:	bf04      	itt	eq
 8008774:	1949      	addeq	r1, r1, r5
 8008776:	6021      	streq	r1, [r4, #0]
 8008778:	6054      	str	r4, [r2, #4]
 800877a:	e7ca      	b.n	8008712 <_free_r+0x26>
 800877c:	b003      	add	sp, #12
 800877e:	bd30      	pop	{r4, r5, pc}
 8008780:	2000063c 	.word	0x2000063c

08008784 <sbrk_aligned>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4e0e      	ldr	r6, [pc, #56]	; (80087c0 <sbrk_aligned+0x3c>)
 8008788:	460c      	mov	r4, r1
 800878a:	6831      	ldr	r1, [r6, #0]
 800878c:	4605      	mov	r5, r0
 800878e:	b911      	cbnz	r1, 8008796 <sbrk_aligned+0x12>
 8008790:	f000 f8bc 	bl	800890c <_sbrk_r>
 8008794:	6030      	str	r0, [r6, #0]
 8008796:	4621      	mov	r1, r4
 8008798:	4628      	mov	r0, r5
 800879a:	f000 f8b7 	bl	800890c <_sbrk_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d00a      	beq.n	80087b8 <sbrk_aligned+0x34>
 80087a2:	1cc4      	adds	r4, r0, #3
 80087a4:	f024 0403 	bic.w	r4, r4, #3
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d007      	beq.n	80087bc <sbrk_aligned+0x38>
 80087ac:	1a21      	subs	r1, r4, r0
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 f8ac 	bl	800890c <_sbrk_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d101      	bne.n	80087bc <sbrk_aligned+0x38>
 80087b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087bc:	4620      	mov	r0, r4
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	20000640 	.word	0x20000640

080087c4 <_malloc_r>:
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	1ccd      	adds	r5, r1, #3
 80087ca:	f025 0503 	bic.w	r5, r5, #3
 80087ce:	3508      	adds	r5, #8
 80087d0:	2d0c      	cmp	r5, #12
 80087d2:	bf38      	it	cc
 80087d4:	250c      	movcc	r5, #12
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	4607      	mov	r7, r0
 80087da:	db01      	blt.n	80087e0 <_malloc_r+0x1c>
 80087dc:	42a9      	cmp	r1, r5
 80087de:	d905      	bls.n	80087ec <_malloc_r+0x28>
 80087e0:	230c      	movs	r3, #12
 80087e2:	603b      	str	r3, [r7, #0]
 80087e4:	2600      	movs	r6, #0
 80087e6:	4630      	mov	r0, r6
 80087e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ec:	4e2e      	ldr	r6, [pc, #184]	; (80088a8 <_malloc_r+0xe4>)
 80087ee:	f000 f89d 	bl	800892c <__malloc_lock>
 80087f2:	6833      	ldr	r3, [r6, #0]
 80087f4:	461c      	mov	r4, r3
 80087f6:	bb34      	cbnz	r4, 8008846 <_malloc_r+0x82>
 80087f8:	4629      	mov	r1, r5
 80087fa:	4638      	mov	r0, r7
 80087fc:	f7ff ffc2 	bl	8008784 <sbrk_aligned>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	4604      	mov	r4, r0
 8008804:	d14d      	bne.n	80088a2 <_malloc_r+0xde>
 8008806:	6834      	ldr	r4, [r6, #0]
 8008808:	4626      	mov	r6, r4
 800880a:	2e00      	cmp	r6, #0
 800880c:	d140      	bne.n	8008890 <_malloc_r+0xcc>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	4631      	mov	r1, r6
 8008812:	4638      	mov	r0, r7
 8008814:	eb04 0803 	add.w	r8, r4, r3
 8008818:	f000 f878 	bl	800890c <_sbrk_r>
 800881c:	4580      	cmp	r8, r0
 800881e:	d13a      	bne.n	8008896 <_malloc_r+0xd2>
 8008820:	6821      	ldr	r1, [r4, #0]
 8008822:	3503      	adds	r5, #3
 8008824:	1a6d      	subs	r5, r5, r1
 8008826:	f025 0503 	bic.w	r5, r5, #3
 800882a:	3508      	adds	r5, #8
 800882c:	2d0c      	cmp	r5, #12
 800882e:	bf38      	it	cc
 8008830:	250c      	movcc	r5, #12
 8008832:	4629      	mov	r1, r5
 8008834:	4638      	mov	r0, r7
 8008836:	f7ff ffa5 	bl	8008784 <sbrk_aligned>
 800883a:	3001      	adds	r0, #1
 800883c:	d02b      	beq.n	8008896 <_malloc_r+0xd2>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	442b      	add	r3, r5
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	e00e      	b.n	8008864 <_malloc_r+0xa0>
 8008846:	6822      	ldr	r2, [r4, #0]
 8008848:	1b52      	subs	r2, r2, r5
 800884a:	d41e      	bmi.n	800888a <_malloc_r+0xc6>
 800884c:	2a0b      	cmp	r2, #11
 800884e:	d916      	bls.n	800887e <_malloc_r+0xba>
 8008850:	1961      	adds	r1, r4, r5
 8008852:	42a3      	cmp	r3, r4
 8008854:	6025      	str	r5, [r4, #0]
 8008856:	bf18      	it	ne
 8008858:	6059      	strne	r1, [r3, #4]
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	bf08      	it	eq
 800885e:	6031      	streq	r1, [r6, #0]
 8008860:	5162      	str	r2, [r4, r5]
 8008862:	604b      	str	r3, [r1, #4]
 8008864:	4638      	mov	r0, r7
 8008866:	f104 060b 	add.w	r6, r4, #11
 800886a:	f000 f865 	bl	8008938 <__malloc_unlock>
 800886e:	f026 0607 	bic.w	r6, r6, #7
 8008872:	1d23      	adds	r3, r4, #4
 8008874:	1af2      	subs	r2, r6, r3
 8008876:	d0b6      	beq.n	80087e6 <_malloc_r+0x22>
 8008878:	1b9b      	subs	r3, r3, r6
 800887a:	50a3      	str	r3, [r4, r2]
 800887c:	e7b3      	b.n	80087e6 <_malloc_r+0x22>
 800887e:	6862      	ldr	r2, [r4, #4]
 8008880:	42a3      	cmp	r3, r4
 8008882:	bf0c      	ite	eq
 8008884:	6032      	streq	r2, [r6, #0]
 8008886:	605a      	strne	r2, [r3, #4]
 8008888:	e7ec      	b.n	8008864 <_malloc_r+0xa0>
 800888a:	4623      	mov	r3, r4
 800888c:	6864      	ldr	r4, [r4, #4]
 800888e:	e7b2      	b.n	80087f6 <_malloc_r+0x32>
 8008890:	4634      	mov	r4, r6
 8008892:	6876      	ldr	r6, [r6, #4]
 8008894:	e7b9      	b.n	800880a <_malloc_r+0x46>
 8008896:	230c      	movs	r3, #12
 8008898:	603b      	str	r3, [r7, #0]
 800889a:	4638      	mov	r0, r7
 800889c:	f000 f84c 	bl	8008938 <__malloc_unlock>
 80088a0:	e7a1      	b.n	80087e6 <_malloc_r+0x22>
 80088a2:	6025      	str	r5, [r4, #0]
 80088a4:	e7de      	b.n	8008864 <_malloc_r+0xa0>
 80088a6:	bf00      	nop
 80088a8:	2000063c 	.word	0x2000063c

080088ac <_realloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	4680      	mov	r8, r0
 80088b2:	4614      	mov	r4, r2
 80088b4:	460e      	mov	r6, r1
 80088b6:	b921      	cbnz	r1, 80088c2 <_realloc_r+0x16>
 80088b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088bc:	4611      	mov	r1, r2
 80088be:	f7ff bf81 	b.w	80087c4 <_malloc_r>
 80088c2:	b92a      	cbnz	r2, 80088d0 <_realloc_r+0x24>
 80088c4:	f7ff ff12 	bl	80086ec <_free_r>
 80088c8:	4625      	mov	r5, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	f000 f838 	bl	8008944 <_malloc_usable_size_r>
 80088d4:	4284      	cmp	r4, r0
 80088d6:	4607      	mov	r7, r0
 80088d8:	d802      	bhi.n	80088e0 <_realloc_r+0x34>
 80088da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088de:	d812      	bhi.n	8008906 <_realloc_r+0x5a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7ff ff6e 	bl	80087c4 <_malloc_r>
 80088e8:	4605      	mov	r5, r0
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0ed      	beq.n	80088ca <_realloc_r+0x1e>
 80088ee:	42bc      	cmp	r4, r7
 80088f0:	4622      	mov	r2, r4
 80088f2:	4631      	mov	r1, r6
 80088f4:	bf28      	it	cs
 80088f6:	463a      	movcs	r2, r7
 80088f8:	f7ff fed0 	bl	800869c <memcpy>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4640      	mov	r0, r8
 8008900:	f7ff fef4 	bl	80086ec <_free_r>
 8008904:	e7e1      	b.n	80088ca <_realloc_r+0x1e>
 8008906:	4635      	mov	r5, r6
 8008908:	e7df      	b.n	80088ca <_realloc_r+0x1e>
	...

0800890c <_sbrk_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d06      	ldr	r5, [pc, #24]	; (8008928 <_sbrk_r+0x1c>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7f9 f87c 	bl	8001a14 <_sbrk>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_sbrk_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_sbrk_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	20000644 	.word	0x20000644

0800892c <__malloc_lock>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__malloc_lock+0x8>)
 800892e:	f000 b811 	b.w	8008954 <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	20000648 	.word	0x20000648

08008938 <__malloc_unlock>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__malloc_unlock+0x8>)
 800893a:	f000 b80c 	b.w	8008956 <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	20000648 	.word	0x20000648

08008944 <_malloc_usable_size_r>:
 8008944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008948:	1f18      	subs	r0, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	bfbc      	itt	lt
 800894e:	580b      	ldrlt	r3, [r1, r0]
 8008950:	18c0      	addlt	r0, r0, r3
 8008952:	4770      	bx	lr

08008954 <__retarget_lock_acquire_recursive>:
 8008954:	4770      	bx	lr

08008956 <__retarget_lock_release_recursive>:
 8008956:	4770      	bx	lr

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
