
E8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007728  08007728  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007728  08007728  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000594  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000061c  2000061c  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d212  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003550  00000000  00000000  0003d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  00040820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001630  00000000  00000000  00041fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021000  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e35e  00000000  00000000  000645d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7acb  00000000  00000000  00082936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a401  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006878  00000000  00000000  0014a454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007658 	.word	0x08007658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007658 	.word	0x08007658

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200000a6 	.word	0x200000a6
 800039c:	200000a8 	.word	0x200000a8
 80003a0:	200000aa 	.word	0x200000aa
 80003a4:	200000bc 	.word	0x200000bc
 80003a8:	200000ac 	.word	0x200000ac
 80003ac:	200000c0 	.word	0x200000c0

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fc7f 	bl	8002db4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 f97c 	bl	80017b4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fdee 	bl	80030a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fde6 	bl	80030a8 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fdda 	bl	80030a8 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 f954 	bl	80017b4 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 f94e 	bl	80017b4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 f948 	bl	80017b4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 f939 	bl	80017b4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 f92e 	bl	80017b4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000c0 	.word	0x200000c0
 80005a8:	200000c3 	.word	0x200000c3
 80005ac:	200000a4 	.word	0x200000a4
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200000a6 	.word	0x200000a6
 80005b8:	200000a8 	.word	0x200000a8
 80005bc:	200000aa 	.word	0x200000aa
 80005c0:	200000ac 	.word	0x200000ac
 80005c4:	200000bc 	.word	0x200000bc
 80005c8:	200000c1 	.word	0x200000c1
 80005cc:	200000c2 	.word	0x200000c2

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000bc 	.word	0x200000bc
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000c4 	.word	0x200000c4

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 f836 	bl	80017b4 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000c3 	.word	0x200000c3
 80007ac:	200000c4 	.word	0x200000c4

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000c1 	.word	0x200000c1

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fbe4 	bl	80030a8 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fbd8 	bl	80030a8 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000bc 	.word	0x200000bc
 8000930:	200000a6 	.word	0x200000a6
 8000934:	200000a8 	.word	0x200000a8
 8000938:	200000c0 	.word	0x200000c0

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fbac 	bl	80030a8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f000 ff2f 	bl	80017b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fba1 	bl	80030a8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f000 ff24 	bl	80017b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fb96 	bl	80030a8 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f000 ff19 	bl	80017b4 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000bc 	.word	0x200000bc
 800098c:	200000aa 	.word	0x200000aa

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 fb73 	bl	80030a8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000bc 	.word	0x200000bc
 80009e0:	200000ac 	.word	0x200000ac

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fb49 	bl	80030a8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000bc 	.word	0x200000bc
 8000a34:	200000ac 	.word	0x200000ac

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fe54 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f816 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 fa08 	bl	8000e58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a48:	f000 f8e8 	bl	8000c1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a4c:	f000 f926 	bl	8000c9c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000a50:	f000 f9e0 	bl	8000e14 <MX_USB_PCD_Init>
  MX_ADC3_Init();
 8000a54:	f000 f872 	bl	8000b3c <MX_ADC3_Init>
  MX_TIM2_Init();
 8000a58:	f000 f95e 	bl	8000d18 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000a5c:	f000 f9aa 	bl	8000db4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_rx_enable_it();
 8000a60:	f000 fb5c 	bl	800111c <uart_rx_enable_it>
  programInit();
 8000a64:	f000 fac2 	bl	8000fec <programInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  programLoop();
 8000a68:	f000 faf4 	bl	8001054 <programLoop>
  {
 8000a6c:	e7fc      	b.n	8000a68 <main+0x30>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09e      	sub	sp, #120	; 0x78
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 f974 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	223c      	movs	r2, #60	; 0x3c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 f966 	bl	8006d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ac4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fd2e 	bl	800352c <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 fa55 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fd56 	bl	80045a8 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b02:	f000 fa3f 	bl	8000f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <SystemClock_Config+0xc8>)
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 ff77 	bl	8004a14 <HAL_RCCEx_PeriphCLKConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b2c:	f000 fa2a 	bl	8000f84 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3778      	adds	r7, #120	; 0x78
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	00020124 	.word	0x00020124

08000b3c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b60:	4a2d      	ldr	r2, [pc, #180]	; (8000c18 <MX_ADC3_Init+0xdc>)
 8000b62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b90:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000bb8:	f000 fe34 	bl	8001824 <HAL_ADC_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000bc2:	f000 f9df 	bl	8000f84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4810      	ldr	r0, [pc, #64]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000bd2:	f001 fe0f 	bl	80027f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000bdc:	f000 f9d2 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000be0:	2305      	movs	r3, #5
 8000be2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000bec:	2307      	movs	r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_ADC3_Init+0xd8>)
 8000bfe:	f001 fb0d 	bl	800221c <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000c08:	f000 f9bc 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200000c8 	.word	0x200000c8
 8000c18:	50000400 	.word	0x50000400

08000c1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_I2C1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <MX_I2C1_Init+0x7c>)
 8000c2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c58:	f002 fa70 	bl	800313c <HAL_I2C_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c62:	f000 f98f 	bl	8000f84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c66:	2100      	movs	r1, #0
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c6a:	f002 faf6 	bl	800325a <HAL_I2CEx_ConfigAnalogFilter>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c74:	f000 f986 	bl	8000f84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_I2C1_Init+0x74>)
 8000c7c:	f002 fb38 	bl	80032f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f97d 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000118 	.word	0x20000118
 8000c94:	40005400 	.word	0x40005400
 8000c98:	2000090e 	.word	0x2000090e

08000c9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <MX_SPI1_Init+0x78>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cb6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cea:	2207      	movs	r2, #7
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_SPI1_Init+0x74>)
 8000cfc:	f004 f83a 	bl	8004d74 <HAL_SPI_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d06:	f000 f93d 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000016c 	.word	0x2000016c
 8000d14:	40013000 	.word	0x40013000

08000d18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d40:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d60:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d62:	f004 f8b2 	bl	8004eca <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 f90a 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d7e:	f004 fa1a 	bl	80051b6 <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d88:	f000 f8fc 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_TIM2_Init+0x98>)
 8000d9a:	f004 fc31 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000da4:	f000 f8ee 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200001d0 	.word	0x200001d0

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <MX_USART3_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART3_UART_Init+0x58>)
 8000df8:	f004 fca0 	bl	800573c <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 f8bf 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000021c 	.word	0x2000021c
 8000e10:	40004800 	.word	0x40004800

08000e14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <MX_USB_PCD_Init+0x40>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_USB_PCD_Init+0x3c>)
 8000e3e:	f002 faa3 	bl	8003388 <HAL_PCD_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000e48:	f000 f89c 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200002a4 	.word	0x200002a4
 8000e54:	40005c00 	.word	0x40005c00

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b39      	ldr	r3, [pc, #228]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a35      	ldr	r2, [pc, #212]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <MX_GPIO_Init+0x120>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000eec:	4823      	ldr	r0, [pc, #140]	; (8000f7c <MX_GPIO_Init+0x124>)
 8000eee:	f002 f8db 	bl	80030a8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
 8000ef2:	2335      	movs	r3, #53	; 0x35
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	481d      	ldr	r0, [pc, #116]	; (8000f7c <MX_GPIO_Init+0x124>)
 8000f08:	f001 ff54 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f0c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000f10:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4815      	ldr	r0, [pc, #84]	; (8000f7c <MX_GPIO_Init+0x124>)
 8000f26:	f001 ff45 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4810      	ldr	r0, [pc, #64]	; (8000f80 <MX_GPIO_Init+0x128>)
 8000f40:	f001 ff38 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f001 ff2b 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2007      	movs	r0, #7
 8000f64:	f001 fe79 	bl	8002c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f001 fe92 	bl	8002c92 <HAL_NVIC_EnableIRQ>

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	48001000 	.word	0x48001000
 8000f80:	48000800 	.word	0x48000800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_ADC_ConvCpltCallback>:
//	}
//
//}
int currentBR;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09e      	sub	sp, #120	; 0x78
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d116      	bne.n	8000fd0 <HAL_ADC_ConvCpltCallback+0x40>
		int x = HAL_ADC_GetValue(&hadc3);
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000fa4:	f000 fe1e 	bl	8001be4 <HAL_ADC_GetValue>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	677b      	str	r3, [r7, #116]	; 0x74
		currentBR=x;
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb0:	6013      	str	r3, [r2, #0]
		float fx = ((float) x * 100 / 3800);
 8000fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000fe4 <HAL_ADC_ConvCpltCallback+0x54>
 8000fc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000fe8 <HAL_ADC_ConvCpltCallback+0x58>
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

//		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
//		HAL_UART_Transmit(&huart3, data, n, 1000);
//		checkBrightness();
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	3778      	adds	r7, #120	; 0x78
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	50000400 	.word	0x50000400
 8000fdc:	200000c8 	.word	0x200000c8
 8000fe0:	20000590 	.word	0x20000590
 8000fe4:	42c80000 	.word	0x42c80000
 8000fe8:	456d8000 	.word	0x456d8000

08000fec <programInit>:
  0x11,
  0x1F,
  0x00
};

void programInit() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b092      	sub	sp, #72	; 0x48
 8000ff0:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff6:	9303      	str	r3, [sp, #12]
 8000ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <programInit+0x5c>)
 8001018:	f7ff f932 	bl	8000280 <LiquidCrystal>

	char data[50];
	int n = sprintf(data, "Program Started...\n");
 800101c:	463b      	mov	r3, r7
 800101e:	490b      	ldr	r1, [pc, #44]	; (800104c <programInit+0x60>)
 8001020:	4618      	mov	r0, r3
 8001022:	f005 feab 	bl	8006d7c <siprintf>
 8001026:	6378      	str	r0, [r7, #52]	; 0x34
	HAL_UART_Transmit(&huart3, data, n, 1000);
 8001028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102a:	b29a      	uxth	r2, r3
 800102c:	4639      	mov	r1, r7
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <programInit+0x64>)
 8001034:	f004 fbd0 	bl	80057d8 <HAL_UART_Transmit>
	begin(20, 4);
 8001038:	2104      	movs	r1, #4
 800103a:	2014      	movs	r0, #20
 800103c:	f7ff f9b8 	bl	80003b0 <begin>
}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	48000c00 	.word	0x48000c00
 800104c:	08007670 	.word	0x08007670
 8001050:	2000021c 	.word	0x2000021c

08001054 <programLoop>:
char messages[50];
char input[50];

int flag = 1; //1 ==> light, 0 ==> message

void programLoop() {
 8001054:	b580      	push	{r7, lr}
 8001056:	b0b6      	sub	sp, #216	; 0xd8
 8001058:	af00      	add	r7, sp, #0
	char data[100];
	char data2[100];
	if (flag == 1){
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <programLoop+0xac>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d131      	bne.n	80010c6 <programLoop+0x72>
		// lamp
		int percent = 5;
 8001062:	2305      	movs	r3, #5
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		int critical = 12;
 8001068:	230c      	movs	r3, #12
 800106a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		int n = sprintf(data, " Light: %d%%",percent);
 800106e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001076:	4923      	ldr	r1, [pc, #140]	; (8001104 <programLoop+0xb0>)
 8001078:	4618      	mov	r0, r3
 800107a:	f005 fe7f 	bl	8006d7c <siprintf>
 800107e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		createChar(0, lamp);
 8001082:	4921      	ldr	r1, [pc, #132]	; (8001108 <programLoop+0xb4>)
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fbd4 	bl	8000832 <createChar>
		setCursor(0, 1);
 800108a:	2101      	movs	r1, #1
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fb5d 	bl	800074c <setCursor>
		write(0);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fc04 	bl	80008a0 <write>
		print(data);
 8001098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fb9d 	bl	80007dc <print>
		n = sprintf(data2, "Critical Light < %d%%",critical);
 80010a2:	463b      	mov	r3, r7
 80010a4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80010a8:	4918      	ldr	r1, [pc, #96]	; (800110c <programLoop+0xb8>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fe66 	bl	8006d7c <siprintf>
 80010b0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
		setCursor(0, 4);
 80010b4:	2104      	movs	r1, #4
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fb48 	bl	800074c <setCursor>
		print(data2);
 80010bc:	463b      	mov	r3, r7
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fb8c 	bl	80007dc <print>
		setCursor(0, 1);
		write(0);
		int n = sprintf(data, " Message: %s",messages);
		print(data);
	}
}
 80010c4:	e018      	b.n	80010f8 <programLoop+0xa4>
		createChar(0, message);
 80010c6:	4912      	ldr	r1, [pc, #72]	; (8001110 <programLoop+0xbc>)
 80010c8:	2000      	movs	r0, #0
 80010ca:	f7ff fbb2 	bl	8000832 <createChar>
		setCursor(0, 1);
 80010ce:	2101      	movs	r1, #1
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fb3b 	bl	800074c <setCursor>
		write(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fbe2 	bl	80008a0 <write>
		int n = sprintf(data, " Message: %s",messages);
 80010dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <programLoop+0xc0>)
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <programLoop+0xc4>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fe49 	bl	8006d7c <siprintf>
 80010ea:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		print(data);
 80010ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fb72 	bl	80007dc <print>
}
 80010f8:	bf00      	nop
 80010fa:	37d8      	adds	r7, #216	; 0xd8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000014 	.word	0x20000014
 8001104:	08007684 	.word	0x08007684
 8001108:	20000004 	.word	0x20000004
 800110c:	08007694 	.word	0x08007694
 8001110:	2000000c 	.word	0x2000000c
 8001114:	20000594 	.word	0x20000594
 8001118:	080076ac 	.word	0x080076ac

0800111c <uart_rx_enable_it>:
//}

char character;
int index_arr = 0;

void uart_rx_enable_it(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	4903      	ldr	r1, [pc, #12]	; (8001130 <uart_rx_enable_it+0x14>)
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <uart_rx_enable_it+0x18>)
 8001126:	f004 fbe1 	bl	80058ec <HAL_UART_Receive_IT>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200005fa 	.word	0x200005fa
 8001134:	2000021c 	.word	0x2000021c

08001138 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART3){
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_UART_RxCpltCallback+0x68>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d126      	bne.n	8001198 <HAL_UART_RxCpltCallback+0x60>
		if(character != 10){
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_UART_RxCpltCallback+0x6c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d009      	beq.n	8001166 <HAL_UART_RxCpltCallback+0x2e>
			input[index_arr++] = character;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_UART_RxCpltCallback+0x70>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	4913      	ldr	r1, [pc, #76]	; (80011a8 <HAL_UART_RxCpltCallback+0x70>)
 800115a:	600a      	str	r2, [r1, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_UART_RxCpltCallback+0x6c>)
 800115e:	7811      	ldrb	r1, [r2, #0]
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <HAL_UART_RxCpltCallback+0x74>)
 8001162:	54d1      	strb	r1, [r2, r3]
 8001164:	e016      	b.n	8001194 <HAL_UART_RxCpltCallback+0x5c>

		} else{
			input[index_arr++] = '\0';
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_UART_RxCpltCallback+0x70>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	490e      	ldr	r1, [pc, #56]	; (80011a8 <HAL_UART_RxCpltCallback+0x70>)
 800116e:	600a      	str	r2, [r1, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_UART_RxCpltCallback+0x74>)
 8001172:	2100      	movs	r1, #0
 8001174:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_UART_RxCpltCallback+0x70>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
//			strncpy(messages, input, sizeof(input));
			memcpy(messages, input, sizeof(input));
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <HAL_UART_RxCpltCallback+0x78>)
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_UART_RxCpltCallback+0x74>)
 8001180:	4614      	mov	r4, r2
 8001182:	461d      	mov	r5, r3
 8001184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	8023      	strh	r3, [r4, #0]
		}
		uart_rx_enable_it();
 8001194:	f7ff ffc2 	bl	800111c <uart_rx_enable_it>
	}
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bdb0      	pop	{r4, r5, r7, pc}
 80011a0:	40004800 	.word	0x40004800
 80011a4:	200005fa 	.word	0x200005fa
 80011a8:	200005fc 	.word	0x200005fc
 80011ac:	200005c8 	.word	0x200005c8
 80011b0:	20000594 	.word	0x20000594

080011b4 <HAL_GPIO_EXTI_Callback>:

int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1) { //button: PC1 for change LCD flag
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d11e      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
		if (HAL_GetTick() - last_time2 > 400){
 80011c4:	f000 faea 	bl	800179c <HAL_GetTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_GPIO_EXTI_Callback+0x58>)
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80011d4:	d915      	bls.n	8001202 <HAL_GPIO_EXTI_Callback+0x4e>
        if (flag == 1)
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d103      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x32>
        	flag = 0;
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_EXTI_Callback+0x38>
        else
        	flag = 1;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <HAL_GPIO_EXTI_Callback+0x60>)
 80011f2:	f001 ff71 	bl	80030d8 <HAL_GPIO_TogglePin>
		last_time2=HAL_GetTick();
 80011f6:	f000 fad1 	bl	800179c <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GPIO_EXTI_Callback+0x58>)
 8001200:	601a      	str	r2, [r3, #0]
		}
    }
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000600 	.word	0x20000600
 8001210:	20000014 	.word	0x20000014
 8001214:	48001000 	.word	0x48001000

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x44>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x44>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x44>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124e:	2007      	movs	r0, #7
 8001250:	f001 fcf8 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_ADC_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12c      	bne.n	80012dc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 8001288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800128c:	6153      	str	r3, [r2, #20]
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_ADC_MspInit+0x88>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PB13     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <HAL_ADC_MspInit+0x8c>)
 80012c8:	f001 fd74 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	202f      	movs	r0, #47	; 0x2f
 80012d2:	f001 fcc2 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80012d6:	202f      	movs	r0, #47	; 0x2f
 80012d8:	f001 fcdb 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	50000400 	.word	0x50000400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48000400 	.word	0x48000400

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x7c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d127      	bne.n	8001362 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800132a:	23c0      	movs	r3, #192	; 0xc0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133a:	2304      	movs	r3, #4
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_I2C_MspInit+0x84>)
 8001346:	f001 fd35 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_I2C_MspInit+0x80>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40005400 	.word	0x40005400
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_SPI_MspInit+0x7c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d128      	bne.n	80013ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_SPI_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80013ca:	23e0      	movs	r3, #224	; 0xe0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013da:	2305      	movs	r3, #5
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f001 fce4 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013000 	.word	0x40013000
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d113      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201c      	movs	r0, #28
 800142c:	f001 fc15 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001430:	201c      	movs	r0, #28
 8001432:	f001 fc2e 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_UART_MspInit+0x8c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d130      	bne.n	80014c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <HAL_UART_MspInit+0x90>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <HAL_UART_MspInit+0x90>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001470:	61d3      	str	r3, [r2, #28]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_UART_MspInit+0x90>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_UART_MspInit+0x90>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_UART_MspInit+0x90>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001488:	6153      	str	r3, [r2, #20]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_UART_MspInit+0x90>)
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001496:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a8:	2307      	movs	r3, #7
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_UART_MspInit+0x94>)
 80014b4:	f001 fc7e 	bl	8002db4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2027      	movs	r0, #39	; 0x27
 80014be:	f001 fbcc 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014c2:	2027      	movs	r0, #39	; 0x27
 80014c4:	f001 fbe5 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40004800 	.word	0x40004800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	48000400 	.word	0x48000400

080014dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_PCD_MspInit+0x80>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d129      	bne.n	8001552 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_PCD_MspInit+0x84>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a17      	ldr	r2, [pc, #92]	; (8001560 <HAL_PCD_MspInit+0x84>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_PCD_MspInit+0x84>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001516:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001528:	230e      	movs	r3, #14
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001536:	f001 fc3d 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_PCD_MspInit+0x84>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_PCD_MspInit+0x84>)
 8001540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_PCD_MspInit+0x84>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	; 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40005c00 	.word	0x40005c00
 8001560:	40021000 	.word	0x40021000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <NMI_Handler+0x4>

0800156a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <HardFault_Handler+0x4>

08001570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <MemManage_Handler+0x4>

08001576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <UsageFault_Handler+0x4>

08001582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b0:	f000 f8e0 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015bc:	2002      	movs	r0, #2
 80015be:	f001 fda5 	bl	800310c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM2_IRQHandler+0x10>)
 80015ce:	f003 fcd3 	bl	8004f78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200001d0 	.word	0x200001d0

080015dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART3_IRQHandler+0x10>)
 80015e2:	f004 f9c7 	bl	8005974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000021c 	.word	0x2000021c

080015f0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <ADC3_IRQHandler+0x10>)
 80015f6:	f000 fb03 	bl	8001c00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200000c8 	.word	0x200000c8

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f005 fb70 	bl	8006d18 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000a000 	.word	0x2000a000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000604 	.word	0x20000604
 800166c:	20000620 	.word	0x20000620

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x20>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <SystemInit+0x20>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff ffea 	bl	8001670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f005 fb2f 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016c6:	f7ff f9b7 	bl	8000a38 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80016d8:	08007730 	.word	0x08007730
  ldr r2, =_sbss
 80016dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80016e0:	2000061c 	.word	0x2000061c

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_Init+0x28>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_Init+0x28>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f001 faa3 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fd88 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fabb 	bl	8002cae <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f001 fa83 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000018 	.word	0x20000018
 800176c:	20000020 	.word	0x20000020
 8001770:	2000001c 	.word	0x2000001c

08001774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000020 	.word	0x20000020
 8001798:	20000608 	.word	0x20000608

0800179c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;  
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000608 	.word	0x20000608

080017b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000020 	.word	0x20000020

080017fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09a      	sub	sp, #104	; 0x68
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e1c9      	b.n	8001bd8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	d176      	bne.n	8001944 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b00      	cmp	r3, #0
 800185c:	d152      	bne.n	8001904 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fcf1 	bl	8001260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d13b      	bne.n	8001904 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 f8a3 	bl	80029d8 <ADC_Disable>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d12f      	bne.n	8001904 <HAL_ADC_Init+0xe0>
 80018a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d12b      	bne.n	8001904 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018b4:	f023 0302 	bic.w	r3, r3, #2
 80018b8:	f043 0202 	orr.w	r2, r3, #2
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018de:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018e0:	4b86      	ldr	r3, [pc, #536]	; (8001afc <HAL_ADC_Init+0x2d8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a86      	ldr	r2, [pc, #536]	; (8001b00 <HAL_ADC_Init+0x2dc>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	0c9a      	lsrs	r2, r3, #18
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f6:	e002      	b.n	80018fe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f9      	bne.n	80018f8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800191c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001920:	d110      	bne.n	8001944 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f023 0312 	bic.w	r3, r3, #18
 800192a:	f043 0210 	orr.w	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f043 0201 	orr.w	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 8136 	bne.w	8001bbe <HAL_ADC_Init+0x39a>
 8001952:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8131 	bne.w	8001bbe <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 8129 	bne.w	8001bbe <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001974:	f043 0202 	orr.w	r2, r3, #2
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001984:	d004      	beq.n	8001990 <HAL_ADC_Init+0x16c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a5e      	ldr	r2, [pc, #376]	; (8001b04 <HAL_ADC_Init+0x2e0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_ADC_Init+0x170>
 8001990:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_ADC_Init+0x2e4>)
 8001992:	e000      	b.n	8001996 <HAL_ADC_Init+0x172>
 8001994:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_ADC_Init+0x2e8>)
 8001996:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019a0:	d102      	bne.n	80019a8 <HAL_ADC_Init+0x184>
 80019a2:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_ADC_Init+0x2e0>)
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e01a      	b.n	80019de <HAL_ADC_Init+0x1ba>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a55      	ldr	r2, [pc, #340]	; (8001b04 <HAL_ADC_Init+0x2e0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d103      	bne.n	80019ba <HAL_ADC_Init+0x196>
 80019b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e011      	b.n	80019de <HAL_ADC_Init+0x1ba>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d102      	bne.n	80019ca <HAL_ADC_Init+0x1a6>
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_ADC_Init+0x2f0>)
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e009      	b.n	80019de <HAL_ADC_Init+0x1ba>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <HAL_ADC_Init+0x2f0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d102      	bne.n	80019da <HAL_ADC_Init+0x1b6>
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e001      	b.n	80019de <HAL_ADC_Init+0x1ba>
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d108      	bne.n	80019fe <HAL_ADC_Init+0x1da>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_Init+0x1da>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_Init+0x1dc>
 80019fe:	2300      	movs	r3, #0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d11c      	bne.n	8001a3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_ADC_Init+0x202>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Init+0x202>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_ADC_Init+0x204>
 8001a26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d108      	bne.n	8001a3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e5b      	ldrb	r3, [r3, #25]
 8001a42:	035b      	lsls	r3, r3, #13
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a48:	2a01      	cmp	r2, #1
 8001a4a:	d002      	beq.n	8001a52 <HAL_ADC_Init+0x22e>
 8001a4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a50:	e000      	b.n	8001a54 <HAL_ADC_Init+0x230>
 8001a52:	2200      	movs	r2, #0
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a64:	4313      	orrs	r3, r2
 8001a66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d11b      	bne.n	8001aaa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7e5b      	ldrb	r3, [r3, #25]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	045a      	lsls	r2, r3, #17
 8001a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a84:	4313      	orrs	r3, r2
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a8c:	e00d      	b.n	8001aaa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001a96:	f043 0220 	orr.w	r2, r3, #32
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d03a      	beq.n	8001b28 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_ADC_Init+0x2ec>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_Init+0x2a2>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_ADC_Init+0x2f0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d128      	bne.n	8001b18 <HAL_ADC_Init+0x2f4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ace:	d012      	beq.n	8001af6 <HAL_ADC_Init+0x2d2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad8:	d00a      	beq.n	8001af0 <HAL_ADC_Init+0x2cc>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ae2:	d002      	beq.n	8001aea <HAL_ADC_Init+0x2c6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	e018      	b.n	8001b1c <HAL_ADC_Init+0x2f8>
 8001aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aee:	e015      	b.n	8001b1c <HAL_ADC_Init+0x2f8>
 8001af0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001af4:	e012      	b.n	8001b1c <HAL_ADC_Init+0x2f8>
 8001af6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001afa:	e00f      	b.n	8001b1c <HAL_ADC_Init+0x2f8>
 8001afc:	20000018 	.word	0x20000018
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	50000100 	.word	0x50000100
 8001b08:	50000300 	.word	0x50000300
 8001b0c:	50000700 	.word	0x50000700
 8001b10:	50000400 	.word	0x50000400
 8001b14:	50000500 	.word	0x50000500
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b24:	4313      	orrs	r3, r2
 8001b26:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d114      	bne.n	8001b60 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b44:	f023 0302 	bic.w	r3, r3, #2
 8001b48:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7e1b      	ldrb	r3, [r3, #24]
 8001b4e:	039a      	lsls	r2, r3, #14
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <HAL_ADC_Init+0x3bc>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b70:	430b      	orrs	r3, r1
 8001b72:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10c      	bne.n	8001b96 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f023 010f 	bic.w	r1, r3, #15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
 8001b94:	e007      	b.n	8001ba6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 020f 	bic.w	r2, r2, #15
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f023 0303 	bic.w	r3, r3, #3
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40
 8001bbc:	e00a      	b.n	8001bd4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f023 0312 	bic.w	r3, r3, #18
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001bd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3768      	adds	r7, #104	; 0x68
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	fff0c007 	.word	0xfff0c007

08001be4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_ADC_IRQHandler+0x38>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80bc 	beq.w	8001dbc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80b6 	beq.w	8001dbc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d105      	bne.n	8001c68 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x7c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a90      	ldr	r2, [pc, #576]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d106      	bne.n	8001c8a <HAL_ADC_IRQHandler+0x8a>
 8001c7c:	4b8f      	ldr	r3, [pc, #572]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d03e      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001c88:	e005      	b.n	8001c96 <HAL_ADC_IRQHandler+0x96>
 8001c8a:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d037      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_IRQHandler+0xaa>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a84      	ldr	r2, [pc, #528]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d106      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0xb8>
 8001caa:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d027      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001cb6:	e005      	b.n	8001cc4 <HAL_ADC_IRQHandler+0xc4>
 8001cb8:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d020      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0xd8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a79      	ldr	r2, [pc, #484]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d106      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0xe6>
 8001cd8:	4b78      	ldr	r3, [pc, #480]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d010      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001ce4:	e005      	b.n	8001cf2 <HAL_ADC_IRQHandler+0xf2>
 8001ce6:	4b76      	ldr	r3, [pc, #472]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	d009      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x106>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a70      	ldr	r2, [pc, #448]	; (8001ec4 <HAL_ADC_IRQHandler+0x2c4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d104      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	e00f      	b.n	8001d30 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d18:	d004      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x124>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <HAL_ADC_IRQHandler+0x12a>
 8001d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d28:	e000      	b.n	8001d2c <HAL_ADC_IRQHandler+0x12c>
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_ADC_IRQHandler+0x2c4>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d137      	bne.n	8001dae <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d132      	bne.n	8001dae <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02d      	beq.n	8001dae <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d11a      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020c 	bic.w	r2, r2, #12
 8001d6e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d112      	bne.n	8001dae <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
 8001d94:	e00b      	b.n	8001dae <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0210 	orr.w	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0201 	orr.w	r2, r3, #1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f8ee 	bl	8000f90 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	220c      	movs	r2, #12
 8001dba:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d004      	beq.n	8001dd0 <HAL_ADC_IRQHandler+0x1d0>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8138 	beq.w	800204c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8132 	beq.w	800204c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dfc:	d004      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x208>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d106      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x216>
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03e      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e14:	e005      	b.n	8001e22 <HAL_ADC_IRQHandler+0x222>
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d037      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2a:	d004      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x236>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_IRQHandler+0x244>
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d027      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e42:	e005      	b.n	8001e50 <HAL_ADC_IRQHandler+0x250>
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d020      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e58:	d004      	beq.n	8001e64 <HAL_ADC_IRQHandler+0x264>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d106      	bne.n	8001e72 <HAL_ADC_IRQHandler+0x272>
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_ADC_IRQHandler+0x2bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d010      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e70:	e005      	b.n	8001e7e <HAL_ADC_IRQHandler+0x27e>
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_ADC_IRQHandler+0x2c0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2b09      	cmp	r3, #9
 8001e7c:	d009      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_IRQHandler+0x292>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_ADC_IRQHandler+0x2c4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d104      	bne.n	8001e9c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	e018      	b.n	8001ece <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x2b0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_ADC_IRQHandler+0x2b8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0x2c8>
 8001eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eb4:	e009      	b.n	8001eca <HAL_ADC_IRQHandler+0x2ca>
 8001eb6:	bf00      	nop
 8001eb8:	50000100 	.word	0x50000100
 8001ebc:	50000300 	.word	0x50000300
 8001ec0:	50000700 	.word	0x50000700
 8001ec4:	50000400 	.word	0x50000400
 8001ec8:	4b92      	ldr	r3, [pc, #584]	; (8002114 <HAL_ADC_IRQHandler+0x514>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 80b0 	bne.w	800203e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 80a3 	bne.w	800203e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 809d 	bne.w	800203e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8097 	beq.w	800203e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f18:	d004      	beq.n	8001f24 <HAL_ADC_IRQHandler+0x324>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a7e      	ldr	r2, [pc, #504]	; (8002118 <HAL_ADC_IRQHandler+0x518>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_IRQHandler+0x332>
 8001f24:	4b7d      	ldr	r3, [pc, #500]	; (800211c <HAL_ADC_IRQHandler+0x51c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03e      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f30:	e005      	b.n	8001f3e <HAL_ADC_IRQHandler+0x33e>
 8001f32:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_ADC_IRQHandler+0x520>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d037      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f46:	d004      	beq.n	8001f52 <HAL_ADC_IRQHandler+0x352>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_ADC_IRQHandler+0x518>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d106      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x360>
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <HAL_ADC_IRQHandler+0x51c>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d027      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f5e:	e005      	b.n	8001f6c <HAL_ADC_IRQHandler+0x36c>
 8001f60:	4b6f      	ldr	r3, [pc, #444]	; (8002120 <HAL_ADC_IRQHandler+0x520>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d020      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f74:	d004      	beq.n	8001f80 <HAL_ADC_IRQHandler+0x380>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a67      	ldr	r2, [pc, #412]	; (8002118 <HAL_ADC_IRQHandler+0x518>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d106      	bne.n	8001f8e <HAL_ADC_IRQHandler+0x38e>
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_ADC_IRQHandler+0x51c>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2b07      	cmp	r3, #7
 8001f8a:	d010      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f8c:	e005      	b.n	8001f9a <HAL_ADC_IRQHandler+0x39a>
 8001f8e:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_ADC_IRQHandler+0x520>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2b07      	cmp	r3, #7
 8001f98:	d009      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa2:	d004      	beq.n	8001fae <HAL_ADC_IRQHandler+0x3ae>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	; (8002114 <HAL_ADC_IRQHandler+0x514>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d104      	bne.n	8001fb8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e00f      	b.n	8001fd8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fc0:	d004      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x3cc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_ADC_IRQHandler+0x518>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0x3d2>
 8001fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fd0:	e000      	b.n	8001fd4 <HAL_ADC_IRQHandler+0x3d4>
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_ADC_IRQHandler+0x514>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d12d      	bne.n	800203e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11a      	bne.n	8002026 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ffe:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d112      	bne.n	800203e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
 8002024:	e00b      	b.n	800203e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8c4 	bl	80021cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2260      	movs	r2, #96	; 0x60
 800204a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	d011      	beq.n	800207a <HAL_ADC_IRQHandler+0x47a>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00c      	beq.n	800207a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fbc5 	bl	80017fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d012      	beq.n	80020aa <HAL_ADC_IRQHandler+0x4aa>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00d      	beq.n	80020aa <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8aa 	bl	80021f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d012      	beq.n	80020da <HAL_ADC_IRQHandler+0x4da>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f89c 	bl	8002208 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d04f      	beq.n	8002184 <HAL_ADC_IRQHandler+0x584>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04a      	beq.n	8002184 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e02d      	b.n	8002158 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002104:	d004      	beq.n	8002110 <HAL_ADC_IRQHandler+0x510>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_ADC_IRQHandler+0x518>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d109      	bne.n	8002124 <HAL_ADC_IRQHandler+0x524>
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_ADC_IRQHandler+0x51c>)
 8002112:	e008      	b.n	8002126 <HAL_ADC_IRQHandler+0x526>
 8002114:	50000400 	.word	0x50000400
 8002118:	50000100 	.word	0x50000100
 800211c:	50000300 	.word	0x50000300
 8002120:	50000700 	.word	0x50000700
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_ADC_IRQHandler+0x5c8>)
 8002126:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10a      	bne.n	8002158 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e007      	b.n	8002158 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002154:	2301      	movs	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10e      	bne.n	800217c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fb4a 	bl	8001810 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2210      	movs	r2, #16
 8002182:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d018      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x5c0>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a8:	f043 0208 	orr.w	r2, r3, #8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f810 	bl	80021e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	50000700 	.word	0x50000700

080021cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800221c:	b480      	push	{r7}
 800221e:	b09b      	sub	sp, #108	; 0x6c
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x22>
 800223a:	2302      	movs	r3, #2
 800223c:	e2ca      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5b8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f040 82ae 	bne.w	80027b2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b04      	cmp	r3, #4
 800225c:	d81c      	bhi.n	8002298 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	461a      	mov	r2, r3
 8002272:	231f      	movs	r3, #31
 8002274:	4093      	lsls	r3, r2
 8002276:	43db      	mvns	r3, r3
 8002278:	4019      	ands	r1, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
 8002296:	e063      	b.n	8002360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d81e      	bhi.n	80022de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	221f      	movs	r2, #31
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	4019      	ands	r1, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6818      	ldr	r0, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
 80022dc:	e040      	b.n	8002360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b0e      	cmp	r3, #14
 80022e4:	d81e      	bhi.n	8002324 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	3b3c      	subs	r3, #60	; 0x3c
 80022fa:	221f      	movs	r2, #31
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3b3c      	subs	r3, #60	; 0x3c
 8002316:	fa00 f203 	lsl.w	r2, r0, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
 8002322:	e01d      	b.n	8002360 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	3b5a      	subs	r3, #90	; 0x5a
 8002338:	221f      	movs	r2, #31
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	4019      	ands	r1, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	3b5a      	subs	r3, #90	; 0x5a
 8002354:	fa00 f203 	lsl.w	r2, r0, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 80e5 	bne.w	800253a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b09      	cmp	r3, #9
 8002376:	d91c      	bls.n	80023b2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	3b1e      	subs	r3, #30
 800238a:	2207      	movs	r2, #7
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	4019      	ands	r1, r3
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6898      	ldr	r0, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	3b1e      	subs	r3, #30
 80023a4:	fa00 f203 	lsl.w	r2, r0, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	619a      	str	r2, [r3, #24]
 80023b0:	e019      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6959      	ldr	r1, [r3, #20]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	4019      	ands	r1, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6898      	ldr	r0, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	fa00 f203 	lsl.w	r2, r0, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	08db      	lsrs	r3, r3, #3
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	3b01      	subs	r3, #1
 8002404:	2b03      	cmp	r3, #3
 8002406:	d84f      	bhi.n	80024a8 <HAL_ADC_ConfigChannel+0x28c>
 8002408:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <HAL_ADC_ConfigChannel+0x1f4>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002421 	.word	0x08002421
 8002414:	08002443 	.word	0x08002443
 8002418:	08002465 	.word	0x08002465
 800241c:	08002487 	.word	0x08002487
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002426:	4b9a      	ldr	r3, [pc, #616]	; (8002690 <HAL_ADC_ConfigChannel+0x474>)
 8002428:	4013      	ands	r3, r2
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	0691      	lsls	r1, r2, #26
 8002430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002432:	430a      	orrs	r2, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800243e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002440:	e07e      	b.n	8002540 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002448:	4b91      	ldr	r3, [pc, #580]	; (8002690 <HAL_ADC_ConfigChannel+0x474>)
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	0691      	lsls	r1, r2, #26
 8002452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002454:	430a      	orrs	r2, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002460:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002462:	e06d      	b.n	8002540 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_ADC_ConfigChannel+0x474>)
 800246c:	4013      	ands	r3, r2
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	0691      	lsls	r1, r2, #26
 8002474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002476:	430a      	orrs	r2, r1
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002482:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002484:	e05c      	b.n	8002540 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_ADC_ConfigChannel+0x474>)
 800248e:	4013      	ands	r3, r2
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	0691      	lsls	r1, r2, #26
 8002496:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002498:	430a      	orrs	r2, r1
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024a4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024a6:	e04b      	b.n	8002540 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	069b      	lsls	r3, r3, #26
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002512:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	429a      	cmp	r2, r3
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002536:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002538:	e001      	b.n	800253e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <HAL_ADC_ConfigChannel+0x324>
      break;
 800253e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d108      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x344>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x344>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_ADC_ConfigChannel+0x346>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 8130 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d00f      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	400a      	ands	r2, r1
 800258a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800258e:	e049      	b.n	8002624 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d91c      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6999      	ldr	r1, [r3, #24]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	4413      	add	r3, r2
 80025c2:	3b1b      	subs	r3, #27
 80025c4:	2207      	movs	r2, #7
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4019      	ands	r1, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6898      	ldr	r0, [r3, #8]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	3b1b      	subs	r3, #27
 80025de:	fa00 f203 	lsl.w	r2, r0, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	e01b      	b.n	8002624 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	2207      	movs	r2, #7
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	4019      	ands	r1, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6898      	ldr	r0, [r3, #8]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800262c:	d004      	beq.n	8002638 <HAL_ADC_ConfigChannel+0x41c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_ADC_ConfigChannel+0x478>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x420>
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_ADC_ConfigChannel+0x47c>)
 800263a:	e000      	b.n	800263e <HAL_ADC_ConfigChannel+0x422>
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <HAL_ADC_ConfigChannel+0x480>)
 800263e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b10      	cmp	r3, #16
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002658:	2b11      	cmp	r3, #17
 800265a:	d105      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800265c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800266c:	2b12      	cmp	r3, #18
 800266e:	f040 80ab 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	f040 80a4 	bne.w	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002688:	d10a      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x484>
 800268a:	4b02      	ldr	r3, [pc, #8]	; (8002694 <HAL_ADC_ConfigChannel+0x478>)
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e022      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4ba>
 8002690:	83fff000 	.word	0x83fff000
 8002694:	50000100 	.word	0x50000100
 8002698:	50000300 	.word	0x50000300
 800269c:	50000700 	.word	0x50000700
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <HAL_ADC_ConfigChannel+0x5c4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d103      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x496>
 80026aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e011      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4ba>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x4a6>
 80026bc:	4b4a      	ldr	r3, [pc, #296]	; (80027e8 <HAL_ADC_ConfigChannel+0x5cc>)
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e009      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4ba>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_ADC_ConfigChannel+0x5cc>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d102      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x4b6>
 80026cc:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e001      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4ba>
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4da>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x4da>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x4dc>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d150      	bne.n	800279e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_ADC_ConfigChannel+0x502>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x502>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_ADC_ConfigChannel+0x504>
 800271e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	d13c      	bne.n	800279e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b10      	cmp	r3, #16
 800272a:	d11d      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x54c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002734:	d118      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_ADC_ConfigChannel+0x5d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9a      	lsrs	r2, r3, #18
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002758:	e002      	b.n	8002760 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002766:	e02e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b11      	cmp	r3, #17
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x56c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002778:	d106      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800277a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002786:	e01e      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b12      	cmp	r3, #18
 800278e:	d11a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800279c:	e013      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f043 0220 	orr.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027b0:	e00a      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	376c      	adds	r7, #108	; 0x6c
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	50000100 	.word	0x50000100
 80027e4:	50000400 	.word	0x50000400
 80027e8:	50000500 	.word	0x50000500
 80027ec:	20000018 	.word	0x20000018
 80027f0:	431bde83 	.word	0x431bde83

080027f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b099      	sub	sp, #100	; 0x64
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280c:	d102      	bne.n	8002814 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800280e:	4b6d      	ldr	r3, [pc, #436]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	e01a      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d103      	bne.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800281e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	e011      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a67      	ldr	r2, [pc, #412]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d102      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002830:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	e009      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a64      	ldr	r2, [pc, #400]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d102      	bne.n	8002846 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	e001      	b.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b0      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d101      	bne.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800285e:	2302      	movs	r3, #2
 8002860:	e0a9      	b.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 808d 	bne.w	8002994 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 8086 	bne.w	8002994 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002890:	d004      	beq.n	800289c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800289e:	e000      	b.n	80028a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028a0:	4b4c      	ldr	r3, [pc, #304]	; (80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80028a2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d040      	beq.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028be:	035b      	lsls	r3, r3, #13
 80028c0:	430b      	orrs	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80028e8:	2300      	movs	r3, #0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d15c      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800290a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	d14b      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002910:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002918:	f023 030f 	bic.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6811      	ldr	r1, [r2, #0]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6892      	ldr	r2, [r2, #8]
 8002924:	430a      	orrs	r2, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800292c:	e03c      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002938:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d108      	bne.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800295a:	2300      	movs	r3, #0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d123      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800297c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800297e:	2b00      	cmp	r3, #0
 8002980:	d112      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800298a:	f023 030f 	bic.w	r3, r3, #15
 800298e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002990:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002992:	e009      	b.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0220 	orr.w	r2, r3, #32
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029a6:	e000      	b.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80029b6:	4618      	mov	r0, r3
 80029b8:	3764      	adds	r7, #100	; 0x64
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	50000100 	.word	0x50000100
 80029c8:	50000400 	.word	0x50000400
 80029cc:	50000500 	.word	0x50000500
 80029d0:	50000300 	.word	0x50000300
 80029d4:	50000700 	.word	0x50000700

080029d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <ADC_Disable+0x2c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <ADC_Disable+0x2c>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <ADC_Disable+0x2e>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d047      	beq.n	8002a9a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030d 	and.w	r3, r3, #13
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d10f      	bne.n	8002a38 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0202 	orr.w	r2, r2, #2
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a30:	f7fe feb4 	bl	800179c <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a36:	e029      	b.n	8002a8c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e023      	b.n	8002a9c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a54:	f7fe fea2 	bl	800179c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d914      	bls.n	8002a8c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0210 	orr.w	r2, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d0dc      	beq.n	8002a54 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4907      	ldr	r1, [pc, #28]	; (8002b40 <__NVIC_EnableIRQ+0x38>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff8e 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff29 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff3e 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff8e 	bl	8002b98 <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff31 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d008      	beq.n	8002cea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e020      	b.n	8002d2c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 020e 	bic.w	r2, r2, #14
 8002cf8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0201 	bic.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f202 	lsl.w	r2, r1, r2
 8002d18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d005      	beq.n	8002d5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e027      	b.n	8002daa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 020e 	bic.w	r2, r2, #14
 8002d68:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
    } 
  }
  return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e154      	b.n	800306e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8146 	beq.w	8003068 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d005      	beq.n	8002df4 <HAL_GPIO_Init+0x40>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d130      	bne.n	8002e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0201 	and.w	r2, r3, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d017      	beq.n	8002e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d123      	bne.n	8002ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80a0 	beq.w	8003068 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f28:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b55      	ldr	r3, [pc, #340]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f40:	4a53      	ldr	r2, [pc, #332]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f6a:	d019      	beq.n	8002fa0 <HAL_GPIO_Init+0x1ec>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_GPIO_Init+0x2e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x1e8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x2e4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x1e0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a46      	ldr	r2, [pc, #280]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_GPIO_Init+0x1dc>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e008      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f90:	2305      	movs	r3, #5
 8002f92:	e006      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f94:	2303      	movs	r3, #3
 8002f96:	e004      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc0:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fe4:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800300e:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003038:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f aea3 	bne.w	8002dc4 <HAL_GPIO_Init+0x10>
  }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000
 8003094:	48000400 	.word	0x48000400
 8003098:	48000800 	.word	0x48000800
 800309c:	48000c00 	.word	0x48000c00
 80030a0:	48001000 	.word	0x48001000
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	041a      	lsls	r2, r3, #16
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43d9      	mvns	r1, r3
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	400b      	ands	r3, r1
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f842 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e081      	b.n	8003252 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f8c4 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e006      	b.n	80031c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d104      	bne.n	80031d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1a      	ldr	r2, [r3, #32]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	d138      	bne.n	80032e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800327a:	2302      	movs	r3, #2
 800327c:	e032      	b.n	80032e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2224      	movs	r2, #36	; 0x24
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	e000      	b.n	80032e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
  }
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b20      	cmp	r3, #32
 8003304:	d139      	bne.n	800337a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003310:	2302      	movs	r3, #2
 8003312:	e033      	b.n	800337c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003342:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b08b      	sub	sp, #44	; 0x2c
 800338c:	af06      	add	r7, sp, #24
 800338e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0c4      	b.n	8003524 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fe f894 	bl	80014dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2203      	movs	r2, #3
 80033b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fc6d 	bl	8006ca0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
 80033ca:	e040      	b.n	800344e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	440b      	add	r3, r1
 80033dc:	3301      	adds	r3, #1
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	3303      	adds	r3, #3
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3338      	adds	r3, #56	; 0x38
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	333c      	adds	r3, #60	; 0x3c
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	3340      	adds	r3, #64	; 0x40
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	3301      	adds	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d3b9      	bcc.n	80033cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e044      	b.n	80034e8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	3301      	adds	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d3b5      	bcc.n	800345e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	687e      	ldr	r6, [r7, #4]
 80034fa:	466d      	mov	r5, sp
 80034fc:	f106 0410 	add.w	r4, r6, #16
 8003500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	602b      	str	r3, [r5, #0]
 8003508:	1d33      	adds	r3, r6, #4
 800350a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	f003 fbe2 	bl	8006cd6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800352c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003532:	af00      	add	r7, sp, #0
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800353c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f001 b823 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 817d 	beq.w	8003862 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003568:	4bbc      	ldr	r3, [pc, #752]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b04      	cmp	r3, #4
 8003572:	d00c      	beq.n	800358e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003574:	4bb9      	ldr	r3, [pc, #740]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d15c      	bne.n	800363a <HAL_RCC_OscConfig+0x10e>
 8003580:	4bb6      	ldr	r3, [pc, #728]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d155      	bne.n	800363a <HAL_RCC_OscConfig+0x10e>
 800358e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003592:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a6:	fab3 f383 	clz	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_RCC_OscConfig+0x94>
 80035ba:	4ba8      	ldr	r3, [pc, #672]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	e015      	b.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80035d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80035dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80035e8:	4b9c      	ldr	r3, [pc, #624]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80035f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80035f8:	fa92 f2a2 	rbit	r2, r2
 80035fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003600:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	f042 0220 	orr.w	r2, r2, #32
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f002 021f 	and.w	r2, r2, #31
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 811f 	beq.w	8003860 <HAL_RCC_OscConfig+0x334>
 8003622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003626:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f040 8116 	bne.w	8003860 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f000 bfaf 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x12e>
 800364c:	4b83      	ldr	r3, [pc, #524]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a82      	ldr	r2, [pc, #520]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	e036      	b.n	80036c8 <HAL_RCC_OscConfig+0x19c>
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x158>
 800366a:	4b7c      	ldr	r3, [pc, #496]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a7b      	ldr	r2, [pc, #492]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b79      	ldr	r3, [pc, #484]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a78      	ldr	r2, [pc, #480]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800367c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e021      	b.n	80036c8 <HAL_RCC_OscConfig+0x19c>
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x184>
 8003696:	4b71      	ldr	r3, [pc, #452]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a70      	ldr	r2, [pc, #448]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b6e      	ldr	r3, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6d      	ldr	r2, [pc, #436]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0x19c>
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c8:	4b64      	ldr	r3, [pc, #400]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f023 020f 	bic.w	r2, r3, #15
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	495f      	ldr	r1, [pc, #380]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d059      	beq.n	80037a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe f853 	bl	800179c <HAL_GetTick>
 80036f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe f84e 	bl	800179c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b64      	cmp	r3, #100	; 0x64
 800370a:	d902      	bls.n	8003712 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	f000 bf43 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 8003712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003716:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003726:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d102      	bne.n	8003744 <HAL_RCC_OscConfig+0x218>
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e015      	b.n	8003770 <HAL_RCC_OscConfig+0x244>
 8003744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003748:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003758:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003760:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800376c:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x330>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003774:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003778:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800377c:	fa92 f2a2 	rbit	r2, r2
 8003780:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003784:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ab      	beq.n	80036fc <HAL_RCC_OscConfig+0x1d0>
 80037a4:	e05d      	b.n	8003862 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fd fff9 	bl	800179c <HAL_GetTick>
 80037aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd fff4 	bl	800179c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	; 0x64
 80037be:	d902      	bls.n	80037c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f000 bee9 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 80037c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80037da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	fab3 f383 	clz	r3, r3
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2cc>
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_RCC_OscConfig+0x330>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	e015      	b.n	8003824 <HAL_RCC_OscConfig+0x2f8>
 80037f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003804:	fa93 f3a3 	rbit	r3, r3
 8003808:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800380c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003810:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003814:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <HAL_RCC_OscConfig+0x330>)
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003828:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800382c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003830:	fa92 f2a2 	rbit	r2, r2
 8003834:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003838:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f042 0220 	orr.w	r2, r2, #32
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	f002 021f 	and.w	r2, r2, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ab      	bne.n	80037b0 <HAL_RCC_OscConfig+0x284>
 8003858:	e003      	b.n	8003862 <HAL_RCC_OscConfig+0x336>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 817d 	beq.w	8003b72 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003878:	4ba6      	ldr	r3, [pc, #664]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003884:	4ba3      	ldr	r3, [pc, #652]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b08      	cmp	r3, #8
 800388e:	d172      	bne.n	8003976 <HAL_RCC_OscConfig+0x44a>
 8003890:	4ba0      	ldr	r3, [pc, #640]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d16c      	bne.n	8003976 <HAL_RCC_OscConfig+0x44a>
 800389c:	2302      	movs	r3, #2
 800389e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80038ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d102      	bne.n	80038cc <HAL_RCC_OscConfig+0x3a0>
 80038c6:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	e013      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
 80038cc:	2302      	movs	r3, #2
 80038ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80038de:	2302      	movs	r3, #2
 80038e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80038e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038f0:	4b88      	ldr	r3, [pc, #544]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2202      	movs	r2, #2
 80038f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80038fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80038fe:	fa92 f2a2 	rbit	r2, r2
 8003902:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003906:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCC_OscConfig+0x410>
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d002      	beq.n	800393c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f000 be2e 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393c:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	21f8      	movs	r1, #248	; 0xf8
 8003952:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003956:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800395a:	fa91 f1a1 	rbit	r1, r1
 800395e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003962:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003966:	fab1 f181 	clz	r1, r1
 800396a:	b2c9      	uxtb	r1, r1
 800396c:	408b      	lsls	r3, r1
 800396e:	4969      	ldr	r1, [pc, #420]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003974:	e0fd      	b.n	8003b72 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8088 	beq.w	8003a98 <HAL_RCC_OscConfig+0x56c>
 8003988:	2301      	movs	r3, #1
 800398a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800399a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	461a      	mov	r2, r3
 80039b0:	2301      	movs	r3, #1
 80039b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd fef2 	bl	800179c <HAL_GetTick>
 80039b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e00a      	b.n	80039d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd feed 	bl	800179c <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d902      	bls.n	80039d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	f000 bde2 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80039de:	fa93 f3a3 	rbit	r3, r3
 80039e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80039e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d102      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d8>
 80039fe:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	e013      	b.n	8003a2c <HAL_RCC_OscConfig+0x500>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a16:	2302      	movs	r3, #2
 8003a18:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a1c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a32:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a36:	fa92 f2a2 	rbit	r2, r2
 8003a3a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a3e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a42:	fab2 f282 	clz	r2, r2
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f042 0220 	orr.w	r2, r2, #32
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	f002 021f 	and.w	r2, r2, #31
 8003a52:	2101      	movs	r1, #1
 8003a54:	fa01 f202 	lsl.w	r2, r1, r2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0af      	beq.n	80039be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	21f8      	movs	r1, #248	; 0xf8
 8003a74:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a7c:	fa91 f1a1 	rbit	r1, r1
 8003a80:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a84:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a88:	fab1 f181 	clz	r1, r1
 8003a8c:	b2c9      	uxtb	r1, r1
 8003a8e:	408b      	lsls	r3, r1
 8003a90:	4920      	ldr	r1, [pc, #128]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
 8003a96:	e06c      	b.n	8003b72 <HAL_RCC_OscConfig+0x646>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003aaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fe6a 	bl	800179c <HAL_GetTick>
 8003ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fd fe65 	bl	800179c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d902      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f000 bd5a 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d104      	bne.n	8003b18 <HAL_RCC_OscConfig+0x5ec>
 8003b0e:	4b01      	ldr	r3, [pc, #4]	; (8003b14 <HAL_RCC_OscConfig+0x5e8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	e015      	b.n	8003b40 <HAL_RCC_OscConfig+0x614>
 8003b14:	40021000 	.word	0x40021000
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b3c:	4bc8      	ldr	r3, [pc, #800]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	2202      	movs	r2, #2
 8003b42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b4a:	fa92 f2a2 	rbit	r2, r2
 8003b4e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b52:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ad      	bne.n	8003ace <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8110 	beq.w	8003da8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d079      	beq.n	8003c8c <HAL_RCC_OscConfig+0x760>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4bab      	ldr	r3, [pc, #684]	; (8003e64 <HAL_RCC_OscConfig+0x938>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fd fdeb 	bl	800179c <HAL_GetTick>
 8003bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fde6 	bl	800179c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d902      	bls.n	8003be2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	f000 bcdb 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 8003be2:	2302      	movs	r3, #2
 8003be4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	fa93 f2a3 	rbit	r2, r3
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c20:	2202      	movs	r2, #2
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	fa93 f2a3 	rbit	r2, r3
 8003c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003c3a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3c:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c48:	2102      	movs	r1, #2
 8003c4a:	6019      	str	r1, [r3, #0]
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f1a3 	rbit	r1, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c62:	6019      	str	r1, [r3, #0]
  return result;
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0a0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x6a0>
 8003c8a:	e08d      	b.n	8003da8 <HAL_RCC_OscConfig+0x87c>
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	fa93 f2a3 	rbit	r2, r3
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cae:	601a      	str	r2, [r3, #0]
  return result;
 8003cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003cb8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cba:	fab3 f383 	clz	r3, r3
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b68      	ldr	r3, [pc, #416]	; (8003e64 <HAL_RCC_OscConfig+0x938>)
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	461a      	mov	r2, r3
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fd65 	bl	800179c <HAL_GetTick>
 8003cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fd fd60 	bl	800179c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d902      	bls.n	8003cee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	f000 bc55 	b.w	8004598 <HAL_RCC_OscConfig+0x106c>
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	fa93 f2a3 	rbit	r2, r3
 8003d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d3e:	2202      	movs	r2, #2
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003d58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d66:	2102      	movs	r1, #2
 8003d68:	6019      	str	r1, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fa93 f1a3 	rbit	r1, r3
 8003d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d80:	6019      	str	r1, [r3, #0]
  return result;
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d197      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 81a1 	beq.w	8004100 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d116      	bne.n	8003dfe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a22      	ldr	r2, [pc, #136]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	61d3      	str	r3, [r2, #28]
 8003ddc:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003df6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_RCC_OscConfig+0x93c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11a      	bne.n	8003e40 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_RCC_OscConfig+0x93c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <HAL_RCC_OscConfig+0x93c>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fd fcc1 	bl	800179c <HAL_GetTick>
 8003e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	e009      	b.n	8003e34 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fd fcbc 	bl	800179c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e3b1      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <HAL_RCC_OscConfig+0x93c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0ef      	beq.n	8003e20 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCC_OscConfig+0x940>
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4a02      	ldr	r2, [pc, #8]	; (8003e60 <HAL_RCC_OscConfig+0x934>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6213      	str	r3, [r2, #32]
 8003e5c:	e03c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x9ac>
 8003e5e:	bf00      	nop
 8003e60:	40021000 	.word	0x40021000
 8003e64:	10908120 	.word	0x10908120
 8003e68:	40007000 	.word	0x40007000
 8003e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0x96a>
 8003e7c:	4bc1      	ldr	r3, [pc, #772]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4ac0      	ldr	r2, [pc, #768]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6213      	str	r3, [r2, #32]
 8003e88:	4bbe      	ldr	r3, [pc, #760]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4abd      	ldr	r2, [pc, #756]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003e8e:	f023 0304 	bic.w	r3, r3, #4
 8003e92:	6213      	str	r3, [r2, #32]
 8003e94:	e020      	b.n	8003ed8 <HAL_RCC_OscConfig+0x9ac>
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b05      	cmp	r3, #5
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x994>
 8003ea6:	4bb7      	ldr	r3, [pc, #732]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4ab6      	ldr	r2, [pc, #728]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003eac:	f043 0304 	orr.w	r3, r3, #4
 8003eb0:	6213      	str	r3, [r2, #32]
 8003eb2:	4bb4      	ldr	r3, [pc, #720]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4ab3      	ldr	r2, [pc, #716]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x9ac>
 8003ec0:	4bb0      	ldr	r3, [pc, #704]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4aaf      	ldr	r2, [pc, #700]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6213      	str	r3, [r2, #32]
 8003ecc:	4bad      	ldr	r3, [pc, #692]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4aac      	ldr	r2, [pc, #688]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003ed2:	f023 0304 	bic.w	r3, r3, #4
 8003ed6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8081 	beq.w	8003fec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fd fc57 	bl	800179c <HAL_GetTick>
 8003eee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fc52 	bl	800179c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e345      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	fa93 f2a3 	rbit	r2, r3
 8003f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f38:	2202      	movs	r2, #2
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f52:	601a      	str	r2, [r3, #0]
  return result;
 8003f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003f5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d102      	bne.n	8003f78 <HAL_RCC_OscConfig+0xa4c>
 8003f72:	4b84      	ldr	r3, [pc, #528]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	e013      	b.n	8003fa0 <HAL_RCC_OscConfig+0xa74>
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f80:	2202      	movs	r2, #2
 8003f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	fa93 f2a3 	rbit	r2, r3
 8003f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	4b79      	ldr	r3, [pc, #484]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003fa8:	2102      	movs	r1, #2
 8003faa:	6011      	str	r1, [r2, #0]
 8003fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	fa92 f1a2 	rbit	r1, r2
 8003fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003fc2:	6011      	str	r1, [r2, #0]
  return result;
 8003fc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fc8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	fab2 f282 	clz	r2, r2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f002 021f 	and.w	r2, r2, #31
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d084      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x9c8>
 8003fea:	e07f      	b.n	80040ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fd fbd6 	bl	800179c <HAL_GetTick>
 8003ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff4:	e00b      	b.n	800400e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fd fbd1 	bl	800179c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e2c4      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004016:	2202      	movs	r2, #2
 8004018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	fa93 f2a3 	rbit	r2, r3
 8004028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800403a:	2202      	movs	r2, #2
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	fa93 f2a3 	rbit	r2, r3
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004054:	601a      	str	r2, [r3, #0]
  return result;
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800405e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d102      	bne.n	800407a <HAL_RCC_OscConfig+0xb4e>
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	e013      	b.n	80040a2 <HAL_RCC_OscConfig+0xb76>
 800407a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004082:	2202      	movs	r2, #2
 8004084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	fa93 f2a3 	rbit	r2, r3
 8004094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004098:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80040aa:	2102      	movs	r1, #2
 80040ac:	6011      	str	r1, [r2, #0]
 80040ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	fa92 f1a2 	rbit	r1, r2
 80040bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80040c4:	6011      	str	r1, [r2, #0]
  return result;
 80040c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	fab2 f282 	clz	r2, r2
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f002 021f 	and.w	r2, r2, #31
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f202 	lsl.w	r2, r1, r2
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d184      	bne.n	8003ff6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8242 	beq.w	8004596 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <HAL_RCC_OscConfig+0xc58>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b08      	cmp	r3, #8
 800411c:	f000 8213 	beq.w	8004546 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004124:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	2b02      	cmp	r3, #2
 800412e:	f040 8162 	bne.w	80043f6 <HAL_RCC_OscConfig+0xeca>
 8004132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004136:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800413a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800413e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004160:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800416c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fb10 	bl	800179c <HAL_GetTick>
 800417c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004180:	e00c      	b.n	800419c <HAL_RCC_OscConfig+0xc70>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004188:	f7fd fb08 	bl	800179c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1fd      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
 800419c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	fa93 f2a3 	rbit	r2, r3
 80041b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041c0:	601a      	str	r2, [r3, #0]
  return result;
 80041c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80041ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_RCC_OscConfig+0xcba>
 80041e0:	4bb0      	ldr	r3, [pc, #704]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	e027      	b.n	8004236 <HAL_RCC_OscConfig+0xd0a>
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	fa93 f2a3 	rbit	r2, r3
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004210:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	fa93 f2a3 	rbit	r2, r3
 8004228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	4b9c      	ldr	r3, [pc, #624]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800423a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800423e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004242:	6011      	str	r1, [r2, #0]
 8004244:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004248:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	fa92 f1a2 	rbit	r1, r2
 8004252:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004256:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800425a:	6011      	str	r1, [r2, #0]
  return result;
 800425c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004260:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	fab2 f282 	clz	r2, r2
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f042 0220 	orr.w	r2, r2, #32
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	f002 021f 	and.w	r2, r2, #31
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f202 	lsl.w	r2, r1, r2
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d182      	bne.n	8004188 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004282:	4b88      	ldr	r3, [pc, #544]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800428a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	430b      	orrs	r3, r1
 80042a4:	497f      	ldr	r1, [pc, #508]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
 80042aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80042b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80042ce:	601a      	str	r2, [r3, #0]
  return result;
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80042d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	461a      	mov	r2, r3
 80042ec:	2301      	movs	r3, #1
 80042ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fd fa54 	bl	800179c <HAL_GetTick>
 80042f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042f8:	e009      	b.n	800430e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fa:	f7fd fa4f 	bl	800179c <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e144      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800431a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004320:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	fa93 f2a3 	rbit	r2, r3
 800432a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004332:	601a      	str	r2, [r3, #0]
  return result;
 8004334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004338:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800433c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d102      	bne.n	8004358 <HAL_RCC_OscConfig+0xe2c>
 8004352:	4b54      	ldr	r3, [pc, #336]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	e027      	b.n	80043a8 <HAL_RCC_OscConfig+0xe7c>
 8004358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004378:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004382:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004390:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fa93 f2a3 	rbit	r2, r3
 800439a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80043b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	fa92 f1a2 	rbit	r1, r2
 80043c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80043cc:	6011      	str	r1, [r2, #0]
  return result;
 80043ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80043d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	fab2 f282 	clz	r2, r2
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	f042 0220 	orr.w	r2, r2, #32
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f002 021f 	and.w	r2, r2, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d082      	beq.n	80042fa <HAL_RCC_OscConfig+0xdce>
 80043f4:	e0cf      	b.n	8004596 <HAL_RCC_OscConfig+0x106a>
 80043f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80043fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004408:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	fa93 f2a3 	rbit	r2, r3
 8004412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004416:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800441a:	601a      	str	r2, [r3, #0]
  return result;
 800441c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004420:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004424:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004430:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	461a      	mov	r2, r3
 8004438:	2300      	movs	r3, #0
 800443a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd f9ae 	bl	800179c <HAL_GetTick>
 8004440:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004444:	e009      	b.n	800445a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fd f9a9 	bl	800179c <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e09e      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
 800445a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800446c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	fa93 f2a3 	rbit	r2, r3
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800447e:	601a      	str	r2, [r3, #0]
  return result;
 8004480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004484:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004488:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d104      	bne.n	80044a8 <HAL_RCC_OscConfig+0xf7c>
 800449e:	4b01      	ldr	r3, [pc, #4]	; (80044a4 <HAL_RCC_OscConfig+0xf78>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	e029      	b.n	80044f8 <HAL_RCC_OscConfig+0xfcc>
 80044a4:	40021000 	.word	0x40021000
 80044a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80044b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	fa93 f2a3 	rbit	r2, r3
 80044c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80044d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <HAL_RCC_OscConfig+0x1078>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800450a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	fa92 f1a2 	rbit	r1, r2
 8004514:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004518:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800451c:	6011      	str	r1, [r2, #0]
  return result;
 800451e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004522:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	fab2 f282 	clz	r2, r2
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	f042 0220 	orr.w	r2, r2, #32
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	f002 021f 	and.w	r2, r2, #31
 8004538:	2101      	movs	r1, #1
 800453a:	fa01 f202 	lsl.w	r2, r1, r2
 800453e:	4013      	ands	r3, r2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d180      	bne.n	8004446 <HAL_RCC_OscConfig+0xf1a>
 8004544:	e027      	b.n	8004596 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800454a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e01e      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCC_OscConfig+0x1078>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004562:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004566:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	429a      	cmp	r2, r3
 8004578:	d10b      	bne.n	8004592 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800457a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800457e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000

080045a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b09e      	sub	sp, #120	; 0x78
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e162      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c0:	4b90      	ldr	r3, [pc, #576]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d910      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b8d      	ldr	r3, [pc, #564]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f023 0207 	bic.w	r2, r3, #7
 80045d6:	498b      	ldr	r1, [pc, #556]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	4313      	orrs	r3, r2
 80045dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b89      	ldr	r3, [pc, #548]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e14a      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045fc:	4b82      	ldr	r3, [pc, #520]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	497f      	ldr	r1, [pc, #508]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80dc 	beq.w	80047d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d13c      	bne.n	800469e <HAL_RCC_ClockConfig+0xf6>
 8004624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004628:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462c:	fa93 f3a3 	rbit	r3, r3
 8004630:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004634:	fab3 f383 	clz	r3, r3
 8004638:	b2db      	uxtb	r3, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d102      	bne.n	800464e <HAL_RCC_ClockConfig+0xa6>
 8004648:	4b6f      	ldr	r3, [pc, #444]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	e00f      	b.n	800466e <HAL_RCC_ClockConfig+0xc6>
 800464e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004652:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	667b      	str	r3, [r7, #100]	; 0x64
 800465c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004660:	663b      	str	r3, [r7, #96]	; 0x60
 8004662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800466a:	4b67      	ldr	r3, [pc, #412]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004672:	65ba      	str	r2, [r7, #88]	; 0x58
 8004674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004676:	fa92 f2a2 	rbit	r2, r2
 800467a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800467c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800467e:	fab2 f282 	clz	r2, r2
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	f042 0220 	orr.w	r2, r2, #32
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	f002 021f 	and.w	r2, r2, #31
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f202 	lsl.w	r2, r1, r2
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d17b      	bne.n	8004792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0f3      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d13c      	bne.n	8004720 <HAL_RCC_ClockConfig+0x178>
 80046a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ae:	fa93 f3a3 	rbit	r3, r3
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	fab3 f383 	clz	r3, r3
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d102      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x128>
 80046ca:	4b4f      	ldr	r3, [pc, #316]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	e00f      	b.n	80046f0 <HAL_RCC_ClockConfig+0x148>
 80046d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	fa93 f3a3 	rbit	r3, r3
 80046dc:	647b      	str	r3, [r7, #68]	; 0x44
 80046de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
 80046e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046e6:	fa93 f3a3 	rbit	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	4b46      	ldr	r3, [pc, #280]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80046f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046f8:	fa92 f2a2 	rbit	r2, r2
 80046fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004700:	fab2 f282 	clz	r2, r2
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	f042 0220 	orr.w	r2, r2, #32
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	f002 021f 	and.w	r2, r2, #31
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f202 	lsl.w	r2, r1, r2
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d13a      	bne.n	8004792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0b2      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
 8004720:	2302      	movs	r3, #2
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	fa93 f3a3 	rbit	r3, r3
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	d102      	bne.n	8004748 <HAL_RCC_ClockConfig+0x1a0>
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	e00d      	b.n	8004764 <HAL_RCC_ClockConfig+0x1bc>
 8004748:	2302      	movs	r3, #2
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	fa93 f3a3 	rbit	r3, r3
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	2302      	movs	r3, #2
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2202      	movs	r2, #2
 8004766:	61ba      	str	r2, [r7, #24]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	fa92 f2a2 	rbit	r2, r2
 800476e:	617a      	str	r2, [r7, #20]
  return result;
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	fab2 f282 	clz	r2, r2
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	f042 0220 	orr.w	r2, r2, #32
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	f002 021f 	and.w	r2, r2, #31
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f202 	lsl.w	r2, r1, r2
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e079      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b1d      	ldr	r3, [pc, #116]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	491a      	ldr	r1, [pc, #104]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fc fffa 	bl	800179c <HAL_GetTick>
 80047a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fc fff6 	bl	800179c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e061      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <HAL_RCC_ClockConfig+0x260>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d214      	bcs.n	800480c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4906      	ldr	r1, [pc, #24]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <HAL_RCC_ClockConfig+0x25c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e040      	b.n	8004886 <HAL_RCC_ClockConfig+0x2de>
 8004804:	40022000 	.word	0x40022000
 8004808:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004818:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCC_ClockConfig+0x2e8>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	491a      	ldr	r1, [pc, #104]	; (8004890 <HAL_RCC_ClockConfig+0x2e8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004836:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_RCC_ClockConfig+0x2e8>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4912      	ldr	r1, [pc, #72]	; (8004890 <HAL_RCC_ClockConfig+0x2e8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800484a:	f000 f829 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800484e:	4601      	mov	r1, r0
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <HAL_RCC_ClockConfig+0x2e8>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	22f0      	movs	r2, #240	; 0xf0
 800485a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	fa92 f2a2 	rbit	r2, r2
 8004862:	60fa      	str	r2, [r7, #12]
  return result;
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	fab2 f282 	clz	r2, r2
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	40d3      	lsrs	r3, r2
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <HAL_RCC_ClockConfig+0x2ec>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	fa21 f303 	lsr.w	r3, r1, r3
 8004876:	4a08      	ldr	r2, [pc, #32]	; (8004898 <HAL_RCC_ClockConfig+0x2f0>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <HAL_RCC_ClockConfig+0x2f4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fc ff48 	bl	8001714 <HAL_InitTick>
  
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3778      	adds	r7, #120	; 0x78
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	080076bc 	.word	0x080076bc
 8004898:	20000018 	.word	0x20000018
 800489c:	2000001c 	.word	0x2000001c

080048a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b08b      	sub	sp, #44	; 0x2c
 80048a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d002      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x30>
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0x36>
 80048ce:	e03c      	b.n	800494a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048d2:	623b      	str	r3, [r7, #32]
      break;
 80048d4:	e03c      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80048dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	fa92 f2a2 	rbit	r2, r2
 80048e8:	607a      	str	r2, [r7, #4]
  return result;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	fab2 f282 	clz	r2, r2
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	40d3      	lsrs	r3, r2
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_RCC_GetSysClockFreq+0xc8>)
 80048f6:	5cd3      	ldrb	r3, [r2, r3]
 80048f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	220f      	movs	r2, #15
 8004904:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	fa92 f2a2 	rbit	r2, r2
 800490c:	60fa      	str	r2, [r7, #12]
  return result;
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	fab2 f282 	clz	r2, r2
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	40d3      	lsrs	r3, r2
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <HAL_RCC_GetSysClockFreq+0xcc>)
 800491a:	5cd3      	ldrb	r3, [r2, r3]
 800491c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004928:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc4>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	e004      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <HAL_RCC_GetSysClockFreq+0xd0>)
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	623b      	str	r3, [r7, #32]
      break;
 8004948:	e002      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetSysClockFreq+0xc4>)
 800494c:	623b      	str	r3, [r7, #32]
      break;
 800494e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004950:	6a3b      	ldr	r3, [r7, #32]
}
 8004952:	4618      	mov	r0, r3
 8004954:	372c      	adds	r7, #44	; 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	007a1200 	.word	0x007a1200
 8004968:	080076d4 	.word	0x080076d4
 800496c:	080076e4 	.word	0x080076e4
 8004970:	003d0900 	.word	0x003d0900

08004974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_GetHCLKFreq+0x14>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000018 	.word	0x20000018

0800498c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004992:	f7ff ffef 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004996:	4601      	mov	r1, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	fa92 f2a2 	rbit	r2, r2
 80049ac:	603a      	str	r2, [r7, #0]
  return result;
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	fab2 f282 	clz	r2, r2
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	40d3      	lsrs	r3, r2
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80049ba:	5cd3      	ldrb	r3, [r2, r3]
 80049bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	080076cc 	.word	0x080076cc

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80049d6:	f7ff ffcd 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049da:	4601      	mov	r1, r0
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80049e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80049e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	fa92 f2a2 	rbit	r2, r2
 80049f0:	603a      	str	r2, [r7, #0]
  return result;
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	fab2 f282 	clz	r2, r2
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	40d3      	lsrs	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	080076cc 	.word	0x080076cc

08004a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b092      	sub	sp, #72	; 0x48
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004a24:	2300      	movs	r3, #0
 8004a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 80d4 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a38:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10e      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4a4a      	ldr	r2, [pc, #296]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	61d3      	str	r3, [r2, #28]
 8004a50:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a62:	4b45      	ldr	r3, [pc, #276]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d118      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6e:	4b42      	ldr	r3, [pc, #264]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a41      	ldr	r2, [pc, #260]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7a:	f7fc fe8f 	bl	800179c <HAL_GetTick>
 8004a7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a82:	f7fc fe8b 	bl	800179c <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b64      	cmp	r3, #100	; 0x64
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e169      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a94:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004aa0:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8084 	beq.w	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d07c      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	fa93 f3a3 	rbit	r3, r3
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ada:	fab3 f383 	clz	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2301      	movs	r3, #1
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b12:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d04b      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fc fe3b 	bl	800179c <HAL_GetTick>
 8004b26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fc fe37 	bl	800179c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e113      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004b40:	2302      	movs	r3, #2
 8004b42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	fa93 f3a3 	rbit	r3, r3
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	fa93 f3a3 	rbit	r3, r3
 8004b56:	61fb      	str	r3, [r7, #28]
  return result;
 8004b58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	095b      	lsrs	r3, r3, #5
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d108      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b6e:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	e00d      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	10908100 	.word	0x10908100
 8004b80:	2302      	movs	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2202      	movs	r2, #2
 8004b92:	613a      	str	r2, [r7, #16]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	fa92 f2a2 	rbit	r2, r2
 8004b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	fab2 f282 	clz	r2, r2
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	f002 021f 	and.w	r2, r2, #31
 8004bae:	2101      	movs	r1, #1
 8004bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0b7      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004bba:	4b6d      	ldr	r3, [pc, #436]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	496a      	ldr	r1, [pc, #424]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd4:	4b66      	ldr	r3, [pc, #408]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	4a65      	ldr	r2, [pc, #404]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bec:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f023 0203 	bic.w	r2, r3, #3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	495d      	ldr	r1, [pc, #372]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c0a:	4b59      	ldr	r3, [pc, #356]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4956      	ldr	r1, [pc, #344]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c28:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	494e      	ldr	r1, [pc, #312]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c46:	4b4a      	ldr	r3, [pc, #296]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	f023 0210 	bic.w	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	4947      	ldr	r1, [pc, #284]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	493f      	ldr	r1, [pc, #252]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f023 0220 	bic.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4938      	ldr	r1, [pc, #224]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	4930      	ldr	r1, [pc, #192]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	4929      	ldr	r1, [pc, #164]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cdc:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4921      	ldr	r1, [pc, #132]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	491a      	ldr	r1, [pc, #104]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	4912      	ldr	r1, [pc, #72]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	490b      	ldr	r1, [pc, #44]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	4903      	ldr	r1, [pc, #12]	; (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3748      	adds	r7, #72	; 0x48
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40021000 	.word	0x40021000

08004d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e09d      	b.n	8004ec2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d009      	beq.n	8004dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
 8004d9e:	e005      	b.n	8004dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc fad6 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dec:	d902      	bls.n	8004df4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	e002      	b.n	8004dfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e02:	d007      	beq.n	8004e14 <HAL_SPI_Init+0xa0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	ea42 0103 	orr.w	r1, r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	f003 0204 	and.w	r2, r3, #4
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e90:	ea42 0103 	orr.w	r1, r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e049      	b.n	8004f70 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fc fa83 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 fa4f 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0202 	mvn.w	r2, #2
 8004fa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9d8 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9ca 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f9db 	bl	8005384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d122      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d11b      	bne.n	8005028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0204 	mvn.w	r2, #4
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9ae 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9a0 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f9b1 	bl	8005384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b08      	cmp	r3, #8
 8005034:	d122      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b08      	cmp	r3, #8
 8005042:	d11b      	bne.n	800507c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0208 	mvn.w	r2, #8
 800504c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2204      	movs	r2, #4
 8005052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f984 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8005068:	e005      	b.n	8005076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f976 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f987 	bl	8005384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d122      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d11b      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0210 	mvn.w	r2, #16
 80050a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2208      	movs	r2, #8
 80050a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f95a 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 80050bc:	e005      	b.n	80050ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f94c 	bl	800535c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f95d 	bl	8005384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0201 	mvn.w	r2, #1
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f926 	bl	8005348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005106:	2b80      	cmp	r3, #128	; 0x80
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005114:	2b80      	cmp	r3, #128	; 0x80
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 faf6 	bl	8005714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005136:	d10e      	bne.n	8005156 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005142:	2b80      	cmp	r3, #128	; 0x80
 8005144:	d107      	bne.n	8005156 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fae9 	bl	8005728 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b40      	cmp	r3, #64	; 0x40
 8005162:	d10e      	bne.n	8005182 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516e:	2b40      	cmp	r3, #64	; 0x40
 8005170:	d107      	bne.n	8005182 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800517a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f90b 	bl	8005398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b20      	cmp	r3, #32
 800518e:	d10e      	bne.n	80051ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b20      	cmp	r3, #32
 800519c:	d107      	bne.n	80051ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0220 	mvn.w	r2, #32
 80051a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 faa9 	bl	8005700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_ConfigClockSource+0x1c>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e0b6      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x18a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2202      	movs	r2, #2
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d03e      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xd8>
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005214:	f200 8087 	bhi.w	8005326 <HAL_TIM_ConfigClockSource+0x170>
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521c:	f000 8086 	beq.w	800532c <HAL_TIM_ConfigClockSource+0x176>
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d87f      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 8005226:	2b70      	cmp	r3, #112	; 0x70
 8005228:	d01a      	beq.n	8005260 <HAL_TIM_ConfigClockSource+0xaa>
 800522a:	2b70      	cmp	r3, #112	; 0x70
 800522c:	d87b      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 800522e:	2b60      	cmp	r3, #96	; 0x60
 8005230:	d050      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x11e>
 8005232:	2b60      	cmp	r3, #96	; 0x60
 8005234:	d877      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 8005236:	2b50      	cmp	r3, #80	; 0x50
 8005238:	d03c      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xfe>
 800523a:	2b50      	cmp	r3, #80	; 0x50
 800523c:	d873      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 800523e:	2b40      	cmp	r3, #64	; 0x40
 8005240:	d058      	beq.n	80052f4 <HAL_TIM_ConfigClockSource+0x13e>
 8005242:	2b40      	cmp	r3, #64	; 0x40
 8005244:	d86f      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 8005246:	2b30      	cmp	r3, #48	; 0x30
 8005248:	d064      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0x15e>
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d86b      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 800524e:	2b20      	cmp	r3, #32
 8005250:	d060      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0x15e>
 8005252:	2b20      	cmp	r3, #32
 8005254:	d867      	bhi.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d05c      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0x15e>
 800525a:	2b10      	cmp	r3, #16
 800525c:	d05a      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0x15e>
 800525e:	e062      	b.n	8005326 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6899      	ldr	r1, [r3, #8]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f000 f9a6 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005282:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]
      break;
 800528c:	e04f      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 f98f 	bl	80055c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e03c      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f000 f903 	bl	80054cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2150      	movs	r1, #80	; 0x50
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f95c 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 80052d2:	e02c      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	461a      	mov	r2, r3
 80052e2:	f000 f922 	bl	800552a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2160      	movs	r1, #96	; 0x60
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f94c 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 80052f2:	e01c      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6818      	ldr	r0, [r3, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	461a      	mov	r2, r3
 8005302:	f000 f8e3 	bl	80054cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2140      	movs	r1, #64	; 0x40
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f93c 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8005312:	e00c      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f000 f933 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 8005324:	e003      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
      break;
 800532a:	e000      	b.n	800532e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800532c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a3c      	ldr	r2, [pc, #240]	; (80054b0 <TIM_Base_SetConfig+0x104>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_Base_SetConfig+0x38>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ca:	d00b      	beq.n	80053e4 <TIM_Base_SetConfig+0x38>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <TIM_Base_SetConfig+0x108>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_Base_SetConfig+0x38>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a38      	ldr	r2, [pc, #224]	; (80054b8 <TIM_Base_SetConfig+0x10c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_Base_SetConfig+0x38>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a37      	ldr	r2, [pc, #220]	; (80054bc <TIM_Base_SetConfig+0x110>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d108      	bne.n	80053f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2d      	ldr	r2, [pc, #180]	; (80054b0 <TIM_Base_SetConfig+0x104>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01b      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d017      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a2a      	ldr	r2, [pc, #168]	; (80054b4 <TIM_Base_SetConfig+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <TIM_Base_SetConfig+0x10c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00f      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a28      	ldr	r2, [pc, #160]	; (80054bc <TIM_Base_SetConfig+0x110>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00b      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a27      	ldr	r2, [pc, #156]	; (80054c0 <TIM_Base_SetConfig+0x114>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d007      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <TIM_Base_SetConfig+0x118>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_Base_SetConfig+0x8a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <TIM_Base_SetConfig+0x11c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <TIM_Base_SetConfig+0x104>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00f      	beq.n	8005494 <TIM_Base_SetConfig+0xe8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a11      	ldr	r2, [pc, #68]	; (80054bc <TIM_Base_SetConfig+0x110>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_Base_SetConfig+0xe8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <TIM_Base_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0xe8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0f      	ldr	r2, [pc, #60]	; (80054c4 <TIM_Base_SetConfig+0x118>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0xe8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0e      	ldr	r2, [pc, #56]	; (80054c8 <TIM_Base_SetConfig+0x11c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d103      	bne.n	800549c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	615a      	str	r2, [r3, #20]
}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40013400 	.word	0x40013400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40014400 	.word	0x40014400
 80054c8:	40014800 	.word	0x40014800

080054cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 030a 	bic.w	r3, r3, #10
 8005508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f023 0210 	bic.w	r2, r3, #16
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f043 0307 	orr.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e063      	b.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2b      	ldr	r2, [pc, #172]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d108      	bne.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005652:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1b      	ldr	r2, [pc, #108]	; (80056ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800568a:	d013      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	; (80056f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a13      	ldr	r2, [pc, #76]	; (80056fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10c      	bne.n	80056ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40013400 	.word	0x40013400
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40014000 	.word	0x40014000

08005700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e040      	b.n	80057d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fb fe70 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	; 0x24
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0201 	bic.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fc00 	bl	8005f80 <UART_SetConfig>
 8005780:	4603      	mov	r3, r0
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e022      	b.n	80057d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fdc8 	bl	8006328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fe4f 	bl	800646c <UART_CheckIdleState>
 80057ce:	4603      	mov	r3, r0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d178      	bne.n	80058e2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <HAL_UART_Transmit+0x24>
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e071      	b.n	80058e4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2221      	movs	r2, #33	; 0x21
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580e:	f7fb ffc5 	bl	800179c <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	88fa      	ldrh	r2, [r7, #6]
 8005818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582c:	d108      	bne.n	8005840 <HAL_UART_Transmit+0x68>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e003      	b.n	8005848 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005848:	e030      	b.n	80058ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 feb1 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e03c      	b.n	80058e4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	881a      	ldrh	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800587c:	b292      	uxth	r2, r2
 800587e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	3302      	adds	r3, #2
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e008      	b.n	800589a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	b292      	uxth	r2, r2
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1c8      	bne.n	800584a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	2140      	movs	r1, #64	; 0x40
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fe7a 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e005      	b.n	80058e4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2220      	movs	r2, #32
 80058dc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005900:	2b20      	cmp	r3, #32
 8005902:	d132      	bne.n	800596a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_UART_Receive_IT+0x24>
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e02b      	b.n	800596c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d018      	beq.n	800595a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	623b      	str	r3, [r7, #32]
 8005948:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	69f9      	ldr	r1, [r7, #28]
 800594c:	6a3a      	ldr	r2, [r7, #32]
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	61bb      	str	r3, [r7, #24]
   return(result);
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e6      	bne.n	8005928 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	461a      	mov	r2, r3
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fe93 	bl	800668c <UART_Start_Receive_IT>
 8005966:	4603      	mov	r3, r0
 8005968:	e000      	b.n	800596c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
  }
}
 800596c:	4618      	mov	r0, r3
 800596e:	3728      	adds	r7, #40	; 0x28
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b0ba      	sub	sp, #232	; 0xe8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800599a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800599e:	f640 030f 	movw	r3, #2063	; 0x80f
 80059a2:	4013      	ands	r3, r2
 80059a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80059a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d115      	bne.n	80059dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00f      	beq.n	80059dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 82ab 	beq.w	8005f28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	4798      	blx	r3
      }
      return;
 80059da:	e2a5      	b.n	8005f28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80059dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8117 	beq.w	8005c14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80059e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d106      	bne.n	8005a00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80059f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80059f6:	4b85      	ldr	r3, [pc, #532]	; (8005c0c <HAL_UART_IRQHandler+0x298>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 810a 	beq.w	8005c14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d011      	beq.n	8005a30 <HAL_UART_IRQHandler+0xbc>
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	f043 0201 	orr.w	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d011      	beq.n	8005a60 <HAL_UART_IRQHandler+0xec>
 8005a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00b      	beq.n	8005a60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d011      	beq.n	8005a90 <HAL_UART_IRQHandler+0x11c>
 8005a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2204      	movs	r2, #4
 8005a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a86:	f043 0202 	orr.w	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d105      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac2:	f043 0208 	orr.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d012      	beq.n	8005afe <HAL_UART_IRQHandler+0x18a>
 8005ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af4:	f043 0220 	orr.w	r2, r3, #32
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8211 	beq.w	8005f2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00d      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d005      	beq.n	8005b56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d04f      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fe4c 	bl	80067f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d141      	bne.n	8005bee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3308      	adds	r3, #8
 8005b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3308      	adds	r3, #8
 8005b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1d9      	bne.n	8005b6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d013      	beq.n	8005be6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc2:	4a13      	ldr	r2, [pc, #76]	; (8005c10 <HAL_UART_IRQHandler+0x29c>)
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd f8b4 	bl	8002d38 <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	e00f      	b.n	8005c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f9b4 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	e00b      	b.n	8005c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f9b0 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf4:	e007      	b.n	8005c06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9ac 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005c04:	e192      	b.n	8005f2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c06:	bf00      	nop
    return;
 8005c08:	e190      	b.n	8005f2c <HAL_UART_IRQHandler+0x5b8>
 8005c0a:	bf00      	nop
 8005c0c:	04000120 	.word	0x04000120
 8005c10:	080068bd 	.word	0x080068bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	f040 814b 	bne.w	8005eb4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8144 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 813d 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2210      	movs	r2, #16
 8005c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	f040 80b5 	bne.w	8005dbc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8164 	beq.w	8005f30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c72:	429a      	cmp	r2, r3
 8005c74:	f080 815c 	bcs.w	8005f30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	f000 8086 	beq.w	8005d9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005caa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005cbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1da      	bne.n	8005c8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e1      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e3      	bne.n	8005d14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d84:	e841 2300 	strex	r3, r2, [r1]
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e4      	bne.n	8005d5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fc ff96 	bl	8002cc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f8d7 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dba:	e0b9      	b.n	8005f30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80ab 	beq.w	8005f34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8005dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80a6 	beq.w	8005f34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e4      	bne.n	8005de8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e42:	633a      	str	r2, [r7, #48]	; 0x30
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	69b9      	ldr	r1, [r7, #24]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	617b      	str	r3, [r7, #20]
   return(result);
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e4      	bne.n	8005e6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ea6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f85b 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005eb2:	e03f      	b.n	8005f34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <HAL_UART_IRQHandler+0x56a>
 8005ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fed8 	bl	8006c8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005edc:	e02d      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00e      	beq.n	8005f08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
    }
    return;
 8005f06:	e017      	b.n	8005f38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d012      	beq.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
 8005f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fce1 	bl	80068e8 <UART_EndTransmit_IT>
    return;
 8005f26:	e008      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005f28:	bf00      	nop
 8005f2a:	e006      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8005f38:	bf00      	nop
  }

}
 8005f3a:	37e8      	adds	r7, #232	; 0xe8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005fae:	f023 030c 	bic.w	r3, r3, #12
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6812      	ldr	r2, [r2, #0]
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4aa7      	ldr	r2, [pc, #668]	; (8006298 <UART_SetConfig+0x318>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d120      	bne.n	8006042 <UART_SetConfig+0xc2>
 8006000:	4ba6      	ldr	r3, [pc, #664]	; (800629c <UART_SetConfig+0x31c>)
 8006002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b03      	cmp	r3, #3
 800600a:	d817      	bhi.n	800603c <UART_SetConfig+0xbc>
 800600c:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0x94>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006025 	.word	0x08006025
 8006018:	08006031 	.word	0x08006031
 800601c:	08006037 	.word	0x08006037
 8006020:	0800602b 	.word	0x0800602b
 8006024:	2301      	movs	r3, #1
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e0b5      	b.n	8006196 <UART_SetConfig+0x216>
 800602a:	2302      	movs	r3, #2
 800602c:	77fb      	strb	r3, [r7, #31]
 800602e:	e0b2      	b.n	8006196 <UART_SetConfig+0x216>
 8006030:	2304      	movs	r3, #4
 8006032:	77fb      	strb	r3, [r7, #31]
 8006034:	e0af      	b.n	8006196 <UART_SetConfig+0x216>
 8006036:	2308      	movs	r3, #8
 8006038:	77fb      	strb	r3, [r7, #31]
 800603a:	e0ac      	b.n	8006196 <UART_SetConfig+0x216>
 800603c:	2310      	movs	r3, #16
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e0a9      	b.n	8006196 <UART_SetConfig+0x216>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a96      	ldr	r2, [pc, #600]	; (80062a0 <UART_SetConfig+0x320>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d124      	bne.n	8006096 <UART_SetConfig+0x116>
 800604c:	4b93      	ldr	r3, [pc, #588]	; (800629c <UART_SetConfig+0x31c>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006058:	d011      	beq.n	800607e <UART_SetConfig+0xfe>
 800605a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800605e:	d817      	bhi.n	8006090 <UART_SetConfig+0x110>
 8006060:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006064:	d011      	beq.n	800608a <UART_SetConfig+0x10a>
 8006066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800606a:	d811      	bhi.n	8006090 <UART_SetConfig+0x110>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <UART_SetConfig+0xf8>
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d006      	beq.n	8006084 <UART_SetConfig+0x104>
 8006076:	e00b      	b.n	8006090 <UART_SetConfig+0x110>
 8006078:	2300      	movs	r3, #0
 800607a:	77fb      	strb	r3, [r7, #31]
 800607c:	e08b      	b.n	8006196 <UART_SetConfig+0x216>
 800607e:	2302      	movs	r3, #2
 8006080:	77fb      	strb	r3, [r7, #31]
 8006082:	e088      	b.n	8006196 <UART_SetConfig+0x216>
 8006084:	2304      	movs	r3, #4
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e085      	b.n	8006196 <UART_SetConfig+0x216>
 800608a:	2308      	movs	r3, #8
 800608c:	77fb      	strb	r3, [r7, #31]
 800608e:	e082      	b.n	8006196 <UART_SetConfig+0x216>
 8006090:	2310      	movs	r3, #16
 8006092:	77fb      	strb	r3, [r7, #31]
 8006094:	e07f      	b.n	8006196 <UART_SetConfig+0x216>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a82      	ldr	r2, [pc, #520]	; (80062a4 <UART_SetConfig+0x324>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d124      	bne.n	80060ea <UART_SetConfig+0x16a>
 80060a0:	4b7e      	ldr	r3, [pc, #504]	; (800629c <UART_SetConfig+0x31c>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060ac:	d011      	beq.n	80060d2 <UART_SetConfig+0x152>
 80060ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060b2:	d817      	bhi.n	80060e4 <UART_SetConfig+0x164>
 80060b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060b8:	d011      	beq.n	80060de <UART_SetConfig+0x15e>
 80060ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060be:	d811      	bhi.n	80060e4 <UART_SetConfig+0x164>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <UART_SetConfig+0x14c>
 80060c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060c8:	d006      	beq.n	80060d8 <UART_SetConfig+0x158>
 80060ca:	e00b      	b.n	80060e4 <UART_SetConfig+0x164>
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e061      	b.n	8006196 <UART_SetConfig+0x216>
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e05e      	b.n	8006196 <UART_SetConfig+0x216>
 80060d8:	2304      	movs	r3, #4
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e05b      	b.n	8006196 <UART_SetConfig+0x216>
 80060de:	2308      	movs	r3, #8
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e058      	b.n	8006196 <UART_SetConfig+0x216>
 80060e4:	2310      	movs	r3, #16
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e055      	b.n	8006196 <UART_SetConfig+0x216>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6e      	ldr	r2, [pc, #440]	; (80062a8 <UART_SetConfig+0x328>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d124      	bne.n	800613e <UART_SetConfig+0x1be>
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <UART_SetConfig+0x31c>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006100:	d011      	beq.n	8006126 <UART_SetConfig+0x1a6>
 8006102:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006106:	d817      	bhi.n	8006138 <UART_SetConfig+0x1b8>
 8006108:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800610c:	d011      	beq.n	8006132 <UART_SetConfig+0x1b2>
 800610e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006112:	d811      	bhi.n	8006138 <UART_SetConfig+0x1b8>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <UART_SetConfig+0x1a0>
 8006118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611c:	d006      	beq.n	800612c <UART_SetConfig+0x1ac>
 800611e:	e00b      	b.n	8006138 <UART_SetConfig+0x1b8>
 8006120:	2300      	movs	r3, #0
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e037      	b.n	8006196 <UART_SetConfig+0x216>
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e034      	b.n	8006196 <UART_SetConfig+0x216>
 800612c:	2304      	movs	r3, #4
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e031      	b.n	8006196 <UART_SetConfig+0x216>
 8006132:	2308      	movs	r3, #8
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e02e      	b.n	8006196 <UART_SetConfig+0x216>
 8006138:	2310      	movs	r3, #16
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e02b      	b.n	8006196 <UART_SetConfig+0x216>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a5a      	ldr	r2, [pc, #360]	; (80062ac <UART_SetConfig+0x32c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d124      	bne.n	8006192 <UART_SetConfig+0x212>
 8006148:	4b54      	ldr	r3, [pc, #336]	; (800629c <UART_SetConfig+0x31c>)
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006150:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006154:	d011      	beq.n	800617a <UART_SetConfig+0x1fa>
 8006156:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800615a:	d817      	bhi.n	800618c <UART_SetConfig+0x20c>
 800615c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006160:	d011      	beq.n	8006186 <UART_SetConfig+0x206>
 8006162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006166:	d811      	bhi.n	800618c <UART_SetConfig+0x20c>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <UART_SetConfig+0x1f4>
 800616c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006170:	d006      	beq.n	8006180 <UART_SetConfig+0x200>
 8006172:	e00b      	b.n	800618c <UART_SetConfig+0x20c>
 8006174:	2300      	movs	r3, #0
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e00d      	b.n	8006196 <UART_SetConfig+0x216>
 800617a:	2302      	movs	r3, #2
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e00a      	b.n	8006196 <UART_SetConfig+0x216>
 8006180:	2304      	movs	r3, #4
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e007      	b.n	8006196 <UART_SetConfig+0x216>
 8006186:	2308      	movs	r3, #8
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e004      	b.n	8006196 <UART_SetConfig+0x216>
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e001      	b.n	8006196 <UART_SetConfig+0x216>
 8006192:	2310      	movs	r3, #16
 8006194:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619e:	d15b      	bne.n	8006258 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80061a0:	7ffb      	ldrb	r3, [r7, #31]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d827      	bhi.n	80061f6 <UART_SetConfig+0x276>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <UART_SetConfig+0x22c>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061d1 	.word	0x080061d1
 80061b0:	080061d9 	.word	0x080061d9
 80061b4:	080061e1 	.word	0x080061e1
 80061b8:	080061f7 	.word	0x080061f7
 80061bc:	080061e7 	.word	0x080061e7
 80061c0:	080061f7 	.word	0x080061f7
 80061c4:	080061f7 	.word	0x080061f7
 80061c8:	080061f7 	.word	0x080061f7
 80061cc:	080061ef 	.word	0x080061ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061d0:	f7fe fbdc 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 80061d4:	61b8      	str	r0, [r7, #24]
        break;
 80061d6:	e013      	b.n	8006200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d8:	f7fe fbfa 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 80061dc:	61b8      	str	r0, [r7, #24]
        break;
 80061de:	e00f      	b.n	8006200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e0:	4b33      	ldr	r3, [pc, #204]	; (80062b0 <UART_SetConfig+0x330>)
 80061e2:	61bb      	str	r3, [r7, #24]
        break;
 80061e4:	e00c      	b.n	8006200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e6:	f7fe fb5b 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 80061ea:	61b8      	str	r0, [r7, #24]
        break;
 80061ec:	e008      	b.n	8006200 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f2:	61bb      	str	r3, [r7, #24]
        break;
 80061f4:	e004      	b.n	8006200 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	77bb      	strb	r3, [r7, #30]
        break;
 80061fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8082 	beq.w	800630c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	005a      	lsls	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	441a      	add	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2b0f      	cmp	r3, #15
 8006222:	d916      	bls.n	8006252 <UART_SetConfig+0x2d2>
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800622a:	d212      	bcs.n	8006252 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f023 030f 	bic.w	r3, r3, #15
 8006234:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	085b      	lsrs	r3, r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	b29a      	uxth	r2, r3
 8006242:	89fb      	ldrh	r3, [r7, #14]
 8006244:	4313      	orrs	r3, r2
 8006246:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	89fa      	ldrh	r2, [r7, #14]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	e05c      	b.n	800630c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	77bb      	strb	r3, [r7, #30]
 8006256:	e059      	b.n	800630c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d835      	bhi.n	80062ca <UART_SetConfig+0x34a>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <UART_SetConfig+0x2e4>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006289 	.word	0x08006289
 8006268:	08006291 	.word	0x08006291
 800626c:	080062b5 	.word	0x080062b5
 8006270:	080062cb 	.word	0x080062cb
 8006274:	080062bb 	.word	0x080062bb
 8006278:	080062cb 	.word	0x080062cb
 800627c:	080062cb 	.word	0x080062cb
 8006280:	080062cb 	.word	0x080062cb
 8006284:	080062c3 	.word	0x080062c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006288:	f7fe fb80 	bl	800498c <HAL_RCC_GetPCLK1Freq>
 800628c:	61b8      	str	r0, [r7, #24]
        break;
 800628e:	e021      	b.n	80062d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006290:	f7fe fb9e 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8006294:	61b8      	str	r0, [r7, #24]
        break;
 8006296:	e01d      	b.n	80062d4 <UART_SetConfig+0x354>
 8006298:	40013800 	.word	0x40013800
 800629c:	40021000 	.word	0x40021000
 80062a0:	40004400 	.word	0x40004400
 80062a4:	40004800 	.word	0x40004800
 80062a8:	40004c00 	.word	0x40004c00
 80062ac:	40005000 	.word	0x40005000
 80062b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b4:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <UART_SetConfig+0x3a4>)
 80062b6:	61bb      	str	r3, [r7, #24]
        break;
 80062b8:	e00c      	b.n	80062d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ba:	f7fe faf1 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 80062be:	61b8      	str	r0, [r7, #24]
        break;
 80062c0:	e008      	b.n	80062d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c6:	61bb      	str	r3, [r7, #24]
        break;
 80062c8:	e004      	b.n	80062d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	77bb      	strb	r3, [r7, #30]
        break;
 80062d2:	bf00      	nop
    }

    if (pclk != 0U)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	085a      	lsrs	r2, r3, #1
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	441a      	add	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b0f      	cmp	r3, #15
 80062f2:	d909      	bls.n	8006308 <UART_SetConfig+0x388>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fa:	d205      	bcs.n	8006308 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	e001      	b.n	800630c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006318:	7fbb      	ldrb	r3, [r7, #30]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3720      	adds	r7, #32
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	007a1200 	.word	0x007a1200

08006328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00a      	beq.n	8006352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01a      	beq.n	800643e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006426:	d10a      	bne.n	800643e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	605a      	str	r2, [r3, #4]
  }
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b098      	sub	sp, #96	; 0x60
 8006470:	af02      	add	r7, sp, #8
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800647c:	f7fb f98e 	bl	800179c <HAL_GetTick>
 8006480:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b08      	cmp	r3, #8
 800648e:	d12e      	bne.n	80064ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006498:	2200      	movs	r2, #0
 800649a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f88c 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d021      	beq.n	80064ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064be:	653b      	str	r3, [r7, #80]	; 0x50
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c8:	647b      	str	r3, [r7, #68]	; 0x44
 80064ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e6      	bne.n	80064aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e062      	b.n	80065b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d149      	bne.n	8006590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f856 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03c      	beq.n	8006590 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	623b      	str	r3, [r7, #32]
   return(result);
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800652a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006534:	633b      	str	r3, [r7, #48]	; 0x30
 8006536:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800653a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e6      	bne.n	8006516 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3308      	adds	r3, #8
 800654e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	60fb      	str	r3, [r7, #12]
   return(result);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0301 	bic.w	r3, r3, #1
 800655e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3308      	adds	r3, #8
 8006566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006568:	61fa      	str	r2, [r7, #28]
 800656a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69b9      	ldr	r1, [r7, #24]
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	617b      	str	r3, [r7, #20]
   return(result);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e011      	b.n	80065b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3758      	adds	r7, #88	; 0x58
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	e049      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d045      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fb f8e1 	bl	800179c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <UART_WaitOnFlagUntilTimeout+0x30>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e048      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d031      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b08      	cmp	r3, #8
 800660a:	d110      	bne.n	800662e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2208      	movs	r2, #8
 8006612:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f8ed 	bl	80067f4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2208      	movs	r2, #8
 800661e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e029      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663c:	d111      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8d3 	bl	80067f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e00f      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	bf0c      	ite	eq
 8006672:	2301      	moveq	r3, #1
 8006674:	2300      	movne	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	429a      	cmp	r2, r3
 800667e:	d0a6      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b097      	sub	sp, #92	; 0x5c
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d10e      	bne.n	80066de <UART_Start_Receive_IT+0x52>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <UART_Start_Receive_IT+0x48>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066d2:	e01a      	b.n	800670a <UART_Start_Receive_IT+0x7e>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066dc:	e015      	b.n	800670a <UART_Start_Receive_IT+0x7e>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <UART_Start_Receive_IT+0x76>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <UART_Start_Receive_IT+0x6c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f6:	e008      	b.n	800670a <UART_Start_Receive_IT+0x7e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	227f      	movs	r2, #127	; 0x7f
 80066fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006700:	e003      	b.n	800670a <UART_Start_Receive_IT+0x7e>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2222      	movs	r2, #34	; 0x22
 8006716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	657b      	str	r3, [r7, #84]	; 0x54
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800673a:	64ba      	str	r2, [r7, #72]	; 0x48
 800673c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	d107      	bne.n	8006768 <UART_Start_Receive_IT+0xdc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a22      	ldr	r2, [pc, #136]	; (80067ec <UART_Start_Receive_IT+0x160>)
 8006764:	669a      	str	r2, [r3, #104]	; 0x68
 8006766:	e002      	b.n	800676e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <UART_Start_Receive_IT+0x164>)
 800676c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d019      	beq.n	80067aa <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
 8006796:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800679a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_Start_Receive_IT+0xea>
 80067a8:	e018      	b.n	80067dc <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	613b      	str	r3, [r7, #16]
   return(result);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f043 0320 	orr.w	r3, r3, #32
 80067be:	653b      	str	r3, [r7, #80]	; 0x50
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69f9      	ldr	r1, [r7, #28]
 80067ce:	6a3a      	ldr	r2, [r7, #32]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e6      	bne.n	80067aa <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	375c      	adds	r7, #92	; 0x5c
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	08006ae5 	.word	0x08006ae5
 80067f0:	0800693d 	.word	0x0800693d

080067f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b095      	sub	sp, #84	; 0x54
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681a:	643b      	str	r3, [r7, #64]	; 0x40
 800681c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e6      	bne.n	80067fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	61fb      	str	r3, [r7, #28]
   return(result);
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	64bb      	str	r3, [r7, #72]	; 0x48
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006850:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006866:	2b01      	cmp	r3, #1
 8006868:	d118      	bne.n	800689c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	60bb      	str	r3, [r7, #8]
   return(result);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f023 0310 	bic.w	r3, r3, #16
 800687e:	647b      	str	r3, [r7, #68]	; 0x44
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006888:	61bb      	str	r3, [r7, #24]
 800688a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6979      	ldr	r1, [r7, #20]
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	613b      	str	r3, [r7, #16]
   return(result);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068b0:	bf00      	nop
 80068b2:	3754      	adds	r7, #84	; 0x54
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff fb3a 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6979      	ldr	r1, [r7, #20]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	613b      	str	r3, [r7, #16]
   return(result);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e6      	bne.n	80068f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff fb06 	bl	8005f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006934:	bf00      	nop
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b09c      	sub	sp, #112	; 0x70
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800694a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006954:	2b22      	cmp	r3, #34	; 0x22
 8006956:	f040 80b9 	bne.w	8006acc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006960:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006964:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006968:	b2d9      	uxtb	r1, r3
 800696a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800696e:	b2da      	uxtb	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006974:	400a      	ands	r2, r1
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 809c 	bne.w	8006adc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80069c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e6      	bne.n	80069a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	3308      	adds	r3, #8
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e8:	f023 0301 	bic.w	r3, r3, #1
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069f6:	647a      	str	r2, [r7, #68]	; 0x44
 80069f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d018      	beq.n	8006a5e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	623b      	str	r3, [r7, #32]
   return(result);
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a40:	663b      	str	r3, [r7, #96]	; 0x60
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a4c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d12e      	bne.n	8006ac4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f023 0310 	bic.w	r3, r3, #16
 8006a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	69b9      	ldr	r1, [r7, #24]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	617b      	str	r3, [r7, #20]
   return(result);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e6      	bne.n	8006a6c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	f003 0310 	and.w	r3, r3, #16
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d103      	bne.n	8006ab4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fa53 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac2:	e00b      	b.n	8006adc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fa fb37 	bl	8001138 <HAL_UART_RxCpltCallback>
}
 8006aca:	e007      	b.n	8006adc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0208 	orr.w	r2, r2, #8
 8006ada:	619a      	str	r2, [r3, #24]
}
 8006adc:	bf00      	nop
 8006ade:	3770      	adds	r7, #112	; 0x70
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b09c      	sub	sp, #112	; 0x70
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afc:	2b22      	cmp	r3, #34	; 0x22
 8006afe:	f040 80b9 	bne.w	8006c74 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b10:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	1c9a      	adds	r2, r3, #2
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 809c 	bne.w	8006c84 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b60:	667b      	str	r3, [r7, #100]	; 0x64
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b6c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	663b      	str	r3, [r7, #96]	; 0x60
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b9e:	643a      	str	r2, [r7, #64]	; 0x40
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d018      	beq.n	8006c06 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e6      	bne.n	8006bd4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d12e      	bne.n	8006c6c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f023 0310 	bic.w	r3, r3, #16
 8006c28:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6979      	ldr	r1, [r7, #20]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e6      	bne.n	8006c14 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b10      	cmp	r3, #16
 8006c52:	d103      	bne.n	8006c5c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2210      	movs	r2, #16
 8006c5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff f97f 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c6a:	e00b      	b.n	8006c84 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fa fa63 	bl	8001138 <HAL_UART_RxCpltCallback>
}
 8006c72:	e007      	b.n	8006c84 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0208 	orr.w	r2, r2, #8
 8006c82:	619a      	str	r2, [r3, #24]
}
 8006c84:	bf00      	nop
 8006c86:	3770      	adds	r7, #112	; 0x70
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ca8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006cac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	f107 0014 	add.w	r0, r7, #20
 8006ce4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	b004      	add	sp, #16
 8006d16:	4770      	bx	lr

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000024 	.word	0x20000024

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f000 fc8e 	bl	8007658 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08007728 	.word	0x08007728
 8006d60:	08007728 	.word	0x08007728
 8006d64:	08007728 	.word	0x08007728
 8006d68:	0800772c 	.word	0x0800772c

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <siprintf>:
 8006d7c:	b40e      	push	{r1, r2, r3}
 8006d7e:	b500      	push	{lr}
 8006d80:	b09c      	sub	sp, #112	; 0x70
 8006d82:	ab1d      	add	r3, sp, #116	; 0x74
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	9006      	str	r0, [sp, #24]
 8006d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d8c:	4809      	ldr	r0, [pc, #36]	; (8006db4 <siprintf+0x38>)
 8006d8e:	9107      	str	r1, [sp, #28]
 8006d90:	9104      	str	r1, [sp, #16]
 8006d92:	4909      	ldr	r1, [pc, #36]	; (8006db8 <siprintf+0x3c>)
 8006d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d98:	9105      	str	r1, [sp, #20]
 8006d9a:	6800      	ldr	r0, [r0, #0]
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	a902      	add	r1, sp, #8
 8006da0:	f000 f868 	bl	8006e74 <_svfiprintf_r>
 8006da4:	9b02      	ldr	r3, [sp, #8]
 8006da6:	2200      	movs	r2, #0
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	b01c      	add	sp, #112	; 0x70
 8006dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db0:	b003      	add	sp, #12
 8006db2:	4770      	bx	lr
 8006db4:	20000024 	.word	0x20000024
 8006db8:	ffff0208 	.word	0xffff0208

08006dbc <__ssputs_r>:
 8006dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc0:	688e      	ldr	r6, [r1, #8]
 8006dc2:	429e      	cmp	r6, r3
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	4690      	mov	r8, r2
 8006dca:	461f      	mov	r7, r3
 8006dcc:	d838      	bhi.n	8006e40 <__ssputs_r+0x84>
 8006dce:	898a      	ldrh	r2, [r1, #12]
 8006dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dd4:	d032      	beq.n	8006e3c <__ssputs_r+0x80>
 8006dd6:	6825      	ldr	r5, [r4, #0]
 8006dd8:	6909      	ldr	r1, [r1, #16]
 8006dda:	eba5 0901 	sub.w	r9, r5, r1
 8006dde:	6965      	ldr	r5, [r4, #20]
 8006de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006de8:	3301      	adds	r3, #1
 8006dea:	444b      	add	r3, r9
 8006dec:	106d      	asrs	r5, r5, #1
 8006dee:	429d      	cmp	r5, r3
 8006df0:	bf38      	it	cc
 8006df2:	461d      	movcc	r5, r3
 8006df4:	0553      	lsls	r3, r2, #21
 8006df6:	d531      	bpl.n	8006e5c <__ssputs_r+0xa0>
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f000 fb63 	bl	80074c4 <_malloc_r>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	b950      	cbnz	r0, 8006e18 <__ssputs_r+0x5c>
 8006e02:	230c      	movs	r3, #12
 8006e04:	f8ca 3000 	str.w	r3, [sl]
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	6921      	ldr	r1, [r4, #16]
 8006e1a:	464a      	mov	r2, r9
 8006e1c:	f000 fabe 	bl	800739c <memcpy>
 8006e20:	89a3      	ldrh	r3, [r4, #12]
 8006e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2a:	81a3      	strh	r3, [r4, #12]
 8006e2c:	6126      	str	r6, [r4, #16]
 8006e2e:	6165      	str	r5, [r4, #20]
 8006e30:	444e      	add	r6, r9
 8006e32:	eba5 0509 	sub.w	r5, r5, r9
 8006e36:	6026      	str	r6, [r4, #0]
 8006e38:	60a5      	str	r5, [r4, #8]
 8006e3a:	463e      	mov	r6, r7
 8006e3c:	42be      	cmp	r6, r7
 8006e3e:	d900      	bls.n	8006e42 <__ssputs_r+0x86>
 8006e40:	463e      	mov	r6, r7
 8006e42:	6820      	ldr	r0, [r4, #0]
 8006e44:	4632      	mov	r2, r6
 8006e46:	4641      	mov	r1, r8
 8006e48:	f000 fab6 	bl	80073b8 <memmove>
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	1b9b      	subs	r3, r3, r6
 8006e50:	60a3      	str	r3, [r4, #8]
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	4433      	add	r3, r6
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e7db      	b.n	8006e14 <__ssputs_r+0x58>
 8006e5c:	462a      	mov	r2, r5
 8006e5e:	f000 fba5 	bl	80075ac <_realloc_r>
 8006e62:	4606      	mov	r6, r0
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1e1      	bne.n	8006e2c <__ssputs_r+0x70>
 8006e68:	6921      	ldr	r1, [r4, #16]
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f000 fabe 	bl	80073ec <_free_r>
 8006e70:	e7c7      	b.n	8006e02 <__ssputs_r+0x46>
	...

08006e74 <_svfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	898b      	ldrh	r3, [r1, #12]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	b09d      	sub	sp, #116	; 0x74
 8006e80:	4607      	mov	r7, r0
 8006e82:	460d      	mov	r5, r1
 8006e84:	4614      	mov	r4, r2
 8006e86:	d50e      	bpl.n	8006ea6 <_svfiprintf_r+0x32>
 8006e88:	690b      	ldr	r3, [r1, #16]
 8006e8a:	b963      	cbnz	r3, 8006ea6 <_svfiprintf_r+0x32>
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	f000 fb19 	bl	80074c4 <_malloc_r>
 8006e92:	6028      	str	r0, [r5, #0]
 8006e94:	6128      	str	r0, [r5, #16]
 8006e96:	b920      	cbnz	r0, 8006ea2 <_svfiprintf_r+0x2e>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea0:	e0d1      	b.n	8007046 <_svfiprintf_r+0x1d2>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	616b      	str	r3, [r5, #20]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eaa:	2320      	movs	r3, #32
 8006eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb4:	2330      	movs	r3, #48	; 0x30
 8006eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007060 <_svfiprintf_r+0x1ec>
 8006eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ebe:	f04f 0901 	mov.w	r9, #1
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	469a      	mov	sl, r3
 8006ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eca:	b10a      	cbz	r2, 8006ed0 <_svfiprintf_r+0x5c>
 8006ecc:	2a25      	cmp	r2, #37	; 0x25
 8006ece:	d1f9      	bne.n	8006ec4 <_svfiprintf_r+0x50>
 8006ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed4:	d00b      	beq.n	8006eee <_svfiprintf_r+0x7a>
 8006ed6:	465b      	mov	r3, fp
 8006ed8:	4622      	mov	r2, r4
 8006eda:	4629      	mov	r1, r5
 8006edc:	4638      	mov	r0, r7
 8006ede:	f7ff ff6d 	bl	8006dbc <__ssputs_r>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f000 80aa 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eea:	445a      	add	r2, fp
 8006eec:	9209      	str	r2, [sp, #36]	; 0x24
 8006eee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80a2 	beq.w	800703c <_svfiprintf_r+0x1c8>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f02:	f10a 0a01 	add.w	sl, sl, #1
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	9307      	str	r3, [sp, #28]
 8006f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f10:	4654      	mov	r4, sl
 8006f12:	2205      	movs	r2, #5
 8006f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f18:	4851      	ldr	r0, [pc, #324]	; (8007060 <_svfiprintf_r+0x1ec>)
 8006f1a:	f7f9 f961 	bl	80001e0 <memchr>
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	b9d8      	cbnz	r0, 8006f5a <_svfiprintf_r+0xe6>
 8006f22:	06d0      	lsls	r0, r2, #27
 8006f24:	bf44      	itt	mi
 8006f26:	2320      	movmi	r3, #32
 8006f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2c:	0711      	lsls	r1, r2, #28
 8006f2e:	bf44      	itt	mi
 8006f30:	232b      	movmi	r3, #43	; 0x2b
 8006f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f36:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3c:	d015      	beq.n	8006f6a <_svfiprintf_r+0xf6>
 8006f3e:	9a07      	ldr	r2, [sp, #28]
 8006f40:	4654      	mov	r4, sl
 8006f42:	2000      	movs	r0, #0
 8006f44:	f04f 0c0a 	mov.w	ip, #10
 8006f48:	4621      	mov	r1, r4
 8006f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f4e:	3b30      	subs	r3, #48	; 0x30
 8006f50:	2b09      	cmp	r3, #9
 8006f52:	d94e      	bls.n	8006ff2 <_svfiprintf_r+0x17e>
 8006f54:	b1b0      	cbz	r0, 8006f84 <_svfiprintf_r+0x110>
 8006f56:	9207      	str	r2, [sp, #28]
 8006f58:	e014      	b.n	8006f84 <_svfiprintf_r+0x110>
 8006f5a:	eba0 0308 	sub.w	r3, r0, r8
 8006f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f62:	4313      	orrs	r3, r2
 8006f64:	9304      	str	r3, [sp, #16]
 8006f66:	46a2      	mov	sl, r4
 8006f68:	e7d2      	b.n	8006f10 <_svfiprintf_r+0x9c>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	1d19      	adds	r1, r3, #4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	9103      	str	r1, [sp, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfbb      	ittet	lt
 8006f76:	425b      	neglt	r3, r3
 8006f78:	f042 0202 	orrlt.w	r2, r2, #2
 8006f7c:	9307      	strge	r3, [sp, #28]
 8006f7e:	9307      	strlt	r3, [sp, #28]
 8006f80:	bfb8      	it	lt
 8006f82:	9204      	strlt	r2, [sp, #16]
 8006f84:	7823      	ldrb	r3, [r4, #0]
 8006f86:	2b2e      	cmp	r3, #46	; 0x2e
 8006f88:	d10c      	bne.n	8006fa4 <_svfiprintf_r+0x130>
 8006f8a:	7863      	ldrb	r3, [r4, #1]
 8006f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8e:	d135      	bne.n	8006ffc <_svfiprintf_r+0x188>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfb8      	it	lt
 8006f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa0:	3402      	adds	r4, #2
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007070 <_svfiprintf_r+0x1fc>
 8006fa8:	7821      	ldrb	r1, [r4, #0]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4650      	mov	r0, sl
 8006fae:	f7f9 f917 	bl	80001e0 <memchr>
 8006fb2:	b140      	cbz	r0, 8006fc6 <_svfiprintf_r+0x152>
 8006fb4:	2340      	movs	r3, #64	; 0x40
 8006fb6:	eba0 000a 	sub.w	r0, r0, sl
 8006fba:	fa03 f000 	lsl.w	r0, r3, r0
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	4303      	orrs	r3, r0
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fca:	4826      	ldr	r0, [pc, #152]	; (8007064 <_svfiprintf_r+0x1f0>)
 8006fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	f7f9 f905 	bl	80001e0 <memchr>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d038      	beq.n	800704c <_svfiprintf_r+0x1d8>
 8006fda:	4b23      	ldr	r3, [pc, #140]	; (8007068 <_svfiprintf_r+0x1f4>)
 8006fdc:	bb1b      	cbnz	r3, 8007026 <_svfiprintf_r+0x1b2>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	3307      	adds	r3, #7
 8006fe2:	f023 0307 	bic.w	r3, r3, #7
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	9303      	str	r3, [sp, #12]
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	4433      	add	r3, r6
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	e767      	b.n	8006ec2 <_svfiprintf_r+0x4e>
 8006ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	e7a5      	b.n	8006f48 <_svfiprintf_r+0xd4>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	3401      	adds	r4, #1
 8007000:	9305      	str	r3, [sp, #20]
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0c0a 	mov.w	ip, #10
 8007008:	4620      	mov	r0, r4
 800700a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700e:	3a30      	subs	r2, #48	; 0x30
 8007010:	2a09      	cmp	r2, #9
 8007012:	d903      	bls.n	800701c <_svfiprintf_r+0x1a8>
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0c5      	beq.n	8006fa4 <_svfiprintf_r+0x130>
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	e7c3      	b.n	8006fa4 <_svfiprintf_r+0x130>
 800701c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007020:	4604      	mov	r4, r0
 8007022:	2301      	movs	r3, #1
 8007024:	e7f0      	b.n	8007008 <_svfiprintf_r+0x194>
 8007026:	ab03      	add	r3, sp, #12
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	462a      	mov	r2, r5
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <_svfiprintf_r+0x1f8>)
 800702e:	a904      	add	r1, sp, #16
 8007030:	4638      	mov	r0, r7
 8007032:	f3af 8000 	nop.w
 8007036:	1c42      	adds	r2, r0, #1
 8007038:	4606      	mov	r6, r0
 800703a:	d1d6      	bne.n	8006fea <_svfiprintf_r+0x176>
 800703c:	89ab      	ldrh	r3, [r5, #12]
 800703e:	065b      	lsls	r3, r3, #25
 8007040:	f53f af2c 	bmi.w	8006e9c <_svfiprintf_r+0x28>
 8007044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007046:	b01d      	add	sp, #116	; 0x74
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	462a      	mov	r2, r5
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <_svfiprintf_r+0x1f8>)
 8007054:	a904      	add	r1, sp, #16
 8007056:	4638      	mov	r0, r7
 8007058:	f000 f87a 	bl	8007150 <_printf_i>
 800705c:	e7eb      	b.n	8007036 <_svfiprintf_r+0x1c2>
 800705e:	bf00      	nop
 8007060:	080076f4 	.word	0x080076f4
 8007064:	080076fe 	.word	0x080076fe
 8007068:	00000000 	.word	0x00000000
 800706c:	08006dbd 	.word	0x08006dbd
 8007070:	080076fa 	.word	0x080076fa

08007074 <_printf_common>:
 8007074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007078:	4616      	mov	r6, r2
 800707a:	4699      	mov	r9, r3
 800707c:	688a      	ldr	r2, [r1, #8]
 800707e:	690b      	ldr	r3, [r1, #16]
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	4293      	cmp	r3, r2
 8007086:	bfb8      	it	lt
 8007088:	4613      	movlt	r3, r2
 800708a:	6033      	str	r3, [r6, #0]
 800708c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007090:	4607      	mov	r7, r0
 8007092:	460c      	mov	r4, r1
 8007094:	b10a      	cbz	r2, 800709a <_printf_common+0x26>
 8007096:	3301      	adds	r3, #1
 8007098:	6033      	str	r3, [r6, #0]
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	0699      	lsls	r1, r3, #26
 800709e:	bf42      	ittt	mi
 80070a0:	6833      	ldrmi	r3, [r6, #0]
 80070a2:	3302      	addmi	r3, #2
 80070a4:	6033      	strmi	r3, [r6, #0]
 80070a6:	6825      	ldr	r5, [r4, #0]
 80070a8:	f015 0506 	ands.w	r5, r5, #6
 80070ac:	d106      	bne.n	80070bc <_printf_common+0x48>
 80070ae:	f104 0a19 	add.w	sl, r4, #25
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	6832      	ldr	r2, [r6, #0]
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dc26      	bgt.n	800710a <_printf_common+0x96>
 80070bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070c0:	1e13      	subs	r3, r2, #0
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	2301      	movne	r3, #1
 80070c8:	0692      	lsls	r2, r2, #26
 80070ca:	d42b      	bmi.n	8007124 <_printf_common+0xb0>
 80070cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070d0:	4649      	mov	r1, r9
 80070d2:	4638      	mov	r0, r7
 80070d4:	47c0      	blx	r8
 80070d6:	3001      	adds	r0, #1
 80070d8:	d01e      	beq.n	8007118 <_printf_common+0xa4>
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	68e5      	ldr	r5, [r4, #12]
 80070de:	6832      	ldr	r2, [r6, #0]
 80070e0:	f003 0306 	and.w	r3, r3, #6
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	bf08      	it	eq
 80070e8:	1aad      	subeq	r5, r5, r2
 80070ea:	68a3      	ldr	r3, [r4, #8]
 80070ec:	6922      	ldr	r2, [r4, #16]
 80070ee:	bf0c      	ite	eq
 80070f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f4:	2500      	movne	r5, #0
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bfc4      	itt	gt
 80070fa:	1a9b      	subgt	r3, r3, r2
 80070fc:	18ed      	addgt	r5, r5, r3
 80070fe:	2600      	movs	r6, #0
 8007100:	341a      	adds	r4, #26
 8007102:	42b5      	cmp	r5, r6
 8007104:	d11a      	bne.n	800713c <_printf_common+0xc8>
 8007106:	2000      	movs	r0, #0
 8007108:	e008      	b.n	800711c <_printf_common+0xa8>
 800710a:	2301      	movs	r3, #1
 800710c:	4652      	mov	r2, sl
 800710e:	4649      	mov	r1, r9
 8007110:	4638      	mov	r0, r7
 8007112:	47c0      	blx	r8
 8007114:	3001      	adds	r0, #1
 8007116:	d103      	bne.n	8007120 <_printf_common+0xac>
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	3501      	adds	r5, #1
 8007122:	e7c6      	b.n	80070b2 <_printf_common+0x3e>
 8007124:	18e1      	adds	r1, r4, r3
 8007126:	1c5a      	adds	r2, r3, #1
 8007128:	2030      	movs	r0, #48	; 0x30
 800712a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800712e:	4422      	add	r2, r4
 8007130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007138:	3302      	adds	r3, #2
 800713a:	e7c7      	b.n	80070cc <_printf_common+0x58>
 800713c:	2301      	movs	r3, #1
 800713e:	4622      	mov	r2, r4
 8007140:	4649      	mov	r1, r9
 8007142:	4638      	mov	r0, r7
 8007144:	47c0      	blx	r8
 8007146:	3001      	adds	r0, #1
 8007148:	d0e6      	beq.n	8007118 <_printf_common+0xa4>
 800714a:	3601      	adds	r6, #1
 800714c:	e7d9      	b.n	8007102 <_printf_common+0x8e>
	...

08007150 <_printf_i>:
 8007150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	7e0f      	ldrb	r7, [r1, #24]
 8007156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007158:	2f78      	cmp	r7, #120	; 0x78
 800715a:	4691      	mov	r9, r2
 800715c:	4680      	mov	r8, r0
 800715e:	460c      	mov	r4, r1
 8007160:	469a      	mov	sl, r3
 8007162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007166:	d807      	bhi.n	8007178 <_printf_i+0x28>
 8007168:	2f62      	cmp	r7, #98	; 0x62
 800716a:	d80a      	bhi.n	8007182 <_printf_i+0x32>
 800716c:	2f00      	cmp	r7, #0
 800716e:	f000 80d8 	beq.w	8007322 <_printf_i+0x1d2>
 8007172:	2f58      	cmp	r7, #88	; 0x58
 8007174:	f000 80a3 	beq.w	80072be <_printf_i+0x16e>
 8007178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007180:	e03a      	b.n	80071f8 <_printf_i+0xa8>
 8007182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007186:	2b15      	cmp	r3, #21
 8007188:	d8f6      	bhi.n	8007178 <_printf_i+0x28>
 800718a:	a101      	add	r1, pc, #4	; (adr r1, 8007190 <_printf_i+0x40>)
 800718c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007190:	080071e9 	.word	0x080071e9
 8007194:	080071fd 	.word	0x080071fd
 8007198:	08007179 	.word	0x08007179
 800719c:	08007179 	.word	0x08007179
 80071a0:	08007179 	.word	0x08007179
 80071a4:	08007179 	.word	0x08007179
 80071a8:	080071fd 	.word	0x080071fd
 80071ac:	08007179 	.word	0x08007179
 80071b0:	08007179 	.word	0x08007179
 80071b4:	08007179 	.word	0x08007179
 80071b8:	08007179 	.word	0x08007179
 80071bc:	08007309 	.word	0x08007309
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	080072eb 	.word	0x080072eb
 80071c8:	08007179 	.word	0x08007179
 80071cc:	08007179 	.word	0x08007179
 80071d0:	0800732b 	.word	0x0800732b
 80071d4:	08007179 	.word	0x08007179
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	08007179 	.word	0x08007179
 80071e0:	08007179 	.word	0x08007179
 80071e4:	080072f3 	.word	0x080072f3
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	1d1a      	adds	r2, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	602a      	str	r2, [r5, #0]
 80071f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0a3      	b.n	8007344 <_printf_i+0x1f4>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	6829      	ldr	r1, [r5, #0]
 8007200:	0606      	lsls	r6, r0, #24
 8007202:	f101 0304 	add.w	r3, r1, #4
 8007206:	d50a      	bpl.n	800721e <_printf_i+0xce>
 8007208:	680e      	ldr	r6, [r1, #0]
 800720a:	602b      	str	r3, [r5, #0]
 800720c:	2e00      	cmp	r6, #0
 800720e:	da03      	bge.n	8007218 <_printf_i+0xc8>
 8007210:	232d      	movs	r3, #45	; 0x2d
 8007212:	4276      	negs	r6, r6
 8007214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007218:	485e      	ldr	r0, [pc, #376]	; (8007394 <_printf_i+0x244>)
 800721a:	230a      	movs	r3, #10
 800721c:	e019      	b.n	8007252 <_printf_i+0x102>
 800721e:	680e      	ldr	r6, [r1, #0]
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007226:	bf18      	it	ne
 8007228:	b236      	sxthne	r6, r6
 800722a:	e7ef      	b.n	800720c <_printf_i+0xbc>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	6820      	ldr	r0, [r4, #0]
 8007230:	1d19      	adds	r1, r3, #4
 8007232:	6029      	str	r1, [r5, #0]
 8007234:	0601      	lsls	r1, r0, #24
 8007236:	d501      	bpl.n	800723c <_printf_i+0xec>
 8007238:	681e      	ldr	r6, [r3, #0]
 800723a:	e002      	b.n	8007242 <_printf_i+0xf2>
 800723c:	0646      	lsls	r6, r0, #25
 800723e:	d5fb      	bpl.n	8007238 <_printf_i+0xe8>
 8007240:	881e      	ldrh	r6, [r3, #0]
 8007242:	4854      	ldr	r0, [pc, #336]	; (8007394 <_printf_i+0x244>)
 8007244:	2f6f      	cmp	r7, #111	; 0x6f
 8007246:	bf0c      	ite	eq
 8007248:	2308      	moveq	r3, #8
 800724a:	230a      	movne	r3, #10
 800724c:	2100      	movs	r1, #0
 800724e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007252:	6865      	ldr	r5, [r4, #4]
 8007254:	60a5      	str	r5, [r4, #8]
 8007256:	2d00      	cmp	r5, #0
 8007258:	bfa2      	ittt	ge
 800725a:	6821      	ldrge	r1, [r4, #0]
 800725c:	f021 0104 	bicge.w	r1, r1, #4
 8007260:	6021      	strge	r1, [r4, #0]
 8007262:	b90e      	cbnz	r6, 8007268 <_printf_i+0x118>
 8007264:	2d00      	cmp	r5, #0
 8007266:	d04d      	beq.n	8007304 <_printf_i+0x1b4>
 8007268:	4615      	mov	r5, r2
 800726a:	fbb6 f1f3 	udiv	r1, r6, r3
 800726e:	fb03 6711 	mls	r7, r3, r1, r6
 8007272:	5dc7      	ldrb	r7, [r0, r7]
 8007274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007278:	4637      	mov	r7, r6
 800727a:	42bb      	cmp	r3, r7
 800727c:	460e      	mov	r6, r1
 800727e:	d9f4      	bls.n	800726a <_printf_i+0x11a>
 8007280:	2b08      	cmp	r3, #8
 8007282:	d10b      	bne.n	800729c <_printf_i+0x14c>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	07de      	lsls	r6, r3, #31
 8007288:	d508      	bpl.n	800729c <_printf_i+0x14c>
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	6861      	ldr	r1, [r4, #4]
 800728e:	4299      	cmp	r1, r3
 8007290:	bfde      	ittt	le
 8007292:	2330      	movle	r3, #48	; 0x30
 8007294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800729c:	1b52      	subs	r2, r2, r5
 800729e:	6122      	str	r2, [r4, #16]
 80072a0:	f8cd a000 	str.w	sl, [sp]
 80072a4:	464b      	mov	r3, r9
 80072a6:	aa03      	add	r2, sp, #12
 80072a8:	4621      	mov	r1, r4
 80072aa:	4640      	mov	r0, r8
 80072ac:	f7ff fee2 	bl	8007074 <_printf_common>
 80072b0:	3001      	adds	r0, #1
 80072b2:	d14c      	bne.n	800734e <_printf_i+0x1fe>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	b004      	add	sp, #16
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	4835      	ldr	r0, [pc, #212]	; (8007394 <_printf_i+0x244>)
 80072c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072c4:	6829      	ldr	r1, [r5, #0]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072cc:	6029      	str	r1, [r5, #0]
 80072ce:	061d      	lsls	r5, r3, #24
 80072d0:	d514      	bpl.n	80072fc <_printf_i+0x1ac>
 80072d2:	07df      	lsls	r7, r3, #31
 80072d4:	bf44      	itt	mi
 80072d6:	f043 0320 	orrmi.w	r3, r3, #32
 80072da:	6023      	strmi	r3, [r4, #0]
 80072dc:	b91e      	cbnz	r6, 80072e6 <_printf_i+0x196>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f023 0320 	bic.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2310      	movs	r3, #16
 80072e8:	e7b0      	b.n	800724c <_printf_i+0xfc>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	f043 0320 	orr.w	r3, r3, #32
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	2378      	movs	r3, #120	; 0x78
 80072f4:	4828      	ldr	r0, [pc, #160]	; (8007398 <_printf_i+0x248>)
 80072f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072fa:	e7e3      	b.n	80072c4 <_printf_i+0x174>
 80072fc:	0659      	lsls	r1, r3, #25
 80072fe:	bf48      	it	mi
 8007300:	b2b6      	uxthmi	r6, r6
 8007302:	e7e6      	b.n	80072d2 <_printf_i+0x182>
 8007304:	4615      	mov	r5, r2
 8007306:	e7bb      	b.n	8007280 <_printf_i+0x130>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	6826      	ldr	r6, [r4, #0]
 800730c:	6961      	ldr	r1, [r4, #20]
 800730e:	1d18      	adds	r0, r3, #4
 8007310:	6028      	str	r0, [r5, #0]
 8007312:	0635      	lsls	r5, r6, #24
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	d501      	bpl.n	800731c <_printf_i+0x1cc>
 8007318:	6019      	str	r1, [r3, #0]
 800731a:	e002      	b.n	8007322 <_printf_i+0x1d2>
 800731c:	0670      	lsls	r0, r6, #25
 800731e:	d5fb      	bpl.n	8007318 <_printf_i+0x1c8>
 8007320:	8019      	strh	r1, [r3, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	6123      	str	r3, [r4, #16]
 8007326:	4615      	mov	r5, r2
 8007328:	e7ba      	b.n	80072a0 <_printf_i+0x150>
 800732a:	682b      	ldr	r3, [r5, #0]
 800732c:	1d1a      	adds	r2, r3, #4
 800732e:	602a      	str	r2, [r5, #0]
 8007330:	681d      	ldr	r5, [r3, #0]
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	2100      	movs	r1, #0
 8007336:	4628      	mov	r0, r5
 8007338:	f7f8 ff52 	bl	80001e0 <memchr>
 800733c:	b108      	cbz	r0, 8007342 <_printf_i+0x1f2>
 800733e:	1b40      	subs	r0, r0, r5
 8007340:	6060      	str	r0, [r4, #4]
 8007342:	6863      	ldr	r3, [r4, #4]
 8007344:	6123      	str	r3, [r4, #16]
 8007346:	2300      	movs	r3, #0
 8007348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800734c:	e7a8      	b.n	80072a0 <_printf_i+0x150>
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	462a      	mov	r2, r5
 8007352:	4649      	mov	r1, r9
 8007354:	4640      	mov	r0, r8
 8007356:	47d0      	blx	sl
 8007358:	3001      	adds	r0, #1
 800735a:	d0ab      	beq.n	80072b4 <_printf_i+0x164>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	079b      	lsls	r3, r3, #30
 8007360:	d413      	bmi.n	800738a <_printf_i+0x23a>
 8007362:	68e0      	ldr	r0, [r4, #12]
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	4298      	cmp	r0, r3
 8007368:	bfb8      	it	lt
 800736a:	4618      	movlt	r0, r3
 800736c:	e7a4      	b.n	80072b8 <_printf_i+0x168>
 800736e:	2301      	movs	r3, #1
 8007370:	4632      	mov	r2, r6
 8007372:	4649      	mov	r1, r9
 8007374:	4640      	mov	r0, r8
 8007376:	47d0      	blx	sl
 8007378:	3001      	adds	r0, #1
 800737a:	d09b      	beq.n	80072b4 <_printf_i+0x164>
 800737c:	3501      	adds	r5, #1
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	9903      	ldr	r1, [sp, #12]
 8007382:	1a5b      	subs	r3, r3, r1
 8007384:	42ab      	cmp	r3, r5
 8007386:	dcf2      	bgt.n	800736e <_printf_i+0x21e>
 8007388:	e7eb      	b.n	8007362 <_printf_i+0x212>
 800738a:	2500      	movs	r5, #0
 800738c:	f104 0619 	add.w	r6, r4, #25
 8007390:	e7f5      	b.n	800737e <_printf_i+0x22e>
 8007392:	bf00      	nop
 8007394:	08007705 	.word	0x08007705
 8007398:	08007716 	.word	0x08007716

0800739c <memcpy>:
 800739c:	440a      	add	r2, r1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a4:	d100      	bne.n	80073a8 <memcpy+0xc>
 80073a6:	4770      	bx	lr
 80073a8:	b510      	push	{r4, lr}
 80073aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b2:	4291      	cmp	r1, r2
 80073b4:	d1f9      	bne.n	80073aa <memcpy+0xe>
 80073b6:	bd10      	pop	{r4, pc}

080073b8 <memmove>:
 80073b8:	4288      	cmp	r0, r1
 80073ba:	b510      	push	{r4, lr}
 80073bc:	eb01 0402 	add.w	r4, r1, r2
 80073c0:	d902      	bls.n	80073c8 <memmove+0x10>
 80073c2:	4284      	cmp	r4, r0
 80073c4:	4623      	mov	r3, r4
 80073c6:	d807      	bhi.n	80073d8 <memmove+0x20>
 80073c8:	1e43      	subs	r3, r0, #1
 80073ca:	42a1      	cmp	r1, r4
 80073cc:	d008      	beq.n	80073e0 <memmove+0x28>
 80073ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073d6:	e7f8      	b.n	80073ca <memmove+0x12>
 80073d8:	4402      	add	r2, r0
 80073da:	4601      	mov	r1, r0
 80073dc:	428a      	cmp	r2, r1
 80073de:	d100      	bne.n	80073e2 <memmove+0x2a>
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ea:	e7f7      	b.n	80073dc <memmove+0x24>

080073ec <_free_r>:
 80073ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ee:	2900      	cmp	r1, #0
 80073f0:	d044      	beq.n	800747c <_free_r+0x90>
 80073f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f6:	9001      	str	r0, [sp, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f1a1 0404 	sub.w	r4, r1, #4
 80073fe:	bfb8      	it	lt
 8007400:	18e4      	addlt	r4, r4, r3
 8007402:	f000 f913 	bl	800762c <__malloc_lock>
 8007406:	4a1e      	ldr	r2, [pc, #120]	; (8007480 <_free_r+0x94>)
 8007408:	9801      	ldr	r0, [sp, #4]
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	b933      	cbnz	r3, 800741c <_free_r+0x30>
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	6014      	str	r4, [r2, #0]
 8007412:	b003      	add	sp, #12
 8007414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007418:	f000 b90e 	b.w	8007638 <__malloc_unlock>
 800741c:	42a3      	cmp	r3, r4
 800741e:	d908      	bls.n	8007432 <_free_r+0x46>
 8007420:	6825      	ldr	r5, [r4, #0]
 8007422:	1961      	adds	r1, r4, r5
 8007424:	428b      	cmp	r3, r1
 8007426:	bf01      	itttt	eq
 8007428:	6819      	ldreq	r1, [r3, #0]
 800742a:	685b      	ldreq	r3, [r3, #4]
 800742c:	1949      	addeq	r1, r1, r5
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	e7ed      	b.n	800740e <_free_r+0x22>
 8007432:	461a      	mov	r2, r3
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b10b      	cbz	r3, 800743c <_free_r+0x50>
 8007438:	42a3      	cmp	r3, r4
 800743a:	d9fa      	bls.n	8007432 <_free_r+0x46>
 800743c:	6811      	ldr	r1, [r2, #0]
 800743e:	1855      	adds	r5, r2, r1
 8007440:	42a5      	cmp	r5, r4
 8007442:	d10b      	bne.n	800745c <_free_r+0x70>
 8007444:	6824      	ldr	r4, [r4, #0]
 8007446:	4421      	add	r1, r4
 8007448:	1854      	adds	r4, r2, r1
 800744a:	42a3      	cmp	r3, r4
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	d1e0      	bne.n	8007412 <_free_r+0x26>
 8007450:	681c      	ldr	r4, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	6053      	str	r3, [r2, #4]
 8007456:	4421      	add	r1, r4
 8007458:	6011      	str	r1, [r2, #0]
 800745a:	e7da      	b.n	8007412 <_free_r+0x26>
 800745c:	d902      	bls.n	8007464 <_free_r+0x78>
 800745e:	230c      	movs	r3, #12
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	e7d6      	b.n	8007412 <_free_r+0x26>
 8007464:	6825      	ldr	r5, [r4, #0]
 8007466:	1961      	adds	r1, r4, r5
 8007468:	428b      	cmp	r3, r1
 800746a:	bf04      	itt	eq
 800746c:	6819      	ldreq	r1, [r3, #0]
 800746e:	685b      	ldreq	r3, [r3, #4]
 8007470:	6063      	str	r3, [r4, #4]
 8007472:	bf04      	itt	eq
 8007474:	1949      	addeq	r1, r1, r5
 8007476:	6021      	streq	r1, [r4, #0]
 8007478:	6054      	str	r4, [r2, #4]
 800747a:	e7ca      	b.n	8007412 <_free_r+0x26>
 800747c:	b003      	add	sp, #12
 800747e:	bd30      	pop	{r4, r5, pc}
 8007480:	2000060c 	.word	0x2000060c

08007484 <sbrk_aligned>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	4e0e      	ldr	r6, [pc, #56]	; (80074c0 <sbrk_aligned+0x3c>)
 8007488:	460c      	mov	r4, r1
 800748a:	6831      	ldr	r1, [r6, #0]
 800748c:	4605      	mov	r5, r0
 800748e:	b911      	cbnz	r1, 8007496 <sbrk_aligned+0x12>
 8007490:	f000 f8bc 	bl	800760c <_sbrk_r>
 8007494:	6030      	str	r0, [r6, #0]
 8007496:	4621      	mov	r1, r4
 8007498:	4628      	mov	r0, r5
 800749a:	f000 f8b7 	bl	800760c <_sbrk_r>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	d00a      	beq.n	80074b8 <sbrk_aligned+0x34>
 80074a2:	1cc4      	adds	r4, r0, #3
 80074a4:	f024 0403 	bic.w	r4, r4, #3
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d007      	beq.n	80074bc <sbrk_aligned+0x38>
 80074ac:	1a21      	subs	r1, r4, r0
 80074ae:	4628      	mov	r0, r5
 80074b0:	f000 f8ac 	bl	800760c <_sbrk_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	d101      	bne.n	80074bc <sbrk_aligned+0x38>
 80074b8:	f04f 34ff 	mov.w	r4, #4294967295
 80074bc:	4620      	mov	r0, r4
 80074be:	bd70      	pop	{r4, r5, r6, pc}
 80074c0:	20000610 	.word	0x20000610

080074c4 <_malloc_r>:
 80074c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c8:	1ccd      	adds	r5, r1, #3
 80074ca:	f025 0503 	bic.w	r5, r5, #3
 80074ce:	3508      	adds	r5, #8
 80074d0:	2d0c      	cmp	r5, #12
 80074d2:	bf38      	it	cc
 80074d4:	250c      	movcc	r5, #12
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	4607      	mov	r7, r0
 80074da:	db01      	blt.n	80074e0 <_malloc_r+0x1c>
 80074dc:	42a9      	cmp	r1, r5
 80074de:	d905      	bls.n	80074ec <_malloc_r+0x28>
 80074e0:	230c      	movs	r3, #12
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	2600      	movs	r6, #0
 80074e6:	4630      	mov	r0, r6
 80074e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ec:	4e2e      	ldr	r6, [pc, #184]	; (80075a8 <_malloc_r+0xe4>)
 80074ee:	f000 f89d 	bl	800762c <__malloc_lock>
 80074f2:	6833      	ldr	r3, [r6, #0]
 80074f4:	461c      	mov	r4, r3
 80074f6:	bb34      	cbnz	r4, 8007546 <_malloc_r+0x82>
 80074f8:	4629      	mov	r1, r5
 80074fa:	4638      	mov	r0, r7
 80074fc:	f7ff ffc2 	bl	8007484 <sbrk_aligned>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	4604      	mov	r4, r0
 8007504:	d14d      	bne.n	80075a2 <_malloc_r+0xde>
 8007506:	6834      	ldr	r4, [r6, #0]
 8007508:	4626      	mov	r6, r4
 800750a:	2e00      	cmp	r6, #0
 800750c:	d140      	bne.n	8007590 <_malloc_r+0xcc>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	4631      	mov	r1, r6
 8007512:	4638      	mov	r0, r7
 8007514:	eb04 0803 	add.w	r8, r4, r3
 8007518:	f000 f878 	bl	800760c <_sbrk_r>
 800751c:	4580      	cmp	r8, r0
 800751e:	d13a      	bne.n	8007596 <_malloc_r+0xd2>
 8007520:	6821      	ldr	r1, [r4, #0]
 8007522:	3503      	adds	r5, #3
 8007524:	1a6d      	subs	r5, r5, r1
 8007526:	f025 0503 	bic.w	r5, r5, #3
 800752a:	3508      	adds	r5, #8
 800752c:	2d0c      	cmp	r5, #12
 800752e:	bf38      	it	cc
 8007530:	250c      	movcc	r5, #12
 8007532:	4629      	mov	r1, r5
 8007534:	4638      	mov	r0, r7
 8007536:	f7ff ffa5 	bl	8007484 <sbrk_aligned>
 800753a:	3001      	adds	r0, #1
 800753c:	d02b      	beq.n	8007596 <_malloc_r+0xd2>
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	442b      	add	r3, r5
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	e00e      	b.n	8007564 <_malloc_r+0xa0>
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	1b52      	subs	r2, r2, r5
 800754a:	d41e      	bmi.n	800758a <_malloc_r+0xc6>
 800754c:	2a0b      	cmp	r2, #11
 800754e:	d916      	bls.n	800757e <_malloc_r+0xba>
 8007550:	1961      	adds	r1, r4, r5
 8007552:	42a3      	cmp	r3, r4
 8007554:	6025      	str	r5, [r4, #0]
 8007556:	bf18      	it	ne
 8007558:	6059      	strne	r1, [r3, #4]
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	bf08      	it	eq
 800755e:	6031      	streq	r1, [r6, #0]
 8007560:	5162      	str	r2, [r4, r5]
 8007562:	604b      	str	r3, [r1, #4]
 8007564:	4638      	mov	r0, r7
 8007566:	f104 060b 	add.w	r6, r4, #11
 800756a:	f000 f865 	bl	8007638 <__malloc_unlock>
 800756e:	f026 0607 	bic.w	r6, r6, #7
 8007572:	1d23      	adds	r3, r4, #4
 8007574:	1af2      	subs	r2, r6, r3
 8007576:	d0b6      	beq.n	80074e6 <_malloc_r+0x22>
 8007578:	1b9b      	subs	r3, r3, r6
 800757a:	50a3      	str	r3, [r4, r2]
 800757c:	e7b3      	b.n	80074e6 <_malloc_r+0x22>
 800757e:	6862      	ldr	r2, [r4, #4]
 8007580:	42a3      	cmp	r3, r4
 8007582:	bf0c      	ite	eq
 8007584:	6032      	streq	r2, [r6, #0]
 8007586:	605a      	strne	r2, [r3, #4]
 8007588:	e7ec      	b.n	8007564 <_malloc_r+0xa0>
 800758a:	4623      	mov	r3, r4
 800758c:	6864      	ldr	r4, [r4, #4]
 800758e:	e7b2      	b.n	80074f6 <_malloc_r+0x32>
 8007590:	4634      	mov	r4, r6
 8007592:	6876      	ldr	r6, [r6, #4]
 8007594:	e7b9      	b.n	800750a <_malloc_r+0x46>
 8007596:	230c      	movs	r3, #12
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4638      	mov	r0, r7
 800759c:	f000 f84c 	bl	8007638 <__malloc_unlock>
 80075a0:	e7a1      	b.n	80074e6 <_malloc_r+0x22>
 80075a2:	6025      	str	r5, [r4, #0]
 80075a4:	e7de      	b.n	8007564 <_malloc_r+0xa0>
 80075a6:	bf00      	nop
 80075a8:	2000060c 	.word	0x2000060c

080075ac <_realloc_r>:
 80075ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b0:	4680      	mov	r8, r0
 80075b2:	4614      	mov	r4, r2
 80075b4:	460e      	mov	r6, r1
 80075b6:	b921      	cbnz	r1, 80075c2 <_realloc_r+0x16>
 80075b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	4611      	mov	r1, r2
 80075be:	f7ff bf81 	b.w	80074c4 <_malloc_r>
 80075c2:	b92a      	cbnz	r2, 80075d0 <_realloc_r+0x24>
 80075c4:	f7ff ff12 	bl	80073ec <_free_r>
 80075c8:	4625      	mov	r5, r4
 80075ca:	4628      	mov	r0, r5
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	f000 f838 	bl	8007644 <_malloc_usable_size_r>
 80075d4:	4284      	cmp	r4, r0
 80075d6:	4607      	mov	r7, r0
 80075d8:	d802      	bhi.n	80075e0 <_realloc_r+0x34>
 80075da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075de:	d812      	bhi.n	8007606 <_realloc_r+0x5a>
 80075e0:	4621      	mov	r1, r4
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff ff6e 	bl	80074c4 <_malloc_r>
 80075e8:	4605      	mov	r5, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0ed      	beq.n	80075ca <_realloc_r+0x1e>
 80075ee:	42bc      	cmp	r4, r7
 80075f0:	4622      	mov	r2, r4
 80075f2:	4631      	mov	r1, r6
 80075f4:	bf28      	it	cs
 80075f6:	463a      	movcs	r2, r7
 80075f8:	f7ff fed0 	bl	800739c <memcpy>
 80075fc:	4631      	mov	r1, r6
 80075fe:	4640      	mov	r0, r8
 8007600:	f7ff fef4 	bl	80073ec <_free_r>
 8007604:	e7e1      	b.n	80075ca <_realloc_r+0x1e>
 8007606:	4635      	mov	r5, r6
 8007608:	e7df      	b.n	80075ca <_realloc_r+0x1e>
	...

0800760c <_sbrk_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_sbrk_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fff4 	bl	8001604 <_sbrk>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_sbrk_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_sbrk_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000614 	.word	0x20000614

0800762c <__malloc_lock>:
 800762c:	4801      	ldr	r0, [pc, #4]	; (8007634 <__malloc_lock+0x8>)
 800762e:	f000 b811 	b.w	8007654 <__retarget_lock_acquire_recursive>
 8007632:	bf00      	nop
 8007634:	20000618 	.word	0x20000618

08007638 <__malloc_unlock>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__malloc_unlock+0x8>)
 800763a:	f000 b80c 	b.w	8007656 <__retarget_lock_release_recursive>
 800763e:	bf00      	nop
 8007640:	20000618 	.word	0x20000618

08007644 <_malloc_usable_size_r>:
 8007644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007648:	1f18      	subs	r0, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfbc      	itt	lt
 800764e:	580b      	ldrlt	r3, [r1, r0]
 8007650:	18c0      	addlt	r0, r0, r3
 8007652:	4770      	bx	lr

08007654 <__retarget_lock_acquire_recursive>:
 8007654:	4770      	bx	lr

08007656 <__retarget_lock_release_recursive>:
 8007656:	4770      	bx	lr

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
