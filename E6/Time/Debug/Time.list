
Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c94  08007c94  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007c94  08007c94  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c94  08007c94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000095c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009d4  200009d4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a360  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec3  00000000  00000000  0003a408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  0003d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001490  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7af  00000000  00000000  0003fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac76  00000000  00000000  0005f477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1cdc  00000000  00000000  0007a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013bdc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006464  00000000  00000000  0013be1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a60 	.word	0x08007a60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007a60 	.word	0x08007a60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <set_alert_time>:



int alert_on = 0;

void set_alert_time(){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af02      	add	r7, sp, #8
	   int index = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
	   sscanf(alert_time, "%d:%d:%d", &time_to_fire.Hours, &time_to_fire.Minutes, &time_to_fire.Seconds) == 3;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <set_alert_time+0x24>)
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <set_alert_time+0x28>)
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <set_alert_time+0x2c>)
 8000292:	4907      	ldr	r1, [pc, #28]	; (80002b0 <set_alert_time+0x30>)
 8000294:	4807      	ldr	r0, [pc, #28]	; (80002b4 <set_alert_time+0x34>)
 8000296:	f006 fad9 	bl	800684c <siscanf>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000582 	.word	0x20000582
 80002a8:	20000581 	.word	0x20000581
 80002ac:	20000580 	.word	0x20000580
 80002b0:	08007a78 	.word	0x08007a78
 80002b4:	200005a8 	.word	0x200005a8

080002b8 <turn_on_leds>:




void turn_on_leds(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,1);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002c2:	4817      	ldr	r0, [pc, #92]	; (8000320 <turn_on_leds+0x68>)
 80002c4:	f001 fbc0 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,1);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ce:	4814      	ldr	r0, [pc, #80]	; (8000320 <turn_on_leds+0x68>)
 80002d0:	f001 fbba 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,1);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <turn_on_leds+0x68>)
 80002dc:	f001 fbb4 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <turn_on_leds+0x68>)
 80002e8:	f001 fbae 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <turn_on_leds+0x68>)
 80002f4:	f001 fba8 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4808      	ldr	r0, [pc, #32]	; (8000320 <turn_on_leds+0x68>)
 8000300:	f001 fba2 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,1);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <turn_on_leds+0x68>)
 800030c:	f001 fb9c 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,1);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <turn_on_leds+0x68>)
 8000318:	f001 fb96 	bl	8001a48 <HAL_GPIO_WritePin>

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	48001000 	.word	0x48001000

08000324 <turn_off_leds>:

void turn_off_leds(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8,0);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032e:	4817      	ldr	r0, [pc, #92]	; (800038c <turn_off_leds+0x68>)
 8000330:	f001 fb8a 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9,0);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033a:	4814      	ldr	r0, [pc, #80]	; (800038c <turn_off_leds+0x68>)
 800033c:	f001 fb84 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10,0);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000346:	4811      	ldr	r0, [pc, #68]	; (800038c <turn_off_leds+0x68>)
 8000348:	f001 fb7e 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11,0);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000352:	480e      	ldr	r0, [pc, #56]	; (800038c <turn_off_leds+0x68>)
 8000354:	f001 fb78 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035e:	480b      	ldr	r0, [pc, #44]	; (800038c <turn_off_leds+0x68>)
 8000360:	f001 fb72 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13,0);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	4808      	ldr	r0, [pc, #32]	; (800038c <turn_off_leds+0x68>)
 800036c:	f001 fb6c 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14,0);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <turn_off_leds+0x68>)
 8000378:	f001 fb66 	bl	8001a48 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15,0);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000382:	4802      	ldr	r0, [pc, #8]	; (800038c <turn_off_leds+0x68>)
 8000384:	f001 fb60 	bl	8001a48 <HAL_GPIO_WritePin>

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	48001000 	.word	0x48001000

08000390 <PWM_Start>:

uint32_t pwm_channel = TIM_CHANNEL_1;  // Specify configured PWM channel
TIM_HandleTypeDef *pwm_timer = &htim3;

void PWM_Start()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <PWM_Start+0x18>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <PWM_Start+0x1c>)
 800039a:	6812      	ldr	r2, [r2, #0]
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 fe2a 	bl	8003ff8 <HAL_TIM_PWM_Start>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000004 	.word	0x20000004
 80003ac:	200005cc 	.word	0x200005cc

080003b0 <set_start_time>:

void set_start_time(){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef start_t ;
	start_t.Hours = 12;
 80003b6:	230c      	movs	r3, #12
 80003b8:	713b      	strb	r3, [r7, #4]
	start_t.Minutes = 46;
 80003ba:	232e      	movs	r3, #46	; 0x2e
 80003bc:	717b      	strb	r3, [r7, #5]
	start_t.Seconds = 50;
 80003be:	2332      	movs	r3, #50	; 0x32
 80003c0:	71bb      	strb	r3, [r7, #6]
    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	4619      	mov	r1, r3
 80003c8:	4803      	ldr	r0, [pc, #12]	; (80003d8 <set_start_time+0x28>)
 80003ca:	f003 fa0c 	bl	80037e6 <HAL_RTC_SetTime>
}
 80003ce:	bf00      	nop
 80003d0:	3718      	adds	r7, #24
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000e8 	.word	0x200000e8

080003dc <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	80fb      	strh	r3, [r7, #6]
 80003e8:	4613      	mov	r3, r2
 80003ea:	80bb      	strh	r3, [r7, #4]
  if (pwm_freq == 0 || pwm_freq > 20000)
 80003ec:	88fb      	ldrh	r3, [r7, #6]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d004      	beq.n	80003fc <PWM_Change_Tone+0x20>
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d937      	bls.n	800046c <PWM_Change_Tone+0x90>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80003fc:	4b52      	ldr	r3, [pc, #328]	; (8000548 <PWM_Change_Tone+0x16c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <PWM_Change_Tone+0x34>
 8000404:	4b51      	ldr	r3, [pc, #324]	; (800054c <PWM_Change_Tone+0x170>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	e097      	b.n	8000540 <PWM_Change_Tone+0x164>
 8000410:	4b4d      	ldr	r3, [pc, #308]	; (8000548 <PWM_Change_Tone+0x16c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d105      	bne.n	8000424 <PWM_Change_Tone+0x48>
 8000418:	4b4c      	ldr	r3, [pc, #304]	; (800054c <PWM_Change_Tone+0x170>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	2300      	movs	r3, #0
 8000420:	6393      	str	r3, [r2, #56]	; 0x38
 8000422:	e08d      	b.n	8000540 <PWM_Change_Tone+0x164>
 8000424:	4b48      	ldr	r3, [pc, #288]	; (8000548 <PWM_Change_Tone+0x16c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b08      	cmp	r3, #8
 800042a:	d105      	bne.n	8000438 <PWM_Change_Tone+0x5c>
 800042c:	4b47      	ldr	r3, [pc, #284]	; (800054c <PWM_Change_Tone+0x170>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000436:	e083      	b.n	8000540 <PWM_Change_Tone+0x164>
 8000438:	4b43      	ldr	r3, [pc, #268]	; (8000548 <PWM_Change_Tone+0x16c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b0c      	cmp	r3, #12
 800043e:	d105      	bne.n	800044c <PWM_Change_Tone+0x70>
 8000440:	4b42      	ldr	r3, [pc, #264]	; (800054c <PWM_Change_Tone+0x170>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	2300      	movs	r3, #0
 8000448:	6413      	str	r3, [r2, #64]	; 0x40
 800044a:	e079      	b.n	8000540 <PWM_Change_Tone+0x164>
 800044c:	4b3e      	ldr	r3, [pc, #248]	; (8000548 <PWM_Change_Tone+0x16c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2b10      	cmp	r3, #16
 8000452:	d105      	bne.n	8000460 <PWM_Change_Tone+0x84>
 8000454:	4b3d      	ldr	r3, [pc, #244]	; (800054c <PWM_Change_Tone+0x170>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	2300      	movs	r3, #0
 800045c:	6593      	str	r3, [r2, #88]	; 0x58
 800045e:	e06f      	b.n	8000540 <PWM_Change_Tone+0x164>
 8000460:	4b3a      	ldr	r3, [pc, #232]	; (800054c <PWM_Change_Tone+0x170>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	2300      	movs	r3, #0
 8000468:	65d3      	str	r3, [r2, #92]	; 0x5c
 800046a:	e069      	b.n	8000540 <PWM_Change_Tone+0x164>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800046c:	f002 fece 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8000470:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	69fa      	ldr	r2, [r7, #28]
 8000476:	fbb2 f3f3 	udiv	r3, r2, r3
 800047a:	4a35      	ldr	r2, [pc, #212]	; (8000550 <PWM_Change_Tone+0x174>)
 800047c:	fba2 2303 	umull	r2, r3, r2, r3
 8000480:	0b9b      	lsrs	r3, r3, #14
 8000482:	b29b      	uxth	r3, r3
 8000484:	3301      	adds	r3, #1
 8000486:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000488:	8b7b      	ldrh	r3, [r7, #26]
 800048a:	69fa      	ldr	r2, [r7, #28]
 800048c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000490:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	fbb2 f3f3 	udiv	r3, r2, r3
 800049a:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 800049c:	88bb      	ldrh	r3, [r7, #4]
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	fb02 f303 	mul.w	r3, r2, r3
 80004a4:	4a2b      	ldr	r2, [pc, #172]	; (8000554 <PWM_Change_Tone+0x178>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	09db      	lsrs	r3, r3, #7
 80004ac:	60fb      	str	r3, [r7, #12]

    pwm_timer->Instance->PSC = prescaler - 1;
 80004ae:	8b7b      	ldrh	r3, [r7, #26]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	4b26      	ldr	r3, [pc, #152]	; (800054c <PWM_Change_Tone+0x170>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer->Instance->ARR = period_cycles - 1;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <PWM_Change_Tone+0x170>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	693a      	ldr	r2, [r7, #16]
 80004c2:	3a01      	subs	r2, #1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer->Instance->EGR = TIM_EGR_UG;
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <PWM_Change_Tone+0x170>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2201      	movs	r2, #1
 80004ce:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80004d0:	4b1d      	ldr	r3, [pc, #116]	; (8000548 <PWM_Change_Tone+0x16c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d105      	bne.n	80004e4 <PWM_Change_Tone+0x108>
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <PWM_Change_Tone+0x170>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80004e2:	e02d      	b.n	8000540 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <PWM_Change_Tone+0x16c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d105      	bne.n	80004f8 <PWM_Change_Tone+0x11c>
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <PWM_Change_Tone+0x170>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80004f6:	e023      	b.n	8000540 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80004f8:	4b13      	ldr	r3, [pc, #76]	; (8000548 <PWM_Change_Tone+0x16c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d105      	bne.n	800050c <PWM_Change_Tone+0x130>
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <PWM_Change_Tone+0x170>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800050a:	e019      	b.n	8000540 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <PWM_Change_Tone+0x16c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b0c      	cmp	r3, #12
 8000512:	d105      	bne.n	8000520 <PWM_Change_Tone+0x144>
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <PWM_Change_Tone+0x170>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800051e:	e00f      	b.n	8000540 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <PWM_Change_Tone+0x16c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b10      	cmp	r3, #16
 8000526:	d105      	bne.n	8000534 <PWM_Change_Tone+0x158>
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <PWM_Change_Tone+0x170>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000532:	e005      	b.n	8000540 <PWM_Change_Tone+0x164>
    __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <PWM_Change_Tone+0x170>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800053e:	e7ff      	b.n	8000540 <PWM_Change_Tone+0x164>
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200005cc 	.word	0x200005cc
 800054c:	20000004 	.word	0x20000004
 8000550:	45e7b273 	.word	0x45e7b273
 8000554:	10624dd3 	.word	0x10624dd3

08000558 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    if (htim2->Instance == TIM2)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000568:	d119      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0x46>
    {
      	check_time_fire();
 800056a:	f000 f821 	bl	80005b0 <check_time_fire>

  	  if(alert_on){
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d009      	beq.n	800058a <HAL_TIM_PeriodElapsedCallback+0x32>
  		  turn_on_leds();
 8000576:	f7ff fe9f 	bl	80002b8 <turn_on_leds>
  		  PWM_Change_Tone(freq, 150);
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x54>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	2196      	movs	r1, #150	; 0x96
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ff2a 	bl	80003dc <PWM_Change_Tone>

  	  }

    }

}
 8000588:	e009      	b.n	800059e <HAL_TIM_PeriodElapsedCallback+0x46>
  	  else if(alert_on == 0){
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d105      	bne.n	800059e <HAL_TIM_PeriodElapsedCallback+0x46>
  		  turn_off_leds();
 8000592:	f7ff fec7 	bl	8000324 <turn_off_leds>
    		PWM_Change_Tone(0, 150);
 8000596:	2196      	movs	r1, #150	; 0x96
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ff1f 	bl	80003dc <PWM_Change_Tone>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200005c8 	.word	0x200005c8
 80005ac:	20000000 	.word	0x20000000

080005b0 <check_time_fire>:

uint8_t timeStr[1000];

void check_time_fire(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af02      	add	r7, sp, #8
	  HAL_RTC_GetTime(&hrtc, &start_time, RTC_FORMAT_BIN);
 80005b6:	2200      	movs	r2, #0
 80005b8:	4918      	ldr	r1, [pc, #96]	; (800061c <check_time_fire+0x6c>)
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <check_time_fire+0x70>)
 80005bc:	f003 f9ad 	bl	800391a <HAL_RTC_GetTime>
	  sprintf(timeStr, "%2d:%2d:%2d\n", start_time.Hours, start_time.Minutes, start_time.Seconds);
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <check_time_fire+0x6c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <check_time_fire+0x6c>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <check_time_fire+0x6c>)
 80005ce:	789b      	ldrb	r3, [r3, #2]
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	460b      	mov	r3, r1
 80005d4:	4913      	ldr	r1, [pc, #76]	; (8000624 <check_time_fire+0x74>)
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <check_time_fire+0x78>)
 80005d8:	f006 f918 	bl	800680c <siprintf>
	  HAL_UART_Transmit(&huart3, timeStr, 9, HAL_MAX_DELAY);
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	2209      	movs	r2, #9
 80005e2:	4911      	ldr	r1, [pc, #68]	; (8000628 <check_time_fire+0x78>)
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <check_time_fire+0x7c>)
 80005e6:	f004 fe3f 	bl	8005268 <HAL_UART_Transmit>

	  if(start_time.Hours == time_to_fire.Hours && start_time.Minutes == time_to_fire.Minutes && start_time.Seconds == time_to_fire.Seconds){
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <check_time_fire+0x6c>)
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <check_time_fire+0x80>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d10e      	bne.n	8000614 <check_time_fire+0x64>
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <check_time_fire+0x6c>)
 80005f8:	785a      	ldrb	r2, [r3, #1]
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <check_time_fire+0x80>)
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d108      	bne.n	8000614 <check_time_fire+0x64>
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <check_time_fire+0x6c>)
 8000604:	789a      	ldrb	r2, [r3, #2]
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <check_time_fire+0x80>)
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	429a      	cmp	r2, r3
 800060c:	d102      	bne.n	8000614 <check_time_fire+0x64>
		  alert_on = 1;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <check_time_fire+0x84>)
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
	  }
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000594 	.word	0x20000594
 8000620:	200000e8 	.word	0x200000e8
 8000624:	08007a84 	.word	0x08007a84
 8000628:	200005d0 	.word	0x200005d0
 800062c:	20000204 	.word	0x20000204
 8000630:	20000580 	.word	0x20000580
 8000634:	200005c8 	.word	0x200005c8

08000638 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	static uint32_t time = 0;
	if (HAL_GetTick()-time > 500){
 8000642:	f000 fecf 	bl	80013e4 <HAL_GetTick>
 8000646:	4602      	mov	r2, r0
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <HAL_GPIO_EXTI_Callback+0x3c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000652:	d90a      	bls.n	800066a <HAL_GPIO_EXTI_Callback+0x32>
		if (GPIO_Pin == GPIO_PIN_0)
 8000654:	88fb      	ldrh	r3, [r7, #6]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d107      	bne.n	800066a <HAL_GPIO_EXTI_Callback+0x32>
		{
			alert_on = 0;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <HAL_GPIO_EXTI_Callback+0x40>)
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
			time = HAL_GetTick();
 8000660:	f000 fec0 	bl	80013e4 <HAL_GetTick>
 8000664:	4603      	mov	r3, r0
 8000666:	4a03      	ldr	r2, [pc, #12]	; (8000674 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000668:	6013      	str	r3, [r2, #0]
		}
	}
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200009b8 	.word	0x200009b8
 8000678:	200005c8 	.word	0x200005c8

0800067c <uart_rx_enable_it>:

void uart_rx_enable_it(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	4903      	ldr	r1, [pc, #12]	; (8000690 <uart_rx_enable_it+0x14>)
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <uart_rx_enable_it+0x18>)
 8000686:	f004 fe79 	bl	800537c <HAL_UART_Receive_IT>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000578 	.word	0x20000578
 8000694:	20000204 	.word	0x20000204

08000698 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart3){
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af02      	add	r7, sp, #8
 800069e:	6078      	str	r0, [r7, #4]
    if (huart3->Instance == USART3){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a36      	ldr	r2, [pc, #216]	; (8000780 <HAL_UART_RxCpltCallback+0xe8>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d163      	bne.n	8000772 <HAL_UART_RxCpltCallback+0xda>
    	if(character != 10){
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b0a      	cmp	r3, #10
 80006b0:	d009      	beq.n	80006c6 <HAL_UART_RxCpltCallback+0x2e>
//			  HAL_UART_Transmit(&huart3, alert_time, 9, HAL_MAX_DELAY);
			  alert_time[index_arr++] = character;
 80006b2:	4b35      	ldr	r3, [pc, #212]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	4933      	ldr	r1, [pc, #204]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006ba:	600a      	str	r2, [r1, #0]
 80006bc:	4a31      	ldr	r2, [pc, #196]	; (8000784 <HAL_UART_RxCpltCallback+0xec>)
 80006be:	7811      	ldrb	r1, [r2, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 80006c2:	54d1      	strb	r1, [r2, r3]
 80006c4:	e055      	b.n	8000772 <HAL_UART_RxCpltCallback+0xda>
    	}
    	else{
    		  if (alert_time[0]=='s'){
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b73      	cmp	r3, #115	; 0x73
 80006cc:	d120      	bne.n	8000710 <HAL_UART_RxCpltCallback+0x78>
    			  RTC_TimeTypeDef start_t ;
    			  alert_time[index_arr++] = '\0';
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	492c      	ldr	r1, [pc, #176]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006d6:	600a      	str	r2, [r1, #0]
 80006d8:	4a2c      	ldr	r2, [pc, #176]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 80006da:	2100      	movs	r1, #0
 80006dc:	54d1      	strb	r1, [r2, r3]
    			  index_arr = 0;
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
    			   sscanf(alert_time, "s%d:%d:%d", &start_t.Hours, &start_t.Minutes, &start_t.Seconds) == 3;
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	f107 020c 	add.w	r2, r7, #12
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	3302      	adds	r3, #2
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	460b      	mov	r3, r1
 80006f8:	4925      	ldr	r1, [pc, #148]	; (8000790 <HAL_UART_RxCpltCallback+0xf8>)
 80006fa:	4824      	ldr	r0, [pc, #144]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 80006fc:	f006 f8a6 	bl	800684c <siscanf>
    			   HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	4822      	ldr	r0, [pc, #136]	; (8000794 <HAL_UART_RxCpltCallback+0xfc>)
 800070a:	f003 f86c 	bl	80037e6 <HAL_RTC_SetTime>
 800070e:	e030      	b.n	8000772 <HAL_UART_RxCpltCallback+0xda>

    		  }
    		  else if (alert_time[0]=='A'){
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b41      	cmp	r3, #65	; 0x41
 8000716:	d107      	bne.n	8000728 <HAL_UART_RxCpltCallback+0x90>
    			  freq = 2000;
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <HAL_UART_RxCpltCallback+0x100>)
 800071a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800071e:	601a      	str	r2, [r3, #0]
    			  index_arr = 0;
 8000720:	4b19      	ldr	r3, [pc, #100]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e024      	b.n	8000772 <HAL_UART_RxCpltCallback+0xda>

    		  }
    		  else if (alert_time[0]=='B'){
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b42      	cmp	r3, #66	; 0x42
 800072e:	d107      	bne.n	8000740 <HAL_UART_RxCpltCallback+0xa8>
    			  freq = 1000;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_UART_RxCpltCallback+0x100>)
 8000732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000736:	601a      	str	r2, [r3, #0]
    			  index_arr = 0;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	e018      	b.n	8000772 <HAL_UART_RxCpltCallback+0xda>

    		  }
    		  else if (alert_time[0]=='C'){
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b43      	cmp	r3, #67	; 0x43
 8000746:	d107      	bne.n	8000758 <HAL_UART_RxCpltCallback+0xc0>
    			  freq = 500;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_UART_RxCpltCallback+0x100>)
 800074a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800074e:	601a      	str	r2, [r3, #0]
    			  index_arr = 0;
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e00c      	b.n	8000772 <HAL_UART_RxCpltCallback+0xda>

    		  }

    		  else{
			  alert_time[index_arr++] = '\0';
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	490a      	ldr	r1, [pc, #40]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 8000760:	600a      	str	r2, [r1, #0]
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_UART_RxCpltCallback+0xf4>)
 8000764:	2100      	movs	r1, #0
 8000766:	54d1      	strb	r1, [r2, r3]
			  index_arr = 0;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_UART_RxCpltCallback+0xf0>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			  set_alert_time();
 800076e:	f7ff fd87 	bl	8000280 <set_alert_time>
    		  }
    	}

    }
    uart_rx_enable_it();
 8000772:	f7ff ff83 	bl	800067c <uart_rx_enable_it>
}
 8000776:	bf00      	nop
 8000778:	3720      	adds	r7, #32
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40004800 	.word	0x40004800
 8000784:	20000578 	.word	0x20000578
 8000788:	2000057c 	.word	0x2000057c
 800078c:	200005a8 	.word	0x200005a8
 8000790:	08007a94 	.word	0x08007a94
 8000794:	200000e8 	.word	0x200000e8
 8000798:	20000000 	.word	0x20000000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09e      	sub	sp, #120	; 0x78
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fdc5 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f843 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f000 fa99 	bl	8000ce0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ae:	f000 f8a7 	bl	8000900 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007b2:	f000 f93f 	bl	8000a34 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80007b6:	f000 fa71 	bl	8000c9c <MX_USB_PCD_Init>
  MX_RTC_Init();
 80007ba:	f000 f8e1 	bl	8000980 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80007be:	f000 fa3d 	bl	8000c3c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80007c2:	f000 f975 	bl	8000ab0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007c6:	f000 f9c1 	bl	8000b4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef mytime ;
  char timeStr[100];
  mytime.Hours = 19;
 80007ca:	2313      	movs	r3, #19
 80007cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  mytime.Minutes = 36;
 80007d0:	2324      	movs	r3, #36	; 0x24
 80007d2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  mytime.Seconds = 10;
 80007d6:	230a      	movs	r3, #10
 80007d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
//  HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
  time_to_fire.Hours = -1;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <main+0x84>)
 80007de:	22ff      	movs	r2, #255	; 0xff
 80007e0:	701a      	strb	r2, [r3, #0]
  time_to_fire.Minutes = 0;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <main+0x84>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	705a      	strb	r2, [r3, #1]
  time_to_fire.Seconds = 0;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <main+0x84>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	709a      	strb	r2, [r3, #2]
//  init_time();
  HAL_TIM_Base_Start_IT(&htim2);
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <main+0x88>)
 80007f0:	f003 fb36 	bl	8003e60 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <main+0x8c>)
 80007f6:	f003 fb33 	bl	8003e60 <HAL_TIM_Base_Start_IT>

  PWM_Start();
 80007fa:	f7ff fdc9 	bl	8000390 <PWM_Start>
  set_start_time();
 80007fe:	f7ff fdd7 	bl	80003b0 <set_start_time>
  uart_rx_enable_it();
 8000802:	f7ff ff3b 	bl	800067c <uart_rx_enable_it>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8000806:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800080a:	2200      	movs	r2, #0
 800080c:	4619      	mov	r1, r3
 800080e:	4807      	ldr	r0, [pc, #28]	; (800082c <main+0x90>)
 8000810:	f003 f883 	bl	800391a <HAL_RTC_GetTime>
//	  sprintf(timeStr, "%2d:%2d:%2d-%2d\n", mytime.Hours, mytime.Minutes, mytime.Seconds, index_arr);
//	  HAL_UART_Transmit(&huart3, timeStr, 12, HAL_MAX_DELAY);
//	  sprintf(timeStr, "%2d:%2d:%2d\n", time_to_fire.Hours, time_to_fire.Minutes, time_to_fire.Seconds);
//	  HAL_UART_Transmit(&huart3, timeStr, 9, HAL_MAX_DELAY);

	  HAL_Delay(2000);
 8000814:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000818:	f000 fdf0 	bl	80013fc <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 800081c:	e7f3      	b.n	8000806 <main+0x6a>
 800081e:	bf00      	nop
 8000820:	20000580 	.word	0x20000580
 8000824:	2000016c 	.word	0x2000016c
 8000828:	200001b8 	.word	0x200001b8
 800082c:	200000e8 	.word	0x200000e8

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09e      	sub	sp, #120	; 0x78
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800083a:	2228      	movs	r2, #40	; 0x28
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 ffdc 	bl	80067fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	223c      	movs	r2, #60	; 0x3c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 ffce 	bl	80067fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000860:	230b      	movs	r3, #11
 8000862:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000864:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000872:	2310      	movs	r3, #16
 8000874:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000876:	2301      	movs	r3, #1
 8000878:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000882:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000884:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000888:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fb02 	bl	8001e98 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800089a:	f000 faa9 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fb2a 	bl	8002f14 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c6:	f000 fa93 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <SystemClock_Config+0xcc>)
 80008cc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80008dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fd4b 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f0:	f000 fa7e 	bl	8000df0 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3778      	adds	r7, #120	; 0x78
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	00030024 	.word	0x00030024

08000900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C1_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C1_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C1_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C1_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C1_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C1_Init+0x74>)
 800093c:	f001 f8b4 	bl	8001aa8 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 fa53 	bl	8000df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C1_Init+0x74>)
 800094e:	f001 f93a 	bl	8001bc6 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fa4a 	bl	8000df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C1_Init+0x74>)
 8000960:	f001 f97c 	bl	8001c5c <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fa41 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000094 	.word	0x20000094
 8000978:	40005400 	.word	0x40005400
 800097c:	2000090e 	.word	0x2000090e

08000980 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_RTC_Init+0xac>)
 800099a:	4a25      	ldr	r2, [pc, #148]	; (8000a30 <MX_RTC_Init+0xb0>)
 800099c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_RTC_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_RTC_Init+0xac>)
 80009a6:	2227      	movs	r2, #39	; 0x27
 80009a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_RTC_Init+0xac>)
 80009ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_RTC_Init+0xac>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_RTC_Init+0xac>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_RTC_Init+0xac>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c4:	4819      	ldr	r0, [pc, #100]	; (8000a2c <MX_RTC_Init+0xac>)
 80009c6:	f002 fe8b 	bl	80036e0 <HAL_RTC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80009d0:	f000 fa0e 	bl	8000df0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80009d8:	2300      	movs	r3, #0
 80009da:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009dc:	2300      	movs	r3, #0
 80009de:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_RTC_Init+0xac>)
 80009f0:	f002 fef9 	bl	80037e6 <HAL_RTC_SetTime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80009fa:	f000 f9f9 	bl	8000df0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009fe:	2301      	movs	r3, #1
 8000a00:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a02:	2301      	movs	r3, #1
 8000a04:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_RTC_Init+0xac>)
 8000a16:	f002 ffde 	bl	80039d6 <HAL_RTC_SetDate>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000a20:	f000 f9e6 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000e8 	.word	0x200000e8
 8000a30:	40002800 	.word	0x40002800

08000a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_SPI1_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_SPI1_Init+0x74>)
 8000a94:	f003 f8e2 	bl	8003c5c <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f9a7 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000108 	.word	0x20000108
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 46000-1;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ad8:	f24b 32af 	movw	r2, #45999	; 0xb3af
 8000adc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af8:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000afa:	f003 f95a 	bl	8003db2 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b04:	f000 f974 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000b16:	f003 fda3 	bl	8004660 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 f966 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_TIM2_Init+0x98>)
 8000b32:	f004 faad 	bl	8005090 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 f958 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000016c 	.word	0x2000016c

08000b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000b80:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <MX_TIM3_Init+0xec>)
 8000b82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 45000-1;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000b86:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8000b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ba6:	4823      	ldr	r0, [pc, #140]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000ba8:	f003 f903 	bl	8003db2 <HAL_TIM_Base_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000bb2:	f000 f91d 	bl	8000df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481c      	ldr	r0, [pc, #112]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000bc4:	f003 fd4c 	bl	8004660 <HAL_TIM_ConfigClockSource>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000bce:	f000 f90f 	bl	8000df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000bd4:	f003 f9ae 	bl	8003f34 <HAL_TIM_PWM_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bde:	f000 f907 	bl	8000df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4810      	ldr	r0, [pc, #64]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000bf2:	f004 fa4d 	bl	8005090 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bfc:	f000 f8f8 	bl	8000df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c00:	2360      	movs	r3, #96	; 0x60
 8000c02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	4807      	ldr	r0, [pc, #28]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000c18:	f003 fc0e 	bl	8004438 <HAL_TIM_PWM_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c22:	f000 f8e5 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <MX_TIM3_Init+0xe8>)
 8000c28:	f000 f9f8 	bl	800101c <HAL_TIM_MspPostInit>

}
 8000c2c:	bf00      	nop
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200001b8 	.word	0x200001b8
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART3_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c80:	f004 faa4 	bl	80051cc <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 f8b1 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000204 	.word	0x20000204
 8000c98:	40004800 	.word	0x40004800

08000c9c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <MX_USB_PCD_Init+0x40>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000ca8:	2208      	movs	r2, #8
 8000caa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cae:	2202      	movs	r2, #2
 8000cb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USB_PCD_Init+0x3c>)
 8000cc6:	f001 f815 	bl	8001cf4 <HAL_PCD_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000cd0:	f000 f88e 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000028c 	.word	0x2000028c
 8000cdc:	40005c00 	.word	0x40005c00

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf6:	4b3c      	ldr	r3, [pc, #240]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a3b      	ldr	r2, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d18:	6153      	str	r3, [r2, #20]
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d76:	f000 fe67 	bl	8001a48 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000d7a:	2336      	movs	r3, #54	; 0x36
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4817      	ldr	r0, [pc, #92]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000d90:	f000 fce0 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000d94:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000d98:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <MX_GPIO_Init+0x10c>)
 8000dae:	f000 fcd1 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f000 fcc3 	bl	8001754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 fc11 	bl	80015fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd8:	2006      	movs	r0, #6
 8000dda:	f000 fc2a 	bl	8001632 <HAL_NVIC_EnableIRQ>

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48001000 	.word	0x48001000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f000 fbd6 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a17      	ldr	r2, [pc, #92]	; (8000ec0 <HAL_I2C_MspInit+0x7c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d127      	bne.n	8000eb6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a16      	ldr	r2, [pc, #88]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e7e:	23c0      	movs	r3, #192	; 0xc0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e82:	2312      	movs	r3, #18
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_I2C_MspInit+0x84>)
 8000e9a:	f000 fc5b 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_I2C_MspInit+0x80>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400

08000ecc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_RTC_MspInit+0x44>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d111      	bne.n	8000f02 <HAL_RTC_MspInit+0x36>
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eec:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eee:	fab3 f383 	clz	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RTC_MspInit+0x48>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	461a      	mov	r2, r3
 8000efe:	2301      	movs	r3, #1
 8000f00:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40002800 	.word	0x40002800
 8000f14:	10908100 	.word	0x10908100

08000f18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_SPI_MspInit+0x7c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d128      	bne.n	8000f8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f44:	6193      	str	r3, [r2, #24]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_SPI_MspInit+0x80>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f6a:	23e0      	movs	r3, #224	; 0xe0
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fbe4 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40013000 	.word	0x40013000
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fac:	d114      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	201c      	movs	r0, #28
 8000fcc:	f000 fb15 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd0:	201c      	movs	r0, #28
 8000fd2:	f000 fb2e 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fd6:	e018      	b.n	800100a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_TIM_Base_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x78>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 fafb 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f000 fb14 	bl	8001632 <HAL_NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	40000400 	.word	0x40000400

0800101c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_TIM_MspPostInit+0x64>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11b      	bne.n	8001076 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_TIM_MspPostInit+0x68>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <HAL_TIM_MspPostInit+0x68>)
 8001044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_TIM_MspPostInit+0x68>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <HAL_TIM_MspPostInit+0x6c>)
 8001072:	f000 fb6f 	bl	8001754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40000400 	.word	0x40000400
 8001084:	40021000 	.word	0x40021000
 8001088:	48000800 	.word	0x48000800

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_UART_MspInit+0x8c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d130      	bne.n	8001110 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_UART_MspInit+0x90>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_UART_MspInit+0x90>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_UART_MspInit+0x90>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x90>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x90>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6153      	str	r3, [r2, #20]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x90>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_UART_MspInit+0x94>)
 80010fc:	f000 fb2a 	bl	8001754 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2027      	movs	r0, #39	; 0x27
 8001106:	f000 fa78 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800110a:	2027      	movs	r0, #39	; 0x27
 800110c:	f000 fa91 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40004800 	.word	0x40004800
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400

08001124 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_PCD_MspInit+0x80>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d129      	bne.n	800119a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800115e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001170:	230e      	movs	r3, #14
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f000 fae9 	bl	8001754 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 8001188:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_PCD_MspInit+0x84>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40005c00 	.word	0x40005c00
 80011a8:	40021000 	.word	0x40021000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 f8e0 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 fc37 	bl	8001a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f002 ffef 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000016c 	.word	0x2000016c

08001224 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM3_IRQHandler+0x10>)
 800122a:	f002 ffe5 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001b8 	.word	0x200001b8

08001238 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART3_IRQHandler+0x10>)
 800123e:	f004 f8e1 	bl	8005404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000204 	.word	0x20000204

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f005 fa94 	bl	80067a8 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000a000 	.word	0x2000a000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200009bc 	.word	0x200009bc
 80012b4:	200009d8 	.word	0x200009d8

080012b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <SystemInit+0x20>)
 80012be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <SystemInit+0x20>)
 80012c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e0:	f7ff ffea 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490d      	ldr	r1, [pc, #52]	; (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f005 fa53 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800130e:	f7ff fa45 	bl	800079c <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001314:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001320:	08007c9c 	.word	0x08007c9c
  ldr r2, =_sbss
 8001324:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001328:	200009d4 	.word	0x200009d4

0800132c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_2_IRQHandler>
	...

08001330 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x28>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x28>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f94f 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fd56 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f967 	bl	800164e <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 f92f 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000010 	.word	0x20000010
 80013b8:	2000000c 	.word	0x2000000c

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000010 	.word	0x20000010
 80013e0:	200009c0 	.word	0x200009c0

080013e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200009c0 	.word	0x200009c0

080013fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000010 	.word	0x20000010

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	; (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	; (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	; (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	; 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff8e 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff29 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff3e 	bl	800148c <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff8e 	bl	8001538 <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff31 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001674:	2b02      	cmp	r3, #2
 8001676:	d008      	beq.n	800168a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2204      	movs	r2, #4
 800167c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e020      	b.n	80016cc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 020e 	bic.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e027      	b.n	800174a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	4798      	blx	r3
    } 
  }
  return status;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e154      	b.n	8001a0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 8146 	beq.w	8001a08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d005      	beq.n	8001794 <HAL_GPIO_Init+0x40>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80a0 	beq.w	8001a08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <HAL_GPIO_Init+0x2d8>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_GPIO_Init+0x2d8>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <HAL_GPIO_Init+0x2d8>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018e0:	4a53      	ldr	r2, [pc, #332]	; (8001a30 <HAL_GPIO_Init+0x2dc>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800190a:	d019      	beq.n	8001940 <HAL_GPIO_Init+0x1ec>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a49      	ldr	r2, [pc, #292]	; (8001a34 <HAL_GPIO_Init+0x2e0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1e8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a48      	ldr	r2, [pc, #288]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a47      	ldr	r2, [pc, #284]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1e0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a46      	ldr	r2, [pc, #280]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1dc>
 800192c:	2304      	movs	r3, #4
 800192e:	e008      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001930:	2305      	movs	r3, #5
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001934:	2303      	movs	r3, #3
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x1ee>
 8001940:	2300      	movs	r3, #0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001952:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_GPIO_Init+0x2dc>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001984:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198a:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d8:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f aea3 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fdce 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e081      	b.n	8001bbe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff f9b8 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e006      	b.n	8001b30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d104      	bne.n	8001b42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69d9      	ldr	r1, [r3, #28]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1a      	ldr	r2, [r3, #32]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2220      	movs	r2, #32
 8001baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d138      	bne.n	8001c4e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e032      	b.n	8001c50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2224      	movs	r2, #36	; 0x24
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0201 	bic.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c18:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6819      	ldr	r1, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c4e:	2302      	movs	r3, #2
  }
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d139      	bne.n	8001ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e033      	b.n	8001ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf6:	b08b      	sub	sp, #44	; 0x2c
 8001cf8:	af06      	add	r7, sp, #24
 8001cfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0c4      	b.n	8001e90 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fa02 	bl	8001124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2203      	movs	r2, #3
 8001d24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fcff 	bl	8006730 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e040      	b.n	8001dba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3301      	adds	r3, #1
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3303      	adds	r3, #3
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3338      	adds	r3, #56	; 0x38
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	333c      	adds	r3, #60	; 0x3c
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3340      	adds	r3, #64	; 0x40
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3b9      	bcc.n	8001d38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e044      	b.n	8001e54 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	3301      	adds	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d3b5      	bcc.n	8001dca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	687e      	ldr	r6, [r7, #4]
 8001e66:	466d      	mov	r5, sp
 8001e68:	f106 0410 	add.w	r4, r6, #16
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	602b      	str	r3, [r5, #0]
 8001e74:	1d33      	adds	r3, r6, #4
 8001e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e78:	6838      	ldr	r0, [r7, #0]
 8001e7a:	f004 fc74 	bl	8006766 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f001 b823 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 817d 	beq.w	80021ce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ed4:	4bbc      	ldr	r3, [pc, #752]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d00c      	beq.n	8001efa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee0:	4bb9      	ldr	r3, [pc, #740]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d15c      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x10e>
 8001eec:	4bb6      	ldr	r3, [pc, #728]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d155      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x10e>
 8001efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001f0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_OscConfig+0x94>
 8001f26:	4ba8      	ldr	r3, [pc, #672]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f54:	4b9c      	ldr	r3, [pc, #624]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001f60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 811f 	beq.w	80021cc <HAL_RCC_OscConfig+0x334>
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 8116 	bne.w	80021cc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f000 bfaf 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
 8001fb8:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a82      	ldr	r2, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e036      	b.n	8002034 <HAL_RCC_OscConfig+0x19c>
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x158>
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7b      	ldr	r2, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a78      	ldr	r2, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e021      	b.n	8002034 <HAL_RCC_OscConfig+0x19c>
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x184>
 8002002:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a70      	ldr	r2, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6d      	ldr	r2, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x19c>
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f023 020f 	bic.w	r2, r3, #15
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	495f      	ldr	r1, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800204a:	4313      	orrs	r3, r2
 800204c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d059      	beq.n	8002112 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7ff f9c1 	bl	80013e4 <HAL_GetTick>
 8002062:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff f9bc 	bl	80013e4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d902      	bls.n	800207e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	f000 bf43 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002092:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0x218>
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e015      	b.n	80020dc <HAL_RCC_OscConfig+0x244>
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80020c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80020cc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80020e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80020e8:	fa92 f2a2 	rbit	r2, r2
 80020ec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80020f0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	f002 021f 	and.w	r2, r2, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ab      	beq.n	8002068 <HAL_RCC_OscConfig+0x1d0>
 8002110:	e05d      	b.n	80021ce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7ff f967 	bl	80013e4 <HAL_GetTick>
 8002116:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff f962 	bl	80013e4 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	; 0x64
 800212a:	d902      	bls.n	8002132 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	f000 bee9 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002136:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002146:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x2cc>
 800215e:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e015      	b.n	8002190 <HAL_RCC_OscConfig+0x2f8>
 8002164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002168:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002180:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RCC_OscConfig+0x330>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002194:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002198:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80021a4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f002 021f 	and.w	r2, r2, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ab      	bne.n	800211c <HAL_RCC_OscConfig+0x284>
 80021c4:	e003      	b.n	80021ce <HAL_RCC_OscConfig+0x336>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 817d 	beq.w	80024de <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021e4:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021f0:	4ba3      	ldr	r3, [pc, #652]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d172      	bne.n	80022e2 <HAL_RCC_OscConfig+0x44a>
 80021fc:	4ba0      	ldr	r3, [pc, #640]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d16c      	bne.n	80022e2 <HAL_RCC_OscConfig+0x44a>
 8002208:	2302      	movs	r3, #2
 800220a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800221a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_OscConfig+0x3a0>
 8002232:	4b93      	ldr	r3, [pc, #588]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x3c8>
 8002238:	2302      	movs	r3, #2
 800223a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002250:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2202      	movs	r2, #2
 8002262:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002266:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800226a:	fa92 f2a2 	rbit	r2, r2
 800226e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002272:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002276:	fab2 f282 	clz	r2, r2
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	f042 0220 	orr.w	r2, r2, #32
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	f002 021f 	and.w	r2, r2, #31
 8002286:	2101      	movs	r1, #1
 8002288:	fa01 f202 	lsl.w	r2, r1, r2
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCC_OscConfig+0x410>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d002      	beq.n	80022a8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f000 be2e 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b75      	ldr	r3, [pc, #468]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	21f8      	movs	r1, #248	; 0xf8
 80022be:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80022c6:	fa91 f1a1 	rbit	r1, r1
 80022ca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80022ce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80022d2:	fab1 f181 	clz	r1, r1
 80022d6:	b2c9      	uxtb	r1, r1
 80022d8:	408b      	lsls	r3, r1
 80022da:	4969      	ldr	r1, [pc, #420]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e0:	e0fd      	b.n	80024de <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8088 	beq.w	8002404 <HAL_RCC_OscConfig+0x56c>
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002306:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	461a      	mov	r2, r3
 800231c:	2301      	movs	r3, #1
 800231e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff f860 	bl	80013e4 <HAL_GetTick>
 8002324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff f85b 	bl	80013e4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	f000 bde2 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002352:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x4d8>
 800236a:	4b45      	ldr	r3, [pc, #276]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e013      	b.n	8002398 <HAL_RCC_OscConfig+0x500>
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002382:	2302      	movs	r3, #2
 8002384:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002388:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002394:	4b3a      	ldr	r3, [pc, #232]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800239e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80023aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f042 0220 	orr.w	r2, r2, #32
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f002 021f 	and.w	r2, r2, #31
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0af      	beq.n	800232a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	21f8      	movs	r1, #248	; 0xf8
 80023e0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80023e8:	fa91 f1a1 	rbit	r1, r1
 80023ec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80023f0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80023f4:	fab1 f181 	clz	r1, r1
 80023f8:	b2c9      	uxtb	r1, r1
 80023fa:	408b      	lsls	r3, r1
 80023fc:	4920      	ldr	r1, [pc, #128]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
 8002402:	e06c      	b.n	80024de <HAL_RCC_OscConfig+0x646>
 8002404:	2301      	movs	r3, #1
 8002406:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	461a      	mov	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe ffd8 	bl	80013e4 <HAL_GetTick>
 8002434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243a:	f7fe ffd3 	bl	80013e4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	f000 bd5a 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d104      	bne.n	8002484 <HAL_RCC_OscConfig+0x5ec>
 800247a:	4b01      	ldr	r3, [pc, #4]	; (8002480 <HAL_RCC_OscConfig+0x5e8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	e015      	b.n	80024ac <HAL_RCC_OscConfig+0x614>
 8002480:	40021000 	.word	0x40021000
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002496:	2302      	movs	r3, #2
 8002498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800249c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024a8:	4bc8      	ldr	r3, [pc, #800]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2202      	movs	r2, #2
 80024ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80024b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80024be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0220 	orr.w	r2, r2, #32
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ad      	bne.n	800243a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8110 	beq.w	8002714 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d079      	beq.n	80025f8 <HAL_RCC_OscConfig+0x760>
 8002504:	2301      	movs	r3, #1
 8002506:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4bab      	ldr	r3, [pc, #684]	; (80027d0 <HAL_RCC_OscConfig+0x938>)
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252e:	f7fe ff59 	bl	80013e4 <HAL_GetTick>
 8002532:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e00a      	b.n	800254e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe ff54 	bl	80013e4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	f000 bcdb 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 800254e:	2302      	movs	r3, #2
 8002550:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a8:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 80025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b4:	2102      	movs	r1, #2
 80025b6:	6019      	str	r1, [r3, #0]
 80025b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f1a3 	rbit	r1, r3
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025ce:	6019      	str	r1, [r3, #0]
  return result;
 80025d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0a0      	beq.n	8002538 <HAL_RCC_OscConfig+0x6a0>
 80025f6:	e08d      	b.n	8002714 <HAL_RCC_OscConfig+0x87c>
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002608:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	fa93 f2a3 	rbit	r2, r3
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800261a:	601a      	str	r2, [r3, #0]
  return result;
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002624:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <HAL_RCC_OscConfig+0x938>)
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	461a      	mov	r2, r3
 8002636:	2300      	movs	r3, #0
 8002638:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe fed3 	bl	80013e4 <HAL_GetTick>
 800263e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fece 	bl	80013e4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d902      	bls.n	800265a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	f000 bc55 	b.w	8002f04 <HAL_RCC_OscConfig+0x106c>
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002686:	2202      	movs	r2, #2
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	fa93 f2a3 	rbit	r2, r3
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026aa:	2202      	movs	r2, #2
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80026c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 80026c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026d2:	2102      	movs	r1, #2
 80026d4:	6019      	str	r1, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f1a3 	rbit	r1, r3
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026ec:	6019      	str	r1, [r3, #0]
  return result;
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2101      	movs	r1, #1
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d197      	bne.n	8002644 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 81a1 	beq.w	8002a6c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002730:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d116      	bne.n	800276a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	61d3      	str	r3, [r2, #28]
 8002748:	4b20      	ldr	r3, [pc, #128]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002762:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <HAL_RCC_OscConfig+0x93c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11a      	bne.n	80027ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b17      	ldr	r3, [pc, #92]	; (80027d4 <HAL_RCC_OscConfig+0x93c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_RCC_OscConfig+0x93c>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fe2f 	bl	80013e4 <HAL_GetTick>
 8002786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	e009      	b.n	80027a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe fe2a 	bl	80013e4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e3b1      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_RCC_OscConfig+0x93c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x940>
 80027bc:	4b03      	ldr	r3, [pc, #12]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a02      	ldr	r2, [pc, #8]	; (80027cc <HAL_RCC_OscConfig+0x934>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e03c      	b.n	8002844 <HAL_RCC_OscConfig+0x9ac>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	10908120 	.word	0x10908120
 80027d4:	40007000 	.word	0x40007000
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x96a>
 80027e8:	4bc1      	ldr	r3, [pc, #772]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4ac0      	ldr	r2, [pc, #768]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	4bbe      	ldr	r3, [pc, #760]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4abd      	ldr	r2, [pc, #756]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e020      	b.n	8002844 <HAL_RCC_OscConfig+0x9ac>
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x994>
 8002812:	4bb7      	ldr	r3, [pc, #732]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4ab6      	ldr	r2, [pc, #728]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4bb4      	ldr	r3, [pc, #720]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4ab3      	ldr	r2, [pc, #716]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6213      	str	r3, [r2, #32]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x9ac>
 800282c:	4bb0      	ldr	r3, [pc, #704]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4aaf      	ldr	r2, [pc, #700]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	4bad      	ldr	r3, [pc, #692]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4aac      	ldr	r2, [pc, #688]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8081 	beq.w	8002958 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002856:	f7fe fdc5 	bl	80013e4 <HAL_GetTick>
 800285a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe fdc0 	bl	80013e4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e345      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f2a3 	rbit	r2, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028a4:	2202      	movs	r2, #2
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028be:	601a      	str	r2, [r3, #0]
  return result;
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80028c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_OscConfig+0xa4c>
 80028de:	4b84      	ldr	r3, [pc, #528]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0xa74>
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028ec:	2202      	movs	r2, #2
 80028ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002910:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002914:	2102      	movs	r1, #2
 8002916:	6011      	str	r1, [r2, #0]
 8002918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	fa92 f1a2 	rbit	r1, r2
 8002926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800292a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800292e:	6011      	str	r1, [r2, #0]
  return result;
 8002930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002934:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	fab2 f282 	clz	r2, r2
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	f002 021f 	and.w	r2, r2, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f202 	lsl.w	r2, r1, r2
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d084      	beq.n	8002860 <HAL_RCC_OscConfig+0x9c8>
 8002956:	e07f      	b.n	8002a58 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fe fd44 	bl	80013e4 <HAL_GetTick>
 800295c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00b      	b.n	800297a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fd3f 	bl	80013e4 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e2c4      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fa93 f2a3 	rbit	r2, r3
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	fa93 f2a3 	rbit	r2, r3
 80029b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029c0:	601a      	str	r2, [r3, #0]
  return result;
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80029ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0302 	orr.w	r3, r3, #2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0xb4e>
 80029e0:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0xb76>
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029ee:	2202      	movs	r2, #2
 80029f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	fa93 f2a3 	rbit	r2, r3
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a16:	2102      	movs	r1, #2
 8002a18:	6011      	str	r1, [r2, #0]
 8002a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a1e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	fa92 f1a2 	rbit	r1, r2
 8002a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a30:	6011      	str	r1, [r2, #0]
  return result;
 8002a32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a36:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	fab2 f282 	clz	r2, r2
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d184      	bne.n	8002962 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8242 	beq.w	8002f02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_RCC_OscConfig+0xc58>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	f000 8213 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f040 8162 	bne.w	8002d62 <HAL_RCC_OscConfig+0xeca>
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002aa6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ac2:	601a      	str	r2, [r3, #0]
  return result;
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002acc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ad8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fc7e 	bl	80013e4 <HAL_GetTick>
 8002ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aec:	e00c      	b.n	8002b08 <HAL_RCC_OscConfig+0xc70>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fc76 	bl	80013e4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1fd      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	fa93 f2a3 	rbit	r2, r3
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b2c:	601a      	str	r2, [r3, #0]
  return result;
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_OscConfig+0xcba>
 8002b4c:	4bb0      	ldr	r3, [pc, #704]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e027      	b.n	8002ba2 <HAL_RCC_OscConfig+0xd0a>
 8002b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b56:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ba6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002baa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bae:	6011      	str	r1, [r2, #0]
 8002bb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fa92 f1a2 	rbit	r1, r2
 8002bbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bc2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bc6:	6011      	str	r1, [r2, #0]
  return result;
 8002bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bcc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	f002 021f 	and.w	r2, r2, #31
 8002be2:	2101      	movs	r1, #1
 8002be4:	fa01 f202 	lsl.w	r2, r1, r2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d182      	bne.n	8002af4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	497f      	ldr	r1, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c28:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	fa93 f2a3 	rbit	r2, r3
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c3a:	601a      	str	r2, [r3, #0]
  return result;
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c44:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fbc2 	bl	80013e4 <HAL_GetTick>
 8002c60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c64:	e009      	b.n	8002c7a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fbbd 	bl	80013e4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e144      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002c9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ca8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d102      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xe2c>
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	e027      	b.n	8002d14 <HAL_RCC_OscConfig+0xe7c>
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d18:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d20:	6011      	str	r1, [r2, #0]
 8002d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d26:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	fa92 f1a2 	rbit	r1, r2
 8002d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d34:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d38:	6011      	str	r1, [r2, #0]
  return result;
 8002d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d3e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fab2 f282 	clz	r2, r2
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	f042 0220 	orr.w	r2, r2, #32
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f002 021f 	and.w	r2, r2, #31
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d082      	beq.n	8002c66 <HAL_RCC_OscConfig+0xdce>
 8002d60:	e0cf      	b.n	8002f02 <HAL_RCC_OscConfig+0x106a>
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d82:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d86:	601a      	str	r2, [r3, #0]
  return result;
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fb1c 	bl	80013e4 <HAL_GetTick>
 8002dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e009      	b.n	8002dc6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe fb17 	bl	80013e4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e09e      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	fa93 f2a3 	rbit	r2, r3
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002dea:	601a      	str	r2, [r3, #0]
  return result;
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002df4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d104      	bne.n	8002e14 <HAL_RCC_OscConfig+0xf7c>
 8002e0a:	4b01      	ldr	r3, [pc, #4]	; (8002e10 <HAL_RCC_OscConfig+0xf78>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	e029      	b.n	8002e64 <HAL_RCC_OscConfig+0xfcc>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	fa93 f2a3 	rbit	r2, r3
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <HAL_RCC_OscConfig+0x1078>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e68:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e76:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fa92 f1a2 	rbit	r1, r2
 8002e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e84:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e88:	6011      	str	r1, [r2, #0]
  return result;
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d180      	bne.n	8002db2 <HAL_RCC_OscConfig+0xf1a>
 8002eb0:	e027      	b.n	8002f02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e01e      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCC_OscConfig+0x1078>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ece:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ed2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d10b      	bne.n	8002efe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b09e      	sub	sp, #120	; 0x78
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e162      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b90      	ldr	r3, [pc, #576]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b8d      	ldr	r3, [pc, #564]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	498b      	ldr	r1, [pc, #556]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e14a      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f68:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	497f      	ldr	r1, [pc, #508]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80dc 	beq.w	8003140 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d13c      	bne.n	800300a <HAL_RCC_ClockConfig+0xf6>
 8002f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_ClockConfig+0xa6>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e00f      	b.n	8002fda <HAL_RCC_ClockConfig+0xc6>
 8002fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fe0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fe2:	fa92 f2a2 	rbit	r2, r2
 8002fe6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d17b      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0f3      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d13c      	bne.n	800308c <HAL_RCC_ClockConfig+0x178>
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_RCC_ClockConfig+0x128>
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e00f      	b.n	800305c <HAL_RCC_ClockConfig+0x148>
 800303c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003040:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	643b      	str	r3, [r7, #64]	; 0x40
 8003050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	4b46      	ldr	r3, [pc, #280]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003060:	63ba      	str	r2, [r7, #56]	; 0x38
 8003062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f042 0220 	orr.w	r2, r2, #32
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	f002 021f 	and.w	r2, r2, #31
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13a      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0b2      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
 800308c:	2302      	movs	r3, #2
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e00d      	b.n	80030d0 <HAL_RCC_ClockConfig+0x1bc>
 80030b4:	2302      	movs	r3, #2
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
 80030c0:	2302      	movs	r3, #2
 80030c2:	623b      	str	r3, [r7, #32]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	2202      	movs	r2, #2
 80030d2:	61ba      	str	r2, [r7, #24]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	fa92 f2a2 	rbit	r2, r2
 80030da:	617a      	str	r2, [r7, #20]
  return result;
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	fab2 f282 	clz	r2, r2
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f042 0220 	orr.w	r2, r2, #32
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	f002 021f 	and.w	r2, r2, #31
 80030ee:	2101      	movs	r1, #1
 80030f0:	fa01 f202 	lsl.w	r2, r1, r2
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e079      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	491a      	ldr	r1, [pc, #104]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe f968 	bl	80013e4 <HAL_GetTick>
 8003114:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe f964 	bl	80013e4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e061      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_ClockConfig+0x260>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d214      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4906      	ldr	r1, [pc, #24]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <HAL_RCC_ClockConfig+0x25c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e040      	b.n	80031f2 <HAL_RCC_ClockConfig+0x2de>
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	491a      	ldr	r1, [pc, #104]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4912      	ldr	r1, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80031b6:	f000 f829 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ba:	4601      	mov	r1, r0
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_RCC_ClockConfig+0x2e8>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c4:	22f0      	movs	r2, #240	; 0xf0
 80031c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	fa92 f2a2 	rbit	r2, r2
 80031ce:	60fa      	str	r2, [r7, #12]
  return result;
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	fab2 f282 	clz	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	40d3      	lsrs	r3, r2
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_ClockConfig+0x2ec>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	fa21 f303 	lsr.w	r3, r1, r3
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_ClockConfig+0x2f0>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_RCC_ClockConfig+0x2f4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe f8b6 	bl	800135c <HAL_InitTick>
  
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3778      	adds	r7, #120	; 0x78
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000
 8003200:	08007aac 	.word	0x08007aac
 8003204:	20000008 	.word	0x20000008
 8003208:	2000000c 	.word	0x2000000c

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	b08b      	sub	sp, #44	; 0x2c
 8003210:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b04      	cmp	r3, #4
 8003234:	d002      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x30>
 8003236:	2b08      	cmp	r3, #8
 8003238:	d003      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x36>
 800323a:	e03c      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800323e:	623b      	str	r3, [r7, #32]
      break;
 8003240:	e03c      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003248:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800324c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	fa92 f2a2 	rbit	r2, r2
 8003254:	607a      	str	r2, [r7, #4]
  return result;
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	40d3      	lsrs	r3, r2
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003262:	5cd3      	ldrb	r3, [r2, r3]
 8003264:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	220f      	movs	r2, #15
 8003270:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	fa92 f2a2 	rbit	r2, r2
 8003278:	60fa      	str	r2, [r7, #12]
  return result;
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	40d3      	lsrs	r3, r2
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003294:	4a0e      	ldr	r2, [pc, #56]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	e004      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	623b      	str	r3, [r7, #32]
      break;
 80032b4:	e002      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032b8:	623b      	str	r3, [r7, #32]
      break;
 80032ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032bc:	6a3b      	ldr	r3, [r7, #32]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	372c      	adds	r7, #44	; 0x2c
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	007a1200 	.word	0x007a1200
 80032d4:	08007ac4 	.word	0x08007ac4
 80032d8:	08007ad4 	.word	0x08007ad4
 80032dc:	003d0900 	.word	0x003d0900

080032e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80032fe:	f7ff ffef 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003302:	4601      	mov	r1, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800330c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003310:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	fa92 f2a2 	rbit	r2, r2
 8003318:	603a      	str	r2, [r7, #0]
  return result;
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	fab2 f282 	clz	r2, r2
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	40d3      	lsrs	r3, r2
 8003324:	4a04      	ldr	r2, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003326:	5cd3      	ldrb	r3, [r2, r3]
 8003328:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	08007abc 	.word	0x08007abc

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003342:	f7ff ffcd 	bl	80032e0 <HAL_RCC_GetHCLKFreq>
 8003346:	4601      	mov	r1, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003350:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003354:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	fa92 f2a2 	rbit	r2, r2
 800335c:	603a      	str	r2, [r7, #0]
  return result;
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	fab2 f282 	clz	r2, r2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	40d3      	lsrs	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_RCC_GetPCLK2Freq+0x40>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	08007abc 	.word	0x08007abc

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b092      	sub	sp, #72	; 0x48
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80d4 	beq.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a4:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10e      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b0:	4b4b      	ldr	r3, [pc, #300]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a4a      	ldr	r2, [pc, #296]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
 80033bc:	4b48      	ldr	r3, [pc, #288]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b45      	ldr	r3, [pc, #276]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a41      	ldr	r2, [pc, #260]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fffd 	bl	80013e4 <HAL_GetTick>
 80033ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd fff9 	bl	80013e4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b64      	cmp	r3, #100	; 0x64
 80033fa:	d901      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e169      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003414:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8084 	beq.w	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003428:	429a      	cmp	r2, r3
 800342a:	d07c      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003436:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	461a      	mov	r2, r3
 8003456:	2301      	movs	r3, #1
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	461a      	mov	r2, r3
 800347a:	2300      	movs	r3, #0
 800347c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800347e:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003482:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04b      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348e:	f7fd ffa9 	bl	80013e4 <HAL_GetTick>
 8003492:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	e00a      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd ffa5 	bl	80013e4 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e113      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	2302      	movs	r3, #2
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	61fb      	str	r3, [r7, #28]
  return result;
 80034c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d108      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034da:	4b01      	ldr	r3, [pc, #4]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	e00d      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
 80034e8:	10908100 	.word	0x10908100
 80034ec:	2302      	movs	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa93 f3a3 	rbit	r3, r3
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	4b78      	ldr	r3, [pc, #480]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	2202      	movs	r2, #2
 80034fe:	613a      	str	r2, [r7, #16]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	fa92 f2a2 	rbit	r2, r2
 8003506:	60fa      	str	r2, [r7, #12]
  return result;
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	fab2 f282 	clz	r2, r2
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	f002 021f 	and.w	r2, r2, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f202 	lsl.w	r2, r1, r2
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0b7      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003526:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	496a      	ldr	r1, [pc, #424]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003538:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800353c:	2b01      	cmp	r3, #1
 800353e:	d105      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003540:	4b66      	ldr	r3, [pc, #408]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003558:	4b60      	ldr	r3, [pc, #384]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	495d      	ldr	r1, [pc, #372]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003576:	4b59      	ldr	r3, [pc, #356]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	4956      	ldr	r1, [pc, #344]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003594:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	494e      	ldr	r1, [pc, #312]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d008      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4947      	ldr	r1, [pc, #284]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80035d0:	4b42      	ldr	r3, [pc, #264]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	493f      	ldr	r1, [pc, #252]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d008      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f023 0220 	bic.w	r2, r3, #32
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4938      	ldr	r1, [pc, #224]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4930      	ldr	r1, [pc, #192]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800362a:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	4929      	ldr	r1, [pc, #164]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003648:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4921      	ldr	r1, [pc, #132]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	491a      	ldr	r1, [pc, #104]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	4912      	ldr	r1, [pc, #72]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003692:	4313      	orrs	r3, r2
 8003694:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	490b      	ldr	r1, [pc, #44]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3748      	adds	r7, #72	; 0x48
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e073      	b.n	80037de <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	7f5b      	ldrb	r3, [r3, #29]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fbe0 	bl	8000ecc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b10      	cmp	r3, #16
 800371e:	d055      	beq.n	80037cc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	22ca      	movs	r2, #202	; 0xca
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2253      	movs	r2, #83	; 0x53
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f9fb 	bl	8003b2c <RTC_EnterInitMode>
 8003736:	4603      	mov	r3, r0
 8003738:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d12c      	bne.n	800379a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800374e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003752:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6899      	ldr	r1, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6919      	ldr	r1, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	041a      	lsls	r2, r3, #16
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fa02 	bl	8003b9a <RTC_ExitInitMode>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d110      	bne.n	80037c2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	22ff      	movs	r2, #255	; 0xff
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
 80037ca:	e001      	b.n	80037d0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037e6:	b590      	push	{r4, r7, lr}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	7f1b      	ldrb	r3, [r3, #28]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_RTC_SetTime+0x1c>
 80037fe:	2302      	movs	r3, #2
 8003800:	e087      	b.n	8003912 <HAL_RTC_SetTime+0x12c>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2202      	movs	r2, #2
 800380c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d126      	bne.n	8003862 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f000 f9d9 	bl	8003be4 <RTC_ByteToBcd2>
 8003832:	4603      	mov	r3, r0
 8003834:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f9d2 	bl	8003be4 <RTC_ByteToBcd2>
 8003840:	4603      	mov	r3, r0
 8003842:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003844:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	789b      	ldrb	r3, [r3, #2]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f9ca 	bl	8003be4 <RTC_ByteToBcd2>
 8003850:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003852:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	78db      	ldrb	r3, [r3, #3]
 800385a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e018      	b.n	8003894 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003882:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003888:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	22ca      	movs	r2, #202	; 0xca
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2253      	movs	r2, #83	; 0x53
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f941 	bl	8003b2c <RTC_EnterInitMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d120      	bne.n	80038f6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6899      	ldr	r1, [r3, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f954 	bl	8003b9a <RTC_ExitInitMode>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	22ff      	movs	r2, #255	; 0xff
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]

  return status;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
}
 8003912:	4618      	mov	r0, r3
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}

0800391a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800394c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003950:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396c:	b2da      	uxtb	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397a:	b2da      	uxtb	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	0d9b      	lsrs	r3, r3, #22
 8003984:	b2db      	uxtb	r3, r3
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11a      	bne.n	80039cc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f940 	bl	8003c20 <RTC_Bcd2ToByte>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 f937 	bl	8003c20 <RTC_Bcd2ToByte>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	789b      	ldrb	r3, [r3, #2]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f92e 	bl	8003c20 <RTC_Bcd2ToByte>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039d6:	b590      	push	{r4, r7, lr}
 80039d8:	b087      	sub	sp, #28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	7f1b      	ldrb	r3, [r3, #28]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_RTC_SetDate+0x1c>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e071      	b.n	8003ad6 <HAL_RTC_SetDate+0x100>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2202      	movs	r2, #2
 80039fc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10e      	bne.n	8003a22 <HAL_RTC_SetDate+0x4c>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	330a      	adds	r3, #10
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d11c      	bne.n	8003a62 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	78db      	ldrb	r3, [r3, #3]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 f8d9 	bl	8003be4 <RTC_ByteToBcd2>
 8003a32:	4603      	mov	r3, r0
 8003a34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f8d2 	bl	8003be4 <RTC_ByteToBcd2>
 8003a40:	4603      	mov	r3, r0
 8003a42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	789b      	ldrb	r3, [r3, #2]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f8ca 	bl	8003be4 <RTC_ByteToBcd2>
 8003a50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e00e      	b.n	8003a80 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a6e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	22ca      	movs	r2, #202	; 0xca
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2253      	movs	r2, #83	; 0x53
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f84b 	bl	8003b2c <RTC_EnterInitMode>
 8003a96:	4603      	mov	r3, r0
 8003a98:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10c      	bne.n	8003aba <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003aaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003aae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f872 	bl	8003b9a <RTC_ExitInitMode>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	22ff      	movs	r2, #255	; 0xff
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]

  return status;
 8003ad4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd90      	pop	{r4, r7, pc}
	...

08003ae0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0d      	ldr	r2, [pc, #52]	; (8003b28 <HAL_RTC_WaitForSynchro+0x48>)
 8003af2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003af4:	f7fd fc76 	bl	80013e4 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003afa:	e009      	b.n	8003b10 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003afc:	f7fd fc72 	bl	80013e4 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b0a:	d901      	bls.n	8003b10 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e007      	b.n	8003b20 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0001ff5f 	.word	0x0001ff5f

08003b2c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d122      	bne.n	8003b90 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b5a:	f7fd fc43 	bl	80013e4 <HAL_GetTick>
 8003b5e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b60:	e00c      	b.n	8003b7c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b62:	f7fd fc3f 	bl	80013e4 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b70:	d904      	bls.n	8003b7c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2204      	movs	r2, #4
 8003b76:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <RTC_EnterInitMode+0x64>
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d1e8      	bne.n	8003b62 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ff8b 	bl	8003ae0 <HAL_RTC_WaitForSynchro>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003bf2:	e005      	b.n	8003c00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	3b0a      	subs	r3, #10
 8003bfe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d8f6      	bhi.n	8003bf4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b2db      	uxtb	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	4613      	mov	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	b2db      	uxtb	r3, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e09d      	b.n	8003daa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c7e:	d009      	beq.n	8003c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
 8003c86:	e005      	b.n	8003c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd f932 	bl	8000f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cd4:	d902      	bls.n	8003cdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e002      	b.n	8003ce2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003cea:	d007      	beq.n	8003cfc <HAL_SPI_Init+0xa0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 0204 	and.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d78:	ea42 0103 	orr.w	r1, r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e049      	b.n	8003e58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fd f8df 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 fd27 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d001      	beq.n	8003e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e04a      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea2:	d013      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x6c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d115      	bne.n	8003ef8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d015      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0xaa>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d011      	beq.n	8003f0a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	e008      	b.n	8003f0a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e000      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	00010007 	.word	0x00010007

08003f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e049      	b.n	8003fda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f841 	bl	8003fe2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fc66 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_TIM_PWM_Start+0x24>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	bf14      	ite	ne
 8004014:	2301      	movne	r3, #1
 8004016:	2300      	moveq	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	e03c      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d109      	bne.n	8004036 <HAL_TIM_PWM_Start+0x3e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e02f      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d109      	bne.n	8004050 <HAL_TIM_PWM_Start+0x58>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e022      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d109      	bne.n	800406a <HAL_TIM_PWM_Start+0x72>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	bf14      	ite	ne
 8004062:	2301      	movne	r3, #1
 8004064:	2300      	moveq	r3, #0
 8004066:	b2db      	uxtb	r3, r3
 8004068:	e015      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b10      	cmp	r3, #16
 800406e:	d109      	bne.n	8004084 <HAL_TIM_PWM_Start+0x8c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e008      	b.n	8004096 <HAL_TIM_PWM_Start+0x9e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	bf14      	ite	ne
 8004090:	2301      	movne	r3, #1
 8004092:	2300      	moveq	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e097      	b.n	80041ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xb6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ac:	e023      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d104      	bne.n	80040be <HAL_TIM_PWM_Start+0xc6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040bc:	e01b      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d104      	bne.n	80040ce <HAL_TIM_PWM_Start+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	e013      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b0c      	cmp	r3, #12
 80040d2:	d104      	bne.n	80040de <HAL_TIM_PWM_Start+0xe6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040dc:	e00b      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xf6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ec:	e003      	b.n	80040f6 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 ffa0 	bl	8005044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <HAL_TIM_PWM_Start+0x1e0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_TIM_PWM_Start+0x13e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a32      	ldr	r2, [pc, #200]	; (80041dc <HAL_TIM_PWM_Start+0x1e4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_TIM_PWM_Start+0x13e>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a30      	ldr	r2, [pc, #192]	; (80041e0 <HAL_TIM_PWM_Start+0x1e8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_TIM_PWM_Start+0x13e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a2f      	ldr	r2, [pc, #188]	; (80041e4 <HAL_TIM_PWM_Start+0x1ec>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_TIM_PWM_Start+0x13e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <HAL_TIM_PWM_Start+0x1f0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_TIM_PWM_Start+0x142>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_TIM_PWM_Start+0x144>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <HAL_TIM_PWM_Start+0x1e0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_TIM_PWM_Start+0x194>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d013      	beq.n	800418c <HAL_TIM_PWM_Start+0x194>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a20      	ldr	r2, [pc, #128]	; (80041ec <HAL_TIM_PWM_Start+0x1f4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_TIM_PWM_Start+0x194>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1f      	ldr	r2, [pc, #124]	; (80041f0 <HAL_TIM_PWM_Start+0x1f8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_TIM_PWM_Start+0x194>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <HAL_TIM_PWM_Start+0x1e4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_TIM_PWM_Start+0x194>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <HAL_TIM_PWM_Start+0x1e8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d115      	bne.n	80041b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <HAL_TIM_PWM_Start+0x1fc>)
 8004194:	4013      	ands	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d015      	beq.n	80041ca <HAL_TIM_PWM_Start+0x1d2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d011      	beq.n	80041ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b6:	e008      	b.n	80041ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e000      	b.n	80041cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40013400 	.word	0x40013400
 80041e0:	40014000 	.word	0x40014000
 80041e4:	40014400 	.word	0x40014400
 80041e8:	40014800 	.word	0x40014800
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	00010007 	.word	0x00010007

080041f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0202 	mvn.w	r2, #2
 8004224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fae3 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fad5 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fae6 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0204 	mvn.w	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fab9 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 faab 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fabc 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0208 	mvn.w	r2, #8
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa8f 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa81 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fa92 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0210 	mvn.w	r2, #16
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2208      	movs	r2, #8
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa65 	bl	8004806 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa57 	bl	80047f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fa68 	bl	800481a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc f8ee 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fefe 	bl	80051a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d10e      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fef1 	bl	80051b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d107      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa16 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0220 	mvn.w	r2, #32
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 feb1 	bl	8005190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0ff      	b.n	8004656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b14      	cmp	r3, #20
 8004462:	f200 80f0 	bhi.w	8004646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044c1 	.word	0x080044c1
 8004470:	08004647 	.word	0x08004647
 8004474:	08004647 	.word	0x08004647
 8004478:	08004647 	.word	0x08004647
 800447c:	08004501 	.word	0x08004501
 8004480:	08004647 	.word	0x08004647
 8004484:	08004647 	.word	0x08004647
 8004488:	08004647 	.word	0x08004647
 800448c:	08004543 	.word	0x08004543
 8004490:	08004647 	.word	0x08004647
 8004494:	08004647 	.word	0x08004647
 8004498:	08004647 	.word	0x08004647
 800449c:	08004583 	.word	0x08004583
 80044a0:	08004647 	.word	0x08004647
 80044a4:	08004647 	.word	0x08004647
 80044a8:	08004647 	.word	0x08004647
 80044ac:	080045c5 	.word	0x080045c5
 80044b0:	08004647 	.word	0x08004647
 80044b4:	08004647 	.word	0x08004647
 80044b8:	08004647 	.word	0x08004647
 80044bc:	08004605 	.word	0x08004605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fa4c 	bl	8004964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0208 	orr.w	r2, r2, #8
 80044da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6999      	ldr	r1, [r3, #24]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	619a      	str	r2, [r3, #24]
      break;
 80044fe:	e0a5      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fabc 	bl	8004a84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800451a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6999      	ldr	r1, [r3, #24]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	619a      	str	r2, [r3, #24]
      break;
 8004540:	e084      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fb25 	bl	8004b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0208 	orr.w	r2, r2, #8
 800455c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0204 	bic.w	r2, r2, #4
 800456c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69d9      	ldr	r1, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	61da      	str	r2, [r3, #28]
      break;
 8004580:	e064      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68b9      	ldr	r1, [r7, #8]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fb8d 	bl	8004ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69d9      	ldr	r1, [r3, #28]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	021a      	lsls	r2, r3, #8
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	61da      	str	r2, [r3, #28]
      break;
 80045c2:	e043      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fbd6 	bl	8004d7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0208 	orr.w	r2, r2, #8
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004602:	e023      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fc1a 	bl	8004e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	021a      	lsls	r2, r3, #8
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004644:	e002      	b.n	800464c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	75fb      	strb	r3, [r7, #23]
      break;
 800464a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004654:	7dfb      	ldrb	r3, [r7, #23]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop

08004660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIM_ConfigClockSource+0x1c>
 8004678:	2302      	movs	r3, #2
 800467a:	e0b6      	b.n	80047ea <HAL_TIM_ConfigClockSource+0x18a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b8:	d03e      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0xd8>
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	f200 8087 	bhi.w	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	f000 8086 	beq.w	80047d6 <HAL_TIM_ConfigClockSource+0x176>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d87f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046d0:	2b70      	cmp	r3, #112	; 0x70
 80046d2:	d01a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xaa>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d87b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046d8:	2b60      	cmp	r3, #96	; 0x60
 80046da:	d050      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x11e>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d877      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046e0:	2b50      	cmp	r3, #80	; 0x50
 80046e2:	d03c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xfe>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d873      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d058      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x13e>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d86f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d064      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15e>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d86b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d060      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15e>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d867      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05c      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15e>
 8004704:	2b10      	cmp	r3, #16
 8004706:	d05a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x15e>
 8004708:	e062      	b.n	80047d0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fc73 	bl	8005004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800472c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	609a      	str	r2, [r3, #8]
      break;
 8004736:	e04f      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6899      	ldr	r1, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f000 fc5c 	bl	8005004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e03c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fbd0 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2150      	movs	r1, #80	; 0x50
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fc29 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 800477c:	e02c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 fbef 	bl	8004f6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2160      	movs	r1, #96	; 0x60
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc19 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 800479c:	e01c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 fbb0 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fc09 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 80047bc:	e00c      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 fc00 	bl	8004fce <TIM_ITRx_SetConfig>
      break;
 80047ce:	e003      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e000      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3c      	ldr	r2, [pc, #240]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a39      	ldr	r2, [pc, #228]	; (800494c <TIM_Base_SetConfig+0x108>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a38      	ldr	r2, [pc, #224]	; (8004950 <TIM_Base_SetConfig+0x10c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a37      	ldr	r2, [pc, #220]	; (8004954 <TIM_Base_SetConfig+0x110>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2a      	ldr	r2, [pc, #168]	; (800494c <TIM_Base_SetConfig+0x108>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a29      	ldr	r2, [pc, #164]	; (8004950 <TIM_Base_SetConfig+0x10c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a28      	ldr	r2, [pc, #160]	; (8004954 <TIM_Base_SetConfig+0x110>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a27      	ldr	r2, [pc, #156]	; (8004958 <TIM_Base_SetConfig+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <TIM_Base_SetConfig+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a25      	ldr	r2, [pc, #148]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <TIM_Base_SetConfig+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00f      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a11      	ldr	r2, [pc, #68]	; (8004954 <TIM_Base_SetConfig+0x110>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <TIM_Base_SetConfig+0x114>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a0f      	ldr	r2, [pc, #60]	; (800495c <TIM_Base_SetConfig+0x118>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_Base_SetConfig+0xe8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <TIM_Base_SetConfig+0x11c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	615a      	str	r2, [r3, #20]
}
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0201 	bic.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f023 0302 	bic.w	r3, r3, #2
 80049b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00f      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_OC1_SetConfig+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d10c      	bne.n	80049fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0308 	bic.w	r3, r3, #8
 80049ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <TIM_OC1_SetConfig+0x10c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00f      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <TIM_OC1_SetConfig+0x110>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00b      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a19      	ldr	r2, [pc, #100]	; (8004a78 <TIM_OC1_SetConfig+0x114>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d007      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <TIM_OC1_SetConfig+0x118>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d003      	beq.n	8004a26 <TIM_OC1_SetConfig+0xc2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <TIM_OC1_SetConfig+0x11c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d111      	bne.n	8004a4a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	621a      	str	r2, [r3, #32]
}
 8004a64:	bf00      	nop
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40012c00 	.word	0x40012c00
 8004a74:	40013400 	.word	0x40013400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f023 0210 	bic.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f023 0320 	bic.w	r3, r3, #32
 8004ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC2_SetConfig+0x6c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a27      	ldr	r2, [pc, #156]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10d      	bne.n	8004b0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <TIM_OC2_SetConfig+0x100>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <TIM_OC2_SetConfig+0x104>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	; (8004b8c <TIM_OC2_SetConfig+0x108>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <TIM_OC2_SetConfig+0x10c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC2_SetConfig+0xb0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <TIM_OC2_SetConfig+0x110>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d113      	bne.n	8004b5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b42:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40014400 	.word	0x40014400
 8004b94:	40014800 	.word	0x40014800

08004b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_OC3_SetConfig+0x6a>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a26      	ldr	r2, [pc, #152]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10d      	bne.n	8004c1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1c      	ldr	r2, [pc, #112]	; (8004c94 <TIM_OC3_SetConfig+0xfc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <TIM_OC3_SetConfig+0x100>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <TIM_OC3_SetConfig+0x104>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <TIM_OC3_SetConfig+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC3_SetConfig+0xae>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <TIM_OC3_SetConfig+0x10c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d113      	bne.n	8004c6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40013400 	.word	0x40013400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <TIM_OC4_SetConfig+0xc0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_OC4_SetConfig+0x84>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <TIM_OC4_SetConfig+0xc4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_OC4_SetConfig+0x84>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <TIM_OC4_SetConfig+0xc8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_OC4_SetConfig+0x84>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <TIM_OC4_SetConfig+0xcc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC4_SetConfig+0x84>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <TIM_OC4_SetConfig+0xd0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d109      	bne.n	8004d40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40012c00 	.word	0x40012c00
 8004d6c:	40013400 	.word	0x40013400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC5_SetConfig+0xb4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_OC5_SetConfig+0x7a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC5_SetConfig+0xb8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_OC5_SetConfig+0x7a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC5_SetConfig+0xbc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC5_SetConfig+0x7a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <TIM_OC5_SetConfig+0xc0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC5_SetConfig+0x7a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC5_SetConfig+0xc4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d109      	bne.n	8004e0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800

08004e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	051b      	lsls	r3, r3, #20
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a18      	ldr	r2, [pc, #96]	; (8004efc <TIM_OC6_SetConfig+0xb8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x7c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <TIM_OC6_SetConfig+0xbc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x7c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <TIM_OC6_SetConfig+0xc0>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x7c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <TIM_OC6_SetConfig+0xc4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC6_SetConfig+0x7c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <TIM_OC6_SetConfig+0xc8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d109      	bne.n	8004ed4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40013400 	.word	0x40013400
 8004f04:	40014000 	.word	0x40014000
 8004f08:	40014400 	.word	0x40014400
 8004f0c:	40014800 	.word	0x40014800

08004f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 030a 	bic.w	r3, r3, #10
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 0210 	bic.w	r2, r3, #16
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	031b      	lsls	r3, r3, #12
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f043 0307 	orr.w	r3, r3, #7
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
 8005010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800501e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	021a      	lsls	r2, r3, #8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	431a      	orrs	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2201      	movs	r2, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a1a      	ldr	r2, [r3, #32]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	43db      	mvns	r3, r3
 8005066:	401a      	ands	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1a      	ldr	r2, [r3, #32]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
	...

08005090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e063      	b.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511a:	d013      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a12      	ldr	r2, [pc, #72]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10c      	bne.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40014000 	.word	0x40014000

08005190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e040      	b.n	8005260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fb ff4c 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2224      	movs	r2, #36	; 0x24
 80051f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fc00 	bl	8005a10 <UART_SetConfig>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e022      	b.n	8005260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fdc8 	bl	8005db8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fe4f 	bl	8005efc <UART_CheckIdleState>
 800525e:	4603      	mov	r3, r0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	4613      	mov	r3, r2
 8005276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527c:	2b20      	cmp	r3, #32
 800527e:	d178      	bne.n	8005372 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_UART_Transmit+0x24>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e071      	b.n	8005374 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2221      	movs	r2, #33	; 0x21
 800529c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800529e:	f7fc f8a1 	bl	80013e4 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052bc:	d108      	bne.n	80052d0 <HAL_UART_Transmit+0x68>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d104      	bne.n	80052d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e003      	b.n	80052d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d8:	e030      	b.n	800533c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 feb1 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e03c      	b.n	8005374 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800530c:	b292      	uxth	r2, r2
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	3302      	adds	r3, #2
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	e008      	b.n	800532a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	b292      	uxth	r2, r2
 8005322:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3301      	adds	r3, #1
 8005328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1c8      	bne.n	80052da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 fe7a 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2220      	movs	r2, #32
 8005362:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e005      	b.n	8005374 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	2b20      	cmp	r3, #32
 8005392:	d132      	bne.n	80053fa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_UART_Receive_IT+0x24>
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e02b      	b.n	80053fc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	613b      	str	r3, [r7, #16]
   return(result);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	69f9      	ldr	r1, [r7, #28]
 80053dc:	6a3a      	ldr	r2, [r7, #32]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053ea:	88fb      	ldrh	r3, [r7, #6]
 80053ec:	461a      	mov	r2, r3
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fe93 	bl	800611c <UART_Start_Receive_IT>
 80053f6:	4603      	mov	r3, r0
 80053f8:	e000      	b.n	80053fc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80053fa:	2302      	movs	r3, #2
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3728      	adds	r7, #40	; 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b0ba      	sub	sp, #232	; 0xe8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800542a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800542e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005432:	4013      	ands	r3, r2
 8005434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d115      	bne.n	800546c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00f      	beq.n	800546c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d009      	beq.n	800546c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 82ab 	beq.w	80059b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
      }
      return;
 800546a:	e2a5      	b.n	80059b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800546c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8117 	beq.w	80056a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005482:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005486:	4b85      	ldr	r3, [pc, #532]	; (800569c <HAL_UART_IRQHandler+0x298>)
 8005488:	4013      	ands	r3, r2
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 810a 	beq.w	80056a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <HAL_UART_IRQHandler+0xbc>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2201      	movs	r2, #1
 80054ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d011      	beq.n	80054f0 <HAL_UART_IRQHandler+0xec>
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2202      	movs	r2, #2
 80054de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e6:	f043 0204 	orr.w	r2, r3, #4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d011      	beq.n	8005520 <HAL_UART_IRQHandler+0x11c>
 80054fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00b      	beq.n	8005520 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2204      	movs	r2, #4
 800550e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005516:	f043 0202 	orr.w	r2, r3, #2
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800552c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2208      	movs	r2, #8
 800554a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005552:	f043 0208 	orr.w	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800555c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005564:	2b00      	cmp	r3, #0
 8005566:	d012      	beq.n	800558e <HAL_UART_IRQHandler+0x18a>
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00c      	beq.n	800558e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8211 	beq.w	80059bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d005      	beq.n	80055e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04f      	beq.n	8005686 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fe4c 	bl	8006284 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d141      	bne.n	800567e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800562a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800563e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1d9      	bne.n	80055fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <HAL_UART_IRQHandler+0x29c>)
 8005654:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc f83c 	bl	80016d8 <HAL_DMA_Abort_IT>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005670:	4610      	mov	r0, r2
 8005672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	e00f      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9b4 	bl	80059e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567c:	e00b      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9b0 	bl	80059e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	e007      	b.n	8005696 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9ac 	bl	80059e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005694:	e192      	b.n	80059bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005696:	bf00      	nop
    return;
 8005698:	e190      	b.n	80059bc <HAL_UART_IRQHandler+0x5b8>
 800569a:	bf00      	nop
 800569c:	04000120 	.word	0x04000120
 80056a0:	0800634d 	.word	0x0800634d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 814b 	bne.w	8005944 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8144 	beq.w	8005944 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 813d 	beq.w	8005944 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	f040 80b5 	bne.w	800584c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8164 	beq.w	80059c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005702:	429a      	cmp	r2, r3
 8005704:	f080 815c 	bcs.w	80059c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800570e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b20      	cmp	r3, #32
 800571a:	f000 8086 	beq.w	800582a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800573a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005748:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800574c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005754:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1da      	bne.n	800571e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800577a:	f023 0301 	bic.w	r3, r3, #1
 800577e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800578c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005790:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005794:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800579e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e1      	bne.n	8005768 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3308      	adds	r3, #8
 80057aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e3      	bne.n	80057a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fa:	f023 0310 	bic.w	r3, r3, #16
 80057fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800580c:	65bb      	str	r3, [r7, #88]	; 0x58
 800580e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800581a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e4      	bne.n	80057ea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	4618      	mov	r0, r3
 8005826:	f7fb ff1e 	bl	8001666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800583c:	b29b      	uxth	r3, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	b29b      	uxth	r3, r3
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f8d7 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800584a:	e0b9      	b.n	80059c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005858:	b29b      	uxth	r3, r3
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80ab 	beq.w	80059c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800586e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a6 	beq.w	80059c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800588c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
 800589c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e4      	bne.n	8005878 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	623b      	str	r3, [r7, #32]
   return(result);
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3308      	adds	r3, #8
 80058ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058d2:	633a      	str	r2, [r7, #48]	; 0x30
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e3      	bne.n	80058ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	60fb      	str	r3, [r7, #12]
   return(result);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0310 	bic.w	r3, r3, #16
 800590e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	69b9      	ldr	r1, [r7, #24]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	617b      	str	r3, [r7, #20]
   return(result);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e4      	bne.n	80058fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005936:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f85b 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005942:	e03f      	b.n	80059c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <HAL_UART_IRQHandler+0x56a>
 8005950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005964:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fed8 	bl	800671c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800596c:	e02d      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00e      	beq.n	8005998 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01c      	beq.n	80059c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
    }
    return;
 8005996:	e017      	b.n	80059c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <HAL_UART_IRQHandler+0x5c6>
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fce1 	bl	8006378 <UART_EndTransmit_IT>
    return;
 80059b6:	e008      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80059b8:	bf00      	nop
 80059ba:	e006      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80059bc:	bf00      	nop
 80059be:	e004      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80059c8:	bf00      	nop
  }

}
 80059ca:	37e8      	adds	r7, #232	; 0xe8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a3e:	f023 030c 	bic.w	r3, r3, #12
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	6979      	ldr	r1, [r7, #20]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4aa7      	ldr	r2, [pc, #668]	; (8005d28 <UART_SetConfig+0x318>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d120      	bne.n	8005ad2 <UART_SetConfig+0xc2>
 8005a90:	4ba6      	ldr	r3, [pc, #664]	; (8005d2c <UART_SetConfig+0x31c>)
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d817      	bhi.n	8005acc <UART_SetConfig+0xbc>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x94>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005ac7 	.word	0x08005ac7
 8005ab0:	08005abb 	.word	0x08005abb
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e0b5      	b.n	8005c26 <UART_SetConfig+0x216>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e0b2      	b.n	8005c26 <UART_SetConfig+0x216>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e0af      	b.n	8005c26 <UART_SetConfig+0x216>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e0ac      	b.n	8005c26 <UART_SetConfig+0x216>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0a9      	b.n	8005c26 <UART_SetConfig+0x216>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a96      	ldr	r2, [pc, #600]	; (8005d30 <UART_SetConfig+0x320>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d124      	bne.n	8005b26 <UART_SetConfig+0x116>
 8005adc:	4b93      	ldr	r3, [pc, #588]	; (8005d2c <UART_SetConfig+0x31c>)
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ae8:	d011      	beq.n	8005b0e <UART_SetConfig+0xfe>
 8005aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aee:	d817      	bhi.n	8005b20 <UART_SetConfig+0x110>
 8005af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af4:	d011      	beq.n	8005b1a <UART_SetConfig+0x10a>
 8005af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005afa:	d811      	bhi.n	8005b20 <UART_SetConfig+0x110>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <UART_SetConfig+0xf8>
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d006      	beq.n	8005b14 <UART_SetConfig+0x104>
 8005b06:	e00b      	b.n	8005b20 <UART_SetConfig+0x110>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e08b      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e088      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b14:	2304      	movs	r3, #4
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e085      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e082      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b20:	2310      	movs	r3, #16
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e07f      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a82      	ldr	r2, [pc, #520]	; (8005d34 <UART_SetConfig+0x324>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d124      	bne.n	8005b7a <UART_SetConfig+0x16a>
 8005b30:	4b7e      	ldr	r3, [pc, #504]	; (8005d2c <UART_SetConfig+0x31c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b3c:	d011      	beq.n	8005b62 <UART_SetConfig+0x152>
 8005b3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b42:	d817      	bhi.n	8005b74 <UART_SetConfig+0x164>
 8005b44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b48:	d011      	beq.n	8005b6e <UART_SetConfig+0x15e>
 8005b4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b4e:	d811      	bhi.n	8005b74 <UART_SetConfig+0x164>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <UART_SetConfig+0x14c>
 8005b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b58:	d006      	beq.n	8005b68 <UART_SetConfig+0x158>
 8005b5a:	e00b      	b.n	8005b74 <UART_SetConfig+0x164>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e061      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e05e      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e05b      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e058      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e055      	b.n	8005c26 <UART_SetConfig+0x216>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a6e      	ldr	r2, [pc, #440]	; (8005d38 <UART_SetConfig+0x328>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d124      	bne.n	8005bce <UART_SetConfig+0x1be>
 8005b84:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <UART_SetConfig+0x31c>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b90:	d011      	beq.n	8005bb6 <UART_SetConfig+0x1a6>
 8005b92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b96:	d817      	bhi.n	8005bc8 <UART_SetConfig+0x1b8>
 8005b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b9c:	d011      	beq.n	8005bc2 <UART_SetConfig+0x1b2>
 8005b9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba2:	d811      	bhi.n	8005bc8 <UART_SetConfig+0x1b8>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <UART_SetConfig+0x1a0>
 8005ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bac:	d006      	beq.n	8005bbc <UART_SetConfig+0x1ac>
 8005bae:	e00b      	b.n	8005bc8 <UART_SetConfig+0x1b8>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	77fb      	strb	r3, [r7, #31]
 8005bb4:	e037      	b.n	8005c26 <UART_SetConfig+0x216>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e034      	b.n	8005c26 <UART_SetConfig+0x216>
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e031      	b.n	8005c26 <UART_SetConfig+0x216>
 8005bc2:	2308      	movs	r3, #8
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e02e      	b.n	8005c26 <UART_SetConfig+0x216>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e02b      	b.n	8005c26 <UART_SetConfig+0x216>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a5a      	ldr	r2, [pc, #360]	; (8005d3c <UART_SetConfig+0x32c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d124      	bne.n	8005c22 <UART_SetConfig+0x212>
 8005bd8:	4b54      	ldr	r3, [pc, #336]	; (8005d2c <UART_SetConfig+0x31c>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005be0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005be4:	d011      	beq.n	8005c0a <UART_SetConfig+0x1fa>
 8005be6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bea:	d817      	bhi.n	8005c1c <UART_SetConfig+0x20c>
 8005bec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf0:	d011      	beq.n	8005c16 <UART_SetConfig+0x206>
 8005bf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf6:	d811      	bhi.n	8005c1c <UART_SetConfig+0x20c>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <UART_SetConfig+0x1f4>
 8005bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c00:	d006      	beq.n	8005c10 <UART_SetConfig+0x200>
 8005c02:	e00b      	b.n	8005c1c <UART_SetConfig+0x20c>
 8005c04:	2300      	movs	r3, #0
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e00d      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e00a      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c10:	2304      	movs	r3, #4
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e007      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c16:	2308      	movs	r3, #8
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e004      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e001      	b.n	8005c26 <UART_SetConfig+0x216>
 8005c22:	2310      	movs	r3, #16
 8005c24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c2e:	d15b      	bne.n	8005ce8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d827      	bhi.n	8005c86 <UART_SetConfig+0x276>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <UART_SetConfig+0x22c>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c69 	.word	0x08005c69
 8005c44:	08005c71 	.word	0x08005c71
 8005c48:	08005c87 	.word	0x08005c87
 8005c4c:	08005c77 	.word	0x08005c77
 8005c50:	08005c87 	.word	0x08005c87
 8005c54:	08005c87 	.word	0x08005c87
 8005c58:	08005c87 	.word	0x08005c87
 8005c5c:	08005c7f 	.word	0x08005c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fd fb4a 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005c64:	61b8      	str	r0, [r7, #24]
        break;
 8005c66:	e013      	b.n	8005c90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c68:	f7fd fb68 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8005c6c:	61b8      	str	r0, [r7, #24]
        break;
 8005c6e:	e00f      	b.n	8005c90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c70:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <UART_SetConfig+0x330>)
 8005c72:	61bb      	str	r3, [r7, #24]
        break;
 8005c74:	e00c      	b.n	8005c90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c76:	f7fd fac9 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8005c7a:	61b8      	str	r0, [r7, #24]
        break;
 8005c7c:	e008      	b.n	8005c90 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c82:	61bb      	str	r3, [r7, #24]
        break;
 8005c84:	e004      	b.n	8005c90 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8005c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8082 	beq.w	8005d9c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	005a      	lsls	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b0f      	cmp	r3, #15
 8005cb2:	d916      	bls.n	8005ce2 <UART_SetConfig+0x2d2>
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cba:	d212      	bcs.n	8005ce2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f023 030f 	bic.w	r3, r3, #15
 8005cc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	89fb      	ldrh	r3, [r7, #14]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	89fa      	ldrh	r2, [r7, #14]
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	e05c      	b.n	8005d9c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	77bb      	strb	r3, [r7, #30]
 8005ce6:	e059      	b.n	8005d9c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce8:	7ffb      	ldrb	r3, [r7, #31]
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d835      	bhi.n	8005d5a <UART_SetConfig+0x34a>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <UART_SetConfig+0x2e4>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d21 	.word	0x08005d21
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d5b 	.word	0x08005d5b
 8005d04:	08005d4b 	.word	0x08005d4b
 8005d08:	08005d5b 	.word	0x08005d5b
 8005d0c:	08005d5b 	.word	0x08005d5b
 8005d10:	08005d5b 	.word	0x08005d5b
 8005d14:	08005d53 	.word	0x08005d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d18:	f7fd faee 	bl	80032f8 <HAL_RCC_GetPCLK1Freq>
 8005d1c:	61b8      	str	r0, [r7, #24]
        break;
 8005d1e:	e021      	b.n	8005d64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fd fb0c 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8005d24:	61b8      	str	r0, [r7, #24]
        break;
 8005d26:	e01d      	b.n	8005d64 <UART_SetConfig+0x354>
 8005d28:	40013800 	.word	0x40013800
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	40004400 	.word	0x40004400
 8005d34:	40004800 	.word	0x40004800
 8005d38:	40004c00 	.word	0x40004c00
 8005d3c:	40005000 	.word	0x40005000
 8005d40:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <UART_SetConfig+0x3a4>)
 8005d46:	61bb      	str	r3, [r7, #24]
        break;
 8005d48:	e00c      	b.n	8005d64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4a:	f7fd fa5f 	bl	800320c <HAL_RCC_GetSysClockFreq>
 8005d4e:	61b8      	str	r0, [r7, #24]
        break;
 8005d50:	e008      	b.n	8005d64 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d56:	61bb      	str	r3, [r7, #24]
        break;
 8005d58:	e004      	b.n	8005d64 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	77bb      	strb	r3, [r7, #30]
        break;
 8005d62:	bf00      	nop
    }

    if (pclk != 0U)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d018      	beq.n	8005d9c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	085a      	lsrs	r2, r3, #1
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	441a      	add	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b0f      	cmp	r3, #15
 8005d82:	d909      	bls.n	8005d98 <UART_SetConfig+0x388>
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8a:	d205      	bcs.n	8005d98 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e001      	b.n	8005d9c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005da8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	007a1200 	.word	0x007a1200

08005db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00a      	beq.n	8005e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01a      	beq.n	8005ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb6:	d10a      	bne.n	8005ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	605a      	str	r2, [r3, #4]
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b098      	sub	sp, #96	; 0x60
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f0c:	f7fb fa6a 	bl	80013e4 <HAL_GetTick>
 8005f10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d12e      	bne.n	8005f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f88c 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d021      	beq.n	8005f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e6      	bne.n	8005f3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e062      	b.n	8006044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d149      	bne.n	8006020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f94:	2200      	movs	r2, #0
 8005f96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f856 	bl	800604c <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d03c      	beq.n	8006020 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e6      	bne.n	8005fa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff8:	61fa      	str	r2, [r7, #28]
 8005ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	617b      	str	r3, [r7, #20]
   return(result);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e5      	bne.n	8005fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e011      	b.n	8006044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3758      	adds	r7, #88	; 0x58
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800605c:	e049      	b.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006064:	d045      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006066:	f7fb f9bd 	bl	80013e4 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	429a      	cmp	r2, r3
 8006074:	d302      	bcc.n	800607c <UART_WaitOnFlagUntilTimeout+0x30>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e048      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d031      	beq.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d110      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2208      	movs	r2, #8
 80060a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f8ed 	bl	8006284 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2208      	movs	r2, #8
 80060ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e029      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060cc:	d111      	bne.n	80060f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f8d3 	bl	8006284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e00f      	b.n	8006112 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69da      	ldr	r2, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	429a      	cmp	r2, r3
 8006100:	bf0c      	ite	eq
 8006102:	2301      	moveq	r3, #1
 8006104:	2300      	movne	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	461a      	mov	r2, r3
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	429a      	cmp	r2, r3
 800610e:	d0a6      	beq.n	800605e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800611c:	b480      	push	{r7}
 800611e:	b097      	sub	sp, #92	; 0x5c
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614e:	d10e      	bne.n	800616e <UART_Start_Receive_IT+0x52>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <UART_Start_Receive_IT+0x48>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800615e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006162:	e01a      	b.n	800619a <UART_Start_Receive_IT+0x7e>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800616c:	e015      	b.n	800619a <UART_Start_Receive_IT+0x7e>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10d      	bne.n	8006192 <UART_Start_Receive_IT+0x76>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <UART_Start_Receive_IT+0x6c>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	22ff      	movs	r2, #255	; 0xff
 8006182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006186:	e008      	b.n	800619a <UART_Start_Receive_IT+0x7e>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	227f      	movs	r2, #127	; 0x7f
 800618c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006190:	e003      	b.n	800619a <UART_Start_Receive_IT+0x7e>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2222      	movs	r2, #34	; 0x22
 80061a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	657b      	str	r3, [r7, #84]	; 0x54
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3308      	adds	r3, #8
 80061c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d107      	bne.n	80061f8 <UART_Start_Receive_IT+0xdc>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4a22      	ldr	r2, [pc, #136]	; (800627c <UART_Start_Receive_IT+0x160>)
 80061f4:	669a      	str	r2, [r3, #104]	; 0x68
 80061f6:	e002      	b.n	80061fe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <UART_Start_Receive_IT+0x164>)
 80061fc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d019      	beq.n	800623a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
 8006226:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800622a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e6      	bne.n	8006206 <UART_Start_Receive_IT+0xea>
 8006238:	e018      	b.n	800626c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f043 0320 	orr.w	r3, r3, #32
 800624e:	653b      	str	r3, [r7, #80]	; 0x50
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	623b      	str	r3, [r7, #32]
 800625a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	61bb      	str	r3, [r7, #24]
   return(result);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e6      	bne.n	800623a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	375c      	adds	r7, #92	; 0x5c
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	08006575 	.word	0x08006575
 8006280:	080063cd 	.word	0x080063cd

08006284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b095      	sub	sp, #84	; 0x54
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062aa:	643b      	str	r3, [r7, #64]	; 0x40
 80062ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e6      	bne.n	800628c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	f023 0301 	bic.w	r3, r3, #1
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e5      	bne.n	80062be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d118      	bne.n	800632c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60bb      	str	r3, [r7, #8]
   return(result);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	647b      	str	r3, [r7, #68]	; 0x44
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6979      	ldr	r1, [r7, #20]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	613b      	str	r3, [r7, #16]
   return(result);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e6      	bne.n	80062fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006340:	bf00      	nop
 8006342:	3754      	adds	r7, #84	; 0x54
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fb3a 	bl	80059e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	60bb      	str	r3, [r7, #8]
   return(result);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	613b      	str	r3, [r7, #16]
   return(result);
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e6      	bne.n	8006380 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fb06 	bl	80059d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063c4:	bf00      	nop
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b09c      	sub	sp, #112	; 0x70
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e4:	2b22      	cmp	r3, #34	; 0x22
 80063e6:	f040 80b9 	bne.w	800655c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80063f8:	b2d9      	uxtb	r1, r3
 80063fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006404:	400a      	ands	r2, r1
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 809c 	bne.w	800656c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006448:	66bb      	str	r3, [r7, #104]	; 0x68
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	461a      	mov	r2, r3
 8006450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006452:	65bb      	str	r3, [r7, #88]	; 0x58
 8006454:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e6      	bne.n	8006434 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	667b      	str	r3, [r7, #100]	; 0x64
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3308      	adds	r3, #8
 8006484:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006486:	647a      	str	r2, [r7, #68]	; 0x44
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800648c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e5      	bne.n	8006466 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2220      	movs	r2, #32
 800649e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d018      	beq.n	80064ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064d0:	663b      	str	r3, [r7, #96]	; 0x60
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064da:	633b      	str	r3, [r7, #48]	; 0x30
 80064dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e2:	e841 2300 	strex	r3, r2, [r1]
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1e6      	bne.n	80064bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d12e      	bne.n	8006554 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	60fb      	str	r3, [r7, #12]
   return(result);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 0310 	bic.w	r3, r3, #16
 8006510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	69b9      	ldr	r1, [r7, #24]
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	617b      	str	r3, [r7, #20]
   return(result);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d103      	bne.n	8006544 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2210      	movs	r2, #16
 8006542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fa53 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006552:	e00b      	b.n	800656c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fa f89f 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 800655a:	e007      	b.n	800656c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0208 	orr.w	r2, r2, #8
 800656a:	619a      	str	r2, [r3, #24]
}
 800656c:	bf00      	nop
 800656e:	3770      	adds	r7, #112	; 0x70
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b09c      	sub	sp, #112	; 0x70
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006582:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658c:	2b22      	cmp	r3, #34	; 0x22
 800658e:	f040 80b9 	bne.w	8006704 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80065a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80065a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80065aa:	4013      	ands	r3, r2
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f040 809c 	bne.w	8006714 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80065ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065f0:	667b      	str	r3, [r7, #100]	; 0x64
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065fa:	657b      	str	r3, [r7, #84]	; 0x54
 80065fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e6      	bne.n	80065dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	663b      	str	r3, [r7, #96]	; 0x60
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800662e:	643a      	str	r2, [r7, #64]	; 0x40
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006632:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006636:	e841 2300 	strex	r3, r2, [r1]
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1e5      	bne.n	800660e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d018      	beq.n	8006696 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	61fb      	str	r3, [r7, #28]
   return(result);
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006684:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669a:	2b01      	cmp	r3, #1
 800669c:	d12e      	bne.n	80066fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f023 0310 	bic.w	r3, r3, #16
 80066b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6979      	ldr	r1, [r7, #20]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	613b      	str	r3, [r7, #16]
   return(result);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e6      	bne.n	80066a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d103      	bne.n	80066ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2210      	movs	r2, #16
 80066ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff f97f 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066fa:	e00b      	b.n	8006714 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7f9 ffcb 	bl	8000698 <HAL_UART_RxCpltCallback>
}
 8006702:	e007      	b.n	8006714 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699a      	ldr	r2, [r3, #24]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0208 	orr.w	r2, r2, #8
 8006712:	619a      	str	r2, [r3, #24]
}
 8006714:	bf00      	nop
 8006716:	3770      	adds	r7, #112	; 0x70
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006738:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800673c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	b29b      	uxth	r3, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	b29b      	uxth	r3, r3
 800674e:	4013      	ands	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006766:	b084      	sub	sp, #16
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	f107 0014 	add.w	r0, r7, #20
 8006774:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	b004      	add	sp, #16
 80067a6:	4770      	bx	lr

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	; (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000014 	.word	0x20000014

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	; (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	; (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	; (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	; (80067f8 <__libc_init_array+0x44>)
 80067c8:	f001 f94a 	bl	8007a60 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	08007c94 	.word	0x08007c94
 80067f0:	08007c94 	.word	0x08007c94
 80067f4:	08007c94 	.word	0x08007c94
 80067f8:	08007c98 	.word	0x08007c98

080067fc <memset>:
 80067fc:	4402      	add	r2, r0
 80067fe:	4603      	mov	r3, r0
 8006800:	4293      	cmp	r3, r2
 8006802:	d100      	bne.n	8006806 <memset+0xa>
 8006804:	4770      	bx	lr
 8006806:	f803 1b01 	strb.w	r1, [r3], #1
 800680a:	e7f9      	b.n	8006800 <memset+0x4>

0800680c <siprintf>:
 800680c:	b40e      	push	{r1, r2, r3}
 800680e:	b500      	push	{lr}
 8006810:	b09c      	sub	sp, #112	; 0x70
 8006812:	ab1d      	add	r3, sp, #116	; 0x74
 8006814:	9002      	str	r0, [sp, #8]
 8006816:	9006      	str	r0, [sp, #24]
 8006818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800681c:	4809      	ldr	r0, [pc, #36]	; (8006844 <siprintf+0x38>)
 800681e:	9107      	str	r1, [sp, #28]
 8006820:	9104      	str	r1, [sp, #16]
 8006822:	4909      	ldr	r1, [pc, #36]	; (8006848 <siprintf+0x3c>)
 8006824:	f853 2b04 	ldr.w	r2, [r3], #4
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	a902      	add	r1, sp, #8
 8006830:	f000 f896 	bl	8006960 <_svfiprintf_r>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	b01c      	add	sp, #112	; 0x70
 800683c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006840:	b003      	add	sp, #12
 8006842:	4770      	bx	lr
 8006844:	20000014 	.word	0x20000014
 8006848:	ffff0208 	.word	0xffff0208

0800684c <siscanf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	b510      	push	{r4, lr}
 8006850:	b09f      	sub	sp, #124	; 0x7c
 8006852:	ac21      	add	r4, sp, #132	; 0x84
 8006854:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006858:	f854 2b04 	ldr.w	r2, [r4], #4
 800685c:	9201      	str	r2, [sp, #4]
 800685e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006862:	9004      	str	r0, [sp, #16]
 8006864:	9008      	str	r0, [sp, #32]
 8006866:	f7f9 fcb3 	bl	80001d0 <strlen>
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <siscanf+0x50>)
 800686c:	9005      	str	r0, [sp, #20]
 800686e:	9009      	str	r0, [sp, #36]	; 0x24
 8006870:	930d      	str	r3, [sp, #52]	; 0x34
 8006872:	480b      	ldr	r0, [pc, #44]	; (80068a0 <siscanf+0x54>)
 8006874:	9a01      	ldr	r2, [sp, #4]
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	9403      	str	r4, [sp, #12]
 800687a:	2300      	movs	r3, #0
 800687c:	9311      	str	r3, [sp, #68]	; 0x44
 800687e:	9316      	str	r3, [sp, #88]	; 0x58
 8006880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006884:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006888:	a904      	add	r1, sp, #16
 800688a:	4623      	mov	r3, r4
 800688c:	f000 f9c2 	bl	8006c14 <__ssvfiscanf_r>
 8006890:	b01f      	add	sp, #124	; 0x7c
 8006892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006896:	b003      	add	sp, #12
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	20000014 	.word	0x20000014

080068a4 <__seofread>:
 80068a4:	2000      	movs	r0, #0
 80068a6:	4770      	bx	lr

080068a8 <__ssputs_r>:
 80068a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	688e      	ldr	r6, [r1, #8]
 80068ae:	429e      	cmp	r6, r3
 80068b0:	4682      	mov	sl, r0
 80068b2:	460c      	mov	r4, r1
 80068b4:	4690      	mov	r8, r2
 80068b6:	461f      	mov	r7, r3
 80068b8:	d838      	bhi.n	800692c <__ssputs_r+0x84>
 80068ba:	898a      	ldrh	r2, [r1, #12]
 80068bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068c0:	d032      	beq.n	8006928 <__ssputs_r+0x80>
 80068c2:	6825      	ldr	r5, [r4, #0]
 80068c4:	6909      	ldr	r1, [r1, #16]
 80068c6:	eba5 0901 	sub.w	r9, r5, r1
 80068ca:	6965      	ldr	r5, [r4, #20]
 80068cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068d4:	3301      	adds	r3, #1
 80068d6:	444b      	add	r3, r9
 80068d8:	106d      	asrs	r5, r5, #1
 80068da:	429d      	cmp	r5, r3
 80068dc:	bf38      	it	cc
 80068de:	461d      	movcc	r5, r3
 80068e0:	0553      	lsls	r3, r2, #21
 80068e2:	d531      	bpl.n	8006948 <__ssputs_r+0xa0>
 80068e4:	4629      	mov	r1, r5
 80068e6:	f000 fff3 	bl	80078d0 <_malloc_r>
 80068ea:	4606      	mov	r6, r0
 80068ec:	b950      	cbnz	r0, 8006904 <__ssputs_r+0x5c>
 80068ee:	230c      	movs	r3, #12
 80068f0:	f8ca 3000 	str.w	r3, [sl]
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	6921      	ldr	r1, [r4, #16]
 8006906:	464a      	mov	r2, r9
 8006908:	f000 ff4e 	bl	80077a8 <memcpy>
 800690c:	89a3      	ldrh	r3, [r4, #12]
 800690e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	6126      	str	r6, [r4, #16]
 800691a:	6165      	str	r5, [r4, #20]
 800691c:	444e      	add	r6, r9
 800691e:	eba5 0509 	sub.w	r5, r5, r9
 8006922:	6026      	str	r6, [r4, #0]
 8006924:	60a5      	str	r5, [r4, #8]
 8006926:	463e      	mov	r6, r7
 8006928:	42be      	cmp	r6, r7
 800692a:	d900      	bls.n	800692e <__ssputs_r+0x86>
 800692c:	463e      	mov	r6, r7
 800692e:	6820      	ldr	r0, [r4, #0]
 8006930:	4632      	mov	r2, r6
 8006932:	4641      	mov	r1, r8
 8006934:	f000 ff46 	bl	80077c4 <memmove>
 8006938:	68a3      	ldr	r3, [r4, #8]
 800693a:	1b9b      	subs	r3, r3, r6
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	4433      	add	r3, r6
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	2000      	movs	r0, #0
 8006946:	e7db      	b.n	8006900 <__ssputs_r+0x58>
 8006948:	462a      	mov	r2, r5
 800694a:	f001 f835 	bl	80079b8 <_realloc_r>
 800694e:	4606      	mov	r6, r0
 8006950:	2800      	cmp	r0, #0
 8006952:	d1e1      	bne.n	8006918 <__ssputs_r+0x70>
 8006954:	6921      	ldr	r1, [r4, #16]
 8006956:	4650      	mov	r0, sl
 8006958:	f000 ff4e 	bl	80077f8 <_free_r>
 800695c:	e7c7      	b.n	80068ee <__ssputs_r+0x46>
	...

08006960 <_svfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	4698      	mov	r8, r3
 8006966:	898b      	ldrh	r3, [r1, #12]
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	b09d      	sub	sp, #116	; 0x74
 800696c:	4607      	mov	r7, r0
 800696e:	460d      	mov	r5, r1
 8006970:	4614      	mov	r4, r2
 8006972:	d50e      	bpl.n	8006992 <_svfiprintf_r+0x32>
 8006974:	690b      	ldr	r3, [r1, #16]
 8006976:	b963      	cbnz	r3, 8006992 <_svfiprintf_r+0x32>
 8006978:	2140      	movs	r1, #64	; 0x40
 800697a:	f000 ffa9 	bl	80078d0 <_malloc_r>
 800697e:	6028      	str	r0, [r5, #0]
 8006980:	6128      	str	r0, [r5, #16]
 8006982:	b920      	cbnz	r0, 800698e <_svfiprintf_r+0x2e>
 8006984:	230c      	movs	r3, #12
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	f04f 30ff 	mov.w	r0, #4294967295
 800698c:	e0d1      	b.n	8006b32 <_svfiprintf_r+0x1d2>
 800698e:	2340      	movs	r3, #64	; 0x40
 8006990:	616b      	str	r3, [r5, #20]
 8006992:	2300      	movs	r3, #0
 8006994:	9309      	str	r3, [sp, #36]	; 0x24
 8006996:	2320      	movs	r3, #32
 8006998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800699c:	f8cd 800c 	str.w	r8, [sp, #12]
 80069a0:	2330      	movs	r3, #48	; 0x30
 80069a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b4c <_svfiprintf_r+0x1ec>
 80069a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069aa:	f04f 0901 	mov.w	r9, #1
 80069ae:	4623      	mov	r3, r4
 80069b0:	469a      	mov	sl, r3
 80069b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b6:	b10a      	cbz	r2, 80069bc <_svfiprintf_r+0x5c>
 80069b8:	2a25      	cmp	r2, #37	; 0x25
 80069ba:	d1f9      	bne.n	80069b0 <_svfiprintf_r+0x50>
 80069bc:	ebba 0b04 	subs.w	fp, sl, r4
 80069c0:	d00b      	beq.n	80069da <_svfiprintf_r+0x7a>
 80069c2:	465b      	mov	r3, fp
 80069c4:	4622      	mov	r2, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff ff6d 	bl	80068a8 <__ssputs_r>
 80069ce:	3001      	adds	r0, #1
 80069d0:	f000 80aa 	beq.w	8006b28 <_svfiprintf_r+0x1c8>
 80069d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069d6:	445a      	add	r2, fp
 80069d8:	9209      	str	r2, [sp, #36]	; 0x24
 80069da:	f89a 3000 	ldrb.w	r3, [sl]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f000 80a2 	beq.w	8006b28 <_svfiprintf_r+0x1c8>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ee:	f10a 0a01 	add.w	sl, sl, #1
 80069f2:	9304      	str	r3, [sp, #16]
 80069f4:	9307      	str	r3, [sp, #28]
 80069f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069fa:	931a      	str	r3, [sp, #104]	; 0x68
 80069fc:	4654      	mov	r4, sl
 80069fe:	2205      	movs	r2, #5
 8006a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a04:	4851      	ldr	r0, [pc, #324]	; (8006b4c <_svfiprintf_r+0x1ec>)
 8006a06:	f7f9 fbeb 	bl	80001e0 <memchr>
 8006a0a:	9a04      	ldr	r2, [sp, #16]
 8006a0c:	b9d8      	cbnz	r0, 8006a46 <_svfiprintf_r+0xe6>
 8006a0e:	06d0      	lsls	r0, r2, #27
 8006a10:	bf44      	itt	mi
 8006a12:	2320      	movmi	r3, #32
 8006a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a18:	0711      	lsls	r1, r2, #28
 8006a1a:	bf44      	itt	mi
 8006a1c:	232b      	movmi	r3, #43	; 0x2b
 8006a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a22:	f89a 3000 	ldrb.w	r3, [sl]
 8006a26:	2b2a      	cmp	r3, #42	; 0x2a
 8006a28:	d015      	beq.n	8006a56 <_svfiprintf_r+0xf6>
 8006a2a:	9a07      	ldr	r2, [sp, #28]
 8006a2c:	4654      	mov	r4, sl
 8006a2e:	2000      	movs	r0, #0
 8006a30:	f04f 0c0a 	mov.w	ip, #10
 8006a34:	4621      	mov	r1, r4
 8006a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a3a:	3b30      	subs	r3, #48	; 0x30
 8006a3c:	2b09      	cmp	r3, #9
 8006a3e:	d94e      	bls.n	8006ade <_svfiprintf_r+0x17e>
 8006a40:	b1b0      	cbz	r0, 8006a70 <_svfiprintf_r+0x110>
 8006a42:	9207      	str	r2, [sp, #28]
 8006a44:	e014      	b.n	8006a70 <_svfiprintf_r+0x110>
 8006a46:	eba0 0308 	sub.w	r3, r0, r8
 8006a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	46a2      	mov	sl, r4
 8006a54:	e7d2      	b.n	80069fc <_svfiprintf_r+0x9c>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d19      	adds	r1, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9103      	str	r1, [sp, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfbb      	ittet	lt
 8006a62:	425b      	neglt	r3, r3
 8006a64:	f042 0202 	orrlt.w	r2, r2, #2
 8006a68:	9307      	strge	r3, [sp, #28]
 8006a6a:	9307      	strlt	r3, [sp, #28]
 8006a6c:	bfb8      	it	lt
 8006a6e:	9204      	strlt	r2, [sp, #16]
 8006a70:	7823      	ldrb	r3, [r4, #0]
 8006a72:	2b2e      	cmp	r3, #46	; 0x2e
 8006a74:	d10c      	bne.n	8006a90 <_svfiprintf_r+0x130>
 8006a76:	7863      	ldrb	r3, [r4, #1]
 8006a78:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7a:	d135      	bne.n	8006ae8 <_svfiprintf_r+0x188>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	1d1a      	adds	r2, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	9203      	str	r2, [sp, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bfb8      	it	lt
 8006a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a8c:	3402      	adds	r4, #2
 8006a8e:	9305      	str	r3, [sp, #20]
 8006a90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b5c <_svfiprintf_r+0x1fc>
 8006a94:	7821      	ldrb	r1, [r4, #0]
 8006a96:	2203      	movs	r2, #3
 8006a98:	4650      	mov	r0, sl
 8006a9a:	f7f9 fba1 	bl	80001e0 <memchr>
 8006a9e:	b140      	cbz	r0, 8006ab2 <_svfiprintf_r+0x152>
 8006aa0:	2340      	movs	r3, #64	; 0x40
 8006aa2:	eba0 000a 	sub.w	r0, r0, sl
 8006aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	4303      	orrs	r3, r0
 8006aae:	3401      	adds	r4, #1
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab6:	4826      	ldr	r0, [pc, #152]	; (8006b50 <_svfiprintf_r+0x1f0>)
 8006ab8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006abc:	2206      	movs	r2, #6
 8006abe:	f7f9 fb8f 	bl	80001e0 <memchr>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d038      	beq.n	8006b38 <_svfiprintf_r+0x1d8>
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <_svfiprintf_r+0x1f4>)
 8006ac8:	bb1b      	cbnz	r3, 8006b12 <_svfiprintf_r+0x1b2>
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	3307      	adds	r3, #7
 8006ace:	f023 0307 	bic.w	r3, r3, #7
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	9303      	str	r3, [sp, #12]
 8006ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad8:	4433      	add	r3, r6
 8006ada:	9309      	str	r3, [sp, #36]	; 0x24
 8006adc:	e767      	b.n	80069ae <_svfiprintf_r+0x4e>
 8006ade:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e7a5      	b.n	8006a34 <_svfiprintf_r+0xd4>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	3401      	adds	r4, #1
 8006aec:	9305      	str	r3, [sp, #20]
 8006aee:	4619      	mov	r1, r3
 8006af0:	f04f 0c0a 	mov.w	ip, #10
 8006af4:	4620      	mov	r0, r4
 8006af6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afa:	3a30      	subs	r2, #48	; 0x30
 8006afc:	2a09      	cmp	r2, #9
 8006afe:	d903      	bls.n	8006b08 <_svfiprintf_r+0x1a8>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0c5      	beq.n	8006a90 <_svfiprintf_r+0x130>
 8006b04:	9105      	str	r1, [sp, #20]
 8006b06:	e7c3      	b.n	8006a90 <_svfiprintf_r+0x130>
 8006b08:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7f0      	b.n	8006af4 <_svfiprintf_r+0x194>
 8006b12:	ab03      	add	r3, sp, #12
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	462a      	mov	r2, r5
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <_svfiprintf_r+0x1f8>)
 8006b1a:	a904      	add	r1, sp, #16
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	f3af 8000 	nop.w
 8006b22:	1c42      	adds	r2, r0, #1
 8006b24:	4606      	mov	r6, r0
 8006b26:	d1d6      	bne.n	8006ad6 <_svfiprintf_r+0x176>
 8006b28:	89ab      	ldrh	r3, [r5, #12]
 8006b2a:	065b      	lsls	r3, r3, #25
 8006b2c:	f53f af2c 	bmi.w	8006988 <_svfiprintf_r+0x28>
 8006b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b32:	b01d      	add	sp, #116	; 0x74
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	ab03      	add	r3, sp, #12
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	462a      	mov	r2, r5
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <_svfiprintf_r+0x1f8>)
 8006b40:	a904      	add	r1, sp, #16
 8006b42:	4638      	mov	r0, r7
 8006b44:	f000 fa4c 	bl	8006fe0 <_printf_i>
 8006b48:	e7eb      	b.n	8006b22 <_svfiprintf_r+0x1c2>
 8006b4a:	bf00      	nop
 8006b4c:	08007ae4 	.word	0x08007ae4
 8006b50:	08007aee 	.word	0x08007aee
 8006b54:	00000000 	.word	0x00000000
 8006b58:	080068a9 	.word	0x080068a9
 8006b5c:	08007aea 	.word	0x08007aea

08006b60 <_sungetc_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	1c4b      	adds	r3, r1, #1
 8006b64:	4614      	mov	r4, r2
 8006b66:	d103      	bne.n	8006b70 <_sungetc_r+0x10>
 8006b68:	f04f 35ff 	mov.w	r5, #4294967295
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	8993      	ldrh	r3, [r2, #12]
 8006b72:	f023 0320 	bic.w	r3, r3, #32
 8006b76:	8193      	strh	r3, [r2, #12]
 8006b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b7a:	6852      	ldr	r2, [r2, #4]
 8006b7c:	b2cd      	uxtb	r5, r1
 8006b7e:	b18b      	cbz	r3, 8006ba4 <_sungetc_r+0x44>
 8006b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b82:	4293      	cmp	r3, r2
 8006b84:	dd08      	ble.n	8006b98 <_sungetc_r+0x38>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	1e5a      	subs	r2, r3, #1
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	3301      	adds	r3, #1
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	e7e9      	b.n	8006b6c <_sungetc_r+0xc>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f000 fdc9 	bl	8007730 <__submore>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0f1      	beq.n	8006b86 <_sungetc_r+0x26>
 8006ba2:	e7e1      	b.n	8006b68 <_sungetc_r+0x8>
 8006ba4:	6921      	ldr	r1, [r4, #16]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	b151      	cbz	r1, 8006bc0 <_sungetc_r+0x60>
 8006baa:	4299      	cmp	r1, r3
 8006bac:	d208      	bcs.n	8006bc0 <_sungetc_r+0x60>
 8006bae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006bb2:	42a9      	cmp	r1, r5
 8006bb4:	d104      	bne.n	8006bc0 <_sungetc_r+0x60>
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	3201      	adds	r2, #1
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	6062      	str	r2, [r4, #4]
 8006bbe:	e7d5      	b.n	8006b6c <_sungetc_r+0xc>
 8006bc0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bca:	2303      	movs	r3, #3
 8006bcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8006bce:	4623      	mov	r3, r4
 8006bd0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e7dc      	b.n	8006b94 <_sungetc_r+0x34>

08006bda <__ssrefill_r>:
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	460c      	mov	r4, r1
 8006bde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006be0:	b169      	cbz	r1, 8006bfe <__ssrefill_r+0x24>
 8006be2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006be6:	4299      	cmp	r1, r3
 8006be8:	d001      	beq.n	8006bee <__ssrefill_r+0x14>
 8006bea:	f000 fe05 	bl	80077f8 <_free_r>
 8006bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf0:	6063      	str	r3, [r4, #4]
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bf6:	b113      	cbz	r3, 8006bfe <__ssrefill_r+0x24>
 8006bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bfa:	6023      	str	r3, [r4, #0]
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	2300      	movs	r3, #0
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	f043 0320 	orr.w	r3, r3, #32
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	e7f3      	b.n	8006bfc <__ssrefill_r+0x22>

08006c14 <__ssvfiscanf_r>:
 8006c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c18:	460c      	mov	r4, r1
 8006c1a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006c1e:	2100      	movs	r1, #0
 8006c20:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006c24:	49a6      	ldr	r1, [pc, #664]	; (8006ec0 <__ssvfiscanf_r+0x2ac>)
 8006c26:	91a0      	str	r1, [sp, #640]	; 0x280
 8006c28:	f10d 0804 	add.w	r8, sp, #4
 8006c2c:	49a5      	ldr	r1, [pc, #660]	; (8006ec4 <__ssvfiscanf_r+0x2b0>)
 8006c2e:	4fa6      	ldr	r7, [pc, #664]	; (8006ec8 <__ssvfiscanf_r+0x2b4>)
 8006c30:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006ecc <__ssvfiscanf_r+0x2b8>
 8006c34:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006c38:	4606      	mov	r6, r0
 8006c3a:	91a1      	str	r1, [sp, #644]	; 0x284
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	7813      	ldrb	r3, [r2, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 815a 	beq.w	8006efa <__ssvfiscanf_r+0x2e6>
 8006c46:	5dd9      	ldrb	r1, [r3, r7]
 8006c48:	f011 0108 	ands.w	r1, r1, #8
 8006c4c:	f102 0501 	add.w	r5, r2, #1
 8006c50:	d019      	beq.n	8006c86 <__ssvfiscanf_r+0x72>
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	dd0f      	ble.n	8006c78 <__ssvfiscanf_r+0x64>
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	781a      	ldrb	r2, [r3, #0]
 8006c5c:	5cba      	ldrb	r2, [r7, r2]
 8006c5e:	0712      	lsls	r2, r2, #28
 8006c60:	d401      	bmi.n	8006c66 <__ssvfiscanf_r+0x52>
 8006c62:	462a      	mov	r2, r5
 8006c64:	e7eb      	b.n	8006c3e <__ssvfiscanf_r+0x2a>
 8006c66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006c68:	3201      	adds	r2, #1
 8006c6a:	9245      	str	r2, [sp, #276]	; 0x114
 8006c6c:	6862      	ldr	r2, [r4, #4]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	3a01      	subs	r2, #1
 8006c72:	6062      	str	r2, [r4, #4]
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	e7ec      	b.n	8006c52 <__ssvfiscanf_r+0x3e>
 8006c78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4798      	blx	r3
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0e9      	beq.n	8006c58 <__ssvfiscanf_r+0x44>
 8006c84:	e7ed      	b.n	8006c62 <__ssvfiscanf_r+0x4e>
 8006c86:	2b25      	cmp	r3, #37	; 0x25
 8006c88:	d012      	beq.n	8006cb0 <__ssvfiscanf_r+0x9c>
 8006c8a:	469a      	mov	sl, r3
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f340 8091 	ble.w	8006db6 <__ssvfiscanf_r+0x1a2>
 8006c94:	6822      	ldr	r2, [r4, #0]
 8006c96:	7813      	ldrb	r3, [r2, #0]
 8006c98:	4553      	cmp	r3, sl
 8006c9a:	f040 812e 	bne.w	8006efa <__ssvfiscanf_r+0x2e6>
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006ca6:	3201      	adds	r2, #1
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6022      	str	r2, [r4, #0]
 8006cac:	9345      	str	r3, [sp, #276]	; 0x114
 8006cae:	e7d8      	b.n	8006c62 <__ssvfiscanf_r+0x4e>
 8006cb0:	9141      	str	r1, [sp, #260]	; 0x104
 8006cb2:	9143      	str	r1, [sp, #268]	; 0x10c
 8006cb4:	7853      	ldrb	r3, [r2, #1]
 8006cb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb8:	bf02      	ittt	eq
 8006cba:	2310      	moveq	r3, #16
 8006cbc:	1c95      	addeq	r5, r2, #2
 8006cbe:	9341      	streq	r3, [sp, #260]	; 0x104
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	46aa      	mov	sl, r5
 8006cc4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006cc8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	d91d      	bls.n	8006d0c <__ssvfiscanf_r+0xf8>
 8006cd0:	487e      	ldr	r0, [pc, #504]	; (8006ecc <__ssvfiscanf_r+0x2b8>)
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f7f9 fa84 	bl	80001e0 <memchr>
 8006cd8:	b140      	cbz	r0, 8006cec <__ssvfiscanf_r+0xd8>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	eba0 0009 	sub.w	r0, r0, r9
 8006ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ce4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ce6:	4318      	orrs	r0, r3
 8006ce8:	9041      	str	r0, [sp, #260]	; 0x104
 8006cea:	4655      	mov	r5, sl
 8006cec:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006cf0:	2b78      	cmp	r3, #120	; 0x78
 8006cf2:	d806      	bhi.n	8006d02 <__ssvfiscanf_r+0xee>
 8006cf4:	2b57      	cmp	r3, #87	; 0x57
 8006cf6:	d810      	bhi.n	8006d1a <__ssvfiscanf_r+0x106>
 8006cf8:	2b25      	cmp	r3, #37	; 0x25
 8006cfa:	d0c6      	beq.n	8006c8a <__ssvfiscanf_r+0x76>
 8006cfc:	d856      	bhi.n	8006dac <__ssvfiscanf_r+0x198>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d064      	beq.n	8006dcc <__ssvfiscanf_r+0x1b8>
 8006d02:	2303      	movs	r3, #3
 8006d04:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d06:	230a      	movs	r3, #10
 8006d08:	9342      	str	r3, [sp, #264]	; 0x108
 8006d0a:	e071      	b.n	8006df0 <__ssvfiscanf_r+0x1dc>
 8006d0c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006d0e:	fb02 1103 	mla	r1, r2, r3, r1
 8006d12:	3930      	subs	r1, #48	; 0x30
 8006d14:	9143      	str	r1, [sp, #268]	; 0x10c
 8006d16:	4655      	mov	r5, sl
 8006d18:	e7d3      	b.n	8006cc2 <__ssvfiscanf_r+0xae>
 8006d1a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006d1e:	2a20      	cmp	r2, #32
 8006d20:	d8ef      	bhi.n	8006d02 <__ssvfiscanf_r+0xee>
 8006d22:	a101      	add	r1, pc, #4	; (adr r1, 8006d28 <__ssvfiscanf_r+0x114>)
 8006d24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d28:	08006ddb 	.word	0x08006ddb
 8006d2c:	08006d03 	.word	0x08006d03
 8006d30:	08006d03 	.word	0x08006d03
 8006d34:	08006e39 	.word	0x08006e39
 8006d38:	08006d03 	.word	0x08006d03
 8006d3c:	08006d03 	.word	0x08006d03
 8006d40:	08006d03 	.word	0x08006d03
 8006d44:	08006d03 	.word	0x08006d03
 8006d48:	08006d03 	.word	0x08006d03
 8006d4c:	08006d03 	.word	0x08006d03
 8006d50:	08006d03 	.word	0x08006d03
 8006d54:	08006e4f 	.word	0x08006e4f
 8006d58:	08006e25 	.word	0x08006e25
 8006d5c:	08006db3 	.word	0x08006db3
 8006d60:	08006db3 	.word	0x08006db3
 8006d64:	08006db3 	.word	0x08006db3
 8006d68:	08006d03 	.word	0x08006d03
 8006d6c:	08006e29 	.word	0x08006e29
 8006d70:	08006d03 	.word	0x08006d03
 8006d74:	08006d03 	.word	0x08006d03
 8006d78:	08006d03 	.word	0x08006d03
 8006d7c:	08006d03 	.word	0x08006d03
 8006d80:	08006e5f 	.word	0x08006e5f
 8006d84:	08006e31 	.word	0x08006e31
 8006d88:	08006dd3 	.word	0x08006dd3
 8006d8c:	08006d03 	.word	0x08006d03
 8006d90:	08006d03 	.word	0x08006d03
 8006d94:	08006e5b 	.word	0x08006e5b
 8006d98:	08006d03 	.word	0x08006d03
 8006d9c:	08006e25 	.word	0x08006e25
 8006da0:	08006d03 	.word	0x08006d03
 8006da4:	08006d03 	.word	0x08006d03
 8006da8:	08006ddb 	.word	0x08006ddb
 8006dac:	3b45      	subs	r3, #69	; 0x45
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d8a7      	bhi.n	8006d02 <__ssvfiscanf_r+0xee>
 8006db2:	2305      	movs	r3, #5
 8006db4:	e01b      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006db6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006db8:	4621      	mov	r1, r4
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4798      	blx	r3
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	f43f af68 	beq.w	8006c94 <__ssvfiscanf_r+0x80>
 8006dc4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 808d 	bne.w	8006ee6 <__ssvfiscanf_r+0x2d2>
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	e08f      	b.n	8006ef2 <__ssvfiscanf_r+0x2de>
 8006dd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006dd4:	f042 0220 	orr.w	r2, r2, #32
 8006dd8:	9241      	str	r2, [sp, #260]	; 0x104
 8006dda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de0:	9241      	str	r2, [sp, #260]	; 0x104
 8006de2:	2210      	movs	r2, #16
 8006de4:	2b6f      	cmp	r3, #111	; 0x6f
 8006de6:	9242      	str	r2, [sp, #264]	; 0x108
 8006de8:	bf34      	ite	cc
 8006dea:	2303      	movcc	r3, #3
 8006dec:	2304      	movcs	r3, #4
 8006dee:	9347      	str	r3, [sp, #284]	; 0x11c
 8006df0:	6863      	ldr	r3, [r4, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dd42      	ble.n	8006e7c <__ssvfiscanf_r+0x268>
 8006df6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006df8:	0659      	lsls	r1, r3, #25
 8006dfa:	d404      	bmi.n	8006e06 <__ssvfiscanf_r+0x1f2>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	781a      	ldrb	r2, [r3, #0]
 8006e00:	5cba      	ldrb	r2, [r7, r2]
 8006e02:	0712      	lsls	r2, r2, #28
 8006e04:	d441      	bmi.n	8006e8a <__ssvfiscanf_r+0x276>
 8006e06:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	dc50      	bgt.n	8006eae <__ssvfiscanf_r+0x29a>
 8006e0c:	466b      	mov	r3, sp
 8006e0e:	4622      	mov	r2, r4
 8006e10:	a941      	add	r1, sp, #260	; 0x104
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 fa0a 	bl	800722c <_scanf_chars>
 8006e18:	2801      	cmp	r0, #1
 8006e1a:	d06e      	beq.n	8006efa <__ssvfiscanf_r+0x2e6>
 8006e1c:	2802      	cmp	r0, #2
 8006e1e:	f47f af20 	bne.w	8006c62 <__ssvfiscanf_r+0x4e>
 8006e22:	e7cf      	b.n	8006dc4 <__ssvfiscanf_r+0x1b0>
 8006e24:	220a      	movs	r2, #10
 8006e26:	e7dd      	b.n	8006de4 <__ssvfiscanf_r+0x1d0>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9342      	str	r3, [sp, #264]	; 0x108
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e7de      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006e30:	2308      	movs	r3, #8
 8006e32:	9342      	str	r3, [sp, #264]	; 0x108
 8006e34:	2304      	movs	r3, #4
 8006e36:	e7da      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006e38:	4629      	mov	r1, r5
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	f000 fb48 	bl	80074d0 <__sccl>
 8006e40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e46:	9341      	str	r3, [sp, #260]	; 0x104
 8006e48:	4605      	mov	r5, r0
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e7cf      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006e4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e54:	9341      	str	r3, [sp, #260]	; 0x104
 8006e56:	2300      	movs	r3, #0
 8006e58:	e7c9      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e7c7      	b.n	8006dee <__ssvfiscanf_r+0x1da>
 8006e5e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006e60:	06c3      	lsls	r3, r0, #27
 8006e62:	f53f aefe 	bmi.w	8006c62 <__ssvfiscanf_r+0x4e>
 8006e66:	9b00      	ldr	r3, [sp, #0]
 8006e68:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e6a:	1d19      	adds	r1, r3, #4
 8006e6c:	9100      	str	r1, [sp, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f010 0f01 	tst.w	r0, #1
 8006e74:	bf14      	ite	ne
 8006e76:	801a      	strhne	r2, [r3, #0]
 8006e78:	601a      	streq	r2, [r3, #0]
 8006e7a:	e6f2      	b.n	8006c62 <__ssvfiscanf_r+0x4e>
 8006e7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4630      	mov	r0, r6
 8006e82:	4798      	blx	r3
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d0b6      	beq.n	8006df6 <__ssvfiscanf_r+0x1e2>
 8006e88:	e79c      	b.n	8006dc4 <__ssvfiscanf_r+0x1b0>
 8006e8a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e8c:	3201      	adds	r2, #1
 8006e8e:	9245      	str	r2, [sp, #276]	; 0x114
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	3a01      	subs	r2, #1
 8006e94:	2a00      	cmp	r2, #0
 8006e96:	6062      	str	r2, [r4, #4]
 8006e98:	dd02      	ble.n	8006ea0 <__ssvfiscanf_r+0x28c>
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	e7ad      	b.n	8006dfc <__ssvfiscanf_r+0x1e8>
 8006ea0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	4798      	blx	r3
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0a7      	beq.n	8006dfc <__ssvfiscanf_r+0x1e8>
 8006eac:	e78a      	b.n	8006dc4 <__ssvfiscanf_r+0x1b0>
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	dc0e      	bgt.n	8006ed0 <__ssvfiscanf_r+0x2bc>
 8006eb2:	466b      	mov	r3, sp
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	a941      	add	r1, sp, #260	; 0x104
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 fa11 	bl	80072e0 <_scanf_i>
 8006ebe:	e7ab      	b.n	8006e18 <__ssvfiscanf_r+0x204>
 8006ec0:	08006b61 	.word	0x08006b61
 8006ec4:	08006bdb 	.word	0x08006bdb
 8006ec8:	08007b33 	.word	0x08007b33
 8006ecc:	08007aea 	.word	0x08007aea
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <__ssvfiscanf_r+0x2ec>)
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f43f aec5 	beq.w	8006c62 <__ssvfiscanf_r+0x4e>
 8006ed8:	466b      	mov	r3, sp
 8006eda:	4622      	mov	r2, r4
 8006edc:	a941      	add	r1, sp, #260	; 0x104
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f3af 8000 	nop.w
 8006ee4:	e798      	b.n	8006e18 <__ssvfiscanf_r+0x204>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006eec:	bf18      	it	ne
 8006eee:	f04f 30ff 	movne.w	r0, #4294967295
 8006ef2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006efc:	e7f9      	b.n	8006ef2 <__ssvfiscanf_r+0x2de>
 8006efe:	bf00      	nop
 8006f00:	00000000 	.word	0x00000000

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4616      	mov	r6, r2
 8006f0a:	4699      	mov	r9, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f14:	4293      	cmp	r3, r2
 8006f16:	bfb8      	it	lt
 8006f18:	4613      	movlt	r3, r2
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f20:	4607      	mov	r7, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	b10a      	cbz	r2, 8006f2a <_printf_common+0x26>
 8006f26:	3301      	adds	r3, #1
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	0699      	lsls	r1, r3, #26
 8006f2e:	bf42      	ittt	mi
 8006f30:	6833      	ldrmi	r3, [r6, #0]
 8006f32:	3302      	addmi	r3, #2
 8006f34:	6033      	strmi	r3, [r6, #0]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	f015 0506 	ands.w	r5, r5, #6
 8006f3c:	d106      	bne.n	8006f4c <_printf_common+0x48>
 8006f3e:	f104 0a19 	add.w	sl, r4, #25
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	6832      	ldr	r2, [r6, #0]
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	42ab      	cmp	r3, r5
 8006f4a:	dc26      	bgt.n	8006f9a <_printf_common+0x96>
 8006f4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f50:	1e13      	subs	r3, r2, #0
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	bf18      	it	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	0692      	lsls	r2, r2, #26
 8006f5a:	d42b      	bmi.n	8006fb4 <_printf_common+0xb0>
 8006f5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	47c0      	blx	r8
 8006f66:	3001      	adds	r0, #1
 8006f68:	d01e      	beq.n	8006fa8 <_printf_common+0xa4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	68e5      	ldr	r5, [r4, #12]
 8006f6e:	6832      	ldr	r2, [r6, #0]
 8006f70:	f003 0306 	and.w	r3, r3, #6
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	bf08      	it	eq
 8006f78:	1aad      	subeq	r5, r5, r2
 8006f7a:	68a3      	ldr	r3, [r4, #8]
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	bf0c      	ite	eq
 8006f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f84:	2500      	movne	r5, #0
 8006f86:	4293      	cmp	r3, r2
 8006f88:	bfc4      	itt	gt
 8006f8a:	1a9b      	subgt	r3, r3, r2
 8006f8c:	18ed      	addgt	r5, r5, r3
 8006f8e:	2600      	movs	r6, #0
 8006f90:	341a      	adds	r4, #26
 8006f92:	42b5      	cmp	r5, r6
 8006f94:	d11a      	bne.n	8006fcc <_printf_common+0xc8>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e008      	b.n	8006fac <_printf_common+0xa8>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	4652      	mov	r2, sl
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	47c0      	blx	r8
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d103      	bne.n	8006fb0 <_printf_common+0xac>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	e7c6      	b.n	8006f42 <_printf_common+0x3e>
 8006fb4:	18e1      	adds	r1, r4, r3
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	2030      	movs	r0, #48	; 0x30
 8006fba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fbe:	4422      	add	r2, r4
 8006fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fc8:	3302      	adds	r3, #2
 8006fca:	e7c7      	b.n	8006f5c <_printf_common+0x58>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4622      	mov	r2, r4
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	47c0      	blx	r8
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d0e6      	beq.n	8006fa8 <_printf_common+0xa4>
 8006fda:	3601      	adds	r6, #1
 8006fdc:	e7d9      	b.n	8006f92 <_printf_common+0x8e>
	...

08006fe0 <_printf_i>:
 8006fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	7e0f      	ldrb	r7, [r1, #24]
 8006fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fe8:	2f78      	cmp	r7, #120	; 0x78
 8006fea:	4691      	mov	r9, r2
 8006fec:	4680      	mov	r8, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ff6:	d807      	bhi.n	8007008 <_printf_i+0x28>
 8006ff8:	2f62      	cmp	r7, #98	; 0x62
 8006ffa:	d80a      	bhi.n	8007012 <_printf_i+0x32>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	f000 80d8 	beq.w	80071b2 <_printf_i+0x1d2>
 8007002:	2f58      	cmp	r7, #88	; 0x58
 8007004:	f000 80a3 	beq.w	800714e <_printf_i+0x16e>
 8007008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800700c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007010:	e03a      	b.n	8007088 <_printf_i+0xa8>
 8007012:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007016:	2b15      	cmp	r3, #21
 8007018:	d8f6      	bhi.n	8007008 <_printf_i+0x28>
 800701a:	a101      	add	r1, pc, #4	; (adr r1, 8007020 <_printf_i+0x40>)
 800701c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007020:	08007079 	.word	0x08007079
 8007024:	0800708d 	.word	0x0800708d
 8007028:	08007009 	.word	0x08007009
 800702c:	08007009 	.word	0x08007009
 8007030:	08007009 	.word	0x08007009
 8007034:	08007009 	.word	0x08007009
 8007038:	0800708d 	.word	0x0800708d
 800703c:	08007009 	.word	0x08007009
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	08007199 	.word	0x08007199
 8007050:	080070bd 	.word	0x080070bd
 8007054:	0800717b 	.word	0x0800717b
 8007058:	08007009 	.word	0x08007009
 800705c:	08007009 	.word	0x08007009
 8007060:	080071bb 	.word	0x080071bb
 8007064:	08007009 	.word	0x08007009
 8007068:	080070bd 	.word	0x080070bd
 800706c:	08007009 	.word	0x08007009
 8007070:	08007009 	.word	0x08007009
 8007074:	08007183 	.word	0x08007183
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	1d1a      	adds	r2, r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	602a      	str	r2, [r5, #0]
 8007080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e0a3      	b.n	80071d4 <_printf_i+0x1f4>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	6829      	ldr	r1, [r5, #0]
 8007090:	0606      	lsls	r6, r0, #24
 8007092:	f101 0304 	add.w	r3, r1, #4
 8007096:	d50a      	bpl.n	80070ae <_printf_i+0xce>
 8007098:	680e      	ldr	r6, [r1, #0]
 800709a:	602b      	str	r3, [r5, #0]
 800709c:	2e00      	cmp	r6, #0
 800709e:	da03      	bge.n	80070a8 <_printf_i+0xc8>
 80070a0:	232d      	movs	r3, #45	; 0x2d
 80070a2:	4276      	negs	r6, r6
 80070a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070a8:	485e      	ldr	r0, [pc, #376]	; (8007224 <_printf_i+0x244>)
 80070aa:	230a      	movs	r3, #10
 80070ac:	e019      	b.n	80070e2 <_printf_i+0x102>
 80070ae:	680e      	ldr	r6, [r1, #0]
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070b6:	bf18      	it	ne
 80070b8:	b236      	sxthne	r6, r6
 80070ba:	e7ef      	b.n	800709c <_printf_i+0xbc>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	6029      	str	r1, [r5, #0]
 80070c4:	0601      	lsls	r1, r0, #24
 80070c6:	d501      	bpl.n	80070cc <_printf_i+0xec>
 80070c8:	681e      	ldr	r6, [r3, #0]
 80070ca:	e002      	b.n	80070d2 <_printf_i+0xf2>
 80070cc:	0646      	lsls	r6, r0, #25
 80070ce:	d5fb      	bpl.n	80070c8 <_printf_i+0xe8>
 80070d0:	881e      	ldrh	r6, [r3, #0]
 80070d2:	4854      	ldr	r0, [pc, #336]	; (8007224 <_printf_i+0x244>)
 80070d4:	2f6f      	cmp	r7, #111	; 0x6f
 80070d6:	bf0c      	ite	eq
 80070d8:	2308      	moveq	r3, #8
 80070da:	230a      	movne	r3, #10
 80070dc:	2100      	movs	r1, #0
 80070de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070e2:	6865      	ldr	r5, [r4, #4]
 80070e4:	60a5      	str	r5, [r4, #8]
 80070e6:	2d00      	cmp	r5, #0
 80070e8:	bfa2      	ittt	ge
 80070ea:	6821      	ldrge	r1, [r4, #0]
 80070ec:	f021 0104 	bicge.w	r1, r1, #4
 80070f0:	6021      	strge	r1, [r4, #0]
 80070f2:	b90e      	cbnz	r6, 80070f8 <_printf_i+0x118>
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	d04d      	beq.n	8007194 <_printf_i+0x1b4>
 80070f8:	4615      	mov	r5, r2
 80070fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80070fe:	fb03 6711 	mls	r7, r3, r1, r6
 8007102:	5dc7      	ldrb	r7, [r0, r7]
 8007104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007108:	4637      	mov	r7, r6
 800710a:	42bb      	cmp	r3, r7
 800710c:	460e      	mov	r6, r1
 800710e:	d9f4      	bls.n	80070fa <_printf_i+0x11a>
 8007110:	2b08      	cmp	r3, #8
 8007112:	d10b      	bne.n	800712c <_printf_i+0x14c>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	07de      	lsls	r6, r3, #31
 8007118:	d508      	bpl.n	800712c <_printf_i+0x14c>
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6861      	ldr	r1, [r4, #4]
 800711e:	4299      	cmp	r1, r3
 8007120:	bfde      	ittt	le
 8007122:	2330      	movle	r3, #48	; 0x30
 8007124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800712c:	1b52      	subs	r2, r2, r5
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	f8cd a000 	str.w	sl, [sp]
 8007134:	464b      	mov	r3, r9
 8007136:	aa03      	add	r2, sp, #12
 8007138:	4621      	mov	r1, r4
 800713a:	4640      	mov	r0, r8
 800713c:	f7ff fee2 	bl	8006f04 <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	d14c      	bne.n	80071de <_printf_i+0x1fe>
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	b004      	add	sp, #16
 800714a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714e:	4835      	ldr	r0, [pc, #212]	; (8007224 <_printf_i+0x244>)
 8007150:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007154:	6829      	ldr	r1, [r5, #0]
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	f851 6b04 	ldr.w	r6, [r1], #4
 800715c:	6029      	str	r1, [r5, #0]
 800715e:	061d      	lsls	r5, r3, #24
 8007160:	d514      	bpl.n	800718c <_printf_i+0x1ac>
 8007162:	07df      	lsls	r7, r3, #31
 8007164:	bf44      	itt	mi
 8007166:	f043 0320 	orrmi.w	r3, r3, #32
 800716a:	6023      	strmi	r3, [r4, #0]
 800716c:	b91e      	cbnz	r6, 8007176 <_printf_i+0x196>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	f023 0320 	bic.w	r3, r3, #32
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	2310      	movs	r3, #16
 8007178:	e7b0      	b.n	80070dc <_printf_i+0xfc>
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f043 0320 	orr.w	r3, r3, #32
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	2378      	movs	r3, #120	; 0x78
 8007184:	4828      	ldr	r0, [pc, #160]	; (8007228 <_printf_i+0x248>)
 8007186:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800718a:	e7e3      	b.n	8007154 <_printf_i+0x174>
 800718c:	0659      	lsls	r1, r3, #25
 800718e:	bf48      	it	mi
 8007190:	b2b6      	uxthmi	r6, r6
 8007192:	e7e6      	b.n	8007162 <_printf_i+0x182>
 8007194:	4615      	mov	r5, r2
 8007196:	e7bb      	b.n	8007110 <_printf_i+0x130>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	6826      	ldr	r6, [r4, #0]
 800719c:	6961      	ldr	r1, [r4, #20]
 800719e:	1d18      	adds	r0, r3, #4
 80071a0:	6028      	str	r0, [r5, #0]
 80071a2:	0635      	lsls	r5, r6, #24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0x1cc>
 80071a8:	6019      	str	r1, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <_printf_i+0x1d2>
 80071ac:	0670      	lsls	r0, r6, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0x1c8>
 80071b0:	8019      	strh	r1, [r3, #0]
 80071b2:	2300      	movs	r3, #0
 80071b4:	6123      	str	r3, [r4, #16]
 80071b6:	4615      	mov	r5, r2
 80071b8:	e7ba      	b.n	8007130 <_printf_i+0x150>
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	1d1a      	adds	r2, r3, #4
 80071be:	602a      	str	r2, [r5, #0]
 80071c0:	681d      	ldr	r5, [r3, #0]
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	2100      	movs	r1, #0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f7f9 f80a 	bl	80001e0 <memchr>
 80071cc:	b108      	cbz	r0, 80071d2 <_printf_i+0x1f2>
 80071ce:	1b40      	subs	r0, r0, r5
 80071d0:	6060      	str	r0, [r4, #4]
 80071d2:	6863      	ldr	r3, [r4, #4]
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	2300      	movs	r3, #0
 80071d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071dc:	e7a8      	b.n	8007130 <_printf_i+0x150>
 80071de:	6923      	ldr	r3, [r4, #16]
 80071e0:	462a      	mov	r2, r5
 80071e2:	4649      	mov	r1, r9
 80071e4:	4640      	mov	r0, r8
 80071e6:	47d0      	blx	sl
 80071e8:	3001      	adds	r0, #1
 80071ea:	d0ab      	beq.n	8007144 <_printf_i+0x164>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	d413      	bmi.n	800721a <_printf_i+0x23a>
 80071f2:	68e0      	ldr	r0, [r4, #12]
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	4298      	cmp	r0, r3
 80071f8:	bfb8      	it	lt
 80071fa:	4618      	movlt	r0, r3
 80071fc:	e7a4      	b.n	8007148 <_printf_i+0x168>
 80071fe:	2301      	movs	r3, #1
 8007200:	4632      	mov	r2, r6
 8007202:	4649      	mov	r1, r9
 8007204:	4640      	mov	r0, r8
 8007206:	47d0      	blx	sl
 8007208:	3001      	adds	r0, #1
 800720a:	d09b      	beq.n	8007144 <_printf_i+0x164>
 800720c:	3501      	adds	r5, #1
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	9903      	ldr	r1, [sp, #12]
 8007212:	1a5b      	subs	r3, r3, r1
 8007214:	42ab      	cmp	r3, r5
 8007216:	dcf2      	bgt.n	80071fe <_printf_i+0x21e>
 8007218:	e7eb      	b.n	80071f2 <_printf_i+0x212>
 800721a:	2500      	movs	r5, #0
 800721c:	f104 0619 	add.w	r6, r4, #25
 8007220:	e7f5      	b.n	800720e <_printf_i+0x22e>
 8007222:	bf00      	nop
 8007224:	08007af5 	.word	0x08007af5
 8007228:	08007b06 	.word	0x08007b06

0800722c <_scanf_chars>:
 800722c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007230:	4615      	mov	r5, r2
 8007232:	688a      	ldr	r2, [r1, #8]
 8007234:	4680      	mov	r8, r0
 8007236:	460c      	mov	r4, r1
 8007238:	b932      	cbnz	r2, 8007248 <_scanf_chars+0x1c>
 800723a:	698a      	ldr	r2, [r1, #24]
 800723c:	2a00      	cmp	r2, #0
 800723e:	bf0c      	ite	eq
 8007240:	2201      	moveq	r2, #1
 8007242:	f04f 32ff 	movne.w	r2, #4294967295
 8007246:	608a      	str	r2, [r1, #8]
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80072dc <_scanf_chars+0xb0>
 800724e:	06d1      	lsls	r1, r2, #27
 8007250:	bf5f      	itttt	pl
 8007252:	681a      	ldrpl	r2, [r3, #0]
 8007254:	1d11      	addpl	r1, r2, #4
 8007256:	6019      	strpl	r1, [r3, #0]
 8007258:	6816      	ldrpl	r6, [r2, #0]
 800725a:	2700      	movs	r7, #0
 800725c:	69a0      	ldr	r0, [r4, #24]
 800725e:	b188      	cbz	r0, 8007284 <_scanf_chars+0x58>
 8007260:	2801      	cmp	r0, #1
 8007262:	d107      	bne.n	8007274 <_scanf_chars+0x48>
 8007264:	682a      	ldr	r2, [r5, #0]
 8007266:	7811      	ldrb	r1, [r2, #0]
 8007268:	6962      	ldr	r2, [r4, #20]
 800726a:	5c52      	ldrb	r2, [r2, r1]
 800726c:	b952      	cbnz	r2, 8007284 <_scanf_chars+0x58>
 800726e:	2f00      	cmp	r7, #0
 8007270:	d031      	beq.n	80072d6 <_scanf_chars+0xaa>
 8007272:	e022      	b.n	80072ba <_scanf_chars+0x8e>
 8007274:	2802      	cmp	r0, #2
 8007276:	d120      	bne.n	80072ba <_scanf_chars+0x8e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007280:	071b      	lsls	r3, r3, #28
 8007282:	d41a      	bmi.n	80072ba <_scanf_chars+0x8e>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	06da      	lsls	r2, r3, #27
 8007288:	bf5e      	ittt	pl
 800728a:	682b      	ldrpl	r3, [r5, #0]
 800728c:	781b      	ldrbpl	r3, [r3, #0]
 800728e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007292:	682a      	ldr	r2, [r5, #0]
 8007294:	686b      	ldr	r3, [r5, #4]
 8007296:	3201      	adds	r2, #1
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	68a2      	ldr	r2, [r4, #8]
 800729c:	3b01      	subs	r3, #1
 800729e:	3a01      	subs	r2, #1
 80072a0:	606b      	str	r3, [r5, #4]
 80072a2:	3701      	adds	r7, #1
 80072a4:	60a2      	str	r2, [r4, #8]
 80072a6:	b142      	cbz	r2, 80072ba <_scanf_chars+0x8e>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dcd7      	bgt.n	800725c <_scanf_chars+0x30>
 80072ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072b0:	4629      	mov	r1, r5
 80072b2:	4640      	mov	r0, r8
 80072b4:	4798      	blx	r3
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0d0      	beq.n	800725c <_scanf_chars+0x30>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f013 0310 	ands.w	r3, r3, #16
 80072c0:	d105      	bne.n	80072ce <_scanf_chars+0xa2>
 80072c2:	68e2      	ldr	r2, [r4, #12]
 80072c4:	3201      	adds	r2, #1
 80072c6:	60e2      	str	r2, [r4, #12]
 80072c8:	69a2      	ldr	r2, [r4, #24]
 80072ca:	b102      	cbz	r2, 80072ce <_scanf_chars+0xa2>
 80072cc:	7033      	strb	r3, [r6, #0]
 80072ce:	6923      	ldr	r3, [r4, #16]
 80072d0:	443b      	add	r3, r7
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	2000      	movs	r0, #0
 80072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072da:	bf00      	nop
 80072dc:	08007b33 	.word	0x08007b33

080072e0 <_scanf_i>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	4698      	mov	r8, r3
 80072e6:	4b76      	ldr	r3, [pc, #472]	; (80074c0 <_scanf_i+0x1e0>)
 80072e8:	460c      	mov	r4, r1
 80072ea:	4682      	mov	sl, r0
 80072ec:	4616      	mov	r6, r2
 80072ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072f2:	b087      	sub	sp, #28
 80072f4:	ab03      	add	r3, sp, #12
 80072f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80072fa:	4b72      	ldr	r3, [pc, #456]	; (80074c4 <_scanf_i+0x1e4>)
 80072fc:	69a1      	ldr	r1, [r4, #24]
 80072fe:	4a72      	ldr	r2, [pc, #456]	; (80074c8 <_scanf_i+0x1e8>)
 8007300:	2903      	cmp	r1, #3
 8007302:	bf18      	it	ne
 8007304:	461a      	movne	r2, r3
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	9201      	str	r2, [sp, #4]
 800730a:	1e5a      	subs	r2, r3, #1
 800730c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007310:	bf88      	it	hi
 8007312:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007316:	4627      	mov	r7, r4
 8007318:	bf82      	ittt	hi
 800731a:	eb03 0905 	addhi.w	r9, r3, r5
 800731e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007322:	60a3      	strhi	r3, [r4, #8]
 8007324:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007328:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800732c:	bf98      	it	ls
 800732e:	f04f 0900 	movls.w	r9, #0
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	463d      	mov	r5, r7
 8007336:	f04f 0b00 	mov.w	fp, #0
 800733a:	6831      	ldr	r1, [r6, #0]
 800733c:	ab03      	add	r3, sp, #12
 800733e:	7809      	ldrb	r1, [r1, #0]
 8007340:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007344:	2202      	movs	r2, #2
 8007346:	f7f8 ff4b 	bl	80001e0 <memchr>
 800734a:	b328      	cbz	r0, 8007398 <_scanf_i+0xb8>
 800734c:	f1bb 0f01 	cmp.w	fp, #1
 8007350:	d159      	bne.n	8007406 <_scanf_i+0x126>
 8007352:	6862      	ldr	r2, [r4, #4]
 8007354:	b92a      	cbnz	r2, 8007362 <_scanf_i+0x82>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	2308      	movs	r3, #8
 800735a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007368:	6022      	str	r2, [r4, #0]
 800736a:	68a2      	ldr	r2, [r4, #8]
 800736c:	1e51      	subs	r1, r2, #1
 800736e:	60a1      	str	r1, [r4, #8]
 8007370:	b192      	cbz	r2, 8007398 <_scanf_i+0xb8>
 8007372:	6832      	ldr	r2, [r6, #0]
 8007374:	1c51      	adds	r1, r2, #1
 8007376:	6031      	str	r1, [r6, #0]
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	f805 2b01 	strb.w	r2, [r5], #1
 800737e:	6872      	ldr	r2, [r6, #4]
 8007380:	3a01      	subs	r2, #1
 8007382:	2a00      	cmp	r2, #0
 8007384:	6072      	str	r2, [r6, #4]
 8007386:	dc07      	bgt.n	8007398 <_scanf_i+0xb8>
 8007388:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800738c:	4631      	mov	r1, r6
 800738e:	4650      	mov	r0, sl
 8007390:	4790      	blx	r2
 8007392:	2800      	cmp	r0, #0
 8007394:	f040 8085 	bne.w	80074a2 <_scanf_i+0x1c2>
 8007398:	f10b 0b01 	add.w	fp, fp, #1
 800739c:	f1bb 0f03 	cmp.w	fp, #3
 80073a0:	d1cb      	bne.n	800733a <_scanf_i+0x5a>
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	b90b      	cbnz	r3, 80073aa <_scanf_i+0xca>
 80073a6:	230a      	movs	r3, #10
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	4947      	ldr	r1, [pc, #284]	; (80074cc <_scanf_i+0x1ec>)
 80073ae:	6960      	ldr	r0, [r4, #20]
 80073b0:	1ac9      	subs	r1, r1, r3
 80073b2:	f000 f88d 	bl	80074d0 <__sccl>
 80073b6:	f04f 0b00 	mov.w	fp, #0
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d03d      	beq.n	800743e <_scanf_i+0x15e>
 80073c2:	6831      	ldr	r1, [r6, #0]
 80073c4:	6960      	ldr	r0, [r4, #20]
 80073c6:	f891 c000 	ldrb.w	ip, [r1]
 80073ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d035      	beq.n	800743e <_scanf_i+0x15e>
 80073d2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80073d6:	d124      	bne.n	8007422 <_scanf_i+0x142>
 80073d8:	0510      	lsls	r0, r2, #20
 80073da:	d522      	bpl.n	8007422 <_scanf_i+0x142>
 80073dc:	f10b 0b01 	add.w	fp, fp, #1
 80073e0:	f1b9 0f00 	cmp.w	r9, #0
 80073e4:	d003      	beq.n	80073ee <_scanf_i+0x10e>
 80073e6:	3301      	adds	r3, #1
 80073e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80073ec:	60a3      	str	r3, [r4, #8]
 80073ee:	6873      	ldr	r3, [r6, #4]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	6073      	str	r3, [r6, #4]
 80073f6:	dd1b      	ble.n	8007430 <_scanf_i+0x150>
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	3b01      	subs	r3, #1
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	e7d9      	b.n	80073ba <_scanf_i+0xda>
 8007406:	f1bb 0f02 	cmp.w	fp, #2
 800740a:	d1ae      	bne.n	800736a <_scanf_i+0x8a>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007412:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007416:	d1bf      	bne.n	8007398 <_scanf_i+0xb8>
 8007418:	2310      	movs	r3, #16
 800741a:	6063      	str	r3, [r4, #4]
 800741c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007420:	e7a2      	b.n	8007368 <_scanf_i+0x88>
 8007422:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	780b      	ldrb	r3, [r1, #0]
 800742a:	f805 3b01 	strb.w	r3, [r5], #1
 800742e:	e7de      	b.n	80073ee <_scanf_i+0x10e>
 8007430:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007434:	4631      	mov	r1, r6
 8007436:	4650      	mov	r0, sl
 8007438:	4798      	blx	r3
 800743a:	2800      	cmp	r0, #0
 800743c:	d0df      	beq.n	80073fe <_scanf_i+0x11e>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	05db      	lsls	r3, r3, #23
 8007442:	d50d      	bpl.n	8007460 <_scanf_i+0x180>
 8007444:	42bd      	cmp	r5, r7
 8007446:	d909      	bls.n	800745c <_scanf_i+0x17c>
 8007448:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800744c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007450:	4632      	mov	r2, r6
 8007452:	4650      	mov	r0, sl
 8007454:	4798      	blx	r3
 8007456:	f105 39ff 	add.w	r9, r5, #4294967295
 800745a:	464d      	mov	r5, r9
 800745c:	42bd      	cmp	r5, r7
 800745e:	d02d      	beq.n	80074bc <_scanf_i+0x1dc>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	f012 0210 	ands.w	r2, r2, #16
 8007466:	d113      	bne.n	8007490 <_scanf_i+0x1b0>
 8007468:	702a      	strb	r2, [r5, #0]
 800746a:	6863      	ldr	r3, [r4, #4]
 800746c:	9e01      	ldr	r6, [sp, #4]
 800746e:	4639      	mov	r1, r7
 8007470:	4650      	mov	r0, sl
 8007472:	47b0      	blx	r6
 8007474:	6821      	ldr	r1, [r4, #0]
 8007476:	f8d8 3000 	ldr.w	r3, [r8]
 800747a:	f011 0f20 	tst.w	r1, #32
 800747e:	d013      	beq.n	80074a8 <_scanf_i+0x1c8>
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	f8c8 2000 	str.w	r2, [r8]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6018      	str	r0, [r3, #0]
 800748a:	68e3      	ldr	r3, [r4, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60e3      	str	r3, [r4, #12]
 8007490:	1bed      	subs	r5, r5, r7
 8007492:	44ab      	add	fp, r5
 8007494:	6925      	ldr	r5, [r4, #16]
 8007496:	445d      	add	r5, fp
 8007498:	6125      	str	r5, [r4, #16]
 800749a:	2000      	movs	r0, #0
 800749c:	b007      	add	sp, #28
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	f04f 0b00 	mov.w	fp, #0
 80074a6:	e7ca      	b.n	800743e <_scanf_i+0x15e>
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	f8c8 2000 	str.w	r2, [r8]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f011 0f01 	tst.w	r1, #1
 80074b4:	bf14      	ite	ne
 80074b6:	8018      	strhne	r0, [r3, #0]
 80074b8:	6018      	streq	r0, [r3, #0]
 80074ba:	e7e6      	b.n	800748a <_scanf_i+0x1aa>
 80074bc:	2001      	movs	r0, #1
 80074be:	e7ed      	b.n	800749c <_scanf_i+0x1bc>
 80074c0:	08007aa0 	.word	0x08007aa0
 80074c4:	0800772d 	.word	0x0800772d
 80074c8:	08007645 	.word	0x08007645
 80074cc:	08007b30 	.word	0x08007b30

080074d0 <__sccl>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	780b      	ldrb	r3, [r1, #0]
 80074d4:	4604      	mov	r4, r0
 80074d6:	2b5e      	cmp	r3, #94	; 0x5e
 80074d8:	bf0b      	itete	eq
 80074da:	784b      	ldrbeq	r3, [r1, #1]
 80074dc:	1c48      	addne	r0, r1, #1
 80074de:	1c88      	addeq	r0, r1, #2
 80074e0:	2200      	movne	r2, #0
 80074e2:	bf08      	it	eq
 80074e4:	2201      	moveq	r2, #1
 80074e6:	1e61      	subs	r1, r4, #1
 80074e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80074ec:	f801 2f01 	strb.w	r2, [r1, #1]!
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d1fb      	bne.n	80074ec <__sccl+0x1c>
 80074f4:	b90b      	cbnz	r3, 80074fa <__sccl+0x2a>
 80074f6:	3801      	subs	r0, #1
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
 80074fa:	f082 0201 	eor.w	r2, r2, #1
 80074fe:	54e2      	strb	r2, [r4, r3]
 8007500:	4605      	mov	r5, r0
 8007502:	4628      	mov	r0, r5
 8007504:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007508:	292d      	cmp	r1, #45	; 0x2d
 800750a:	d006      	beq.n	800751a <__sccl+0x4a>
 800750c:	295d      	cmp	r1, #93	; 0x5d
 800750e:	d0f3      	beq.n	80074f8 <__sccl+0x28>
 8007510:	b909      	cbnz	r1, 8007516 <__sccl+0x46>
 8007512:	4628      	mov	r0, r5
 8007514:	e7f0      	b.n	80074f8 <__sccl+0x28>
 8007516:	460b      	mov	r3, r1
 8007518:	e7f1      	b.n	80074fe <__sccl+0x2e>
 800751a:	786e      	ldrb	r6, [r5, #1]
 800751c:	2e5d      	cmp	r6, #93	; 0x5d
 800751e:	d0fa      	beq.n	8007516 <__sccl+0x46>
 8007520:	42b3      	cmp	r3, r6
 8007522:	dcf8      	bgt.n	8007516 <__sccl+0x46>
 8007524:	3502      	adds	r5, #2
 8007526:	4619      	mov	r1, r3
 8007528:	3101      	adds	r1, #1
 800752a:	428e      	cmp	r6, r1
 800752c:	5462      	strb	r2, [r4, r1]
 800752e:	dcfb      	bgt.n	8007528 <__sccl+0x58>
 8007530:	1af1      	subs	r1, r6, r3
 8007532:	3901      	subs	r1, #1
 8007534:	1c58      	adds	r0, r3, #1
 8007536:	42b3      	cmp	r3, r6
 8007538:	bfa8      	it	ge
 800753a:	2100      	movge	r1, #0
 800753c:	1843      	adds	r3, r0, r1
 800753e:	e7e0      	b.n	8007502 <__sccl+0x32>

08007540 <_strtol_l.constprop.0>:
 8007540:	2b01      	cmp	r3, #1
 8007542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007546:	d001      	beq.n	800754c <_strtol_l.constprop.0+0xc>
 8007548:	2b24      	cmp	r3, #36	; 0x24
 800754a:	d906      	bls.n	800755a <_strtol_l.constprop.0+0x1a>
 800754c:	f7ff f92c 	bl	80067a8 <__errno>
 8007550:	2316      	movs	r3, #22
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	2000      	movs	r0, #0
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007640 <_strtol_l.constprop.0+0x100>
 800755e:	460d      	mov	r5, r1
 8007560:	462e      	mov	r6, r5
 8007562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007566:	f814 700c 	ldrb.w	r7, [r4, ip]
 800756a:	f017 0708 	ands.w	r7, r7, #8
 800756e:	d1f7      	bne.n	8007560 <_strtol_l.constprop.0+0x20>
 8007570:	2c2d      	cmp	r4, #45	; 0x2d
 8007572:	d132      	bne.n	80075da <_strtol_l.constprop.0+0x9a>
 8007574:	782c      	ldrb	r4, [r5, #0]
 8007576:	2701      	movs	r7, #1
 8007578:	1cb5      	adds	r5, r6, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d05b      	beq.n	8007636 <_strtol_l.constprop.0+0xf6>
 800757e:	2b10      	cmp	r3, #16
 8007580:	d109      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007582:	2c30      	cmp	r4, #48	; 0x30
 8007584:	d107      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007586:	782c      	ldrb	r4, [r5, #0]
 8007588:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800758c:	2c58      	cmp	r4, #88	; 0x58
 800758e:	d14d      	bne.n	800762c <_strtol_l.constprop.0+0xec>
 8007590:	786c      	ldrb	r4, [r5, #1]
 8007592:	2310      	movs	r3, #16
 8007594:	3502      	adds	r5, #2
 8007596:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800759a:	f108 38ff 	add.w	r8, r8, #4294967295
 800759e:	f04f 0c00 	mov.w	ip, #0
 80075a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80075a6:	4666      	mov	r6, ip
 80075a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80075ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80075b0:	f1be 0f09 	cmp.w	lr, #9
 80075b4:	d816      	bhi.n	80075e4 <_strtol_l.constprop.0+0xa4>
 80075b6:	4674      	mov	r4, lr
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	dd24      	ble.n	8007606 <_strtol_l.constprop.0+0xc6>
 80075bc:	f1bc 0f00 	cmp.w	ip, #0
 80075c0:	db1e      	blt.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075c2:	45b1      	cmp	r9, r6
 80075c4:	d31c      	bcc.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075c6:	d101      	bne.n	80075cc <_strtol_l.constprop.0+0x8c>
 80075c8:	45a2      	cmp	sl, r4
 80075ca:	db19      	blt.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075cc:	fb06 4603 	mla	r6, r6, r3, r4
 80075d0:	f04f 0c01 	mov.w	ip, #1
 80075d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075d8:	e7e8      	b.n	80075ac <_strtol_l.constprop.0+0x6c>
 80075da:	2c2b      	cmp	r4, #43	; 0x2b
 80075dc:	bf04      	itt	eq
 80075de:	782c      	ldrbeq	r4, [r5, #0]
 80075e0:	1cb5      	addeq	r5, r6, #2
 80075e2:	e7ca      	b.n	800757a <_strtol_l.constprop.0+0x3a>
 80075e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075e8:	f1be 0f19 	cmp.w	lr, #25
 80075ec:	d801      	bhi.n	80075f2 <_strtol_l.constprop.0+0xb2>
 80075ee:	3c37      	subs	r4, #55	; 0x37
 80075f0:	e7e2      	b.n	80075b8 <_strtol_l.constprop.0+0x78>
 80075f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80075f6:	f1be 0f19 	cmp.w	lr, #25
 80075fa:	d804      	bhi.n	8007606 <_strtol_l.constprop.0+0xc6>
 80075fc:	3c57      	subs	r4, #87	; 0x57
 80075fe:	e7db      	b.n	80075b8 <_strtol_l.constprop.0+0x78>
 8007600:	f04f 3cff 	mov.w	ip, #4294967295
 8007604:	e7e6      	b.n	80075d4 <_strtol_l.constprop.0+0x94>
 8007606:	f1bc 0f00 	cmp.w	ip, #0
 800760a:	da05      	bge.n	8007618 <_strtol_l.constprop.0+0xd8>
 800760c:	2322      	movs	r3, #34	; 0x22
 800760e:	6003      	str	r3, [r0, #0]
 8007610:	4646      	mov	r6, r8
 8007612:	b942      	cbnz	r2, 8007626 <_strtol_l.constprop.0+0xe6>
 8007614:	4630      	mov	r0, r6
 8007616:	e79e      	b.n	8007556 <_strtol_l.constprop.0+0x16>
 8007618:	b107      	cbz	r7, 800761c <_strtol_l.constprop.0+0xdc>
 800761a:	4276      	negs	r6, r6
 800761c:	2a00      	cmp	r2, #0
 800761e:	d0f9      	beq.n	8007614 <_strtol_l.constprop.0+0xd4>
 8007620:	f1bc 0f00 	cmp.w	ip, #0
 8007624:	d000      	beq.n	8007628 <_strtol_l.constprop.0+0xe8>
 8007626:	1e69      	subs	r1, r5, #1
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	e7f3      	b.n	8007614 <_strtol_l.constprop.0+0xd4>
 800762c:	2430      	movs	r4, #48	; 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1b1      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007632:	2308      	movs	r3, #8
 8007634:	e7af      	b.n	8007596 <_strtol_l.constprop.0+0x56>
 8007636:	2c30      	cmp	r4, #48	; 0x30
 8007638:	d0a5      	beq.n	8007586 <_strtol_l.constprop.0+0x46>
 800763a:	230a      	movs	r3, #10
 800763c:	e7ab      	b.n	8007596 <_strtol_l.constprop.0+0x56>
 800763e:	bf00      	nop
 8007640:	08007b33 	.word	0x08007b33

08007644 <_strtol_r>:
 8007644:	f7ff bf7c 	b.w	8007540 <_strtol_l.constprop.0>

08007648 <_strtoul_l.constprop.0>:
 8007648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800764c:	4f36      	ldr	r7, [pc, #216]	; (8007728 <_strtoul_l.constprop.0+0xe0>)
 800764e:	4686      	mov	lr, r0
 8007650:	460d      	mov	r5, r1
 8007652:	4628      	mov	r0, r5
 8007654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007658:	5de6      	ldrb	r6, [r4, r7]
 800765a:	f016 0608 	ands.w	r6, r6, #8
 800765e:	d1f8      	bne.n	8007652 <_strtoul_l.constprop.0+0xa>
 8007660:	2c2d      	cmp	r4, #45	; 0x2d
 8007662:	d12f      	bne.n	80076c4 <_strtoul_l.constprop.0+0x7c>
 8007664:	782c      	ldrb	r4, [r5, #0]
 8007666:	2601      	movs	r6, #1
 8007668:	1c85      	adds	r5, r0, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d057      	beq.n	800771e <_strtoul_l.constprop.0+0xd6>
 800766e:	2b10      	cmp	r3, #16
 8007670:	d109      	bne.n	8007686 <_strtoul_l.constprop.0+0x3e>
 8007672:	2c30      	cmp	r4, #48	; 0x30
 8007674:	d107      	bne.n	8007686 <_strtoul_l.constprop.0+0x3e>
 8007676:	7828      	ldrb	r0, [r5, #0]
 8007678:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800767c:	2858      	cmp	r0, #88	; 0x58
 800767e:	d149      	bne.n	8007714 <_strtoul_l.constprop.0+0xcc>
 8007680:	786c      	ldrb	r4, [r5, #1]
 8007682:	2310      	movs	r3, #16
 8007684:	3502      	adds	r5, #2
 8007686:	f04f 38ff 	mov.w	r8, #4294967295
 800768a:	2700      	movs	r7, #0
 800768c:	fbb8 f8f3 	udiv	r8, r8, r3
 8007690:	fb03 f908 	mul.w	r9, r3, r8
 8007694:	ea6f 0909 	mvn.w	r9, r9
 8007698:	4638      	mov	r0, r7
 800769a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800769e:	f1bc 0f09 	cmp.w	ip, #9
 80076a2:	d814      	bhi.n	80076ce <_strtoul_l.constprop.0+0x86>
 80076a4:	4664      	mov	r4, ip
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	dd22      	ble.n	80076f0 <_strtoul_l.constprop.0+0xa8>
 80076aa:	2f00      	cmp	r7, #0
 80076ac:	db1d      	blt.n	80076ea <_strtoul_l.constprop.0+0xa2>
 80076ae:	4580      	cmp	r8, r0
 80076b0:	d31b      	bcc.n	80076ea <_strtoul_l.constprop.0+0xa2>
 80076b2:	d101      	bne.n	80076b8 <_strtoul_l.constprop.0+0x70>
 80076b4:	45a1      	cmp	r9, r4
 80076b6:	db18      	blt.n	80076ea <_strtoul_l.constprop.0+0xa2>
 80076b8:	fb00 4003 	mla	r0, r0, r3, r4
 80076bc:	2701      	movs	r7, #1
 80076be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076c2:	e7ea      	b.n	800769a <_strtoul_l.constprop.0+0x52>
 80076c4:	2c2b      	cmp	r4, #43	; 0x2b
 80076c6:	bf04      	itt	eq
 80076c8:	782c      	ldrbeq	r4, [r5, #0]
 80076ca:	1c85      	addeq	r5, r0, #2
 80076cc:	e7cd      	b.n	800766a <_strtoul_l.constprop.0+0x22>
 80076ce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80076d2:	f1bc 0f19 	cmp.w	ip, #25
 80076d6:	d801      	bhi.n	80076dc <_strtoul_l.constprop.0+0x94>
 80076d8:	3c37      	subs	r4, #55	; 0x37
 80076da:	e7e4      	b.n	80076a6 <_strtoul_l.constprop.0+0x5e>
 80076dc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80076e0:	f1bc 0f19 	cmp.w	ip, #25
 80076e4:	d804      	bhi.n	80076f0 <_strtoul_l.constprop.0+0xa8>
 80076e6:	3c57      	subs	r4, #87	; 0x57
 80076e8:	e7dd      	b.n	80076a6 <_strtoul_l.constprop.0+0x5e>
 80076ea:	f04f 37ff 	mov.w	r7, #4294967295
 80076ee:	e7e6      	b.n	80076be <_strtoul_l.constprop.0+0x76>
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	da07      	bge.n	8007704 <_strtoul_l.constprop.0+0xbc>
 80076f4:	2322      	movs	r3, #34	; 0x22
 80076f6:	f8ce 3000 	str.w	r3, [lr]
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295
 80076fe:	b932      	cbnz	r2, 800770e <_strtoul_l.constprop.0+0xc6>
 8007700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007704:	b106      	cbz	r6, 8007708 <_strtoul_l.constprop.0+0xc0>
 8007706:	4240      	negs	r0, r0
 8007708:	2a00      	cmp	r2, #0
 800770a:	d0f9      	beq.n	8007700 <_strtoul_l.constprop.0+0xb8>
 800770c:	b107      	cbz	r7, 8007710 <_strtoul_l.constprop.0+0xc8>
 800770e:	1e69      	subs	r1, r5, #1
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	e7f5      	b.n	8007700 <_strtoul_l.constprop.0+0xb8>
 8007714:	2430      	movs	r4, #48	; 0x30
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1b5      	bne.n	8007686 <_strtoul_l.constprop.0+0x3e>
 800771a:	2308      	movs	r3, #8
 800771c:	e7b3      	b.n	8007686 <_strtoul_l.constprop.0+0x3e>
 800771e:	2c30      	cmp	r4, #48	; 0x30
 8007720:	d0a9      	beq.n	8007676 <_strtoul_l.constprop.0+0x2e>
 8007722:	230a      	movs	r3, #10
 8007724:	e7af      	b.n	8007686 <_strtoul_l.constprop.0+0x3e>
 8007726:	bf00      	nop
 8007728:	08007b33 	.word	0x08007b33

0800772c <_strtoul_r>:
 800772c:	f7ff bf8c 	b.w	8007648 <_strtoul_l.constprop.0>

08007730 <__submore>:
 8007730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800773c:	4299      	cmp	r1, r3
 800773e:	d11d      	bne.n	800777c <__submore+0x4c>
 8007740:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007744:	f000 f8c4 	bl	80078d0 <_malloc_r>
 8007748:	b918      	cbnz	r0, 8007752 <__submore+0x22>
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007756:	63a3      	str	r3, [r4, #56]	; 0x38
 8007758:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800775c:	6360      	str	r0, [r4, #52]	; 0x34
 800775e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007762:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007766:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800776a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800776e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007772:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007776:	6020      	str	r0, [r4, #0]
 8007778:	2000      	movs	r0, #0
 800777a:	e7e8      	b.n	800774e <__submore+0x1e>
 800777c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800777e:	0077      	lsls	r7, r6, #1
 8007780:	463a      	mov	r2, r7
 8007782:	f000 f919 	bl	80079b8 <_realloc_r>
 8007786:	4605      	mov	r5, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	d0de      	beq.n	800774a <__submore+0x1a>
 800778c:	eb00 0806 	add.w	r8, r0, r6
 8007790:	4601      	mov	r1, r0
 8007792:	4632      	mov	r2, r6
 8007794:	4640      	mov	r0, r8
 8007796:	f000 f807 	bl	80077a8 <memcpy>
 800779a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800779e:	f8c4 8000 	str.w	r8, [r4]
 80077a2:	e7e9      	b.n	8007778 <__submore+0x48>

080077a4 <__retarget_lock_acquire_recursive>:
 80077a4:	4770      	bx	lr

080077a6 <__retarget_lock_release_recursive>:
 80077a6:	4770      	bx	lr

080077a8 <memcpy>:
 80077a8:	440a      	add	r2, r1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b0:	d100      	bne.n	80077b4 <memcpy+0xc>
 80077b2:	4770      	bx	lr
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077be:	4291      	cmp	r1, r2
 80077c0:	d1f9      	bne.n	80077b6 <memcpy+0xe>
 80077c2:	bd10      	pop	{r4, pc}

080077c4 <memmove>:
 80077c4:	4288      	cmp	r0, r1
 80077c6:	b510      	push	{r4, lr}
 80077c8:	eb01 0402 	add.w	r4, r1, r2
 80077cc:	d902      	bls.n	80077d4 <memmove+0x10>
 80077ce:	4284      	cmp	r4, r0
 80077d0:	4623      	mov	r3, r4
 80077d2:	d807      	bhi.n	80077e4 <memmove+0x20>
 80077d4:	1e43      	subs	r3, r0, #1
 80077d6:	42a1      	cmp	r1, r4
 80077d8:	d008      	beq.n	80077ec <memmove+0x28>
 80077da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077e2:	e7f8      	b.n	80077d6 <memmove+0x12>
 80077e4:	4402      	add	r2, r0
 80077e6:	4601      	mov	r1, r0
 80077e8:	428a      	cmp	r2, r1
 80077ea:	d100      	bne.n	80077ee <memmove+0x2a>
 80077ec:	bd10      	pop	{r4, pc}
 80077ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077f6:	e7f7      	b.n	80077e8 <memmove+0x24>

080077f8 <_free_r>:
 80077f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077fa:	2900      	cmp	r1, #0
 80077fc:	d044      	beq.n	8007888 <_free_r+0x90>
 80077fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007802:	9001      	str	r0, [sp, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	f1a1 0404 	sub.w	r4, r1, #4
 800780a:	bfb8      	it	lt
 800780c:	18e4      	addlt	r4, r4, r3
 800780e:	f000 f913 	bl	8007a38 <__malloc_lock>
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <_free_r+0x94>)
 8007814:	9801      	ldr	r0, [sp, #4]
 8007816:	6813      	ldr	r3, [r2, #0]
 8007818:	b933      	cbnz	r3, 8007828 <_free_r+0x30>
 800781a:	6063      	str	r3, [r4, #4]
 800781c:	6014      	str	r4, [r2, #0]
 800781e:	b003      	add	sp, #12
 8007820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007824:	f000 b90e 	b.w	8007a44 <__malloc_unlock>
 8007828:	42a3      	cmp	r3, r4
 800782a:	d908      	bls.n	800783e <_free_r+0x46>
 800782c:	6825      	ldr	r5, [r4, #0]
 800782e:	1961      	adds	r1, r4, r5
 8007830:	428b      	cmp	r3, r1
 8007832:	bf01      	itttt	eq
 8007834:	6819      	ldreq	r1, [r3, #0]
 8007836:	685b      	ldreq	r3, [r3, #4]
 8007838:	1949      	addeq	r1, r1, r5
 800783a:	6021      	streq	r1, [r4, #0]
 800783c:	e7ed      	b.n	800781a <_free_r+0x22>
 800783e:	461a      	mov	r2, r3
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	b10b      	cbz	r3, 8007848 <_free_r+0x50>
 8007844:	42a3      	cmp	r3, r4
 8007846:	d9fa      	bls.n	800783e <_free_r+0x46>
 8007848:	6811      	ldr	r1, [r2, #0]
 800784a:	1855      	adds	r5, r2, r1
 800784c:	42a5      	cmp	r5, r4
 800784e:	d10b      	bne.n	8007868 <_free_r+0x70>
 8007850:	6824      	ldr	r4, [r4, #0]
 8007852:	4421      	add	r1, r4
 8007854:	1854      	adds	r4, r2, r1
 8007856:	42a3      	cmp	r3, r4
 8007858:	6011      	str	r1, [r2, #0]
 800785a:	d1e0      	bne.n	800781e <_free_r+0x26>
 800785c:	681c      	ldr	r4, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	6053      	str	r3, [r2, #4]
 8007862:	4421      	add	r1, r4
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	e7da      	b.n	800781e <_free_r+0x26>
 8007868:	d902      	bls.n	8007870 <_free_r+0x78>
 800786a:	230c      	movs	r3, #12
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	e7d6      	b.n	800781e <_free_r+0x26>
 8007870:	6825      	ldr	r5, [r4, #0]
 8007872:	1961      	adds	r1, r4, r5
 8007874:	428b      	cmp	r3, r1
 8007876:	bf04      	itt	eq
 8007878:	6819      	ldreq	r1, [r3, #0]
 800787a:	685b      	ldreq	r3, [r3, #4]
 800787c:	6063      	str	r3, [r4, #4]
 800787e:	bf04      	itt	eq
 8007880:	1949      	addeq	r1, r1, r5
 8007882:	6021      	streq	r1, [r4, #0]
 8007884:	6054      	str	r4, [r2, #4]
 8007886:	e7ca      	b.n	800781e <_free_r+0x26>
 8007888:	b003      	add	sp, #12
 800788a:	bd30      	pop	{r4, r5, pc}
 800788c:	200009cc 	.word	0x200009cc

08007890 <sbrk_aligned>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	4e0e      	ldr	r6, [pc, #56]	; (80078cc <sbrk_aligned+0x3c>)
 8007894:	460c      	mov	r4, r1
 8007896:	6831      	ldr	r1, [r6, #0]
 8007898:	4605      	mov	r5, r0
 800789a:	b911      	cbnz	r1, 80078a2 <sbrk_aligned+0x12>
 800789c:	f000 f8bc 	bl	8007a18 <_sbrk_r>
 80078a0:	6030      	str	r0, [r6, #0]
 80078a2:	4621      	mov	r1, r4
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 f8b7 	bl	8007a18 <_sbrk_r>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d00a      	beq.n	80078c4 <sbrk_aligned+0x34>
 80078ae:	1cc4      	adds	r4, r0, #3
 80078b0:	f024 0403 	bic.w	r4, r4, #3
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d007      	beq.n	80078c8 <sbrk_aligned+0x38>
 80078b8:	1a21      	subs	r1, r4, r0
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f8ac 	bl	8007a18 <_sbrk_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d101      	bne.n	80078c8 <sbrk_aligned+0x38>
 80078c4:	f04f 34ff 	mov.w	r4, #4294967295
 80078c8:	4620      	mov	r0, r4
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	200009d0 	.word	0x200009d0

080078d0 <_malloc_r>:
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	1ccd      	adds	r5, r1, #3
 80078d6:	f025 0503 	bic.w	r5, r5, #3
 80078da:	3508      	adds	r5, #8
 80078dc:	2d0c      	cmp	r5, #12
 80078de:	bf38      	it	cc
 80078e0:	250c      	movcc	r5, #12
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	4607      	mov	r7, r0
 80078e6:	db01      	blt.n	80078ec <_malloc_r+0x1c>
 80078e8:	42a9      	cmp	r1, r5
 80078ea:	d905      	bls.n	80078f8 <_malloc_r+0x28>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	2600      	movs	r6, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f8:	4e2e      	ldr	r6, [pc, #184]	; (80079b4 <_malloc_r+0xe4>)
 80078fa:	f000 f89d 	bl	8007a38 <__malloc_lock>
 80078fe:	6833      	ldr	r3, [r6, #0]
 8007900:	461c      	mov	r4, r3
 8007902:	bb34      	cbnz	r4, 8007952 <_malloc_r+0x82>
 8007904:	4629      	mov	r1, r5
 8007906:	4638      	mov	r0, r7
 8007908:	f7ff ffc2 	bl	8007890 <sbrk_aligned>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	4604      	mov	r4, r0
 8007910:	d14d      	bne.n	80079ae <_malloc_r+0xde>
 8007912:	6834      	ldr	r4, [r6, #0]
 8007914:	4626      	mov	r6, r4
 8007916:	2e00      	cmp	r6, #0
 8007918:	d140      	bne.n	800799c <_malloc_r+0xcc>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	4631      	mov	r1, r6
 800791e:	4638      	mov	r0, r7
 8007920:	eb04 0803 	add.w	r8, r4, r3
 8007924:	f000 f878 	bl	8007a18 <_sbrk_r>
 8007928:	4580      	cmp	r8, r0
 800792a:	d13a      	bne.n	80079a2 <_malloc_r+0xd2>
 800792c:	6821      	ldr	r1, [r4, #0]
 800792e:	3503      	adds	r5, #3
 8007930:	1a6d      	subs	r5, r5, r1
 8007932:	f025 0503 	bic.w	r5, r5, #3
 8007936:	3508      	adds	r5, #8
 8007938:	2d0c      	cmp	r5, #12
 800793a:	bf38      	it	cc
 800793c:	250c      	movcc	r5, #12
 800793e:	4629      	mov	r1, r5
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff ffa5 	bl	8007890 <sbrk_aligned>
 8007946:	3001      	adds	r0, #1
 8007948:	d02b      	beq.n	80079a2 <_malloc_r+0xd2>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	442b      	add	r3, r5
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	e00e      	b.n	8007970 <_malloc_r+0xa0>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	d41e      	bmi.n	8007996 <_malloc_r+0xc6>
 8007958:	2a0b      	cmp	r2, #11
 800795a:	d916      	bls.n	800798a <_malloc_r+0xba>
 800795c:	1961      	adds	r1, r4, r5
 800795e:	42a3      	cmp	r3, r4
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	bf18      	it	ne
 8007964:	6059      	strne	r1, [r3, #4]
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	bf08      	it	eq
 800796a:	6031      	streq	r1, [r6, #0]
 800796c:	5162      	str	r2, [r4, r5]
 800796e:	604b      	str	r3, [r1, #4]
 8007970:	4638      	mov	r0, r7
 8007972:	f104 060b 	add.w	r6, r4, #11
 8007976:	f000 f865 	bl	8007a44 <__malloc_unlock>
 800797a:	f026 0607 	bic.w	r6, r6, #7
 800797e:	1d23      	adds	r3, r4, #4
 8007980:	1af2      	subs	r2, r6, r3
 8007982:	d0b6      	beq.n	80078f2 <_malloc_r+0x22>
 8007984:	1b9b      	subs	r3, r3, r6
 8007986:	50a3      	str	r3, [r4, r2]
 8007988:	e7b3      	b.n	80078f2 <_malloc_r+0x22>
 800798a:	6862      	ldr	r2, [r4, #4]
 800798c:	42a3      	cmp	r3, r4
 800798e:	bf0c      	ite	eq
 8007990:	6032      	streq	r2, [r6, #0]
 8007992:	605a      	strne	r2, [r3, #4]
 8007994:	e7ec      	b.n	8007970 <_malloc_r+0xa0>
 8007996:	4623      	mov	r3, r4
 8007998:	6864      	ldr	r4, [r4, #4]
 800799a:	e7b2      	b.n	8007902 <_malloc_r+0x32>
 800799c:	4634      	mov	r4, r6
 800799e:	6876      	ldr	r6, [r6, #4]
 80079a0:	e7b9      	b.n	8007916 <_malloc_r+0x46>
 80079a2:	230c      	movs	r3, #12
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4638      	mov	r0, r7
 80079a8:	f000 f84c 	bl	8007a44 <__malloc_unlock>
 80079ac:	e7a1      	b.n	80078f2 <_malloc_r+0x22>
 80079ae:	6025      	str	r5, [r4, #0]
 80079b0:	e7de      	b.n	8007970 <_malloc_r+0xa0>
 80079b2:	bf00      	nop
 80079b4:	200009cc 	.word	0x200009cc

080079b8 <_realloc_r>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	4680      	mov	r8, r0
 80079be:	4614      	mov	r4, r2
 80079c0:	460e      	mov	r6, r1
 80079c2:	b921      	cbnz	r1, 80079ce <_realloc_r+0x16>
 80079c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c8:	4611      	mov	r1, r2
 80079ca:	f7ff bf81 	b.w	80078d0 <_malloc_r>
 80079ce:	b92a      	cbnz	r2, 80079dc <_realloc_r+0x24>
 80079d0:	f7ff ff12 	bl	80077f8 <_free_r>
 80079d4:	4625      	mov	r5, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079dc:	f000 f838 	bl	8007a50 <_malloc_usable_size_r>
 80079e0:	4284      	cmp	r4, r0
 80079e2:	4607      	mov	r7, r0
 80079e4:	d802      	bhi.n	80079ec <_realloc_r+0x34>
 80079e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ea:	d812      	bhi.n	8007a12 <_realloc_r+0x5a>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7ff ff6e 	bl	80078d0 <_malloc_r>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0ed      	beq.n	80079d6 <_realloc_r+0x1e>
 80079fa:	42bc      	cmp	r4, r7
 80079fc:	4622      	mov	r2, r4
 80079fe:	4631      	mov	r1, r6
 8007a00:	bf28      	it	cs
 8007a02:	463a      	movcs	r2, r7
 8007a04:	f7ff fed0 	bl	80077a8 <memcpy>
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7ff fef4 	bl	80077f8 <_free_r>
 8007a10:	e7e1      	b.n	80079d6 <_realloc_r+0x1e>
 8007a12:	4635      	mov	r5, r6
 8007a14:	e7df      	b.n	80079d6 <_realloc_r+0x1e>
	...

08007a18 <_sbrk_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_sbrk_r+0x1c>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7f9 fc12 	bl	800124c <_sbrk>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_sbrk_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_sbrk_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200009c4 	.word	0x200009c4

08007a38 <__malloc_lock>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__malloc_lock+0x8>)
 8007a3a:	f7ff beb3 	b.w	80077a4 <__retarget_lock_acquire_recursive>
 8007a3e:	bf00      	nop
 8007a40:	200009c8 	.word	0x200009c8

08007a44 <__malloc_unlock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__malloc_unlock+0x8>)
 8007a46:	f7ff beae 	b.w	80077a6 <__retarget_lock_release_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	200009c8 	.word	0x200009c8

08007a50 <_malloc_usable_size_r>:
 8007a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a54:	1f18      	subs	r0, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	bfbc      	itt	lt
 8007a5a:	580b      	ldrlt	r3, [r1, r0]
 8007a5c:	18c0      	addlt	r0, r0, r3
 8007a5e:	4770      	bx	lr

08007a60 <_init>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr

08007a6c <_fini>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr
