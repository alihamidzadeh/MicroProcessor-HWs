
buzzer_sample_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a7c  08005a7c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005a7c  08005a7c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a7c  08005a7c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a80  08005a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000014c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000164  20000164  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010243  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a7  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ca8  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d5bf  00000000  00000000  00033d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010620  00000000  00000000  000512c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3aee  00000000  00000000  000618e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001153d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003720  00000000  00000000  00115428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a2c 	.word	0x08005a2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08005a2c 	.word	0x08005a2c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f816 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f96a 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f8c0 	bl	800035c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f936 	bl	800044c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001e0:	f000 f868 	bl	80002b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uart_rx_enable_it();
 80001e4:	f000 fc16 	bl	8000a14 <uart_rx_enable_it>
  PWM_Start();
 80001e8:	f000 facc 	bl	8000784 <PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 80001ec:	4801      	ldr	r0, [pc, #4]	; (80001f4 <main+0x2c>)
 80001ee:	f003 f81b 	bl	8003228 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x2a>
 80001f4:	20000034 	.word	0x20000034

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b09e      	sub	sp, #120	; 0x78
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f005 fc08 	bl	8005a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	223c      	movs	r2, #60	; 0x3c
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f005 fbfa 	bl	8005a1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000228:	2301      	movs	r3, #1
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800022c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000230:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000242:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000244:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000248:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fb6e 	bl	8001930 <HAL_RCC_OscConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800025a:	f000 f999 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025e:	230f      	movs	r3, #15
 8000260:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	2302      	movs	r3, #2
 8000264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fb96 	bl	80029ac <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000286:	f000 f983 	bl	8000590 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800028a:	f241 0301 	movw	r3, #4097	; 0x1001
 800028e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000294:	2300      	movs	r3, #0
 8000296:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fdbc 	bl	8002e18 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002a6:	f000 f973 	bl	8000590 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3778      	adds	r7, #120	; 0x78
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d2:	4b20      	ldr	r3, [pc, #128]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <MX_TIM1_Init+0xa4>)
 80002d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002da:	222f      	movs	r2, #47	; 0x2f
 80002dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002de:	4b1d      	ldr	r3, [pc, #116]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <MX_TIM1_Init+0xa0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fe:	4815      	ldr	r0, [pc, #84]	; (8000354 <MX_TIM1_Init+0xa0>)
 8000300:	f002 ff3a 	bl	8003178 <HAL_TIM_Base_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800030a:	f000 f941 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000312:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <MX_TIM1_Init+0xa0>)
 800031c:	f003 fb7c 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000326:	f000 f933 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	4806      	ldr	r0, [pc, #24]	; (8000354 <MX_TIM1_Init+0xa0>)
 800033c:	f004 f884 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000346:	f000 f923 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000034 	.word	0x20000034
 8000358:	40012c00 	.word	0x40012c00

0800035c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b08e      	sub	sp, #56	; 0x38
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000370:	f107 031c 	add.w	r3, r7, #28
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037c:	463b      	mov	r3, r7
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <MX_TIM2_Init+0xe8>)
 8000390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8000396:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <MX_TIM2_Init+0xe8>)
 8000398:	2217      	movs	r2, #23
 800039a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800039c:	4b29      	ldr	r3, [pc, #164]	; (8000444 <MX_TIM2_Init+0xe8>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003a4:	4a28      	ldr	r2, [pc, #160]	; (8000448 <MX_TIM2_Init+0xec>)
 80003a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a8:	4b26      	ldr	r3, [pc, #152]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ae:	4b25      	ldr	r3, [pc, #148]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003b4:	4823      	ldr	r0, [pc, #140]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003b6:	f002 fedf 	bl	8003178 <HAL_TIM_Base_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003c0:	f000 f8e6 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	4619      	mov	r1, r3
 80003d0:	481c      	ldr	r0, [pc, #112]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003d2:	f003 fb21 	bl	8003a18 <HAL_TIM_ConfigClockSource>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003dc:	f000 f8d8 	bl	8000590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003e0:	4818      	ldr	r0, [pc, #96]	; (8000444 <MX_TIM2_Init+0xe8>)
 80003e2:	f002 ff83 	bl	80032ec <HAL_TIM_PWM_Init>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003ec:	f000 f8d0 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f8:	f107 031c 	add.w	r3, r7, #28
 80003fc:	4619      	mov	r1, r3
 80003fe:	4811      	ldr	r0, [pc, #68]	; (8000444 <MX_TIM2_Init+0xe8>)
 8000400:	f004 f822 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800040a:	f000 f8c1 	bl	8000590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800040e:	2360      	movs	r3, #96	; 0x60
 8000410:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041e:	463b      	mov	r3, r7
 8000420:	2204      	movs	r2, #4
 8000422:	4619      	mov	r1, r3
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <MX_TIM2_Init+0xe8>)
 8000426:	f003 f9e3 	bl	80037f0 <HAL_TIM_PWM_ConfigChannel>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000430:	f000 f8ae 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <MX_TIM2_Init+0xe8>)
 8000436:	f000 f925 	bl	8000684 <HAL_TIM_MspPostInit>

}
 800043a:	bf00      	nop
 800043c:	3738      	adds	r7, #56	; 0x38
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000080 	.word	0x20000080
 8000448:	000f423f 	.word	0x000f423f

0800044c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000450:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000452:	4a15      	ldr	r2, [pc, #84]	; (80004a8 <MX_USART1_UART_Init+0x5c>)
 8000454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000458:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800045c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 800048a:	2200      	movs	r2, #0
 800048c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART1_UART_Init+0x58>)
 8000490:	f004 f878 	bl	8004584 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800049a:	f000 f879 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000cc 	.word	0x200000cc
 80004a8:	40013800 	.word	0x40013800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a30      	ldr	r2, [pc, #192]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a2a      	ldr	r2, [pc, #168]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a24      	ldr	r2, [pc, #144]	; (8000588 <MX_GPIO_Init+0xdc>)
 80004f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004fc:	6153      	str	r3, [r2, #20]
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_GPIO_Init+0xdc>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000514:	6153      	str	r3, [r2, #20]
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_GPIO_Init+0xdc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <MX_GPIO_Init+0xe0>)
 8000542:	f001 f9c3 	bl	80018cc <HAL_GPIO_WritePin>
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4619      	mov	r1, r3
 800055a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055e:	f001 f83b 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD7_Pin
                           LD9_Pin LD10_Pin LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 8000562:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000566:	617b      	str	r3, [r7, #20]
                          |LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_GPIO_Init+0xe0>)
 800057c:	f001 f82c 	bl	80015d8 <HAL_GPIO_Init>

}
 8000580:	bf00      	nop
 8000582:	3728      	adds	r7, #40	; 0x28
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40021000 	.word	0x40021000
 800058c:	48001000 	.word	0x48001000

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>
	...

0800059c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <HAL_MspInit+0x44>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_MspInit+0x44>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_MspInit+0x44>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <HAL_MspInit+0x44>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <HAL_MspInit+0x44>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_MspInit+0x44>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005d2:	2007      	movs	r0, #7
 80005d4:	f000 ff48 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000

080005e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <HAL_TIM_Base_MspInit+0x98>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d12c      	bne.n	8000650 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 80005fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2018      	movs	r0, #24
 8000614:	f000 ff33 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000618:	2018      	movs	r0, #24
 800061a:	f000 ff4c 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2019      	movs	r0, #25
 8000624:	f000 ff2b 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000628:	2019      	movs	r0, #25
 800062a:	f000 ff44 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	201a      	movs	r0, #26
 8000634:	f000 ff23 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000638:	201a      	movs	r0, #26
 800063a:	f000 ff3c 	bl	80014b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	201b      	movs	r0, #27
 8000644:	f000 ff1b 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000648:	201b      	movs	r0, #27
 800064a:	f000 ff34 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800064e:	e010      	b.n	8000672 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000658:	d10b      	bne.n	8000672 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_TIM_Base_MspInit+0x9c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40012c00 	.word	0x40012c00
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006a4:	d11c      	bne.n	80006e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <HAL_TIM_MspPostInit+0x64>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <HAL_TIM_MspPostInit+0x64>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <HAL_TIM_MspPostInit+0x64>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006be:	2302      	movs	r3, #2
 80006c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4619      	mov	r1, r3
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f000 ff7c 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <HAL_UART_MspInit+0x8c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12f      	bne.n	800076e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0x90>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a1a      	ldr	r2, [pc, #104]	; (800077c <HAL_UART_MspInit+0x90>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0x90>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0x90>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a14      	ldr	r2, [pc, #80]	; (800077c <HAL_UART_MspInit+0x90>)
 800072c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_UART_MspInit+0x90>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800073e:	2330      	movs	r3, #48	; 0x30
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800074e:	2307      	movs	r3, #7
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <HAL_UART_MspInit+0x94>)
 800075a:	f000 ff3d 	bl	80015d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	2025      	movs	r0, #37	; 0x25
 8000764:	f000 fe8b 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000768:	2025      	movs	r0, #37	; 0x25
 800076a:	f000 fea4 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	; 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40013800 	.word	0x40013800
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <PWM_Start+0x18>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <PWM_Start+0x1c>)
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	4611      	mov	r1, r2
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fe0c 	bl	80033b0 <HAL_TIM_PWM_Start>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004

080007a4 <PWM_Change_Tone>:

uint32_t time1 = 0;

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	80fb      	strh	r3, [r7, #6]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]

	time1 = HAL_GetTick();
 80007b4:	f000 fd7c 	bl	80012b0 <HAL_GetTick>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a58      	ldr	r2, [pc, #352]	; (800091c <PWM_Change_Tone+0x178>)
 80007bc:	6013      	str	r3, [r2, #0]

    if (pwm_freq == 0 || pwm_freq > 20000)
 80007be:	88fb      	ldrh	r3, [r7, #6]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d004      	beq.n	80007ce <PWM_Change_Tone+0x2a>
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d937      	bls.n	800083e <PWM_Change_Tone+0x9a>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80007ce:	4b54      	ldr	r3, [pc, #336]	; (8000920 <PWM_Change_Tone+0x17c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d105      	bne.n	80007e2 <PWM_Change_Tone+0x3e>
 80007d6:	4b53      	ldr	r3, [pc, #332]	; (8000924 <PWM_Change_Tone+0x180>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2200      	movs	r2, #0
 80007de:	635a      	str	r2, [r3, #52]	; 0x34
 80007e0:	e097      	b.n	8000912 <PWM_Change_Tone+0x16e>
 80007e2:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <PWM_Change_Tone+0x17c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d105      	bne.n	80007f6 <PWM_Change_Tone+0x52>
 80007ea:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <PWM_Change_Tone+0x180>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2300      	movs	r3, #0
 80007f2:	6393      	str	r3, [r2, #56]	; 0x38
 80007f4:	e08d      	b.n	8000912 <PWM_Change_Tone+0x16e>
 80007f6:	4b4a      	ldr	r3, [pc, #296]	; (8000920 <PWM_Change_Tone+0x17c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b08      	cmp	r3, #8
 80007fc:	d105      	bne.n	800080a <PWM_Change_Tone+0x66>
 80007fe:	4b49      	ldr	r3, [pc, #292]	; (8000924 <PWM_Change_Tone+0x180>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	2300      	movs	r3, #0
 8000806:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000808:	e083      	b.n	8000912 <PWM_Change_Tone+0x16e>
 800080a:	4b45      	ldr	r3, [pc, #276]	; (8000920 <PWM_Change_Tone+0x17c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b0c      	cmp	r3, #12
 8000810:	d105      	bne.n	800081e <PWM_Change_Tone+0x7a>
 8000812:	4b44      	ldr	r3, [pc, #272]	; (8000924 <PWM_Change_Tone+0x180>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	2300      	movs	r3, #0
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	e079      	b.n	8000912 <PWM_Change_Tone+0x16e>
 800081e:	4b40      	ldr	r3, [pc, #256]	; (8000920 <PWM_Change_Tone+0x17c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b10      	cmp	r3, #16
 8000824:	d105      	bne.n	8000832 <PWM_Change_Tone+0x8e>
 8000826:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <PWM_Change_Tone+0x180>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	2300      	movs	r3, #0
 800082e:	6593      	str	r3, [r2, #88]	; 0x58
 8000830:	e06f      	b.n	8000912 <PWM_Change_Tone+0x16e>
 8000832:	4b3c      	ldr	r3, [pc, #240]	; (8000924 <PWM_Change_Tone+0x180>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800083c:	e069      	b.n	8000912 <PWM_Change_Tone+0x16e>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800083e:	f002 fa31 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8000842:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	fbb2 f3f3 	udiv	r3, r2, r3
 800084c:	4a36      	ldr	r2, [pc, #216]	; (8000928 <PWM_Change_Tone+0x184>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	0b9b      	lsrs	r3, r3, #14
 8000854:	b29b      	uxth	r3, r3
 8000856:	3301      	adds	r3, #1
 8000858:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 800085a:	8b7b      	ldrh	r3, [r7, #26]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	fbb2 f3f3 	udiv	r3, r2, r3
 800086c:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <PWM_Change_Tone+0x188>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	09db      	lsrs	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8000880:	8b7b      	ldrh	r3, [r7, #26]
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <PWM_Change_Tone+0x180>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <PWM_Change_Tone+0x180>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	3a01      	subs	r2, #1
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <PWM_Change_Tone+0x180>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2201      	movs	r2, #1
 80008a0:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <PWM_Change_Tone+0x17c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d105      	bne.n	80008b6 <PWM_Change_Tone+0x112>
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <PWM_Change_Tone+0x180>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 80008b4:	e02d      	b.n	8000912 <PWM_Change_Tone+0x16e>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <PWM_Change_Tone+0x17c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d105      	bne.n	80008ca <PWM_Change_Tone+0x126>
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <PWM_Change_Tone+0x180>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80008c8:	e023      	b.n	8000912 <PWM_Change_Tone+0x16e>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <PWM_Change_Tone+0x17c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b08      	cmp	r3, #8
 80008d0:	d105      	bne.n	80008de <PWM_Change_Tone+0x13a>
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <PWM_Change_Tone+0x180>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80008dc:	e019      	b.n	8000912 <PWM_Change_Tone+0x16e>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <PWM_Change_Tone+0x17c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b0c      	cmp	r3, #12
 80008e4:	d105      	bne.n	80008f2 <PWM_Change_Tone+0x14e>
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <PWM_Change_Tone+0x180>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f0:	e00f      	b.n	8000912 <PWM_Change_Tone+0x16e>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <PWM_Change_Tone+0x17c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b10      	cmp	r3, #16
 80008f8:	d105      	bne.n	8000906 <PWM_Change_Tone+0x162>
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <PWM_Change_Tone+0x180>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000904:	e005      	b.n	8000912 <PWM_Change_Tone+0x16e>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <PWM_Change_Tone+0x180>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000910:	e7ff      	b.n	8000912 <PWM_Change_Tone+0x16e>
 8000912:	bf00      	nop
 8000914:	3720      	adds	r7, #32
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000154 	.word	0x20000154
 8000920:	20000004 	.word	0x20000004
 8000924:	20000000 	.word	0x20000000
 8000928:	45e7b273 	.word	0x45e7b273
 800092c:	10624dd3 	.word	0x10624dd3

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 fc84 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if (HAL_GetTick() - time1 > 500){
 8000980:	f000 fc96 	bl	80012b0 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <SysTick_Handler+0x30>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000990:	d908      	bls.n	80009a4 <SysTick_Handler+0x2c>
	  PWM_Change_Tone(0, 0);
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff05 	bl	80007a4 <PWM_Change_Tone>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 800099a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <SysTick_Handler+0x34>)
 80009a0:	f000 ffac 	bl	80018fc <HAL_GPIO_TogglePin>

  }
//  Update_Melody(); //TODO
  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000154 	.word	0x20000154
 80009ac:	48001000 	.word	0x48001000

080009b0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80009b6:	f002 fdfb 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000034 	.word	0x20000034

080009c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ca:	f002 fdf1 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000034 	.word	0x20000034

080009d8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009dc:	4802      	ldr	r0, [pc, #8]	; (80009e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80009de:	f002 fde7 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000034 	.word	0x20000034

080009ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <TIM1_CC_IRQHandler+0x10>)
 80009f2:	f002 fddd 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000034 	.word	0x20000034

08000a00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <USART1_IRQHandler+0x10>)
 8000a06:	f003 fe4f 	bl	80046a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000cc 	.word	0x200000cc

08000a14 <uart_rx_enable_it>:

/* USER CODE BEGIN 1 */

uint8_t input1;

void uart_rx_enable_it(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &input1, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4903      	ldr	r1, [pc, #12]	; (8000a28 <uart_rx_enable_it+0x14>)
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <uart_rx_enable_it+0x18>)
 8000a1e:	f003 fdff 	bl	8004620 <HAL_UART_Receive_IT>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000158 	.word	0x20000158
 8000a2c:	200000cc 	.word	0x200000cc

08000a30 <HAL_UART_RxCpltCallback>:

uint8_t octav = '1';
uint8_t note = 'A';
uint8_t merge[3];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	if (huart1->Instance == USART1) {
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <HAL_UART_RxCpltCallback+0x5c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d120      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0x54>
		if (input1 >= '0' && input1 <= '8'){
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b2f      	cmp	r3, #47	; 0x2f
 8000a48:	d908      	bls.n	8000a5c <HAL_UART_RxCpltCallback+0x2c>
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b38      	cmp	r3, #56	; 0x38
 8000a50:	d804      	bhi.n	8000a5c <HAL_UART_RxCpltCallback+0x2c>
			merge[1]=input1;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_UART_RxCpltCallback+0x64>)
 8000a58:	705a      	strb	r2, [r3, #1]
 8000a5a:	e011      	b.n	8000a80 <HAL_UART_RxCpltCallback+0x50>
		}else if (input1 >= 'A' && input1 <= 'G'){
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b40      	cmp	r3, #64	; 0x40
 8000a62:	d90d      	bls.n	8000a80 <HAL_UART_RxCpltCallback+0x50>
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b47      	cmp	r3, #71	; 0x47
 8000a6a:	d809      	bhi.n	8000a80 <HAL_UART_RxCpltCallback+0x50>
			merge[0]=input1;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_UART_RxCpltCallback+0x60>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_UART_RxCpltCallback+0x64>)
 8000a72:	701a      	strb	r2, [r3, #0]
			merge[2]='\0';
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_UART_RxCpltCallback+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	709a      	strb	r2, [r3, #2]
			strcomp(merge);
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <HAL_UART_RxCpltCallback+0x64>)
 8000a7c:	f000 f816 	bl	8000aac <strcomp>
//		merge[2]='\0';

//		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);

//		strcomp(merge);
		uart_rx_enable_it();
 8000a80:	f7ff ffc8 	bl	8000a14 <uart_rx_enable_it>
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	20000158 	.word	0x20000158
 8000a94:	2000015c 	.word	0x2000015c

08000a98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1){
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
//    		PWM_Change_Tone(0, 0);
//    		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
//    		time1 = HAL_GetTick();
//    	}
    }
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <strcomp>:

uint32_t volume_level = 20;
void strcomp(uint8_t *merge){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if (merge[0]=='A' && merge[1]=='1')
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b41      	cmp	r3, #65	; 0x41
 8000aba:	d10c      	bne.n	8000ad6 <strcomp+0x2a>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b31      	cmp	r3, #49	; 0x31
 8000ac4:	d107      	bne.n	8000ad6 <strcomp+0x2a>
			PWM_Change_Tone(A1, volume_level);
 8000ac6:	4b90      	ldr	r3, [pc, #576]	; (8000d08 <strcomp+0x25c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	2037      	movs	r0, #55	; 0x37
 8000ad0:	f7ff fe68 	bl	80007a4 <PWM_Change_Tone>
 8000ad4:	e350      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='2')
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b41      	cmp	r3, #65	; 0x41
 8000adc:	d10c      	bne.n	8000af8 <strcomp+0x4c>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b32      	cmp	r3, #50	; 0x32
 8000ae6:	d107      	bne.n	8000af8 <strcomp+0x4c>
			PWM_Change_Tone(A2, volume_level);
 8000ae8:	4b87      	ldr	r3, [pc, #540]	; (8000d08 <strcomp+0x25c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	206e      	movs	r0, #110	; 0x6e
 8000af2:	f7ff fe57 	bl	80007a4 <PWM_Change_Tone>
 8000af6:	e33f      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='3')
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b41      	cmp	r3, #65	; 0x41
 8000afe:	d10c      	bne.n	8000b1a <strcomp+0x6e>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3301      	adds	r3, #1
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b33      	cmp	r3, #51	; 0x33
 8000b08:	d107      	bne.n	8000b1a <strcomp+0x6e>
			PWM_Change_Tone(A3, volume_level);
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	; (8000d08 <strcomp+0x25c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	20dc      	movs	r0, #220	; 0xdc
 8000b14:	f7ff fe46 	bl	80007a4 <PWM_Change_Tone>
 8000b18:	e32e      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='4')
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b41      	cmp	r3, #65	; 0x41
 8000b20:	d10d      	bne.n	8000b3e <strcomp+0x92>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3301      	adds	r3, #1
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b34      	cmp	r3, #52	; 0x34
 8000b2a:	d108      	bne.n	8000b3e <strcomp+0x92>
			PWM_Change_Tone(A4, volume_level);
 8000b2c:	4b76      	ldr	r3, [pc, #472]	; (8000d08 <strcomp+0x25c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8000b38:	f7ff fe34 	bl	80007a4 <PWM_Change_Tone>
 8000b3c:	e31c      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='5')
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b41      	cmp	r3, #65	; 0x41
 8000b44:	d10d      	bne.n	8000b62 <strcomp+0xb6>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b35      	cmp	r3, #53	; 0x35
 8000b4e:	d108      	bne.n	8000b62 <strcomp+0xb6>
			PWM_Change_Tone(A5, volume_level);
 8000b50:	4b6d      	ldr	r3, [pc, #436]	; (8000d08 <strcomp+0x25c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	f44f 705c 	mov.w	r0, #880	; 0x370
 8000b5c:	f7ff fe22 	bl	80007a4 <PWM_Change_Tone>
 8000b60:	e30a      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='6')
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b41      	cmp	r3, #65	; 0x41
 8000b68:	d10d      	bne.n	8000b86 <strcomp+0xda>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b36      	cmp	r3, #54	; 0x36
 8000b72:	d108      	bne.n	8000b86 <strcomp+0xda>
			PWM_Change_Tone(A6, volume_level);
 8000b74:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <strcomp+0x25c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8000b80:	f7ff fe10 	bl	80007a4 <PWM_Change_Tone>
 8000b84:	e2f8      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='A' && merge[1]=='7')
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b41      	cmp	r3, #65	; 0x41
 8000b8c:	d10d      	bne.n	8000baa <strcomp+0xfe>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3301      	adds	r3, #1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b37      	cmp	r3, #55	; 0x37
 8000b96:	d108      	bne.n	8000baa <strcomp+0xfe>
			PWM_Change_Tone(A7, volume_level);
 8000b98:	4b5b      	ldr	r3, [pc, #364]	; (8000d08 <strcomp+0x25c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
 8000ba4:	f7ff fdfe 	bl	80007a4 <PWM_Change_Tone>
 8000ba8:	e2e6      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='1')
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b42      	cmp	r3, #66	; 0x42
 8000bb0:	d10c      	bne.n	8000bcc <strcomp+0x120>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b31      	cmp	r3, #49	; 0x31
 8000bba:	d107      	bne.n	8000bcc <strcomp+0x120>
			PWM_Change_Tone(B1, volume_level);
 8000bbc:	4b52      	ldr	r3, [pc, #328]	; (8000d08 <strcomp+0x25c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	203e      	movs	r0, #62	; 0x3e
 8000bc6:	f7ff fded 	bl	80007a4 <PWM_Change_Tone>
 8000bca:	e2d5      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='2')
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b42      	cmp	r3, #66	; 0x42
 8000bd2:	d10c      	bne.n	8000bee <strcomp+0x142>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b32      	cmp	r3, #50	; 0x32
 8000bdc:	d107      	bne.n	8000bee <strcomp+0x142>
			PWM_Change_Tone(B2, volume_level);
 8000bde:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <strcomp+0x25c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	4619      	mov	r1, r3
 8000be6:	207b      	movs	r0, #123	; 0x7b
 8000be8:	f7ff fddc 	bl	80007a4 <PWM_Change_Tone>
 8000bec:	e2c4      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='3')
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b42      	cmp	r3, #66	; 0x42
 8000bf4:	d10c      	bne.n	8000c10 <strcomp+0x164>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b33      	cmp	r3, #51	; 0x33
 8000bfe:	d107      	bne.n	8000c10 <strcomp+0x164>
			PWM_Change_Tone(B3, volume_level);
 8000c00:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <strcomp+0x25c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	20f7      	movs	r0, #247	; 0xf7
 8000c0a:	f7ff fdcb 	bl	80007a4 <PWM_Change_Tone>
 8000c0e:	e2b3      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='4')
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b42      	cmp	r3, #66	; 0x42
 8000c16:	d10d      	bne.n	8000c34 <strcomp+0x188>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b34      	cmp	r3, #52	; 0x34
 8000c20:	d108      	bne.n	8000c34 <strcomp+0x188>
			PWM_Change_Tone(B4, volume_level);
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <strcomp+0x25c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8000c2e:	f7ff fdb9 	bl	80007a4 <PWM_Change_Tone>
 8000c32:	e2a1      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='5')
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b42      	cmp	r3, #66	; 0x42
 8000c3a:	d10d      	bne.n	8000c58 <strcomp+0x1ac>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b35      	cmp	r3, #53	; 0x35
 8000c44:	d108      	bne.n	8000c58 <strcomp+0x1ac>
			PWM_Change_Tone(B5, volume_level);
 8000c46:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <strcomp+0x25c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 8000c52:	f7ff fda7 	bl	80007a4 <PWM_Change_Tone>
 8000c56:	e28f      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='6')
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b42      	cmp	r3, #66	; 0x42
 8000c5e:	d10d      	bne.n	8000c7c <strcomp+0x1d0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b36      	cmp	r3, #54	; 0x36
 8000c68:	d108      	bne.n	8000c7c <strcomp+0x1d0>
			PWM_Change_Tone(B6, volume_level);
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <strcomp+0x25c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
 8000c76:	f7ff fd95 	bl	80007a4 <PWM_Change_Tone>
 8000c7a:	e27d      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='B' && merge[1]=='7')
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b42      	cmp	r3, #66	; 0x42
 8000c82:	d10d      	bne.n	8000ca0 <strcomp+0x1f4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3301      	adds	r3, #1
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b37      	cmp	r3, #55	; 0x37
 8000c8c:	d108      	bne.n	8000ca0 <strcomp+0x1f4>
			PWM_Change_Tone(B7, volume_level);
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <strcomp+0x25c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	f640 706f 	movw	r0, #3951	; 0xf6f
 8000c9a:	f7ff fd83 	bl	80007a4 <PWM_Change_Tone>
 8000c9e:	e26b      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='1')
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b43      	cmp	r3, #67	; 0x43
 8000ca6:	d10c      	bne.n	8000cc2 <strcomp+0x216>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b31      	cmp	r3, #49	; 0x31
 8000cb0:	d107      	bne.n	8000cc2 <strcomp+0x216>
			PWM_Change_Tone(C1, volume_level);
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <strcomp+0x25c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2021      	movs	r0, #33	; 0x21
 8000cbc:	f7ff fd72 	bl	80007a4 <PWM_Change_Tone>
 8000cc0:	e25a      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='2')
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b43      	cmp	r3, #67	; 0x43
 8000cc8:	d10c      	bne.n	8000ce4 <strcomp+0x238>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b32      	cmp	r3, #50	; 0x32
 8000cd2:	d107      	bne.n	8000ce4 <strcomp+0x238>
			PWM_Change_Tone(C2, volume_level);
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <strcomp+0x25c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2041      	movs	r0, #65	; 0x41
 8000cde:	f7ff fd61 	bl	80007a4 <PWM_Change_Tone>
 8000ce2:	e249      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='3')
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b43      	cmp	r3, #67	; 0x43
 8000cea:	d10f      	bne.n	8000d0c <strcomp+0x260>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b33      	cmp	r3, #51	; 0x33
 8000cf4:	d10a      	bne.n	8000d0c <strcomp+0x260>
			PWM_Change_Tone(C3, volume_level);
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <strcomp+0x25c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2083      	movs	r0, #131	; 0x83
 8000d00:	f7ff fd50 	bl	80007a4 <PWM_Change_Tone>
 8000d04:	e238      	b.n	8001178 <strcomp+0x6cc>
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
	else if (merge[0]=='C' && merge[1]=='4')
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b43      	cmp	r3, #67	; 0x43
 8000d12:	d10d      	bne.n	8000d30 <strcomp+0x284>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3301      	adds	r3, #1
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b34      	cmp	r3, #52	; 0x34
 8000d1c:	d108      	bne.n	8000d30 <strcomp+0x284>
			PWM_Change_Tone(C4, volume_level);
 8000d1e:	4b91      	ldr	r3, [pc, #580]	; (8000f64 <strcomp+0x4b8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000d2a:	f7ff fd3b 	bl	80007a4 <PWM_Change_Tone>
 8000d2e:	e223      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='5')
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b43      	cmp	r3, #67	; 0x43
 8000d36:	d10d      	bne.n	8000d54 <strcomp+0x2a8>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b35      	cmp	r3, #53	; 0x35
 8000d40:	d108      	bne.n	8000d54 <strcomp+0x2a8>
			PWM_Change_Tone(C5, volume_level);
 8000d42:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <strcomp+0x4b8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f240 200b 	movw	r0, #523	; 0x20b
 8000d4e:	f7ff fd29 	bl	80007a4 <PWM_Change_Tone>
 8000d52:	e211      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='6')
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b43      	cmp	r3, #67	; 0x43
 8000d5a:	d10d      	bne.n	8000d78 <strcomp+0x2cc>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b36      	cmp	r3, #54	; 0x36
 8000d64:	d108      	bne.n	8000d78 <strcomp+0x2cc>
			PWM_Change_Tone(C6, volume_level);
 8000d66:	4b7f      	ldr	r3, [pc, #508]	; (8000f64 <strcomp+0x4b8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f240 4017 	movw	r0, #1047	; 0x417
 8000d72:	f7ff fd17 	bl	80007a4 <PWM_Change_Tone>
 8000d76:	e1ff      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='C' && merge[1]=='7')
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b43      	cmp	r3, #67	; 0x43
 8000d7e:	d10d      	bne.n	8000d9c <strcomp+0x2f0>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b37      	cmp	r3, #55	; 0x37
 8000d88:	d108      	bne.n	8000d9c <strcomp+0x2f0>
			PWM_Change_Tone(C7, volume_level);
 8000d8a:	4b76      	ldr	r3, [pc, #472]	; (8000f64 <strcomp+0x4b8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	f640 002d 	movw	r0, #2093	; 0x82d
 8000d96:	f7ff fd05 	bl	80007a4 <PWM_Change_Tone>
 8000d9a:	e1ed      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='1')
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b44      	cmp	r3, #68	; 0x44
 8000da2:	d10c      	bne.n	8000dbe <strcomp+0x312>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3301      	adds	r3, #1
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b31      	cmp	r3, #49	; 0x31
 8000dac:	d107      	bne.n	8000dbe <strcomp+0x312>
			PWM_Change_Tone(D1, volume_level);
 8000dae:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <strcomp+0x4b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	2025      	movs	r0, #37	; 0x25
 8000db8:	f7ff fcf4 	bl	80007a4 <PWM_Change_Tone>
 8000dbc:	e1dc      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='2')
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b44      	cmp	r3, #68	; 0x44
 8000dc4:	d10c      	bne.n	8000de0 <strcomp+0x334>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b32      	cmp	r3, #50	; 0x32
 8000dce:	d107      	bne.n	8000de0 <strcomp+0x334>
			PWM_Change_Tone(D2, volume_level);
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <strcomp+0x4b8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2049      	movs	r0, #73	; 0x49
 8000dda:	f7ff fce3 	bl	80007a4 <PWM_Change_Tone>
 8000dde:	e1cb      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='3')
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b44      	cmp	r3, #68	; 0x44
 8000de6:	d10c      	bne.n	8000e02 <strcomp+0x356>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3301      	adds	r3, #1
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b33      	cmp	r3, #51	; 0x33
 8000df0:	d107      	bne.n	8000e02 <strcomp+0x356>
			PWM_Change_Tone(D3, volume_level);
 8000df2:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <strcomp+0x4b8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2093      	movs	r0, #147	; 0x93
 8000dfc:	f7ff fcd2 	bl	80007a4 <PWM_Change_Tone>
 8000e00:	e1ba      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='4')
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b44      	cmp	r3, #68	; 0x44
 8000e08:	d10d      	bne.n	8000e26 <strcomp+0x37a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b34      	cmp	r3, #52	; 0x34
 8000e12:	d108      	bne.n	8000e26 <strcomp+0x37a>
			PWM_Change_Tone(D4, volume_level);
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <strcomp+0x4b8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f44f 7093 	mov.w	r0, #294	; 0x126
 8000e20:	f7ff fcc0 	bl	80007a4 <PWM_Change_Tone>
 8000e24:	e1a8      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='5')
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b44      	cmp	r3, #68	; 0x44
 8000e2c:	d10d      	bne.n	8000e4a <strcomp+0x39e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3301      	adds	r3, #1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b35      	cmp	r3, #53	; 0x35
 8000e36:	d108      	bne.n	8000e4a <strcomp+0x39e>
			PWM_Change_Tone(D5, volume_level);
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <strcomp+0x4b8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f240 204b 	movw	r0, #587	; 0x24b
 8000e44:	f7ff fcae 	bl	80007a4 <PWM_Change_Tone>
 8000e48:	e196      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='6')
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b44      	cmp	r3, #68	; 0x44
 8000e50:	d10d      	bne.n	8000e6e <strcomp+0x3c2>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3301      	adds	r3, #1
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b36      	cmp	r3, #54	; 0x36
 8000e5a:	d108      	bne.n	8000e6e <strcomp+0x3c2>
			PWM_Change_Tone(D6, volume_level);
 8000e5c:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <strcomp+0x4b8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	f240 4097 	movw	r0, #1175	; 0x497
 8000e68:	f7ff fc9c 	bl	80007a4 <PWM_Change_Tone>
 8000e6c:	e184      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='D' && merge[1]=='7')
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b44      	cmp	r3, #68	; 0x44
 8000e74:	d10d      	bne.n	8000e92 <strcomp+0x3e6>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b37      	cmp	r3, #55	; 0x37
 8000e7e:	d108      	bne.n	8000e92 <strcomp+0x3e6>
			PWM_Change_Tone(D7, volume_level);
 8000e80:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <strcomp+0x4b8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	f640 102d 	movw	r0, #2349	; 0x92d
 8000e8c:	f7ff fc8a 	bl	80007a4 <PWM_Change_Tone>
 8000e90:	e172      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='1')
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b45      	cmp	r3, #69	; 0x45
 8000e98:	d10c      	bne.n	8000eb4 <strcomp+0x408>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b31      	cmp	r3, #49	; 0x31
 8000ea2:	d107      	bne.n	8000eb4 <strcomp+0x408>
			PWM_Change_Tone(E1, volume_level);
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <strcomp+0x4b8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2029      	movs	r0, #41	; 0x29
 8000eae:	f7ff fc79 	bl	80007a4 <PWM_Change_Tone>
 8000eb2:	e161      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='2')
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b45      	cmp	r3, #69	; 0x45
 8000eba:	d10c      	bne.n	8000ed6 <strcomp+0x42a>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b32      	cmp	r3, #50	; 0x32
 8000ec4:	d107      	bne.n	8000ed6 <strcomp+0x42a>
			PWM_Change_Tone(E2, volume_level);
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <strcomp+0x4b8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2052      	movs	r0, #82	; 0x52
 8000ed0:	f7ff fc68 	bl	80007a4 <PWM_Change_Tone>
 8000ed4:	e150      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='3')
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b45      	cmp	r3, #69	; 0x45
 8000edc:	d10c      	bne.n	8000ef8 <strcomp+0x44c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b33      	cmp	r3, #51	; 0x33
 8000ee6:	d107      	bne.n	8000ef8 <strcomp+0x44c>
			PWM_Change_Tone(E3, volume_level);
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <strcomp+0x4b8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4619      	mov	r1, r3
 8000ef0:	20a5      	movs	r0, #165	; 0xa5
 8000ef2:	f7ff fc57 	bl	80007a4 <PWM_Change_Tone>
 8000ef6:	e13f      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='4')
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b45      	cmp	r3, #69	; 0x45
 8000efe:	d10d      	bne.n	8000f1c <strcomp+0x470>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3301      	adds	r3, #1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b34      	cmp	r3, #52	; 0x34
 8000f08:	d108      	bne.n	8000f1c <strcomp+0x470>
			PWM_Change_Tone(E4, volume_level);
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <strcomp+0x4b8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8000f16:	f7ff fc45 	bl	80007a4 <PWM_Change_Tone>
 8000f1a:	e12d      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='5')
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b45      	cmp	r3, #69	; 0x45
 8000f22:	d10d      	bne.n	8000f40 <strcomp+0x494>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b35      	cmp	r3, #53	; 0x35
 8000f2c:	d108      	bne.n	8000f40 <strcomp+0x494>
			PWM_Change_Tone(E5, volume_level);
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <strcomp+0x4b8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	f240 2093 	movw	r0, #659	; 0x293
 8000f3a:	f7ff fc33 	bl	80007a4 <PWM_Change_Tone>
 8000f3e:	e11b      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='E' && merge[1]=='6')
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b45      	cmp	r3, #69	; 0x45
 8000f46:	d10f      	bne.n	8000f68 <strcomp+0x4bc>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b36      	cmp	r3, #54	; 0x36
 8000f50:	d10a      	bne.n	8000f68 <strcomp+0x4bc>
			PWM_Change_Tone(E6, volume_level);
 8000f52:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <strcomp+0x4b8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f240 5027 	movw	r0, #1319	; 0x527
 8000f5e:	f7ff fc21 	bl	80007a4 <PWM_Change_Tone>
 8000f62:	e109      	b.n	8001178 <strcomp+0x6cc>
 8000f64:	20000008 	.word	0x20000008
	else if (merge[0]=='E' && merge[1]=='7')
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b45      	cmp	r3, #69	; 0x45
 8000f6e:	d10d      	bne.n	8000f8c <strcomp+0x4e0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3301      	adds	r3, #1
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b37      	cmp	r3, #55	; 0x37
 8000f78:	d108      	bne.n	8000f8c <strcomp+0x4e0>
			PWM_Change_Tone(E7, volume_level);
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <strcomp+0x6d4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	f640 204d 	movw	r0, #2637	; 0xa4d
 8000f86:	f7ff fc0d 	bl	80007a4 <PWM_Change_Tone>
 8000f8a:	e0f5      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='1')
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b46      	cmp	r3, #70	; 0x46
 8000f92:	d10c      	bne.n	8000fae <strcomp+0x502>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3301      	adds	r3, #1
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b31      	cmp	r3, #49	; 0x31
 8000f9c:	d107      	bne.n	8000fae <strcomp+0x502>
			PWM_Change_Tone(F1, volume_level);
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <strcomp+0x6d4>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	202c      	movs	r0, #44	; 0x2c
 8000fa8:	f7ff fbfc 	bl	80007a4 <PWM_Change_Tone>
 8000fac:	e0e4      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='2')
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b46      	cmp	r3, #70	; 0x46
 8000fb4:	d10c      	bne.n	8000fd0 <strcomp+0x524>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b32      	cmp	r3, #50	; 0x32
 8000fbe:	d107      	bne.n	8000fd0 <strcomp+0x524>
			PWM_Change_Tone(F2, volume_level);
 8000fc0:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <strcomp+0x6d4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2057      	movs	r0, #87	; 0x57
 8000fca:	f7ff fbeb 	bl	80007a4 <PWM_Change_Tone>
 8000fce:	e0d3      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='3')
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b46      	cmp	r3, #70	; 0x46
 8000fd6:	d10c      	bne.n	8000ff2 <strcomp+0x546>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b33      	cmp	r3, #51	; 0x33
 8000fe0:	d107      	bne.n	8000ff2 <strcomp+0x546>
			PWM_Change_Tone(F3, volume_level);
 8000fe2:	4b67      	ldr	r3, [pc, #412]	; (8001180 <strcomp+0x6d4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	20af      	movs	r0, #175	; 0xaf
 8000fec:	f7ff fbda 	bl	80007a4 <PWM_Change_Tone>
 8000ff0:	e0c2      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='4')
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b46      	cmp	r3, #70	; 0x46
 8000ff8:	d10d      	bne.n	8001016 <strcomp+0x56a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b34      	cmp	r3, #52	; 0x34
 8001002:	d108      	bne.n	8001016 <strcomp+0x56a>
			PWM_Change_Tone(F4, volume_level);
 8001004:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <strcomp+0x6d4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4619      	mov	r1, r3
 800100c:	f240 105d 	movw	r0, #349	; 0x15d
 8001010:	f7ff fbc8 	bl	80007a4 <PWM_Change_Tone>
 8001014:	e0b0      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='5')
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b46      	cmp	r3, #70	; 0x46
 800101c:	d10d      	bne.n	800103a <strcomp+0x58e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b35      	cmp	r3, #53	; 0x35
 8001026:	d108      	bne.n	800103a <strcomp+0x58e>
			PWM_Change_Tone(F5, volume_level);
 8001028:	4b55      	ldr	r3, [pc, #340]	; (8001180 <strcomp+0x6d4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	f240 20ba 	movw	r0, #698	; 0x2ba
 8001034:	f7ff fbb6 	bl	80007a4 <PWM_Change_Tone>
 8001038:	e09e      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='6')
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b46      	cmp	r3, #70	; 0x46
 8001040:	d10d      	bne.n	800105e <strcomp+0x5b2>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b36      	cmp	r3, #54	; 0x36
 800104a:	d108      	bne.n	800105e <strcomp+0x5b2>
			PWM_Change_Tone(F6, volume_level);
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <strcomp+0x6d4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	f240 5075 	movw	r0, #1397	; 0x575
 8001058:	f7ff fba4 	bl	80007a4 <PWM_Change_Tone>
 800105c:	e08c      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='F' && merge[1]=='7')
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b46      	cmp	r3, #70	; 0x46
 8001064:	d10d      	bne.n	8001082 <strcomp+0x5d6>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3301      	adds	r3, #1
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b37      	cmp	r3, #55	; 0x37
 800106e:	d108      	bne.n	8001082 <strcomp+0x5d6>
			PWM_Change_Tone(F7, volume_level);
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <strcomp+0x6d4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4619      	mov	r1, r3
 8001078:	f640 20ea 	movw	r0, #2794	; 0xaea
 800107c:	f7ff fb92 	bl	80007a4 <PWM_Change_Tone>
 8001080:	e07a      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='1')
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b47      	cmp	r3, #71	; 0x47
 8001088:	d10c      	bne.n	80010a4 <strcomp+0x5f8>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3301      	adds	r3, #1
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b31      	cmp	r3, #49	; 0x31
 8001092:	d107      	bne.n	80010a4 <strcomp+0x5f8>
			PWM_Change_Tone(G1, volume_level);
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <strcomp+0x6d4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	2031      	movs	r0, #49	; 0x31
 800109e:	f7ff fb81 	bl	80007a4 <PWM_Change_Tone>
 80010a2:	e069      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='2')
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b47      	cmp	r3, #71	; 0x47
 80010aa:	d10c      	bne.n	80010c6 <strcomp+0x61a>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b32      	cmp	r3, #50	; 0x32
 80010b4:	d107      	bne.n	80010c6 <strcomp+0x61a>
			PWM_Change_Tone(G2, volume_level);
 80010b6:	4b32      	ldr	r3, [pc, #200]	; (8001180 <strcomp+0x6d4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4619      	mov	r1, r3
 80010be:	2062      	movs	r0, #98	; 0x62
 80010c0:	f7ff fb70 	bl	80007a4 <PWM_Change_Tone>
 80010c4:	e058      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='3')
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b47      	cmp	r3, #71	; 0x47
 80010cc:	d10c      	bne.n	80010e8 <strcomp+0x63c>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b33      	cmp	r3, #51	; 0x33
 80010d6:	d107      	bne.n	80010e8 <strcomp+0x63c>
			PWM_Change_Tone(G3, volume_level);
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <strcomp+0x6d4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4619      	mov	r1, r3
 80010e0:	20c4      	movs	r0, #196	; 0xc4
 80010e2:	f7ff fb5f 	bl	80007a4 <PWM_Change_Tone>
 80010e6:	e047      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='4')
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b47      	cmp	r3, #71	; 0x47
 80010ee:	d10d      	bne.n	800110c <strcomp+0x660>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b34      	cmp	r3, #52	; 0x34
 80010f8:	d108      	bne.n	800110c <strcomp+0x660>
			PWM_Change_Tone(G4, volume_level);
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <strcomp+0x6d4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8001106:	f7ff fb4d 	bl	80007a4 <PWM_Change_Tone>
 800110a:	e035      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='5')
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b47      	cmp	r3, #71	; 0x47
 8001112:	d10d      	bne.n	8001130 <strcomp+0x684>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3301      	adds	r3, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b35      	cmp	r3, #53	; 0x35
 800111c:	d108      	bne.n	8001130 <strcomp+0x684>
			PWM_Change_Tone(G5, volume_level);
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <strcomp+0x6d4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 7044 	mov.w	r0, #784	; 0x310
 800112a:	f7ff fb3b 	bl	80007a4 <PWM_Change_Tone>
 800112e:	e023      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='6')
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b47      	cmp	r3, #71	; 0x47
 8001136:	d10d      	bne.n	8001154 <strcomp+0x6a8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b36      	cmp	r3, #54	; 0x36
 8001140:	d108      	bne.n	8001154 <strcomp+0x6a8>
			PWM_Change_Tone(G6, volume_level);
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <strcomp+0x6d4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 800114e:	f7ff fb29 	bl	80007a4 <PWM_Change_Tone>
 8001152:	e011      	b.n	8001178 <strcomp+0x6cc>
	else if (merge[0]=='G' && merge[1]=='7')
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b47      	cmp	r3, #71	; 0x47
 800115a:	d10d      	bne.n	8001178 <strcomp+0x6cc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b37      	cmp	r3, #55	; 0x37
 8001164:	d108      	bne.n	8001178 <strcomp+0x6cc>
			PWM_Change_Tone(G7, volume_level);
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <strcomp+0x6d4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	f44f 6044 	mov.w	r0, #3136	; 0xc40
 8001172:	f7ff fb17 	bl	80007a4 <PWM_Change_Tone>

}
 8001176:	e7ff      	b.n	8001178 <strcomp+0x6cc>
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008

08001184 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopForever+0x2>
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopForever+0x6>)
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopForever+0xa>)
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopForever+0xe>)
 80011b2:	2300      	movs	r3, #0
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:
 80011b6:	58d4      	ldr	r4, [r2, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:
 80011bc:	18c4      	adds	r4, r0, r3
 80011be:	428c      	cmp	r4, r1
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopForever+0x12>)
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopForever+0x16>)
 80011c6:	2300      	movs	r3, #0
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:
 80011ce:	42a2      	cmp	r2, r4
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>
 80011d2:	f7ff ffd7 	bl	8001184 <SystemInit>
 80011d6:	f004 fbfd 	bl	80059d4 <__libc_init_array>
 80011da:	f7fe fff5 	bl	80001c8 <main>

080011de <LoopForever>:
 80011de:	e7fe      	b.n	80011de <LoopForever>
 80011e0:	2000a000 	.word	0x2000a000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000018 	.word	0x20000018
 80011ec:	08005a84 	.word	0x08005a84
 80011f0:	20000018 	.word	0x20000018
 80011f4:	20000164 	.word	0x20000164

080011f8 <ADC1_2_IRQHandler>:
 80011f8:	e7fe      	b.n	80011f8 <ADC1_2_IRQHandler>
	...

080011fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 f92b 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff f9c0 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f943 	bl	80014d2 <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 f90b 	bl	800147e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000014 	.word	0x20000014
 8001284:	20000010 	.word	0x20000010

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_IncTick+0x20>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x24>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_IncTick+0x24>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000014 	.word	0x20000014
 80012ac:	20000160 	.word	0x20000160

080012b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetTick+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000160 	.word	0x20000160

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff3e 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff8e 	bl	80013bc <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff31 	bl	800132c <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa2 	bl	8001424 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d008      	beq.n	800150e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2204      	movs	r2, #4
 8001500:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e020      	b.n	8001550 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 020e 	bic.w	r2, r2, #14
 800151c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	2101      	movs	r1, #1
 8001538:	fa01 f202 	lsl.w	r2, r1, r2
 800153c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800156e:	2b02      	cmp	r3, #2
 8001570:	d005      	beq.n	800157e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2204      	movs	r2, #4
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e027      	b.n	80015ce <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 020e 	bic.w	r2, r2, #14
 800158c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0201 	bic.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
    } 
  }
  return status;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e154      	b.n	8001892 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8146 	beq.w	800188c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x40>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	6939      	ldr	r1, [r7, #16]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a0 	beq.w	800188c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800178e:	d019      	beq.n	80017c4 <HAL_GPIO_Init+0x1ec>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a49      	ldr	r2, [pc, #292]	; (80018b8 <HAL_GPIO_Init+0x2e0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d013      	beq.n	80017c0 <HAL_GPIO_Init+0x1e8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_GPIO_Init+0x2e4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <HAL_GPIO_Init+0x2e8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1e0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_GPIO_Init+0x2ec>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1dc>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e008      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017b4:	2305      	movs	r3, #5
 80017b6:	e006      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017bc:	2302      	movs	r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c4:	2300      	movs	r3, #0
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d6:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e4:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001808:	4a2f      	ldr	r2, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001832:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800185c:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_GPIO_Init+0x2f0>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f aea3 	bne.w	80015e8 <HAL_GPIO_Init+0x10>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	48001000 	.word	0x48001000
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43d9      	mvns	r1, r3
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	400b      	ands	r3, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001936:	af00      	add	r7, sp, #0
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001940:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	f001 b823 	b.w	800299c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 817d 	beq.w	8001c66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800196c:	4bbc      	ldr	r3, [pc, #752]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d00c      	beq.n	8001992 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001978:	4bb9      	ldr	r3, [pc, #740]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d15c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x10e>
 8001984:	4bb6      	ldr	r3, [pc, #728]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001990:	d155      	bne.n	8001a3e <HAL_RCC_OscConfig+0x10e>
 8001992:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001996:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x94>
 80019be:	4ba8      	ldr	r3, [pc, #672]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e015      	b.n	80019f0 <HAL_RCC_OscConfig+0xc0>
 80019c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019ec:	4b9c      	ldr	r3, [pc, #624]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019fc:	fa92 f2a2 	rbit	r2, r2
 8001a00:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001a04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f042 0220 	orr.w	r2, r2, #32
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f002 021f 	and.w	r2, r2, #31
 8001a18:	2101      	movs	r1, #1
 8001a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 811f 	beq.w	8001c64 <HAL_RCC_OscConfig+0x334>
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 8116 	bne.w	8001c64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	f000 bfaf 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12e>
 8001a50:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a82      	ldr	r2, [pc, #520]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e036      	b.n	8001acc <HAL_RCC_OscConfig+0x19c>
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x158>
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a78      	ldr	r2, [pc, #480]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e021      	b.n	8001acc <HAL_RCC_OscConfig+0x19c>
 8001a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x184>
 8001a9a:	4b71      	ldr	r3, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a70      	ldr	r2, [pc, #448]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6d      	ldr	r2, [pc, #436]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0x19c>
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b67      	ldr	r3, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001acc:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f023 020f 	bic.w	r2, r3, #15
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	495f      	ldr	r1, [pc, #380]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d059      	beq.n	8001baa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fbdb 	bl	80012b0 <HAL_GetTick>
 8001afa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fbd6 	bl	80012b0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d902      	bls.n	8001b16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f000 bf43 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 8001b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x218>
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e015      	b.n	8001b74 <HAL_RCC_OscConfig+0x244>
 8001b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b70:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ab      	beq.n	8001b00 <HAL_RCC_OscConfig+0x1d0>
 8001ba8:	e05d      	b.n	8001c66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fb81 	bl	80012b0 <HAL_GetTick>
 8001bae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fb7c 	bl	80012b0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d902      	bls.n	8001bca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f000 bee9 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 8001bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2cc>
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_OscConfig+0x2f8>
 8001bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c08:	fa93 f3a3 	rbit	r3, r3
 8001c0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c14:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_RCC_OscConfig+0x330>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c34:	fa92 f2a2 	rbit	r2, r2
 8001c38:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c40:	fab2 f282 	clz	r2, r2
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ab      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x284>
 8001c5c:	e003      	b.n	8001c66 <HAL_RCC_OscConfig+0x336>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 817d 	beq.w	8001f76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c7c:	4ba6      	ldr	r3, [pc, #664]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c88:	4ba3      	ldr	r3, [pc, #652]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d172      	bne.n	8001d7a <HAL_RCC_OscConfig+0x44a>
 8001c94:	4ba0      	ldr	r3, [pc, #640]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d16c      	bne.n	8001d7a <HAL_RCC_OscConfig+0x44a>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001cb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3a0>
 8001cca:	4b93      	ldr	r3, [pc, #588]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e013      	b.n	8001cf8 <HAL_RCC_OscConfig+0x3c8>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ce8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cf4:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cfe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d02:	fa92 f2a2 	rbit	r2, r2
 8001d06:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d0a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d0e:	fab2 f282 	clz	r2, r2
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f042 0220 	orr.w	r2, r2, #32
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	f002 021f 	and.w	r2, r2, #31
 8001d1e:	2101      	movs	r1, #1
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCC_OscConfig+0x410>
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f000 be2e 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b75      	ldr	r3, [pc, #468]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	21f8      	movs	r1, #248	; 0xf8
 8001d56:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d5e:	fa91 f1a1 	rbit	r1, r1
 8001d62:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d66:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d6a:	fab1 f181 	clz	r1, r1
 8001d6e:	b2c9      	uxtb	r1, r1
 8001d70:	408b      	lsls	r3, r1
 8001d72:	4969      	ldr	r1, [pc, #420]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d78:	e0fd      	b.n	8001f76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8088 	beq.w	8001e9c <HAL_RCC_OscConfig+0x56c>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d9e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	461a      	mov	r2, r3
 8001db4:	2301      	movs	r3, #1
 8001db6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fa7a 	bl	80012b0 <HAL_GetTick>
 8001dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fa75 	bl	80012b0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d902      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	f000 bde2 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001dea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4d8>
 8001e02:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x500>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	2202      	movs	r2, #2
 8001e32:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e36:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e3a:	fa92 f2a2 	rbit	r2, r2
 8001e3e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e42:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0af      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	21f8      	movs	r1, #248	; 0xf8
 8001e78:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e80:	fa91 f1a1 	rbit	r1, r1
 8001e84:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e88:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e8c:	fab1 f181 	clz	r1, r1
 8001e90:	b2c9      	uxtb	r1, r1
 8001e92:	408b      	lsls	r3, r1
 8001e94:	4920      	ldr	r1, [pc, #128]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
 8001e9a:	e06c      	b.n	8001f76 <HAL_RCC_OscConfig+0x646>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ebc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f9f2 	bl	80012b0 <HAL_GetTick>
 8001ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff f9ed 	bl	80012b0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d902      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f000 bd5a 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	095b      	lsrs	r3, r3, #5
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d104      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5ec>
 8001f12:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <HAL_RCC_OscConfig+0x5e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e015      	b.n	8001f44 <HAL_RCC_OscConfig+0x614>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f40:	4bc8      	ldr	r3, [pc, #800]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f56:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f042 0220 	orr.w	r2, r2, #32
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f002 021f 	and.w	r2, r2, #31
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ad      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8110 	beq.w	80021ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d079      	beq.n	8002090 <HAL_RCC_OscConfig+0x760>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4bab      	ldr	r3, [pc, #684]	; (8002268 <HAL_RCC_OscConfig+0x938>)
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f973 	bl	80012b0 <HAL_GetTick>
 8001fca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff f96e 	bl	80012b0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d902      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	f000 bcdb 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002000:	2202      	movs	r2, #2
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	fa93 f2a3 	rbit	r2, r3
 8002012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002024:	2202      	movs	r2, #2
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800203e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002040:	4b88      	ldr	r3, [pc, #544]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 8002042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800204c:	2102      	movs	r1, #2
 800204e:	6019      	str	r1, [r3, #0]
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f1a3 	rbit	r1, r3
 800205e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002062:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002066:	6019      	str	r1, [r3, #0]
  return result;
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0a0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x6a0>
 800208e:	e08d      	b.n	80021ac <HAL_RCC_OscConfig+0x87c>
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020b2:	601a      	str	r2, [r3, #0]
  return result;
 80020b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b68      	ldr	r3, [pc, #416]	; (8002268 <HAL_RCC_OscConfig+0x938>)
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	461a      	mov	r2, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff f8ed 	bl	80012b0 <HAL_GetTick>
 80020d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020dc:	f7ff f8e8 	bl	80012b0 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d902      	bls.n	80020f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	f000 bc55 	b.w	800299c <HAL_RCC_OscConfig+0x106c>
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800215c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002166:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800216a:	2102      	movs	r1, #2
 800216c:	6019      	str	r1, [r3, #0]
 800216e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002172:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fa93 f1a3 	rbit	r1, r3
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002184:	6019      	str	r1, [r3, #0]
  return result;
 8002186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d197      	bne.n	80020dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 81a1 	beq.w	8002504 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d116      	bne.n	8002202 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_OscConfig+0x93c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_RCC_OscConfig+0x93c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <HAL_RCC_OscConfig+0x93c>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221a:	f7ff f849 	bl	80012b0 <HAL_GetTick>
 800221e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	e009      	b.n	8002238 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7ff f844 	bl	80012b0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e3b1      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_OscConfig+0x93c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_OscConfig+0x940>
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a02      	ldr	r2, [pc, #8]	; (8002264 <HAL_RCC_OscConfig+0x934>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e03c      	b.n	80022dc <HAL_RCC_OscConfig+0x9ac>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	10908120 	.word	0x10908120
 800226c:	40007000 	.word	0x40007000
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10c      	bne.n	800229a <HAL_RCC_OscConfig+0x96a>
 8002280:	4bc1      	ldr	r3, [pc, #772]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4ac0      	ldr	r2, [pc, #768]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6213      	str	r3, [r2, #32]
 800228c:	4bbe      	ldr	r3, [pc, #760]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4abd      	ldr	r2, [pc, #756]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	e020      	b.n	80022dc <HAL_RCC_OscConfig+0x9ac>
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x994>
 80022aa:	4bb7      	ldr	r3, [pc, #732]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4ab6      	ldr	r2, [pc, #728]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
 80022b6:	4bb4      	ldr	r3, [pc, #720]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	4ab3      	ldr	r2, [pc, #716]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6213      	str	r3, [r2, #32]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x9ac>
 80022c4:	4bb0      	ldr	r3, [pc, #704]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4aaf      	ldr	r2, [pc, #700]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4bad      	ldr	r3, [pc, #692]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4aac      	ldr	r2, [pc, #688]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 8081 	beq.w	80023f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe ffdf 	bl	80012b0 <HAL_GetTick>
 80022f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe ffda 	bl	80012b0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e345      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800233c:	2202      	movs	r2, #2
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002352:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002356:	601a      	str	r2, [r3, #0]
  return result;
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002360:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0xa4c>
 8002376:	4b84      	ldr	r3, [pc, #528]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	e013      	b.n	80023a4 <HAL_RCC_OscConfig+0xa74>
 800237c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002380:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002384:	2202      	movs	r2, #2
 8002386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023ac:	2102      	movs	r1, #2
 80023ae:	6011      	str	r1, [r2, #0]
 80023b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	fa92 f1a2 	rbit	r1, r2
 80023be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023c6:	6011      	str	r1, [r2, #0]
  return result;
 80023c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	f002 021f 	and.w	r2, r2, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f202 	lsl.w	r2, r1, r2
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d084      	beq.n	80022f8 <HAL_RCC_OscConfig+0x9c8>
 80023ee:	e07f      	b.n	80024f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7fe ff5e 	bl	80012b0 <HAL_GetTick>
 80023f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe ff59 	bl	80012b0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e2c4      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	fa93 f2a3 	rbit	r2, r3
 8002450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002454:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002458:	601a      	str	r2, [r3, #0]
  return result;
 800245a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002462:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d102      	bne.n	800247e <HAL_RCC_OscConfig+0xb4e>
 8002478:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	e013      	b.n	80024a6 <HAL_RCC_OscConfig+0xb76>
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002486:	2202      	movs	r2, #2
 8002488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ae:	2102      	movs	r1, #2
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	fa92 f1a2 	rbit	r1, r2
 80024c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024c8:	6011      	str	r1, [r2, #0]
  return result;
 80024ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	f002 021f 	and.w	r2, r2, #31
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d184      	bne.n	80023fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a22      	ldr	r2, [pc, #136]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002508:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8242 	beq.w	800299a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_RCC_OscConfig+0xc58>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	f000 8213 	beq.w	800294a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 8162 	bne.w	80027fa <HAL_RCC_OscConfig+0xeca>
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800253e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800255a:	601a      	str	r2, [r3, #0]
  return result;
 800255c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002560:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002564:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002570:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	461a      	mov	r2, r3
 8002578:	2300      	movs	r3, #0
 800257a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7fe fe98 	bl	80012b0 <HAL_GetTick>
 8002580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_OscConfig+0xc70>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe90 	bl	80012b0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1fd      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025c4:	601a      	str	r2, [r3, #0]
  return result;
 80025c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	fab3 f383 	clz	r3, r3
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d102      	bne.n	80025ea <HAL_RCC_OscConfig+0xcba>
 80025e4:	4bb0      	ldr	r3, [pc, #704]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e027      	b.n	800263a <HAL_RCC_OscConfig+0xd0a>
 80025ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002618:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	4b9c      	ldr	r3, [pc, #624]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800263e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002642:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002646:	6011      	str	r1, [r2, #0]
 8002648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800264c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	fa92 f1a2 	rbit	r1, r2
 8002656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800265e:	6011      	str	r1, [r2, #0]
  return result;
 8002660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002664:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d182      	bne.n	800258c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800268e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800269a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	430b      	orrs	r3, r1
 80026a8:	497f      	ldr	r1, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026d2:	601a      	str	r2, [r3, #0]
  return result;
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	461a      	mov	r2, r3
 80026f0:	2301      	movs	r3, #1
 80026f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fddc 	bl	80012b0 <HAL_GetTick>
 80026f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe fdd7 	bl	80012b0 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e144      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800271a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002736:	601a      	str	r2, [r3, #0]
  return result;
 8002738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002740:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d102      	bne.n	800275c <HAL_RCC_OscConfig+0xe2c>
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	e027      	b.n	80027ac <HAL_RCC_OscConfig+0xe7c>
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002764:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	fa93 f2a3 	rbit	r2, r3
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002786:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800278a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027b8:	6011      	str	r1, [r2, #0]
 80027ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027be:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	fa92 f1a2 	rbit	r1, r2
 80027c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027d0:	6011      	str	r1, [r2, #0]
  return result;
 80027d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	fab2 f282 	clz	r2, r2
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	f042 0220 	orr.w	r2, r2, #32
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	f002 021f 	and.w	r2, r2, #31
 80027ec:	2101      	movs	r1, #1
 80027ee:	fa01 f202 	lsl.w	r2, r1, r2
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d082      	beq.n	80026fe <HAL_RCC_OscConfig+0xdce>
 80027f8:	e0cf      	b.n	800299a <HAL_RCC_OscConfig+0x106a>
 80027fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fa93 f2a3 	rbit	r2, r3
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800281e:	601a      	str	r2, [r3, #0]
  return result;
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002828:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	461a      	mov	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fd36 	bl	80012b0 <HAL_GetTick>
 8002844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e009      	b.n	800285e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe fd31 	bl	80012b0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e09e      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002882:	601a      	str	r2, [r3, #0]
  return result;
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800288c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d104      	bne.n	80028ac <HAL_RCC_OscConfig+0xf7c>
 80028a2:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <HAL_RCC_OscConfig+0xf78>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	e029      	b.n	80028fc <HAL_RCC_OscConfig+0xfcc>
 80028a8:	40021000 	.word	0x40021000
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_RCC_OscConfig+0x1078>)
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002900:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002908:	6011      	str	r1, [r2, #0]
 800290a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fa92 f1a2 	rbit	r1, r2
 8002918:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002920:	6011      	str	r1, [r2, #0]
  return result;
 8002922:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002926:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f042 0220 	orr.w	r2, r2, #32
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	f002 021f 	and.w	r2, r2, #31
 800293c:	2101      	movs	r1, #1
 800293e:	fa01 f202 	lsl.w	r2, r1, r2
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d180      	bne.n	800284a <HAL_RCC_OscConfig+0xf1a>
 8002948:	e027      	b.n	800299a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e01e      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x1078>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002966:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800296a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	429a      	cmp	r2, r3
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800297e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002982:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002992:	429a      	cmp	r2, r3
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b09e      	sub	sp, #120	; 0x78
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e162      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b90      	ldr	r3, [pc, #576]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b8d      	ldr	r3, [pc, #564]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0207 	bic.w	r2, r3, #7
 80029da:	498b      	ldr	r1, [pc, #556]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b89      	ldr	r3, [pc, #548]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e14a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	497f      	ldr	r1, [pc, #508]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80dc 	beq.w	8002bd8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d13c      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xf6>
 8002a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xa6>
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	e00f      	b.n	8002a72 <HAL_RCC_ClockConfig+0xc6>
 8002a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a64:	663b      	str	r3, [r7, #96]	; 0x60
 8002a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d17b      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e0f3      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d13c      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x178>
 8002aaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x128>
 8002ace:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e00f      	b.n	8002af4 <HAL_RCC_ClockConfig+0x148>
 8002ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af0:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002afa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	f002 021f 	and.w	r2, r2, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13a      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b2      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
 8002b24:	2302      	movs	r3, #2
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d102      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e00d      	b.n	8002b68 <HAL_RCC_ClockConfig+0x1bc>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	2302      	movs	r3, #2
 8002b5a:	623b      	str	r3, [r7, #32]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2202      	movs	r2, #2
 8002b6a:	61ba      	str	r2, [r7, #24]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	fa92 f2a2 	rbit	r2, r2
 8002b72:	617a      	str	r2, [r7, #20]
  return result;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e079      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b96:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f023 0203 	bic.w	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	491a      	ldr	r1, [pc, #104]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fb82 	bl	80012b0 <HAL_GetTick>
 8002bac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	e00a      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb0:	f7fe fb7e 	bl	80012b0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e061      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_RCC_ClockConfig+0x260>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 020c 	and.w	r2, r3, #12
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1eb      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d214      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 0207 	bic.w	r2, r3, #7
 8002bee:	4906      	ldr	r1, [pc, #24]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <HAL_RCC_ClockConfig+0x25c>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e040      	b.n	8002c8a <HAL_RCC_ClockConfig+0x2de>
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	491a      	ldr	r1, [pc, #104]	; (8002c94 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x2e8>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4912      	ldr	r1, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x2e8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c4e:	f000 f829 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c52:	4601      	mov	r1, r0
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_RCC_ClockConfig+0x2e8>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5c:	22f0      	movs	r2, #240	; 0xf0
 8002c5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	60fa      	str	r2, [r7, #12]
  return result;
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	40d3      	lsrs	r3, r2
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x2ec>)
 8002c74:	5cd3      	ldrb	r3, [r2, r3]
 8002c76:	fa21 f303 	lsr.w	r3, r1, r3
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <HAL_RCC_ClockConfig+0x2f0>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_ClockConfig+0x2f4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fad0 	bl	8001228 <HAL_InitTick>
  
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3778      	adds	r7, #120	; 0x78
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08005a44 	.word	0x08005a44
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	20000010 	.word	0x20000010

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08b      	sub	sp, #44	; 0x2c
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d002      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x36>
 8002cd2:	e03c      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cd6:	623b      	str	r3, [r7, #32]
      break;
 8002cd8:	e03c      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ce0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ce4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	fa92 f2a2 	rbit	r2, r2
 8002cec:	607a      	str	r2, [r7, #4]
  return result;
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	fab2 f282 	clz	r2, r2
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	40d3      	lsrs	r3, r2
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	220f      	movs	r2, #15
 8002d08:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	fa92 f2a2 	rbit	r2, r2
 8002d10:	60fa      	str	r2, [r7, #12]
  return result;
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	fab2 f282 	clz	r2, r2
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	40d3      	lsrs	r3, r2
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	e004      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4a0c      	ldr	r2, [pc, #48]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	623b      	str	r3, [r7, #32]
      break;
 8002d4c:	e002      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d50:	623b      	str	r3, [r7, #32]
      break;
 8002d52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d54:	6a3b      	ldr	r3, [r7, #32]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	372c      	adds	r7, #44	; 0x2c
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000
 8002d68:	007a1200 	.word	0x007a1200
 8002d6c:	08005a5c 	.word	0x08005a5c
 8002d70:	08005a6c 	.word	0x08005a6c
 8002d74:	003d0900 	.word	0x003d0900

08002d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000000c 	.word	0x2000000c

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d96:	f7ff ffef 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002da8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	fa92 f2a2 	rbit	r2, r2
 8002db0:	603a      	str	r2, [r7, #0]
  return result;
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	fab2 f282 	clz	r2, r2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	40d3      	lsrs	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08005a54 	.word	0x08005a54

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dda:	f7ff ffcd 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dde:	4601      	mov	r1, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002de8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002dec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	fa92 f2a2 	rbit	r2, r2
 8002df4:	603a      	str	r2, [r7, #0]
  return result;
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	fab2 f282 	clz	r2, r2
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	40d3      	lsrs	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40021000 	.word	0x40021000
 8002e14:	08005a54 	.word	0x08005a54

08002e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b092      	sub	sp, #72	; 0x48
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80d4 	beq.w	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10e      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e52:	61d3      	str	r3, [r2, #28]
 8002e54:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe fa17 	bl	80012b0 <HAL_GetTick>
 8002e82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe fa13 	bl	80012b0 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e169      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8084 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d07c      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	461a      	mov	r2, r3
 8002eee:	2301      	movs	r3, #1
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d04b      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe f9c3 	bl	80012b0 <HAL_GetTick>
 8002f2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f9bf 	bl	80012b0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e113      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002f44:	2302      	movs	r3, #2
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d108      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f72:	4b01      	ldr	r3, [pc, #4]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	e00d      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	10908100 	.word	0x10908100
 8002f84:	2302      	movs	r3, #2
 8002f86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2202      	movs	r2, #2
 8002f96:	613a      	str	r2, [r7, #16]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	fa92 f2a2 	rbit	r2, r2
 8002f9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0b7      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	496a      	ldr	r1, [pc, #424]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd8:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff0:	4b60      	ldr	r3, [pc, #384]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f023 0203 	bic.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	495d      	ldr	r1, [pc, #372]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800300e:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	4956      	ldr	r1, [pc, #344]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800302c:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	494e      	ldr	r1, [pc, #312]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f023 0210 	bic.w	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4947      	ldr	r1, [pc, #284]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003068:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	493f      	ldr	r1, [pc, #252]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f023 0220 	bic.w	r2, r3, #32
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4938      	ldr	r1, [pc, #224]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4930      	ldr	r1, [pc, #192]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	4929      	ldr	r1, [pc, #164]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4921      	ldr	r1, [pc, #132]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	491a      	ldr	r1, [pc, #104]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800312a:	4313      	orrs	r3, r2
 800312c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	490b      	ldr	r1, [pc, #44]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3748      	adds	r7, #72	; 0x48
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e049      	b.n	800321e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fa20 	bl	80005e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fd20 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e042      	b.n	80032c6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <HAL_TIM_Base_Start+0xac>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d018      	beq.n	8003284 <HAL_TIM_Base_Start+0x5c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d013      	beq.n	8003284 <HAL_TIM_Base_Start+0x5c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_TIM_Base_Start+0xb0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00e      	beq.n	8003284 <HAL_TIM_Base_Start+0x5c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_TIM_Base_Start+0xb4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d009      	beq.n	8003284 <HAL_TIM_Base_Start+0x5c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_TIM_Base_Start+0xb8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d004      	beq.n	8003284 <HAL_TIM_Base_Start+0x5c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <HAL_TIM_Base_Start+0xbc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d115      	bne.n	80032b0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <HAL_TIM_Base_Start+0xc0>)
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d015      	beq.n	80032c2 <HAL_TIM_Base_Start+0x9a>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d011      	beq.n	80032c2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	e008      	b.n	80032c2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e000      	b.n	80032c4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40013400 	.word	0x40013400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	00010007 	.word	0x00010007

080032ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e049      	b.n	8003392 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f841 	bl	800339a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	4619      	mov	r1, r3
 800332a:	4610      	mov	r0, r2
 800332c:	f000 fc66 	bl	8003bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x24>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e03c      	b.n	800344e <HAL_TIM_PWM_Start+0x9e>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d109      	bne.n	80033ee <HAL_TIM_PWM_Start+0x3e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e02f      	b.n	800344e <HAL_TIM_PWM_Start+0x9e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d109      	bne.n	8003408 <HAL_TIM_PWM_Start+0x58>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e022      	b.n	800344e <HAL_TIM_PWM_Start+0x9e>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d109      	bne.n	8003422 <HAL_TIM_PWM_Start+0x72>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	bf14      	ite	ne
 800341a:	2301      	movne	r3, #1
 800341c:	2300      	moveq	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	e015      	b.n	800344e <HAL_TIM_PWM_Start+0x9e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d109      	bne.n	800343c <HAL_TIM_PWM_Start+0x8c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e008      	b.n	800344e <HAL_TIM_PWM_Start+0x9e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e097      	b.n	8003586 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_TIM_PWM_Start+0xb6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003464:	e023      	b.n	80034ae <HAL_TIM_PWM_Start+0xfe>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d104      	bne.n	8003476 <HAL_TIM_PWM_Start+0xc6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003474:	e01b      	b.n	80034ae <HAL_TIM_PWM_Start+0xfe>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d104      	bne.n	8003486 <HAL_TIM_PWM_Start+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003484:	e013      	b.n	80034ae <HAL_TIM_PWM_Start+0xfe>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0xe6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003494:	e00b      	b.n	80034ae <HAL_TIM_PWM_Start+0xfe>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b10      	cmp	r3, #16
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Start+0xf6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	e003      	b.n	80034ae <HAL_TIM_PWM_Start+0xfe>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2201      	movs	r2, #1
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 ffa0 	bl	80043fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a33      	ldr	r2, [pc, #204]	; (8003590 <HAL_TIM_PWM_Start+0x1e0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_TIM_PWM_Start+0x13e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a32      	ldr	r2, [pc, #200]	; (8003594 <HAL_TIM_PWM_Start+0x1e4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_TIM_PWM_Start+0x13e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a30      	ldr	r2, [pc, #192]	; (8003598 <HAL_TIM_PWM_Start+0x1e8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_TIM_PWM_Start+0x13e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2f      	ldr	r2, [pc, #188]	; (800359c <HAL_TIM_PWM_Start+0x1ec>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_TIM_PWM_Start+0x13e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2d      	ldr	r2, [pc, #180]	; (80035a0 <HAL_TIM_PWM_Start+0x1f0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x142>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_TIM_PWM_Start+0x144>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a20      	ldr	r2, [pc, #128]	; (8003590 <HAL_TIM_PWM_Start+0x1e0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_TIM_PWM_Start+0x194>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351a:	d013      	beq.n	8003544 <HAL_TIM_PWM_Start+0x194>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <HAL_TIM_PWM_Start+0x1f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_TIM_PWM_Start+0x194>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HAL_TIM_PWM_Start+0x1f8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_TIM_PWM_Start+0x194>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_TIM_PWM_Start+0x1e4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_PWM_Start+0x194>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_TIM_PWM_Start+0x1e8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d115      	bne.n	8003570 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_TIM_PWM_Start+0x1fc>)
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d015      	beq.n	8003582 <HAL_TIM_PWM_Start+0x1d2>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d011      	beq.n	8003582 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	e008      	b.n	8003582 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e000      	b.n	8003584 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40013400 	.word	0x40013400
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0202 	mvn.w	r2, #2
 80035dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fae3 	bl	8003bbe <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fad5 	bl	8003baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fae6 	bl	8003bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fab9 	bl	8003bbe <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 faab 	bl	8003baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fabc 	bl	8003bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0208 	mvn.w	r2, #8
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa8f 	bl	8003bbe <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fa81 	bl	8003baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fa92 	bl	8003bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0210 	mvn.w	r2, #16
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2208      	movs	r2, #8
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 fa65 	bl	8003bbe <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa57 	bl	8003baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fa68 	bl	8003bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0201 	mvn.w	r2, #1
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd f9b2 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fefe 	bl	800455c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d10e      	bne.n	800378e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b80      	cmp	r3, #128	; 0x80
 800377c:	d107      	bne.n	800378e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fef1 	bl	8004570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d10e      	bne.n	80037ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d107      	bne.n	80037ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa16 	bl	8003be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d10e      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d107      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f06f 0220 	mvn.w	r2, #32
 80037de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 feb1 	bl	8004548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e0ff      	b.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b14      	cmp	r3, #20
 800381a:	f200 80f0 	bhi.w	80039fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800381e:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	08003879 	.word	0x08003879
 8003828:	080039ff 	.word	0x080039ff
 800382c:	080039ff 	.word	0x080039ff
 8003830:	080039ff 	.word	0x080039ff
 8003834:	080038b9 	.word	0x080038b9
 8003838:	080039ff 	.word	0x080039ff
 800383c:	080039ff 	.word	0x080039ff
 8003840:	080039ff 	.word	0x080039ff
 8003844:	080038fb 	.word	0x080038fb
 8003848:	080039ff 	.word	0x080039ff
 800384c:	080039ff 	.word	0x080039ff
 8003850:	080039ff 	.word	0x080039ff
 8003854:	0800393b 	.word	0x0800393b
 8003858:	080039ff 	.word	0x080039ff
 800385c:	080039ff 	.word	0x080039ff
 8003860:	080039ff 	.word	0x080039ff
 8003864:	0800397d 	.word	0x0800397d
 8003868:	080039ff 	.word	0x080039ff
 800386c:	080039ff 	.word	0x080039ff
 8003870:	080039ff 	.word	0x080039ff
 8003874:	080039bd 	.word	0x080039bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fa4c 	bl	8003d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699a      	ldr	r2, [r3, #24]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6999      	ldr	r1, [r3, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	619a      	str	r2, [r3, #24]
      break;
 80038b6:	e0a5      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fabc 	bl	8003e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699a      	ldr	r2, [r3, #24]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6999      	ldr	r1, [r3, #24]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	021a      	lsls	r2, r3, #8
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	619a      	str	r2, [r3, #24]
      break;
 80038f8:	e084      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fb25 	bl	8003f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0208 	orr.w	r2, r2, #8
 8003914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0204 	bic.w	r2, r2, #4
 8003924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69d9      	ldr	r1, [r3, #28]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	61da      	str	r2, [r3, #28]
      break;
 8003938:	e064      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fb8d 	bl	8004060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69d9      	ldr	r1, [r3, #28]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	021a      	lsls	r2, r3, #8
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	61da      	str	r2, [r3, #28]
      break;
 800397a:	e043      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fbd6 	bl	8004134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039ba:	e023      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fc1a 	bl	80041fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	75fb      	strb	r3, [r7, #23]
      break;
 8003a02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_ConfigClockSource+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0b6      	b.n	8003ba2 <HAL_TIM_ConfigClockSource+0x18a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	d03e      	beq.n	8003af0 <HAL_TIM_ConfigClockSource+0xd8>
 8003a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a76:	f200 8087 	bhi.w	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7e:	f000 8086 	beq.w	8003b8e <HAL_TIM_ConfigClockSource+0x176>
 8003a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a86:	d87f      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a88:	2b70      	cmp	r3, #112	; 0x70
 8003a8a:	d01a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0xaa>
 8003a8c:	2b70      	cmp	r3, #112	; 0x70
 8003a8e:	d87b      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a90:	2b60      	cmp	r3, #96	; 0x60
 8003a92:	d050      	beq.n	8003b36 <HAL_TIM_ConfigClockSource+0x11e>
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d877      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003a98:	2b50      	cmp	r3, #80	; 0x50
 8003a9a:	d03c      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xfe>
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	d873      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003aa0:	2b40      	cmp	r3, #64	; 0x40
 8003aa2:	d058      	beq.n	8003b56 <HAL_TIM_ConfigClockSource+0x13e>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d86f      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003aa8:	2b30      	cmp	r3, #48	; 0x30
 8003aaa:	d064      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	d86b      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d060      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d867      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05c      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d05a      	beq.n	8003b76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ac0:	e062      	b.n	8003b88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f000 fc73 	bl	80043bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	609a      	str	r2, [r3, #8]
      break;
 8003aee:	e04f      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f000 fc5c 	bl	80043bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b12:	609a      	str	r2, [r3, #8]
      break;
 8003b14:	e03c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6859      	ldr	r1, [r3, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f000 fbd0 	bl	80042c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2150      	movs	r1, #80	; 0x50
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fc29 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 8003b34:	e02c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6859      	ldr	r1, [r3, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f000 fbef 	bl	8004326 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2160      	movs	r1, #96	; 0x60
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fc19 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 8003b54:	e01c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f000 fbb0 	bl	80042c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fc09 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f000 fc00 	bl	8004386 <TIM_ITRx_SetConfig>
      break;
 8003b86:	e003      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <TIM_Base_SetConfig+0x104>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00f      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d00b      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a39      	ldr	r2, [pc, #228]	; (8003d04 <TIM_Base_SetConfig+0x108>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <TIM_Base_SetConfig+0x10c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x38>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <TIM_Base_SetConfig+0x110>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2d      	ldr	r2, [pc, #180]	; (8003d00 <TIM_Base_SetConfig+0x104>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01b      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d017      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <TIM_Base_SetConfig+0x108>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a29      	ldr	r2, [pc, #164]	; (8003d08 <TIM_Base_SetConfig+0x10c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a28      	ldr	r2, [pc, #160]	; (8003d0c <TIM_Base_SetConfig+0x110>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <TIM_Base_SetConfig+0x114>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <TIM_Base_SetConfig+0x118>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0x8a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <TIM_Base_SetConfig+0x11c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <TIM_Base_SetConfig+0x104>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00f      	beq.n	8003ce4 <TIM_Base_SetConfig+0xe8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <TIM_Base_SetConfig+0x110>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d00b      	beq.n	8003ce4 <TIM_Base_SetConfig+0xe8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <TIM_Base_SetConfig+0x114>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d007      	beq.n	8003ce4 <TIM_Base_SetConfig+0xe8>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <TIM_Base_SetConfig+0x118>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <TIM_Base_SetConfig+0xe8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <TIM_Base_SetConfig+0x11c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d103      	bne.n	8003cec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	615a      	str	r2, [r3, #20]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40000400 	.word	0x40000400
 8003d08:	40000800 	.word	0x40000800
 8003d0c:	40013400 	.word	0x40013400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800

08003d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <TIM_OC1_SetConfig+0x10c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00f      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a2b      	ldr	r2, [pc, #172]	; (8003e2c <TIM_OC1_SetConfig+0x110>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <TIM_OC1_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a29      	ldr	r2, [pc, #164]	; (8003e34 <TIM_OC1_SetConfig+0x118>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC1_SetConfig+0x80>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a28      	ldr	r2, [pc, #160]	; (8003e38 <TIM_OC1_SetConfig+0x11c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d10c      	bne.n	8003db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f023 0308 	bic.w	r3, r3, #8
 8003da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0304 	bic.w	r3, r3, #4
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a1b      	ldr	r2, [pc, #108]	; (8003e28 <TIM_OC1_SetConfig+0x10c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00f      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	; (8003e2c <TIM_OC1_SetConfig+0x110>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <TIM_OC1_SetConfig+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <TIM_OC1_SetConfig+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_OC1_SetConfig+0xc2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <TIM_OC1_SetConfig+0x11c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d111      	bne.n	8003e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	bf00      	nop
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40013400 	.word	0x40013400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400
 8003e38:	40014800 	.word	0x40014800

08003e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0210 	bic.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a28      	ldr	r2, [pc, #160]	; (8003f3c <TIM_OC2_SetConfig+0x100>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <TIM_OC2_SetConfig+0x6c>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <TIM_OC2_SetConfig+0x104>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10d      	bne.n	8003ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <TIM_OC2_SetConfig+0x100>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00f      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <TIM_OC2_SetConfig+0x104>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1b      	ldr	r2, [pc, #108]	; (8003f44 <TIM_OC2_SetConfig+0x108>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <TIM_OC2_SetConfig+0x10c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC2_SetConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <TIM_OC2_SetConfig+0x110>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d113      	bne.n	8003f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003efa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40012c00 	.word	0x40012c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a27      	ldr	r2, [pc, #156]	; (800404c <TIM_OC3_SetConfig+0xfc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_OC3_SetConfig+0x6a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <TIM_OC3_SetConfig+0x100>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d10d      	bne.n	8003fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	; (800404c <TIM_OC3_SetConfig+0xfc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <TIM_OC3_SetConfig+0x100>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <TIM_OC3_SetConfig+0x104>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <TIM_OC3_SetConfig+0x108>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC3_SetConfig+0xae>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_OC3_SetConfig+0x10c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d113      	bne.n	8004026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40013400 	.word	0x40013400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	031b      	lsls	r3, r3, #12
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a18      	ldr	r2, [pc, #96]	; (8004120 <TIM_OC4_SetConfig+0xc0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00f      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <TIM_OC4_SetConfig+0xc4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00b      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <TIM_OC4_SetConfig+0xc8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <TIM_OC4_SetConfig+0xcc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC4_SetConfig+0x84>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a14      	ldr	r2, [pc, #80]	; (8004130 <TIM_OC4_SetConfig+0xd0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	621a      	str	r2, [r3, #32]
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40013400 	.word	0x40013400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800

08004134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <TIM_OC5_SetConfig+0xb4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00f      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a16      	ldr	r2, [pc, #88]	; (80041ec <TIM_OC5_SetConfig+0xb8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00b      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <TIM_OC5_SetConfig+0xbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d007      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a14      	ldr	r2, [pc, #80]	; (80041f4 <TIM_OC5_SetConfig+0xc0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d003      	beq.n	80041ae <TIM_OC5_SetConfig+0x7a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <TIM_OC5_SetConfig+0xc4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d109      	bne.n	80041c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	621a      	str	r2, [r3, #32]
}
 80041dc:	bf00      	nop
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800

080041fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	051b      	lsls	r3, r3, #20
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <TIM_OC6_SetConfig+0xb8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00f      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a17      	ldr	r2, [pc, #92]	; (80042b8 <TIM_OC6_SetConfig+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <TIM_OC6_SetConfig+0xc0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <TIM_OC6_SetConfig+0xc4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_OC6_SetConfig+0x7c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a14      	ldr	r2, [pc, #80]	; (80042c4 <TIM_OC6_SetConfig+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d109      	bne.n	800428c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	029b      	lsls	r3, r3, #10
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40013400 	.word	0x40013400
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f023 0201 	bic.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f023 030a 	bic.w	r3, r3, #10
 8004304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0210 	bic.w	r2, r3, #16
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	031b      	lsls	r3, r3, #12
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	621a      	str	r2, [r3, #32]
}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f043 0307 	orr.w	r3, r3, #7
 80043a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	431a      	orrs	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	609a      	str	r2, [r3, #8]
}
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	43db      	mvns	r3, r3
 800441e:	401a      	ands	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1a      	ldr	r2, [r3, #32]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e063      	b.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d108      	bne.n	80044a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800449a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d013      	beq.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a12      	ldr	r2, [pc, #72]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d10c      	bne.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	4313      	orrs	r3, r2
 800450c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800
 8004544:	40014000 	.word	0x40014000

08004548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e040      	b.n	8004618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc f8a0 	bl	80006ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fb76 	bl	8004cb4 <UART_SetConfig>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e022      	b.n	8004618 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd3e 	bl	800505c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fdc5 	bl	80051a0 <UART_CheckIdleState>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004634:	2b20      	cmp	r3, #32
 8004636:	d132      	bne.n	800469e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_UART_Receive_IT+0x24>
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e02b      	b.n	80046a0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	69f9      	ldr	r1, [r7, #28]
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	61bb      	str	r3, [r7, #24]
   return(result);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e6      	bne.n	800465c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	461a      	mov	r2, r3
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fe93 	bl	80053c0 <UART_Start_Receive_IT>
 800469a:	4603      	mov	r3, r0
 800469c:	e000      	b.n	80046a0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3728      	adds	r7, #40	; 0x28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b0ba      	sub	sp, #232	; 0xe8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80046d6:	4013      	ands	r3, r2
 80046d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80046dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d115      	bne.n	8004710 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d009      	beq.n	8004710 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 82ab 	beq.w	8004c5c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
      }
      return;
 800470e:	e2a5      	b.n	8004c5c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8117 	beq.w	8004948 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800471a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800472a:	4b85      	ldr	r3, [pc, #532]	; (8004940 <HAL_UART_IRQHandler+0x298>)
 800472c:	4013      	ands	r3, r2
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 810a 	beq.w	8004948 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d011      	beq.n	8004764 <HAL_UART_IRQHandler+0xbc>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2201      	movs	r2, #1
 8004752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <HAL_UART_IRQHandler+0xec>
 8004770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2202      	movs	r2, #2
 8004782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d011      	beq.n	80047c4 <HAL_UART_IRQHandler+0x11c>
 80047a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2204      	movs	r2, #4
 80047b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ba:	f043 0202 	orr.w	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d017      	beq.n	8004800 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f6:	f043 0208 	orr.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <HAL_UART_IRQHandler+0x18a>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00c      	beq.n	8004832 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8211 	beq.w	8004c60 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d005      	beq.n	800488a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800487e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004882:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004886:	2b00      	cmp	r3, #0
 8004888:	d04f      	beq.n	800492a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fe4c 	bl	8005528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b40      	cmp	r3, #64	; 0x40
 800489c:	d141      	bne.n	8004922 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3308      	adds	r3, #8
 80048c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1d9      	bne.n	800489e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d013      	beq.n	800491a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	4a13      	ldr	r2, [pc, #76]	; (8004944 <HAL_UART_IRQHandler+0x29c>)
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fe2c 	bl	800155c <HAL_DMA_Abort_IT>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d017      	beq.n	800493a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004918:	e00f      	b.n	800493a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9b4 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e00b      	b.n	800493a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9b0 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	e007      	b.n	800493a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f9ac 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004938:	e192      	b.n	8004c60 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493a:	bf00      	nop
    return;
 800493c:	e190      	b.n	8004c60 <HAL_UART_IRQHandler+0x5b8>
 800493e:	bf00      	nop
 8004940:	04000120 	.word	0x04000120
 8004944:	080055f1 	.word	0x080055f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 814b 	bne.w	8004be8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8144 	beq.w	8004be8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 813d 	beq.w	8004be8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	f040 80b5 	bne.w	8004af0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004992:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8164 	beq.w	8004c64 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049a6:	429a      	cmp	r2, r3
 80049a8:	f080 815c 	bcs.w	8004c64 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b20      	cmp	r3, #32
 80049be:	f000 8086 	beq.w	8004ace <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1da      	bne.n	80049c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a34:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e1      	bne.n	8004a0c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a6c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e3      	bne.n	8004a48 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9e:	f023 0310 	bic.w	r3, r3, #16
 8004aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ab0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ab2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ab6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e4      	bne.n	8004a8e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fc fd0e 	bl	80014ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8d7 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aee:	e0b9      	b.n	8004c64 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80ab 	beq.w	8004c68 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004b12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80a6 	beq.w	8004c68 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e4      	bne.n	8004b1c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	623b      	str	r3, [r7, #32]
   return(result);
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b76:	633a      	str	r2, [r7, #48]	; 0x30
 8004b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e3      	bne.n	8004b52 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	69b9      	ldr	r1, [r7, #24]
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e4      	bne.n	8004b9e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f85b 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be6:	e03f      	b.n	8004c68 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <HAL_UART_IRQHandler+0x56a>
 8004bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fed8 	bl	80059c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c10:	e02d      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00e      	beq.n	8004c3c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01c      	beq.n	8004c6c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
    }
    return;
 8004c3a:	e017      	b.n	8004c6c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fce1 	bl	800561c <UART_EndTransmit_IT>
    return;
 8004c5a:	e008      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c5c:	bf00      	nop
 8004c5e:	e006      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c60:	bf00      	nop
 8004c62:	e004      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c64:	bf00      	nop
 8004c66:	e002      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
      return;
 8004c68:	bf00      	nop
 8004c6a:	e000      	b.n	8004c6e <HAL_UART_IRQHandler+0x5c6>
    return;
 8004c6c:	bf00      	nop
  }

}
 8004c6e:	37e8      	adds	r7, #232	; 0xe8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ce2:	f023 030c 	bic.w	r3, r3, #12
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	6979      	ldr	r1, [r7, #20]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4aa7      	ldr	r2, [pc, #668]	; (8004fcc <UART_SetConfig+0x318>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d120      	bne.n	8004d76 <UART_SetConfig+0xc2>
 8004d34:	4ba6      	ldr	r3, [pc, #664]	; (8004fd0 <UART_SetConfig+0x31c>)
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d817      	bhi.n	8004d70 <UART_SetConfig+0xbc>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0x94>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d65 	.word	0x08004d65
 8004d50:	08004d6b 	.word	0x08004d6b
 8004d54:	08004d5f 	.word	0x08004d5f
 8004d58:	2301      	movs	r3, #1
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e0b5      	b.n	8004eca <UART_SetConfig+0x216>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e0b2      	b.n	8004eca <UART_SetConfig+0x216>
 8004d64:	2304      	movs	r3, #4
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e0af      	b.n	8004eca <UART_SetConfig+0x216>
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e0ac      	b.n	8004eca <UART_SetConfig+0x216>
 8004d70:	2310      	movs	r3, #16
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e0a9      	b.n	8004eca <UART_SetConfig+0x216>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a96      	ldr	r2, [pc, #600]	; (8004fd4 <UART_SetConfig+0x320>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d124      	bne.n	8004dca <UART_SetConfig+0x116>
 8004d80:	4b93      	ldr	r3, [pc, #588]	; (8004fd0 <UART_SetConfig+0x31c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d8c:	d011      	beq.n	8004db2 <UART_SetConfig+0xfe>
 8004d8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d92:	d817      	bhi.n	8004dc4 <UART_SetConfig+0x110>
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d98:	d011      	beq.n	8004dbe <UART_SetConfig+0x10a>
 8004d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d9e:	d811      	bhi.n	8004dc4 <UART_SetConfig+0x110>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <UART_SetConfig+0xf8>
 8004da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da8:	d006      	beq.n	8004db8 <UART_SetConfig+0x104>
 8004daa:	e00b      	b.n	8004dc4 <UART_SetConfig+0x110>
 8004dac:	2300      	movs	r3, #0
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e08b      	b.n	8004eca <UART_SetConfig+0x216>
 8004db2:	2302      	movs	r3, #2
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e088      	b.n	8004eca <UART_SetConfig+0x216>
 8004db8:	2304      	movs	r3, #4
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e085      	b.n	8004eca <UART_SetConfig+0x216>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e082      	b.n	8004eca <UART_SetConfig+0x216>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e07f      	b.n	8004eca <UART_SetConfig+0x216>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a82      	ldr	r2, [pc, #520]	; (8004fd8 <UART_SetConfig+0x324>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d124      	bne.n	8004e1e <UART_SetConfig+0x16a>
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <UART_SetConfig+0x31c>)
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ddc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004de0:	d011      	beq.n	8004e06 <UART_SetConfig+0x152>
 8004de2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004de6:	d817      	bhi.n	8004e18 <UART_SetConfig+0x164>
 8004de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dec:	d011      	beq.n	8004e12 <UART_SetConfig+0x15e>
 8004dee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004df2:	d811      	bhi.n	8004e18 <UART_SetConfig+0x164>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <UART_SetConfig+0x14c>
 8004df8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dfc:	d006      	beq.n	8004e0c <UART_SetConfig+0x158>
 8004dfe:	e00b      	b.n	8004e18 <UART_SetConfig+0x164>
 8004e00:	2300      	movs	r3, #0
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e061      	b.n	8004eca <UART_SetConfig+0x216>
 8004e06:	2302      	movs	r3, #2
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	e05e      	b.n	8004eca <UART_SetConfig+0x216>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e05b      	b.n	8004eca <UART_SetConfig+0x216>
 8004e12:	2308      	movs	r3, #8
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e058      	b.n	8004eca <UART_SetConfig+0x216>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e055      	b.n	8004eca <UART_SetConfig+0x216>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6e      	ldr	r2, [pc, #440]	; (8004fdc <UART_SetConfig+0x328>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d124      	bne.n	8004e72 <UART_SetConfig+0x1be>
 8004e28:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <UART_SetConfig+0x31c>)
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e34:	d011      	beq.n	8004e5a <UART_SetConfig+0x1a6>
 8004e36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e3a:	d817      	bhi.n	8004e6c <UART_SetConfig+0x1b8>
 8004e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e40:	d011      	beq.n	8004e66 <UART_SetConfig+0x1b2>
 8004e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e46:	d811      	bhi.n	8004e6c <UART_SetConfig+0x1b8>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x1a0>
 8004e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e50:	d006      	beq.n	8004e60 <UART_SetConfig+0x1ac>
 8004e52:	e00b      	b.n	8004e6c <UART_SetConfig+0x1b8>
 8004e54:	2300      	movs	r3, #0
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e037      	b.n	8004eca <UART_SetConfig+0x216>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e034      	b.n	8004eca <UART_SetConfig+0x216>
 8004e60:	2304      	movs	r3, #4
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e031      	b.n	8004eca <UART_SetConfig+0x216>
 8004e66:	2308      	movs	r3, #8
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e02e      	b.n	8004eca <UART_SetConfig+0x216>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e02b      	b.n	8004eca <UART_SetConfig+0x216>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a5a      	ldr	r2, [pc, #360]	; (8004fe0 <UART_SetConfig+0x32c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d124      	bne.n	8004ec6 <UART_SetConfig+0x212>
 8004e7c:	4b54      	ldr	r3, [pc, #336]	; (8004fd0 <UART_SetConfig+0x31c>)
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e88:	d011      	beq.n	8004eae <UART_SetConfig+0x1fa>
 8004e8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e8e:	d817      	bhi.n	8004ec0 <UART_SetConfig+0x20c>
 8004e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e94:	d011      	beq.n	8004eba <UART_SetConfig+0x206>
 8004e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e9a:	d811      	bhi.n	8004ec0 <UART_SetConfig+0x20c>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <UART_SetConfig+0x1f4>
 8004ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea4:	d006      	beq.n	8004eb4 <UART_SetConfig+0x200>
 8004ea6:	e00b      	b.n	8004ec0 <UART_SetConfig+0x20c>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e00d      	b.n	8004eca <UART_SetConfig+0x216>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e00a      	b.n	8004eca <UART_SetConfig+0x216>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e007      	b.n	8004eca <UART_SetConfig+0x216>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e004      	b.n	8004eca <UART_SetConfig+0x216>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e001      	b.n	8004eca <UART_SetConfig+0x216>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed2:	d15b      	bne.n	8004f8c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004ed4:	7ffb      	ldrb	r3, [r7, #31]
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d827      	bhi.n	8004f2a <UART_SetConfig+0x276>
 8004eda:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <UART_SetConfig+0x22c>)
 8004edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f0d 	.word	0x08004f0d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	08004f2b 	.word	0x08004f2b
 8004ef0:	08004f1b 	.word	0x08004f1b
 8004ef4:	08004f2b 	.word	0x08004f2b
 8004ef8:	08004f2b 	.word	0x08004f2b
 8004efc:	08004f2b 	.word	0x08004f2b
 8004f00:	08004f23 	.word	0x08004f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f04:	f7fd ff44 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004f08:	61b8      	str	r0, [r7, #24]
        break;
 8004f0a:	e013      	b.n	8004f34 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f0c:	f7fd ff62 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8004f10:	61b8      	str	r0, [r7, #24]
        break;
 8004f12:	e00f      	b.n	8004f34 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f14:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <UART_SetConfig+0x330>)
 8004f16:	61bb      	str	r3, [r7, #24]
        break;
 8004f18:	e00c      	b.n	8004f34 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f1a:	f7fd fec3 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004f1e:	61b8      	str	r0, [r7, #24]
        break;
 8004f20:	e008      	b.n	8004f34 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	61bb      	str	r3, [r7, #24]
        break;
 8004f28:	e004      	b.n	8004f34 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	77bb      	strb	r3, [r7, #30]
        break;
 8004f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8082 	beq.w	8005040 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	005a      	lsls	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	441a      	add	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b0f      	cmp	r3, #15
 8004f56:	d916      	bls.n	8004f86 <UART_SetConfig+0x2d2>
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5e:	d212      	bcs.n	8004f86 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f023 030f 	bic.w	r3, r3, #15
 8004f68:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	89fb      	ldrh	r3, [r7, #14]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	e05c      	b.n	8005040 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	77bb      	strb	r3, [r7, #30]
 8004f8a:	e059      	b.n	8005040 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d835      	bhi.n	8004ffe <UART_SetConfig+0x34a>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <UART_SetConfig+0x2e4>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fbd 	.word	0x08004fbd
 8004f9c:	08004fc5 	.word	0x08004fc5
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fff 	.word	0x08004fff
 8004fa8:	08004fef 	.word	0x08004fef
 8004fac:	08004fff 	.word	0x08004fff
 8004fb0:	08004fff 	.word	0x08004fff
 8004fb4:	08004fff 	.word	0x08004fff
 8004fb8:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fbc:	f7fd fee8 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004fc0:	61b8      	str	r0, [r7, #24]
        break;
 8004fc2:	e021      	b.n	8005008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc4:	f7fd ff06 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8004fc8:	61b8      	str	r0, [r7, #24]
        break;
 8004fca:	e01d      	b.n	8005008 <UART_SetConfig+0x354>
 8004fcc:	40013800 	.word	0x40013800
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40004400 	.word	0x40004400
 8004fd8:	40004800 	.word	0x40004800
 8004fdc:	40004c00 	.word	0x40004c00
 8004fe0:	40005000 	.word	0x40005000
 8004fe4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <UART_SetConfig+0x3a4>)
 8004fea:	61bb      	str	r3, [r7, #24]
        break;
 8004fec:	e00c      	b.n	8005008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fee:	f7fd fe59 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8004ff2:	61b8      	str	r0, [r7, #24]
        break;
 8004ff4:	e008      	b.n	8005008 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e004      	b.n	8005008 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	77bb      	strb	r3, [r7, #30]
        break;
 8005006:	bf00      	nop
    }

    if (pclk != 0U)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d018      	beq.n	8005040 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	085a      	lsrs	r2, r3, #1
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	441a      	add	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d909      	bls.n	800503c <UART_SetConfig+0x388>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502e:	d205      	bcs.n	800503c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	e001      	b.n	8005040 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800504c:	7fbb      	ldrb	r3, [r7, #30]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	007a1200 	.word	0x007a1200

0800505c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800515a:	d10a      	bne.n	8005172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b098      	sub	sp, #96	; 0x60
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b0:	f7fc f87e 	bl	80012b0 <HAL_GetTick>
 80051b4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d12e      	bne.n	8005222 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f88c 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d021      	beq.n	8005222 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f2:	653b      	str	r3, [r7, #80]	; 0x50
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fc:	647b      	str	r3, [r7, #68]	; 0x44
 80051fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800520a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e062      	b.n	80052e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d149      	bne.n	80052c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f856 	bl	80052f0 <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d03c      	beq.n	80052c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	623b      	str	r3, [r7, #32]
   return(result);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	461a      	mov	r2, r3
 8005266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005268:	633b      	str	r3, [r7, #48]	; 0x30
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800526e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e6      	bne.n	800524a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	60fb      	str	r3, [r7, #12]
   return(result);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529c:	61fa      	str	r2, [r7, #28]
 800529e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a0:	69b9      	ldr	r1, [r7, #24]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	e841 2300 	strex	r3, r2, [r1]
 80052a8:	617b      	str	r3, [r7, #20]
   return(result);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1e5      	bne.n	800527c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e011      	b.n	80052e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3758      	adds	r7, #88	; 0x58
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005300:	e049      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005308:	d045      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530a:	f7fb ffd1 	bl	80012b0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	429a      	cmp	r2, r3
 8005318:	d302      	bcc.n	8005320 <UART_WaitOnFlagUntilTimeout+0x30>
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e048      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d031      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d110      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2208      	movs	r2, #8
 8005346:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8ed 	bl	8005528 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2208      	movs	r2, #8
 8005352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e029      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	d111      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800537a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8d3 	bl	8005528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2220      	movs	r2, #32
 8005386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4013      	ands	r3, r2
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	bf0c      	ite	eq
 80053a6:	2301      	moveq	r3, #1
 80053a8:	2300      	movne	r3, #0
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d0a6      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b097      	sub	sp, #92	; 0x5c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	d10e      	bne.n	8005412 <UART_Start_Receive_IT+0x52>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <UART_Start_Receive_IT+0x48>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005406:	e01a      	b.n	800543e <UART_Start_Receive_IT+0x7e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	; 0xff
 800540c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005410:	e015      	b.n	800543e <UART_Start_Receive_IT+0x7e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <UART_Start_Receive_IT+0x76>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <UART_Start_Receive_IT+0x6c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	22ff      	movs	r2, #255	; 0xff
 8005426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800542a:	e008      	b.n	800543e <UART_Start_Receive_IT+0x7e>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	; 0x7f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005434:	e003      	b.n	800543e <UART_Start_Receive_IT+0x7e>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2222      	movs	r2, #34	; 0x22
 800544a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	657b      	str	r3, [r7, #84]	; 0x54
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3308      	adds	r3, #8
 800546c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800546e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800547c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e5      	bne.n	800544e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d107      	bne.n	800549c <UART_Start_Receive_IT+0xdc>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d103      	bne.n	800549c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4a22      	ldr	r2, [pc, #136]	; (8005520 <UART_Start_Receive_IT+0x160>)
 8005498:	669a      	str	r2, [r3, #104]	; 0x68
 800549a:	e002      	b.n	80054a2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <UART_Start_Receive_IT+0x164>)
 80054a0:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d019      	beq.n	80054de <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	e853 3f00 	ldrex	r3, [r3]
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d0:	e841 2300 	strex	r3, r2, [r1]
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e6      	bne.n	80054aa <UART_Start_Receive_IT+0xea>
 80054dc:	e018      	b.n	8005510 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	613b      	str	r3, [r7, #16]
   return(result);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f043 0320 	orr.w	r3, r3, #32
 80054f2:	653b      	str	r3, [r7, #80]	; 0x50
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fc:	623b      	str	r3, [r7, #32]
 80054fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	61bb      	str	r3, [r7, #24]
   return(result);
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	375c      	adds	r7, #92	; 0x5c
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	08005819 	.word	0x08005819
 8005524:	08005671 	.word	0x08005671

08005528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b095      	sub	sp, #84	; 0x54
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
 8005550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	61fb      	str	r3, [r7, #28]
   return(result);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	64bb      	str	r3, [r7, #72]	; 0x48
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	2b01      	cmp	r3, #1
 800559c:	d118      	bne.n	80055d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f023 0310 	bic.w	r3, r3, #16
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e6      	bne.n	800559e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055e4:	bf00      	nop
 80055e6:	3754      	adds	r7, #84	; 0x54
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff fb3a 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	60bb      	str	r3, [r7, #8]
   return(result);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	613b      	str	r3, [r7, #16]
   return(result);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fb06 	bl	8004c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005668:	bf00      	nop
 800566a:	3720      	adds	r7, #32
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b09c      	sub	sp, #112	; 0x70
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800567e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005688:	2b22      	cmp	r3, #34	; 0x22
 800568a:	f040 80b9 	bne.w	8005800 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005694:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005698:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800569c:	b2d9      	uxtb	r1, r3
 800569e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	400a      	ands	r2, r1
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f040 809c 	bne.w	8005810 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80056f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e6      	bne.n	80056d8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	3308      	adds	r3, #8
 8005710:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	f023 0301 	bic.w	r3, r3, #1
 8005720:	667b      	str	r3, [r7, #100]	; 0x64
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800572a:	647a      	str	r2, [r7, #68]	; 0x44
 800572c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e5      	bne.n	800570a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d018      	beq.n	8005792 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	623b      	str	r3, [r7, #32]
   return(result);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577e:	633b      	str	r3, [r7, #48]	; 0x30
 8005780:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e6      	bne.n	8005760 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	2b01      	cmp	r3, #1
 8005798:	d12e      	bne.n	80057f8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 0310 	bic.w	r3, r3, #16
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	69b9      	ldr	r1, [r7, #24]
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	617b      	str	r3, [r7, #20]
   return(result);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d103      	bne.n	80057e8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2210      	movs	r2, #16
 80057e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fa53 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057f6:	e00b      	b.n	8005810 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fb f919 	bl	8000a30 <HAL_UART_RxCpltCallback>
}
 80057fe:	e007      	b.n	8005810 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	619a      	str	r2, [r3, #24]
}
 8005810:	bf00      	nop
 8005812:	3770      	adds	r7, #112	; 0x70
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b09c      	sub	sp, #112	; 0x70
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005826:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005830:	2b22      	cmp	r3, #34	; 0x22
 8005832:	f040 80b9 	bne.w	80059a8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800583c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005846:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800584a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800584e:	4013      	ands	r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005854:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	f040 809c 	bne.w	80059b8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800588e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005894:	667b      	str	r3, [r7, #100]	; 0x64
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	461a      	mov	r2, r3
 800589c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589e:	657b      	str	r3, [r7, #84]	; 0x54
 80058a0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e6      	bne.n	8005880 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	663b      	str	r3, [r7, #96]	; 0x60
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3308      	adds	r3, #8
 80058d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058d2:	643a      	str	r2, [r7, #64]	; 0x40
 80058d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d018      	beq.n	800593a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	61fb      	str	r3, [r7, #28]
   return(result);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800591c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005928:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800592c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e6      	bne.n	8005908 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593e:	2b01      	cmp	r3, #1
 8005940:	d12e      	bne.n	80059a0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	60bb      	str	r3, [r7, #8]
   return(result);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	65bb      	str	r3, [r7, #88]	; 0x58
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6979      	ldr	r1, [r7, #20]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	613b      	str	r3, [r7, #16]
   return(result);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e6      	bne.n	8005948 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b10      	cmp	r3, #16
 8005986:	d103      	bne.n	8005990 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2210      	movs	r2, #16
 800598e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005996:	4619      	mov	r1, r3
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff f97f 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800599e:	e00b      	b.n	80059b8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fb f845 	bl	8000a30 <HAL_UART_RxCpltCallback>
}
 80059a6:	e007      	b.n	80059b8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	619a      	str	r2, [r3, #24]
}
 80059b8:	bf00      	nop
 80059ba:	3770      	adds	r7, #112	; 0x70
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	; (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	; (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	; (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	; (8005a18 <__libc_init_array+0x44>)
 80059e8:	f000 f820 	bl	8005a2c <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	08005a7c 	.word	0x08005a7c
 8005a10:	08005a7c 	.word	0x08005a7c
 8005a14:	08005a7c 	.word	0x08005a7c
 8005a18:	08005a80 	.word	0x08005a80

08005a1c <memset>:
 8005a1c:	4402      	add	r2, r0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d100      	bne.n	8005a26 <memset+0xa>
 8005a24:	4770      	bx	lr
 8005a26:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2a:	e7f9      	b.n	8005a20 <memset+0x4>

08005a2c <_init>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr

08005a38 <_fini>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr
