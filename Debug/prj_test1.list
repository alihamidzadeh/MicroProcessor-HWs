
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  080046b8  080046b8  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046b8  080046b8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046bc  080046bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080046c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          00000228  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c25  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f88  00000000  00000000  00031ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d4e0  00000000  00000000  00035a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e82  00000000  00000000  00052ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b4693  00000000  00000000  00065d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011a3f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040c4  00000000  00000000  0011a448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004658 	.word	0x08004658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08004658 	.word	0x08004658

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <uart_rx_enable_it>:
/* USER CODE BEGIN 0 */

uint8_t input[200];
uint8_t character;
uint32_t index = 0;
void uart_rx_enable_it(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &character, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	4903      	ldr	r1, [pc, #12]	; (80001f0 <uart_rx_enable_it+0x14>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <uart_rx_enable_it+0x18>)
 80001e6:	f003 fb75 	bl	80038d4 <HAL_UART_Receive_IT>

}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000260 	.word	0x20000260
 80001f4:	20000110 	.word	0x20000110

080001f8 <getString>:
uint8_t password[]={'p','a','s','s','1','2','3'};

int getString(char string[], uint32_t to){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 80001fe:	af00      	add	r7, sp, #0
 8000200:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000204:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8000208:	6018      	str	r0, [r3, #0]
 800020a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800020e:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8000212:	6019      	str	r1, [r3, #0]

    char substring[1000];
    uint32_t c = 0;
 8000214:	2300      	movs	r3, #0
 8000216:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    while (c <= to - 2 ){
 800021a:	e017      	b.n	800024c <getString+0x54>
        substring[c] = string[2 + c - 1];
 800021c:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000220:	3301      	adds	r3, #1
 8000222:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8000226:	f5a2 727d 	sub.w	r2, r2, #1012	; 0x3f4
 800022a:	6812      	ldr	r2, [r2, #0]
 800022c:	4413      	add	r3, r2
 800022e:	7819      	ldrb	r1, [r3, #0]
 8000230:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000234:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 8000238:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800023c:	4413      	add	r3, r2
 800023e:	460a      	mov	r2, r1
 8000240:	701a      	strb	r2, [r3, #0]
        c++;
 8000242:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000246:	3301      	adds	r3, #1
 8000248:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    while (c <= to - 2 ){
 800024c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000250:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b02      	subs	r3, #2
 8000258:	f8d7 23f4 	ldr.w	r2, [r7, #1012]	; 0x3f4
 800025c:	429a      	cmp	r2, r3
 800025e:	d9dd      	bls.n	800021c <getString+0x24>
    }
    substring[c]='\0';
 8000260:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000264:	f5a3 727b 	sub.w	r2, r3, #1004	; 0x3ec
 8000268:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800026c:	4413      	add	r3, r2
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]


	if (strcmp(substring, password)){
 8000272:	f107 030c 	add.w	r3, r7, #12
 8000276:	4907      	ldr	r1, [pc, #28]	; (8000294 <getString+0x9c>)
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffa5 	bl	80001c8 <strcmp>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <getString+0x90>
		return 1;
 8000284:	2301      	movs	r3, #1
 8000286:	e000      	b.n	800028a <getString+0x92>
	}

    return 0;
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	f507 777e 	add.w	r7, r7, #1016	; 0x3f8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000000 	.word	0x20000000

08000298 <HAL_UART_RxCpltCallback>:
uint32_t pir_active = 0; //0,1,2
uint8_t pass[15];
uint32_t observed = 0;
uint32_t relay_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (huart2->Instance == USART2) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a34      	ldr	r2, [pc, #208]	; (8000378 <HAL_UART_RxCpltCallback+0xe0>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d162      	bne.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
		if (character != 'z'){
 80002aa:	4b34      	ldr	r3, [pc, #208]	; (800037c <HAL_UART_RxCpltCallback+0xe4>)
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b7a      	cmp	r3, #122	; 0x7a
 80002b0:	d00b      	beq.n	80002ca <HAL_UART_RxCpltCallback+0x32>
			input[index++] = character;
 80002b2:	4b33      	ldr	r3, [pc, #204]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	4931      	ldr	r1, [pc, #196]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002ba:	600a      	str	r2, [r1, #0]
 80002bc:	4a2f      	ldr	r2, [pc, #188]	; (800037c <HAL_UART_RxCpltCallback+0xe4>)
 80002be:	7811      	ldrb	r1, [r2, #0]
 80002c0:	4a30      	ldr	r2, [pc, #192]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 80002c2:	54d1      	strb	r1, [r2, r3]
			uart_rx_enable_it();
 80002c4:	f7ff ff8a 	bl	80001dc <uart_rx_enable_it>
				}
			}
		}

	}
}
 80002c8:	e052      	b.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
			input[index++] = character;
 80002ca:	4b2d      	ldr	r3, [pc, #180]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	492b      	ldr	r1, [pc, #172]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002d2:	600a      	str	r2, [r1, #0]
 80002d4:	4a29      	ldr	r2, [pc, #164]	; (800037c <HAL_UART_RxCpltCallback+0xe4>)
 80002d6:	7811      	ldrb	r1, [r2, #0]
 80002d8:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 80002da:	54d1      	strb	r1, [r2, r3]
			input[index++] = '\0';
 80002dc:	4b28      	ldr	r3, [pc, #160]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	1c5a      	adds	r2, r3, #1
 80002e2:	4927      	ldr	r1, [pc, #156]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002e4:	600a      	str	r2, [r1, #0]
 80002e6:	4a27      	ldr	r2, [pc, #156]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 80002e8:	2100      	movs	r1, #0
 80002ea:	54d1      	strb	r1, [r2, r3]
			uint32_t temp = index;
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	60fb      	str	r3, [r7, #12]
			index = 0;
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <HAL_UART_RxCpltCallback+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
			if (strcmp(input,'ap1z')){ //start
 80002f8:	4923      	ldr	r1, [pc, #140]	; (8000388 <HAL_UART_RxCpltCallback+0xf0>)
 80002fa:	4822      	ldr	r0, [pc, #136]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 80002fc:	f7ff ff64 	bl	80001c8 <strcmp>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <HAL_UART_RxCpltCallback+0x76>
				pir_active = 1;
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <HAL_UART_RxCpltCallback+0xf4>)
 8000308:	2201      	movs	r2, #1
 800030a:	601a      	str	r2, [r3, #0]
}
 800030c:	e030      	b.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
			}else if (strcmp(input,'aR-z')){ //reset
 800030e:	4920      	ldr	r1, [pc, #128]	; (8000390 <HAL_UART_RxCpltCallback+0xf8>)
 8000310:	481c      	ldr	r0, [pc, #112]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 8000312:	f7ff ff59 	bl	80001c8 <strcmp>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d003      	beq.n	8000324 <HAL_UART_RxCpltCallback+0x8c>
				pir_active = 2;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <HAL_UART_RxCpltCallback+0xf4>)
 800031e:	2202      	movs	r2, #2
 8000320:	601a      	str	r2, [r3, #0]
}
 8000322:	e025      	b.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
				if (input[0]=='a' && input[1]=='r' && input[temp-1]=='z'){ //Deactive
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b61      	cmp	r3, #97	; 0x61
 800032a:	d119      	bne.n	8000360 <HAL_UART_RxCpltCallback+0xc8>
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 800032e:	785b      	ldrb	r3, [r3, #1]
 8000330:	2b72      	cmp	r3, #114	; 0x72
 8000332:	d115      	bne.n	8000360 <HAL_UART_RxCpltCallback+0xc8>
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3b01      	subs	r3, #1
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	2b7a      	cmp	r3, #122	; 0x7a
 800033e:	d10f      	bne.n	8000360 <HAL_UART_RxCpltCallback+0xc8>
					if (getString(input, temp-2)==1){
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	3b02      	subs	r3, #2
 8000344:	4619      	mov	r1, r3
 8000346:	480f      	ldr	r0, [pc, #60]	; (8000384 <HAL_UART_RxCpltCallback+0xec>)
 8000348:	f7ff ff56 	bl	80001f8 <getString>
 800034c:	4603      	mov	r3, r0
 800034e:	2b01      	cmp	r3, #1
 8000350:	d10e      	bne.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
						pir_active = 0;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <HAL_UART_RxCpltCallback+0xf4>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
						relay_active = 0;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <HAL_UART_RxCpltCallback+0xfc>)
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
					if (getString(input, temp-2)==1){
 800035e:	e007      	b.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
					HAL_UART_Transmit(&huart2, "Invalid Packet\n", 15, HAL_MAX_DELAY);
 8000360:	1d38      	adds	r0, r7, #4
 8000362:	f04f 33ff 	mov.w	r3, #4294967295
 8000366:	220f      	movs	r2, #15
 8000368:	490b      	ldr	r1, [pc, #44]	; (8000398 <HAL_UART_RxCpltCallback+0x100>)
 800036a:	f003 fa29 	bl	80037c0 <HAL_UART_Transmit>
}
 800036e:	e7ff      	b.n	8000370 <HAL_UART_RxCpltCallback+0xd8>
 8000370:	bf00      	nop
 8000372:	3710      	adds	r7, #16
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40004400 	.word	0x40004400
 800037c:	20000260 	.word	0x20000260
 8000380:	20000264 	.word	0x20000264
 8000384:	20000198 	.word	0x20000198
 8000388:	6170317a 	.word	0x6170317a
 800038c:	20000268 	.word	0x20000268
 8000390:	61522d7a 	.word	0x61522d7a
 8000394:	20000270 	.word	0x20000270
 8000398:	08004670 	.word	0x08004670

0800039c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d10f      	bne.n	80003cc <HAL_GPIO_EXTI_Callback+0x30>
    {
    	observed = 1;
 80003ac:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <HAL_GPIO_EXTI_Callback+0x38>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	601a      	str	r2, [r3, #0]
    	relay_active = 1;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, relay_active);
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003c8:	f000 ff7e 	bl	80012c8 <HAL_GPIO_WritePin>

    }
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	2000026c 	.word	0x2000026c
 80003d8:	20000270 	.word	0x20000270

080003dc <turn_off_leds>:
	   {.port=GPIOE, .pin=GPIO_PIN_12}, //6: D9
	   {.port=GPIOE, .pin=GPIO_PIN_11}, //7: D7
	   {.port=GPIOE, .pin=GPIO_PIN_10}, //8: D5
}};

void turn_off_leds(){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
	for (int i = 1; i < 9; i++)
 80003e2:	2301      	movs	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	e011      	b.n	800040c <turn_off_leds+0x30>
			HAL_GPIO_WritePin(leds.digit[i-1].port, leds.digit[i-1].pin,0);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	4a0b      	ldr	r2, [pc, #44]	; (800041c <turn_off_leds+0x40>)
 80003ee:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	4a09      	ldr	r2, [pc, #36]	; (800041c <turn_off_leds+0x40>)
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	889b      	ldrh	r3, [r3, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	4619      	mov	r1, r3
 8000402:	f000 ff61 	bl	80012c8 <HAL_GPIO_WritePin>
	for (int i = 1; i < 9; i++)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3301      	adds	r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b08      	cmp	r3, #8
 8000410:	ddea      	ble.n	80003e8 <turn_off_leds+0xc>
}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000008 	.word	0x20000008

08000420 <HAL_TIM_PeriodElapsedCallback>:
uint32_t time_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	if (htim1->Instance == TIM1) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d154      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
		if(pir_active == 0){
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d102      	bne.n	8000440 <HAL_TIM_PeriodElapsedCallback+0x20>
			turn_off_leds();
 800043a:	f7ff ffcf 	bl	80003dc <turn_off_leds>
					HAL_GPIO_TogglePin(leds.digit[i-1].port, leds.digit[i-1].pin);
				time_count = 0;
			}
		}
	}
}
 800043e:	e04d      	b.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
		else if (pir_active == 1 && observed == 1){
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d11c      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x62>
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d118      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x62>
			for (int i = 1; i < 9; i++)
 8000450:	2301      	movs	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	e011      	b.n	800047a <HAL_TIM_PeriodElapsedCallback+0x5a>
					HAL_GPIO_TogglePin(leds.digit[i-1].port, leds.digit[i-1].pin);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3b01      	subs	r3, #1
 800045a:	4a25      	ldr	r2, [pc, #148]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800045c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3b01      	subs	r3, #1
 8000464:	4922      	ldr	r1, [pc, #136]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000466:	00db      	lsls	r3, r3, #3
 8000468:	440b      	add	r3, r1
 800046a:	889b      	ldrh	r3, [r3, #4]
 800046c:	4619      	mov	r1, r3
 800046e:	4610      	mov	r0, r2
 8000470:	f000 ff42 	bl	80012f8 <HAL_GPIO_TogglePin>
			for (int i = 1; i < 9; i++)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b08      	cmp	r3, #8
 800047e:	ddea      	ble.n	8000456 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000480:	e02c      	b.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
		else if (pir_active == 1 && observed == 0){
 8000482:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d128      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d124      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
			time_count +=1;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	4a16      	ldr	r2, [pc, #88]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800049a:	6013      	str	r3, [r2, #0]
			if(time_count == 10){
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b0a      	cmp	r3, #10
 80004a2:	d11b      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
				for (int i = 1; i < 9; i++)
 80004a4:	2301      	movs	r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	e011      	b.n	80004ce <HAL_TIM_PeriodElapsedCallback+0xae>
					HAL_GPIO_TogglePin(leds.digit[i-1].port, leds.digit[i-1].pin);
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	3b01      	subs	r3, #1
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80004b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3b01      	subs	r3, #1
 80004b8:	490d      	ldr	r1, [pc, #52]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	440b      	add	r3, r1
 80004be:	889b      	ldrh	r3, [r3, #4]
 80004c0:	4619      	mov	r1, r3
 80004c2:	4610      	mov	r0, r2
 80004c4:	f000 ff18 	bl	80012f8 <HAL_GPIO_TogglePin>
				for (int i = 1; i < 9; i++)
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	3301      	adds	r3, #1
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	2b08      	cmp	r3, #8
 80004d2:	ddea      	ble.n	80004aa <HAL_TIM_PeriodElapsedCallback+0x8a>
				time_count = 0;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	e7ff      	b.n	80004dc <HAL_TIM_PeriodElapsedCallback+0xbc>
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40012c00 	.word	0x40012c00
 80004e8:	20000268 	.word	0x20000268
 80004ec:	2000026c 	.word	0x2000026c
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000274 	.word	0x20000274

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fbf2 	bl	8000ce4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f810 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f934 	bl	8000770 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f86e 	bl	80005e8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800050c:	f000 f8ac 	bl	8000668 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f8fe 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x28>)
 8000516:	f002 fcc3 	bl	8002ea0 <HAL_TIM_Base_Start_IT>
//	HAL_UART_Receive(&huart2, numbers, NUM_LEN, HAL_MAX_DELAY);
//	uint8_t out[100];
//	uint32_t len_out = sprintf(out, "number {%s} received", numbers);
//	HAL_UART_Transmit(&huart2, out, len_out, HAL_MAX_DELAY);
//	programInit(numbers);
	uart_rx_enable_it();
 800051a:	f7ff fe5f 	bl	80001dc <uart_rx_enable_it>

	while (1) {
 800051e:	e7fe      	b.n	800051e <main+0x26>
 8000520:	200000c4 	.word	0x200000c4

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b09e      	sub	sp, #120	; 0x78
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800052e:	2228      	movs	r2, #40	; 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 f888 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	223c      	movs	r2, #60	; 0x3c
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 f87a 	bl	8004648 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000554:	2303      	movs	r3, #3
 8000556:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000558:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800055c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	2301      	movs	r3, #1
 8000564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000566:	2310      	movs	r3, #16
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000578:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800057e:	4618      	mov	r0, r3
 8000580:	f001 f812 	bl	80015a8 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800058a:	f000 fa09 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f83a 	bl	8002624 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005b6:	f000 f9f3 	bl	80009a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80005ba:	f241 0322 	movw	r3, #4130	; 0x1022
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fa5e 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005da:	f000 f9e1 	bl	80009a0 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3778      	adds	r7, #120	; 0x78
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_I2C1_Init+0x74>)
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_I2C1_Init+0x78>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_I2C1_Init+0x74>)
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_I2C1_Init+0x7c>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_I2C1_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_I2C1_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_I2C1_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C1_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <MX_I2C1_Init+0x74>)
 8000624:	f000 fe9a 	bl	800135c <HAL_I2C_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800062e:	f000 f9b7 	bl	80009a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000632:	2100      	movs	r1, #0
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <MX_I2C1_Init+0x74>)
 8000636:	f000 ff20 	bl	800147a <HAL_I2CEx_ConfigAnalogFilter>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 f9ae 	bl	80009a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000644:	2100      	movs	r1, #0
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_I2C1_Init+0x74>)
 8000648:	f000 ff62 	bl	8001510 <HAL_I2CEx_ConfigDigitalFilter>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000652:	f000 f9a5 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000070 	.word	0x20000070
 8000660:	40005400 	.word	0x40005400
 8000664:	2000090e 	.word	0x2000090e

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_TIM1_Init+0xa0>)
 8000688:	4a20      	ldr	r2, [pc, #128]	; (800070c <MX_TIM1_Init+0xa4>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_TIM1_Init+0xa0>)
 800068e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_TIM1_Init+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_TIM1_Init+0xa0>)
 800069c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b4:	4814      	ldr	r0, [pc, #80]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006b6:	f002 fb9b 	bl	8002df0 <HAL_TIM_Base_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80006c0:	f000 f96e 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006d2:	f002 fd6e 	bl	80031b2 <HAL_TIM_ConfigClockSource>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80006dc:	f000 f960 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM1_Init+0xa0>)
 80006f2:	f002 ff79 	bl	80035e8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006fc:	f000 f950 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000c4 	.word	0x200000c4
 800070c:	40012c00 	.word	0x40012c00

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f002 ffe6 	bl	8003724 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f91f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000110 	.word	0x20000110
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	4b81      	ldr	r3, [pc, #516]	; (800098c <MX_GPIO_Init+0x21c>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a80      	ldr	r2, [pc, #512]	; (800098c <MX_GPIO_Init+0x21c>)
 800078c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000790:	6153      	str	r3, [r2, #20]
 8000792:	4b7e      	ldr	r3, [pc, #504]	; (800098c <MX_GPIO_Init+0x21c>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b7b      	ldr	r3, [pc, #492]	; (800098c <MX_GPIO_Init+0x21c>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a7a      	ldr	r2, [pc, #488]	; (800098c <MX_GPIO_Init+0x21c>)
 80007a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b78      	ldr	r3, [pc, #480]	; (800098c <MX_GPIO_Init+0x21c>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	4b75      	ldr	r3, [pc, #468]	; (800098c <MX_GPIO_Init+0x21c>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a74      	ldr	r2, [pc, #464]	; (800098c <MX_GPIO_Init+0x21c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b72      	ldr	r3, [pc, #456]	; (800098c <MX_GPIO_Init+0x21c>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b6f      	ldr	r3, [pc, #444]	; (800098c <MX_GPIO_Init+0x21c>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a6e      	ldr	r2, [pc, #440]	; (800098c <MX_GPIO_Init+0x21c>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b6c      	ldr	r3, [pc, #432]	; (800098c <MX_GPIO_Init+0x21c>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b69      	ldr	r3, [pc, #420]	; (800098c <MX_GPIO_Init+0x21c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a68      	ldr	r2, [pc, #416]	; (800098c <MX_GPIO_Init+0x21c>)
 80007ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b66      	ldr	r3, [pc, #408]	; (800098c <MX_GPIO_Init+0x21c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	4b63      	ldr	r3, [pc, #396]	; (800098c <MX_GPIO_Init+0x21c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a62      	ldr	r2, [pc, #392]	; (800098c <MX_GPIO_Init+0x21c>)
 8000804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <MX_GPIO_Init+0x21c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000816:	2200      	movs	r2, #0
 8000818:	f64f 7108 	movw	r1, #65288	; 0xff08
 800081c:	485c      	ldr	r0, [pc, #368]	; (8000990 <MX_GPIO_Init+0x220>)
 800081e:	f000 fd53 	bl	80012c8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f240 4114 	movw	r1, #1044	; 0x414
 8000828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082c:	f000 fd4c 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2150      	movs	r1, #80	; 0x50
 8000834:	4857      	ldr	r0, [pc, #348]	; (8000994 <MX_GPIO_Init+0x224>)
 8000836:	f000 fd47 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f242 0105 	movw	r1, #8197	; 0x2005
 8000840:	4855      	ldr	r0, [pc, #340]	; (8000998 <MX_GPIO_Init+0x228>)
 8000842:	f000 fd41 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800084c:	4853      	ldr	r0, [pc, #332]	; (800099c <MX_GPIO_Init+0x22c>)
 800084e:	f000 fd3b 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 8000852:	2324      	movs	r3, #36	; 0x24
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000856:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	484a      	ldr	r0, [pc, #296]	; (8000990 <MX_GPIO_Init+0x220>)
 8000868:	f000 fbb4 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800086c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000870:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4842      	ldr	r0, [pc, #264]	; (8000990 <MX_GPIO_Init+0x220>)
 8000886:	f000 fba5 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f000 fb98 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fb8a 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10;
 80008c0:	f240 4314 	movw	r3, #1044	; 0x414
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f000 fb7a 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80008e0:	23e0      	movs	r3, #224	; 0xe0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f0:	2305      	movs	r3, #5
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f000 fb69 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000902:	2350      	movs	r3, #80	; 0x50
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	481e      	ldr	r0, [pc, #120]	; (8000994 <MX_GPIO_Init+0x224>)
 800091a:	f000 fb5b 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 800091e:	f242 0305 	movw	r3, #8197	; 0x2005
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_GPIO_Init+0x228>)
 8000938:	f000 fb4c 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800093c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0x22c>)
 8000956:	f000 fb3d 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000964:	2302      	movs	r3, #2
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x22c>)
 8000970:	f000 fb30 	bl	8000fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2006      	movs	r0, #6
 800097a:	f000 faf4 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800097e:	2006      	movs	r0, #6
 8000980:	f000 fb0d 	bl	8000f9e <HAL_NVIC_EnableIRQ>

}
 8000984:	bf00      	nop
 8000986:	3730      	adds	r7, #48	; 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	48001000 	.word	0x48001000
 8000994:	48000800 	.word	0x48000800
 8000998:	48000400 	.word	0x48000400
 800099c:	48000c00 	.word	0x48000c00

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009e2:	2007      	movs	r0, #7
 80009e4:	f000 fab4 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x7c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d127      	bne.n	8000a66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a2e:	23c0      	movs	r3, #192	; 0xc0
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a32:	2312      	movs	r3, #18
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a4a:	f000 fac3 	bl	8000fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	; 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400

08000a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <HAL_TIM_Base_MspInit+0x74>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12b      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_TIM_Base_MspInit+0x78>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <HAL_TIM_Base_MspInit+0x78>)
 8000a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_TIM_Base_MspInit+0x78>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2018      	movs	r0, #24
 8000aac:	f000 fa5b 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ab0:	2018      	movs	r0, #24
 8000ab2:	f000 fa74 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2019      	movs	r0, #25
 8000abc:	f000 fa53 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f000 fa6c 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	201a      	movs	r0, #26
 8000acc:	f000 fa4b 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000ad0:	201a      	movs	r0, #26
 8000ad2:	f000 fa64 	bl	8000f9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201b      	movs	r0, #27
 8000adc:	f000 fa43 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ae0:	201b      	movs	r0, #27
 8000ae2:	f000 fa5c 	bl	8000f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40012c00 	.word	0x40012c00
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a25      	ldr	r2, [pc, #148]	; (8000bac <HAL_UART_MspInit+0xb4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d144      	bne.n	8000ba4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a24      	ldr	r2, [pc, #144]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b22      	ldr	r3, [pc, #136]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6153      	str	r3, [r2, #20]
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b54:	6153      	str	r3, [r2, #20]
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_UART_MspInit+0xb8>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b62:	2308      	movs	r3, #8
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b72:	2307      	movs	r3, #7
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f000 fa28 	bl	8000fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b84:	2320      	movs	r3, #32
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_UART_MspInit+0xbc>)
 8000ba0:	f000 fa18 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000c00 	.word	0x48000c00

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8b4 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fb8b 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c22:	f002 f9a7 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000c4 	.word	0x200000c4

08000c30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c36:	f002 f99d 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000c4 	.word	0x200000c4

08000c44 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000c4a:	f002 f993 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000c4 	.word	0x200000c4

08000c58 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_CC_IRQHandler+0x10>)
 8000c5e:	f002 f989 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000c4 	.word	0x200000c4

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fc9f 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cc2:	f7ff fc19 	bl	80004f8 <main>

08000cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cc8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000cd4:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 8000cd8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000cdc:	2000027c 	.word	0x2000027c

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f92b 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe54 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f943 	bl	8000fba <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f90b 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000048 	.word	0x20000048
 8000d68:	20000050 	.word	0x20000050
 8000d6c:	2000004c 	.word	0x2000004c

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000050 	.word	0x20000050
 8000d94:	20000278 	.word	0x20000278

08000d98 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000278 	.word	0x20000278

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	; (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff3e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff31 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e154      	b.n	800128e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8146 	beq.w	8001288 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d005      	beq.n	8001014 <HAL_GPIO_Init+0x40>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 0201 	and.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b03      	cmp	r3, #3
 8001080:	d017      	beq.n	80010b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0203 	and.w	r2, r3, #3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80a0 	beq.w	8001288 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b58      	ldr	r3, [pc, #352]	; (80012ac <HAL_GPIO_Init+0x2d8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a57      	ldr	r2, [pc, #348]	; (80012ac <HAL_GPIO_Init+0x2d8>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b55      	ldr	r3, [pc, #340]	; (80012ac <HAL_GPIO_Init+0x2d8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001160:	4a53      	ldr	r2, [pc, #332]	; (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800118a:	d019      	beq.n	80011c0 <HAL_GPIO_Init+0x1ec>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a49      	ldr	r2, [pc, #292]	; (80012b4 <HAL_GPIO_Init+0x2e0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d013      	beq.n	80011bc <HAL_GPIO_Init+0x1e8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2e4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d00d      	beq.n	80011b8 <HAL_GPIO_Init+0x1e4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a47      	ldr	r2, [pc, #284]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x1e0>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a46      	ldr	r2, [pc, #280]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_GPIO_Init+0x1dc>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e008      	b.n	80011c2 <HAL_GPIO_Init+0x1ee>
 80011b0:	2305      	movs	r3, #5
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x1ee>
 80011b4:	2303      	movs	r3, #3
 80011b6:	e004      	b.n	80011c2 <HAL_GPIO_Init+0x1ee>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e002      	b.n	80011c2 <HAL_GPIO_Init+0x1ee>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <HAL_GPIO_Init+0x1ee>
 80011c0:	2300      	movs	r3, #0
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	f002 0203 	and.w	r2, r2, #3
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	4093      	lsls	r3, r2
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d2:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x2dc>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001204:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800122e:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001258:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001282:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	f47f aea3 	bne.w	8000fe4 <HAL_GPIO_Init+0x10>
  }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010000 	.word	0x40010000
 80012b4:	48000400 	.word	0x48000400
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000c00 	.word	0x48000c00
 80012c0:	48001000 	.word	0x48001000
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43d9      	mvns	r1, r3
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	400b      	ands	r3, r1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f826 	bl	800039c <HAL_GPIO_EXTI_Callback>
  }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e081      	b.n	8001472 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fb36 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d104      	bne.n	80013f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69d9      	ldr	r1, [r3, #28]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b20      	cmp	r3, #32
 800148e:	d138      	bne.n	8001502 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800149a:	2302      	movs	r3, #2
 800149c:	e032      	b.n	8001504 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2224      	movs	r2, #36	; 0x24
 80014aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6819      	ldr	r1, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
  }
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b20      	cmp	r3, #32
 8001524:	d139      	bne.n	800159a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001530:	2302      	movs	r3, #2
 8001532:	e033      	b.n	800159c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001562:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800159a:	2302      	movs	r3, #2
  }
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f001 b823 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 817d 	beq.w	80018de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015e4:	4bbc      	ldr	r3, [pc, #752]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d00c      	beq.n	800160a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f0:	4bb9      	ldr	r3, [pc, #740]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d15c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x10e>
 80015fc:	4bb6      	ldr	r3, [pc, #728]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d155      	bne.n	80016b6 <HAL_RCC_OscConfig+0x10e>
 800160a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800161e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	095b      	lsrs	r3, r3, #5
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d102      	bne.n	800163c <HAL_RCC_OscConfig+0x94>
 8001636:	4ba8      	ldr	r3, [pc, #672]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	e015      	b.n	8001668 <HAL_RCC_OscConfig+0xc0>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001658:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001664:	4b9c      	ldr	r3, [pc, #624]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800166c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001670:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800167c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 811f 	beq.w	80018dc <HAL_RCC_OscConfig+0x334>
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 8116 	bne.w	80018dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f000 bfaf 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x12e>
 80016c8:	4b83      	ldr	r3, [pc, #524]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a82      	ldr	r2, [pc, #520]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e036      	b.n	8001744 <HAL_RCC_OscConfig+0x19c>
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x158>
 80016e6:	4b7c      	ldr	r3, [pc, #496]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a7b      	ldr	r2, [pc, #492]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a78      	ldr	r2, [pc, #480]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80016f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e021      	b.n	8001744 <HAL_RCC_OscConfig+0x19c>
 8001700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001704:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x184>
 8001712:	4b71      	ldr	r3, [pc, #452]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a70      	ldr	r2, [pc, #448]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6d      	ldr	r2, [pc, #436]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x19c>
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a69      	ldr	r2, [pc, #420]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a66      	ldr	r2, [pc, #408]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001744:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	f023 020f 	bic.w	r2, r3, #15
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	495f      	ldr	r1, [pc, #380]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 800175a:	4313      	orrs	r3, r2
 800175c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800175e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d059      	beq.n	8001822 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb13 	bl	8000d98 <HAL_GetTick>
 8001772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	e00a      	b.n	800178e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb0e 	bl	8000d98 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d902      	bls.n	800178e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	f000 bf43 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800179a:	fa93 f3a3 	rbit	r3, r3
 800179e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0x218>
 80017ba:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0x244>
 80017c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80017f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017f8:	fa92 f2a2 	rbit	r2, r2
 80017fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001800:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001804:	fab2 f282 	clz	r2, r2
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f042 0220 	orr.w	r2, r2, #32
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	f002 021f 	and.w	r2, r2, #31
 8001814:	2101      	movs	r1, #1
 8001816:	fa01 f202 	lsl.w	r2, r1, r2
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ab      	beq.n	8001778 <HAL_RCC_OscConfig+0x1d0>
 8001820:	e05d      	b.n	80018de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fab9 	bl	8000d98 <HAL_GetTick>
 8001826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fab4 	bl	8000d98 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d902      	bls.n	8001842 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	f000 bee9 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 8001842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001846:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001856:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_RCC_OscConfig+0x2cc>
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	e015      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f8>
 8001874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001878:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001890:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_RCC_OscConfig+0x330>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018ac:	fa92 f2a2 	rbit	r2, r2
 80018b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018b8:	fab2 f282 	clz	r2, r2
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f042 0220 	orr.w	r2, r2, #32
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f002 021f 	and.w	r2, r2, #31
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ab      	bne.n	800182c <HAL_RCC_OscConfig+0x284>
 80018d4:	e003      	b.n	80018de <HAL_RCC_OscConfig+0x336>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 817d 	beq.w	8001bee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018f4:	4ba6      	ldr	r3, [pc, #664]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00b      	beq.n	8001918 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001900:	4ba3      	ldr	r3, [pc, #652]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d172      	bne.n	80019f2 <HAL_RCC_OscConfig+0x44a>
 800190c:	4ba0      	ldr	r3, [pc, #640]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d16c      	bne.n	80019f2 <HAL_RCC_OscConfig+0x44a>
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800192a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <HAL_RCC_OscConfig+0x3a0>
 8001942:	4b93      	ldr	r3, [pc, #588]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	e013      	b.n	8001970 <HAL_RCC_OscConfig+0x3c8>
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001960:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	2202      	movs	r2, #2
 8001972:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001976:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800197a:	fa92 f2a2 	rbit	r2, r2
 800197e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001982:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001986:	fab2 f282 	clz	r2, r2
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f042 0220 	orr.w	r2, r2, #32
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f002 021f 	and.w	r2, r2, #31
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f202 	lsl.w	r2, r1, r2
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00a      	beq.n	80019b8 <HAL_RCC_OscConfig+0x410>
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d002      	beq.n	80019b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f000 be2e 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	21f8      	movs	r1, #248	; 0xf8
 80019ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019d6:	fa91 f1a1 	rbit	r1, r1
 80019da:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019de:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019e2:	fab1 f181 	clz	r1, r1
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	408b      	lsls	r3, r1
 80019ea:	4969      	ldr	r1, [pc, #420]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f0:	e0fd      	b.n	8001bee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8088 	beq.w	8001b14 <HAL_RCC_OscConfig+0x56c>
 8001a04:	2301      	movs	r3, #1
 8001a06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f9b2 	bl	8000d98 <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f9ad 	bl	8000d98 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d902      	bls.n	8001a50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f000 bde2 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a66:	fab3 f383 	clz	r3, r3
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	e013      	b.n	8001aa8 <HAL_RCC_OscConfig+0x500>
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ab2:	fa92 f2a2 	rbit	r2, r2
 8001ab6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001aba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001abe:	fab2 f282 	clz	r2, r2
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f042 0220 	orr.w	r2, r2, #32
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0af      	beq.n	8001a3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	21f8      	movs	r1, #248	; 0xf8
 8001af0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001af8:	fa91 f1a1 	rbit	r1, r1
 8001afc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001b00:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001b04:	fab1 f181 	clz	r1, r1
 8001b08:	b2c9      	uxtb	r1, r1
 8001b0a:	408b      	lsls	r3, r1
 8001b0c:	4920      	ldr	r1, [pc, #128]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
 8001b12:	e06c      	b.n	8001bee <HAL_RCC_OscConfig+0x646>
 8001b14:	2301      	movs	r3, #1
 8001b16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f92a 	bl	8000d98 <HAL_GetTick>
 8001b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f925 	bl	8000d98 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d902      	bls.n	8001b60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f000 bd5a 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d104      	bne.n	8001b94 <HAL_RCC_OscConfig+0x5ec>
 8001b8a:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <HAL_RCC_OscConfig+0x5e8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e015      	b.n	8001bbc <HAL_RCC_OscConfig+0x614>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001bac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bb0:	fa93 f3a3 	rbit	r3, r3
 8001bb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001bb8:	4bc8      	ldr	r3, [pc, #800]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bc6:	fa92 f2a2 	rbit	r2, r2
 8001bca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bd2:	fab2 f282 	clz	r2, r2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	f042 0220 	orr.w	r2, r2, #32
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	f002 021f 	and.w	r2, r2, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f202 	lsl.w	r2, r1, r2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ad      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8110 	beq.w	8001e24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d079      	beq.n	8001d08 <HAL_RCC_OscConfig+0x760>
 8001c14:	2301      	movs	r3, #1
 8001c16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4bab      	ldr	r3, [pc, #684]	; (8001ee0 <HAL_RCC_OscConfig+0x938>)
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f8ab 	bl	8000d98 <HAL_GetTick>
 8001c42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff f8a6 	bl	8000d98 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d902      	bls.n	8001c5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f000 bcdb 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c78:	2202      	movs	r2, #2
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	fa93 f2a3 	rbit	r2, r3
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	4b88      	ldr	r3, [pc, #544]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	6019      	str	r1, [r3, #0]
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	fa93 f1a3 	rbit	r1, r3
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cde:	6019      	str	r1, [r3, #0]
  return result;
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0a0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x6a0>
 8001d06:	e08d      	b.n	8001e24 <HAL_RCC_OscConfig+0x87c>
 8001d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d2a:	601a      	str	r2, [r3, #0]
  return result;
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x938>)
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	461a      	mov	r2, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f825 	bl	8000d98 <HAL_GetTick>
 8001d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d54:	f7ff f820 	bl	8000d98 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d902      	bls.n	8001d6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	f000 bc55 	b.w	8002614 <HAL_RCC_OscConfig+0x106c>
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001d96:	2202      	movs	r2, #2
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fa93 f2a3 	rbit	r2, r3
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dba:	2202      	movs	r2, #2
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de2:	2102      	movs	r1, #2
 8001de4:	6019      	str	r1, [r3, #0]
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f1a3 	rbit	r1, r3
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001dfc:	6019      	str	r1, [r3, #0]
  return result;
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d197      	bne.n	8001d54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 81a1 	beq.w	800217c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e40:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e56:	61d3      	str	r3, [r2, #28]
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001e72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_RCC_OscConfig+0x93c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d11a      	bne.n	8001ebc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_RCC_OscConfig+0x93c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_RCC_OscConfig+0x93c>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff81 	bl	8000d98 <HAL_GetTick>
 8001e96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9a:	e009      	b.n	8001eb0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9c:	f7fe ff7c 	bl	8000d98 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e3b1      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCC_OscConfig+0x93c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x940>
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a02      	ldr	r2, [pc, #8]	; (8001edc <HAL_RCC_OscConfig+0x934>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e03c      	b.n	8001f54 <HAL_RCC_OscConfig+0x9ac>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	10908120 	.word	0x10908120
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x96a>
 8001ef8:	4bc1      	ldr	r3, [pc, #772]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4ac0      	ldr	r2, [pc, #768]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4bbe      	ldr	r3, [pc, #760]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4abd      	ldr	r2, [pc, #756]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f0a:	f023 0304 	bic.w	r3, r3, #4
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e020      	b.n	8001f54 <HAL_RCC_OscConfig+0x9ac>
 8001f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x994>
 8001f22:	4bb7      	ldr	r3, [pc, #732]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4ab6      	ldr	r2, [pc, #728]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4bb4      	ldr	r3, [pc, #720]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4ab3      	ldr	r2, [pc, #716]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0x9ac>
 8001f3c:	4bb0      	ldr	r3, [pc, #704]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4aaf      	ldr	r2, [pc, #700]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	4bad      	ldr	r3, [pc, #692]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4aac      	ldr	r2, [pc, #688]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 8081 	beq.w	8002068 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ff17 	bl	8000d98 <HAL_GetTick>
 8001f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6e:	e00b      	b.n	8001f88 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7fe ff12 	bl	8000d98 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e345      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fce:	601a      	str	r2, [r3, #0]
  return result;
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001fd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d102      	bne.n	8001ff4 <HAL_RCC_OscConfig+0xa4c>
 8001fee:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	e013      	b.n	800201c <HAL_RCC_OscConfig+0xa74>
 8001ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002004:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	4b79      	ldr	r3, [pc, #484]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002020:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002024:	2102      	movs	r1, #2
 8002026:	6011      	str	r1, [r2, #0]
 8002028:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800202c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	fa92 f1a2 	rbit	r1, r2
 8002036:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800203a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800203e:	6011      	str	r1, [r2, #0]
  return result;
 8002040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002044:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d084      	beq.n	8001f70 <HAL_RCC_OscConfig+0x9c8>
 8002066:	e07f      	b.n	8002168 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7fe fe96 	bl	8000d98 <HAL_GetTick>
 800206c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002070:	e00b      	b.n	800208a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe fe91 	bl	8000d98 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e2c4      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002092:	2202      	movs	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fa93 f2a3 	rbit	r2, r3
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020d0:	601a      	str	r2, [r3, #0]
  return result;
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80020da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_OscConfig+0xb4e>
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	e013      	b.n	800211e <HAL_RCC_OscConfig+0xb76>
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80020fe:	2202      	movs	r2, #2
 8002100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002106:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002122:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002126:	2102      	movs	r1, #2
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800212e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	fa92 f1a2 	rbit	r1, r2
 8002138:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800213c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002140:	6011      	str	r1, [r2, #0]
  return result;
 8002142:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002146:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d184      	bne.n	8002072 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002168:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8242 	beq.w	8002612 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_RCC_OscConfig+0xc58>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	f000 8213 	beq.w	80025c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	f040 8162 	bne.w	8002472 <HAL_RCC_OscConfig+0xeca>
 80021ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021d2:	601a      	str	r2, [r3, #0]
  return result;
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80021dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fdd0 	bl	8000d98 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fc:	e00c      	b.n	8002218 <HAL_RCC_OscConfig+0xc70>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fdc8 	bl	8000d98 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1fd      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
 8002218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002238:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800223c:	601a      	str	r2, [r3, #0]
  return result;
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002246:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_RCC_OscConfig+0xcba>
 800225c:	4bb0      	ldr	r3, [pc, #704]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e027      	b.n	80022b2 <HAL_RCC_OscConfig+0xd0a>
 8002262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002266:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800226a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002290:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fa93 f2a3 	rbit	r2, r3
 80022a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	4b9c      	ldr	r3, [pc, #624]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022be:	6011      	str	r1, [r2, #0]
 80022c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	fa92 f1a2 	rbit	r1, r2
 80022ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022d6:	6011      	str	r1, [r2, #0]
  return result;
 80022d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	fab2 f282 	clz	r2, r2
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f042 0220 	orr.w	r2, r2, #32
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f002 021f 	and.w	r2, r2, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d182      	bne.n	8002204 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	430b      	orrs	r3, r1
 8002320:	497f      	ldr	r1, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800232e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002338:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002346:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800234a:	601a      	str	r2, [r3, #0]
  return result;
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002354:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002360:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	461a      	mov	r2, r3
 8002368:	2301      	movs	r3, #1
 800236a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236c:	f7fe fd14 	bl	8000d98 <HAL_GetTick>
 8002370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	e009      	b.n	800238a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fd0f 	bl	8000d98 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e144      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023ae:	601a      	str	r2, [r3, #0]
  return result;
 80023b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80023b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe2c>
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e027      	b.n	8002424 <HAL_RCC_OscConfig+0xe7c>
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002402:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002428:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800242c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002430:	6011      	str	r1, [r2, #0]
 8002432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002436:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	fa92 f1a2 	rbit	r1, r2
 8002440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002444:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002448:	6011      	str	r1, [r2, #0]
  return result;
 800244a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	fab2 f282 	clz	r2, r2
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	f002 021f 	and.w	r2, r2, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d082      	beq.n	8002376 <HAL_RCC_OscConfig+0xdce>
 8002470:	e0cf      	b.n	8002612 <HAL_RCC_OscConfig+0x106a>
 8002472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002476:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800247a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800247e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002496:	601a      	str	r2, [r3, #0]
  return result;
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80024a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fc6e 	bl	8000d98 <HAL_GetTick>
 80024bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe fc69 	bl	8000d98 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e09e      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
 80024d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002504:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d104      	bne.n	8002524 <HAL_RCC_OscConfig+0xf7c>
 800251a:	4b01      	ldr	r3, [pc, #4]	; (8002520 <HAL_RCC_OscConfig+0xf78>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	e029      	b.n	8002574 <HAL_RCC_OscConfig+0xfcc>
 8002520:	40021000 	.word	0x40021000
 8002524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002528:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800252c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002536:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002544:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fa93 f2a3 	rbit	r2, r3
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x1078>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002578:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800257c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002580:	6011      	str	r1, [r2, #0]
 8002582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002586:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fa92 f1a2 	rbit	r1, r2
 8002590:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002594:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002598:	6011      	str	r1, [r2, #0]
  return result;
 800259a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	fab2 f282 	clz	r2, r2
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f042 0220 	orr.w	r2, r2, #32
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f002 021f 	and.w	r2, r2, #31
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d180      	bne.n	80024c2 <HAL_RCC_OscConfig+0xf1a>
 80025c0:	e027      	b.n	8002612 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e01e      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x1078>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d10b      	bne.n	800260e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b09e      	sub	sp, #120	; 0x78
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e162      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b90      	ldr	r3, [pc, #576]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d910      	bls.n	800266c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	498b      	ldr	r1, [pc, #556]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b89      	ldr	r3, [pc, #548]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e14a      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	497f      	ldr	r1, [pc, #508]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80dc 	beq.w	8002850 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d13c      	bne.n	800271a <HAL_RCC_ClockConfig+0xf6>
 80026a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_ClockConfig+0xa6>
 80026c4:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	e00f      	b.n	80026ea <HAL_RCC_ClockConfig+0xc6>
 80026ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	667b      	str	r3, [r7, #100]	; 0x64
 80026d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026dc:	663b      	str	r3, [r7, #96]	; 0x60
 80026de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f2:	fa92 f2a2 	rbit	r2, r2
 80026f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 021f 	and.w	r2, r2, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d17b      	bne.n	800280e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0f3      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d13c      	bne.n	800279c <HAL_RCC_ClockConfig+0x178>
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_RCC_ClockConfig+0x128>
 8002746:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e00f      	b.n	800276c <HAL_RCC_ClockConfig+0x148>
 800274c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002750:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002754:	fa93 f3a3 	rbit	r3, r3
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
 800275a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	63ba      	str	r2, [r7, #56]	; 0x38
 8002772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800277a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d13a      	bne.n	800280e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0b2      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
 800279c:	2302      	movs	r3, #2
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x1a0>
 80027be:	4b31      	ldr	r3, [pc, #196]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e00d      	b.n	80027e0 <HAL_RCC_ClockConfig+0x1bc>
 80027c4:	2302      	movs	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2202      	movs	r2, #2
 80027e2:	61ba      	str	r2, [r7, #24]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	617a      	str	r2, [r7, #20]
  return result;
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e079      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0203 	bic.w	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002820:	f7fe faba 	bl	8000d98 <HAL_GetTick>
 8002824:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002826:	e00a      	b.n	800283e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002828:	f7fe fab6 	bl	8000d98 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e061      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_ClockConfig+0x260>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 020c 	and.w	r2, r3, #12
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	429a      	cmp	r2, r3
 800284e:	d1eb      	bne.n	8002828 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d214      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 0207 	bic.w	r2, r3, #7
 8002866:	4906      	ldr	r1, [pc, #24]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_ClockConfig+0x25c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e040      	b.n	8002902 <HAL_RCC_ClockConfig+0x2de>
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_RCC_ClockConfig+0x2e8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	491a      	ldr	r1, [pc, #104]	; (800290c <HAL_RCC_ClockConfig+0x2e8>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCC_ClockConfig+0x2e8>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4912      	ldr	r1, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x2e8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028c6:	f000 f829 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028ca:	4601      	mov	r1, r0
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_RCC_ClockConfig+0x2e8>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d4:	22f0      	movs	r2, #240	; 0xf0
 80028d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	60fa      	str	r2, [r7, #12]
  return result;
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	40d3      	lsrs	r3, r2
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x2ec>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	fa21 f303 	lsr.w	r3, r1, r3
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_RCC_ClockConfig+0x2f0>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_RCC_ClockConfig+0x2f4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fa08 	bl	8000d10 <HAL_InitTick>
  
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3778      	adds	r7, #120	; 0x78
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	08004680 	.word	0x08004680
 8002914:	20000048 	.word	0x20000048
 8002918:	2000004c 	.word	0x2000004c

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002936:	4b29      	ldr	r3, [pc, #164]	; (80029dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x30>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x36>
 800294a:	e03c      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294c:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800294e:	623b      	str	r3, [r7, #32]
      break;
 8002950:	e03c      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002958:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800295c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	fa92 f2a2 	rbit	r2, r2
 8002964:	607a      	str	r2, [r7, #4]
  return result;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	fab2 f282 	clz	r2, r2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	40d3      	lsrs	r3, r2
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	220f      	movs	r2, #15
 8002980:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	fa92 f2a2 	rbit	r2, r2
 8002988:	60fa      	str	r2, [r7, #12]
  return result;
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	fab2 f282 	clz	r2, r2
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	40d3      	lsrs	r3, r2
 8002994:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a4:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	e004      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	623b      	str	r3, [r7, #32]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029c8:	623b      	str	r3, [r7, #32]
      break;
 80029ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029cc:	6a3b      	ldr	r3, [r7, #32]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	372c      	adds	r7, #44	; 0x2c
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	007a1200 	.word	0x007a1200
 80029e4:	08004698 	.word	0x08004698
 80029e8:	080046a8 	.word	0x080046a8
 80029ec:	003d0900 	.word	0x003d0900

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000048 	.word	0x20000048

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a0e:	f7ff ffef 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a12:	4601      	mov	r1, r0
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	fa92 f2a2 	rbit	r2, r2
 8002a28:	603a      	str	r2, [r7, #0]
  return result;
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	40d3      	lsrs	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08004690 	.word	0x08004690

08002a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a52:	f7ff ffcd 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a56:	4601      	mov	r1, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	603a      	str	r2, [r7, #0]
  return result;
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	40d3      	lsrs	r3, r2
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08004690 	.word	0x08004690

08002a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b092      	sub	sp, #72	; 0x48
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80d4 	beq.w	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab4:	4b4e      	ldr	r3, [pc, #312]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10e      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	4a4a      	ldr	r2, [pc, #296]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	61d3      	str	r3, [r2, #28]
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a41      	ldr	r2, [pc, #260]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe f94f 	bl	8000d98 <HAL_GetTick>
 8002afa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe f94b 	bl	8000d98 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e169      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b38      	ldr	r3, [pc, #224]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1c:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8084 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d07c      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	461a      	mov	r2, r3
 8002b66:	2301      	movs	r3, #1
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b8e:	4a18      	ldr	r2, [pc, #96]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04b      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe f8fb 	bl	8000d98 <HAL_GetTick>
 8002ba2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe f8f7 	bl	8000d98 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e113      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	f043 0302 	orr.w	r3, r3, #2
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d108      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bea:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	e00d      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	10908100 	.word	0x10908100
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	4b78      	ldr	r3, [pc, #480]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	613a      	str	r2, [r7, #16]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	fa92 f2a2 	rbit	r2, r2
 8002c16:	60fa      	str	r2, [r7, #12]
  return result;
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	fab2 f282 	clz	r2, r2
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	f002 021f 	and.w	r2, r2, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0b7      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c36:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	496a      	ldr	r1, [pc, #424]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c68:	4b60      	ldr	r3, [pc, #384]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f023 0203 	bic.w	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	495d      	ldr	r1, [pc, #372]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c86:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4956      	ldr	r1, [pc, #344]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	494e      	ldr	r1, [pc, #312]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f023 0210 	bic.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4947      	ldr	r1, [pc, #284]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ce0:	4b42      	ldr	r3, [pc, #264]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cec:	493f      	ldr	r1, [pc, #252]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f023 0220 	bic.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	4938      	ldr	r1, [pc, #224]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d1c:	4b33      	ldr	r3, [pc, #204]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4930      	ldr	r1, [pc, #192]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4929      	ldr	r1, [pc, #164]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	4921      	ldr	r1, [pc, #132]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d008      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	491a      	ldr	r1, [pc, #104]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	4912      	ldr	r1, [pc, #72]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	490b      	ldr	r1, [pc, #44]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	4903      	ldr	r1, [pc, #12]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3748      	adds	r7, #72	; 0x48
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e049      	b.n	8002e96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fd fe30 	bl	8000a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 fab0 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04a      	b.n	8002f4e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d018      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x6c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d013      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x6c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_TIM_Base_Start_IT+0xc0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x6c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1c      	ldr	r2, [pc, #112]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x6c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_Base_Start_IT+0x6c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a19      	ldr	r2, [pc, #100]	; (8002f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d115      	bne.n	8002f38 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d015      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0xaa>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d011      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	e008      	b.n	8002f4a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	00010007 	.word	0x00010007

08002f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0202 	mvn.w	r2, #2
 8002fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9ce 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f9c0 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f9d1 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0204 	mvn.w	r2, #4
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f9a4 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f996 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f9a7 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b08      	cmp	r3, #8
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0208 	mvn.w	r2, #8
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2204      	movs	r2, #4
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f97a 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f96c 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f97d 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b10      	cmp	r3, #16
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0210 	mvn.w	r2, #16
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2208      	movs	r2, #8
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f950 	bl	8003358 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f942 	bl	8003344 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f953 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0201 	mvn.w	r2, #1
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fd f994 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d10e      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d107      	bne.n	8003124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 faec 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003132:	d10e      	bne.n	8003152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d107      	bne.n	8003152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800314a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fadf 	bl	8003710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d10e      	bne.n	800317e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b40      	cmp	r3, #64	; 0x40
 800316c:	d107      	bne.n	800317e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f901 	bl	8003380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d10e      	bne.n	80031aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b20      	cmp	r3, #32
 8003198:	d107      	bne.n	80031aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0220 	mvn.w	r2, #32
 80031a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fa9f 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_ConfigClockSource+0x1c>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0b6      	b.n	800333c <HAL_TIM_ConfigClockSource+0x18a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2202      	movs	r2, #2
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	d03e      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xd8>
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	f200 8087 	bhi.w	8003322 <HAL_TIM_ConfigClockSource+0x170>
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	f000 8086 	beq.w	8003328 <HAL_TIM_ConfigClockSource+0x176>
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	d87f      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 8003222:	2b70      	cmp	r3, #112	; 0x70
 8003224:	d01a      	beq.n	800325c <HAL_TIM_ConfigClockSource+0xaa>
 8003226:	2b70      	cmp	r3, #112	; 0x70
 8003228:	d87b      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 800322a:	2b60      	cmp	r3, #96	; 0x60
 800322c:	d050      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0x11e>
 800322e:	2b60      	cmp	r3, #96	; 0x60
 8003230:	d877      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 8003232:	2b50      	cmp	r3, #80	; 0x50
 8003234:	d03c      	beq.n	80032b0 <HAL_TIM_ConfigClockSource+0xfe>
 8003236:	2b50      	cmp	r3, #80	; 0x50
 8003238:	d873      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d058      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0x13e>
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d86f      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 8003242:	2b30      	cmp	r3, #48	; 0x30
 8003244:	d064      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x15e>
 8003246:	2b30      	cmp	r3, #48	; 0x30
 8003248:	d86b      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 800324a:	2b20      	cmp	r3, #32
 800324c:	d060      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x15e>
 800324e:	2b20      	cmp	r3, #32
 8003250:	d867      	bhi.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d05c      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x15e>
 8003256:	2b10      	cmp	r3, #16
 8003258:	d05a      	beq.n	8003310 <HAL_TIM_ConfigClockSource+0x15e>
 800325a:	e062      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6899      	ldr	r1, [r3, #8]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f000 f99c 	bl	80035a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800327e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]
      break;
 8003288:	e04f      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6899      	ldr	r1, [r3, #8]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f000 f985 	bl	80035a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ac:	609a      	str	r2, [r3, #8]
      break;
 80032ae:	e03c      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	461a      	mov	r2, r3
 80032be:	f000 f8f9 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2150      	movs	r1, #80	; 0x50
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f952 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032ce:	e02c      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	461a      	mov	r2, r3
 80032de:	f000 f918 	bl	8003512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2160      	movs	r1, #96	; 0x60
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f942 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 80032ee:	e01c      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 f8d9 	bl	80034b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2140      	movs	r1, #64	; 0x40
 8003308:	4618      	mov	r0, r3
 800330a:	f000 f932 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 800330e:	e00c      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 f929 	bl	8003572 <TIM_ITRx_SetConfig>
      break;
 8003320:	e003      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
      break;
 8003326:	e000      	b.n	800332a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003328:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <TIM_Base_SetConfig+0x104>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a39      	ldr	r2, [pc, #228]	; (800349c <TIM_Base_SetConfig+0x108>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a38      	ldr	r2, [pc, #224]	; (80034a0 <TIM_Base_SetConfig+0x10c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <TIM_Base_SetConfig+0x110>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2d      	ldr	r2, [pc, #180]	; (8003498 <TIM_Base_SetConfig+0x104>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d017      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2a      	ldr	r2, [pc, #168]	; (800349c <TIM_Base_SetConfig+0x108>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <TIM_Base_SetConfig+0x10c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00f      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a28      	ldr	r2, [pc, #160]	; (80034a4 <TIM_Base_SetConfig+0x110>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <TIM_Base_SetConfig+0x118>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_Base_SetConfig+0x11c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a10      	ldr	r2, [pc, #64]	; (8003498 <TIM_Base_SetConfig+0x104>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00f      	beq.n	800347c <TIM_Base_SetConfig+0xe8>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <TIM_Base_SetConfig+0x110>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0xe8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0xe8>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <TIM_Base_SetConfig+0x118>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0xe8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <TIM_Base_SetConfig+0x11c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d103      	bne.n	8003484 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	615a      	str	r2, [r3, #20]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0210 	bic.w	r2, r3, #16
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800353c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800354e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003572:	b480      	push	{r7}
 8003574:	b085      	sub	sp, #20
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	f043 0307 	orr.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	021a      	lsls	r2, r3, #8
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	609a      	str	r2, [r3, #8]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e063      	b.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2b      	ldr	r2, [pc, #172]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2a      	ldr	r2, [pc, #168]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800363a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d013      	beq.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a17      	ldr	r2, [pc, #92]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10c      	bne.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e040      	b.n	80037b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f9d6 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f906 	bl	8003974 <UART_SetConfig>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e022      	b.n	80037b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 face 	bl	8003d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fb55 	bl	8003e60 <UART_CheckIdleState>
 80037b6:	4603      	mov	r3, r0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d178      	bne.n	80038ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Transmit+0x24>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e071      	b.n	80038cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2221      	movs	r2, #33	; 0x21
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f6:	f7fd facf 	bl	8000d98 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d108      	bne.n	8003828 <HAL_UART_Transmit+0x68>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003830:	e030      	b.n	8003894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fbb7 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e03c      	b.n	80038cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003864:	b292      	uxth	r2, r2
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	3302      	adds	r3, #2
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e008      	b.n	8003882 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b292      	uxth	r2, r2
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1c8      	bne.n	8003832 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fb80 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e005      	b.n	80038cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d132      	bne.n	8003952 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UART_Receive_IT+0x24>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e02b      	b.n	8003954 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d018      	beq.n	8003942 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	623b      	str	r3, [r7, #32]
 8003930:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	69f9      	ldr	r1, [r7, #28]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	61bb      	str	r3, [r7, #24]
   return(result);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e6      	bne.n	8003910 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	461a      	mov	r2, r3
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fb99 	bl	8004080 <UART_Start_Receive_IT>
 800394e:	4603      	mov	r3, r0
 8003950:	e000      	b.n	8003954 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039a2:	f023 030c 	bic.w	r3, r3, #12
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4aa7      	ldr	r2, [pc, #668]	; (8003c8c <UART_SetConfig+0x318>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <UART_SetConfig+0xc2>
 80039f4:	4ba6      	ldr	r3, [pc, #664]	; (8003c90 <UART_SetConfig+0x31c>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d817      	bhi.n	8003a30 <UART_SetConfig+0xbc>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0x94>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a19 	.word	0x08003a19
 8003a0c:	08003a25 	.word	0x08003a25
 8003a10:	08003a2b 	.word	0x08003a2b
 8003a14:	08003a1f 	.word	0x08003a1f
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e0b5      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e0b2      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a24:	2304      	movs	r3, #4
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0af      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0ac      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a30:	2310      	movs	r3, #16
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0a9      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a96      	ldr	r2, [pc, #600]	; (8003c94 <UART_SetConfig+0x320>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d124      	bne.n	8003a8a <UART_SetConfig+0x116>
 8003a40:	4b93      	ldr	r3, [pc, #588]	; (8003c90 <UART_SetConfig+0x31c>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a4c:	d011      	beq.n	8003a72 <UART_SetConfig+0xfe>
 8003a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a52:	d817      	bhi.n	8003a84 <UART_SetConfig+0x110>
 8003a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a58:	d011      	beq.n	8003a7e <UART_SetConfig+0x10a>
 8003a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5e:	d811      	bhi.n	8003a84 <UART_SetConfig+0x110>
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <UART_SetConfig+0xf8>
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d006      	beq.n	8003a78 <UART_SetConfig+0x104>
 8003a6a:	e00b      	b.n	8003a84 <UART_SetConfig+0x110>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e08b      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a72:	2302      	movs	r3, #2
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e088      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e085      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e082      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a84:	2310      	movs	r3, #16
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e07f      	b.n	8003b8a <UART_SetConfig+0x216>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a82      	ldr	r2, [pc, #520]	; (8003c98 <UART_SetConfig+0x324>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d124      	bne.n	8003ade <UART_SetConfig+0x16a>
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <UART_SetConfig+0x31c>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003aa0:	d011      	beq.n	8003ac6 <UART_SetConfig+0x152>
 8003aa2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003aa6:	d817      	bhi.n	8003ad8 <UART_SetConfig+0x164>
 8003aa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aac:	d011      	beq.n	8003ad2 <UART_SetConfig+0x15e>
 8003aae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ab2:	d811      	bhi.n	8003ad8 <UART_SetConfig+0x164>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <UART_SetConfig+0x14c>
 8003ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003abc:	d006      	beq.n	8003acc <UART_SetConfig+0x158>
 8003abe:	e00b      	b.n	8003ad8 <UART_SetConfig+0x164>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e061      	b.n	8003b8a <UART_SetConfig+0x216>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e05e      	b.n	8003b8a <UART_SetConfig+0x216>
 8003acc:	2304      	movs	r3, #4
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e05b      	b.n	8003b8a <UART_SetConfig+0x216>
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e058      	b.n	8003b8a <UART_SetConfig+0x216>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e055      	b.n	8003b8a <UART_SetConfig+0x216>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <UART_SetConfig+0x328>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d124      	bne.n	8003b32 <UART_SetConfig+0x1be>
 8003ae8:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <UART_SetConfig+0x31c>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003af4:	d011      	beq.n	8003b1a <UART_SetConfig+0x1a6>
 8003af6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003afa:	d817      	bhi.n	8003b2c <UART_SetConfig+0x1b8>
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b00:	d011      	beq.n	8003b26 <UART_SetConfig+0x1b2>
 8003b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b06:	d811      	bhi.n	8003b2c <UART_SetConfig+0x1b8>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <UART_SetConfig+0x1a0>
 8003b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b10:	d006      	beq.n	8003b20 <UART_SetConfig+0x1ac>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x1b8>
 8003b14:	2300      	movs	r3, #0
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e037      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e034      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b20:	2304      	movs	r3, #4
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e031      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b26:	2308      	movs	r3, #8
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e02e      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e02b      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a5a      	ldr	r2, [pc, #360]	; (8003ca0 <UART_SetConfig+0x32c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d124      	bne.n	8003b86 <UART_SetConfig+0x212>
 8003b3c:	4b54      	ldr	r3, [pc, #336]	; (8003c90 <UART_SetConfig+0x31c>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003b44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b48:	d011      	beq.n	8003b6e <UART_SetConfig+0x1fa>
 8003b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b4e:	d817      	bhi.n	8003b80 <UART_SetConfig+0x20c>
 8003b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b54:	d011      	beq.n	8003b7a <UART_SetConfig+0x206>
 8003b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b5a:	d811      	bhi.n	8003b80 <UART_SetConfig+0x20c>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <UART_SetConfig+0x1f4>
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d006      	beq.n	8003b74 <UART_SetConfig+0x200>
 8003b66:	e00b      	b.n	8003b80 <UART_SetConfig+0x20c>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e00d      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e00a      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b74:	2304      	movs	r3, #4
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e007      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b7a:	2308      	movs	r3, #8
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e004      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b80:	2310      	movs	r3, #16
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e001      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b86:	2310      	movs	r3, #16
 8003b88:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b92:	d15b      	bne.n	8003c4c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003b94:	7ffb      	ldrb	r3, [r7, #31]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d827      	bhi.n	8003bea <UART_SetConfig+0x276>
 8003b9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <UART_SetConfig+0x22c>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bc5 	.word	0x08003bc5
 8003ba4:	08003bcd 	.word	0x08003bcd
 8003ba8:	08003bd5 	.word	0x08003bd5
 8003bac:	08003beb 	.word	0x08003beb
 8003bb0:	08003bdb 	.word	0x08003bdb
 8003bb4:	08003beb 	.word	0x08003beb
 8003bb8:	08003beb 	.word	0x08003beb
 8003bbc:	08003beb 	.word	0x08003beb
 8003bc0:	08003be3 	.word	0x08003be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc4:	f7fe ff20 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8003bc8:	61b8      	str	r0, [r7, #24]
        break;
 8003bca:	e013      	b.n	8003bf4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bcc:	f7fe ff3e 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8003bd0:	61b8      	str	r0, [r7, #24]
        break;
 8003bd2:	e00f      	b.n	8003bf4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd4:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <UART_SetConfig+0x330>)
 8003bd6:	61bb      	str	r3, [r7, #24]
        break;
 8003bd8:	e00c      	b.n	8003bf4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bda:	f7fe fe9f 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003bde:	61b8      	str	r0, [r7, #24]
        break;
 8003be0:	e008      	b.n	8003bf4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be6:	61bb      	str	r3, [r7, #24]
        break;
 8003be8:	e004      	b.n	8003bf4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8082 	beq.w	8003d00 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	005a      	lsls	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d916      	bls.n	8003c46 <UART_SetConfig+0x2d2>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d212      	bcs.n	8003c46 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	89fb      	ldrh	r3, [r7, #14]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	89fa      	ldrh	r2, [r7, #14]
 8003c42:	60da      	str	r2, [r3, #12]
 8003c44:	e05c      	b.n	8003d00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	77bb      	strb	r3, [r7, #30]
 8003c4a:	e059      	b.n	8003d00 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c4c:	7ffb      	ldrb	r3, [r7, #31]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d835      	bhi.n	8003cbe <UART_SetConfig+0x34a>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x2e4>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003ca9 	.word	0x08003ca9
 8003c64:	08003cbf 	.word	0x08003cbf
 8003c68:	08003caf 	.word	0x08003caf
 8003c6c:	08003cbf 	.word	0x08003cbf
 8003c70:	08003cbf 	.word	0x08003cbf
 8003c74:	08003cbf 	.word	0x08003cbf
 8003c78:	08003cb7 	.word	0x08003cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fec4 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 8003c80:	61b8      	str	r0, [r7, #24]
        break;
 8003c82:	e021      	b.n	8003cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fee2 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8003c88:	61b8      	str	r0, [r7, #24]
        break;
 8003c8a:	e01d      	b.n	8003cc8 <UART_SetConfig+0x354>
 8003c8c:	40013800 	.word	0x40013800
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40004400 	.word	0x40004400
 8003c98:	40004800 	.word	0x40004800
 8003c9c:	40004c00 	.word	0x40004c00
 8003ca0:	40005000 	.word	0x40005000
 8003ca4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <UART_SetConfig+0x3a4>)
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e00c      	b.n	8003cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cae:	f7fe fe35 	bl	800291c <HAL_RCC_GetSysClockFreq>
 8003cb2:	61b8      	str	r0, [r7, #24]
        break;
 8003cb4:	e008      	b.n	8003cc8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cba:	61bb      	str	r3, [r7, #24]
        break;
 8003cbc:	e004      	b.n	8003cc8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8003cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	085a      	lsrs	r2, r3, #1
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	441a      	add	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b0f      	cmp	r3, #15
 8003ce6:	d909      	bls.n	8003cfc <UART_SetConfig+0x388>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cee:	d205      	bcs.n	8003cfc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e001      	b.n	8003d00 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01a      	beq.n	8003e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d10a      	bne.n	8003e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	605a      	str	r2, [r3, #4]
  }
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b098      	sub	sp, #96	; 0x60
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e70:	f7fc ff92 	bl	8000d98 <HAL_GetTick>
 8003e74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d12e      	bne.n	8003ee2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f88c 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d021      	beq.n	8003ee2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e6      	bne.n	8003e9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e062      	b.n	8003fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d149      	bne.n	8003f84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f856 	bl	8003fb0 <UART_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03c      	beq.n	8003f84 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	623b      	str	r3, [r7, #32]
   return(result);
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e6      	bne.n	8003f0a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e011      	b.n	8003fa8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3758      	adds	r7, #88	; 0x58
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	e049      	b.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d045      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fc fee5 	bl	8000d98 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e048      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d031      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d110      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2208      	movs	r2, #8
 8004006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f8ed 	bl	80041e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2208      	movs	r2, #8
 8004012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e029      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004030:	d111      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f8d3 	bl	80041e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e00f      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d0a6      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b097      	sub	sp, #92	; 0x5c
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d10e      	bne.n	80040d2 <UART_Start_Receive_IT+0x52>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <UART_Start_Receive_IT+0x48>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c6:	e01a      	b.n	80040fe <UART_Start_Receive_IT+0x7e>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d0:	e015      	b.n	80040fe <UART_Start_Receive_IT+0x7e>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <UART_Start_Receive_IT+0x76>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <UART_Start_Receive_IT+0x6c>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	22ff      	movs	r2, #255	; 0xff
 80040e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ea:	e008      	b.n	80040fe <UART_Start_Receive_IT+0x7e>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	227f      	movs	r2, #127	; 0x7f
 80040f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f4:	e003      	b.n	80040fe <UART_Start_Receive_IT+0x7e>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2222      	movs	r2, #34	; 0x22
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	657b      	str	r3, [r7, #84]	; 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800412e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004130:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800413c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414a:	d107      	bne.n	800415c <UART_Start_Receive_IT+0xdc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <UART_Start_Receive_IT+0x160>)
 8004158:	669a      	str	r2, [r3, #104]	; 0x68
 800415a:	e002      	b.n	8004162 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a21      	ldr	r2, [pc, #132]	; (80041e4 <UART_Start_Receive_IT+0x164>)
 8004160:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	637b      	str	r3, [r7, #52]	; 0x34
 800418a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800418e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_Start_Receive_IT+0xea>
 800419c:	e018      	b.n	80041d0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	613b      	str	r3, [r7, #16]
   return(result);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f043 0320 	orr.w	r3, r3, #32
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041bc:	623b      	str	r3, [r7, #32]
 80041be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	69f9      	ldr	r1, [r7, #28]
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	375c      	adds	r7, #92	; 0x5c
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	08004459 	.word	0x08004459
 80041e4:	080042b1 	.word	0x080042b1

080041e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b095      	sub	sp, #84	; 0x54
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
 8004210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	61fb      	str	r3, [r7, #28]
   return(result);
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	2b01      	cmp	r3, #1
 800425c:	d118      	bne.n	8004290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042a4:	bf00      	nop
 80042a6:	3754      	adds	r7, #84	; 0x54
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b09c      	sub	sp, #112	; 0x70
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c8:	2b22      	cmp	r3, #34	; 0x22
 80042ca:	f040 80b9 	bne.w	8004440 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042dc:	b2d9      	uxtb	r1, r3
 80042de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	400a      	ands	r2, r1
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 809c 	bne.w	8004450 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432c:	66bb      	str	r3, [r7, #104]	; 0x68
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004336:	65bb      	str	r3, [r7, #88]	; 0x58
 8004338:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800433c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e6      	bne.n	8004318 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800435a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	667b      	str	r3, [r7, #100]	; 0x64
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800436a:	647a      	str	r2, [r7, #68]	; 0x44
 800436c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d018      	beq.n	80043d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	623b      	str	r3, [r7, #32]
   return(result);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043b4:	663b      	str	r3, [r7, #96]	; 0x60
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
 80043c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e6      	bne.n	80043a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d12e      	bne.n	8004438 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 0310 	bic.w	r3, r3, #16
 80043f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	69b9      	ldr	r1, [r7, #24]
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	617b      	str	r3, [r7, #20]
   return(result);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e6      	bne.n	80043e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d103      	bne.n	8004428 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2210      	movs	r2, #16
 8004426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7ff fa93 	bl	800395c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004436:	e00b      	b.n	8004450 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fb ff2d 	bl	8000298 <HAL_UART_RxCpltCallback>
}
 800443e:	e007      	b.n	8004450 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0208 	orr.w	r2, r2, #8
 800444e:	619a      	str	r2, [r3, #24]
}
 8004450:	bf00      	nop
 8004452:	3770      	adds	r7, #112	; 0x70
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b09c      	sub	sp, #112	; 0x70
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004466:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	f040 80b9 	bne.w	80045e8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800447c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004486:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800448a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800448e:	4013      	ands	r3, r2
 8004490:	b29a      	uxth	r2, r3
 8004492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004494:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 809c 	bne.w	80045f8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d4:	667b      	str	r3, [r7, #100]	; 0x64
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044de:	657b      	str	r3, [r7, #84]	; 0x54
 80044e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	663b      	str	r3, [r7, #96]	; 0x60
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004512:	643a      	str	r2, [r7, #64]	; 0x40
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d018      	beq.n	800457a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	e853 3f00 	ldrex	r3, [r3]
 8004554:	61fb      	str	r3, [r7, #28]
   return(result);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800455c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e6      	bne.n	8004548 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	2b01      	cmp	r3, #1
 8004580:	d12e      	bne.n	80045e0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	60bb      	str	r3, [r7, #8]
   return(result);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f023 0310 	bic.w	r3, r3, #16
 800459c:	65bb      	str	r3, [r7, #88]	; 0x58
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6979      	ldr	r1, [r7, #20]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	613b      	str	r3, [r7, #16]
   return(result);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d103      	bne.n	80045d0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2210      	movs	r2, #16
 80045ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff f9bf 	bl	800395c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045de:	e00b      	b.n	80045f8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fb fe59 	bl	8000298 <HAL_UART_RxCpltCallback>
}
 80045e6:	e007      	b.n	80045f8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	619a      	str	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	3770      	adds	r7, #112	; 0x70
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 f820 	bl	8004658 <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	080046b8 	.word	0x080046b8
 800463c:	080046b8 	.word	0x080046b8
 8004640:	080046b8 	.word	0x080046b8
 8004644:	080046bc 	.word	0x080046bc

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
