
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005018  08005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005050  08005050  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005050  08005050  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005050  08005050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005050  08005050  00015050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000187fc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b77  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001310  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e845  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000190f9  00000000  00000000  0005c31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9f1a  00000000  00000000  00075416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f330  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000565c  00000000  00000000  0012f380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005000 	.word	0x08005000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005000 	.word	0x08005000

080001c8 <uart_rx_enable_it>:
//    }
//}
uint8_t t;
uint32_t counter = 0;

void uart_rx_enable_it(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &t, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	4903      	ldr	r1, [pc, #12]	; (80001dc <uart_rx_enable_it+0x14>)
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <uart_rx_enable_it+0x18>)
 80001d2:	f003 fcd3 	bl	8003b7c <HAL_UART_Receive_IT>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	200004a0 	.word	0x200004a0
 80001e0:	2000012c 	.word	0x2000012c

080001e4 <HAL_UART_RxCpltCallback>:

uint32_t time;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	if (huart2->Instance == USART2) {
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a08      	ldr	r2, [pc, #32]	; (8000214 <HAL_UART_RxCpltCallback+0x30>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d10a      	bne.n	800020c <HAL_UART_RxCpltCallback+0x28>
		time = (t - '0');
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_UART_RxCpltCallback+0x34>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	3b30      	subs	r3, #48	; 0x30
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <HAL_UART_RxCpltCallback+0x38>)
 8000200:	601a      	str	r2, [r3, #0]
		counter = 0;
 8000202:	4b07      	ldr	r3, [pc, #28]	; (8000220 <HAL_UART_RxCpltCallback+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
		uart_rx_enable_it();
 8000208:	f7ff ffde 	bl	80001c8 <uart_rx_enable_it>
	}
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40004400 	.word	0x40004400
 8000218:	200004a0 	.word	0x200004a0
 800021c:	200004a8 	.word	0x200004a8
 8000220:	200004a4 	.word	0x200004a4

08000224 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	if (htim1->Instance == TIM1) {
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d118      	bne.n	8000268 <HAL_TIM_PeriodElapsedCallback+0x44>
		counter += 1;
 8000236:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	3301      	adds	r3, #1
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800023e:	6013      	str	r3, [r2, #0]

		if (counter == time) {
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	429a      	cmp	r2, r3
 800024a:	d10d      	bne.n	8000268 <HAL_TIM_PeriodElapsedCallback+0x44>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 800024c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000250:	480a      	ldr	r0, [pc, #40]	; (800027c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000252:	f001 f8a7 	bl	80013a4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800025e:	f001 f8a1 	bl	80013a4 <HAL_GPIO_TogglePin>
			counter = 0;
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40012c00 	.word	0x40012c00
 8000274:	200004a4 	.word	0x200004a4
 8000278:	200004a8 	.word	0x200004a8
 800027c:	48001000 	.word	0x48001000

08000280 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000284:	f000 fd0e 	bl	8000ca4 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000288:	f000 f814 	bl	80002b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800028c:	f000 f99c 	bl	80005c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000290:	f000 f876 	bl	8000380 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000294:	f000 f8b4 	bl	8000400 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000298:	f000 f974 	bl	8000584 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 800029c:	f000 f8ee 	bl	800047c <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80002a0:	f000 f940 	bl	8000524 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80002a4:	4802      	ldr	r0, [pc, #8]	; (80002b0 <main+0x30>)
 80002a6:	f002 ffd9 	bl	800325c <HAL_TIM_Base_Start_IT>
//	HAL_UART_Receive(&huart2, numbers, NUM_LEN, HAL_MAX_DELAY);
//	uint8_t out[100];
//	uint32_t len_out = sprintf(out, "number {%s} received", numbers);
//	HAL_UART_Transmit(&huart2, out, len_out, HAL_MAX_DELAY);
//	programInit(numbers);
	uart_rx_enable_it();
 80002aa:	f7ff ff8d 	bl	80001c8 <uart_rx_enable_it>

	while (1) {
 80002ae:	e7fe      	b.n	80002ae <main+0x2e>
 80002b0:	200000e0 	.word	0x200000e0

080002b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b09e      	sub	sp, #120	; 0x78
 80002b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f004 fe94 	bl	8004ff0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80002d8:	463b      	mov	r3, r7
 80002da:	223c      	movs	r2, #60	; 0x3c
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 fe86 	bl	8004ff0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80002e4:	2303      	movs	r3, #3
 80002e6:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002ec:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000302:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000308:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800030a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800030e:	4618      	mov	r0, r3
 8000310:	f001 fa7e 	bl	8001810 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6a>
		Error_Handler();
 800031a:	f000 fa7b 	bl	8000814 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2302      	movs	r3, #2
 8000324:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f002 faa6 	bl	800288c <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x96>
		Error_Handler();
 8000346:	f000 fa65 	bl	8000814 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <SystemClock_Config+0xc8>)
 800034c:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800035a:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000360:	463b      	mov	r3, r7
 8000362:	4618      	mov	r0, r3
 8000364:	f002 fcc8 	bl	8002cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0xbe>
		Error_Handler();
 800036e:	f000 fa51 	bl	8000814 <Error_Handler>
	}
}
 8000372:	bf00      	nop
 8000374:	3778      	adds	r7, #120	; 0x78
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	00021022 	.word	0x00021022

08000380 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000386:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <MX_I2C1_Init+0x78>)
 8000388:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <MX_I2C1_Init+0x74>)
 800038c:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <MX_I2C1_Init+0x7c>)
 800038e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <MX_I2C1_Init+0x74>)
 8000398:	2201      	movs	r2, #1
 800039a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003ba:	480e      	ldr	r0, [pc, #56]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003bc:	f001 f82f 	bl	800141e <HAL_I2C_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_I2C1_Init+0x4a>
		Error_Handler();
 80003c6:	f000 fa25 	bl	8000814 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80003ca:	2100      	movs	r1, #0
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003ce:	f001 f8b5 	bl	800153c <HAL_I2CEx_ConfigAnalogFilter>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80003d8:	f000 fa1c 	bl	8000814 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80003dc:	2100      	movs	r1, #0
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_I2C1_Init+0x74>)
 80003e0:	f001 f8f7 	bl	80015d2 <HAL_I2CEx_ConfigDigitalFilter>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_I2C1_Init+0x6e>
		Error_Handler();
 80003ea:	f000 fa13 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000028 	.word	0x20000028
 80003f8:	40005400 	.word	0x40005400
 80003fc:	2000090e 	.word	0x2000090e

08000400 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000404:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_SPI1_Init+0x74>)
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <MX_SPI1_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <MX_SPI1_Init+0x74>)
 800040c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000410:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_SPI1_Init+0x74>)
 800041a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800041e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <MX_SPI1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_SPI1_Init+0x74>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_SPI1_Init+0x74>)
 800042e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000432:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_SPI1_Init+0x74>)
 8000436:	2208      	movs	r2, #8
 8000438:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_SPI1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_SPI1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_SPI1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_SPI1_Init+0x74>)
 800044e:	2207      	movs	r2, #7
 8000450:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_SPI1_Init+0x74>)
 800045a:	2208      	movs	r2, #8
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_SPI1_Init+0x74>)
 8000460:	f002 fdfa 	bl	8003058 <HAL_SPI_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800046a:	f000 f9d3 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000007c 	.word	0x2000007c
 8000478:	40013000 	.word	0x40013000

0800047c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_TIM1_Init+0xa0>)
 800049c:	4a20      	ldr	r2, [pc, #128]	; (8000520 <MX_TIM1_Init+0xa4>)
 800049e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <MX_TIM1_Init+0xa0>)
 80004a2:	2263      	movs	r2, #99	; 0x63
 80004a4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_TIM1_Init+0xa0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 48000 - 1;
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_TIM1_Init+0xa0>)
 80004ae:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80004b2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_TIM1_Init+0xa0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_TIM1_Init+0xa0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_TIM1_Init+0xa0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80004c6:	4815      	ldr	r0, [pc, #84]	; (800051c <MX_TIM1_Init+0xa0>)
 80004c8:	f002 fe71 	bl	80031ae <HAL_TIM_Base_Init>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0x5a>
		Error_Handler();
 80004d2:	f000 f99f 	bl	8000814 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004da:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <MX_TIM1_Init+0xa0>)
 80004e4:	f003 f843 	bl	800356e <HAL_TIM_ConfigClockSource>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x76>
		Error_Handler();
 80004ee:	f000 f991 	bl	8000814 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <MX_TIM1_Init+0xa0>)
 8000504:	f003 fa4e 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800050e:	f000 f981 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200000e0 	.word	0x200000e0
 8000520:	40012c00 	.word	0x40012c00

08000524 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_USART2_UART_Init+0x58>)
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <MX_USART2_UART_Init+0x5c>)
 800052c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000534:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_USART2_UART_Init+0x58>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART2_UART_Init+0x58>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_USART2_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_USART2_UART_Init+0x58>)
 8000568:	f003 faba 	bl	8003ae0 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000572:	f000 f94f 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000012c 	.word	0x2000012c
 8000580:	40004400 	.word	0x40004400

08000584 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MX_USB_PCD_Init+0x40>)
 800058c:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 8000590:	2208      	movs	r2, #8
 8000592:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 8000596:	2202      	movs	r2, #2
 8000598:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 800059c:	2202      	movs	r2, #2
 800059e:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_USB_PCD_Init+0x3c>)
 80005ae:	f001 f85c 	bl	800166a <HAL_PCD_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_USB_PCD_Init+0x38>
		Error_Handler();
 80005b8:	f000 f92c 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200001b4 	.word	0x200001b4
 80005c4:	40005c00 	.word	0x40005c00

080005c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005de:	4b87      	ldr	r3, [pc, #540]	; (80007fc <MX_GPIO_Init+0x234>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a86      	ldr	r2, [pc, #536]	; (80007fc <MX_GPIO_Init+0x234>)
 80005e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b84      	ldr	r3, [pc, #528]	; (80007fc <MX_GPIO_Init+0x234>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b81      	ldr	r3, [pc, #516]	; (80007fc <MX_GPIO_Init+0x234>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a80      	ldr	r2, [pc, #512]	; (80007fc <MX_GPIO_Init+0x234>)
 80005fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b7e      	ldr	r3, [pc, #504]	; (80007fc <MX_GPIO_Init+0x234>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b7b      	ldr	r3, [pc, #492]	; (80007fc <MX_GPIO_Init+0x234>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a7a      	ldr	r2, [pc, #488]	; (80007fc <MX_GPIO_Init+0x234>)
 8000614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b78      	ldr	r3, [pc, #480]	; (80007fc <MX_GPIO_Init+0x234>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b75      	ldr	r3, [pc, #468]	; (80007fc <MX_GPIO_Init+0x234>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a74      	ldr	r2, [pc, #464]	; (80007fc <MX_GPIO_Init+0x234>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b72      	ldr	r3, [pc, #456]	; (80007fc <MX_GPIO_Init+0x234>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b6f      	ldr	r3, [pc, #444]	; (80007fc <MX_GPIO_Init+0x234>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a6e      	ldr	r2, [pc, #440]	; (80007fc <MX_GPIO_Init+0x234>)
 8000644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b6c      	ldr	r3, [pc, #432]	; (80007fc <MX_GPIO_Init+0x234>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <MX_GPIO_Init+0x234>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a68      	ldr	r2, [pc, #416]	; (80007fc <MX_GPIO_Init+0x234>)
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b66      	ldr	r3, [pc, #408]	; (80007fc <MX_GPIO_Init+0x234>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 800066e:	2200      	movs	r2, #0
 8000670:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000674:	4862      	ldr	r0, [pc, #392]	; (8000800 <MX_GPIO_Init+0x238>)
 8000676:	f000 fe7d 	bl	8001374 <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_10,
 800067a:	2200      	movs	r2, #0
 800067c:	f240 4114 	movw	r1, #1044	; 0x414
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fe76 	bl	8001374 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2150      	movs	r1, #80	; 0x50
 800068c:	485d      	ldr	r0, [pc, #372]	; (8000804 <MX_GPIO_Init+0x23c>)
 800068e:	f000 fe71 	bl	8001374 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_13,
 8000692:	2200      	movs	r2, #0
 8000694:	f242 0105 	movw	r1, #8197	; 0x2005
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <MX_GPIO_Init+0x240>)
 800069a:	f000 fe6b 	bl	8001374 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9 | GPIO_PIN_13, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80006a4:	4859      	ldr	r0, [pc, #356]	; (800080c <MX_GPIO_Init+0x244>)
 80006a6:	f000 fe65 	bl	8001374 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT4_Pin;
 80006aa:	2324      	movs	r3, #36	; 0x24
 80006ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4850      	ldr	r0, [pc, #320]	; (8000800 <MX_GPIO_Init+0x238>)
 80006c0:	f000 fcde 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 80006c4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006c8:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4848      	ldr	r0, [pc, #288]	; (8000800 <MX_GPIO_Init+0x238>)
 80006de:	f000 fccf 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4843      	ldr	r0, [pc, #268]	; (8000804 <MX_GPIO_Init+0x23c>)
 80006f8:	f000 fcc2 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f000 fcb5 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800071e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000720:	2302      	movs	r3, #2
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f000 fca7 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA4 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_10;
 8000732:	f240 4314 	movw	r3, #1044	; 0x414
 8000736:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 fc97 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000752:	2310      	movs	r3, #16
 8000754:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075c:	2302      	movs	r3, #2
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	482a      	ldr	r0, [pc, #168]	; (8000810 <MX_GPIO_Init+0x248>)
 8000768:	f000 fc8a 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800076c:	2350      	movs	r3, #80	; 0x50
 800076e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	4820      	ldr	r0, [pc, #128]	; (8000804 <MX_GPIO_Init+0x23c>)
 8000784:	f000 fc7c 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_13;
 8000788:	f242 0305 	movw	r3, #8197	; 0x2005
 800078c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4819      	ldr	r0, [pc, #100]	; (8000808 <MX_GPIO_Init+0x240>)
 80007a2:	f000 fc6d 	bl	8001080 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD9 PD13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_13;
 80007a6:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80007aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_GPIO_Init+0x244>)
 80007c0:	f000 fc5e 	bl	8001080 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2006      	movs	r0, #6
 80007ca:	f000 fbac 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ce:	2006      	movs	r0, #6
 80007d0:	f000 fbc5 	bl	8000f5e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2007      	movs	r0, #7
 80007da:	f000 fba4 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 fbbd 	bl	8000f5e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	200a      	movs	r0, #10
 80007ea:	f000 fb9c 	bl	8000f26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f000 fbb5 	bl	8000f5e <HAL_NVIC_EnableIRQ>

}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001000 	.word	0x48001000
 8000804:	48000800 	.word	0x48000800
 8000808:	48000400 	.word	0x48000400
 800080c:	48000c00 	.word	0x48000c00
 8000810:	48001400 	.word	0x48001400

08000814 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000856:	2007      	movs	r0, #7
 8000858:	f000 fb5a 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x7c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d127      	bne.n	80008da <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008a2:	23c0      	movs	r3, #192	; 0xc0
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a6:	2312      	movs	r3, #18
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b2:	2304      	movs	r3, #4
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <HAL_I2C_MspInit+0x84>)
 80008be:	f000 fbdf 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_I2C_MspInit+0x80>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3728      	adds	r7, #40	; 0x28
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400

080008f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d128      	bne.n	8000964 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_SPI_MspInit+0x80>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000942:	23e0      	movs	r3, #224	; 0xe0
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000952:	2305      	movs	r3, #5
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 fb8e 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_TIM_Base_MspInit+0x74>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12b      	bne.n	80009de <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_TIM_Base_MspInit+0x78>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_TIM_Base_MspInit+0x78>)
 800098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_TIM_Base_MspInit+0x78>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2018      	movs	r0, #24
 80009a4:	f000 fabf 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80009a8:	2018      	movs	r0, #24
 80009aa:	f000 fad8 	bl	8000f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2019      	movs	r0, #25
 80009b4:	f000 fab7 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009b8:	2019      	movs	r0, #25
 80009ba:	f000 fad0 	bl	8000f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	201a      	movs	r0, #26
 80009c4:	f000 faaf 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009c8:	201a      	movs	r0, #26
 80009ca:	f000 fac8 	bl	8000f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	201b      	movs	r0, #27
 80009d4:	f000 faa7 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009d8:	201b      	movs	r0, #27
 80009da:	f000 fac0 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40012c00 	.word	0x40012c00
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a29      	ldr	r2, [pc, #164]	; (8000ab4 <HAL_UART_MspInit+0xc4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d14c      	bne.n	8000aac <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a28      	ldr	r2, [pc, #160]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a22      	ldr	r2, [pc, #136]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	6153      	str	r3, [r2, #20]
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_UART_MspInit+0xc8>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fb02 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a7c:	2320      	movs	r3, #32
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_UART_MspInit+0xcc>)
 8000a98:	f000 faf2 	bl	8001080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2026      	movs	r0, #38	; 0x26
 8000aa2:	f000 fa40 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aa6:	2026      	movs	r0, #38	; 0x26
 8000aa8:	f000 fa59 	bl	8000f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	48000c00 	.word	0x48000c00

08000ac0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_PCD_MspInit+0x80>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d129      	bne.n	8000b36 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000afa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000b0c:	230e      	movs	r3, #14
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fab1 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000b24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_PCD_MspInit+0x84>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40005c00 	.word	0x40005c00
 8000b44:	40021000 	.word	0x40021000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f8cc 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 fc19 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f000 fc12 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000bbc:	2010      	movs	r0, #16
 8000bbe:	f000 fc0b 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000bce:	f002 fbaf 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000e0 	.word	0x200000e0

08000bdc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000be2:	f002 fba5 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000e0 	.word	0x200000e0

08000bf0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000bf6:	f002 fb9b 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000e0 	.word	0x200000e0

08000c04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <TIM1_CC_IRQHandler+0x10>)
 8000c0a:	f002 fb91 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000e0 	.word	0x200000e0

08000c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <USART2_IRQHandler+0x10>)
 8000c1e:	f002 fff1 	bl	8003c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000012c 	.word	0x2000012c

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f004 f993 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fafd 	bl	8000280 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	08005058 	.word	0x08005058
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	200004b0 	.word	0x200004b0

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f92b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fdae 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f943 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	200004ac 	.word	0x200004ac

08000d58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	200004ac 	.word	0x200004ac

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e020      	b.n	8000ff8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020e 	bic.w	r2, r2, #14
 8000fc4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f022 0201 	bic.w	r2, r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fde:	2101      	movs	r1, #1
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001016:	2b02      	cmp	r3, #2
 8001018:	d005      	beq.n	8001026 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2204      	movs	r2, #4
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e027      	b.n	8001076 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
    } 
  }
  return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800108e:	e154      	b.n	800133a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 8146 	beq.w	8001334 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <HAL_GPIO_Init+0x40>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d130      	bne.n	8001122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 0201 	and.w	r2, r3, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b03      	cmp	r3, #3
 800112c:	d017      	beq.n	800115e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d123      	bne.n	80011b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	220f      	movs	r2, #15
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	6939      	ldr	r1, [r7, #16]
 80011ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0203 	and.w	r2, r3, #3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80a0 	beq.w	8001334 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <HAL_GPIO_Init+0x2d8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a57      	ldr	r2, [pc, #348]	; (8001358 <HAL_GPIO_Init+0x2d8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <HAL_GPIO_Init+0x2d8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120c:	4a53      	ldr	r2, [pc, #332]	; (800135c <HAL_GPIO_Init+0x2dc>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001236:	d019      	beq.n	800126c <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a48      	ldr	r2, [pc, #288]	; (8001364 <HAL_GPIO_Init+0x2e4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1e4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a47      	ldr	r2, [pc, #284]	; (8001368 <HAL_GPIO_Init+0x2e8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1e0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a46      	ldr	r2, [pc, #280]	; (800136c <HAL_GPIO_Init+0x2ec>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1dc>
 8001258:	2304      	movs	r3, #4
 800125a:	e008      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 800125c:	2305      	movs	r3, #5
 800125e:	e006      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001260:	2303      	movs	r3, #3
 8001262:	e004      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001264:	2302      	movs	r3, #2
 8001266:	e002      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <HAL_GPIO_Init+0x1ee>
 800126c:	2300      	movs	r3, #0
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	f002 0203 	and.w	r2, r2, #3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4093      	lsls	r3, r2
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <HAL_GPIO_Init+0x2dc>)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128c:	4b38      	ldr	r3, [pc, #224]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012b0:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012da:	4a25      	ldr	r2, [pc, #148]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001304:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	f47f aea3 	bne.w	8001090 <HAL_GPIO_Init+0x10>
  }
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43d9      	mvns	r1, r3
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	400b      	ands	r3, r1
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f806 	bl	8001408 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e081      	b.n	8001534 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fa0f 	bl	8000868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2224      	movs	r2, #36	; 0x24
 800144e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0201 	bic.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800146e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d107      	bne.n	8001498 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	e006      	b.n	80014a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d104      	bne.n	80014b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69d9      	ldr	r1, [r3, #28]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1a      	ldr	r2, [r3, #32]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f042 0201 	orr.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2220      	movs	r2, #32
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b20      	cmp	r3, #32
 8001550:	d138      	bne.n	80015c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800155c:	2302      	movs	r3, #2
 800155e:	e032      	b.n	80015c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	; 0x24
 800156c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800158e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015c4:	2302      	movs	r3, #2
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b085      	sub	sp, #20
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d139      	bne.n	800165c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e033      	b.n	800165e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2224      	movs	r2, #36	; 0x24
 8001602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001624:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	021b      	lsls	r3, r3, #8
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	e000      	b.n	800165e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800165c:	2302      	movs	r3, #2
  }
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800166a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166c:	b08b      	sub	sp, #44	; 0x2c
 800166e:	af06      	add	r7, sp, #24
 8001670:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0c4      	b.n	8001806 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d106      	bne.n	8001696 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fa15 	bl	8000ac0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fc44 	bl	8004f30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e040      	b.n	8001730 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3301      	adds	r3, #1
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3303      	adds	r3, #3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	3338      	adds	r3, #56	; 0x38
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	333c      	adds	r3, #60	; 0x3c
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	3340      	adds	r3, #64	; 0x40
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	3301      	adds	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d3b9      	bcc.n	80016ae <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]
 800173e:	e044      	b.n	80017ca <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800176c:	7bfa      	ldrb	r2, [r7, #15]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	3301      	adds	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3b5      	bcc.n	8001740 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	687e      	ldr	r6, [r7, #4]
 80017dc:	466d      	mov	r5, sp
 80017de:	f106 0410 	add.w	r4, r6, #16
 80017e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	602b      	str	r3, [r5, #0]
 80017ea:	1d33      	adds	r3, r6, #4
 80017ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	f003 fbb9 	bl	8004f66 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001816:	af00      	add	r7, sp, #0
 8001818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001820:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f001 b823 	b.w	800287c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 817d 	beq.w	8001b46 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800184c:	4bbc      	ldr	r3, [pc, #752]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001858:	4bb9      	ldr	r3, [pc, #740]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d15c      	bne.n	800191e <HAL_RCC_OscConfig+0x10e>
 8001864:	4bb6      	ldr	r3, [pc, #728]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d155      	bne.n	800191e <HAL_RCC_OscConfig+0x10e>
 8001872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001876:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001886:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_RCC_OscConfig+0x94>
 800189e:	4ba8      	ldr	r3, [pc, #672]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e015      	b.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018bc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018c0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018cc:	4b9c      	ldr	r3, [pc, #624]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018d4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018d8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018dc:	fa92 f2a2 	rbit	r2, r2
 80018e0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018e4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018e8:	fab2 f282 	clz	r2, r2
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	f042 0220 	orr.w	r2, r2, #32
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f002 021f 	and.w	r2, r2, #31
 80018f8:	2101      	movs	r1, #1
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4013      	ands	r3, r2
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 811f 	beq.w	8001b44 <HAL_RCC_OscConfig+0x334>
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8116 	bne.w	8001b44 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	f000 bfaf 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x12e>
 8001930:	4b83      	ldr	r3, [pc, #524]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e036      	b.n	80019ac <HAL_RCC_OscConfig+0x19c>
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x158>
 800194e:	4b7c      	ldr	r3, [pc, #496]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7b      	ldr	r2, [pc, #492]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a78      	ldr	r2, [pc, #480]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e021      	b.n	80019ac <HAL_RCC_OscConfig+0x19c>
 8001968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x184>
 800197a:	4b71      	ldr	r3, [pc, #452]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a70      	ldr	r2, [pc, #448]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b6e      	ldr	r3, [pc, #440]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6d      	ldr	r2, [pc, #436]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x19c>
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a66      	ldr	r2, [pc, #408]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ac:	4b64      	ldr	r3, [pc, #400]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f023 020f 	bic.w	r2, r3, #15
 80019b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	495f      	ldr	r1, [pc, #380]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d059      	beq.n	8001a8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff f9bf 	bl	8000d58 <HAL_GetTick>
 80019da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f9ba 	bl	8000d58 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d902      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	f000 bf43 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 80019f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0x218>
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	e015      	b.n	8001a54 <HAL_RCC_OscConfig+0x244>
 8001a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a40:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a58:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a60:	fa92 f2a2 	rbit	r2, r2
 8001a64:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ab      	beq.n	80019e0 <HAL_RCC_OscConfig+0x1d0>
 8001a88:	e05d      	b.n	8001b46 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f965 	bl	8000d58 <HAL_GetTick>
 8001a8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f960 	bl	8000d58 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	; 0x64
 8001aa2:	d902      	bls.n	8001aaa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f000 bee9 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 8001aaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001abe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	095b      	lsrs	r3, r3, #5
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_RCC_OscConfig+0x2cc>
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f8>
 8001adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001af8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b0c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b10:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b14:	fa92 f2a2 	rbit	r2, r2
 8001b18:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b1c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b20:	fab2 f282 	clz	r2, r2
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f002 021f 	and.w	r2, r2, #31
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1ab      	bne.n	8001a94 <HAL_RCC_OscConfig+0x284>
 8001b3c:	e003      	b.n	8001b46 <HAL_RCC_OscConfig+0x336>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 817d 	beq.w	8001e56 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b5c:	4ba6      	ldr	r3, [pc, #664]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b68:	4ba3      	ldr	r3, [pc, #652]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d172      	bne.n	8001c5a <HAL_RCC_OscConfig+0x44a>
 8001b74:	4ba0      	ldr	r3, [pc, #640]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d16c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x44a>
 8001b80:	2302      	movs	r3, #2
 8001b82:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b92:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x3a0>
 8001baa:	4b93      	ldr	r3, [pc, #588]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	e013      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c8>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001bc8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001bd4:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001bde:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001be2:	fa92 f2a2 	rbit	r2, r2
 8001be6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001bea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f042 0220 	orr.w	r2, r2, #32
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f002 021f 	and.w	r2, r2, #31
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <HAL_RCC_OscConfig+0x410>
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 be2e 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	21f8      	movs	r1, #248	; 0xf8
 8001c36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c3e:	fa91 f1a1 	rbit	r1, r1
 8001c42:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001c46:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001c4a:	fab1 f181 	clz	r1, r1
 8001c4e:	b2c9      	uxtb	r1, r1
 8001c50:	408b      	lsls	r3, r1
 8001c52:	4969      	ldr	r1, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c58:	e0fd      	b.n	8001e56 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8088 	beq.w	8001d7c <HAL_RCC_OscConfig+0x56c>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c7e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f85e 	bl	8000d58 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f859 	bl	8000d58 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d902      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f000 bde2 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001cca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4d8>
 8001ce2:	4b45      	ldr	r3, [pc, #276]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	e013      	b.n	8001d10 <HAL_RCC_OscConfig+0x500>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2202      	movs	r2, #2
 8001d12:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d16:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d22:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d26:	fab2 f282 	clz	r2, r2
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	f042 0220 	orr.w	r2, r2, #32
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f002 021f 	and.w	r2, r2, #31
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0af      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	21f8      	movs	r1, #248	; 0xf8
 8001d58:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d60:	fa91 f1a1 	rbit	r1, r1
 8001d64:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d68:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d6c:	fab1 f181 	clz	r1, r1
 8001d70:	b2c9      	uxtb	r1, r1
 8001d72:	408b      	lsls	r3, r1
 8001d74:	4920      	ldr	r1, [pc, #128]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
 8001d7a:	e06c      	b.n	8001e56 <HAL_RCC_OscConfig+0x646>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	461a      	mov	r2, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe ffd6 	bl	8000d58 <HAL_GetTick>
 8001dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7fe ffd1 	bl	8000d58 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d902      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	f000 bd5a 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d104      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5ec>
 8001df2:	4b01      	ldr	r3, [pc, #4]	; (8001df8 <HAL_RCC_OscConfig+0x5e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e015      	b.n	8001e24 <HAL_RCC_OscConfig+0x614>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e14:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e20:	4bc8      	ldr	r3, [pc, #800]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	2202      	movs	r2, #2
 8001e26:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e2e:	fa92 f2a2 	rbit	r2, r2
 8001e32:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e36:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e3a:	fab2 f282 	clz	r2, r2
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	f042 0220 	orr.w	r2, r2, #32
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1ad      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8110 	beq.w	800208c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d079      	beq.n	8001f70 <HAL_RCC_OscConfig+0x760>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4bab      	ldr	r3, [pc, #684]	; (8002148 <HAL_RCC_OscConfig+0x938>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ff57 	bl	8000d58 <HAL_GetTick>
 8001eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7fe ff52 	bl	8000d58 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d902      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f000 bcdb 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001edc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f1e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 8001f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	6019      	str	r1, [r3, #0]
 8001f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f1a3 	rbit	r1, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f46:	6019      	str	r1, [r3, #0]
  return result;
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f303 	lsl.w	r3, r1, r3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0a0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x6a0>
 8001f6e:	e08d      	b.n	800208c <HAL_RCC_OscConfig+0x87c>
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f78:	2201      	movs	r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f92:	601a      	str	r2, [r3, #0]
  return result;
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b68      	ldr	r3, [pc, #416]	; (8002148 <HAL_RCC_OscConfig+0x938>)
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	461a      	mov	r2, r3
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fed1 	bl	8000d58 <HAL_GetTick>
 8001fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7fe fecc 	bl	8000d58 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d902      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f000 bc55 	b.w	800287c <HAL_RCC_OscConfig+0x106c>
 8001fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	fa93 f2a3 	rbit	r2, r3
 8001fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fa93 f2a3 	rbit	r2, r3
 8002010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800201e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002038:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800203c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 8002040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800204a:	2102      	movs	r1, #2
 800204c:	6019      	str	r1, [r3, #0]
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f1a3 	rbit	r1, r3
 800205c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002060:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002064:	6019      	str	r1, [r3, #0]
  return result;
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d197      	bne.n	8001fbc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800208c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 81a1 	beq.w	80023e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a8:	4b26      	ldr	r3, [pc, #152]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d116      	bne.n	80020e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b23      	ldr	r3, [pc, #140]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	61d3      	str	r3, [r2, #28]
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020cc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80020da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_OscConfig+0x93c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x93c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_RCC_OscConfig+0x93c>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fe2d 	bl	8000d58 <HAL_GetTick>
 80020fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	e009      	b.n	8002118 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fe28 	bl	8000d58 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e3b1      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCC_OscConfig+0x93c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002128:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10d      	bne.n	8002150 <HAL_RCC_OscConfig+0x940>
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a02      	ldr	r2, [pc, #8]	; (8002144 <HAL_RCC_OscConfig+0x934>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	e03c      	b.n	80021bc <HAL_RCC_OscConfig+0x9ac>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	10908120 	.word	0x10908120
 800214c:	40007000 	.word	0x40007000
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x96a>
 8002160:	4bc1      	ldr	r3, [pc, #772]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4ac0      	ldr	r2, [pc, #768]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	4bbe      	ldr	r3, [pc, #760]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4abd      	ldr	r2, [pc, #756]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6213      	str	r3, [r2, #32]
 8002178:	e020      	b.n	80021bc <HAL_RCC_OscConfig+0x9ac>
 800217a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x994>
 800218a:	4bb7      	ldr	r3, [pc, #732]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4ab6      	ldr	r2, [pc, #728]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4bb4      	ldr	r3, [pc, #720]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4ab3      	ldr	r2, [pc, #716]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x9ac>
 80021a4:	4bb0      	ldr	r3, [pc, #704]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4aaf      	ldr	r2, [pc, #700]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	4bad      	ldr	r3, [pc, #692]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4aac      	ldr	r2, [pc, #688]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8081 	beq.w	80022d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe fdc3 	bl	8000d58 <HAL_GetTick>
 80021d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7fe fdbe 	bl	8000d58 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e345      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021f8:	2202      	movs	r2, #2
 80021fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002200:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	fa93 f2a3 	rbit	r2, r3
 800220a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002240:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0xa4c>
 8002256:	4b84      	ldr	r3, [pc, #528]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	e013      	b.n	8002284 <HAL_RCC_OscConfig+0xa74>
 800225c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002260:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002264:	2202      	movs	r2, #2
 8002266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b79      	ldr	r3, [pc, #484]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002288:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800228c:	2102      	movs	r1, #2
 800228e:	6011      	str	r1, [r2, #0]
 8002290:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002294:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	fa92 f1a2 	rbit	r1, r2
 800229e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022a6:	6011      	str	r1, [r2, #0]
  return result;
 80022a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	fab2 f282 	clz	r2, r2
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f002 021f 	and.w	r2, r2, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d084      	beq.n	80021d8 <HAL_RCC_OscConfig+0x9c8>
 80022ce:	e07f      	b.n	80023d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d0:	f7fe fd42 	bl	8000d58 <HAL_GetTick>
 80022d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	e00b      	b.n	80022f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fd3d 	bl	8000d58 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e2c4      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
 80022f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80022fa:	2202      	movs	r2, #2
 80022fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002302:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800231e:	2202      	movs	r2, #2
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002334:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002338:	601a      	str	r2, [r3, #0]
  return result;
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002342:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d102      	bne.n	800235e <HAL_RCC_OscConfig+0xb4e>
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	e013      	b.n	8002386 <HAL_RCC_OscConfig+0xb76>
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	4b39      	ldr	r3, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800238a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800238e:	2102      	movs	r1, #2
 8002390:	6011      	str	r1, [r2, #0]
 8002392:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002396:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	fa92 f1a2 	rbit	r1, r2
 80023a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023a8:	6011      	str	r1, [r2, #0]
  return result;
 80023aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	fab2 f282 	clz	r2, r2
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f002 021f 	and.w	r2, r2, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d184      	bne.n	80022da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	4a22      	ldr	r2, [pc, #136]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8242 	beq.w	800287a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0xc58>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b08      	cmp	r3, #8
 8002400:	f000 8213 	beq.w	800282a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 8162 	bne.w	80026da <HAL_RCC_OscConfig+0xeca>
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800241e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002436:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800243a:	601a      	str	r2, [r3, #0]
  return result;
 800243c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002440:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002444:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002450:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	461a      	mov	r2, r3
 8002458:	2300      	movs	r3, #0
 800245a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fc7c 	bl	8000d58 <HAL_GetTick>
 8002460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e00c      	b.n	8002480 <HAL_RCC_OscConfig+0xc70>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fc74 	bl	8000d58 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1fd      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
 8002480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002484:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002488:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002492:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024a4:	601a      	str	r2, [r3, #0]
  return result;
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80024ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0xcba>
 80024c4:	4bb0      	ldr	r3, [pc, #704]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e027      	b.n	800251a <HAL_RCC_OscConfig+0xd0a>
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	fa93 f2a3 	rbit	r2, r3
 80024e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	fa93 f2a3 	rbit	r2, r3
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	4b9c      	ldr	r3, [pc, #624]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800251e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002522:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002526:	6011      	str	r1, [r2, #0]
 8002528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800252c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	fa92 f1a2 	rbit	r1, r2
 8002536:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800253a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800253e:	6011      	str	r1, [r2, #0]
  return result;
 8002540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002544:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f042 0220 	orr.w	r2, r2, #32
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	f002 021f 	and.w	r2, r2, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f202 	lsl.w	r2, r1, r2
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d182      	bne.n	800246c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800256e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	430b      	orrs	r3, r1
 8002588:	497f      	ldr	r1, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002592:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800259a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025b2:	601a      	str	r2, [r3, #0]
  return result;
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80025bc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	461a      	mov	r2, r3
 80025d0:	2301      	movs	r3, #1
 80025d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fbc0 	bl	8000d58 <HAL_GetTick>
 80025d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fbbb 	bl	8000d58 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e144      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002620:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_OscConfig+0xe2c>
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e027      	b.n	800268c <HAL_RCC_OscConfig+0xe7c>
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002644:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800266a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002674:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002682:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002690:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002694:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002698:	6011      	str	r1, [r2, #0]
 800269a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800269e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	fa92 f1a2 	rbit	r1, r2
 80026a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026ac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026b0:	6011      	str	r1, [r2, #0]
  return result;
 80026b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	fab2 f282 	clz	r2, r2
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	f042 0220 	orr.w	r2, r2, #32
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f002 021f 	and.w	r2, r2, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f202 	lsl.w	r2, r1, r2
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d082      	beq.n	80025de <HAL_RCC_OscConfig+0xdce>
 80026d8:	e0cf      	b.n	800287a <HAL_RCC_OscConfig+0x106a>
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fa93 f2a3 	rbit	r2, r3
 80026f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026fe:	601a      	str	r2, [r3, #0]
  return result;
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002708:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002714:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	461a      	mov	r2, r3
 800271c:	2300      	movs	r3, #0
 800271e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fb1a 	bl	8000d58 <HAL_GetTick>
 8002724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002728:	e009      	b.n	800273e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fb15 	bl	8000d58 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e09e      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800276c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d104      	bne.n	800278c <HAL_RCC_OscConfig+0xf7c>
 8002782:	4b01      	ldr	r3, [pc, #4]	; (8002788 <HAL_RCC_OscConfig+0xf78>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e029      	b.n	80027dc <HAL_RCC_OscConfig+0xfcc>
 8002788:	40021000 	.word	0x40021000
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002794:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002798:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x1078>)
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027e0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	fa92 f1a2 	rbit	r1, r2
 80027f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027fc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002800:	6011      	str	r1, [r2, #0]
  return result;
 8002802:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002806:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f042 0220 	orr.w	r2, r2, #32
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f002 021f 	and.w	r2, r2, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d180      	bne.n	800272a <HAL_RCC_OscConfig+0xf1a>
 8002828:	e027      	b.n	800287a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800282a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01e      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_RCC_OscConfig+0x1078>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002846:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800284a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800284e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002852:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	429a      	cmp	r2, r3
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800285e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b09e      	sub	sp, #120	; 0x78
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e162      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b90      	ldr	r3, [pc, #576]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	498b      	ldr	r1, [pc, #556]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e14a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b82      	ldr	r3, [pc, #520]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	497f      	ldr	r1, [pc, #508]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80dc 	beq.w	8002ab8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d13c      	bne.n	8002982 <HAL_RCC_ClockConfig+0xf6>
 8002908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800290c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	b2db      	uxtb	r3, r3
 800291e:	095b      	lsrs	r3, r3, #5
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	d102      	bne.n	8002932 <HAL_RCC_ClockConfig+0xa6>
 800292c:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	e00f      	b.n	8002952 <HAL_RCC_ClockConfig+0xc6>
 8002932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002936:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	667b      	str	r3, [r7, #100]	; 0x64
 8002940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
 8002946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002956:	65ba      	str	r2, [r7, #88]	; 0x58
 8002958:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800295a:	fa92 f2a2 	rbit	r2, r2
 800295e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d17b      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0f3      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d13c      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x178>
 800298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_ClockConfig+0x128>
 80029ae:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	e00f      	b.n	80029d4 <HAL_RCC_ClockConfig+0x148>
 80029b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
 80029c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c6:	643b      	str	r3, [r7, #64]	; 0x40
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80029da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f042 0220 	orr.w	r2, r2, #32
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f002 021f 	and.w	r2, r2, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f202 	lsl.w	r2, r1, r2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d13a      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b2      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
 8002a04:	2302      	movs	r3, #2
 8002a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x1a0>
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e00d      	b.n	8002a48 <HAL_RCC_ClockConfig+0x1bc>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	2202      	movs	r2, #2
 8002a4a:	61ba      	str	r2, [r7, #24]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	fa92 f2a2 	rbit	r2, r2
 8002a52:	617a      	str	r2, [r7, #20]
  return result;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	fab2 f282 	clz	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f042 0220 	orr.w	r2, r2, #32
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	f002 021f 	and.w	r2, r2, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e079      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a76:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 0203 	bic.w	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	491a      	ldr	r1, [pc, #104]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a88:	f7fe f966 	bl	8000d58 <HAL_GetTick>
 8002a8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a90:	f7fe f962 	bl	8000d58 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e061      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_ClockConfig+0x260>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 020c 	and.w	r2, r3, #12
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d1eb      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d214      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 0207 	bic.w	r2, r3, #7
 8002ace:	4906      	ldr	r1, [pc, #24]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e040      	b.n	8002b6a <HAL_RCC_ClockConfig+0x2de>
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_RCC_ClockConfig+0x2e8>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	491a      	ldr	r1, [pc, #104]	; (8002b74 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4912      	ldr	r1, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b2e:	f000 f829 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b32:	4601      	mov	r1, r0
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <HAL_RCC_ClockConfig+0x2e8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3c:	22f0      	movs	r2, #240	; 0xf0
 8002b3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	60fa      	str	r2, [r7, #12]
  return result;
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	40d3      	lsrs	r3, r2
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x2ec>)
 8002b54:	5cd3      	ldrb	r3, [r2, r3]
 8002b56:	fa21 f303 	lsr.w	r3, r1, r3
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_RCC_ClockConfig+0x2f0>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_RCC_ClockConfig+0x2f4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f8b4 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3778      	adds	r7, #120	; 0x78
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	08005018 	.word	0x08005018
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b08b      	sub	sp, #44	; 0x2c
 8002b88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x36>
 8002bb2:	e03c      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bb6:	623b      	str	r3, [r7, #32]
      break;
 8002bb8:	e03c      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	fa92 f2a2 	rbit	r2, r2
 8002bcc:	607a      	str	r2, [r7, #4]
  return result;
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	fab2 f282 	clz	r2, r2
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	40d3      	lsrs	r3, r2
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	220f      	movs	r2, #15
 8002be8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	fa92 f2a2 	rbit	r2, r2
 8002bf0:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	fab2 f282 	clz	r2, r2
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	40d3      	lsrs	r3, r2
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bfe:	5cd3      	ldrb	r3, [r2, r3]
 8002c00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	e004      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	4a0c      	ldr	r2, [pc, #48]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	623b      	str	r3, [r7, #32]
      break;
 8002c2c:	e002      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c30:	623b      	str	r3, [r7, #32]
      break;
 8002c32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c34:	6a3b      	ldr	r3, [r7, #32]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	372c      	adds	r7, #44	; 0x2c
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	007a1200 	.word	0x007a1200
 8002c4c:	08005030 	.word	0x08005030
 8002c50:	08005040 	.word	0x08005040
 8002c54:	003d0900 	.word	0x003d0900

08002c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c76:	f7ff ffef 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	fa92 f2a2 	rbit	r2, r2
 8002c90:	603a      	str	r2, [r7, #0]
  return result;
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	fab2 f282 	clz	r2, r2
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	40d3      	lsrs	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	08005028 	.word	0x08005028

08002cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cba:	f7ff ffcd 	bl	8002c58 <HAL_RCC_GetHCLKFreq>
 8002cbe:	4601      	mov	r1, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ccc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	fa92 f2a2 	rbit	r2, r2
 8002cd4:	603a      	str	r2, [r7, #0]
  return result;
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	fab2 f282 	clz	r2, r2
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	40d3      	lsrs	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08005028 	.word	0x08005028

08002cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b092      	sub	sp, #72	; 0x48
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80d4 	beq.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1c:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10e      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
 8002d34:	4b48      	ldr	r3, [pc, #288]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a41      	ldr	r2, [pc, #260]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fffb 	bl	8000d58 <HAL_GetTick>
 8002d62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fd fff7 	bl	8000d58 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d901      	bls.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e169      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8084 	beq.w	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d07c      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da4:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2301      	movs	r3, #1
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	2300      	movs	r3, #0
 8002df4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d04b      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e06:	f7fd ffa7 	bl	8000d58 <HAL_GetTick>
 8002e0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fd ffa3 	bl	8000d58 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e113      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002e24:	2302      	movs	r3, #2
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	2302      	movs	r3, #2
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d108      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e52:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	e00d      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	10908100 	.word	0x10908100
 8002e64:	2302      	movs	r3, #2
 8002e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2202      	movs	r2, #2
 8002e76:	613a      	str	r2, [r7, #16]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	fa92 f2a2 	rbit	r2, r2
 8002e7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	fab2 f282 	clz	r2, r2
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f002 021f 	and.w	r2, r2, #31
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0b7      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e9e:	4b6d      	ldr	r3, [pc, #436]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	496a      	ldr	r1, [pc, #424]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b66      	ldr	r3, [pc, #408]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a65      	ldr	r2, [pc, #404]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed0:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f023 0203 	bic.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	495d      	ldr	r1, [pc, #372]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002eee:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4956      	ldr	r1, [pc, #344]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f0c:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	494e      	ldr	r1, [pc, #312]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4947      	ldr	r1, [pc, #284]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f48:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	493f      	ldr	r1, [pc, #252]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f023 0220 	bic.w	r2, r3, #32
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4938      	ldr	r1, [pc, #224]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4930      	ldr	r1, [pc, #192]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	4929      	ldr	r1, [pc, #164]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fc0:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	4921      	ldr	r1, [pc, #132]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fde:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	491a      	ldr	r1, [pc, #104]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	4912      	ldr	r1, [pc, #72]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	490b      	ldr	r1, [pc, #44]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3748      	adds	r7, #72	; 0x48
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000

08003058 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e09d      	b.n	80031a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d108      	bne.n	8003084 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307a:	d009      	beq.n	8003090 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
 8003082:	e005      	b.n	8003090 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fc20 	bl	80008f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030d0:	d902      	bls.n	80030d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e002      	b.n	80030de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030e6:	d007      	beq.n	80030f8 <HAL_SPI_Init+0xa0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f0:	d002      	beq.n	80030f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	ea42 0103 	orr.w	r1, r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	f003 0204 	and.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003174:	ea42 0103 	orr.w	r1, r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003194:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e049      	b.n	8003254 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fd fbcd 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 faaf 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	d001      	beq.n	8003274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04a      	b.n	800330a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_TIM_Base_Start_IT+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d018      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x6c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d013      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x6c>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_TIM_Base_Start_IT+0xc0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00e      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x6c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_Base_Start_IT+0xc4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x6c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_TIM_Base_Start_IT+0x6c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_TIM_Base_Start_IT+0xcc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d115      	bne.n	80032f4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_TIM_Base_Start_IT+0xd0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d015      	beq.n	8003306 <HAL_TIM_Base_Start_IT+0xaa>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d011      	beq.n	8003306 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0201 	orr.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	e008      	b.n	8003306 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e000      	b.n	8003308 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003306:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40013400 	.word	0x40013400
 8003328:	40014000 	.word	0x40014000
 800332c:	00010007 	.word	0x00010007

08003330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d122      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b02      	cmp	r3, #2
 8003352:	d11b      	bne.n	800338c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0202 	mvn.w	r2, #2
 800335c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f9ce 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003378:	e005      	b.n	8003386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9c0 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f9d1 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d122      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d11b      	bne.n	80033e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0204 	mvn.w	r2, #4
 80033b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2202      	movs	r2, #2
 80033b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f9a4 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e005      	b.n	80033da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f996 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f9a7 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d122      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d11b      	bne.n	8003434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0208 	mvn.w	r2, #8
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2204      	movs	r2, #4
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f97a 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f96c 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f97d 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b10      	cmp	r3, #16
 8003440:	d122      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d11b      	bne.n	8003488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f950 	bl	8003714 <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f942 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f953 	bl	8003728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0201 	mvn.w	r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fc feb8 	bl	8000224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034be:	2b80      	cmp	r3, #128	; 0x80
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 faec 	bl	8003ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ee:	d10e      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d107      	bne.n	800350e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fadf 	bl	8003acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f901 	bl	800373c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0220 	mvn.w	r2, #32
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa9f 	bl	8003aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_TIM_ConfigClockSource+0x1c>
 8003586:	2302      	movs	r3, #2
 8003588:	e0b6      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x18a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	d03e      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xd8>
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	f200 8087 	bhi.w	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	f000 8086 	beq.w	80036e4 <HAL_TIM_ConfigClockSource+0x176>
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d87f      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035de:	2b70      	cmp	r3, #112	; 0x70
 80035e0:	d01a      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0xaa>
 80035e2:	2b70      	cmp	r3, #112	; 0x70
 80035e4:	d87b      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035e6:	2b60      	cmp	r3, #96	; 0x60
 80035e8:	d050      	beq.n	800368c <HAL_TIM_ConfigClockSource+0x11e>
 80035ea:	2b60      	cmp	r3, #96	; 0x60
 80035ec:	d877      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035ee:	2b50      	cmp	r3, #80	; 0x50
 80035f0:	d03c      	beq.n	800366c <HAL_TIM_ConfigClockSource+0xfe>
 80035f2:	2b50      	cmp	r3, #80	; 0x50
 80035f4:	d873      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d058      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0x13e>
 80035fa:	2b40      	cmp	r3, #64	; 0x40
 80035fc:	d86f      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 80035fe:	2b30      	cmp	r3, #48	; 0x30
 8003600:	d064      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x15e>
 8003602:	2b30      	cmp	r3, #48	; 0x30
 8003604:	d86b      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 8003606:	2b20      	cmp	r3, #32
 8003608:	d060      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x15e>
 800360a:	2b20      	cmp	r3, #32
 800360c:	d867      	bhi.n	80036de <HAL_TIM_ConfigClockSource+0x170>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d05c      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x15e>
 8003612:	2b10      	cmp	r3, #16
 8003614:	d05a      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0x15e>
 8003616:	e062      	b.n	80036de <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f000 f99c 	bl	8003964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800363a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
      break;
 8003644:	e04f      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f000 f985 	bl	8003964 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003668:	609a      	str	r2, [r3, #8]
      break;
 800366a:	e03c      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	461a      	mov	r2, r3
 800367a:	f000 f8f9 	bl	8003870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2150      	movs	r1, #80	; 0x50
 8003684:	4618      	mov	r0, r3
 8003686:	f000 f952 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 800368a:	e02c      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	461a      	mov	r2, r3
 800369a:	f000 f918 	bl	80038ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2160      	movs	r1, #96	; 0x60
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f942 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036aa:	e01c      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	461a      	mov	r2, r3
 80036ba:	f000 f8d9 	bl	8003870 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f932 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036ca:	e00c      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 f929 	bl	800392e <TIM_ITRx_SetConfig>
      break;
 80036dc:	e003      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      break;
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3c      	ldr	r2, [pc, #240]	; (8003854 <TIM_Base_SetConfig+0x104>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00f      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d00b      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a39      	ldr	r2, [pc, #228]	; (8003858 <TIM_Base_SetConfig+0x108>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a38      	ldr	r2, [pc, #224]	; (800385c <TIM_Base_SetConfig+0x10c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <TIM_Base_SetConfig+0x38>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a37      	ldr	r2, [pc, #220]	; (8003860 <TIM_Base_SetConfig+0x110>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d108      	bne.n	800379a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <TIM_Base_SetConfig+0x104>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01b      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d017      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <TIM_Base_SetConfig+0x108>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <TIM_Base_SetConfig+0x10c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <TIM_Base_SetConfig+0x110>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a27      	ldr	r2, [pc, #156]	; (8003864 <TIM_Base_SetConfig+0x114>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a26      	ldr	r2, [pc, #152]	; (8003868 <TIM_Base_SetConfig+0x118>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <TIM_Base_SetConfig+0x11c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a10      	ldr	r2, [pc, #64]	; (8003854 <TIM_Base_SetConfig+0x104>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00f      	beq.n	8003838 <TIM_Base_SetConfig+0xe8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a11      	ldr	r2, [pc, #68]	; (8003860 <TIM_Base_SetConfig+0x110>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00b      	beq.n	8003838 <TIM_Base_SetConfig+0xe8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <TIM_Base_SetConfig+0x114>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <TIM_Base_SetConfig+0xe8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <TIM_Base_SetConfig+0x118>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0xe8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0e      	ldr	r2, [pc, #56]	; (800386c <TIM_Base_SetConfig+0x11c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	615a      	str	r2, [r3, #20]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40013400 	.word	0x40013400
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800

08003870 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0201 	bic.w	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 030a 	bic.w	r3, r3, #10
 80038ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b087      	sub	sp, #28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	031b      	lsls	r3, r3, #12
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800390a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	621a      	str	r2, [r3, #32]
}
 8003922:	bf00      	nop
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	f043 0307 	orr.w	r3, r3, #7
 8003950:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	021a      	lsls	r2, r3, #8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	431a      	orrs	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e063      	b.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2b      	ldr	r2, [pc, #172]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d108      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d018      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2e:	d013      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10c      	bne.n	8003a72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40013400 	.word	0x40013400
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40014000 	.word	0x40014000

08003aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e040      	b.n	8003b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc ff74 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2224      	movs	r2, #36	; 0x24
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fb76 	bl	8004210 <UART_SetConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e022      	b.n	8003b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fd3e 	bl	80045b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fdc5 	bl	80046fc <UART_CheckIdleState>
 8003b72:	4603      	mov	r3, r0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d132      	bne.n	8003bfa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Receive_IT+0x24>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e02b      	b.n	8003bfc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d018      	beq.n	8003bea <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	623b      	str	r3, [r7, #32]
 8003bd8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	69f9      	ldr	r1, [r7, #28]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bea:	88fb      	ldrh	r3, [r7, #6]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fe93 	bl	800491c <UART_Start_Receive_IT>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b0ba      	sub	sp, #232	; 0xe8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c32:	4013      	ands	r3, r2
 8003c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d115      	bne.n	8003c6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 82ab 	beq.w	80041b8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
      }
      return;
 8003c6a:	e2a5      	b.n	80041b8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8117 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c86:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <HAL_UART_IRQHandler+0x298>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 810a 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d011      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xbc>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d011      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xec>
 8003ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d011      	beq.n	8003d20 <HAL_UART_IRQHandler+0x11c>
 8003cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d017      	beq.n	8003d5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d52:	f043 0208 	orr.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <HAL_UART_IRQHandler+0x18a>
 8003d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00c      	beq.n	8003d8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8211 	beq.w	80041bc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d04f      	beq.n	8003e86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fe4c 	bl	8004a84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d141      	bne.n	8003e7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1d9      	bne.n	8003dfa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d013      	beq.n	8003e76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <HAL_UART_IRQHandler+0x29c>)
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd f8d2 	bl	8001004 <HAL_DMA_Abort_IT>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d017      	beq.n	8003e96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e70:	4610      	mov	r0, r2
 8003e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e74:	e00f      	b.n	8003e96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9b4 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7c:	e00b      	b.n	8003e96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9b0 	bl	80041e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	e007      	b.n	8003e96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f9ac 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e94:	e192      	b.n	80041bc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e96:	bf00      	nop
    return;
 8003e98:	e190      	b.n	80041bc <HAL_UART_IRQHandler+0x5b8>
 8003e9a:	bf00      	nop
 8003e9c:	04000120 	.word	0x04000120
 8003ea0:	08004b4d 	.word	0x08004b4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	f040 814b 	bne.w	8004144 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8144 	beq.w	8004144 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 813d 	beq.w	8004144 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b40      	cmp	r3, #64	; 0x40
 8003ede:	f040 80b5 	bne.w	800404c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8164 	beq.w	80041c0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f02:	429a      	cmp	r2, r3
 8003f04:	f080 815c 	bcs.w	80041c0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f000 8086 	beq.w	800402a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1da      	bne.n	8003f1e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e1      	bne.n	8003f68 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3308      	adds	r3, #8
 8003faa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e3      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800400c:	65bb      	str	r3, [r7, #88]	; 0x58
 800400e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800401a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e4      	bne.n	8003fea <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc ffb4 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800403c:	b29b      	uxth	r3, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	b29b      	uxth	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f8d7 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800404a:	e0b9      	b.n	80041c0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004058:	b29b      	uxth	r3, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80ab 	beq.w	80041c4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800406e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80a6 	beq.w	80041c4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800408c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
 800409c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e4      	bne.n	8004078 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3308      	adds	r3, #8
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	623b      	str	r3, [r7, #32]
   return(result);
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040d2:	633a      	str	r2, [r7, #48]	; 0x30
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e3      	bne.n	80040ae <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	60fb      	str	r3, [r7, #12]
   return(result);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	617b      	str	r3, [r7, #20]
   return(result);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e4      	bne.n	80040fa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004136:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f85b 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004142:	e03f      	b.n	80041c4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <HAL_UART_IRQHandler+0x56a>
 8004150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004164:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fed8 	bl	8004f1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800416c:	e02d      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800416e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00e      	beq.n	8004198 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800417a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01c      	beq.n	80041c8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
    }
    return;
 8004196:	e017      	b.n	80041c8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <HAL_UART_IRQHandler+0x5c6>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fce1 	bl	8004b78 <UART_EndTransmit_IT>
    return;
 80041b6:	e008      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80041b8:	bf00      	nop
 80041ba:	e006      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80041bc:	bf00      	nop
 80041be:	e004      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
      return;
 80041c4:	bf00      	nop
 80041c6:	e000      	b.n	80041ca <HAL_UART_IRQHandler+0x5c6>
    return;
 80041c8:	bf00      	nop
  }

}
 80041ca:	37e8      	adds	r7, #232	; 0xe8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800423e:	f023 030c 	bic.w	r3, r3, #12
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	6979      	ldr	r1, [r7, #20]
 8004248:	430b      	orrs	r3, r1
 800424a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4aa7      	ldr	r2, [pc, #668]	; (8004528 <UART_SetConfig+0x318>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d120      	bne.n	80042d2 <UART_SetConfig+0xc2>
 8004290:	4ba6      	ldr	r3, [pc, #664]	; (800452c <UART_SetConfig+0x31c>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d817      	bhi.n	80042cc <UART_SetConfig+0xbc>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0x94>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042c1 	.word	0x080042c1
 80042ac:	080042c7 	.word	0x080042c7
 80042b0:	080042bb 	.word	0x080042bb
 80042b4:	2301      	movs	r3, #1
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e0b5      	b.n	8004426 <UART_SetConfig+0x216>
 80042ba:	2302      	movs	r3, #2
 80042bc:	77fb      	strb	r3, [r7, #31]
 80042be:	e0b2      	b.n	8004426 <UART_SetConfig+0x216>
 80042c0:	2304      	movs	r3, #4
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e0af      	b.n	8004426 <UART_SetConfig+0x216>
 80042c6:	2308      	movs	r3, #8
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e0ac      	b.n	8004426 <UART_SetConfig+0x216>
 80042cc:	2310      	movs	r3, #16
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e0a9      	b.n	8004426 <UART_SetConfig+0x216>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a96      	ldr	r2, [pc, #600]	; (8004530 <UART_SetConfig+0x320>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d124      	bne.n	8004326 <UART_SetConfig+0x116>
 80042dc:	4b93      	ldr	r3, [pc, #588]	; (800452c <UART_SetConfig+0x31c>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042e8:	d011      	beq.n	800430e <UART_SetConfig+0xfe>
 80042ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ee:	d817      	bhi.n	8004320 <UART_SetConfig+0x110>
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f4:	d011      	beq.n	800431a <UART_SetConfig+0x10a>
 80042f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042fa:	d811      	bhi.n	8004320 <UART_SetConfig+0x110>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <UART_SetConfig+0xf8>
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d006      	beq.n	8004314 <UART_SetConfig+0x104>
 8004306:	e00b      	b.n	8004320 <UART_SetConfig+0x110>
 8004308:	2300      	movs	r3, #0
 800430a:	77fb      	strb	r3, [r7, #31]
 800430c:	e08b      	b.n	8004426 <UART_SetConfig+0x216>
 800430e:	2302      	movs	r3, #2
 8004310:	77fb      	strb	r3, [r7, #31]
 8004312:	e088      	b.n	8004426 <UART_SetConfig+0x216>
 8004314:	2304      	movs	r3, #4
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e085      	b.n	8004426 <UART_SetConfig+0x216>
 800431a:	2308      	movs	r3, #8
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e082      	b.n	8004426 <UART_SetConfig+0x216>
 8004320:	2310      	movs	r3, #16
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e07f      	b.n	8004426 <UART_SetConfig+0x216>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a82      	ldr	r2, [pc, #520]	; (8004534 <UART_SetConfig+0x324>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d124      	bne.n	800437a <UART_SetConfig+0x16a>
 8004330:	4b7e      	ldr	r3, [pc, #504]	; (800452c <UART_SetConfig+0x31c>)
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004338:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800433c:	d011      	beq.n	8004362 <UART_SetConfig+0x152>
 800433e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004342:	d817      	bhi.n	8004374 <UART_SetConfig+0x164>
 8004344:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004348:	d011      	beq.n	800436e <UART_SetConfig+0x15e>
 800434a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800434e:	d811      	bhi.n	8004374 <UART_SetConfig+0x164>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <UART_SetConfig+0x14c>
 8004354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004358:	d006      	beq.n	8004368 <UART_SetConfig+0x158>
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x164>
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e061      	b.n	8004426 <UART_SetConfig+0x216>
 8004362:	2302      	movs	r3, #2
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e05e      	b.n	8004426 <UART_SetConfig+0x216>
 8004368:	2304      	movs	r3, #4
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e05b      	b.n	8004426 <UART_SetConfig+0x216>
 800436e:	2308      	movs	r3, #8
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e058      	b.n	8004426 <UART_SetConfig+0x216>
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e055      	b.n	8004426 <UART_SetConfig+0x216>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a6e      	ldr	r2, [pc, #440]	; (8004538 <UART_SetConfig+0x328>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d124      	bne.n	80043ce <UART_SetConfig+0x1be>
 8004384:	4b69      	ldr	r3, [pc, #420]	; (800452c <UART_SetConfig+0x31c>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800438c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004390:	d011      	beq.n	80043b6 <UART_SetConfig+0x1a6>
 8004392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004396:	d817      	bhi.n	80043c8 <UART_SetConfig+0x1b8>
 8004398:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439c:	d011      	beq.n	80043c2 <UART_SetConfig+0x1b2>
 800439e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a2:	d811      	bhi.n	80043c8 <UART_SetConfig+0x1b8>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <UART_SetConfig+0x1a0>
 80043a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x1ac>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x1b8>
 80043b0:	2300      	movs	r3, #0
 80043b2:	77fb      	strb	r3, [r7, #31]
 80043b4:	e037      	b.n	8004426 <UART_SetConfig+0x216>
 80043b6:	2302      	movs	r3, #2
 80043b8:	77fb      	strb	r3, [r7, #31]
 80043ba:	e034      	b.n	8004426 <UART_SetConfig+0x216>
 80043bc:	2304      	movs	r3, #4
 80043be:	77fb      	strb	r3, [r7, #31]
 80043c0:	e031      	b.n	8004426 <UART_SetConfig+0x216>
 80043c2:	2308      	movs	r3, #8
 80043c4:	77fb      	strb	r3, [r7, #31]
 80043c6:	e02e      	b.n	8004426 <UART_SetConfig+0x216>
 80043c8:	2310      	movs	r3, #16
 80043ca:	77fb      	strb	r3, [r7, #31]
 80043cc:	e02b      	b.n	8004426 <UART_SetConfig+0x216>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5a      	ldr	r2, [pc, #360]	; (800453c <UART_SetConfig+0x32c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d124      	bne.n	8004422 <UART_SetConfig+0x212>
 80043d8:	4b54      	ldr	r3, [pc, #336]	; (800452c <UART_SetConfig+0x31c>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80043e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043e4:	d011      	beq.n	800440a <UART_SetConfig+0x1fa>
 80043e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ea:	d817      	bhi.n	800441c <UART_SetConfig+0x20c>
 80043ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f0:	d011      	beq.n	8004416 <UART_SetConfig+0x206>
 80043f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f6:	d811      	bhi.n	800441c <UART_SetConfig+0x20c>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <UART_SetConfig+0x1f4>
 80043fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004400:	d006      	beq.n	8004410 <UART_SetConfig+0x200>
 8004402:	e00b      	b.n	800441c <UART_SetConfig+0x20c>
 8004404:	2300      	movs	r3, #0
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0x216>
 800440a:	2302      	movs	r3, #2
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e00a      	b.n	8004426 <UART_SetConfig+0x216>
 8004410:	2304      	movs	r3, #4
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e007      	b.n	8004426 <UART_SetConfig+0x216>
 8004416:	2308      	movs	r3, #8
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e004      	b.n	8004426 <UART_SetConfig+0x216>
 800441c:	2310      	movs	r3, #16
 800441e:	77fb      	strb	r3, [r7, #31]
 8004420:	e001      	b.n	8004426 <UART_SetConfig+0x216>
 8004422:	2310      	movs	r3, #16
 8004424:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442e:	d15b      	bne.n	80044e8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004430:	7ffb      	ldrb	r3, [r7, #31]
 8004432:	2b08      	cmp	r3, #8
 8004434:	d827      	bhi.n	8004486 <UART_SetConfig+0x276>
 8004436:	a201      	add	r2, pc, #4	; (adr r2, 800443c <UART_SetConfig+0x22c>)
 8004438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443c:	08004461 	.word	0x08004461
 8004440:	08004469 	.word	0x08004469
 8004444:	08004471 	.word	0x08004471
 8004448:	08004487 	.word	0x08004487
 800444c:	08004477 	.word	0x08004477
 8004450:	08004487 	.word	0x08004487
 8004454:	08004487 	.word	0x08004487
 8004458:	08004487 	.word	0x08004487
 800445c:	0800447f 	.word	0x0800447f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fc06 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8004464:	61b8      	str	r0, [r7, #24]
        break;
 8004466:	e013      	b.n	8004490 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7fe fc24 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 800446c:	61b8      	str	r0, [r7, #24]
        break;
 800446e:	e00f      	b.n	8004490 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b33      	ldr	r3, [pc, #204]	; (8004540 <UART_SetConfig+0x330>)
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e00c      	b.n	8004490 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe fb85 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 800447a:	61b8      	str	r0, [r7, #24]
        break;
 800447c:	e008      	b.n	8004490 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e004      	b.n	8004490 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	77bb      	strb	r3, [r7, #30]
        break;
 800448e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8082 	beq.w	800459c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	005a      	lsls	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	441a      	add	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d916      	bls.n	80044e2 <UART_SetConfig+0x2d2>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ba:	d212      	bcs.n	80044e2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f023 030f 	bic.w	r3, r3, #15
 80044c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	89fb      	ldrh	r3, [r7, #14]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	89fa      	ldrh	r2, [r7, #14]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	e05c      	b.n	800459c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	77bb      	strb	r3, [r7, #30]
 80044e6:	e059      	b.n	800459c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e8:	7ffb      	ldrb	r3, [r7, #31]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d835      	bhi.n	800455a <UART_SetConfig+0x34a>
 80044ee:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x2e4>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004519 	.word	0x08004519
 80044f8:	08004521 	.word	0x08004521
 80044fc:	08004545 	.word	0x08004545
 8004500:	0800455b 	.word	0x0800455b
 8004504:	0800454b 	.word	0x0800454b
 8004508:	0800455b 	.word	0x0800455b
 800450c:	0800455b 	.word	0x0800455b
 8004510:	0800455b 	.word	0x0800455b
 8004514:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004518:	f7fe fbaa 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 800451c:	61b8      	str	r0, [r7, #24]
        break;
 800451e:	e021      	b.n	8004564 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004520:	f7fe fbc8 	bl	8002cb4 <HAL_RCC_GetPCLK2Freq>
 8004524:	61b8      	str	r0, [r7, #24]
        break;
 8004526:	e01d      	b.n	8004564 <UART_SetConfig+0x354>
 8004528:	40013800 	.word	0x40013800
 800452c:	40021000 	.word	0x40021000
 8004530:	40004400 	.word	0x40004400
 8004534:	40004800 	.word	0x40004800
 8004538:	40004c00 	.word	0x40004c00
 800453c:	40005000 	.word	0x40005000
 8004540:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <UART_SetConfig+0x3a4>)
 8004546:	61bb      	str	r3, [r7, #24]
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fb1b 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 800454e:	61b8      	str	r0, [r7, #24]
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	61bb      	str	r3, [r7, #24]
        break;
 8004558:	e004      	b.n	8004564 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	77bb      	strb	r3, [r7, #30]
        break;
 8004562:	bf00      	nop
    }

    if (pclk != 0U)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085a      	lsrs	r2, r3, #1
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d909      	bls.n	8004598 <UART_SetConfig+0x388>
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458a:	d205      	bcs.n	8004598 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	b29a      	uxth	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	007a1200 	.word	0x007a1200

080045b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01a      	beq.n	80046ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b6:	d10a      	bne.n	80046ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b098      	sub	sp, #96	; 0x60
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800470c:	f7fc fb24 	bl	8000d58 <HAL_GetTick>
 8004710:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b08      	cmp	r3, #8
 800471e:	d12e      	bne.n	800477e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	2200      	movs	r2, #0
 800472a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f88c 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474e:	653b      	str	r3, [r7, #80]	; 0x50
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
 800475a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800475e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e6      	bne.n	800473a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e062      	b.n	8004844 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d149      	bne.n	8004820 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f856 	bl	800484c <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03c      	beq.n	8004820 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	623b      	str	r3, [r7, #32]
   return(result);
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	633b      	str	r3, [r7, #48]	; 0x30
 80047c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3308      	adds	r3, #8
 80047de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f8:	61fa      	str	r2, [r7, #28]
 80047fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	69b9      	ldr	r1, [r7, #24]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	617b      	str	r3, [r7, #20]
   return(result);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e011      	b.n	8004844 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3758      	adds	r7, #88	; 0x58
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485c:	e049      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d045      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fc fa77 	bl	8000d58 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <UART_WaitOnFlagUntilTimeout+0x30>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e048      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d031      	beq.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d110      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2208      	movs	r2, #8
 80048a2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f8ed 	bl	8004a84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2208      	movs	r2, #8
 80048ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e029      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048cc:	d111      	bne.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f8d3 	bl	8004a84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e00f      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4013      	ands	r3, r2
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	429a      	cmp	r2, r3
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	429a      	cmp	r2, r3
 800490e:	d0a6      	beq.n	800485e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b097      	sub	sp, #92	; 0x5c
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494e:	d10e      	bne.n	800496e <UART_Start_Receive_IT+0x52>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <UART_Start_Receive_IT+0x48>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800495e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004962:	e01a      	b.n	800499a <UART_Start_Receive_IT+0x7e>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	22ff      	movs	r2, #255	; 0xff
 8004968:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800496c:	e015      	b.n	800499a <UART_Start_Receive_IT+0x7e>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <UART_Start_Receive_IT+0x76>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <UART_Start_Receive_IT+0x6c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	22ff      	movs	r2, #255	; 0xff
 8004982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004986:	e008      	b.n	800499a <UART_Start_Receive_IT+0x7e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	227f      	movs	r2, #127	; 0x7f
 800498c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004990:	e003      	b.n	800499a <UART_Start_Receive_IT+0x7e>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2222      	movs	r2, #34	; 0x22
 80049a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	657b      	str	r3, [r7, #84]	; 0x54
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e5      	bne.n	80049aa <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e6:	d107      	bne.n	80049f8 <UART_Start_Receive_IT+0xdc>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d103      	bne.n	80049f8 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <UART_Start_Receive_IT+0x160>)
 80049f4:	669a      	str	r2, [r3, #104]	; 0x68
 80049f6:	e002      	b.n	80049fe <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <UART_Start_Receive_IT+0x164>)
 80049fc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_Start_Receive_IT+0xea>
 8004a38:	e018      	b.n	8004a6c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	613b      	str	r3, [r7, #16]
   return(result);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f043 0320 	orr.w	r3, r3, #32
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5c:	69f9      	ldr	r1, [r7, #28]
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	e841 2300 	strex	r3, r2, [r1]
 8004a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1e6      	bne.n	8004a3a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	375c      	adds	r7, #92	; 0x5c
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	08004d75 	.word	0x08004d75
 8004a80:	08004bcd 	.word	0x08004bcd

08004a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b095      	sub	sp, #84	; 0x54
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aaa:	643b      	str	r3, [r7, #64]	; 0x40
 8004aac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e6      	bne.n	8004a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e5      	bne.n	8004abe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d118      	bne.n	8004b2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b40:	bf00      	nop
 8004b42:	3754      	adds	r7, #84	; 0x54
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fb3a 	bl	80041e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	6979      	ldr	r1, [r7, #20]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e6      	bne.n	8004b80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fb06 	bl	80041d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc4:	bf00      	nop
 8004bc6:	3720      	adds	r7, #32
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b09c      	sub	sp, #112	; 0x70
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bda:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	f040 80b9 	bne.w	8004d5c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bf0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004bf8:	b2d9      	uxtb	r1, r3
 8004bfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c04:	400a      	ands	r2, r1
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 809c 	bne.w	8004d6c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e6      	bne.n	8004c34 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3308      	adds	r3, #8
 8004c84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c86:	647a      	str	r2, [r7, #68]	; 0x44
 8004c88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e5      	bne.n	8004c66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d12e      	bne.n	8004d54 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f023 0310 	bic.w	r3, r3, #16
 8004d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1a:	61fb      	str	r3, [r7, #28]
 8004d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	617b      	str	r3, [r7, #20]
   return(result);
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d103      	bne.n	8004d44 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2210      	movs	r2, #16
 8004d42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff fa53 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d52:	e00b      	b.n	8004d6c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fb fa45 	bl	80001e4 <HAL_UART_RxCpltCallback>
}
 8004d5a:	e007      	b.n	8004d6c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	619a      	str	r2, [r3, #24]
}
 8004d6c:	bf00      	nop
 8004d6e:	3770      	adds	r7, #112	; 0x70
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b09c      	sub	sp, #112	; 0x70
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8c:	2b22      	cmp	r3, #34	; 0x22
 8004d8e:	f040 80b9 	bne.w	8004f04 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004da2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004da6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004daa:	4013      	ands	r3, r2
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004db0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 809c 	bne.w	8004f14 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004df0:	667b      	str	r3, [r7, #100]	; 0x64
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8004dfc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	e853 3f00 	ldrex	r3, [r3]
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e2e:	643a      	str	r2, [r7, #64]	; 0x40
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e5      	bne.n	8004e0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d018      	beq.n	8004e96 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d12e      	bne.n	8004efc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f023 0310 	bic.w	r3, r3, #16
 8004eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6979      	ldr	r1, [r7, #20]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d103      	bne.n	8004eec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff f97f 	bl	80041f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004efa:	e00b      	b.n	8004f14 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fb f971 	bl	80001e4 <HAL_UART_RxCpltCallback>
}
 8004f02:	e007      	b.n	8004f14 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]
}
 8004f14:	bf00      	nop
 8004f16:	3770      	adds	r7, #112	; 0x70
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004f38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004f3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4013      	ands	r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f66:	b084      	sub	sp, #16
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	f107 0014 	add.w	r0, r7, #20
 8004f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	b004      	add	sp, #16
 8004fa6:	4770      	bx	lr

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4d0d      	ldr	r5, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1b64      	subs	r4, r4, r5
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	42a6      	cmp	r6, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4d0b      	ldr	r5, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 f820 	bl	8005000 <_init>
 8004fc0:	1b64      	subs	r4, r4, r5
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2600      	movs	r6, #0
 8004fc6:	42a6      	cmp	r6, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd0:	4798      	blx	r3
 8004fd2:	3601      	adds	r6, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fda:	4798      	blx	r3
 8004fdc:	3601      	adds	r6, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	08005050 	.word	0x08005050
 8004fe4:	08005050 	.word	0x08005050
 8004fe8:	08005050 	.word	0x08005050
 8004fec:	08005054 	.word	0x08005054

08004ff0 <memset>:
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d100      	bne.n	8004ffa <memset+0xa>
 8004ff8:	4770      	bx	lr
 8004ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8004ffe:	e7f9      	b.n	8004ff4 <memset+0x4>

08005000 <_init>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

0800500c <_fini>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr
