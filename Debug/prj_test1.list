
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08005434  08005434  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005434  08005434  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800543c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020290  2**0
                  CONTENTS
 10 .bss          000004c0  20000290  20000290  00020290  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000750  20000750  00020290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180c6  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a2d  00000000  00000000  00038386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003adb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e98a  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186b4  00000000  00000000  0005bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbb91  00000000  00000000  0007440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ff9f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057ec  00000000  00000000  0012fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005358 	.word	0x08005358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08005358 	.word	0x08005358

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b0c4      	sub	sp, #272	; 0x110
 8000274:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000276:	f000 ff7f 	bl	8001178 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027a:	f000 f87d 	bl	8000378 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800027e:	f000 fa05 	bl	800068c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000282:	f000 f8df 	bl	8000444 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000286:	f000 f91d 	bl	80004c4 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 800028a:	f000 f9dd 	bl	8000648 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 800028e:	f000 f957 	bl	8000540 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000292:	f000 f9a9 	bl	80005e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000296:	4832      	ldr	r0, [pc, #200]	; (8000360 <main+0xf0>)
 8000298:	f003 f9c8 	bl	800362c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_UART_Transmit(&huart2, "waiting for number\n", 19, 10);
 800029c:	230a      	movs	r3, #10
 800029e:	2213      	movs	r2, #19
 80002a0:	4930      	ldr	r1, [pc, #192]	; (8000364 <main+0xf4>)
 80002a2:	4831      	ldr	r0, [pc, #196]	; (8000368 <main+0xf8>)
 80002a4:	f003 fe52 	bl	8003f4c <HAL_UART_Transmit>
	uint8_t numbers[NUM_LEN + 1] = { 0 };
 80002a8:	2300      	movs	r3, #0
 80002aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80002ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80002b2:	2229      	movs	r2, #41	; 0x29
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 fbd8 	bl	8004a6c <memset>
	HAL_UART_Receive(&huart2, numbers, NUM_LEN, HAL_MAX_DELAY);
 80002bc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	222c      	movs	r2, #44	; 0x2c
 80002c6:	4828      	ldr	r0, [pc, #160]	; (8000368 <main+0xf8>)
 80002c8:	f003 feca 	bl	8004060 <HAL_UART_Receive>
	uint8_t out[100];
	uint32_t len_out = sprintf(out, "number {%s} received", numbers);
 80002cc:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80002d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002d4:	4925      	ldr	r1, [pc, #148]	; (800036c <main+0xfc>)
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fbd0 	bl	8004a7c <siprintf>
 80002dc:	4603      	mov	r3, r0
 80002de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	HAL_UART_Transmit(&huart2, out, len_out, HAL_MAX_DELAY);
 80002e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	481d      	ldr	r0, [pc, #116]	; (8000368 <main+0xf8>)
 80002f2:	f003 fe2b 	bl	8003f4c <HAL_UART_Transmit>
	programInit(numbers);
 80002f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fc6c 	bl	8000bd8 <programInit>
		/* USER CODE BEGIN 3 */


		HAL_StatusTypeDef status;
		uint8_t speed_level;
		status = HAL_UART_Receive(&huart2,&speed_level, 1, 5);
 8000300:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 8000304:	2305      	movs	r3, #5
 8000306:	2201      	movs	r2, #1
 8000308:	4817      	ldr	r0, [pc, #92]	; (8000368 <main+0xf8>)
 800030a:	f003 fea9 	bl	8004060 <HAL_UART_Receive>
 800030e:	4603      	mov	r3, r0
 8000310:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		if(status == 0){
 8000314:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f1      	bne.n	8000300 <main+0x90>
			uint32_t level = (speed_level - '0'); //TODO
 800031c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000320:	3b30      	subs	r3, #48	; 0x30
 8000322:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			shift_interval = level * 250;
 8000326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800032a:	22fa      	movs	r2, #250	; 0xfa
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <main+0x100>)
 8000332:	6013      	str	r3, [r2, #0]
			uint8_t out[100];
			uint32_t len_out = sprintf(out, "speed changed to level {%c}", speed_level);
 8000334:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000338:	461a      	mov	r2, r3
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	490d      	ldr	r1, [pc, #52]	; (8000374 <main+0x104>)
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fb9c 	bl	8004a7c <siprintf>
 8000344:	4603      	mov	r3, r0
 8000346:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			HAL_UART_Transmit(&huart2, out, len_out, HAL_MAX_DELAY);
 800034a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800034e:	b29a      	uxth	r2, r3
 8000350:	1d39      	adds	r1, r7, #4
 8000352:	f04f 33ff 	mov.w	r3, #4294967295
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <main+0xf8>)
 8000358:	f003 fdf8 	bl	8003f4c <HAL_UART_Transmit>
	while (1) {
 800035c:	e7d0      	b.n	8000300 <main+0x90>
 800035e:	bf00      	nop
 8000360:	20000364 	.word	0x20000364
 8000364:	08005370 	.word	0x08005370
 8000368:	200003b0 	.word	0x200003b0
 800036c:	08005384 	.word	0x08005384
 8000370:	20000000 	.word	0x20000000
 8000374:	0800539c 	.word	0x0800539c

08000378 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b09e      	sub	sp, #120	; 0x78
 800037c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800037e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f004 fb70 	bl	8004a6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800038c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800039c:	463b      	mov	r3, r7
 800039e:	223c      	movs	r2, #60	; 0x3c
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f004 fb62 	bl	8004a6c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80003a8:	2303      	movs	r3, #3
 80003aa:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003b0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	2310      	movs	r3, #16
 80003bc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c6:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003cc:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fc04 	bl	8001be0 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x6a>
		Error_Handler();
 80003de:	f000 fa79 	bl	80008d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003fc:	2101      	movs	r1, #1
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fc2c 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x96>
		Error_Handler();
 800040a:	f000 fa63 	bl	80008d4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <SystemClock_Config+0xc8>)
 8000410:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800041a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800041e:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000420:	2300      	movs	r3, #0
 8000422:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000424:	463b      	mov	r3, r7
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fe4e 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xbe>
		Error_Handler();
 8000432:	f000 fa4f 	bl	80008d4 <Error_Handler>
	}
}
 8000436:	bf00      	nop
 8000438:	3778      	adds	r7, #120	; 0x78
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	00021022 	.word	0x00021022

08000444 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_I2C1_Init+0x74>)
 800044a:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <MX_I2C1_Init+0x78>)
 800044c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800044e:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <MX_I2C1_Init+0x7c>)
 8000452:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045a:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_I2C1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000460:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_I2C1_Init+0x74>)
 800046e:	2200      	movs	r2, #0
 8000470:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_I2C1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800047e:	480e      	ldr	r0, [pc, #56]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000480:	f001 f9b6 	bl	80017f0 <HAL_I2C_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800048a:	f000 fa23 	bl	80008d4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800048e:	2100      	movs	r1, #0
 8000490:	4809      	ldr	r0, [pc, #36]	; (80004b8 <MX_I2C1_Init+0x74>)
 8000492:	f001 fa3c 	bl	800190e <HAL_I2CEx_ConfigAnalogFilter>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800049c:	f000 fa1a 	bl	80008d4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80004a0:	2100      	movs	r1, #0
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_I2C1_Init+0x74>)
 80004a4:	f001 fa7e 	bl	80019a4 <HAL_I2CEx_ConfigDigitalFilter>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80004ae:	f000 fa11 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200002ac 	.word	0x200002ac
 80004bc:	40005400 	.word	0x40005400
 80004c0:	2000090e 	.word	0x2000090e

080004c4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ca:	4a1c      	ldr	r2, [pc, #112]	; (800053c <MX_SPI1_Init+0x78>)
 80004cc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004d4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <MX_SPI1_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_SPI1_Init+0x74>)
 80004de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004e2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_SPI1_Init+0x74>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_SPI1_Init+0x74>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_SPI1_Init+0x74>)
 80004f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004f6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_SPI1_Init+0x74>)
 80004fa:	2208      	movs	r2, #8
 80004fc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_SPI1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_SPI1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_SPI1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_SPI1_Init+0x74>)
 8000512:	2207      	movs	r2, #7
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_SPI1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_SPI1_Init+0x74>)
 800051e:	2208      	movs	r2, #8
 8000520:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000522:	4805      	ldr	r0, [pc, #20]	; (8000538 <MX_SPI1_Init+0x74>)
 8000524:	f002 ff80 	bl	8003428 <HAL_SPI_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800052e:	f000 f9d1 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000300 	.word	0x20000300
 800053c:	40013000 	.word	0x40013000

08000540 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800055e:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <MX_TIM1_Init+0xa0>)
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <MX_TIM1_Init+0xa4>)
 8000562:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10 - 1;
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_TIM1_Init+0xa0>)
 8000566:	2209      	movs	r2, #9
 8000568:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_TIM1_Init+0xa0>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4800 - 1;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_TIM1_Init+0xa0>)
 8000572:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000576:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <MX_TIM1_Init+0xa0>)
 800057a:	2200      	movs	r2, #0
 800057c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_TIM1_Init+0xa0>)
 8000580:	2200      	movs	r2, #0
 8000582:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_TIM1_Init+0xa0>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800058a:	4815      	ldr	r0, [pc, #84]	; (80005e0 <MX_TIM1_Init+0xa0>)
 800058c:	f002 fff7 	bl	800357e <HAL_TIM_Base_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000596:	f000 f99d 	bl	80008d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	480e      	ldr	r0, [pc, #56]	; (80005e0 <MX_TIM1_Init+0xa0>)
 80005a8:	f003 f9c9 	bl	800393e <HAL_TIM_ConfigClockSource>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80005b2:	f000 f98f 	bl	80008d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_TIM1_Init+0xa0>)
 80005c8:	f003 fbd4 	bl	8003d74 <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80005d2:	f000 f97f 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000364 	.word	0x20000364
 80005e4:	40012c00 	.word	0x40012c00

080005e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <MX_USART2_UART_Init+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART2_UART_Init+0x58>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART2_UART_Init+0x58>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART2_UART_Init+0x58>)
 800062c:	f003 fc40 	bl	8003eb0 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000636:	f000 f94d 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200003b0 	.word	0x200003b0
 8000644:	40004400 	.word	0x40004400

08000648 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <MX_USB_PCD_Init+0x40>)
 8000650:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000654:	2208      	movs	r2, #8
 8000656:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800065a:	2202      	movs	r2, #2
 800065c:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000660:	2202      	movs	r2, #2
 8000662:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_USB_PCD_Init+0x3c>)
 8000672:	f001 f9e3 	bl	8001a3c <HAL_PCD_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_USB_PCD_Init+0x38>
		Error_Handler();
 800067c:	f000 f92a 	bl	80008d4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000438 	.word	0x20000438
 8000688:	40005c00 	.word	0x40005c00

0800068c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006a2:	4b86      	ldr	r3, [pc, #536]	; (80008bc <MX_GPIO_Init+0x230>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a85      	ldr	r2, [pc, #532]	; (80008bc <MX_GPIO_Init+0x230>)
 80006a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b83      	ldr	r3, [pc, #524]	; (80008bc <MX_GPIO_Init+0x230>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b80      	ldr	r3, [pc, #512]	; (80008bc <MX_GPIO_Init+0x230>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <MX_GPIO_Init+0x230>)
 80006c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b7d      	ldr	r3, [pc, #500]	; (80008bc <MX_GPIO_Init+0x230>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80006d2:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <MX_GPIO_Init+0x230>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a79      	ldr	r2, [pc, #484]	; (80008bc <MX_GPIO_Init+0x230>)
 80006d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b77      	ldr	r3, [pc, #476]	; (80008bc <MX_GPIO_Init+0x230>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b74      	ldr	r3, [pc, #464]	; (80008bc <MX_GPIO_Init+0x230>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a73      	ldr	r2, [pc, #460]	; (80008bc <MX_GPIO_Init+0x230>)
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b71      	ldr	r3, [pc, #452]	; (80008bc <MX_GPIO_Init+0x230>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <MX_GPIO_Init+0x230>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a6d      	ldr	r2, [pc, #436]	; (80008bc <MX_GPIO_Init+0x230>)
 8000708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <MX_GPIO_Init+0x230>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4b68      	ldr	r3, [pc, #416]	; (80008bc <MX_GPIO_Init+0x230>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <MX_GPIO_Init+0x230>)
 8000720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b65      	ldr	r3, [pc, #404]	; (80008bc <MX_GPIO_Init+0x230>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8000732:	2200      	movs	r2, #0
 8000734:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000738:	4861      	ldr	r0, [pc, #388]	; (80008c0 <MX_GPIO_Init+0x234>)
 800073a:	f001 f80f 	bl	800175c <HAL_GPIO_WritePin>
			CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin | LD9_Pin
					| LD10_Pin | LD8_Pin | LD6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2 | GPIO_PIN_4, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2114      	movs	r1, #20
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f001 f809 	bl	800175c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_6, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2150      	movs	r1, #80	; 0x50
 800074e:	485d      	ldr	r0, [pc, #372]	; (80008c4 <MX_GPIO_Init+0x238>)
 8000750:	f001 f804 	bl	800175c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_13,
 8000754:	2200      	movs	r2, #0
 8000756:	f242 0105 	movw	r1, #8197	; 0x2005
 800075a:	485b      	ldr	r0, [pc, #364]	; (80008c8 <MX_GPIO_Init+0x23c>)
 800075c:	f000 fffe 	bl	800175c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000766:	4859      	ldr	r0, [pc, #356]	; (80008cc <MX_GPIO_Init+0x240>)
 8000768:	f000 fff8 	bl	800175c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT4_Pin;
 800076c:	2324      	movs	r3, #36	; 0x24
 800076e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000770:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000774:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	484f      	ldr	r0, [pc, #316]	; (80008c0 <MX_GPIO_Init+0x234>)
 8000782:	f000 fe71 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
	 LD7_Pin LD9_Pin LD10_Pin LD8_Pin
	 LD6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin | LD7_Pin
 8000786:	f64f 7308 	movw	r3, #65288	; 0xff08
 800078a:	61fb      	str	r3, [r7, #28]
			| LD9_Pin | LD10_Pin | LD8_Pin | LD6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4848      	ldr	r0, [pc, #288]	; (80008c0 <MX_GPIO_Init+0x234>)
 80007a0:	f000 fe62 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ae:	2302      	movs	r3, #2
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4842      	ldr	r0, [pc, #264]	; (80008c4 <MX_GPIO_Init+0x238>)
 80007ba:	f000 fe55 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f000 fe48 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e2:	2302      	movs	r3, #2
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f000 fe3a 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 80007f4:	2314      	movs	r3, #20
 80007f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 fe2b 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000812:	2310      	movs	r3, #16
 8000814:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081c:	2302      	movs	r3, #2
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x244>)
 8000828:	f000 fe1e 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800082c:	2350      	movs	r3, #80	; 0x50
 800082e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4820      	ldr	r0, [pc, #128]	; (80008c4 <MX_GPIO_Init+0x238>)
 8000844:	f000 fe10 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_13;
 8000848:	f242 0305 	movw	r3, #8197	; 0x2005
 800084c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4819      	ldr	r0, [pc, #100]	; (80008c8 <MX_GPIO_Init+0x23c>)
 8000862:	f000 fe01 	bl	8001468 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD9 PD13 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_13;
 8000866:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 800086a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_GPIO_Init+0x240>)
 8000880:	f000 fdf2 	bl	8001468 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2006      	movs	r0, #6
 800088a:	f000 fdb6 	bl	80013fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800088e:	2006      	movs	r0, #6
 8000890:	f000 fdcf 	bl	8001432 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2007      	movs	r0, #7
 800089a:	f000 fdae 	bl	80013fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fdc7 	bl	8001432 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 fda6 	bl	80013fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fdbf 	bl	8001432 <HAL_NVIC_EnableIRQ>

}
 80008b4:	bf00      	nop
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48001000 	.word	0x48001000
 80008c4:	48000800 	.word	0x48000800
 80008c8:	48000400 	.word	0x48000400
 80008cc:	48000c00 	.word	0x48000c00
 80008d0:	48001400 	.word	0x48001400

080008d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <seven_segment_display_decimal>:
		{ { .port = GPIOC, .pin = GPIO_PIN_6 }, { .port = GPIOD, .pin =
		GPIO_PIN_13 }, { .port = GPIOD, .pin = GPIO_PIN_9 }, { .port =
		GPIOB, .pin = GPIO_PIN_13 } }, .digits = { 0, 0, 0, 0 }, .number = 0,
		.shift_flag = 0, .shift_counter = 0 };

void seven_segment_display_decimal(uint64_t n) {
 80008e0:	b5b0      	push	{r4, r5, r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	e9c7 0100 	strd	r0, r1, [r7]
	if (n < 10) {
 80008ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008ee:	2a0a      	cmp	r2, #10
 80008f0:	f173 0300 	sbcs.w	r3, r3, #0
 80008f4:	d24f      	bcs.n	8000996 <seven_segment_display_decimal+0xb6>
		HAL_GPIO_WritePin(seven_segment.BCD_input[0].port,
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 80008f8:	6a18      	ldr	r0, [r3, #32]
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 80008fc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
				seven_segment.BCD_input[0].pin,
				(n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[0].port,
 8000906:	461a      	mov	r2, r3
 8000908:	f000 ff28 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[1].port,
 800090c:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 800090e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 8000912:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
				seven_segment.BCD_input[1].pin,
				(n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	0842      	lsrs	r2, r0, #1
 8000922:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000926:	084b      	lsrs	r3, r1, #1
 8000928:	b2d3      	uxtb	r3, r2
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[1].port,
 8000930:	461a      	mov	r2, r3
 8000932:	4629      	mov	r1, r5
 8000934:	4620      	mov	r0, r4
 8000936:	f000 ff11 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[2].port,
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 800093c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 8000940:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
				seven_segment.BCD_input[2].pin,
				(n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000942:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	0882      	lsrs	r2, r0, #2
 8000950:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000954:	088b      	lsrs	r3, r1, #2
 8000956:	b2d3      	uxtb	r3, r2
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[2].port,
 800095e:	461a      	mov	r2, r3
 8000960:	4629      	mov	r1, r5
 8000962:	4620      	mov	r0, r4
 8000964:	f000 fefa 	bl	800175c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(seven_segment.BCD_input[3].port,
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 800096a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <seven_segment_display_decimal+0xc0>)
 800096e:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
				seven_segment.BCD_input[3].pin,
				(n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000974:	f04f 0200 	mov.w	r2, #0
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	08c2      	lsrs	r2, r0, #3
 800097e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8000982:	08cb      	lsrs	r3, r1, #3
 8000984:	b2d3      	uxtb	r3, r2
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(seven_segment.BCD_input[3].port,
 800098c:	461a      	mov	r2, r3
 800098e:	4629      	mov	r1, r5
 8000990:	4620      	mov	r0, r4
 8000992:	f000 fee3 	bl	800175c <HAL_GPIO_WritePin>
	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bdb0      	pop	{r4, r5, r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008

080009a4 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	e00f      	b.n	80009d0 <seven_segment_deactivate_digits+0x2c>
		HAL_GPIO_WritePin(seven_segment.digit_activators[i].port,
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <seven_segment_deactivate_digits+0x3c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <seven_segment_deactivate_digits+0x3c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4413      	add	r3, r2
 80009c0:	889b      	ldrh	r3, [r3, #4]
 80009c2:	2201      	movs	r2, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	f000 fec9 	bl	800175c <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; ++i) {
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3301      	adds	r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	ddec      	ble.n	80009b0 <seven_segment_deactivate_digits+0xc>
				seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
	}
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000008 	.word	0x20000008

080009e4 <seven_segment_activate_digit>:
void seven_segment_deactivate_digit(int i) {
	HAL_GPIO_WritePin(seven_segment.digit_activators[i].port,
			seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
}

void seven_segment_activate_digit(uint32_t d) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if (d < 4) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d80c      	bhi.n	8000a0c <seven_segment_activate_digit+0x28>
		HAL_GPIO_WritePin(seven_segment.digit_activators[d].port,
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <seven_segment_activate_digit+0x30>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80009fa:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <seven_segment_activate_digit+0x30>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4413      	add	r3, r2
 8000a02:	889b      	ldrh	r3, [r3, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	f000 fea8 	bl	800175c <HAL_GPIO_WritePin>
				seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000008 	.word	0x20000008

08000a18 <seven_segment_set_num>:

void seven_segment_set_num(uint8_t *n) {
 8000a18:	b4b0      	push	{r4, r5, r7}
 8000a1a:	b087      	sub	sp, #28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if (NUM_LEN > 4) {
		seven_segment.shift_flag = 1;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <seven_segment_set_num+0xb0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		seven_segment.shift_counter = NUM_LEN + 4;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <seven_segment_set_num+0xb0>)
 8000a2a:	2230      	movs	r2, #48	; 0x30
 8000a2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	}
	for (uint32_t i = 0; i < 4; ++i) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00d      	b.n	8000a52 <seven_segment_set_num+0x3a>
		seven_segment.digits[i] = -1;
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <seven_segment_set_num+0xb0>)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3308      	adds	r3, #8
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	18d1      	adds	r1, r2, r3
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	f04f 33ff 	mov.w	r3, #4294967295
 8000a48:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < 4; ++i) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9ee      	bls.n	8000a36 <seven_segment_set_num+0x1e>
	}

	for (uint32_t j = 0; j < NUM_LEN; ++j) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	e016      	b.n	8000a8c <seven_segment_set_num+0x74>
		seven_segment.digits[4 + NUM_LEN - 1 - j] = n[NUM_LEN - 1 - j] - '0';
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	f1c3 032b 	rsb	r3, r3, #43	; 0x2b
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3b30      	subs	r3, #48	; 0x30
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	f1c2 022f 	rsb	r2, r2, #47	; 0x2f
 8000a72:	17d9      	asrs	r1, r3, #31
 8000a74:	461c      	mov	r4, r3
 8000a76:	460d      	mov	r5, r1
 8000a78:	4913      	ldr	r1, [pc, #76]	; (8000ac8 <seven_segment_set_num+0xb0>)
 8000a7a:	f102 0308 	add.w	r3, r2, #8
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	e9c3 4500 	strd	r4, r5, [r3]
	for (uint32_t j = 0; j < NUM_LEN; ++j) {
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2b2b      	cmp	r3, #43	; 0x2b
 8000a90:	d9e5      	bls.n	8000a5e <seven_segment_set_num+0x46>
	}

	for (uint32_t i = 4 + NUM_LEN; i < 8 + NUM_LEN; ++i) {
 8000a92:	2330      	movs	r3, #48	; 0x30
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e00d      	b.n	8000ab4 <seven_segment_set_num+0x9c>
		seven_segment.digits[i] = -1;
 8000a98:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <seven_segment_set_num+0xb0>)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3308      	adds	r3, #8
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	18d1      	adds	r1, r2, r3
 8000aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 4 + NUM_LEN; i < 8 + NUM_LEN; ++i) {
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b33      	cmp	r3, #51	; 0x33
 8000ab8:	d9ee      	bls.n	8000a98 <seven_segment_set_num+0x80>
	}
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bcb0      	pop	{r4, r5, r7}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000008 	.word	0x20000008

08000acc <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	static uint32_t state = 0;
	static uint32_t last_time = 0;
	static uint32_t last_time_shift = 0;
	static uint32_t st_index = 0;
	if (HAL_GetTick() - last_time > 5) {
 8000ad0:	f000 fbac 	bl	800122c <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b3a      	ldr	r3, [pc, #232]	; (8000bc0 <seven_segment_refresh+0xf4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d96d      	bls.n	8000bbc <seven_segment_refresh+0xf0>
		seven_segment_deactivate_digits();
 8000ae0:	f7ff ff60 	bl	80009a4 <seven_segment_deactivate_digits>
//        seven_segment_activate_digit(state);
//	   seven_segment_display_decimal(seven_segment.digits[st_index + state]);
		if (st_index + state == 13) {
 8000ae4:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	2b0d      	cmp	r3, #13
 8000af0:	d102      	bne.n	8000af8 <seven_segment_refresh+0x2c>
			seven_segment_activate_digit(0);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff76 	bl	80009e4 <seven_segment_activate_digit>
		}
		if (seven_segment.digits[st_index + state] != -1) {
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b04:	3308      	adds	r3, #8
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	4413      	add	r3, r2
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	bf08      	it	eq
 8000b14:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000b18:	d013      	beq.n	8000b42 <seven_segment_refresh+0x76>
			seven_segment_activate_digit(state);
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff60 	bl	80009e4 <seven_segment_activate_digit>
			seven_segment_display_decimal(
					seven_segment.digits[st_index + state]);
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b30:	3308      	adds	r3, #8
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	4413      	add	r3, r2
 8000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
			seven_segment_display_decimal(
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff fecf 	bl	80008e0 <seven_segment_display_decimal>
		}

		if (seven_segment.shift_flag == 1
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d12b      	bne.n	8000ba4 <seven_segment_refresh+0xd8>
				&& HAL_GetTick() - last_time_shift > shift_interval
 8000b4c:	f000 fb6e 	bl	800122c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <seven_segment_refresh+0x104>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1ad2      	subs	r2, r2, r3
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <seven_segment_refresh+0x108>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d921      	bls.n	8000ba4 <seven_segment_refresh+0xd8>
				&& state == 3) {
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d11d      	bne.n	8000ba4 <seven_segment_refresh+0xd8>
			if (seven_segment.shift_counter == 0) {
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d107      	bne.n	8000b82 <seven_segment_refresh+0xb6>
				st_index = 0;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
				seven_segment.shift_counter = NUM_LEN + 4;
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8000b80:	e00b      	b.n	8000b9a <seven_segment_refresh+0xce>
			} else {
				st_index = st_index + 1;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <seven_segment_refresh+0xf8>)
 8000b8a:	6013      	str	r3, [r2, #0]
				seven_segment.shift_counter--;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <seven_segment_refresh+0x100>)
 8000b96:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
			}
			last_time_shift = HAL_GetTick();
 8000b9a:	f000 fb47 	bl	800122c <HAL_GetTick>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <seven_segment_refresh+0x104>)
 8000ba2:	6013      	str	r3, [r2, #0]
		}

		state = (state + 1) % 4;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <seven_segment_refresh+0xfc>)
 8000bb0:	6013      	str	r3, [r2, #0]
		last_time = HAL_GetTick();
 8000bb2:	f000 fb3b 	bl	800122c <HAL_GetTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a01      	ldr	r2, [pc, #4]	; (8000bc0 <seven_segment_refresh+0xf4>)
 8000bba:	6013      	str	r3, [r2, #0]

	}

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000724 	.word	0x20000724
 8000bc4:	20000728 	.word	0x20000728
 8000bc8:	2000072c 	.word	0x2000072c
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000730 	.word	0x20000730
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <programInit>:
	}

	return result;
}

void programInit(uint8_t *number) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

	seven_segment_set_num(number);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff19 	bl	8000a18 <seven_segment_set_num>
//	seven_segment_set_num(12345678987654321);
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <programLoop>:

void programLoop() {
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
	seven_segment_refresh();
 8000bf2:	f7ff ff6b 	bl	8000acc <seven_segment_refresh>

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_GPIO_EXTI_Callback>:

extern UART_HandleTypeDef huart2;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	static uint32_t last_time = 0;
	if (HAL_GetTick() - last_time < 100)
 8000c06:	f000 fb11 	bl	800122c <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b63      	cmp	r3, #99	; 0x63
 8000c14:	d927      	bls.n	8000c66 <HAL_GPIO_EXTI_Callback+0x6a>
		return;

	if (GPIO_Pin == GPIO_PIN_1) {
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d11e      	bne.n	8000c5a <HAL_GPIO_EXTI_Callback+0x5e>
		if (seven_segment.shift_flag == 0) {
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10a      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x40>
			seven_segment.shift_flag = 1;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			HAL_UART_Transmit(&huart2, "Resumed", 7, 10);
 8000c2e:	230a      	movs	r3, #10
 8000c30:	2207      	movs	r2, #7
 8000c32:	4911      	ldr	r1, [pc, #68]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x80>)
 8000c36:	f003 f989 	bl	8003f4c <HAL_UART_Transmit>
 8000c3a:	e009      	b.n	8000c50 <HAL_GPIO_EXTI_Callback+0x54>

		} else {
			seven_segment.shift_flag = 0;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x78>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			HAL_UART_Transmit(&huart2, "Paused", 6, 10);
 8000c44:	230a      	movs	r3, #10
 8000c46:	2206      	movs	r2, #6
 8000c48:	490d      	ldr	r1, [pc, #52]	; (8000c80 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x80>)
 8000c4c:	f003 f97e 	bl	8003f4c <HAL_UART_Transmit>
		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x88>)
 8000c56:	f000 fd99 	bl	800178c <HAL_GPIO_TogglePin>
	}
	last_time = HAL_GetTick();
 8000c5a:	f000 fae7 	bl	800122c <HAL_GetTick>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x6c>
		return;
 8000c66:	bf00      	nop

}
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000734 	.word	0x20000734
 8000c74:	20000008 	.word	0x20000008
 8000c78:	080053b8 	.word	0x080053b8
 8000c7c:	200003b0 	.word	0x200003b0
 8000c80:	080053c0 	.word	0x080053c0
 8000c84:	48001000 	.word	0x48001000

08000c88 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if (htim1->Instance == TIM1) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x16>
		programLoop();
 8000c9a:	f7ff ffa8 	bl	8000bee <programLoop>
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012c00 	.word	0x40012c00

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_MspInit+0x44>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_MspInit+0x44>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f000 fb7e 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d127      	bne.n	8000d66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a16      	ldr	r2, [pc, #88]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d2e:	23c0      	movs	r3, #192	; 0xc0
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_I2C_MspInit+0x84>)
 8000d4a:	f000 fb8d 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	48000400 	.word	0x48000400

08000d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_SPI_MspInit+0x7c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d128      	bne.n	8000df0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a16      	ldr	r2, [pc, #88]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_SPI_MspInit+0x80>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000dce:	23e0      	movs	r3, #224	; 0xe0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dde:	2305      	movs	r3, #5
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f000 fb3c 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	3728      	adds	r7, #40	; 0x28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40013000 	.word	0x40013000
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_TIM_Base_MspInit+0x74>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d12b      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_TIM_Base_MspInit+0x78>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2018      	movs	r0, #24
 8000e30:	f000 fae3 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e34:	2018      	movs	r0, #24
 8000e36:	f000 fafc 	bl	8001432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2019      	movs	r0, #25
 8000e40:	f000 fadb 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e44:	2019      	movs	r0, #25
 8000e46:	f000 faf4 	bl	8001432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	201a      	movs	r0, #26
 8000e50:	f000 fad3 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e54:	201a      	movs	r0, #26
 8000e56:	f000 faec 	bl	8001432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	201b      	movs	r0, #27
 8000e60:	f000 facb 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e64:	201b      	movs	r0, #27
 8000e66:	f000 fae4 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012c00 	.word	0x40012c00
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <HAL_UART_MspInit+0xb4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d144      	bne.n	8000f28 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9e:	4b25      	ldr	r3, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_UART_MspInit+0xb8>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f000 fab0 	bl	8001468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_UART_MspInit+0xbc>)
 8000f24:	f000 faa0 	bl	8001468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48000c00 	.word	0x48000c00

08000f3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_PCD_MspInit+0x80>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d129      	bne.n	8000fb2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000f76:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000f88:	230e      	movs	r3, #14
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f000 fa67 	bl	8001468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_PCD_MspInit+0x84>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40005c00 	.word	0x40005c00
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8f8 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fbcf 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800102a:	2002      	movs	r0, #2
 800102c:	f000 fbc8 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001038:	2010      	movs	r0, #16
 800103a:	f000 fbc1 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800104a:	f002 fb59 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000364 	.word	0x20000364

08001058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800105e:	f002 fb4f 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000364 	.word	0x20000364

0800106c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001072:	f002 fb45 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000364 	.word	0x20000364

08001080 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM1_CC_IRQHandler+0x10>)
 8001086:	f002 fb3b 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000364 	.word	0x20000364

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f003 fca8 	bl	8004a18 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000a000 	.word	0x2000a000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	20000738 	.word	0x20000738
 80010fc:	20000750 	.word	0x20000750

08001100 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff ffea 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 fc67 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff f88b 	bl	8000270 <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800115c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8001168:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 800116c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8001170:	20000750 	.word	0x20000750

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f92b 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fd8a 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f943 	bl	800144e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f90b 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000220 	.word	0x20000220
 80011fc:	20000228 	.word	0x20000228
 8001200:	20000224 	.word	0x20000224

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000228 	.word	0x20000228
 8001228:	2000073c 	.word	0x2000073c

0800122c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000073c 	.word	0x2000073c

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff29 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff3e 	bl	800128c <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff31 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffa2 	bl	80013a0 <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	e154      	b.n	8001722 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8146 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x40>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b03      	cmp	r3, #3
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0203 	and.w	r2, r3, #3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80a0 	beq.w	800171c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015f4:	4a53      	ldr	r2, [pc, #332]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800161e:	d019      	beq.n	8001654 <HAL_GPIO_Init+0x1ec>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d013      	beq.n	8001650 <HAL_GPIO_Init+0x1e8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2e4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d00d      	beq.n	800164c <HAL_GPIO_Init+0x1e4>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d007      	beq.n	8001648 <HAL_GPIO_Init+0x1e0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_GPIO_Init+0x2ec>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d101      	bne.n	8001644 <HAL_GPIO_Init+0x1dc>
 8001640:	2304      	movs	r3, #4
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001644:	2305      	movs	r3, #5
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1ee>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001698:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016c2:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016ec:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f aea3 	bne.w	8001478 <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001778:	e002      	b.n	8001780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	43d9      	mvns	r1, r3
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	400b      	ands	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa0c 	bl	8000bfc <HAL_GPIO_EXTI_Callback>
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e081      	b.n	8001906 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fa6c 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2224      	movs	r2, #36	; 0x24
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0201 	bic.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001840:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001850:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	e006      	b.n	8001878 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001876:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d104      	bne.n	800188a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001888:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69d9      	ldr	r1, [r3, #28]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1a      	ldr	r2, [r3, #32]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b20      	cmp	r3, #32
 8001922:	d138      	bne.n	8001996 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800192a:	2b01      	cmp	r3, #1
 800192c:	d101      	bne.n	8001932 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800192e:	2302      	movs	r3, #2
 8001930:	e032      	b.n	8001998 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2224      	movs	r2, #36	; 0x24
 800193e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001960:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d139      	bne.n	8001a2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e033      	b.n	8001a30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2224      	movs	r2, #36	; 0x24
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3e:	b08b      	sub	sp, #44	; 0x2c
 8001a40:	af06      	add	r7, sp, #24
 8001a42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e0c4      	b.n	8001bd8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d106      	bne.n	8001a68 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fa6a 	bl	8000f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff92 	bl	800499e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e040      	b.n	8001b02 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3301      	adds	r3, #1
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3303      	adds	r3, #3
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ac0:	7bfa      	ldrb	r2, [r7, #15]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3338      	adds	r3, #56	; 0x38
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	333c      	adds	r3, #60	; 0x3c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3340      	adds	r3, #64	; 0x40
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	3301      	adds	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3b9      	bcc.n	8001a80 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e044      	b.n	8001b9c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3b5      	bcc.n	8001b12 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	687e      	ldr	r6, [r7, #4]
 8001bae:	466d      	mov	r5, sp
 8001bb0:	f106 0410 	add.w	r4, r6, #16
 8001bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	602b      	str	r3, [r5, #0]
 8001bbc:	1d33      	adds	r3, r6, #4
 8001bbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	f002 ff07 	bl	80049d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f001 b823 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 817d 	beq.w	8001f16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c1c:	4bbc      	ldr	r3, [pc, #752]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d00c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c28:	4bb9      	ldr	r3, [pc, #740]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d15c      	bne.n	8001cee <HAL_RCC_OscConfig+0x10e>
 8001c34:	4bb6      	ldr	r3, [pc, #728]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d155      	bne.n	8001cee <HAL_RCC_OscConfig+0x10e>
 8001c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c56:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x94>
 8001c6e:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_OscConfig+0xc0>
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001ca8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cac:	fa92 f2a2 	rbit	r2, r2
 8001cb0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001cb4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f002 021f 	and.w	r2, r2, #31
 8001cc8:	2101      	movs	r1, #1
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 811f 	beq.w	8001f14 <HAL_RCC_OscConfig+0x334>
 8001cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8116 	bne.w	8001f14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f000 bfaf 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12e>
 8001d00:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a82      	ldr	r2, [pc, #520]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e036      	b.n	8001d7c <HAL_RCC_OscConfig+0x19c>
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x158>
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7b      	ldr	r2, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a78      	ldr	r2, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e021      	b.n	8001d7c <HAL_RCC_OscConfig+0x19c>
 8001d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x184>
 8001d4a:	4b71      	ldr	r3, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a70      	ldr	r2, [pc, #448]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6d      	ldr	r2, [pc, #436]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x19c>
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a69      	ldr	r2, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a66      	ldr	r2, [pc, #408]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d7c:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	f023 020f 	bic.w	r2, r3, #15
 8001d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	495f      	ldr	r1, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d059      	beq.n	8001e5a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff fa41 	bl	800122c <HAL_GetTick>
 8001daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fa3c 	bl	800122c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b64      	cmp	r3, #100	; 0x64
 8001dbe:	d902      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	f000 bf43 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 8001dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001dda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_RCC_OscConfig+0x218>
 8001df2:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	e015      	b.n	8001e24 <HAL_RCC_OscConfig+0x244>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e30:	fa92 f2a2 	rbit	r2, r2
 8001e34:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e38:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ab      	beq.n	8001db0 <HAL_RCC_OscConfig+0x1d0>
 8001e58:	e05d      	b.n	8001f16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff f9e7 	bl	800122c <HAL_GetTick>
 8001e5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f9e2 	bl	800122c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b64      	cmp	r3, #100	; 0x64
 8001e72:	d902      	bls.n	8001e7a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	f000 bee9 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0x2cc>
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	e015      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f8>
 8001eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001eb8:	fa93 f3a3 	rbit	r3, r3
 8001ebc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ec8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_RCC_OscConfig+0x330>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001edc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ee0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ee4:	fa92 f2a2 	rbit	r2, r2
 8001ee8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001eec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	f002 021f 	and.w	r2, r2, #31
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f202 	lsl.w	r2, r1, r2
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ab      	bne.n	8001e64 <HAL_RCC_OscConfig+0x284>
 8001f0c:	e003      	b.n	8001f16 <HAL_RCC_OscConfig+0x336>
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 817d 	beq.w	8002226 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f2c:	4ba6      	ldr	r3, [pc, #664]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f38:	4ba3      	ldr	r3, [pc, #652]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d172      	bne.n	800202a <HAL_RCC_OscConfig+0x44a>
 8001f44:	4ba0      	ldr	r3, [pc, #640]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d16c      	bne.n	800202a <HAL_RCC_OscConfig+0x44a>
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	095b      	lsrs	r3, r3, #5
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d102      	bne.n	8001f80 <HAL_RCC_OscConfig+0x3a0>
 8001f7a:	4b93      	ldr	r3, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	e013      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c8>
 8001f80:	2302      	movs	r3, #2
 8001f82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f92:	2302      	movs	r3, #2
 8001f94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001fa4:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001fae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001fb2:	fa92 f2a2 	rbit	r2, r2
 8001fb6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001fba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001fbe:	fab2 f282 	clz	r2, r2
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	f042 0220 	orr.w	r2, r2, #32
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	f002 021f 	and.w	r2, r2, #31
 8001fce:	2101      	movs	r1, #1
 8001fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x410>
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f000 be2e 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	21f8      	movs	r1, #248	; 0xf8
 8002006:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800200e:	fa91 f1a1 	rbit	r1, r1
 8002012:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002016:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800201a:	fab1 f181 	clz	r1, r1
 800201e:	b2c9      	uxtb	r1, r1
 8002020:	408b      	lsls	r3, r1
 8002022:	4969      	ldr	r1, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002028:	e0fd      	b.n	8002226 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8088 	beq.w	800214c <HAL_RCC_OscConfig+0x56c>
 800203c:	2301      	movs	r3, #1
 800203e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800204e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	461a      	mov	r2, r3
 8002064:	2301      	movs	r3, #1
 8002066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff f8e0 	bl	800122c <HAL_GetTick>
 800206c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff f8db 	bl	800122c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	f000 bde2 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 8002088:	2302      	movs	r3, #2
 800208a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800209a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d8>
 80020b2:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e013      	b.n	80020e0 <HAL_RCC_OscConfig+0x500>
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80020d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020dc:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	2202      	movs	r2, #2
 80020e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f042 0220 	orr.w	r2, r2, #32
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	f002 021f 	and.w	r2, r2, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f202 	lsl.w	r2, r1, r2
 800210c:	4013      	ands	r3, r2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0af      	beq.n	8002072 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	21f8      	movs	r1, #248	; 0xf8
 8002128:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002130:	fa91 f1a1 	rbit	r1, r1
 8002134:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002138:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800213c:	fab1 f181 	clz	r1, r1
 8002140:	b2c9      	uxtb	r1, r1
 8002142:	408b      	lsls	r3, r1
 8002144:	4920      	ldr	r1, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
 800214a:	e06c      	b.n	8002226 <HAL_RCC_OscConfig+0x646>
 800214c:	2301      	movs	r3, #1
 800214e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002156:	fa93 f3a3 	rbit	r3, r3
 800215a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800215e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800216c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	2300      	movs	r3, #0
 8002176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff f858 	bl	800122c <HAL_GetTick>
 800217c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff f853 	bl	800122c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d902      	bls.n	8002198 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	f000 bd5a 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80021aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d104      	bne.n	80021cc <HAL_RCC_OscConfig+0x5ec>
 80021c2:	4b01      	ldr	r3, [pc, #4]	; (80021c8 <HAL_RCC_OscConfig+0x5e8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e015      	b.n	80021f4 <HAL_RCC_OscConfig+0x614>
 80021c8:	40021000 	.word	0x40021000
 80021cc:	2302      	movs	r3, #2
 80021ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021de:	2302      	movs	r3, #2
 80021e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021f0:	4bc8      	ldr	r3, [pc, #800]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002206:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f042 0220 	orr.w	r2, r2, #32
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f002 021f 	and.w	r2, r2, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f202 	lsl.w	r2, r1, r2
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1ad      	bne.n	8002182 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8110 	beq.w	800245c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d079      	beq.n	8002340 <HAL_RCC_OscConfig+0x760>
 800224c:	2301      	movs	r3, #1
 800224e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800225e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4bab      	ldr	r3, [pc, #684]	; (8002518 <HAL_RCC_OscConfig+0x938>)
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	2301      	movs	r3, #1
 8002274:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002276:	f7fe ffd9 	bl	800122c <HAL_GetTick>
 800227a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7fe ffd4 	bl	800122c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d902      	bls.n	8002296 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	f000 bcdb 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022b0:	2202      	movs	r2, #2
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022d4:	2202      	movs	r2, #2
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f0:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 80022f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022fc:	2102      	movs	r1, #2
 80022fe:	6019      	str	r1, [r3, #0]
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f1a3 	rbit	r1, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002316:	6019      	str	r1, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	2101      	movs	r1, #1
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0a0      	beq.n	8002280 <HAL_RCC_OscConfig+0x6a0>
 800233e:	e08d      	b.n	800245c <HAL_RCC_OscConfig+0x87c>
 8002340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002350:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002362:	601a      	str	r2, [r3, #0]
  return result;
 8002364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800236c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	461a      	mov	r2, r3
 8002376:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x938>)
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	461a      	mov	r2, r3
 800237e:	2300      	movs	r3, #0
 8002380:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002382:	f7fe ff53 	bl	800122c <HAL_GetTick>
 8002386:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800238c:	f7fe ff4e 	bl	800122c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d902      	bls.n	80023a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	f000 bc55 	b.w	8002c4c <HAL_RCC_OscConfig+0x106c>
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002408:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800240c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 8002410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002416:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800241a:	2102      	movs	r1, #2
 800241c:	6019      	str	r1, [r3, #0]
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f1a3 	rbit	r1, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002434:	6019      	str	r1, [r3, #0]
  return result;
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d197      	bne.n	800238c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 81a1 	beq.w	80027b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002478:	4b26      	ldr	r3, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	61d3      	str	r3, [r2, #28]
 8002490:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCC_OscConfig+0x93c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x93c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_RCC_OscConfig+0x93c>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe feaf 	bl	800122c <HAL_GetTick>
 80024ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	e009      	b.n	80024e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fe feaa 	bl	800122c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e3b1      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_RCC_OscConfig+0x93c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x940>
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a02      	ldr	r2, [pc, #8]	; (8002514 <HAL_RCC_OscConfig+0x934>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e03c      	b.n	800258c <HAL_RCC_OscConfig+0x9ac>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	10908120 	.word	0x10908120
 800251c:	40007000 	.word	0x40007000
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0x96a>
 8002530:	4bc1      	ldr	r3, [pc, #772]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4ac0      	ldr	r2, [pc, #768]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	4bbe      	ldr	r3, [pc, #760]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4abd      	ldr	r2, [pc, #756]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	e020      	b.n	800258c <HAL_RCC_OscConfig+0x9ac>
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x994>
 800255a:	4bb7      	ldr	r3, [pc, #732]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4ab6      	ldr	r2, [pc, #728]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
 8002566:	4bb4      	ldr	r3, [pc, #720]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4ab3      	ldr	r2, [pc, #716]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x9ac>
 8002574:	4bb0      	ldr	r3, [pc, #704]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4aaf      	ldr	r2, [pc, #700]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	4bad      	ldr	r3, [pc, #692]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4aac      	ldr	r2, [pc, #688]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002586:	f023 0304 	bic.w	r3, r3, #4
 800258a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800258c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8081 	beq.w	80026a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fe45 	bl	800122c <HAL_GetTick>
 80025a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fe40 	bl	800122c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e345      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
 80025c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002606:	601a      	str	r2, [r3, #0]
  return result;
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002610:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0xa4c>
 8002626:	4b84      	ldr	r3, [pc, #528]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	e013      	b.n	8002654 <HAL_RCC_OscConfig+0xa74>
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	4b79      	ldr	r3, [pc, #484]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002658:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800265c:	2102      	movs	r1, #2
 800265e:	6011      	str	r1, [r2, #0]
 8002660:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002664:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	fa92 f1a2 	rbit	r1, r2
 800266e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002672:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002676:	6011      	str	r1, [r2, #0]
  return result;
 8002678:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800267c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	fab2 f282 	clz	r2, r2
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	f002 021f 	and.w	r2, r2, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f202 	lsl.w	r2, r1, r2
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d084      	beq.n	80025a8 <HAL_RCC_OscConfig+0x9c8>
 800269e:	e07f      	b.n	80027a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fdc4 	bl	800122c <HAL_GetTick>
 80026a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	e00b      	b.n	80026c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fdbf 	bl	800122c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e2c4      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026ca:	2202      	movs	r2, #2
 80026cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fa93 f2a3 	rbit	r2, r3
 80026dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026ee:	2202      	movs	r2, #2
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002704:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002708:	601a      	str	r2, [r3, #0]
  return result;
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002712:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d102      	bne.n	800272e <HAL_RCC_OscConfig+0xb4e>
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	e013      	b.n	8002756 <HAL_RCC_OscConfig+0xb76>
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800275e:	2102      	movs	r1, #2
 8002760:	6011      	str	r1, [r2, #0]
 8002762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002766:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	fa92 f1a2 	rbit	r1, r2
 8002770:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002774:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002778:	6011      	str	r1, [r2, #0]
  return result;
 800277a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800277e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	fab2 f282 	clz	r2, r2
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f002 021f 	and.w	r2, r2, #31
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f202 	lsl.w	r2, r1, r2
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d184      	bne.n	80026aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8242 	beq.w	8002c4a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <HAL_RCC_OscConfig+0xc58>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	f000 8213 	beq.w	8002bfa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f040 8162 	bne.w	8002aaa <HAL_RCC_OscConfig+0xeca>
 80027e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	fa93 f2a3 	rbit	r2, r3
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800280a:	601a      	str	r2, [r3, #0]
  return result;
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002814:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002820:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2300      	movs	r3, #0
 800282a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fcfe 	bl	800122c <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002834:	e00c      	b.n	8002850 <HAL_RCC_OscConfig+0xc70>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fcf6 	bl	800122c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1fd      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002858:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800285c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002874:	601a      	str	r2, [r3, #0]
  return result;
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800287e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_RCC_OscConfig+0xcba>
 8002894:	4bb0      	ldr	r3, [pc, #704]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e027      	b.n	80028ea <HAL_RCC_OscConfig+0xd0a>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	fa93 f2a3 	rbit	r2, r3
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	fa93 f2a3 	rbit	r2, r3
 80028dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	4b9c      	ldr	r3, [pc, #624]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028f6:	6011      	str	r1, [r2, #0]
 80028f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	fa92 f1a2 	rbit	r1, r2
 8002906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800290a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800290e:	6011      	str	r1, [r2, #0]
  return result;
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d182      	bne.n	800283c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002936:	4b88      	ldr	r3, [pc, #544]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	430b      	orrs	r3, r1
 8002958:	497f      	ldr	r1, [pc, #508]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800296a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002970:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	fa93 f2a3 	rbit	r2, r3
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002982:	601a      	str	r2, [r3, #0]
  return result;
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800298c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	461a      	mov	r2, r3
 80029a0:	2301      	movs	r3, #1
 80029a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7fe fc42 	bl	800122c <HAL_GetTick>
 80029a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fc3d 	bl	800122c <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e144      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
 80029c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f2a3 	rbit	r2, r3
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029e6:	601a      	str	r2, [r3, #0]
  return result;
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	095b      	lsrs	r3, r3, #5
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe2c>
 8002a06:	4b54      	ldr	r3, [pc, #336]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e027      	b.n	8002a5c <HAL_RCC_OscConfig+0xe7c>
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	fa92 f1a2 	rbit	r1, r2
 8002a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a80:	6011      	str	r1, [r2, #0]
  return result;
 8002a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	fab2 f282 	clz	r2, r2
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f042 0220 	orr.w	r2, r2, #32
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	f002 021f 	and.w	r2, r2, #31
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d082      	beq.n	80029ae <HAL_RCC_OscConfig+0xdce>
 8002aa8:	e0cf      	b.n	8002c4a <HAL_RCC_OscConfig+0x106a>
 8002aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ab2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	fa93 f2a3 	rbit	r2, r3
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ace:	601a      	str	r2, [r3, #0]
  return result;
 8002ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ad8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	461a      	mov	r2, r3
 8002aec:	2300      	movs	r3, #0
 8002aee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb9c 	bl	800122c <HAL_GetTick>
 8002af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af8:	e009      	b.n	8002b0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fb97 	bl	800122c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e09e      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	fa93 f2a3 	rbit	r2, r3
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b32:	601a      	str	r2, [r3, #0]
  return result;
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d104      	bne.n	8002b5c <HAL_RCC_OscConfig+0xf7c>
 8002b52:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <HAL_RCC_OscConfig+0xf78>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	e029      	b.n	8002bac <HAL_RCC_OscConfig+0xfcc>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	fa93 f2a3 	rbit	r2, r3
 8002b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_OscConfig+0x1078>)
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002bb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bb8:	6011      	str	r1, [r2, #0]
 8002bba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	fa92 f1a2 	rbit	r1, r2
 8002bc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bd0:	6011      	str	r1, [r2, #0]
  return result;
 8002bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f002 021f 	and.w	r2, r2, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d180      	bne.n	8002afa <HAL_RCC_OscConfig+0xf1a>
 8002bf8:	e027      	b.n	8002c4a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e01e      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_OscConfig+0x1078>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c2e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000

08002c5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b09e      	sub	sp, #120	; 0x78
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e162      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b90      	ldr	r3, [pc, #576]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d910      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 0207 	bic.w	r2, r3, #7
 8002c8a:	498b      	ldr	r1, [pc, #556]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b89      	ldr	r3, [pc, #548]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e14a      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb0:	4b82      	ldr	r3, [pc, #520]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	497f      	ldr	r1, [pc, #508]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80dc 	beq.w	8002e88 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d13c      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xf6>
 8002cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xa6>
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	e00f      	b.n	8002d22 <HAL_RCC_ClockConfig+0xc6>
 8002d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
 8002d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1e:	4b67      	ldr	r3, [pc, #412]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d32:	fab2 f282 	clz	r2, r2
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f042 0220 	orr.w	r2, r2, #32
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	f002 021f 	and.w	r2, r2, #31
 8002d42:	2101      	movs	r1, #1
 8002d44:	fa01 f202 	lsl.w	r2, r1, r2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d17b      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0f3      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d13c      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x178>
 8002d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x128>
 8002d7e:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	e00f      	b.n	8002da4 <HAL_RCC_ClockConfig+0x148>
 8002d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
 8002d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da0:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dac:	fa92 f2a2 	rbit	r2, r2
 8002db0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db4:	fab2 f282 	clz	r2, r2
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	f042 0220 	orr.w	r2, r2, #32
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	f002 021f 	and.w	r2, r2, #31
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d13a      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b2      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
 8002df6:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	e00d      	b.n	8002e18 <HAL_RCC_ClockConfig+0x1bc>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	2302      	movs	r3, #2
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2202      	movs	r2, #2
 8002e1a:	61ba      	str	r2, [r7, #24]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	fa92 f2a2 	rbit	r2, r2
 8002e22:	617a      	str	r2, [r7, #20]
  return result;
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	fab2 f282 	clz	r2, r2
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	f042 0220 	orr.w	r2, r2, #32
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f002 021f 	and.w	r2, r2, #31
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e079      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	491a      	ldr	r1, [pc, #104]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe f9e8 	bl	800122c <HAL_GetTick>
 8002e5c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe f9e4 	bl	800122c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e061      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_RCC_ClockConfig+0x260>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d214      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4906      	ldr	r1, [pc, #24]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <HAL_RCC_ClockConfig+0x25c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e040      	b.n	8002f3a <HAL_RCC_ClockConfig+0x2de>
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_ClockConfig+0x2e8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	491a      	ldr	r1, [pc, #104]	; (8002f44 <HAL_RCC_ClockConfig+0x2e8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eea:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x2e8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4912      	ldr	r1, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x2e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002efe:	f000 f829 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f02:	4601      	mov	r1, r0
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <HAL_RCC_ClockConfig+0x2e8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	22f0      	movs	r2, #240	; 0xf0
 8002f0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	fa92 f2a2 	rbit	r2, r2
 8002f16:	60fa      	str	r2, [r7, #12]
  return result;
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	40d3      	lsrs	r3, r2
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x2ec>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	fa21 f303 	lsr.w	r3, r1, r3
 8002f2a:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <HAL_RCC_ClockConfig+0x2f0>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <HAL_RCC_ClockConfig+0x2f4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe f936 	bl	80011a4 <HAL_InitTick>
  
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3778      	adds	r7, #120	; 0x78
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	080053c8 	.word	0x080053c8
 8002f4c:	20000220 	.word	0x20000220
 8002f50:	20000224 	.word	0x20000224

08002f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b08b      	sub	sp, #44	; 0x2c
 8002f58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	2300      	movs	r3, #0
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f6e:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x30>
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x36>
 8002f82:	e03c      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f86:	623b      	str	r3, [r7, #32]
      break;
 8002f88:	e03c      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	607a      	str	r2, [r7, #4]
  return result;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	40d3      	lsrs	r3, r2
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	fa92 f2a2 	rbit	r2, r2
 8002fc0:	60fa      	str	r2, [r7, #12]
  return result;
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	40d3      	lsrs	r3, r2
 8002fcc:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fdc:	4a0e      	ldr	r2, [pc, #56]	; (8003018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	e004      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	4a0c      	ldr	r2, [pc, #48]	; (8003024 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	623b      	str	r3, [r7, #32]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003000:	623b      	str	r3, [r7, #32]
      break;
 8003002:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003004:	6a3b      	ldr	r3, [r7, #32]
}
 8003006:	4618      	mov	r0, r3
 8003008:	372c      	adds	r7, #44	; 0x2c
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	007a1200 	.word	0x007a1200
 800301c:	080053e0 	.word	0x080053e0
 8003020:	080053f0 	.word	0x080053f0
 8003024:	003d0900 	.word	0x003d0900

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000220 	.word	0x20000220

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003046:	f7ff ffef 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 800304a:	4601      	mov	r1, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003054:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	603a      	str	r2, [r7, #0]
  return result;
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	40d3      	lsrs	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x40>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	080053d8 	.word	0x080053d8

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800308a:	f7ff ffcd 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003098:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800309c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	603a      	str	r2, [r7, #0]
  return result;
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	40d3      	lsrs	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	080053d8 	.word	0x080053d8

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b092      	sub	sp, #72	; 0x48
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80d4 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ec:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	61d3      	str	r3, [r2, #28]
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe f87d 	bl	800122c <HAL_GetTick>
 8003132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe f879 	bl	800122c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e169      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8084 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003170:	429a      	cmp	r2, r3
 8003172:	d07c      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04b      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe f829 	bl	800122c <HAL_GetTick>
 80031da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f825 	bl	800122c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e113      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
  return result;
 800320c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d108      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003222:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	e00d      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	10908100 	.word	0x10908100
 8003234:	2302      	movs	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	4b78      	ldr	r3, [pc, #480]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2202      	movs	r2, #2
 8003246:	613a      	str	r2, [r7, #16]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	60fa      	str	r2, [r7, #12]
  return result;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	fab2 f282 	clz	r2, r2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0b7      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800326e:	4b6d      	ldr	r3, [pc, #436]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	496a      	ldr	r1, [pc, #424]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b66      	ldr	r3, [pc, #408]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a0:	4b60      	ldr	r3, [pc, #384]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f023 0203 	bic.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	495d      	ldr	r1, [pc, #372]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4956      	ldr	r1, [pc, #344]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032dc:	4b51      	ldr	r3, [pc, #324]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	494e      	ldr	r1, [pc, #312]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032fa:	4b4a      	ldr	r3, [pc, #296]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f023 0210 	bic.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4947      	ldr	r1, [pc, #284]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003318:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	493f      	ldr	r1, [pc, #252]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f023 0220 	bic.w	r2, r3, #32
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4938      	ldr	r1, [pc, #224]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003354:	4b33      	ldr	r3, [pc, #204]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	4930      	ldr	r1, [pc, #192]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	4929      	ldr	r1, [pc, #164]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003390:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4921      	ldr	r1, [pc, #132]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	491a      	ldr	r1, [pc, #104]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	4912      	ldr	r1, [pc, #72]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	490b      	ldr	r1, [pc, #44]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3748      	adds	r7, #72	; 0x48
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000

08003428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e09d      	b.n	8003576 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d108      	bne.n	8003454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d009      	beq.n	8003460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
 8003452:	e005      	b.n	8003460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fc7e 	bl	8000d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a0:	d902      	bls.n	80034a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e002      	b.n	80034ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034b6:	d007      	beq.n	80034c8 <HAL_SPI_Init+0xa0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	ea42 0103 	orr.w	r1, r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	f003 0204 	and.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003564:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e049      	b.n	8003624 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd fc2b 	bl	8000e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f000 faaf 	bl	8003b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d001      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e04a      	b.n	80036da <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x6c>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d013      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x6c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <HAL_TIM_Base_Start_IT+0xc0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x6c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x6c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x6c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d115      	bne.n	80036c4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <HAL_TIM_Base_Start_IT+0xd0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d015      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0xaa>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b0:	d011      	beq.n	80036d6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c2:	e008      	b.n	80036d6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e000      	b.n	80036d8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40013400 	.word	0x40013400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	00010007 	.word	0x00010007

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f9ce 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9c0 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f9d1 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b04      	cmp	r3, #4
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9a4 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f996 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f9a7 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d122      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d11b      	bne.n	8003804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0208 	mvn.w	r2, #8
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f97a 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f96c 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f97d 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b10      	cmp	r3, #16
 8003810:	d122      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b10      	cmp	r3, #16
 800381e:	d11b      	bne.n	8003858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f950 	bl	8003ae4 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f942 	bl	8003ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f953 	bl	8003af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d10e      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d107      	bne.n	8003884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f06f 0201 	mvn.w	r2, #1
 800387c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fa02 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b80      	cmp	r3, #128	; 0x80
 8003890:	d10e      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389c:	2b80      	cmp	r3, #128	; 0x80
 800389e:	d107      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 faec 	bl	8003e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d10e      	bne.n	80038de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d107      	bne.n	80038de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fadf 	bl	8003e9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d10e      	bne.n	800390a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d107      	bne.n	800390a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f901 	bl	8003b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d10e      	bne.n	8003936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d107      	bne.n	8003936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0220 	mvn.w	r2, #32
 800392e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fa9f 	bl	8003e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_TIM_ConfigClockSource+0x1c>
 8003956:	2302      	movs	r3, #2
 8003958:	e0b6      	b.n	8003ac8 <HAL_TIM_ConfigClockSource+0x18a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003978:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800397c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003984:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d03e      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xd8>
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	f200 8087 	bhi.w	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a4:	f000 8086 	beq.w	8003ab4 <HAL_TIM_ConfigClockSource+0x176>
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d87f      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039ae:	2b70      	cmp	r3, #112	; 0x70
 80039b0:	d01a      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0xaa>
 80039b2:	2b70      	cmp	r3, #112	; 0x70
 80039b4:	d87b      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039b6:	2b60      	cmp	r3, #96	; 0x60
 80039b8:	d050      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x11e>
 80039ba:	2b60      	cmp	r3, #96	; 0x60
 80039bc:	d877      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039be:	2b50      	cmp	r3, #80	; 0x50
 80039c0:	d03c      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xfe>
 80039c2:	2b50      	cmp	r3, #80	; 0x50
 80039c4:	d873      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d058      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0x13e>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d86f      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d064      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15e>
 80039d2:	2b30      	cmp	r3, #48	; 0x30
 80039d4:	d86b      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d060      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15e>
 80039da:	2b20      	cmp	r3, #32
 80039dc:	d867      	bhi.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d05c      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15e>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d05a      	beq.n	8003a9c <HAL_TIM_ConfigClockSource+0x15e>
 80039e6:	e062      	b.n	8003aae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f000 f99c 	bl	8003d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e04f      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f000 f985 	bl	8003d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e03c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f8f9 	bl	8003c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2150      	movs	r1, #80	; 0x50
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f952 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e02c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6818      	ldr	r0, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f000 f918 	bl	8003c9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2160      	movs	r1, #96	; 0x60
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f942 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a7a:	e01c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f000 f8d9 	bl	8003c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2140      	movs	r1, #64	; 0x40
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f932 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003a9a:	e00c      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 f929 	bl	8003cfe <TIM_ITRx_SetConfig>
      break;
 8003aac:	e003      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ab4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3c      	ldr	r2, [pc, #240]	; (8003c24 <TIM_Base_SetConfig+0x104>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3e:	d00b      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <TIM_Base_SetConfig+0x108>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <TIM_Base_SetConfig+0x10c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_Base_SetConfig+0x38>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <TIM_Base_SetConfig+0x110>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d108      	bne.n	8003b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a2d      	ldr	r2, [pc, #180]	; (8003c24 <TIM_Base_SetConfig+0x104>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01b      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b78:	d017      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <TIM_Base_SetConfig+0x108>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <TIM_Base_SetConfig+0x10c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00f      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <TIM_Base_SetConfig+0x110>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <TIM_Base_SetConfig+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <TIM_Base_SetConfig+0xe8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <TIM_Base_SetConfig+0x110>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_Base_SetConfig+0xe8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <TIM_Base_SetConfig+0x114>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_Base_SetConfig+0xe8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <TIM_Base_SetConfig+0x118>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_Base_SetConfig+0xe8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <TIM_Base_SetConfig+0x11c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d103      	bne.n	8003c10 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	615a      	str	r2, [r3, #20]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40013400 	.word	0x40013400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 030a 	bic.w	r3, r3, #10
 8003c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b087      	sub	sp, #28
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	f023 0210 	bic.w	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	031b      	lsls	r3, r3, #12
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f043 0307 	orr.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e063      	b.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2b      	ldr	r2, [pc, #172]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d013      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a13      	ldr	r2, [pc, #76]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10c      	bne.n	8003e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40012c00 	.word	0x40012c00
 8003e64:	40013400 	.word	0x40013400
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	40014000 	.word	0x40014000

08003e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e040      	b.n	8003f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ffd2 	bl	8000e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2224      	movs	r2, #36	; 0x24
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f96c 	bl	80041cc <UART_SetConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e022      	b.n	8003f44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fb34 	bl	8004574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fbbb 	bl	80046b8 <UART_CheckIdleState>
 8003f42:	4603      	mov	r3, r0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d178      	bne.n	8004056 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Transmit+0x24>
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e071      	b.n	8004058 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2221      	movs	r2, #33	; 0x21
 8003f80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fd f953 	bl	800122c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_UART_Transmit+0x68>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e003      	b.n	8003fbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fbc:	e030      	b.n	8004020 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2180      	movs	r1, #128	; 0x80
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fc1d 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e03c      	b.n	8004058 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	3302      	adds	r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	e008      	b.n	800400e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	781a      	ldrb	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	b292      	uxth	r2, r2
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	3301      	adds	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1c8      	bne.n	8003fbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2200      	movs	r2, #0
 8004034:	2140      	movs	r1, #64	; 0x40
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fbe6 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d004      	beq.n	800404c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e005      	b.n	8004058 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 80a3 	bne.w	80041c2 <HAL_UART_Receive+0x162>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Receive+0x28>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e09b      	b.n	80041c4 <HAL_UART_Receive+0x164>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	; 0x22
 8004098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fd f8c3 	bl	800122c <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d10e      	bne.n	80040e0 <HAL_UART_Receive+0x80>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_UART_Receive+0x76>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d4:	e01a      	b.n	800410c <HAL_UART_Receive+0xac>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	22ff      	movs	r2, #255	; 0xff
 80040da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040de:	e015      	b.n	800410c <HAL_UART_Receive+0xac>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10d      	bne.n	8004104 <HAL_UART_Receive+0xa4>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <HAL_UART_Receive+0x9a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f8:	e008      	b.n	800410c <HAL_UART_Receive+0xac>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	227f      	movs	r2, #127	; 0x7f
 80040fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004102:	e003      	b.n	800410c <HAL_UART_Receive+0xac>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004112:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800411c:	d108      	bne.n	8004130 <HAL_UART_Receive+0xd0>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <HAL_UART_Receive+0xd0>
    {
      pdata8bits  = NULL;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e003      	b.n	8004138 <HAL_UART_Receive+0xd8>
    }
    else
    {
      pdata8bits  = pData;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004134:	2300      	movs	r3, #0
 8004136:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004138:	e037      	b.n	80041aa <HAL_UART_Receive+0x14a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	2120      	movs	r1, #32
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fb5f 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_UART_Receive+0xfc>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e033      	b.n	80041c4 <HAL_UART_Receive+0x164>
      }
      if (pdata8bits == NULL)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_UART_Receive+0x11c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004168:	b29a      	uxth	r2, r3
 800416a:	8a7b      	ldrh	r3, [r7, #18]
 800416c:	4013      	ands	r3, r2
 800416e:	b29a      	uxth	r2, r3
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	3302      	adds	r3, #2
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e00d      	b.n	8004198 <HAL_UART_Receive+0x138>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004182:	b29b      	uxth	r3, r3
 8004184:	b2da      	uxtb	r2, r3
 8004186:	8a7b      	ldrh	r3, [r7, #18]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	4013      	ands	r3, r2
 800418c:	b2da      	uxtb	r2, r3
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1c1      	bne.n	800413a <HAL_UART_Receive+0xda>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e000      	b.n	80041c4 <HAL_UART_Receive+0x164>
  }
  else
  {
    return HAL_BUSY;
 80041c2:	2302      	movs	r3, #2
  }
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80041fa:	f023 030c 	bic.w	r3, r3, #12
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	430b      	orrs	r3, r1
 8004206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4aa7      	ldr	r2, [pc, #668]	; (80044e4 <UART_SetConfig+0x318>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d120      	bne.n	800428e <UART_SetConfig+0xc2>
 800424c:	4ba6      	ldr	r3, [pc, #664]	; (80044e8 <UART_SetConfig+0x31c>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d817      	bhi.n	8004288 <UART_SetConfig+0xbc>
 8004258:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <UART_SetConfig+0x94>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004271 	.word	0x08004271
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004283 	.word	0x08004283
 800426c:	08004277 	.word	0x08004277
 8004270:	2301      	movs	r3, #1
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0b5      	b.n	80043e2 <UART_SetConfig+0x216>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e0b2      	b.n	80043e2 <UART_SetConfig+0x216>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e0af      	b.n	80043e2 <UART_SetConfig+0x216>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e0ac      	b.n	80043e2 <UART_SetConfig+0x216>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e0a9      	b.n	80043e2 <UART_SetConfig+0x216>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a96      	ldr	r2, [pc, #600]	; (80044ec <UART_SetConfig+0x320>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d124      	bne.n	80042e2 <UART_SetConfig+0x116>
 8004298:	4b93      	ldr	r3, [pc, #588]	; (80044e8 <UART_SetConfig+0x31c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042a4:	d011      	beq.n	80042ca <UART_SetConfig+0xfe>
 80042a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042aa:	d817      	bhi.n	80042dc <UART_SetConfig+0x110>
 80042ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b0:	d011      	beq.n	80042d6 <UART_SetConfig+0x10a>
 80042b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042b6:	d811      	bhi.n	80042dc <UART_SetConfig+0x110>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0xf8>
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d006      	beq.n	80042d0 <UART_SetConfig+0x104>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x110>
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e08b      	b.n	80043e2 <UART_SetConfig+0x216>
 80042ca:	2302      	movs	r3, #2
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e088      	b.n	80043e2 <UART_SetConfig+0x216>
 80042d0:	2304      	movs	r3, #4
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e085      	b.n	80043e2 <UART_SetConfig+0x216>
 80042d6:	2308      	movs	r3, #8
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e082      	b.n	80043e2 <UART_SetConfig+0x216>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e07f      	b.n	80043e2 <UART_SetConfig+0x216>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a82      	ldr	r2, [pc, #520]	; (80044f0 <UART_SetConfig+0x324>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d124      	bne.n	8004336 <UART_SetConfig+0x16a>
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <UART_SetConfig+0x31c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80042f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042f8:	d011      	beq.n	800431e <UART_SetConfig+0x152>
 80042fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80042fe:	d817      	bhi.n	8004330 <UART_SetConfig+0x164>
 8004300:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004304:	d011      	beq.n	800432a <UART_SetConfig+0x15e>
 8004306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800430a:	d811      	bhi.n	8004330 <UART_SetConfig+0x164>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <UART_SetConfig+0x14c>
 8004310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004314:	d006      	beq.n	8004324 <UART_SetConfig+0x158>
 8004316:	e00b      	b.n	8004330 <UART_SetConfig+0x164>
 8004318:	2300      	movs	r3, #0
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e061      	b.n	80043e2 <UART_SetConfig+0x216>
 800431e:	2302      	movs	r3, #2
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e05e      	b.n	80043e2 <UART_SetConfig+0x216>
 8004324:	2304      	movs	r3, #4
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e05b      	b.n	80043e2 <UART_SetConfig+0x216>
 800432a:	2308      	movs	r3, #8
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e058      	b.n	80043e2 <UART_SetConfig+0x216>
 8004330:	2310      	movs	r3, #16
 8004332:	77fb      	strb	r3, [r7, #31]
 8004334:	e055      	b.n	80043e2 <UART_SetConfig+0x216>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6e      	ldr	r2, [pc, #440]	; (80044f4 <UART_SetConfig+0x328>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d124      	bne.n	800438a <UART_SetConfig+0x1be>
 8004340:	4b69      	ldr	r3, [pc, #420]	; (80044e8 <UART_SetConfig+0x31c>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800434c:	d011      	beq.n	8004372 <UART_SetConfig+0x1a6>
 800434e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004352:	d817      	bhi.n	8004384 <UART_SetConfig+0x1b8>
 8004354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004358:	d011      	beq.n	800437e <UART_SetConfig+0x1b2>
 800435a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800435e:	d811      	bhi.n	8004384 <UART_SetConfig+0x1b8>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <UART_SetConfig+0x1a0>
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004368:	d006      	beq.n	8004378 <UART_SetConfig+0x1ac>
 800436a:	e00b      	b.n	8004384 <UART_SetConfig+0x1b8>
 800436c:	2300      	movs	r3, #0
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e037      	b.n	80043e2 <UART_SetConfig+0x216>
 8004372:	2302      	movs	r3, #2
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e034      	b.n	80043e2 <UART_SetConfig+0x216>
 8004378:	2304      	movs	r3, #4
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e031      	b.n	80043e2 <UART_SetConfig+0x216>
 800437e:	2308      	movs	r3, #8
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e02e      	b.n	80043e2 <UART_SetConfig+0x216>
 8004384:	2310      	movs	r3, #16
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e02b      	b.n	80043e2 <UART_SetConfig+0x216>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a5a      	ldr	r2, [pc, #360]	; (80044f8 <UART_SetConfig+0x32c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d124      	bne.n	80043de <UART_SetConfig+0x212>
 8004394:	4b54      	ldr	r3, [pc, #336]	; (80044e8 <UART_SetConfig+0x31c>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800439c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a0:	d011      	beq.n	80043c6 <UART_SetConfig+0x1fa>
 80043a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a6:	d817      	bhi.n	80043d8 <UART_SetConfig+0x20c>
 80043a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043ac:	d011      	beq.n	80043d2 <UART_SetConfig+0x206>
 80043ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043b2:	d811      	bhi.n	80043d8 <UART_SetConfig+0x20c>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <UART_SetConfig+0x1f4>
 80043b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043bc:	d006      	beq.n	80043cc <UART_SetConfig+0x200>
 80043be:	e00b      	b.n	80043d8 <UART_SetConfig+0x20c>
 80043c0:	2300      	movs	r3, #0
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e00d      	b.n	80043e2 <UART_SetConfig+0x216>
 80043c6:	2302      	movs	r3, #2
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e00a      	b.n	80043e2 <UART_SetConfig+0x216>
 80043cc:	2304      	movs	r3, #4
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e007      	b.n	80043e2 <UART_SetConfig+0x216>
 80043d2:	2308      	movs	r3, #8
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e004      	b.n	80043e2 <UART_SetConfig+0x216>
 80043d8:	2310      	movs	r3, #16
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e001      	b.n	80043e2 <UART_SetConfig+0x216>
 80043de:	2310      	movs	r3, #16
 80043e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ea:	d15b      	bne.n	80044a4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80043ec:	7ffb      	ldrb	r3, [r7, #31]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d827      	bhi.n	8004442 <UART_SetConfig+0x276>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x22c>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fe fe10 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fe2e 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <UART_SetConfig+0x330>)
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fd8f 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8004436:	61b8      	str	r0, [r7, #24]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77bb      	strb	r3, [r7, #30]
        break;
 800444a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 8082 	beq.w	8004558 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	005a      	lsls	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	441a      	add	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b0f      	cmp	r3, #15
 800446e:	d916      	bls.n	800449e <UART_SetConfig+0x2d2>
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d212      	bcs.n	800449e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f023 030f 	bic.w	r3, r3, #15
 8004480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	b29a      	uxth	r2, r3
 800448e:	89fb      	ldrh	r3, [r7, #14]
 8004490:	4313      	orrs	r3, r2
 8004492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	89fa      	ldrh	r2, [r7, #14]
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	e05c      	b.n	8004558 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	77bb      	strb	r3, [r7, #30]
 80044a2:	e059      	b.n	8004558 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a4:	7ffb      	ldrb	r3, [r7, #31]
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d835      	bhi.n	8004516 <UART_SetConfig+0x34a>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x2e4>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	08004501 	.word	0x08004501
 80044bc:	08004517 	.word	0x08004517
 80044c0:	08004507 	.word	0x08004507
 80044c4:	08004517 	.word	0x08004517
 80044c8:	08004517 	.word	0x08004517
 80044cc:	08004517 	.word	0x08004517
 80044d0:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fdb4 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80044d8:	61b8      	str	r0, [r7, #24]
        break;
 80044da:	e021      	b.n	8004520 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe fdd2 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 80044e0:	61b8      	str	r0, [r7, #24]
        break;
 80044e2:	e01d      	b.n	8004520 <UART_SetConfig+0x354>
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40004400 	.word	0x40004400
 80044f0:	40004800 	.word	0x40004800
 80044f4:	40004c00 	.word	0x40004c00
 80044f8:	40005000 	.word	0x40005000
 80044fc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <UART_SetConfig+0x3a4>)
 8004502:	61bb      	str	r3, [r7, #24]
        break;
 8004504:	e00c      	b.n	8004520 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe fd25 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 800450a:	61b8      	str	r0, [r7, #24]
        break;
 800450c:	e008      	b.n	8004520 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	61bb      	str	r3, [r7, #24]
        break;
 8004514:	e004      	b.n	8004520 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	77bb      	strb	r3, [r7, #30]
        break;
 800451e:	bf00      	nop
    }

    if (pclk != 0U)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d018      	beq.n	8004558 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	085a      	lsrs	r2, r3, #1
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d909      	bls.n	8004554 <UART_SetConfig+0x388>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004546:	d205      	bcs.n	8004554 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	e001      	b.n	8004558 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004564:	7fbb      	ldrb	r3, [r7, #30]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	007a1200 	.word	0x007a1200

08004574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d10a      	bne.n	800468a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b098      	sub	sp, #96	; 0x60
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c8:	f7fc fdb0 	bl	800122c <HAL_GetTick>
 80046cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d12e      	bne.n	800473a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f88c 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d021      	beq.n	800473a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470a:	653b      	str	r3, [r7, #80]	; 0x50
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e062      	b.n	8004800 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b04      	cmp	r3, #4
 8004746:	d149      	bne.n	80047dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	2200      	movs	r2, #0
 8004752:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f856 	bl	8004808 <UART_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03c      	beq.n	80047dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	623b      	str	r3, [r7, #32]
   return(result);
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b4:	61fa      	str	r2, [r7, #28]
 80047b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	617b      	str	r3, [r7, #20]
   return(result);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e011      	b.n	8004800 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3758      	adds	r7, #88	; 0x58
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4613      	mov	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004818:	e049      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004820:	d045      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004822:	f7fc fd03 	bl	800122c <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	429a      	cmp	r2, r3
 8004830:	d302      	bcc.n	8004838 <UART_WaitOnFlagUntilTimeout+0x30>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e048      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	d031      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d110      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2208      	movs	r2, #8
 800485e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f838 	bl	80048d6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2208      	movs	r2, #8
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e029      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d111      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f81e 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d0a6      	beq.n	800481a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b095      	sub	sp, #84	; 0x54
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fc:	643b      	str	r3, [r7, #64]	; 0x40
 80048fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	2b01      	cmp	r3, #1
 800494a:	d118      	bne.n	800497e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	60bb      	str	r3, [r7, #8]
   return(result);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	43db      	mvns	r3, r3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4013      	ands	r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049d4:	b084      	sub	sp, #16
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	f107 0014 	add.w	r0, r7, #20
 80049e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	b004      	add	sp, #16
 8004a14:	4770      	bx	lr
	...

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000022c 	.word	0x2000022c

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	; (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	; (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	; (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	; (8004a68 <__libc_init_array+0x44>)
 8004a38:	f000 fc8e 	bl	8005358 <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	08005434 	.word	0x08005434
 8004a60:	08005434 	.word	0x08005434
 8004a64:	08005434 	.word	0x08005434
 8004a68:	08005438 	.word	0x08005438

08004a6c <memset>:
 8004a6c:	4402      	add	r2, r0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memset+0xa>
 8004a74:	4770      	bx	lr
 8004a76:	f803 1b01 	strb.w	r1, [r3], #1
 8004a7a:	e7f9      	b.n	8004a70 <memset+0x4>

08004a7c <siprintf>:
 8004a7c:	b40e      	push	{r1, r2, r3}
 8004a7e:	b500      	push	{lr}
 8004a80:	b09c      	sub	sp, #112	; 0x70
 8004a82:	ab1d      	add	r3, sp, #116	; 0x74
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	9006      	str	r0, [sp, #24]
 8004a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a8c:	4809      	ldr	r0, [pc, #36]	; (8004ab4 <siprintf+0x38>)
 8004a8e:	9107      	str	r1, [sp, #28]
 8004a90:	9104      	str	r1, [sp, #16]
 8004a92:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <siprintf+0x3c>)
 8004a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a98:	9105      	str	r1, [sp, #20]
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	a902      	add	r1, sp, #8
 8004aa0:	f000 f868 	bl	8004b74 <_svfiprintf_r>
 8004aa4:	9b02      	ldr	r3, [sp, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	b01c      	add	sp, #112	; 0x70
 8004aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab0:	b003      	add	sp, #12
 8004ab2:	4770      	bx	lr
 8004ab4:	2000022c 	.word	0x2000022c
 8004ab8:	ffff0208 	.word	0xffff0208

08004abc <__ssputs_r>:
 8004abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	688e      	ldr	r6, [r1, #8]
 8004ac2:	429e      	cmp	r6, r3
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	d838      	bhi.n	8004b40 <__ssputs_r+0x84>
 8004ace:	898a      	ldrh	r2, [r1, #12]
 8004ad0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ad4:	d032      	beq.n	8004b3c <__ssputs_r+0x80>
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	6909      	ldr	r1, [r1, #16]
 8004ada:	eba5 0901 	sub.w	r9, r5, r1
 8004ade:	6965      	ldr	r5, [r4, #20]
 8004ae0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae8:	3301      	adds	r3, #1
 8004aea:	444b      	add	r3, r9
 8004aec:	106d      	asrs	r5, r5, #1
 8004aee:	429d      	cmp	r5, r3
 8004af0:	bf38      	it	cc
 8004af2:	461d      	movcc	r5, r3
 8004af4:	0553      	lsls	r3, r2, #21
 8004af6:	d531      	bpl.n	8004b5c <__ssputs_r+0xa0>
 8004af8:	4629      	mov	r1, r5
 8004afa:	f000 fb63 	bl	80051c4 <_malloc_r>
 8004afe:	4606      	mov	r6, r0
 8004b00:	b950      	cbnz	r0, 8004b18 <__ssputs_r+0x5c>
 8004b02:	230c      	movs	r3, #12
 8004b04:	f8ca 3000 	str.w	r3, [sl]
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b18:	6921      	ldr	r1, [r4, #16]
 8004b1a:	464a      	mov	r2, r9
 8004b1c:	f000 fabe 	bl	800509c <memcpy>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	6126      	str	r6, [r4, #16]
 8004b2e:	6165      	str	r5, [r4, #20]
 8004b30:	444e      	add	r6, r9
 8004b32:	eba5 0509 	sub.w	r5, r5, r9
 8004b36:	6026      	str	r6, [r4, #0]
 8004b38:	60a5      	str	r5, [r4, #8]
 8004b3a:	463e      	mov	r6, r7
 8004b3c:	42be      	cmp	r6, r7
 8004b3e:	d900      	bls.n	8004b42 <__ssputs_r+0x86>
 8004b40:	463e      	mov	r6, r7
 8004b42:	6820      	ldr	r0, [r4, #0]
 8004b44:	4632      	mov	r2, r6
 8004b46:	4641      	mov	r1, r8
 8004b48:	f000 fab6 	bl	80050b8 <memmove>
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	1b9b      	subs	r3, r3, r6
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	4433      	add	r3, r6
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	2000      	movs	r0, #0
 8004b5a:	e7db      	b.n	8004b14 <__ssputs_r+0x58>
 8004b5c:	462a      	mov	r2, r5
 8004b5e:	f000 fba5 	bl	80052ac <_realloc_r>
 8004b62:	4606      	mov	r6, r0
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1e1      	bne.n	8004b2c <__ssputs_r+0x70>
 8004b68:	6921      	ldr	r1, [r4, #16]
 8004b6a:	4650      	mov	r0, sl
 8004b6c:	f000 fabe 	bl	80050ec <_free_r>
 8004b70:	e7c7      	b.n	8004b02 <__ssputs_r+0x46>
	...

08004b74 <_svfiprintf_r>:
 8004b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b78:	4698      	mov	r8, r3
 8004b7a:	898b      	ldrh	r3, [r1, #12]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	b09d      	sub	sp, #116	; 0x74
 8004b80:	4607      	mov	r7, r0
 8004b82:	460d      	mov	r5, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	d50e      	bpl.n	8004ba6 <_svfiprintf_r+0x32>
 8004b88:	690b      	ldr	r3, [r1, #16]
 8004b8a:	b963      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x32>
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	f000 fb19 	bl	80051c4 <_malloc_r>
 8004b92:	6028      	str	r0, [r5, #0]
 8004b94:	6128      	str	r0, [r5, #16]
 8004b96:	b920      	cbnz	r0, 8004ba2 <_svfiprintf_r+0x2e>
 8004b98:	230c      	movs	r3, #12
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	e0d1      	b.n	8004d46 <_svfiprintf_r+0x1d2>
 8004ba2:	2340      	movs	r3, #64	; 0x40
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9309      	str	r3, [sp, #36]	; 0x24
 8004baa:	2320      	movs	r3, #32
 8004bac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb4:	2330      	movs	r3, #48	; 0x30
 8004bb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d60 <_svfiprintf_r+0x1ec>
 8004bba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bbe:	f04f 0901 	mov.w	r9, #1
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	469a      	mov	sl, r3
 8004bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bca:	b10a      	cbz	r2, 8004bd0 <_svfiprintf_r+0x5c>
 8004bcc:	2a25      	cmp	r2, #37	; 0x25
 8004bce:	d1f9      	bne.n	8004bc4 <_svfiprintf_r+0x50>
 8004bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x7a>
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ff6d 	bl	8004abc <__ssputs_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	f000 80aa 	beq.w	8004d3c <_svfiprintf_r+0x1c8>
 8004be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bea:	445a      	add	r2, fp
 8004bec:	9209      	str	r2, [sp, #36]	; 0x24
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a2 	beq.w	8004d3c <_svfiprintf_r+0x1c8>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c02:	f10a 0a01 	add.w	sl, sl, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c0e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c10:	4654      	mov	r4, sl
 8004c12:	2205      	movs	r2, #5
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	4851      	ldr	r0, [pc, #324]	; (8004d60 <_svfiprintf_r+0x1ec>)
 8004c1a:	f7fb fad9 	bl	80001d0 <memchr>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_svfiprintf_r+0xe6>
 8004c22:	06d0      	lsls	r0, r2, #27
 8004c24:	bf44      	itt	mi
 8004c26:	2320      	movmi	r3, #32
 8004c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c2c:	0711      	lsls	r1, r2, #28
 8004c2e:	bf44      	itt	mi
 8004c30:	232b      	movmi	r3, #43	; 0x2b
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c36:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3c:	d015      	beq.n	8004c6a <_svfiprintf_r+0xf6>
 8004c3e:	9a07      	ldr	r2, [sp, #28]
 8004c40:	4654      	mov	r4, sl
 8004c42:	2000      	movs	r0, #0
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4e:	3b30      	subs	r3, #48	; 0x30
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d94e      	bls.n	8004cf2 <_svfiprintf_r+0x17e>
 8004c54:	b1b0      	cbz	r0, 8004c84 <_svfiprintf_r+0x110>
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	e014      	b.n	8004c84 <_svfiprintf_r+0x110>
 8004c5a:	eba0 0308 	sub.w	r3, r0, r8
 8004c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	46a2      	mov	sl, r4
 8004c68:	e7d2      	b.n	8004c10 <_svfiprintf_r+0x9c>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	9103      	str	r1, [sp, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbb      	ittet	lt
 8004c76:	425b      	neglt	r3, r3
 8004c78:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7c:	9307      	strge	r3, [sp, #28]
 8004c7e:	9307      	strlt	r3, [sp, #28]
 8004c80:	bfb8      	it	lt
 8004c82:	9204      	strlt	r2, [sp, #16]
 8004c84:	7823      	ldrb	r3, [r4, #0]
 8004c86:	2b2e      	cmp	r3, #46	; 0x2e
 8004c88:	d10c      	bne.n	8004ca4 <_svfiprintf_r+0x130>
 8004c8a:	7863      	ldrb	r3, [r4, #1]
 8004c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c8e:	d135      	bne.n	8004cfc <_svfiprintf_r+0x188>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9203      	str	r2, [sp, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bfb8      	it	lt
 8004c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ca0:	3402      	adds	r4, #2
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d70 <_svfiprintf_r+0x1fc>
 8004ca8:	7821      	ldrb	r1, [r4, #0]
 8004caa:	2203      	movs	r2, #3
 8004cac:	4650      	mov	r0, sl
 8004cae:	f7fb fa8f 	bl	80001d0 <memchr>
 8004cb2:	b140      	cbz	r0, 8004cc6 <_svfiprintf_r+0x152>
 8004cb4:	2340      	movs	r3, #64	; 0x40
 8004cb6:	eba0 000a 	sub.w	r0, r0, sl
 8004cba:	fa03 f000 	lsl.w	r0, r3, r0
 8004cbe:	9b04      	ldr	r3, [sp, #16]
 8004cc0:	4303      	orrs	r3, r0
 8004cc2:	3401      	adds	r4, #1
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cca:	4826      	ldr	r0, [pc, #152]	; (8004d64 <_svfiprintf_r+0x1f0>)
 8004ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cd0:	2206      	movs	r2, #6
 8004cd2:	f7fb fa7d 	bl	80001d0 <memchr>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d038      	beq.n	8004d4c <_svfiprintf_r+0x1d8>
 8004cda:	4b23      	ldr	r3, [pc, #140]	; (8004d68 <_svfiprintf_r+0x1f4>)
 8004cdc:	bb1b      	cbnz	r3, 8004d26 <_svfiprintf_r+0x1b2>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	3307      	adds	r3, #7
 8004ce2:	f023 0307 	bic.w	r3, r3, #7
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	9303      	str	r3, [sp, #12]
 8004cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cec:	4433      	add	r3, r6
 8004cee:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf0:	e767      	b.n	8004bc2 <_svfiprintf_r+0x4e>
 8004cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e7a5      	b.n	8004c48 <_svfiprintf_r+0xd4>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	3401      	adds	r4, #1
 8004d00:	9305      	str	r3, [sp, #20]
 8004d02:	4619      	mov	r1, r3
 8004d04:	f04f 0c0a 	mov.w	ip, #10
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d0e:	3a30      	subs	r2, #48	; 0x30
 8004d10:	2a09      	cmp	r2, #9
 8004d12:	d903      	bls.n	8004d1c <_svfiprintf_r+0x1a8>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0c5      	beq.n	8004ca4 <_svfiprintf_r+0x130>
 8004d18:	9105      	str	r1, [sp, #20]
 8004d1a:	e7c3      	b.n	8004ca4 <_svfiprintf_r+0x130>
 8004d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d20:	4604      	mov	r4, r0
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7f0      	b.n	8004d08 <_svfiprintf_r+0x194>
 8004d26:	ab03      	add	r3, sp, #12
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d2e:	a904      	add	r1, sp, #16
 8004d30:	4638      	mov	r0, r7
 8004d32:	f3af 8000 	nop.w
 8004d36:	1c42      	adds	r2, r0, #1
 8004d38:	4606      	mov	r6, r0
 8004d3a:	d1d6      	bne.n	8004cea <_svfiprintf_r+0x176>
 8004d3c:	89ab      	ldrh	r3, [r5, #12]
 8004d3e:	065b      	lsls	r3, r3, #25
 8004d40:	f53f af2c 	bmi.w	8004b9c <_svfiprintf_r+0x28>
 8004d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d46:	b01d      	add	sp, #116	; 0x74
 8004d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4c:	ab03      	add	r3, sp, #12
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	462a      	mov	r2, r5
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <_svfiprintf_r+0x1f8>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	4638      	mov	r0, r7
 8004d58:	f000 f87a 	bl	8004e50 <_printf_i>
 8004d5c:	e7eb      	b.n	8004d36 <_svfiprintf_r+0x1c2>
 8004d5e:	bf00      	nop
 8004d60:	08005400 	.word	0x08005400
 8004d64:	0800540a 	.word	0x0800540a
 8004d68:	00000000 	.word	0x00000000
 8004d6c:	08004abd 	.word	0x08004abd
 8004d70:	08005406 	.word	0x08005406

08004d74 <_printf_common>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4616      	mov	r6, r2
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	bfb8      	it	lt
 8004d88:	4613      	movlt	r3, r2
 8004d8a:	6033      	str	r3, [r6, #0]
 8004d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d90:	4607      	mov	r7, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	b10a      	cbz	r2, 8004d9a <_printf_common+0x26>
 8004d96:	3301      	adds	r3, #1
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	0699      	lsls	r1, r3, #26
 8004d9e:	bf42      	ittt	mi
 8004da0:	6833      	ldrmi	r3, [r6, #0]
 8004da2:	3302      	addmi	r3, #2
 8004da4:	6033      	strmi	r3, [r6, #0]
 8004da6:	6825      	ldr	r5, [r4, #0]
 8004da8:	f015 0506 	ands.w	r5, r5, #6
 8004dac:	d106      	bne.n	8004dbc <_printf_common+0x48>
 8004dae:	f104 0a19 	add.w	sl, r4, #25
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	6832      	ldr	r2, [r6, #0]
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	dc26      	bgt.n	8004e0a <_printf_common+0x96>
 8004dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc0:	1e13      	subs	r3, r2, #0
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	bf18      	it	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	0692      	lsls	r2, r2, #26
 8004dca:	d42b      	bmi.n	8004e24 <_printf_common+0xb0>
 8004dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d01e      	beq.n	8004e18 <_printf_common+0xa4>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	68e5      	ldr	r5, [r4, #12]
 8004dde:	6832      	ldr	r2, [r6, #0]
 8004de0:	f003 0306 	and.w	r3, r3, #6
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	bf08      	it	eq
 8004de8:	1aad      	subeq	r5, r5, r2
 8004dea:	68a3      	ldr	r3, [r4, #8]
 8004dec:	6922      	ldr	r2, [r4, #16]
 8004dee:	bf0c      	ite	eq
 8004df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df4:	2500      	movne	r5, #0
 8004df6:	4293      	cmp	r3, r2
 8004df8:	bfc4      	itt	gt
 8004dfa:	1a9b      	subgt	r3, r3, r2
 8004dfc:	18ed      	addgt	r5, r5, r3
 8004dfe:	2600      	movs	r6, #0
 8004e00:	341a      	adds	r4, #26
 8004e02:	42b5      	cmp	r5, r6
 8004e04:	d11a      	bne.n	8004e3c <_printf_common+0xc8>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e008      	b.n	8004e1c <_printf_common+0xa8>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4649      	mov	r1, r9
 8004e10:	4638      	mov	r0, r7
 8004e12:	47c0      	blx	r8
 8004e14:	3001      	adds	r0, #1
 8004e16:	d103      	bne.n	8004e20 <_printf_common+0xac>
 8004e18:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7c6      	b.n	8004db2 <_printf_common+0x3e>
 8004e24:	18e1      	adds	r1, r4, r3
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	2030      	movs	r0, #48	; 0x30
 8004e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e2e:	4422      	add	r2, r4
 8004e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e38:	3302      	adds	r3, #2
 8004e3a:	e7c7      	b.n	8004dcc <_printf_common+0x58>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4622      	mov	r2, r4
 8004e40:	4649      	mov	r1, r9
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c0      	blx	r8
 8004e46:	3001      	adds	r0, #1
 8004e48:	d0e6      	beq.n	8004e18 <_printf_common+0xa4>
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7d9      	b.n	8004e02 <_printf_common+0x8e>
	...

08004e50 <_printf_i>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	7e0f      	ldrb	r7, [r1, #24]
 8004e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e58:	2f78      	cmp	r7, #120	; 0x78
 8004e5a:	4691      	mov	r9, r2
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	469a      	mov	sl, r3
 8004e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e66:	d807      	bhi.n	8004e78 <_printf_i+0x28>
 8004e68:	2f62      	cmp	r7, #98	; 0x62
 8004e6a:	d80a      	bhi.n	8004e82 <_printf_i+0x32>
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	f000 80d8 	beq.w	8005022 <_printf_i+0x1d2>
 8004e72:	2f58      	cmp	r7, #88	; 0x58
 8004e74:	f000 80a3 	beq.w	8004fbe <_printf_i+0x16e>
 8004e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e80:	e03a      	b.n	8004ef8 <_printf_i+0xa8>
 8004e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e86:	2b15      	cmp	r3, #21
 8004e88:	d8f6      	bhi.n	8004e78 <_printf_i+0x28>
 8004e8a:	a101      	add	r1, pc, #4	; (adr r1, 8004e90 <_printf_i+0x40>)
 8004e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e90:	08004ee9 	.word	0x08004ee9
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004e79 	.word	0x08004e79
 8004e9c:	08004e79 	.word	0x08004e79
 8004ea0:	08004e79 	.word	0x08004e79
 8004ea4:	08004e79 	.word	0x08004e79
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08004e79 	.word	0x08004e79
 8004eb0:	08004e79 	.word	0x08004e79
 8004eb4:	08004e79 	.word	0x08004e79
 8004eb8:	08004e79 	.word	0x08004e79
 8004ebc:	08005009 	.word	0x08005009
 8004ec0:	08004f2d 	.word	0x08004f2d
 8004ec4:	08004feb 	.word	0x08004feb
 8004ec8:	08004e79 	.word	0x08004e79
 8004ecc:	08004e79 	.word	0x08004e79
 8004ed0:	0800502b 	.word	0x0800502b
 8004ed4:	08004e79 	.word	0x08004e79
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	08004e79 	.word	0x08004e79
 8004ee0:	08004e79 	.word	0x08004e79
 8004ee4:	08004ff3 	.word	0x08004ff3
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	1d1a      	adds	r2, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	602a      	str	r2, [r5, #0]
 8004ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0a3      	b.n	8005044 <_printf_i+0x1f4>
 8004efc:	6820      	ldr	r0, [r4, #0]
 8004efe:	6829      	ldr	r1, [r5, #0]
 8004f00:	0606      	lsls	r6, r0, #24
 8004f02:	f101 0304 	add.w	r3, r1, #4
 8004f06:	d50a      	bpl.n	8004f1e <_printf_i+0xce>
 8004f08:	680e      	ldr	r6, [r1, #0]
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	2e00      	cmp	r6, #0
 8004f0e:	da03      	bge.n	8004f18 <_printf_i+0xc8>
 8004f10:	232d      	movs	r3, #45	; 0x2d
 8004f12:	4276      	negs	r6, r6
 8004f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f18:	485e      	ldr	r0, [pc, #376]	; (8005094 <_printf_i+0x244>)
 8004f1a:	230a      	movs	r3, #10
 8004f1c:	e019      	b.n	8004f52 <_printf_i+0x102>
 8004f1e:	680e      	ldr	r6, [r1, #0]
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f26:	bf18      	it	ne
 8004f28:	b236      	sxthne	r6, r6
 8004f2a:	e7ef      	b.n	8004f0c <_printf_i+0xbc>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1d19      	adds	r1, r3, #4
 8004f32:	6029      	str	r1, [r5, #0]
 8004f34:	0601      	lsls	r1, r0, #24
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0xec>
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0xf2>
 8004f3c:	0646      	lsls	r6, r0, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0xe8>
 8004f40:	881e      	ldrh	r6, [r3, #0]
 8004f42:	4854      	ldr	r0, [pc, #336]	; (8005094 <_printf_i+0x244>)
 8004f44:	2f6f      	cmp	r7, #111	; 0x6f
 8004f46:	bf0c      	ite	eq
 8004f48:	2308      	moveq	r3, #8
 8004f4a:	230a      	movne	r3, #10
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f52:	6865      	ldr	r5, [r4, #4]
 8004f54:	60a5      	str	r5, [r4, #8]
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	bfa2      	ittt	ge
 8004f5a:	6821      	ldrge	r1, [r4, #0]
 8004f5c:	f021 0104 	bicge.w	r1, r1, #4
 8004f60:	6021      	strge	r1, [r4, #0]
 8004f62:	b90e      	cbnz	r6, 8004f68 <_printf_i+0x118>
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	d04d      	beq.n	8005004 <_printf_i+0x1b4>
 8004f68:	4615      	mov	r5, r2
 8004f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f72:	5dc7      	ldrb	r7, [r0, r7]
 8004f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f78:	4637      	mov	r7, r6
 8004f7a:	42bb      	cmp	r3, r7
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	d9f4      	bls.n	8004f6a <_printf_i+0x11a>
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d10b      	bne.n	8004f9c <_printf_i+0x14c>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	07de      	lsls	r6, r3, #31
 8004f88:	d508      	bpl.n	8004f9c <_printf_i+0x14c>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	6861      	ldr	r1, [r4, #4]
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	bfde      	ittt	le
 8004f92:	2330      	movle	r3, #48	; 0x30
 8004f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f9c:	1b52      	subs	r2, r2, r5
 8004f9e:	6122      	str	r2, [r4, #16]
 8004fa0:	f8cd a000 	str.w	sl, [sp]
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	aa03      	add	r2, sp, #12
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff fee2 	bl	8004d74 <_printf_common>
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d14c      	bne.n	800504e <_printf_i+0x1fe>
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	b004      	add	sp, #16
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	4835      	ldr	r0, [pc, #212]	; (8005094 <_printf_i+0x244>)
 8004fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fc4:	6829      	ldr	r1, [r5, #0]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fcc:	6029      	str	r1, [r5, #0]
 8004fce:	061d      	lsls	r5, r3, #24
 8004fd0:	d514      	bpl.n	8004ffc <_printf_i+0x1ac>
 8004fd2:	07df      	lsls	r7, r3, #31
 8004fd4:	bf44      	itt	mi
 8004fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fda:	6023      	strmi	r3, [r4, #0]
 8004fdc:	b91e      	cbnz	r6, 8004fe6 <_printf_i+0x196>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	f023 0320 	bic.w	r3, r3, #32
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	e7b0      	b.n	8004f4c <_printf_i+0xfc>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	f043 0320 	orr.w	r3, r3, #32
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	2378      	movs	r3, #120	; 0x78
 8004ff4:	4828      	ldr	r0, [pc, #160]	; (8005098 <_printf_i+0x248>)
 8004ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ffa:	e7e3      	b.n	8004fc4 <_printf_i+0x174>
 8004ffc:	0659      	lsls	r1, r3, #25
 8004ffe:	bf48      	it	mi
 8005000:	b2b6      	uxthmi	r6, r6
 8005002:	e7e6      	b.n	8004fd2 <_printf_i+0x182>
 8005004:	4615      	mov	r5, r2
 8005006:	e7bb      	b.n	8004f80 <_printf_i+0x130>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	6826      	ldr	r6, [r4, #0]
 800500c:	6961      	ldr	r1, [r4, #20]
 800500e:	1d18      	adds	r0, r3, #4
 8005010:	6028      	str	r0, [r5, #0]
 8005012:	0635      	lsls	r5, r6, #24
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	d501      	bpl.n	800501c <_printf_i+0x1cc>
 8005018:	6019      	str	r1, [r3, #0]
 800501a:	e002      	b.n	8005022 <_printf_i+0x1d2>
 800501c:	0670      	lsls	r0, r6, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0x1c8>
 8005020:	8019      	strh	r1, [r3, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	4615      	mov	r5, r2
 8005028:	e7ba      	b.n	8004fa0 <_printf_i+0x150>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	681d      	ldr	r5, [r3, #0]
 8005032:	6862      	ldr	r2, [r4, #4]
 8005034:	2100      	movs	r1, #0
 8005036:	4628      	mov	r0, r5
 8005038:	f7fb f8ca 	bl	80001d0 <memchr>
 800503c:	b108      	cbz	r0, 8005042 <_printf_i+0x1f2>
 800503e:	1b40      	subs	r0, r0, r5
 8005040:	6060      	str	r0, [r4, #4]
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	6123      	str	r3, [r4, #16]
 8005046:	2300      	movs	r3, #0
 8005048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504c:	e7a8      	b.n	8004fa0 <_printf_i+0x150>
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	462a      	mov	r2, r5
 8005052:	4649      	mov	r1, r9
 8005054:	4640      	mov	r0, r8
 8005056:	47d0      	blx	sl
 8005058:	3001      	adds	r0, #1
 800505a:	d0ab      	beq.n	8004fb4 <_printf_i+0x164>
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	079b      	lsls	r3, r3, #30
 8005060:	d413      	bmi.n	800508a <_printf_i+0x23a>
 8005062:	68e0      	ldr	r0, [r4, #12]
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	4298      	cmp	r0, r3
 8005068:	bfb8      	it	lt
 800506a:	4618      	movlt	r0, r3
 800506c:	e7a4      	b.n	8004fb8 <_printf_i+0x168>
 800506e:	2301      	movs	r3, #1
 8005070:	4632      	mov	r2, r6
 8005072:	4649      	mov	r1, r9
 8005074:	4640      	mov	r0, r8
 8005076:	47d0      	blx	sl
 8005078:	3001      	adds	r0, #1
 800507a:	d09b      	beq.n	8004fb4 <_printf_i+0x164>
 800507c:	3501      	adds	r5, #1
 800507e:	68e3      	ldr	r3, [r4, #12]
 8005080:	9903      	ldr	r1, [sp, #12]
 8005082:	1a5b      	subs	r3, r3, r1
 8005084:	42ab      	cmp	r3, r5
 8005086:	dcf2      	bgt.n	800506e <_printf_i+0x21e>
 8005088:	e7eb      	b.n	8005062 <_printf_i+0x212>
 800508a:	2500      	movs	r5, #0
 800508c:	f104 0619 	add.w	r6, r4, #25
 8005090:	e7f5      	b.n	800507e <_printf_i+0x22e>
 8005092:	bf00      	nop
 8005094:	08005411 	.word	0x08005411
 8005098:	08005422 	.word	0x08005422

0800509c <memcpy>:
 800509c:	440a      	add	r2, r1
 800509e:	4291      	cmp	r1, r2
 80050a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a4:	d100      	bne.n	80050a8 <memcpy+0xc>
 80050a6:	4770      	bx	lr
 80050a8:	b510      	push	{r4, lr}
 80050aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b2:	4291      	cmp	r1, r2
 80050b4:	d1f9      	bne.n	80050aa <memcpy+0xe>
 80050b6:	bd10      	pop	{r4, pc}

080050b8 <memmove>:
 80050b8:	4288      	cmp	r0, r1
 80050ba:	b510      	push	{r4, lr}
 80050bc:	eb01 0402 	add.w	r4, r1, r2
 80050c0:	d902      	bls.n	80050c8 <memmove+0x10>
 80050c2:	4284      	cmp	r4, r0
 80050c4:	4623      	mov	r3, r4
 80050c6:	d807      	bhi.n	80050d8 <memmove+0x20>
 80050c8:	1e43      	subs	r3, r0, #1
 80050ca:	42a1      	cmp	r1, r4
 80050cc:	d008      	beq.n	80050e0 <memmove+0x28>
 80050ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050d6:	e7f8      	b.n	80050ca <memmove+0x12>
 80050d8:	4402      	add	r2, r0
 80050da:	4601      	mov	r1, r0
 80050dc:	428a      	cmp	r2, r1
 80050de:	d100      	bne.n	80050e2 <memmove+0x2a>
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050ea:	e7f7      	b.n	80050dc <memmove+0x24>

080050ec <_free_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <_free_r+0x90>
 80050f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f6:	9001      	str	r0, [sp, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f1a1 0404 	sub.w	r4, r1, #4
 80050fe:	bfb8      	it	lt
 8005100:	18e4      	addlt	r4, r4, r3
 8005102:	f000 f913 	bl	800532c <__malloc_lock>
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <_free_r+0x94>)
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b933      	cbnz	r3, 800511c <_free_r+0x30>
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	b003      	add	sp, #12
 8005114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005118:	f000 b90e 	b.w	8005338 <__malloc_unlock>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d908      	bls.n	8005132 <_free_r+0x46>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf01      	itttt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	1949      	addeq	r1, r1, r5
 800512e:	6021      	streq	r1, [r4, #0]
 8005130:	e7ed      	b.n	800510e <_free_r+0x22>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x50>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x46>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x70>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1e0      	bne.n	8005112 <_free_r+0x26>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7da      	b.n	8005112 <_free_r+0x26>
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d6      	b.n	8005112 <_free_r+0x26>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7ca      	b.n	8005112 <_free_r+0x26>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	20000740 	.word	0x20000740

08005184 <sbrk_aligned>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4e0e      	ldr	r6, [pc, #56]	; (80051c0 <sbrk_aligned+0x3c>)
 8005188:	460c      	mov	r4, r1
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	4605      	mov	r5, r0
 800518e:	b911      	cbnz	r1, 8005196 <sbrk_aligned+0x12>
 8005190:	f000 f8bc 	bl	800530c <_sbrk_r>
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f8b7 	bl	800530c <_sbrk_r>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d00a      	beq.n	80051b8 <sbrk_aligned+0x34>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d007      	beq.n	80051bc <sbrk_aligned+0x38>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f8ac 	bl	800530c <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d101      	bne.n	80051bc <sbrk_aligned+0x38>
 80051b8:	f04f 34ff 	mov.w	r4, #4294967295
 80051bc:	4620      	mov	r0, r4
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	20000744 	.word	0x20000744

080051c4 <_malloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d905      	bls.n	80051ec <_malloc_r+0x28>
 80051e0:	230c      	movs	r3, #12
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	2600      	movs	r6, #0
 80051e6:	4630      	mov	r0, r6
 80051e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ec:	4e2e      	ldr	r6, [pc, #184]	; (80052a8 <_malloc_r+0xe4>)
 80051ee:	f000 f89d 	bl	800532c <__malloc_lock>
 80051f2:	6833      	ldr	r3, [r6, #0]
 80051f4:	461c      	mov	r4, r3
 80051f6:	bb34      	cbnz	r4, 8005246 <_malloc_r+0x82>
 80051f8:	4629      	mov	r1, r5
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ffc2 	bl	8005184 <sbrk_aligned>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	4604      	mov	r4, r0
 8005204:	d14d      	bne.n	80052a2 <_malloc_r+0xde>
 8005206:	6834      	ldr	r4, [r6, #0]
 8005208:	4626      	mov	r6, r4
 800520a:	2e00      	cmp	r6, #0
 800520c:	d140      	bne.n	8005290 <_malloc_r+0xcc>
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	4631      	mov	r1, r6
 8005212:	4638      	mov	r0, r7
 8005214:	eb04 0803 	add.w	r8, r4, r3
 8005218:	f000 f878 	bl	800530c <_sbrk_r>
 800521c:	4580      	cmp	r8, r0
 800521e:	d13a      	bne.n	8005296 <_malloc_r+0xd2>
 8005220:	6821      	ldr	r1, [r4, #0]
 8005222:	3503      	adds	r5, #3
 8005224:	1a6d      	subs	r5, r5, r1
 8005226:	f025 0503 	bic.w	r5, r5, #3
 800522a:	3508      	adds	r5, #8
 800522c:	2d0c      	cmp	r5, #12
 800522e:	bf38      	it	cc
 8005230:	250c      	movcc	r5, #12
 8005232:	4629      	mov	r1, r5
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff ffa5 	bl	8005184 <sbrk_aligned>
 800523a:	3001      	adds	r0, #1
 800523c:	d02b      	beq.n	8005296 <_malloc_r+0xd2>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	442b      	add	r3, r5
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	e00e      	b.n	8005264 <_malloc_r+0xa0>
 8005246:	6822      	ldr	r2, [r4, #0]
 8005248:	1b52      	subs	r2, r2, r5
 800524a:	d41e      	bmi.n	800528a <_malloc_r+0xc6>
 800524c:	2a0b      	cmp	r2, #11
 800524e:	d916      	bls.n	800527e <_malloc_r+0xba>
 8005250:	1961      	adds	r1, r4, r5
 8005252:	42a3      	cmp	r3, r4
 8005254:	6025      	str	r5, [r4, #0]
 8005256:	bf18      	it	ne
 8005258:	6059      	strne	r1, [r3, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	bf08      	it	eq
 800525e:	6031      	streq	r1, [r6, #0]
 8005260:	5162      	str	r2, [r4, r5]
 8005262:	604b      	str	r3, [r1, #4]
 8005264:	4638      	mov	r0, r7
 8005266:	f104 060b 	add.w	r6, r4, #11
 800526a:	f000 f865 	bl	8005338 <__malloc_unlock>
 800526e:	f026 0607 	bic.w	r6, r6, #7
 8005272:	1d23      	adds	r3, r4, #4
 8005274:	1af2      	subs	r2, r6, r3
 8005276:	d0b6      	beq.n	80051e6 <_malloc_r+0x22>
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	50a3      	str	r3, [r4, r2]
 800527c:	e7b3      	b.n	80051e6 <_malloc_r+0x22>
 800527e:	6862      	ldr	r2, [r4, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	bf0c      	ite	eq
 8005284:	6032      	streq	r2, [r6, #0]
 8005286:	605a      	strne	r2, [r3, #4]
 8005288:	e7ec      	b.n	8005264 <_malloc_r+0xa0>
 800528a:	4623      	mov	r3, r4
 800528c:	6864      	ldr	r4, [r4, #4]
 800528e:	e7b2      	b.n	80051f6 <_malloc_r+0x32>
 8005290:	4634      	mov	r4, r6
 8005292:	6876      	ldr	r6, [r6, #4]
 8005294:	e7b9      	b.n	800520a <_malloc_r+0x46>
 8005296:	230c      	movs	r3, #12
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4638      	mov	r0, r7
 800529c:	f000 f84c 	bl	8005338 <__malloc_unlock>
 80052a0:	e7a1      	b.n	80051e6 <_malloc_r+0x22>
 80052a2:	6025      	str	r5, [r4, #0]
 80052a4:	e7de      	b.n	8005264 <_malloc_r+0xa0>
 80052a6:	bf00      	nop
 80052a8:	20000740 	.word	0x20000740

080052ac <_realloc_r>:
 80052ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b0:	4680      	mov	r8, r0
 80052b2:	4614      	mov	r4, r2
 80052b4:	460e      	mov	r6, r1
 80052b6:	b921      	cbnz	r1, 80052c2 <_realloc_r+0x16>
 80052b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052bc:	4611      	mov	r1, r2
 80052be:	f7ff bf81 	b.w	80051c4 <_malloc_r>
 80052c2:	b92a      	cbnz	r2, 80052d0 <_realloc_r+0x24>
 80052c4:	f7ff ff12 	bl	80050ec <_free_r>
 80052c8:	4625      	mov	r5, r4
 80052ca:	4628      	mov	r0, r5
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d0:	f000 f838 	bl	8005344 <_malloc_usable_size_r>
 80052d4:	4284      	cmp	r4, r0
 80052d6:	4607      	mov	r7, r0
 80052d8:	d802      	bhi.n	80052e0 <_realloc_r+0x34>
 80052da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052de:	d812      	bhi.n	8005306 <_realloc_r+0x5a>
 80052e0:	4621      	mov	r1, r4
 80052e2:	4640      	mov	r0, r8
 80052e4:	f7ff ff6e 	bl	80051c4 <_malloc_r>
 80052e8:	4605      	mov	r5, r0
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d0ed      	beq.n	80052ca <_realloc_r+0x1e>
 80052ee:	42bc      	cmp	r4, r7
 80052f0:	4622      	mov	r2, r4
 80052f2:	4631      	mov	r1, r6
 80052f4:	bf28      	it	cs
 80052f6:	463a      	movcs	r2, r7
 80052f8:	f7ff fed0 	bl	800509c <memcpy>
 80052fc:	4631      	mov	r1, r6
 80052fe:	4640      	mov	r0, r8
 8005300:	f7ff fef4 	bl	80050ec <_free_r>
 8005304:	e7e1      	b.n	80052ca <_realloc_r+0x1e>
 8005306:	4635      	mov	r5, r6
 8005308:	e7df      	b.n	80052ca <_realloc_r+0x1e>
	...

0800530c <_sbrk_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d06      	ldr	r5, [pc, #24]	; (8005328 <_sbrk_r+0x1c>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	602b      	str	r3, [r5, #0]
 8005318:	f7fb febc 	bl	8001094 <_sbrk>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_sbrk_r+0x1a>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_sbrk_r+0x1a>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	20000748 	.word	0x20000748

0800532c <__malloc_lock>:
 800532c:	4801      	ldr	r0, [pc, #4]	; (8005334 <__malloc_lock+0x8>)
 800532e:	f000 b811 	b.w	8005354 <__retarget_lock_acquire_recursive>
 8005332:	bf00      	nop
 8005334:	2000074c 	.word	0x2000074c

08005338 <__malloc_unlock>:
 8005338:	4801      	ldr	r0, [pc, #4]	; (8005340 <__malloc_unlock+0x8>)
 800533a:	f000 b80c 	b.w	8005356 <__retarget_lock_release_recursive>
 800533e:	bf00      	nop
 8005340:	2000074c 	.word	0x2000074c

08005344 <_malloc_usable_size_r>:
 8005344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005348:	1f18      	subs	r0, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfbc      	itt	lt
 800534e:	580b      	ldrlt	r3, [r1, r0]
 8005350:	18c0      	addlt	r0, r0, r3
 8005352:	4770      	bx	lr

08005354 <__retarget_lock_acquire_recursive>:
 8005354:	4770      	bx	lr

08005356 <__retarget_lock_release_recursive>:
 8005356:	4770      	bx	lr

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
