
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800329c  0800329c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800329c  0800329c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800329c  0800329c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080032a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f4  2**0
                  CONTENTS
 10 .bss          000003d0  200000f4  200000f4  000200f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  000200f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbea  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002002  00000000  00000000  0002dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0002fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  000308a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d5cb  00000000  00000000  00031338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f218  00000000  00000000  0004e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae6ac  00000000  00000000  0005db1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c1c7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f78  00000000  00000000  0010c218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f4 	.word	0x200000f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003254 	.word	0x08003254

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f8 	.word	0x200000f8
 80001c4:	08003254 	.word	0x08003254

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe26 	bl	8000e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90e 	bl	80003f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f86c 	bl	80002b4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8aa 	bl	8000334 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f8e6 	bl	80003b0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 80001e4:	f000 fb60 	bl	80008a8 <programInit>
    /* USER CODE BEGIN 3 */
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0); //B
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);  //A
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);  //C
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);  //D
		programLoop();
 80001e8:	f000 fb6a 	bl	80008c0 <programLoop>
  {
 80001ec:	e7fc      	b.n	80001e8 <main+0x20>
	...

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b09e      	sub	sp, #120	; 0x78
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f003 f820 	bl	8003244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	223c      	movs	r2, #60	; 0x3c
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 f812 	bl	8003244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000220:	2303      	movs	r3, #3
 8000222:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000224:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000228:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800023a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000240:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000244:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024a:	4618      	mov	r0, r3
 800024c:	f001 fb1a 	bl	8001884 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000256:	f000 f9f1 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025e:	2302      	movs	r3, #2
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000274:	2101      	movs	r1, #1
 8000276:	4618      	mov	r0, r3
 8000278:	f002 fb42 	bl	8002900 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000282:	f000 f9db 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <SystemClock_Config+0xc0>)
 8000288:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800028e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fd18 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002a2:	f000 f9cb 	bl	800063c <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3778      	adds	r7, #120	; 0x78
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	00020020 	.word	0x00020020

080002b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <MX_I2C1_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c0:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <MX_I2C1_Init+0x7c>)
 80002c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <MX_I2C1_Init+0x74>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_I2C1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_I2C1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_I2C1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_I2C1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002ee:	480e      	ldr	r0, [pc, #56]	; (8000328 <MX_I2C1_Init+0x74>)
 80002f0:	f001 f8d0 	bl	8001494 <HAL_I2C_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fa:	f000 f99f 	bl	800063c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002fe:	2100      	movs	r1, #0
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <MX_I2C1_Init+0x74>)
 8000302:	f001 f956 	bl	80015b2 <HAL_I2CEx_ConfigAnalogFilter>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800030c:	f000 f996 	bl	800063c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000310:	2100      	movs	r1, #0
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <MX_I2C1_Init+0x74>)
 8000314:	f001 f998 	bl	8001648 <HAL_I2CEx_ConfigDigitalFilter>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800031e:	f000 f98d 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000110 	.word	0x20000110
 800032c:	40005400 	.word	0x40005400
 8000330:	2000090e 	.word	0x2000090e

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_SPI1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_SPI1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000340:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI1_Init+0x74>)
 800034e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI1_Init+0x74>)
 800036a:	2208      	movs	r2, #8
 800036c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000382:	2207      	movs	r2, #7
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI1_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000394:	f002 fe4a 	bl	800302c <HAL_SPI_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f94d 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000164 	.word	0x20000164
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <MX_USB_PCD_Init+0x40>)
 80003b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003bc:	2208      	movs	r2, #8
 80003be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003c8:	2202      	movs	r2, #2
 80003ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_USB_PCD_Init+0x3c>)
 80003da:	f001 f981 	bl	80016e0 <HAL_PCD_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80003e4:	f000 f92a 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200001c8 	.word	0x200001c8
 80003f0:	40005c00 	.word	0x40005c00

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08c      	sub	sp, #48	; 0x30
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
 8000408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800040a:	4b86      	ldr	r3, [pc, #536]	; (8000624 <MX_GPIO_Init+0x230>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a85      	ldr	r2, [pc, #532]	; (8000624 <MX_GPIO_Init+0x230>)
 8000410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b83      	ldr	r3, [pc, #524]	; (8000624 <MX_GPIO_Init+0x230>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800041e:	61bb      	str	r3, [r7, #24]
 8000420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000422:	4b80      	ldr	r3, [pc, #512]	; (8000624 <MX_GPIO_Init+0x230>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a7f      	ldr	r2, [pc, #508]	; (8000624 <MX_GPIO_Init+0x230>)
 8000428:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800042c:	6153      	str	r3, [r2, #20]
 800042e:	4b7d      	ldr	r3, [pc, #500]	; (8000624 <MX_GPIO_Init+0x230>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800043a:	4b7a      	ldr	r3, [pc, #488]	; (8000624 <MX_GPIO_Init+0x230>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a79      	ldr	r2, [pc, #484]	; (8000624 <MX_GPIO_Init+0x230>)
 8000440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000444:	6153      	str	r3, [r2, #20]
 8000446:	4b77      	ldr	r3, [pc, #476]	; (8000624 <MX_GPIO_Init+0x230>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b74      	ldr	r3, [pc, #464]	; (8000624 <MX_GPIO_Init+0x230>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a73      	ldr	r2, [pc, #460]	; (8000624 <MX_GPIO_Init+0x230>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b71      	ldr	r3, [pc, #452]	; (8000624 <MX_GPIO_Init+0x230>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046a:	4b6e      	ldr	r3, [pc, #440]	; (8000624 <MX_GPIO_Init+0x230>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a6d      	ldr	r2, [pc, #436]	; (8000624 <MX_GPIO_Init+0x230>)
 8000470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000474:	6153      	str	r3, [r2, #20]
 8000476:	4b6b      	ldr	r3, [pc, #428]	; (8000624 <MX_GPIO_Init+0x230>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047e:	60bb      	str	r3, [r7, #8]
 8000480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000482:	4b68      	ldr	r3, [pc, #416]	; (8000624 <MX_GPIO_Init+0x230>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a67      	ldr	r2, [pc, #412]	; (8000624 <MX_GPIO_Init+0x230>)
 8000488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b65      	ldr	r3, [pc, #404]	; (8000624 <MX_GPIO_Init+0x230>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800049a:	2200      	movs	r2, #0
 800049c:	f64f 7108 	movw	r1, #65288	; 0xff08
 80004a0:	4861      	ldr	r0, [pc, #388]	; (8000628 <MX_GPIO_Init+0x234>)
 80004a2:	f000 ffad 	bl	8001400 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2114      	movs	r1, #20
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 ffa7 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2150      	movs	r1, #80	; 0x50
 80004b6:	485d      	ldr	r0, [pc, #372]	; (800062c <MX_GPIO_Init+0x238>)
 80004b8:	f000 ffa2 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f242 0105 	movw	r1, #8197	; 0x2005
 80004c2:	485b      	ldr	r0, [pc, #364]	; (8000630 <MX_GPIO_Init+0x23c>)
 80004c4:	f000 ff9c 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80004ce:	4859      	ldr	r0, [pc, #356]	; (8000634 <MX_GPIO_Init+0x240>)
 80004d0:	f000 ff96 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 80004d4:	2324      	movs	r3, #36	; 0x24
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	4619      	mov	r1, r3
 80004e8:	484f      	ldr	r0, [pc, #316]	; (8000628 <MX_GPIO_Init+0x234>)
 80004ea:	f000 fe0f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004ee:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004f2:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000500:	f107 031c 	add.w	r3, r7, #28
 8000504:	4619      	mov	r1, r3
 8000506:	4848      	ldr	r0, [pc, #288]	; (8000628 <MX_GPIO_Init+0x234>)
 8000508:	f000 fe00 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800050c:	2301      	movs	r3, #1
 800050e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000516:	2302      	movs	r3, #2
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	4619      	mov	r1, r3
 8000520:	4842      	ldr	r0, [pc, #264]	; (800062c <MX_GPIO_Init+0x238>)
 8000522:	f000 fdf3 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000526:	2301      	movs	r3, #1
 8000528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000532:	f107 031c 	add.w	r3, r7, #28
 8000536:	4619      	mov	r1, r3
 8000538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053c:	f000 fde6 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000540:	2302      	movs	r3, #2
 8000542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000544:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054a:	2302      	movs	r3, #2
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fdd8 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800055c:	2314      	movs	r3, #20
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 fdc9 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800057a:	2310      	movs	r3, #16
 800057c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000584:	2302      	movs	r3, #2
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	4619      	mov	r1, r3
 800058e:	482a      	ldr	r0, [pc, #168]	; (8000638 <MX_GPIO_Init+0x244>)
 8000590:	f000 fdbc 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000594:	2350      	movs	r3, #80	; 0x50
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2300      	movs	r3, #0
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	4619      	mov	r1, r3
 80005aa:	4820      	ldr	r0, [pc, #128]	; (800062c <MX_GPIO_Init+0x238>)
 80005ac:	f000 fdae 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 80005b0:	f242 0305 	movw	r3, #8197	; 0x2005
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4819      	ldr	r0, [pc, #100]	; (8000630 <MX_GPIO_Init+0x23c>)
 80005ca:	f000 fd9f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 80005ce:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4619      	mov	r1, r3
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <MX_GPIO_Init+0x240>)
 80005e8:	f000 fd90 	bl	800110c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2006      	movs	r0, #6
 80005f2:	f000 fd54 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f6:	2006      	movs	r0, #6
 80005f8:	f000 fd6d 	bl	80010d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2007      	movs	r0, #7
 8000602:	f000 fd4c 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000606:	2007      	movs	r0, #7
 8000608:	f000 fd65 	bl	80010d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fd44 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000616:	200a      	movs	r0, #10
 8000618:	f000 fd5d 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 800061c:	bf00      	nop
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	48001000 	.word	0x48001000
 800062c:	48000800 	.word	0x48000800
 8000630:	48000400 	.word	0x48000400
 8000634:	48000c00 	.word	0x48000c00
 8000638:	48001400 	.word	0x48001400

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b09      	cmp	r3, #9
 8000654:	d832      	bhi.n	80006bc <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 8000658:	6a18      	ldr	r0, [r3, #32]
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 800065c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
                          (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin,
 8000668:	461a      	mov	r2, r3
 800066a:	f000 fec9 	bl	8001400 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 8000670:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 8000674:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
                          (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	085b      	lsrs	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin,
 8000682:	461a      	mov	r2, r3
 8000684:	f000 febc 	bl	8001400 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 800068a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 800068e:	8e99      	ldrh	r1, [r3, #52]	; 0x34
                          (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	089b      	lsrs	r3, r3, #2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin,
 800069c:	461a      	mov	r2, r3
 800069e:	f000 feaf 	bl	8001400 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 80006a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <seven_segment_display_decimal+0x7c>)
 80006a8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
                          (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin,
 80006b6:	461a      	mov	r2, r3
 80006b8:	f000 fea2 	bl	8001400 <HAL_GPIO_WritePin>

//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000010 	.word	0x20000010

080006c8 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	e00f      	b.n	80006f4 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin,
 80006d4:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <seven_segment_deactivate_digits+0x3c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <seven_segment_deactivate_digits+0x3c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f000 fe89 	bl	8001400 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3301      	adds	r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	ddec      	ble.n	80006d4 <seven_segment_deactivate_digits+0xc>
                          GPIO_PIN_SET);
    }
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000010 	.word	0x20000010

08000708 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d836      	bhi.n	8000784 <seven_segment_activate_digit+0x7c>
		if(d == (2-state) && (HAL_GetTick() - last_time_on) > 40){
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <seven_segment_activate_digit+0x84>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f1c3 0202 	rsb	r2, r3, #2
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	429a      	cmp	r2, r3
 8000722:	d11b      	bne.n	800075c <seven_segment_activate_digit+0x54>
 8000724:	f000 fbd4 	bl	8000ed0 <HAL_GetTick>
 8000728:	4603      	mov	r3, r0
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <seven_segment_activate_digit+0x88>)
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	1a9b      	subs	r3, r3, r2
 8000730:	2b28      	cmp	r3, #40	; 0x28
 8000732:	d913      	bls.n	800075c <seven_segment_activate_digit+0x54>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <seven_segment_activate_digit+0x8c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800073c:	4915      	ldr	r1, [pc, #84]	; (8000794 <seven_segment_activate_digit+0x8c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	889b      	ldrh	r3, [r3, #4]
 8000746:	4619      	mov	r1, r3
 8000748:	4610      	mov	r0, r2
 800074a:	f000 fe71 	bl	8001430 <HAL_GPIO_TogglePin>
			last_time_on = HAL_GetTick();
 800074e:	f000 fbbf 	bl	8000ed0 <HAL_GetTick>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <seven_segment_activate_digit+0x88>)
 8000758:	601a      	str	r2, [r3, #0]
		else if (d != (2-state)){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
							  GPIO_PIN_RESET);
		}
    }
}
 800075a:	e013      	b.n	8000784 <seven_segment_activate_digit+0x7c>
		else if (d != (2-state)){
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <seven_segment_activate_digit+0x84>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1c3 0202 	rsb	r2, r3, #2
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	429a      	cmp	r2, r3
 8000768:	d00c      	beq.n	8000784 <seven_segment_activate_digit+0x7c>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin,
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <seven_segment_activate_digit+0x8c>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <seven_segment_activate_digit+0x8c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	4619      	mov	r1, r3
 8000780:	f000 fe3e 	bl	8001400 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000000 	.word	0x20000000
 8000790:	200004b4 	.word	0x200004b4
 8000794:	20000010 	.word	0x20000010

08000798 <seven_segment_set_num>:

void seven_segment_set_num(int numbers[3]) {
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i < 3; ++i) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e00f      	b.n	80007c6 <seven_segment_set_num+0x2e>
            seven_segment.digits[2 - i] = numbers[i];
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f1c3 0302 	rsb	r3, r3, #2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <seven_segment_set_num+0x44>)
 80007ba:	3310      	adds	r3, #16
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i < 3; ++i) {
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b02      	cmp	r3, #2
 80007ca:	d9ec      	bls.n	80007a6 <seven_segment_set_num+0xe>
    }
}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000010 	.word	0x20000010

080007e0 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 2;
    static uint32_t last_time_tmp = 0;
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80007e4:	2120      	movs	r1, #32
 80007e6:	482a      	ldr	r0, [pc, #168]	; (8000890 <seven_segment_refresh+0xb0>)
 80007e8:	f000 fe22 	bl	8001430 <HAL_GPIO_TogglePin>
    if (HAL_GetTick() - last_time_tmp > 5) {
 80007ec:	f000 fb70 	bl	8000ed0 <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <seven_segment_refresh+0xb4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d946      	bls.n	800088a <seven_segment_refresh+0xaa>
        seven_segment_deactivate_digits();
 80007fc:	f7ff ff64 	bl	80006c8 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <seven_segment_refresh+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff7f 	bl	8000708 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <seven_segment_refresh+0xb8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <seven_segment_refresh+0xbc>)
 8000810:	3310      	adds	r3, #16
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff16 	bl	8000648 <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 0) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 2)){
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <seven_segment_refresh+0xc0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d103      	bne.n	800082c <seven_segment_refresh+0x4c>
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <seven_segment_refresh+0xb8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00f      	beq.n	800084c <seven_segment_refresh+0x6c>
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <seven_segment_refresh+0xc0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d103      	bne.n	800083c <seven_segment_refresh+0x5c>
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <seven_segment_refresh+0xb8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d007      	beq.n	800084c <seven_segment_refresh+0x6c>
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <seven_segment_refresh+0xc0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10a      	bne.n	800085a <seven_segment_refresh+0x7a>
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <seven_segment_refresh+0xb8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d106      	bne.n	800085a <seven_segment_refresh+0x7a>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800084c:	2201      	movs	r2, #1
 800084e:	2104      	movs	r1, #4
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 fdd4 	bl	8001400 <HAL_GPIO_WritePin>
 8000858:	e005      	b.n	8000866 <seven_segment_refresh+0x86>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2104      	movs	r1, #4
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f000 fdcd 	bl	8001400 <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 3;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <seven_segment_refresh+0xb8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1c59      	adds	r1, r3, #1
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <seven_segment_refresh+0xc4>)
 800086e:	fba3 2301 	umull	r2, r3, r3, r1
 8000872:	085a      	lsrs	r2, r3, #1
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	1aca      	subs	r2, r1, r3
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <seven_segment_refresh+0xb8>)
 800087e:	601a      	str	r2, [r3, #0]
        last_time_tmp = HAL_GetTick();
 8000880:	f000 fb26 	bl	8000ed0 <HAL_GetTick>
 8000884:	4603      	mov	r3, r0
 8000886:	4a03      	ldr	r2, [pc, #12]	; (8000894 <seven_segment_refresh+0xb4>)
 8000888:	6013      	str	r3, [r2, #0]
    }
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	48001000 	.word	0x48001000
 8000894:	200004bc 	.word	0x200004bc
 8000898:	200000e4 	.word	0x200000e4
 800089c:	20000010 	.word	0x20000010
 80008a0:	20000000 	.word	0x20000000
 80008a4:	aaaaaaab 	.word	0xaaaaaaab

080008a8 <programInit>:

void programInit() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    seven_segment_set_num(numbers);
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <programInit+0x14>)
 80008ae:	f7ff ff73 	bl	8000798 <seven_segment_set_num>
    event();
 80008b2:	f000 f80b 	bl	80008cc <event>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000004 	.word	0x20000004

080008c0 <programLoop>:

void programLoop() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 80008c4:	f7ff ff8c 	bl	80007e0 <seven_segment_refresh>
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <event>:
		{.port=GPIOE, .pin=GPIO_PIN_14}, //6: D8
		{.port=GPIOE, .pin=GPIO_PIN_15}, //7: D6
		{.port=GPIOE, .pin=GPIO_PIN_8},  //8: D4
}};

void event(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	int a=numbers[2];
 80008d2:	4b3e      	ldr	r3, [pc, #248]	; (80009cc <event+0x100>)
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	60bb      	str	r3, [r7, #8]
	int b=numbers[1];
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <event+0x100>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	607b      	str	r3, [r7, #4]
	int c=numbers[0];
 80008de:	4b3b      	ldr	r3, [pc, #236]	; (80009cc <event+0x100>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	603b      	str	r3, [r7, #0]
	seven_segment_deactivate_digits();
 80008e4:	f7ff fef0 	bl	80006c8 <seven_segment_deactivate_digits>

	for (int i = 1; i < 9; i++)
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e011      	b.n	8000912 <event+0x46>
		HAL_GPIO_WritePin(leds_ltr.digit[i-1].port, leds_ltr.digit[i-1].pin,0);
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <event+0x104>)
 80008f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <event+0x104>)
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4413      	add	r3, r2
 8000902:	889b      	ldrh	r3, [r3, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	f000 fd7a 	bl	8001400 <HAL_GPIO_WritePin>
	for (int i = 1; i < 9; i++)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3301      	adds	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2b08      	cmp	r3, #8
 8000916:	ddea      	ble.n	80008ee <event+0x22>

	if (c==0){
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d129      	bne.n	8000972 <event+0xa6>
		for (int i = a; i <= a+b-1; i++){
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	e01f      	b.n	8000964 <event+0x98>
			HAL_GPIO_WritePin(leds_ltr.digit[(i-1)%8].port, leds_ltr.digit[(i-1)%8].pin,1);
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	3b01      	subs	r3, #1
 8000928:	425a      	negs	r2, r3
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	f002 0207 	and.w	r2, r2, #7
 8000932:	bf58      	it	pl
 8000934:	4253      	negpl	r3, r2
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <event+0x104>)
 8000938:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	3b01      	subs	r3, #1
 8000940:	425a      	negs	r2, r3
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	f002 0207 	and.w	r2, r2, #7
 800094a:	bf58      	it	pl
 800094c:	4253      	negpl	r3, r2
 800094e:	4a20      	ldr	r2, [pc, #128]	; (80009d0 <event+0x104>)
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4413      	add	r3, r2
 8000954:	889b      	ldrh	r3, [r3, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	f000 fd51 	bl	8001400 <HAL_GPIO_WritePin>
		for (int i = a; i <= a+b-1; i++){
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	3301      	adds	r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbd9      	blt.n	8000924 <event+0x58>
		for (int i = a; i <= a+b-1; i++){
					HAL_GPIO_WritePin(leds_rtl.digit[(i-1)%8].port, leds_rtl.digit[(i-1)%8].pin,1);
			}
	}

}
 8000970:	e028      	b.n	80009c4 <event+0xf8>
		for (int i = a; i <= a+b-1; i++){
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e01f      	b.n	80009b8 <event+0xec>
					HAL_GPIO_WritePin(leds_rtl.digit[(i-1)%8].port, leds_rtl.digit[(i-1)%8].pin,1);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3b01      	subs	r3, #1
 800097c:	425a      	negs	r2, r3
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	f002 0207 	and.w	r2, r2, #7
 8000986:	bf58      	it	pl
 8000988:	4253      	negpl	r3, r2
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <event+0x108>)
 800098c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3b01      	subs	r3, #1
 8000994:	425a      	negs	r2, r3
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	f002 0207 	and.w	r2, r2, #7
 800099e:	bf58      	it	pl
 80009a0:	4253      	negpl	r3, r2
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <event+0x108>)
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4413      	add	r3, r2
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	2201      	movs	r2, #1
 80009ac:	4619      	mov	r1, r3
 80009ae:	f000 fd27 	bl	8001400 <HAL_GPIO_WritePin>
		for (int i = a; i <= a+b-1; i++){
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3301      	adds	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbd9      	blt.n	8000978 <event+0xac>
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000004 	.word	0x20000004
 80009d0:	20000064 	.word	0x20000064
 80009d4:	200000a4 	.word	0x200000a4

080009d8 <HAL_GPIO_EXTI_Callback>:


int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_0) { //Left button ==> PF4
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d12b      	bne.n	8000a40 <HAL_GPIO_EXTI_Callback+0x68>
			if (HAL_GetTick() - last_time2 > 300){
 80009e8:	f000 fa72 	bl	8000ed0 <HAL_GetTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a51      	ldr	r2, [pc, #324]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 80009f0:	6812      	ldr	r2, [r2, #0]
 80009f2:	1a9b      	subs	r3, r3, r2
 80009f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80009f8:	f240 8094 	bls.w	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>
			state = state - 1;
 80009fc:	4b4e      	ldr	r3, [pc, #312]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3b01      	subs	r3, #1
 8000a02:	4a4d      	ldr	r2, [pc, #308]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a04:	6013      	str	r3, [r2, #0]
			if(state < 0)
 8000a06:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da04      	bge.n	8000a18 <HAL_GPIO_EXTI_Callback+0x40>
				state += 3;
 8000a0e:	4b4a      	ldr	r3, [pc, #296]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3303      	adds	r3, #3
 8000a14:	4a48      	ldr	r2, [pc, #288]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a16:	6013      	str	r3, [r2, #0]
			state = state % 3;
 8000a18:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a1a:	6819      	ldr	r1, [r3, #0]
 8000a1c:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x164>)
 8000a1e:	fb83 3201 	smull	r3, r2, r3, r1
 8000a22:	17cb      	asrs	r3, r1, #31
 8000a24:	1ad2      	subs	r2, r2, r3
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	1aca      	subs	r2, r1, r3
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a30:	601a      	str	r2, [r3, #0]
			last_time2=HAL_GetTick();
 8000a32:	f000 fa4d 	bl	8000ed0 <HAL_GetTick>
 8000a36:	4603      	mov	r3, r0
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e071      	b.n	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>
			}
		}

		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button ==> PA1
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d14e      	bne.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x10c>
			if (HAL_GetTick() - last_time2 > 180){
 8000a46:	f000 fa43 	bl	8000ed0 <HAL_GetTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a39      	ldr	r2, [pc, #228]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a4e:	6812      	ldr	r2, [r2, #0]
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	2bb4      	cmp	r3, #180	; 0xb4
 8000a54:	d966      	bls.n	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>
				if (state != 0){
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d025      	beq.n	8000aaa <HAL_GPIO_EXTI_Callback+0xd2>
					numbers[state]=(numbers[state] + 1) % 9;
 8000a5e:	4b36      	ldr	r3, [pc, #216]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	1c59      	adds	r1, r3, #1
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000a70:	fb83 2301 	smull	r2, r3, r3, r1
 8000a74:	105a      	asrs	r2, r3, #1
 8000a76:	17cb      	asrs	r3, r1, #31
 8000a78:	1ad2      	subs	r2, r2, r3
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4413      	add	r3, r2
 8000a80:	1aca      	subs	r2, r1, r3
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000a84:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d11d      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0xfa>
						numbers[state]++;
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a29      	ldr	r2, [pc, #164]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa0:	3201      	adds	r2, #1
 8000aa2:	4927      	ldr	r1, [pc, #156]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000aa8:	e013      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0xfa>
				}else{
					if (numbers[state] == 1)
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a24      	ldr	r2, [pc, #144]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d106      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0xee>
						numbers[state]=0;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ac4:	e005      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0xfa>
					else
						numbers[state]=1;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				last_time2=HAL_GetTick();
 8000ad2:	f000 f9fd 	bl	8000ed0 <HAL_GetTick>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000adc:	601a      	str	r2, [r3, #0]
				event();
 8000ade:	f7ff fef5 	bl	80008cc <event>
 8000ae2:	e01f      	b.n	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>
			}

		}

		else if (GPIO_Pin == GPIO_PIN_4) { //Right button ==> PC0
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	2b10      	cmp	r3, #16
 8000ae8:	d11c      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>

			if (HAL_GetTick() - last_time2 > 300){
 8000aea:	f000 f9f1 	bl	8000ed0 <HAL_GetTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	1a9b      	subs	r3, r3, r2
 8000af6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000afa:	d913      	bls.n	8000b24 <HAL_GPIO_EXTI_Callback+0x14c>
				state = (state + 1) % 3;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1c59      	adds	r1, r3, #1
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x164>)
 8000b04:	fb83 3201 	smull	r3, r2, r3, r1
 8000b08:	17cb      	asrs	r3, r1, #31
 8000b0a:	1ad2      	subs	r2, r2, r3
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	1aca      	subs	r2, r1, r3
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x160>)
 8000b16:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 8000b18:	f000 f9da 	bl	8000ed0 <HAL_GetTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000b22:	601a      	str	r2, [r3, #0]
				}

			}

		seven_segment_set_num(numbers);
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x168>)
 8000b26:	f7ff fe37 	bl	8000798 <seven_segment_set_num>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200004b8 	.word	0x200004b8
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	55555556 	.word	0x55555556
 8000b40:	20000004 	.word	0x20000004
 8000b44:	38e38e39 	.word	0x38e38e39

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6193      	str	r3, [r2, #24]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	61d3      	str	r3, [r2, #28]
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fa82 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_I2C_MspInit+0x7c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d127      	bne.n	8000c02 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000bca:	23c0      	movs	r3, #192	; 0xc0
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bce:	2312      	movs	r3, #18
 8000bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <HAL_I2C_MspInit+0x84>)
 8000be6:	f000 fa91 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_I2C_MspInit+0x80>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400

08000c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_SPI_MspInit+0x7c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d128      	bne.n	8000c8c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_SPI_MspInit+0x80>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000c6a:	23e0      	movs	r3, #224	; 0xe0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fa40 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_PCD_MspInit+0x80>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d129      	bne.n	8000d12 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000cd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ce8:	230e      	movs	r3, #14
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f000 fa09 	bl	800110c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000d00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_PCD_MspInit+0x84>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40005c00 	.word	0x40005c00
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f89a 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 fb71 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f000 fb6a 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d98:	2010      	movs	r0, #16
 8000d9a:	f000 fb63 	bl	8001464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f002 fa01 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfa:	f7ff f9e5 	bl	80001c8 <main>

08000dfe <LoopForever>:

LoopForever:
    b LoopForever
 8000dfe:	e7fe      	b.n	8000dfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e00:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000e0c:	080032a4 	.word	0x080032a4
  ldr r2, =_sbss
 8000e10:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000e14:	200004c4 	.word	0x200004c4

08000e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC1_2_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x28>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f92b 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe86 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40022000 	.word	0x40022000

08000e48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f943 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f90b 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200000e8 	.word	0x200000e8
 8000ea0:	200000f0 	.word	0x200000f0
 8000ea4:	200000ec 	.word	0x200000ec

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000f0 	.word	0x200000f0
 8000ecc:	200004c0 	.word	0x200004c0

08000ed0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200004c0 	.word	0x200004c0

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e154      	b.n	80013c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8146 	beq.w	80013c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	6939      	ldr	r1, [r7, #16]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0203 	and.w	r2, r3, #3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80a0 	beq.w	80013c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <HAL_GPIO_Init+0x2d8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <HAL_GPIO_Init+0x2d8>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <HAL_GPIO_Init+0x2d8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001298:	4a53      	ldr	r2, [pc, #332]	; (80013e8 <HAL_GPIO_Init+0x2dc>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c2:	d019      	beq.n	80012f8 <HAL_GPIO_Init+0x1ec>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2e0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <HAL_GPIO_Init+0x1e8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2e4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1e4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2e8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1e0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2ec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1dc>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e008      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e006      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012ec:	2303      	movs	r3, #3
 80012ee:	e004      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e002      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <HAL_GPIO_Init+0x1ee>
 80012f8:	2300      	movs	r3, #0
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	f002 0203 	and.w	r2, r2, #3
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	4093      	lsls	r3, r2
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800130a:	4937      	ldr	r1, [pc, #220]	; (80013e8 <HAL_GPIO_Init+0x2dc>)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800133c:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001366:	4a25      	ldr	r2, [pc, #148]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f47f aea3 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	48000400 	.word	0x48000400
 80013f0:	48000800 	.word	0x48000800
 80013f4:	48000c00 	.word	0x48000c00
 80013f8:	48001000 	.word	0x48001000
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141c:	e002      	b.n	8001424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4013      	ands	r3, r2
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43d9      	mvns	r1, r3
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	400b      	ands	r3, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4013      	ands	r3, r2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff faa8 	bl	80009d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e081      	b.n	80015aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fb68 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e006      	b.n	800151c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d104      	bne.n	800152e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001540:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001550:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69d9      	ldr	r1, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	d138      	bne.n	800163a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e032      	b.n	800163c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2224      	movs	r2, #36	; 0x24
 80015e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001604:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2220      	movs	r2, #32
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800163a:	2302      	movs	r3, #2
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	d139      	bne.n	80016d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e033      	b.n	80016d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800169a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af06      	add	r7, sp, #24
 80016e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0c4      	b.n	800187c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fac8 	bl	8000c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f001 fd32 	bl	8003182 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e040      	b.n	80017a6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	3301      	adds	r3, #1
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3303      	adds	r3, #3
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3338      	adds	r3, #56	; 0x38
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	333c      	adds	r3, #60	; 0x3c
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	3340      	adds	r3, #64	; 0x40
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3301      	adds	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3b9      	bcc.n	8001724 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e044      	b.n	8001840 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	440b      	add	r3, r1
 8001806:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	3301      	adds	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3b5      	bcc.n	80017b6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	687e      	ldr	r6, [r7, #4]
 8001852:	466d      	mov	r5, sp
 8001854:	f106 0410 	add.w	r4, r6, #16
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	602b      	str	r3, [r5, #0]
 8001860:	1d33      	adds	r3, r6, #4
 8001862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f001 fca7 	bl	80031b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800188a:	af00      	add	r7, sp, #0
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001894:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f001 b823 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 817d 	beq.w	8001bba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018c0:	4bbc      	ldr	r3, [pc, #752]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d00c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018cc:	4bb9      	ldr	r3, [pc, #740]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d15c      	bne.n	8001992 <HAL_RCC_OscConfig+0x10e>
 80018d8:	4bb6      	ldr	r3, [pc, #728]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d155      	bne.n	8001992 <HAL_RCC_OscConfig+0x10e>
 80018e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x94>
 8001912:	4ba8      	ldr	r3, [pc, #672]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	e015      	b.n	8001944 <HAL_RCC_OscConfig+0xc0>
 8001918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800192c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001930:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001934:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001940:	4b9c      	ldr	r3, [pc, #624]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001948:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800194c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001950:	fa92 f2a2 	rbit	r2, r2
 8001954:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001958:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800195c:	fab2 f282 	clz	r2, r2
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f042 0220 	orr.w	r2, r2, #32
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f002 021f 	and.w	r2, r2, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 811f 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x334>
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8116 	bne.w	8001bb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	f000 bfaf 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12e>
 80019a4:	4b83      	ldr	r3, [pc, #524]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a82      	ldr	r2, [pc, #520]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	e036      	b.n	8001a20 <HAL_RCC_OscConfig+0x19c>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x158>
 80019c2:	4b7c      	ldr	r3, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7b      	ldr	r2, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b79      	ldr	r3, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a78      	ldr	r2, [pc, #480]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e021      	b.n	8001a20 <HAL_RCC_OscConfig+0x19c>
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x184>
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a70      	ldr	r2, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6d      	ldr	r2, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x19c>
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a69      	ldr	r2, [pc, #420]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f023 020f 	bic.w	r2, r3, #15
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	495f      	ldr	r1, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d059      	beq.n	8001afe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa41 	bl	8000ed0 <HAL_GetTick>
 8001a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fa3c 	bl	8000ed0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b64      	cmp	r3, #100	; 0x64
 8001a62:	d902      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	f000 bf43 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8001a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	fab3 f383 	clz	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_RCC_OscConfig+0x218>
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	e015      	b.n	8001ac8 <HAL_RCC_OscConfig+0x244>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ab0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ab8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001abc:	fa93 f3a3 	rbit	r3, r3
 8001ac0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001acc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ad0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001adc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ab      	beq.n	8001a54 <HAL_RCC_OscConfig+0x1d0>
 8001afc:	e05d      	b.n	8001bba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff f9e7 	bl	8000ed0 <HAL_GetTick>
 8001b02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f9e2 	bl	8000ed0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b64      	cmp	r3, #100	; 0x64
 8001b16:	d902      	bls.n	8001b1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	f000 bee9 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8001b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	095b      	lsrs	r3, r3, #5
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_OscConfig+0x2cc>
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f8>
 8001b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b88:	fa92 f2a2 	rbit	r2, r2
 8001b8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b94:	fab2 f282 	clz	r2, r2
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	f042 0220 	orr.w	r2, r2, #32
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f002 021f 	and.w	r2, r2, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1ab      	bne.n	8001b08 <HAL_RCC_OscConfig+0x284>
 8001bb0:	e003      	b.n	8001bba <HAL_RCC_OscConfig+0x336>
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 817d 	beq.w	8001eca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bd0:	4ba6      	ldr	r3, [pc, #664]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bdc:	4ba3      	ldr	r3, [pc, #652]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d172      	bne.n	8001cce <HAL_RCC_OscConfig+0x44a>
 8001be8:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d16c      	bne.n	8001cce <HAL_RCC_OscConfig+0x44a>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_RCC_OscConfig+0x3a0>
 8001c1e:	4b93      	ldr	r3, [pc, #588]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	e013      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c8>
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c48:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c56:	fa92 f2a2 	rbit	r2, r2
 8001c5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c62:	fab2 f282 	clz	r2, r2
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f042 0220 	orr.w	r2, r2, #32
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	f002 021f 	and.w	r2, r2, #31
 8001c72:	2101      	movs	r1, #1
 8001c74:	fa01 f202 	lsl.w	r2, r1, r2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <HAL_RCC_OscConfig+0x410>
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f000 be2e 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	21f8      	movs	r1, #248	; 0xf8
 8001caa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cb2:	fa91 f1a1 	rbit	r1, r1
 8001cb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cbe:	fab1 f181 	clz	r1, r1
 8001cc2:	b2c9      	uxtb	r1, r1
 8001cc4:	408b      	lsls	r3, r1
 8001cc6:	4969      	ldr	r1, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ccc:	e0fd      	b.n	8001eca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8088 	beq.w	8001df0 <HAL_RCC_OscConfig+0x56c>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	461a      	mov	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f8e0 	bl	8000ed0 <HAL_GetTick>
 8001d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff f8db 	bl	8000ed0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d902      	bls.n	8001d2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	f000 bde2 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d8>
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	e013      	b.n	8001d84 <HAL_RCC_OscConfig+0x500>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	2202      	movs	r2, #2
 8001d86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d8e:	fa92 f2a2 	rbit	r2, r2
 8001d92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d9a:	fab2 f282 	clz	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	f002 021f 	and.w	r2, r2, #31
 8001daa:	2101      	movs	r1, #1
 8001dac:	fa01 f202 	lsl.w	r2, r1, r2
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0af      	beq.n	8001d16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	21f8      	movs	r1, #248	; 0xf8
 8001dcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dd4:	fa91 f1a1 	rbit	r1, r1
 8001dd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ddc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001de0:	fab1 f181 	clz	r1, r1
 8001de4:	b2c9      	uxtb	r1, r1
 8001de6:	408b      	lsls	r3, r1
 8001de8:	4920      	ldr	r1, [pc, #128]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
 8001dee:	e06c      	b.n	8001eca <HAL_RCC_OscConfig+0x646>
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f858 	bl	8000ed0 <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff f853 	bl	8000ed0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d902      	bls.n	8001e3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f000 bd5a 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d104      	bne.n	8001e70 <HAL_RCC_OscConfig+0x5ec>
 8001e66:	4b01      	ldr	r3, [pc, #4]	; (8001e6c <HAL_RCC_OscConfig+0x5e8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e015      	b.n	8001e98 <HAL_RCC_OscConfig+0x614>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e82:	2302      	movs	r3, #2
 8001e84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e94:	4bc8      	ldr	r3, [pc, #800]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ea2:	fa92 f2a2 	rbit	r2, r2
 8001ea6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001eaa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ad      	bne.n	8001e26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8110 	beq.w	8002100 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d079      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x760>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4bab      	ldr	r3, [pc, #684]	; (80021bc <HAL_RCC_OscConfig+0x938>)
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	461a      	mov	r2, r3
 8001f16:	2301      	movs	r3, #1
 8001f18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe ffd9 	bl	8000ed0 <HAL_GetTick>
 8001f1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f24:	f7fe ffd4 	bl	8000ed0 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d902      	bls.n	8001f3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f000 bcdb 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f54:	2202      	movs	r2, #2
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	fa93 f2a3 	rbit	r2, r3
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 8001f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	6019      	str	r1, [r3, #0]
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f1a3 	rbit	r1, r3
 8001fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fba:	6019      	str	r1, [r3, #0]
  return result;
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0a0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x6a0>
 8001fe2:	e08d      	b.n	8002100 <HAL_RCC_OscConfig+0x87c>
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002006:	601a      	str	r2, [r3, #0]
  return result;
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002010:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x938>)
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	461a      	mov	r2, r3
 8002022:	2300      	movs	r3, #0
 8002024:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe ff53 	bl	8000ed0 <HAL_GetTick>
 800202a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002030:	f7fe ff4e 	bl	8000ed0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d902      	bls.n	8002046 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	f000 bc55 	b.w	80028f0 <HAL_RCC_OscConfig+0x106c>
 8002046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002096:	2202      	movs	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 80020b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020be:	2102      	movs	r1, #2
 80020c0:	6019      	str	r1, [r3, #0]
 80020c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f1a3 	rbit	r1, r3
 80020d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020d8:	6019      	str	r1, [r3, #0]
  return result;
 80020da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2101      	movs	r1, #1
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d197      	bne.n	8002030 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 81a1 	beq.w	8002458 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d116      	bne.n	8002156 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 800212e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002132:	61d3      	str	r3, [r2, #28]
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800214e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCC_OscConfig+0x93c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d11a      	bne.n	8002198 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_RCC_OscConfig+0x93c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <HAL_RCC_OscConfig+0x93c>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe feaf 	bl	8000ed0 <HAL_GetTick>
 8002172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	e009      	b.n	800218c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002178:	f7fe feaa 	bl	8000ed0 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e3b1      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x93c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ef      	beq.n	8002178 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10d      	bne.n	80021c4 <HAL_RCC_OscConfig+0x940>
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	4a02      	ldr	r2, [pc, #8]	; (80021b8 <HAL_RCC_OscConfig+0x934>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6213      	str	r3, [r2, #32]
 80021b4:	e03c      	b.n	8002230 <HAL_RCC_OscConfig+0x9ac>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	10908120 	.word	0x10908120
 80021c0:	40007000 	.word	0x40007000
 80021c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x96a>
 80021d4:	4bc1      	ldr	r3, [pc, #772]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4ac0      	ldr	r2, [pc, #768]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	4bbe      	ldr	r3, [pc, #760]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4abd      	ldr	r2, [pc, #756]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e020      	b.n	8002230 <HAL_RCC_OscConfig+0x9ac>
 80021ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x994>
 80021fe:	4bb7      	ldr	r3, [pc, #732]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4ab6      	ldr	r2, [pc, #728]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6213      	str	r3, [r2, #32]
 800220a:	4bb4      	ldr	r3, [pc, #720]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4ab3      	ldr	r2, [pc, #716]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6213      	str	r3, [r2, #32]
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0x9ac>
 8002218:	4bb0      	ldr	r3, [pc, #704]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4aaf      	ldr	r2, [pc, #700]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	4bad      	ldr	r3, [pc, #692]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4aac      	ldr	r2, [pc, #688]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800222a:	f023 0304 	bic.w	r3, r3, #4
 800222e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8081 	beq.w	8002344 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7fe fe45 	bl	8000ed0 <HAL_GetTick>
 8002246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe fe40 	bl	8000ed0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e345      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
 8002264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002268:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800226c:	2202      	movs	r2, #2
 800226e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002274:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	fa93 f2a3 	rbit	r2, r3
 800227e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002282:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002290:	2202      	movs	r2, #2
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022aa:	601a      	str	r2, [r3, #0]
  return result;
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d102      	bne.n	80022d0 <HAL_RCC_OscConfig+0xa4c>
 80022ca:	4b84      	ldr	r3, [pc, #528]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0xa74>
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022d8:	2202      	movs	r2, #2
 80022da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4b79      	ldr	r3, [pc, #484]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002300:	2102      	movs	r1, #2
 8002302:	6011      	str	r1, [r2, #0]
 8002304:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002308:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	fa92 f1a2 	rbit	r1, r2
 8002312:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002316:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800231a:	6011      	str	r1, [r2, #0]
  return result;
 800231c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002320:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	fab2 f282 	clz	r2, r2
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f002 021f 	and.w	r2, r2, #31
 8002336:	2101      	movs	r1, #1
 8002338:	fa01 f202 	lsl.w	r2, r1, r2
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d084      	beq.n	800224c <HAL_RCC_OscConfig+0x9c8>
 8002342:	e07f      	b.n	8002444 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe fdc4 	bl	8000ed0 <HAL_GetTick>
 8002348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fdbf 	bl	8000ed0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e2c4      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800236e:	2202      	movs	r2, #2
 8002370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0xb4e>
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	e013      	b.n	80023fa <HAL_RCC_OscConfig+0xb76>
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023da:	2202      	movs	r2, #2
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002402:	2102      	movs	r1, #2
 8002404:	6011      	str	r1, [r2, #0]
 8002406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800240a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fa92 f1a2 	rbit	r1, r2
 8002414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002418:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800241c:	6011      	str	r1, [r2, #0]
  return result;
 800241e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002422:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	fab2 f282 	clz	r2, r2
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	f002 021f 	and.w	r2, r2, #31
 8002438:	2101      	movs	r1, #1
 800243a:	fa01 f202 	lsl.w	r2, r1, r2
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d184      	bne.n	800234e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002444:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4a22      	ldr	r2, [pc, #136]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002456:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800245c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8242 	beq.w	80028ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <HAL_RCC_OscConfig+0xc58>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b08      	cmp	r3, #8
 8002474:	f000 8213 	beq.w	800289e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	f040 8162 	bne.w	800274e <HAL_RCC_OscConfig+0xeca>
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002492:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	fa93 f2a3 	rbit	r2, r3
 80024a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ae:	601a      	str	r2, [r3, #0]
  return result;
 80024b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	461a      	mov	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fcfe 	bl	8000ed0 <HAL_GetTick>
 80024d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e00c      	b.n	80024f4 <HAL_RCC_OscConfig+0xc70>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fcf6 	bl	8000ed0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1fd      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
 80024f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002506:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	fa93 f2a3 	rbit	r2, r3
 8002510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002514:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002518:	601a      	str	r2, [r3, #0]
  return result;
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002522:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d102      	bne.n	800253e <HAL_RCC_OscConfig+0xcba>
 8002538:	4bb0      	ldr	r3, [pc, #704]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	e027      	b.n	800258e <HAL_RCC_OscConfig+0xd0a>
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fa93 f2a3 	rbit	r2, r3
 800255a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002568:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800256c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	4b9c      	ldr	r3, [pc, #624]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002592:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002596:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800259a:	6011      	str	r1, [r2, #0]
 800259c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	fa92 f1a2 	rbit	r1, r2
 80025aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025b2:	6011      	str	r1, [r2, #0]
  return result;
 80025b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d182      	bne.n	80024e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025da:	4b88      	ldr	r3, [pc, #544]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	497f      	ldr	r1, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002606:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800260a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800260e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f2a3 	rbit	r2, r3
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002626:	601a      	str	r2, [r3, #0]
  return result;
 8002628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002630:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800263c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	461a      	mov	r2, r3
 8002644:	2301      	movs	r3, #1
 8002646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fc42 	bl	8000ed0 <HAL_GetTick>
 800264c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	e009      	b.n	8002666 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe fc3d 	bl	8000ed0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e144      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
 8002666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800266a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800266e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002678:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002686:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800268a:	601a      	str	r2, [r3, #0]
  return result;
 800268c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002690:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002694:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0xe2c>
 80026aa:	4b54      	ldr	r3, [pc, #336]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e027      	b.n	8002700 <HAL_RCC_OscConfig+0xe7c>
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002704:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002708:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800270c:	6011      	str	r1, [r2, #0]
 800270e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002712:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	fa92 f1a2 	rbit	r1, r2
 800271c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002720:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002724:	6011      	str	r1, [r2, #0]
  return result;
 8002726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fab2 f282 	clz	r2, r2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	f002 021f 	and.w	r2, r2, #31
 8002740:	2101      	movs	r1, #1
 8002742:	fa01 f202 	lsl.w	r2, r1, r2
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d082      	beq.n	8002652 <HAL_RCC_OscConfig+0xdce>
 800274c:	e0cf      	b.n	80028ee <HAL_RCC_OscConfig+0x106a>
 800274e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002752:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002772:	601a      	str	r2, [r3, #0]
  return result;
 8002774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002778:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800277c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	461a      	mov	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fb9c 	bl	8000ed0 <HAL_GetTick>
 8002798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fb97 	bl	8000ed0 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e09e      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	fa93 f2a3 	rbit	r2, r3
 80027ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027d6:	601a      	str	r2, [r3, #0]
  return result;
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d104      	bne.n	8002800 <HAL_RCC_OscConfig+0xf7c>
 80027f6:	4b01      	ldr	r3, [pc, #4]	; (80027fc <HAL_RCC_OscConfig+0xf78>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	e029      	b.n	8002850 <HAL_RCC_OscConfig+0xfcc>
 80027fc:	40021000 	.word	0x40021000
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002820:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002846:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x1078>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002854:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800285c:	6011      	str	r1, [r2, #0]
 800285e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002862:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fa92 f1a2 	rbit	r1, r2
 800286c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002870:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002874:	6011      	str	r1, [r2, #0]
  return result;
 8002876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800287a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d180      	bne.n	800279e <HAL_RCC_OscConfig+0xf1a>
 800289c:	e027      	b.n	80028ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e01e      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_OscConfig+0x1078>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10b      	bne.n	80028ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e000      	b.n	80028f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b09e      	sub	sp, #120	; 0x78
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e162      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b90      	ldr	r3, [pc, #576]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d910      	bls.n	8002948 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b8d      	ldr	r3, [pc, #564]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	498b      	ldr	r1, [pc, #556]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e14a      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b82      	ldr	r3, [pc, #520]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	497f      	ldr	r1, [pc, #508]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80dc 	beq.w	8002b2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d13c      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xf6>
 800297c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002980:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800298a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d102      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xa6>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e00f      	b.n	80029c6 <HAL_RCC_ClockConfig+0xc6>
 80029a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	667b      	str	r3, [r7, #100]	; 0x64
 80029b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b8:	663b      	str	r3, [r7, #96]	; 0x60
 80029ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029c2:	4b67      	ldr	r3, [pc, #412]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80029cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f042 0220 	orr.w	r2, r2, #32
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d17b      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0f3      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d13c      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x178>
 80029fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x128>
 8002a22:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_ClockConfig+0x148>
 8002a28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	647b      	str	r3, [r7, #68]	; 0x44
 8002a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a44:	4b46      	ldr	r3, [pc, #280]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a50:	fa92 f2a2 	rbit	r2, r2
 8002a54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a58:	fab2 f282 	clz	r2, r2
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f002 021f 	and.w	r2, r2, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d13a      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b2      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x1a0>
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e00d      	b.n	8002abc <HAL_RCC_ClockConfig+0x1bc>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	2302      	movs	r3, #2
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	4b29      	ldr	r3, [pc, #164]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	61ba      	str	r2, [r7, #24]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	617a      	str	r2, [r7, #20]
  return result;
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f042 0220 	orr.w	r2, r2, #32
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f002 021f 	and.w	r2, r2, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e079      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f023 0203 	bic.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	491a      	ldr	r1, [pc, #104]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe f9e8 	bl	8000ed0 <HAL_GetTick>
 8002b00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b04:	f7fe f9e4 	bl	8000ed0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e061      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 020c 	and.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1eb      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d214      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4906      	ldr	r1, [pc, #24]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_RCC_ClockConfig+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e040      	b.n	8002bde <HAL_RCC_ClockConfig+0x2de>
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	491a      	ldr	r1, [pc, #104]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4912      	ldr	r1, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ba2:	f000 f829 	bl	8002bf8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4601      	mov	r1, r0
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_RCC_ClockConfig+0x2e8>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	22f0      	movs	r2, #240	; 0xf0
 8002bb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	fa92 f2a2 	rbit	r2, r2
 8002bba:	60fa      	str	r2, [r7, #12]
  return result;
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	40d3      	lsrs	r3, r2
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x2ec>)
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	fa21 f303 	lsr.w	r3, r1, r3
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_RCC_ClockConfig+0x2f0>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RCC_ClockConfig+0x2f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe f936 	bl	8000e48 <HAL_InitTick>
  
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3778      	adds	r7, #120	; 0x78
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000
 8002bec:	0800326c 	.word	0x0800326c
 8002bf0:	200000e8 	.word	0x200000e8
 8002bf4:	200000ec 	.word	0x200000ec

08002bf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x30>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x36>
 8002c26:	e03c      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c2a:	623b      	str	r3, [r7, #32]
      break;
 8002c2c:	e03c      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	fa92 f2a2 	rbit	r2, r2
 8002c40:	607a      	str	r2, [r7, #4]
  return result;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	fab2 f282 	clz	r2, r2
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	40d3      	lsrs	r3, r2
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	fa92 f2a2 	rbit	r2, r2
 8002c64:	60fa      	str	r2, [r7, #12]
  return result;
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	fab2 f282 	clz	r2, r2
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	40d3      	lsrs	r3, r2
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c72:	5cd3      	ldrb	r3, [r2, r3]
 8002c74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c80:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	e004      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	623b      	str	r3, [r7, #32]
      break;
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ca4:	623b      	str	r3, [r7, #32]
      break;
 8002ca6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	372c      	adds	r7, #44	; 0x2c
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	0800327c 	.word	0x0800327c
 8002cc4:	0800328c 	.word	0x0800328c
 8002cc8:	003d0900 	.word	0x003d0900

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b092      	sub	sp, #72	; 0x48
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d4 	beq.w	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf0:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10e      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a4a      	ldr	r2, [pc, #296]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d118      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d32:	f7fe f8cd 	bl	8000ed0 <HAL_GetTick>
 8002d36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d38:	e008      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3a:	f7fe f8c9 	bl	8000ed0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e169      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	4b38      	ldr	r3, [pc, #224]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8084 	beq.w	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d07c      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	461a      	mov	r2, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d04b      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe f879 	bl	8000ed0 <HAL_GetTick>
 8002dde:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe f875 	bl	8000ed0 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e113      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d108      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e26:	4b01      	ldr	r3, [pc, #4]	; (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	e00d      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40007000 	.word	0x40007000
 8002e34:	10908100 	.word	0x10908100
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	4b78      	ldr	r3, [pc, #480]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	2202      	movs	r2, #2
 8002e4a:	613a      	str	r2, [r7, #16]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	60fa      	str	r2, [r7, #12]
  return result;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0b7      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	496a      	ldr	r1, [pc, #424]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b66      	ldr	r3, [pc, #408]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea4:	4b60      	ldr	r3, [pc, #384]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f023 0203 	bic.w	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	495d      	ldr	r1, [pc, #372]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec2:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4956      	ldr	r1, [pc, #344]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ee0:	4b51      	ldr	r3, [pc, #324]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	494e      	ldr	r1, [pc, #312]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f023 0210 	bic.w	r2, r3, #16
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4947      	ldr	r1, [pc, #284]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	493f      	ldr	r1, [pc, #252]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 0220 	bic.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4938      	ldr	r1, [pc, #224]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f58:	4b33      	ldr	r3, [pc, #204]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	4930      	ldr	r1, [pc, #192]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4929      	ldr	r1, [pc, #164]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f94:	4b24      	ldr	r3, [pc, #144]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4921      	ldr	r1, [pc, #132]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	491a      	ldr	r1, [pc, #104]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	4912      	ldr	r1, [pc, #72]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	490b      	ldr	r1, [pc, #44]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	4903      	ldr	r1, [pc, #12]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3748      	adds	r7, #72	; 0x48
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e09d      	b.n	800317a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d108      	bne.n	8003058 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800304e:	d009      	beq.n	8003064 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
 8003056:	e005      	b.n	8003064 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fdca 	bl	8000c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030a4:	d902      	bls.n	80030ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	e002      	b.n	80030b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030ba:	d007      	beq.n	80030cc <HAL_SPI_Init+0xa0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c4:	d002      	beq.n	80030cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	ea42 0103 	orr.w	r1, r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	f003 0204 	and.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003148:	ea42 0103 	orr.w	r1, r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800318a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800318e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	b29b      	uxth	r3, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031b8:	b084      	sub	sp, #16
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	f107 0014 	add.w	r0, r7, #20
 80031c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	b004      	add	sp, #16
 80031f8:	4770      	bx	lr
	...

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4d0d      	ldr	r5, [pc, #52]	; (8003234 <__libc_init_array+0x38>)
 8003200:	4c0d      	ldr	r4, [pc, #52]	; (8003238 <__libc_init_array+0x3c>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	2600      	movs	r6, #0
 8003208:	42a6      	cmp	r6, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	4d0b      	ldr	r5, [pc, #44]	; (800323c <__libc_init_array+0x40>)
 800320e:	4c0c      	ldr	r4, [pc, #48]	; (8003240 <__libc_init_array+0x44>)
 8003210:	f000 f820 	bl	8003254 <_init>
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	2600      	movs	r6, #0
 800321a:	42a6      	cmp	r6, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	f855 3b04 	ldr.w	r3, [r5], #4
 8003224:	4798      	blx	r3
 8003226:	3601      	adds	r6, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	f855 3b04 	ldr.w	r3, [r5], #4
 800322e:	4798      	blx	r3
 8003230:	3601      	adds	r6, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	0800329c 	.word	0x0800329c
 8003238:	0800329c 	.word	0x0800329c
 800323c:	0800329c 	.word	0x0800329c
 8003240:	080032a0 	.word	0x080032a0

08003244 <memset>:
 8003244:	4402      	add	r2, r0
 8003246:	4603      	mov	r3, r0
 8003248:	4293      	cmp	r3, r2
 800324a:	d100      	bne.n	800324e <memset+0xa>
 800324c:	4770      	bx	lr
 800324e:	f803 1b01 	strb.w	r1, [r3], #1
 8003252:	e7f9      	b.n	8003248 <memset+0x4>

08003254 <_init>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr

08003260 <_fini>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr
