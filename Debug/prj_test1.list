
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec0  08004ec0  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec0  08004ec0  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          000001c4  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134ac  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000242e  00000000  00000000  00033534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00035968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f48  00000000  00000000  00036988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e08e  00000000  00000000  000378d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001465d  00000000  00000000  0005595e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7866  00000000  00000000  00069fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00121821  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044b4  00000000  00000000  00121874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e50 	.word	0x08004e50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	08004e50 	.word	0x08004e50

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <uart_rx_enable_it>:

uint8_t input[100];
uint8_t character;
int index_arr = 0;

void uart_rx_enable_it(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &character, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	4903      	ldr	r1, [pc, #12]	; (80001f0 <uart_rx_enable_it+0x14>)
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <uart_rx_enable_it+0x18>)
 80001e6:	f003 fc2d 	bl	8003a44 <HAL_UART_Receive_IT>
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000200 	.word	0x20000200
 80001f4:	20000114 	.word	0x20000114

080001f8 <turn_off_leds>:
	   {.port=GPIOE, .pin=GPIO_PIN_11}, //7: D7
	   {.port=GPIOE, .pin=GPIO_PIN_10}, //8: D5
}};


void turn_off_leds(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
	for (int i = 1; i < 9; i++){
 80001fe:	2301      	movs	r3, #1
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e011      	b.n	8000228 <turn_off_leds+0x30>
			HAL_GPIO_WritePin(leds.digit[i-1].port, leds.digit[i-1].pin,0);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3b01      	subs	r3, #1
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <turn_off_leds+0x40>)
 800020a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3b01      	subs	r3, #1
 8000212:	4a09      	ldr	r2, [pc, #36]	; (8000238 <turn_off_leds+0x40>)
 8000214:	00db      	lsls	r3, r3, #3
 8000216:	4413      	add	r3, r2
 8000218:	889b      	ldrh	r3, [r3, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	4619      	mov	r1, r3
 800021e:	f001 f90b 	bl	8001438 <HAL_GPIO_WritePin>
	for (int i = 1; i < 9; i++){
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	3301      	adds	r3, #1
 8000226:	607b      	str	r3, [r7, #4]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b08      	cmp	r3, #8
 800022c:	ddea      	ble.n	8000204 <turn_off_leds+0xc>
	}
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000008 	.word	0x20000008

0800023c <getString>:

int getString(uint8_t string[], uint32_t to){
 800023c:	b580      	push	{r7, lr}
 800023e:	b09c      	sub	sp, #112	; 0x70
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]

    char substring[100];
    uint32_t c = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (c <= to - 2 ){
 800024a:	e00d      	b.n	8000268 <getString+0x2c>
        substring[c] = string[2 + c - 1];
 800024c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800024e:	3301      	adds	r3, #1
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	4413      	add	r3, r2
 8000254:	7819      	ldrb	r1, [r3, #0]
 8000256:	f107 0208 	add.w	r2, r7, #8
 800025a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800025c:	4413      	add	r3, r2
 800025e:	460a      	mov	r2, r1
 8000260:	701a      	strb	r2, [r3, #0]
        c++;
 8000262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000264:	3301      	adds	r3, #1
 8000266:	66fb      	str	r3, [r7, #108]	; 0x6c
    while (c <= to - 2 ){
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	3b02      	subs	r3, #2
 800026c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800026e:	429a      	cmp	r2, r3
 8000270:	d9ec      	bls.n	800024c <getString+0x10>
    }
    substring[c]='\0';
 8000272:	f107 0208 	add.w	r2, r7, #8
 8000276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000278:	4413      	add	r3, r2
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]


	if (strcmp(substring, password) == 0){
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4907      	ldr	r1, [pc, #28]	; (80002a0 <getString+0x64>)
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ff9f 	bl	80001c8 <strcmp>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d101      	bne.n	8000294 <getString+0x58>
		return 1;
 8000290:	2301      	movs	r3, #1
 8000292:	e000      	b.n	8000296 <getString+0x5a>
	}

    return 0;
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	3770      	adds	r7, #112	; 0x70
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_UART_RxCpltCallback>:
uint32_t pir_active = 0; //0,1,2
uint8_t pass[15];
uint32_t observed = 1;
uint32_t relay_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (huart2->Instance == USART2) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a46      	ldr	r2, [pc, #280]	; (80003cc <HAL_UART_RxCpltCallback+0x128>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	f040 8086 	bne.w	80003c4 <HAL_UART_RxCpltCallback+0x120>
		char start[] = "ap1z";
 80002b8:	4a45      	ldr	r2, [pc, #276]	; (80003d0 <HAL_UART_RxCpltCallback+0x12c>)
 80002ba:	f107 0314 	add.w	r3, r7, #20
 80002be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c2:	6018      	str	r0, [r3, #0]
 80002c4:	3304      	adds	r3, #4
 80002c6:	7019      	strb	r1, [r3, #0]
		char reset[] = "aR-z";
 80002c8:	4a42      	ldr	r2, [pc, #264]	; (80003d4 <HAL_UART_RxCpltCallback+0x130>)
 80002ca:	f107 030c 	add.w	r3, r7, #12
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	6018      	str	r0, [r3, #0]
 80002d4:	3304      	adds	r3, #4
 80002d6:	7019      	strb	r1, [r3, #0]

		if (character != 'z'){
 80002d8:	4b3f      	ldr	r3, [pc, #252]	; (80003d8 <HAL_UART_RxCpltCallback+0x134>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b7a      	cmp	r3, #122	; 0x7a
 80002de:	d009      	beq.n	80002f4 <HAL_UART_RxCpltCallback+0x50>
			input[index_arr++] = character;
 80002e0:	4b3e      	ldr	r3, [pc, #248]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	1c5a      	adds	r2, r3, #1
 80002e6:	493d      	ldr	r1, [pc, #244]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 80002e8:	600a      	str	r2, [r1, #0]
 80002ea:	4a3b      	ldr	r2, [pc, #236]	; (80003d8 <HAL_UART_RxCpltCallback+0x134>)
 80002ec:	7811      	ldrb	r1, [r2, #0]
 80002ee:	4a3c      	ldr	r2, [pc, #240]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 80002f0:	54d1      	strb	r1, [r2, r3]
 80002f2:	e065      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x11c>
		}else{
			input[index_arr++] = character;
 80002f4:	4b39      	ldr	r3, [pc, #228]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	4938      	ldr	r1, [pc, #224]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	4a36      	ldr	r2, [pc, #216]	; (80003d8 <HAL_UART_RxCpltCallback+0x134>)
 8000300:	7811      	ldrb	r1, [r2, #0]
 8000302:	4a37      	ldr	r2, [pc, #220]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 8000304:	54d1      	strb	r1, [r2, r3]
			input[index_arr] = '\0';
 8000306:	4b35      	ldr	r3, [pc, #212]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a35      	ldr	r2, [pc, #212]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 800030c:	2100      	movs	r1, #0
 800030e:	54d1      	strb	r1, [r2, r3]
			uint32_t temp = index_arr;
 8000310:	4b32      	ldr	r3, [pc, #200]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	61fb      	str	r3, [r7, #28]
			index_arr = 0;
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <HAL_UART_RxCpltCallback+0x138>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]

			if (strcmp(input,start) == 0){ //start
 800031c:	f107 0314 	add.w	r3, r7, #20
 8000320:	4619      	mov	r1, r3
 8000322:	482f      	ldr	r0, [pc, #188]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 8000324:	f7ff ff50 	bl	80001c8 <strcmp>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d103      	bne.n	8000336 <HAL_UART_RxCpltCallback+0x92>
				pir_active = 1;
 800032e:	4b2d      	ldr	r3, [pc, #180]	; (80003e4 <HAL_UART_RxCpltCallback+0x140>)
 8000330:	2201      	movs	r2, #1
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	e044      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x11c>

			}else if (strcmp(input, reset) == 0){ //reset
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	4619      	mov	r1, r3
 800033c:	4828      	ldr	r0, [pc, #160]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 800033e:	f7ff ff43 	bl	80001c8 <strcmp>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d10f      	bne.n	8000368 <HAL_UART_RxCpltCallback+0xc4>
				pir_active = 0;
 8000348:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <HAL_UART_RxCpltCallback+0x140>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
				relay_active = 0;
 800034e:	4b26      	ldr	r3, [pc, #152]	; (80003e8 <HAL_UART_RxCpltCallback+0x144>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
		    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f001 f86b 	bl	8001438 <HAL_GPIO_WritePin>
		    	turn_off_leds();
 8000362:	f7ff ff49 	bl	80001f8 <turn_off_leds>
 8000366:	e02b      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x11c>

			}else if (input[0]=='a' && input[1]=='r' && input[temp-1]=='z'){ //Deactive
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b61      	cmp	r3, #97	; 0x61
 800036e:	d120      	bne.n	80003b2 <HAL_UART_RxCpltCallback+0x10e>
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 8000372:	785b      	ldrb	r3, [r3, #1]
 8000374:	2b72      	cmp	r3, #114	; 0x72
 8000376:	d11c      	bne.n	80003b2 <HAL_UART_RxCpltCallback+0x10e>
 8000378:	69fb      	ldr	r3, [r7, #28]
 800037a:	3b01      	subs	r3, #1
 800037c:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	2b7a      	cmp	r3, #122	; 0x7a
 8000382:	d116      	bne.n	80003b2 <HAL_UART_RxCpltCallback+0x10e>
					if (getString(input, temp-2)==1){
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	3b02      	subs	r3, #2
 8000388:	4619      	mov	r1, r3
 800038a:	4815      	ldr	r0, [pc, #84]	; (80003e0 <HAL_UART_RxCpltCallback+0x13c>)
 800038c:	f7ff ff56 	bl	800023c <getString>
 8000390:	4603      	mov	r3, r0
 8000392:	2b01      	cmp	r3, #1
 8000394:	d114      	bne.n	80003c0 <HAL_UART_RxCpltCallback+0x11c>
						pir_active = 0;
 8000396:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <HAL_UART_RxCpltCallback+0x140>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
						relay_active = 0;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_UART_RxCpltCallback+0x144>)
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
				    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ac:	f001 f844 	bl	8001438 <HAL_GPIO_WritePin>
					if (getString(input, temp-2)==1){
 80003b0:	e006      	b.n	80003c0 <HAL_UART_RxCpltCallback+0x11c>

					}
			}else{
					HAL_UART_Transmit(&huart2, "Invalid Packet", 14, HAL_MAX_DELAY);
 80003b2:	1d38      	adds	r0, r7, #4
 80003b4:	f04f 33ff 	mov.w	r3, #4294967295
 80003b8:	220e      	movs	r2, #14
 80003ba:	490c      	ldr	r1, [pc, #48]	; (80003ec <HAL_UART_RxCpltCallback+0x148>)
 80003bc:	f003 fab8 	bl	8003930 <HAL_UART_Transmit>
			}
	}
		uart_rx_enable_it();
 80003c0:	f7ff ff0c 	bl	80001dc <uart_rx_enable_it>


	}

}
 80003c4:	bf00      	nop
 80003c6:	3720      	adds	r7, #32
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	40004400 	.word	0x40004400
 80003d0:	08004e78 	.word	0x08004e78
 80003d4:	08004e80 	.word	0x08004e80
 80003d8:	20000200 	.word	0x20000200
 80003dc:	20000204 	.word	0x20000204
 80003e0:	2000019c 	.word	0x2000019c
 80003e4:	20000208 	.word	0x20000208
 80003e8:	2000020c 	.word	0x2000020c
 80003ec:	08004e68 	.word	0x08004e68

080003f0 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10f      	bne.n	8000420 <HAL_GPIO_EXTI_Callback+0x30>
    {
    	observed = 1;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <HAL_GPIO_EXTI_Callback+0x38>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
    	relay_active = 1;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, relay_active);
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <HAL_GPIO_EXTI_Callback+0x3c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	461a      	mov	r2, r3
 8000414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f001 f80c 	bl	8001438 <HAL_GPIO_WritePin>

    }
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000048 	.word	0x20000048
 800042c:	2000020c 	.word	0x2000020c

08000430 <HAL_TIM_PeriodElapsedCallback>:


uint32_t time_count = 0;
uint32_t last_time = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (htim1->Instance == TIM1) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a3f      	ldr	r2, [pc, #252]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d177      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
		if(pir_active == 0){
 8000442:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d102      	bne.n	8000450 <HAL_TIM_PeriodElapsedCallback+0x20>
			turn_off_leds();
 800044a:	f7ff fed5 	bl	80001f8 <turn_off_leds>
				}
				time_count = 0;
			}
		}
	}
}
 800044e:	e070      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
		else if (pir_active == 1 && observed == 1){
 8000450:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b01      	cmp	r3, #1
 8000456:	d13f      	bne.n	80004d8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8000458:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b01      	cmp	r3, #1
 800045e:	d13b      	bne.n	80004d8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			for (int i = 1; i < 9; i++){
 8000460:	2301      	movs	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	e011      	b.n	800048a <HAL_TIM_PeriodElapsedCallback+0x5a>
					HAL_GPIO_TogglePin(leds.digit[i-1].port, leds.digit[i-1].pin);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a37      	ldr	r2, [pc, #220]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800046c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3b01      	subs	r3, #1
 8000474:	4934      	ldr	r1, [pc, #208]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	440b      	add	r3, r1
 800047a:	889b      	ldrh	r3, [r3, #4]
 800047c:	4619      	mov	r1, r3
 800047e:	4610      	mov	r0, r2
 8000480:	f000 fff2 	bl	8001468 <HAL_GPIO_TogglePin>
			for (int i = 1; i < 9; i++){
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3301      	adds	r3, #1
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	2b08      	cmp	r3, #8
 800048e:	ddea      	ble.n	8000466 <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049a:	f000 ffcd 	bl	8001438 <HAL_GPIO_WritePin>
			if(HAL_GetTick() - last_time > 50000 ){
 800049e:	f000 fcbd 	bl	8000e1c <HAL_GetTick>
 80004a2:	4602      	mov	r2, r0
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d93f      	bls.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
				observed = 0;
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
				relay_active = 0;
 80004b8:	4b25      	ldr	r3, [pc, #148]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
		    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c8:	f000 ffb6 	bl	8001438 <HAL_GPIO_WritePin>
		    	last_time = HAL_GetTick();
 80004cc:	f000 fca6 	bl	8000e1c <HAL_GetTick>
 80004d0:	4603      	mov	r3, r0
 80004d2:	4a1e      	ldr	r2, [pc, #120]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80004d4:	6013      	str	r3, [r2, #0]
			if(HAL_GetTick() - last_time > 50000 ){
 80004d6:	e02c      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
		else if (pir_active == 1 && observed == 0){
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d128      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d124      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
			time_count +=1;
 80004e8:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004f0:	6013      	str	r3, [r2, #0]
			if(time_count == 10){
 80004f2:	4b18      	ldr	r3, [pc, #96]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b0a      	cmp	r3, #10
 80004f8:	d11b      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
				for (int i = 1; i < 9; i++){
 80004fa:	2301      	movs	r3, #1
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	e011      	b.n	8000524 <HAL_TIM_PeriodElapsedCallback+0xf4>
					HAL_GPIO_TogglePin(leds.digit[i-1].port, leds.digit[i-1].pin);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	3b01      	subs	r3, #1
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000506:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3b01      	subs	r3, #1
 800050e:	490e      	ldr	r1, [pc, #56]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	440b      	add	r3, r1
 8000514:	889b      	ldrh	r3, [r3, #4]
 8000516:	4619      	mov	r1, r3
 8000518:	4610      	mov	r0, r2
 800051a:	f000 ffa5 	bl	8001468 <HAL_GPIO_TogglePin>
				for (int i = 1; i < 9; i++){
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	3301      	adds	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b08      	cmp	r3, #8
 8000528:	ddea      	ble.n	8000500 <HAL_TIM_PeriodElapsedCallback+0xd0>
				time_count = 0;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	e7ff      	b.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x102>
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40012c00 	.word	0x40012c00
 8000540:	20000208 	.word	0x20000208
 8000544:	20000048 	.word	0x20000048
 8000548:	20000008 	.word	0x20000008
 800054c:	20000214 	.word	0x20000214
 8000550:	2000020c 	.word	0x2000020c
 8000554:	20000210 	.word	0x20000210

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fc04 	bl	8000d68 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f810 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f934 	bl	80007d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000568:	f000 f86e 	bl	8000648 <MX_I2C1_Init>
  MX_TIM1_Init();
 800056c:	f000 f8ac 	bl	80006c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f8fe 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <main+0x28>)
 8000576:	f002 fd4b 	bl	8003010 <HAL_TIM_Base_Start_IT>
//	HAL_UART_Receive(&huart2, numbers, NUM_LEN, HAL_MAX_DELAY);
//	uint8_t out[100];
//	uint32_t len_out = sprintf(out, "number {%s} received", numbers);
//	HAL_UART_Transmit(&huart2, out, len_out, HAL_MAX_DELAY);
//	programInit(numbers);
	uart_rx_enable_it();
 800057a:	f7ff fe2f 	bl	80001dc <uart_rx_enable_it>

	while (1) {
 800057e:	e7fe      	b.n	800057e <main+0x26>
 8000580:	200000c8 	.word	0x200000c8

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09e      	sub	sp, #120	; 0x78
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800058e:	2228      	movs	r2, #40	; 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fc54 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	223c      	movs	r2, #60	; 0x3c
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fc46 	bl	8004e40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b4:	2303      	movs	r3, #3
 80005b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2310      	movs	r3, #16
 80005c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005d8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f89a 	bl	8001718 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005ea:	f000 fa09 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f8c2 	bl	8002794 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000616:	f000 f9f3 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800061a:	f241 0322 	movw	r3, #4130	; 0x1022
 800061e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000628:	2300      	movs	r3, #0
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062c:	463b      	mov	r3, r7
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fae6 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800063a:	f000 f9e1 	bl	8000a00 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3778      	adds	r7, #120	; 0x78
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_I2C1_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_I2C1_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_I2C1_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_I2C1_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_I2C1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	; (80006bc <MX_I2C1_Init+0x74>)
 8000684:	f000 ff22 	bl	80014cc <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 f9b7 	bl	8000a00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_I2C1_Init+0x74>)
 8000696:	f000 ffa8 	bl	80015ea <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 f9ae 	bl	8000a00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_I2C1_Init+0x74>)
 80006a8:	f000 ffea 	bl	8001680 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 f9a5 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000074 	.word	0x20000074
 80006c0:	40005400 	.word	0x40005400
 80006c4:	2000090e 	.word	0x2000090e

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_TIM1_Init+0xa0>)
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <MX_TIM1_Init+0xa4>)
 80006ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM1_Init+0xa0>)
 80006ee:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM1_Init+0xa0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM1_Init+0xa0>)
 80006fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_TIM1_Init+0xa0>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM1_Init+0xa0>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_TIM1_Init+0xa0>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000714:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_TIM1_Init+0xa0>)
 8000716:	f002 fc23 	bl	8002f60 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f96e 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_TIM1_Init+0xa0>)
 8000732:	f002 fdf6 	bl	8003322 <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800073c:	f000 f960 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_TIM1_Init+0xa0>)
 8000752:	f003 f801 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 f950 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000c8 	.word	0x200000c8
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	f003 f86e 	bl	8003894 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f91f 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000114 	.word	0x20000114
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	4b81      	ldr	r3, [pc, #516]	; (80009ec <MX_GPIO_Init+0x21c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a80      	ldr	r2, [pc, #512]	; (80009ec <MX_GPIO_Init+0x21c>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b7e      	ldr	r3, [pc, #504]	; (80009ec <MX_GPIO_Init+0x21c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b7b      	ldr	r3, [pc, #492]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a7a      	ldr	r2, [pc, #488]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b78      	ldr	r3, [pc, #480]	; (80009ec <MX_GPIO_Init+0x21c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000816:	4b75      	ldr	r3, [pc, #468]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a74      	ldr	r2, [pc, #464]	; (80009ec <MX_GPIO_Init+0x21c>)
 800081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b72      	ldr	r3, [pc, #456]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b6f      	ldr	r3, [pc, #444]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a6e      	ldr	r2, [pc, #440]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b6c      	ldr	r3, [pc, #432]	; (80009ec <MX_GPIO_Init+0x21c>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b69      	ldr	r3, [pc, #420]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a68      	ldr	r2, [pc, #416]	; (80009ec <MX_GPIO_Init+0x21c>)
 800084c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b66      	ldr	r3, [pc, #408]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b63      	ldr	r3, [pc, #396]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a62      	ldr	r2, [pc, #392]	; (80009ec <MX_GPIO_Init+0x21c>)
 8000864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b60      	ldr	r3, [pc, #384]	; (80009ec <MX_GPIO_Init+0x21c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000876:	2200      	movs	r2, #0
 8000878:	f64f 7108 	movw	r1, #65288	; 0xff08
 800087c:	485c      	ldr	r0, [pc, #368]	; (80009f0 <MX_GPIO_Init+0x220>)
 800087e:	f000 fddb 	bl	8001438 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f240 4114 	movw	r1, #1044	; 0x414
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fdd4 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2150      	movs	r1, #80	; 0x50
 8000894:	4857      	ldr	r0, [pc, #348]	; (80009f4 <MX_GPIO_Init+0x224>)
 8000896:	f000 fdcf 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f242 0105 	movw	r1, #8197	; 0x2005
 80008a0:	4855      	ldr	r0, [pc, #340]	; (80009f8 <MX_GPIO_Init+0x228>)
 80008a2:	f000 fdc9 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80008ac:	4853      	ldr	r0, [pc, #332]	; (80009fc <MX_GPIO_Init+0x22c>)
 80008ae:	f000 fdc3 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 80008b2:	2324      	movs	r3, #36	; 0x24
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	484a      	ldr	r0, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x220>)
 80008c8:	f000 fc3c 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008cc:	f64f 7308 	movw	r3, #65288	; 0xff08
 80008d0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4842      	ldr	r0, [pc, #264]	; (80009f0 <MX_GPIO_Init+0x220>)
 80008e6:	f000 fc2d 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fc20 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fc12 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10;
 8000920:	f240 4314 	movw	r3, #1044	; 0x414
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f000 fc02 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000940:	23e0      	movs	r3, #224	; 0xe0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000950:	2305      	movs	r3, #5
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f000 fbf1 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000962:	2350      	movs	r3, #80	; 0x50
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <MX_GPIO_Init+0x224>)
 800097a:	f000 fbe3 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 800097e:	f242 0305 	movw	r3, #8197	; 0x2005
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4818      	ldr	r0, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x228>)
 8000998:	f000 fbd4 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800099c:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	; (80009fc <MX_GPIO_Init+0x22c>)
 80009b6:	f000 fbc5 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0x22c>)
 80009d0:	f000 fbb8 	bl	8001144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2006      	movs	r0, #6
 80009da:	f000 fb06 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009de:	2006      	movs	r0, #6
 80009e0:	f000 fb1f 	bl	8001022 <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	3730      	adds	r7, #48	; 0x30
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48001000 	.word	0x48001000
 80009f4:	48000800 	.word	0x48000800
 80009f8:	48000400 	.word	0x48000400
 80009fc:	48000c00 	.word	0x48000c00

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f000 fac6 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_I2C_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d127      	bne.n	8000ac6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a8e:	23c0      	movs	r3, #192	; 0xc0
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a92:	2312      	movs	r3, #18
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <HAL_I2C_MspInit+0x84>)
 8000aaa:	f000 fb4b 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_I2C_MspInit+0x80>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	48000400 	.word	0x48000400

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_TIM_Base_MspInit+0x74>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12b      	bne.n	8000b46 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_TIM_Base_MspInit+0x78>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_TIM_Base_MspInit+0x78>)
 8000af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_TIM_Base_MspInit+0x78>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2018      	movs	r0, #24
 8000b0c:	f000 fa6d 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b10:	2018      	movs	r0, #24
 8000b12:	f000 fa86 	bl	8001022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 fa65 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b20:	2019      	movs	r0, #25
 8000b22:	f000 fa7e 	bl	8001022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201a      	movs	r0, #26
 8000b2c:	f000 fa5d 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b30:	201a      	movs	r0, #26
 8000b32:	f000 fa76 	bl	8001022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	f000 fa55 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b40:	201b      	movs	r0, #27
 8000b42:	f000 fa6e 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_UART_MspInit+0xc4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d14c      	bne.n	8000c14 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_UART_MspInit+0xc8>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fab0 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000be4:	2320      	movs	r3, #32
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4809      	ldr	r0, [pc, #36]	; (8000c24 <HAL_UART_MspInit+0xcc>)
 8000c00:	f000 faa0 	bl	8001144 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2100      	movs	r1, #0
 8000c08:	2026      	movs	r0, #38	; 0x26
 8000c0a:	f000 f9ee 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0e:	2026      	movs	r0, #38	; 0x26
 8000c10:	f000 fa07 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000c00 	.word	0x48000c00

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f8be 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f000 fc0b 	bl	800149c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c92:	f002 fa27 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c8 	.word	0x200000c8

08000ca0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ca6:	f002 fa1d 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000c8 	.word	0x200000c8

08000cb4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000cba:	f002 fa13 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000c8 	.word	0x200000c8

08000cc8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_CC_IRQHandler+0x10>)
 8000cce:	f002 fa09 	bl	80030e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000c8 	.word	0x200000c8

08000cdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <USART2_IRQHandler+0x10>)
 8000ce2:	f002 fef3 	bl	8003acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000114 	.word	0x20000114

08000cf0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x20>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <SystemInit+0x20>)
 8000cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d18:	f7ff ffea 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f004 f859 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d46:	f7ff fc07 	bl	8000558 <main>

08000d4a <LoopForever>:

LoopForever:
    b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d4c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000d58:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000d5c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000d60:	2000021c 	.word	0x2000021c

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f92b 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe42 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f943 	bl	800103e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f90b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000004c 	.word	0x2000004c
 8000dec:	20000054 	.word	0x20000054
 8000df0:	20000050 	.word	0x20000050

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000054 	.word	0x20000054
 8000e18:	20000218 	.word	0x20000218

08000e1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000218 	.word	0x20000218

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e020      	b.n	80010bc <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d005      	beq.n	80010ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2204      	movs	r2, #4
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e027      	b.n	800113a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 020e 	bic.w	r2, r2, #14
 80010f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001112:	2101      	movs	r1, #1
 8001114:	fa01 f202 	lsl.w	r2, r1, r2
 8001118:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
    } 
  }
  return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e154      	b.n	80013fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8146 	beq.w	80013f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d017      	beq.n	8001222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d123      	bne.n	8001276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	6939      	ldr	r1, [r7, #16]
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0203 	and.w	r2, r3, #3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80a0 	beq.w	80013f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_GPIO_Init+0x2d8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a53      	ldr	r2, [pc, #332]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d019      	beq.n	8001330 <HAL_GPIO_Init+0x1ec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x2e0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x1e8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1e4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_GPIO_Init+0x2e8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1e0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_GPIO_Init+0x2ec>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1dc>
 800131c:	2304      	movs	r3, #4
 800131e:	e008      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001320:	2305      	movs	r3, #5
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001324:	2303      	movs	r3, #3
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001330:	2300      	movs	r3, #0
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x2dc>)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001374:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_GPIO_Init+0x2f0>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f aea3 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000
 8001424:	48000400 	.word	0x48000400
 8001428:	48000800 	.word	0x48000800
 800142c:	48000c00 	.word	0x48000c00
 8001430:	48001000 	.word	0x48001000
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4013      	ands	r3, r2
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43d9      	mvns	r1, r3
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	400b      	ands	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	619a      	str	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ff98 	bl	80003f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40010400 	.word	0x40010400

080014cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e081      	b.n	80015e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d106      	bne.n	80014f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff faae 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2224      	movs	r2, #36	; 0x24
 80014fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f022 0201 	bic.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800151c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e006      	b.n	8001554 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001552:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d104      	bne.n	8001566 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001578:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001588:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69d9      	ldr	r1, [r3, #28]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1a      	ldr	r2, [r3, #32]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b20      	cmp	r3, #32
 80015fe:	d138      	bne.n	8001672 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800160a:	2302      	movs	r3, #2
 800160c:	e032      	b.n	8001674 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2224      	movs	r2, #36	; 0x24
 800161a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800163c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001672:	2302      	movs	r3, #2
  }
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b20      	cmp	r3, #32
 8001694:	d139      	bne.n	800170a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e033      	b.n	800170c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2224      	movs	r2, #36	; 0x24
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0201 	bic.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800171e:	af00      	add	r7, sp, #0
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001728:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f001 b823 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 817d 	beq.w	8001a4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001754:	4bbc      	ldr	r3, [pc, #752]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 030c 	and.w	r3, r3, #12
 800175c:	2b04      	cmp	r3, #4
 800175e:	d00c      	beq.n	800177a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001760:	4bb9      	ldr	r3, [pc, #740]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	d15c      	bne.n	8001826 <HAL_RCC_OscConfig+0x10e>
 800176c:	4bb6      	ldr	r3, [pc, #728]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d155      	bne.n	8001826 <HAL_RCC_OscConfig+0x10e>
 800177a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800177e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800178e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x94>
 80017a6:	4ba8      	ldr	r3, [pc, #672]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e015      	b.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017d4:	4b9c      	ldr	r3, [pc, #624]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 811f 	beq.w	8001a4c <HAL_RCC_OscConfig+0x334>
 800180e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 8116 	bne.w	8001a4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f000 bfaf 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x12e>
 8001838:	4b83      	ldr	r3, [pc, #524]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a82      	ldr	r2, [pc, #520]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800183e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e036      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x158>
 8001856:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800185c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e021      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x184>
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a70      	ldr	r2, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6d      	ldr	r2, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x19c>
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b67      	ldr	r3, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a66      	ldr	r2, [pc, #408]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	f023 020f 	bic.w	r2, r3, #15
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	495f      	ldr	r1, [pc, #380]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d059      	beq.n	8001992 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fa9d 	bl	8000e1c <HAL_GetTick>
 80018e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fa98 	bl	8000e1c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b64      	cmp	r3, #100	; 0x64
 80018f6:	d902      	bls.n	80018fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f000 bf43 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001912:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d102      	bne.n	8001930 <HAL_RCC_OscConfig+0x218>
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	e015      	b.n	800195c <HAL_RCC_OscConfig+0x244>
 8001930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001934:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001948:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800194c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001958:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 800195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001960:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001964:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001968:	fa92 f2a2 	rbit	r2, r2
 800196c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001970:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001974:	fab2 f282 	clz	r2, r2
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f042 0220 	orr.w	r2, r2, #32
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f002 021f 	and.w	r2, r2, #31
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ab      	beq.n	80018e8 <HAL_RCC_OscConfig+0x1d0>
 8001990:	e05d      	b.n	8001a4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa43 	bl	8000e1c <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fa3e 	bl	8000e1c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d902      	bls.n	80019b2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f000 bee9 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 80019b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d102      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2cc>
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_OscConfig+0x2f8>
 80019e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_RCC_OscConfig+0x330>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a1c:	fa92 f2a2 	rbit	r2, r2
 8001a20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f042 0220 	orr.w	r2, r2, #32
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f002 021f 	and.w	r2, r2, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1ab      	bne.n	800199c <HAL_RCC_OscConfig+0x284>
 8001a44:	e003      	b.n	8001a4e <HAL_RCC_OscConfig+0x336>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 817d 	beq.w	8001d5e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a64:	4ba6      	ldr	r3, [pc, #664]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a70:	4ba3      	ldr	r3, [pc, #652]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d172      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d16c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	095b      	lsrs	r3, r3, #5
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x3a0>
 8001ab2:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	e013      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c8>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ad0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001adc:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ae6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001af2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <HAL_RCC_OscConfig+0x410>
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 be2e 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	21f8      	movs	r1, #248	; 0xf8
 8001b3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b46:	fa91 f1a1 	rbit	r1, r1
 8001b4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b52:	fab1 f181 	clz	r1, r1
 8001b56:	b2c9      	uxtb	r1, r1
 8001b58:	408b      	lsls	r3, r1
 8001b5a:	4969      	ldr	r1, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b60:	e0fd      	b.n	8001d5e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8088 	beq.w	8001c84 <HAL_RCC_OscConfig+0x56c>
 8001b74:	2301      	movs	r3, #1
 8001b76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f93c 	bl	8000e1c <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001baa:	f7ff f937 	bl	8000e1c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d902      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	f000 bde2 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d8>
 8001bea:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e013      	b.n	8001c18 <HAL_RCC_OscConfig+0x500>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c22:	fa92 f2a2 	rbit	r2, r2
 8001c26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c2e:	fab2 f282 	clz	r2, r2
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f002 021f 	and.w	r2, r2, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f202 	lsl.w	r2, r1, r2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0af      	beq.n	8001baa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	21f8      	movs	r1, #248	; 0xf8
 8001c60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c68:	fa91 f1a1 	rbit	r1, r1
 8001c6c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c70:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c74:	fab1 f181 	clz	r1, r1
 8001c78:	b2c9      	uxtb	r1, r1
 8001c7a:	408b      	lsls	r3, r1
 8001c7c:	4920      	ldr	r1, [pc, #128]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
 8001c82:	e06c      	b.n	8001d5e <HAL_RCC_OscConfig+0x646>
 8001c84:	2301      	movs	r3, #1
 8001c86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f8b4 	bl	8000e1c <HAL_GetTick>
 8001cb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff f8af 	bl	8000e1c <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d902      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	f000 bd5a 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d104      	bne.n	8001d04 <HAL_RCC_OscConfig+0x5ec>
 8001cfa:	4b01      	ldr	r3, [pc, #4]	; (8001d00 <HAL_RCC_OscConfig+0x5e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x614>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d28:	4bc8      	ldr	r3, [pc, #800]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f042 0220 	orr.w	r2, r2, #32
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	f002 021f 	and.w	r2, r2, #31
 8001d52:	2101      	movs	r1, #1
 8001d54:	fa01 f202 	lsl.w	r2, r1, r2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ad      	bne.n	8001cba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8110 	beq.w	8001f94 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d079      	beq.n	8001e78 <HAL_RCC_OscConfig+0x760>
 8001d84:	2301      	movs	r3, #1
 8001d86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	461a      	mov	r2, r3
 8001da2:	4bab      	ldr	r3, [pc, #684]	; (8002050 <HAL_RCC_OscConfig+0x938>)
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	461a      	mov	r2, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f835 	bl	8000e1c <HAL_GetTick>
 8001db2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff f830 	bl	8000e1c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d902      	bls.n	8001dce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f000 bcdb 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e34:	2102      	movs	r1, #2
 8001e36:	6019      	str	r1, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f1a3 	rbit	r1, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e4e:	6019      	str	r1, [r3, #0]
  return result;
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0a0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x6a0>
 8001e76:	e08d      	b.n	8001f94 <HAL_RCC_OscConfig+0x87c>
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ea4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x938>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ffaf 	bl	8000e1c <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7fe ffaa 	bl	8000e1c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d902      	bls.n	8001eda <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	f000 bc55 	b.w	8002784 <HAL_RCC_OscConfig+0x106c>
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	fa93 f2a3 	rbit	r2, r3
 8001ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f06:	2202      	movs	r2, #2
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	fa93 f2a3 	rbit	r2, r3
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f52:	2102      	movs	r1, #2
 8001f54:	6019      	str	r1, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f1a3 	rbit	r1, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f6c:	6019      	str	r1, [r3, #0]
  return result;
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d197      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 81a1 	beq.w	80022ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d116      	bne.n	8001fea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	61d3      	str	r3, [r2, #28]
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fde:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fe2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d11a      	bne.n	800202c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_RCC_OscConfig+0x93c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7fe ff0b 	bl	8000e1c <HAL_GetTick>
 8002006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200a:	e009      	b.n	8002020 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200c:	f7fe ff06 	bl	8000e1c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e3b1      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x93c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_OscConfig+0x940>
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_RCC_OscConfig+0x934>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a02      	ldr	r2, [pc, #8]	; (800204c <HAL_RCC_OscConfig+0x934>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e03c      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	10908120 	.word	0x10908120
 8002054:	40007000 	.word	0x40007000
 8002058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x96a>
 8002068:	4bc1      	ldr	r3, [pc, #772]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4ac0      	ldr	r2, [pc, #768]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4bbe      	ldr	r3, [pc, #760]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4abd      	ldr	r2, [pc, #756]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 800207a:	f023 0304 	bic.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e020      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b05      	cmp	r3, #5
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x994>
 8002092:	4bb7      	ldr	r3, [pc, #732]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4ab6      	ldr	r2, [pc, #728]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4bb4      	ldr	r3, [pc, #720]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4ab3      	ldr	r2, [pc, #716]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e00b      	b.n	80020c4 <HAL_RCC_OscConfig+0x9ac>
 80020ac:	4bb0      	ldr	r3, [pc, #704]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4aaf      	ldr	r2, [pc, #700]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	4bad      	ldr	r3, [pc, #692]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4aac      	ldr	r2, [pc, #688]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8081 	beq.w	80021d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d6:	f7fe fea1 	bl	8000e1c <HAL_GetTick>
 80020da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fe9c 	bl	8000e1c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e345      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80020f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002100:	2202      	movs	r2, #2
 8002102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002120:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002124:	2202      	movs	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f2a3 	rbit	r2, r3
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800213e:	601a      	str	r2, [r3, #0]
  return result;
 8002140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002144:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002148:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0xa4c>
 800215e:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	e013      	b.n	800218c <HAL_RCC_OscConfig+0xa74>
 8002164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002168:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800216c:	2202      	movs	r2, #2
 800216e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	fa93 f2a3 	rbit	r2, r3
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b79      	ldr	r3, [pc, #484]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002190:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002194:	2102      	movs	r1, #2
 8002196:	6011      	str	r1, [r2, #0]
 8002198:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800219c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	fa92 f1a2 	rbit	r1, r2
 80021a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021ae:	6011      	str	r1, [r2, #0]
  return result;
 80021b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	fab2 f282 	clz	r2, r2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	f002 021f 	and.w	r2, r2, #31
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d084      	beq.n	80020e0 <HAL_RCC_OscConfig+0x9c8>
 80021d6:	e07f      	b.n	80022d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fe20 	bl	8000e1c <HAL_GetTick>
 80021dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fe1b 	bl	8000e1c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e2c4      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002218:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002222:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002226:	2202      	movs	r2, #2
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f2a3 	rbit	r2, r3
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002240:	601a      	str	r2, [r3, #0]
  return result;
 8002242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002246:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800224a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	b2db      	uxtb	r3, r3
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d102      	bne.n	8002266 <HAL_RCC_OscConfig+0xb4e>
 8002260:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	e013      	b.n	800228e <HAL_RCC_OscConfig+0xb76>
 8002266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800226e:	2202      	movs	r2, #2
 8002270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	fa93 f2a3 	rbit	r2, r3
 8002280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002284:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002292:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002296:	2102      	movs	r1, #2
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800229e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	fa92 f1a2 	rbit	r1, r2
 80022a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022b0:	6011      	str	r1, [r2, #0]
  return result;
 80022b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fab2 f282 	clz	r2, r2
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f002 021f 	and.w	r2, r2, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f202 	lsl.w	r2, r1, r2
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d184      	bne.n	80021e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 80022e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8242 	beq.w	8002782 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <HAL_RCC_OscConfig+0xc58>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	f000 8213 	beq.w	8002732 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f040 8162 	bne.w	80025e2 <HAL_RCC_OscConfig+0xeca>
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002326:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800232a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002342:	601a      	str	r2, [r3, #0]
  return result;
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800234c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002358:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	461a      	mov	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fd5a 	bl	8000e1c <HAL_GetTick>
 8002368:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e00c      	b.n	8002388 <HAL_RCC_OscConfig+0xc70>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fd52 	bl	8000e1c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1fd      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d102      	bne.n	80023d2 <HAL_RCC_OscConfig+0xcba>
 80023cc:	4bb0      	ldr	r3, [pc, #704]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	e027      	b.n	8002422 <HAL_RCC_OscConfig+0xd0a>
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002426:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800242a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800242e:	6011      	str	r1, [r2, #0]
 8002430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002434:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fa92 f1a2 	rbit	r1, r2
 800243e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002442:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002446:	6011      	str	r1, [r2, #0]
  return result;
 8002448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	fab2 f282 	clz	r2, r2
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	f042 0220 	orr.w	r2, r2, #32
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f002 021f 	and.w	r2, r2, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	4013      	ands	r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d182      	bne.n	8002374 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246e:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	430b      	orrs	r3, r1
 8002490:	497f      	ldr	r1, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800249e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024ba:	601a      	str	r2, [r3, #0]
  return result;
 80024bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	461a      	mov	r2, r3
 80024d8:	2301      	movs	r3, #1
 80024da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fc9e 	bl	8000e1c <HAL_GetTick>
 80024e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fc99 	bl	8000e1c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e144      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 80024fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	fa93 f2a3 	rbit	r2, r3
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800251e:	601a      	str	r2, [r3, #0]
  return result;
 8002520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002524:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0xe2c>
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e027      	b.n	8002594 <HAL_RCC_OscConfig+0xe7c>
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800254c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002556:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	fa93 f2a3 	rbit	r2, r3
 8002560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002564:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	fa93 f2a3 	rbit	r2, r3
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002598:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800259c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	fa92 f1a2 	rbit	r1, r2
 80025b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025b8:	6011      	str	r1, [r2, #0]
  return result;
 80025ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d082      	beq.n	80024e6 <HAL_RCC_OscConfig+0xdce>
 80025e0:	e0cf      	b.n	8002782 <HAL_RCC_OscConfig+0x106a>
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002606:	601a      	str	r2, [r3, #0]
  return result;
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002610:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800261c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	461a      	mov	r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fbf8 	bl	8000e1c <HAL_GetTick>
 800262c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e009      	b.n	8002646 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fbf3 	bl	8000e1c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e09e      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800264e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002666:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800266a:	601a      	str	r2, [r3, #0]
  return result;
 800266c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002670:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002674:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <HAL_RCC_OscConfig+0xf7c>
 800268a:	4b01      	ldr	r3, [pc, #4]	; (8002690 <HAL_RCC_OscConfig+0xf78>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e029      	b.n	80026e4 <HAL_RCC_OscConfig+0xfcc>
 8002690:	40021000 	.word	0x40021000
 8002694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002698:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800269c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	fa93 f2a3 	rbit	r2, r3
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_RCC_OscConfig+0x1078>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	fa92 f1a2 	rbit	r1, r2
 8002700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002704:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002708:	6011      	str	r1, [r2, #0]
  return result;
 800270a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800270e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	fab2 f282 	clz	r2, r2
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2101      	movs	r1, #1
 8002726:	fa01 f202 	lsl.w	r2, r1, r2
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d180      	bne.n	8002632 <HAL_RCC_OscConfig+0xf1a>
 8002730:	e027      	b.n	8002782 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e01e      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_OscConfig+0x1078>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800274e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002752:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	429a      	cmp	r2, r3
 8002764:	d10b      	bne.n	800277e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002766:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800276a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b09e      	sub	sp, #120	; 0x78
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e162      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b90      	ldr	r3, [pc, #576]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b8d      	ldr	r3, [pc, #564]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	498b      	ldr	r1, [pc, #556]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e14a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	497f      	ldr	r1, [pc, #508]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80dc 	beq.w	80029c0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d13c      	bne.n	800288a <HAL_RCC_ClockConfig+0xf6>
 8002810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002814:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800281e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002820:	fab3 f383 	clz	r3, r3
 8002824:	b2db      	uxtb	r3, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	b2db      	uxtb	r3, r3
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_RCC_ClockConfig+0xa6>
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	e00f      	b.n	800285a <HAL_RCC_ClockConfig+0xc6>
 800283a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800283e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	667b      	str	r3, [r7, #100]	; 0x64
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	663b      	str	r3, [r7, #96]	; 0x60
 800284e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002856:	4b67      	ldr	r3, [pc, #412]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800286a:	fab2 f282 	clz	r2, r2
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f002 021f 	and.w	r2, r2, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d17b      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0f3      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d13c      	bne.n	800290c <HAL_RCC_ClockConfig+0x178>
 8002892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002896:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	fab3 f383 	clz	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_ClockConfig+0x128>
 80028b6:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_ClockConfig+0x148>
 80028bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
 80028d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e0:	63ba      	str	r2, [r7, #56]	; 0x38
 80028e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f002 021f 	and.w	r2, r2, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d13a      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b2      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d102      	bne.n	8002934 <HAL_RCC_ClockConfig+0x1a0>
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	e00d      	b.n	8002950 <HAL_RCC_ClockConfig+0x1bc>
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	2302      	movs	r3, #2
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	2202      	movs	r2, #2
 8002952:	61ba      	str	r2, [r7, #24]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	fa92 f2a2 	rbit	r2, r2
 800295a:	617a      	str	r2, [r7, #20]
  return result;
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	fab2 f282 	clz	r2, r2
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	f042 0220 	orr.w	r2, r2, #32
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	f002 021f 	and.w	r2, r2, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f202 	lsl.w	r2, r1, r2
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e079      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe fa44 	bl	8000e1c <HAL_GetTick>
 8002994:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fa40 	bl	8000e1c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e061      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d214      	bcs.n	80029f8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4906      	ldr	r1, [pc, #24]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e040      	b.n	8002a72 <HAL_RCC_ClockConfig+0x2de>
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	491a      	ldr	r1, [pc, #104]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4912      	ldr	r1, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a36:	f000 f829 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_RCC_ClockConfig+0x2e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	22f0      	movs	r2, #240	; 0xf0
 8002a46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	fa92 f2a2 	rbit	r2, r2
 8002a4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fab2 f282 	clz	r2, r2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	40d3      	lsrs	r3, r2
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x2ec>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_RCC_ClockConfig+0x2f0>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCC_ClockConfig+0x2f4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f992 	bl	8000d94 <HAL_InitTick>
  
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3778      	adds	r7, #120	; 0x78
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004e88 	.word	0x08004e88
 8002a84:	2000004c 	.word	0x2000004c
 8002a88:	20000050 	.word	0x20000050

08002a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b08b      	sub	sp, #44	; 0x2c
 8002a90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x30>
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aba:	e03c      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abe:	623b      	str	r3, [r7, #32]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002ac8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002acc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	607a      	str	r2, [r7, #4]
  return result;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	220f      	movs	r2, #15
 8002af0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	60fa      	str	r2, [r7, #12]
  return result;
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	40d3      	lsrs	r3, r2
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b06:	5cd3      	ldrb	r3, [r2, r3]
 8002b08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e004      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4a0c      	ldr	r2, [pc, #48]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b38:	623b      	str	r3, [r7, #32]
      break;
 8002b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	372c      	adds	r7, #44	; 0x2c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	007a1200 	.word	0x007a1200
 8002b54:	08004ea0 	.word	0x08004ea0
 8002b58:	08004eb0 	.word	0x08004eb0
 8002b5c:	003d0900 	.word	0x003d0900

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000004c 	.word	0x2000004c

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b7e:	f7ff ffef 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b82:	4601      	mov	r1, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	fa92 f2a2 	rbit	r2, r2
 8002b98:	603a      	str	r2, [r7, #0]
  return result;
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	40d3      	lsrs	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bac:	4618      	mov	r0, r3
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	08004e98 	.word	0x08004e98

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bc2:	f7ff ffcd 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	603a      	str	r2, [r7, #0]
  return result;
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	40d3      	lsrs	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08004e98 	.word	0x08004e98

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b092      	sub	sp, #72	; 0x48
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80d4 	beq.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c24:	4b4e      	ldr	r3, [pc, #312]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10e      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	61d3      	str	r3, [r2, #28]
 8002c3c:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a41      	ldr	r2, [pc, #260]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe f8d9 	bl	8000e1c <HAL_GetTick>
 8002c6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe f8d5 	bl	8000e1c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e169      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8084 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d07c      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cfe:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04b      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fe f885 	bl	8000e1c <HAL_GetTick>
 8002d12:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d14:	e00a      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d16:	f7fe f881 	bl	8000e1c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e113      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	61fb      	str	r3, [r7, #28]
  return result;
 8002d44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d108      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d5a:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	e00d      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40007000 	.word	0x40007000
 8002d68:	10908100 	.word	0x10908100
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	613a      	str	r2, [r7, #16]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	fa92 f2a2 	rbit	r2, r2
 8002d86:	60fa      	str	r2, [r7, #12]
  return result;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fab2 f282 	clz	r2, r2
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 021f 	and.w	r2, r2, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0b7      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002da6:	4b6d      	ldr	r3, [pc, #436]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	496a      	ldr	r1, [pc, #424]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc0:	4b66      	ldr	r3, [pc, #408]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a65      	ldr	r2, [pc, #404]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd8:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	495d      	ldr	r1, [pc, #372]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df6:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4956      	ldr	r1, [pc, #344]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e14:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	494e      	ldr	r1, [pc, #312]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e32:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f023 0210 	bic.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4947      	ldr	r1, [pc, #284]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e50:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	493f      	ldr	r1, [pc, #252]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e6e:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f023 0220 	bic.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4938      	ldr	r1, [pc, #224]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8c:	4b33      	ldr	r3, [pc, #204]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	4930      	ldr	r1, [pc, #192]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4929      	ldr	r1, [pc, #164]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	4921      	ldr	r1, [pc, #132]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	491a      	ldr	r1, [pc, #104]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f04:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	4912      	ldr	r1, [pc, #72]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f22:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	490b      	ldr	r1, [pc, #44]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	4903      	ldr	r1, [pc, #12]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3748      	adds	r7, #72	; 0x48
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000

08002f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e049      	b.n	8003006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fda8 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fab0 	bl	8003504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e04a      	b.n	80030be <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a21      	ldr	r2, [pc, #132]	; (80030cc <HAL_TIM_Base_Start_IT+0xbc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003052:	d013      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_TIM_Base_Start_IT+0xc0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1a      	ldr	r2, [pc, #104]	; (80030d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_TIM_Base_Start_IT+0x6c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_TIM_Base_Start_IT+0xcc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d115      	bne.n	80030a8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d015      	beq.n	80030ba <HAL_TIM_Base_Start_IT+0xaa>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d011      	beq.n	80030ba <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	e008      	b.n	80030ba <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e000      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40014000 	.word	0x40014000
 80030e0:	00010007 	.word	0x00010007

080030e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0202 	mvn.w	r2, #2
 8003110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9ce 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f9c0 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f9d1 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0204 	mvn.w	r2, #4
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9a4 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f996 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f9a7 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0208 	mvn.w	r2, #8
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f97a 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f96c 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f97d 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b10      	cmp	r3, #16
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f950 	bl	80034c8 <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f942 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f953 	bl	80034dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d10e      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0201 	mvn.w	r2, #1
 8003260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd f8e4 	bl	8000430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d10e      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b80      	cmp	r3, #128	; 0x80
 8003282:	d107      	bne.n	8003294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800328c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 faec 	bl	800386c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a2:	d10e      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fadf 	bl	8003880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d10e      	bne.n	80032ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d107      	bne.n	80032ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f901 	bl	80034f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d10e      	bne.n	800331a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d107      	bne.n	800331a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f06f 0220 	mvn.w	r2, #32
 8003312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa9f 	bl	8003858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_TIM_ConfigClockSource+0x1c>
 800333a:	2302      	movs	r3, #2
 800333c:	e0b6      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x18a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003368:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337a:	d03e      	beq.n	80033fa <HAL_TIM_ConfigClockSource+0xd8>
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	f200 8087 	bhi.w	8003492 <HAL_TIM_ConfigClockSource+0x170>
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	f000 8086 	beq.w	8003498 <HAL_TIM_ConfigClockSource+0x176>
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d87f      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 8003392:	2b70      	cmp	r3, #112	; 0x70
 8003394:	d01a      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xaa>
 8003396:	2b70      	cmp	r3, #112	; 0x70
 8003398:	d87b      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 800339a:	2b60      	cmp	r3, #96	; 0x60
 800339c:	d050      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x11e>
 800339e:	2b60      	cmp	r3, #96	; 0x60
 80033a0:	d877      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033a2:	2b50      	cmp	r3, #80	; 0x50
 80033a4:	d03c      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xfe>
 80033a6:	2b50      	cmp	r3, #80	; 0x50
 80033a8:	d873      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d058      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0x13e>
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d86f      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d064      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d86b      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d060      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d867      	bhi.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d05c      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d05a      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0x15e>
 80033ca:	e062      	b.n	8003492 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 f99c 	bl	8003718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]
      break;
 80033f8:	e04f      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f000 f985 	bl	8003718 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e03c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	461a      	mov	r2, r3
 800342e:	f000 f8f9 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2150      	movs	r1, #80	; 0x50
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f952 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 800343e:	e02c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6859      	ldr	r1, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	461a      	mov	r2, r3
 800344e:	f000 f918 	bl	8003682 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2160      	movs	r1, #96	; 0x60
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f942 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 800345e:	e01c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f8d9 	bl	8003624 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f932 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 800347e:	e00c      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f000 f929 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003490:	e003      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
      break;
 8003496:	e000      	b.n	800349a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <TIM_Base_SetConfig+0x104>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0x38>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x38>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a39      	ldr	r2, [pc, #228]	; (800360c <TIM_Base_SetConfig+0x108>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0x38>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a38      	ldr	r2, [pc, #224]	; (8003610 <TIM_Base_SetConfig+0x10c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0x38>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a37      	ldr	r2, [pc, #220]	; (8003614 <TIM_Base_SetConfig+0x110>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d108      	bne.n	800354e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <TIM_Base_SetConfig+0x104>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2a      	ldr	r2, [pc, #168]	; (800360c <TIM_Base_SetConfig+0x108>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0x10c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a28      	ldr	r2, [pc, #160]	; (8003614 <TIM_Base_SetConfig+0x110>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <TIM_Base_SetConfig+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <TIM_Base_SetConfig+0x118>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a25      	ldr	r2, [pc, #148]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <TIM_Base_SetConfig+0x104>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_Base_SetConfig+0xe8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a11      	ldr	r2, [pc, #68]	; (8003614 <TIM_Base_SetConfig+0x110>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0xe8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a10      	ldr	r2, [pc, #64]	; (8003618 <TIM_Base_SetConfig+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0xe8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a0f      	ldr	r2, [pc, #60]	; (800361c <TIM_Base_SetConfig+0x118>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xe8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <TIM_Base_SetConfig+0x11c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40013400 	.word	0x40013400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0210 	bic.w	r2, r3, #16
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e063      	b.n	8003838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d013      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a13      	ldr	r2, [pc, #76]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10c      	bne.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40013400 	.word	0x40013400
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40014000 	.word	0x40014000

08003858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e040      	b.n	8003928 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd f94e 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fc00 	bl	80040d8 <UART_SetConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fdc8 	bl	8004480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800390e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fe4f 	bl	80045c4 <UART_CheckIdleState>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003944:	2b20      	cmp	r3, #32
 8003946:	d178      	bne.n	8003a3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_UART_Transmit+0x24>
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e071      	b.n	8003a3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2221      	movs	r2, #33	; 0x21
 8003964:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fd fa59 	bl	8000e1c <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x68>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a0:	e030      	b.n	8003a04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 feb1 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e03c      	b.n	8003a3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	b292      	uxth	r2, r2
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	3302      	adds	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e008      	b.n	80039f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	781a      	ldrb	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	b292      	uxth	r2, r2
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1c8      	bne.n	80039a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fe7a 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d004      	beq.n	8003a30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e005      	b.n	8003a3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
  }
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d132      	bne.n	8003ac2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Receive_IT+0x24>
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e02b      	b.n	8003ac4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	623b      	str	r3, [r7, #32]
 8003aa0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fe93 	bl	80047e4 <UART_Start_Receive_IT>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0ba      	sub	sp, #232	; 0xe8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003afa:	4013      	ands	r3, r2
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d115      	bne.n	8003b34 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 82ab 	beq.w	8004080 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4798      	blx	r3
      }
      return;
 8003b32:	e2a5      	b.n	8004080 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8117 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_UART_IRQHandler+0x298>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 810a 	beq.w	8003d6c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d011      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d011      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
 8003b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00b      	beq.n	8003bb8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d011      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
 8003bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00b      	beq.n	8003c24 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2208      	movs	r2, #8
 8003c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 8211 	beq.w	8004084 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04f      	beq.n	8003d4e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fe4c 	bl	800494c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d141      	bne.n	8003d46 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cfe:	e841 2300 	strex	r3, r2, [r1]
 8003d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1d9      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <HAL_UART_IRQHandler+0x29c>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd f9d0 	bl	80010c8 <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e00f      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9b4 	bl	80040ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00b      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f9b0 	bl	80040ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e007      	b.n	8003d5e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9ac 	bl	80040ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d5c:	e192      	b.n	8004084 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	bf00      	nop
    return;
 8003d60:	e190      	b.n	8004084 <HAL_UART_IRQHandler+0x5b8>
 8003d62:	bf00      	nop
 8003d64:	04000120 	.word	0x04000120
 8003d68:	08004a15 	.word	0x08004a15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 814b 	bne.w	800400c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8144 	beq.w	800400c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 813d 	beq.w	800400c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2210      	movs	r2, #16
 8003d98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	f040 80b5 	bne.w	8003f14 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003db6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8164 	beq.w	8004088 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	f080 815c 	bcs.w	8004088 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	f000 8086 	beq.w	8003ef2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1da      	bne.n	8003de6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e1      	bne.n	8003e30 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e4      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd f8b2 	bl	8001056 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f8d7 	bl	80040c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f12:	e0b9      	b.n	8004088 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ab 	beq.w	800408c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80a6 	beq.w	800408c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f62:	647b      	str	r3, [r7, #68]	; 0x44
 8003f64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e4      	bne.n	8003f40 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	623b      	str	r3, [r7, #32]
   return(result);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3308      	adds	r3, #8
 8003f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e3      	bne.n	8003f76 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0310 	bic.w	r3, r3, #16
 8003fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	69b9      	ldr	r1, [r7, #24]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e4      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ffe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f85b 	bl	80040c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800400a:	e03f      	b.n	800408c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00e      	beq.n	8004036 <HAL_UART_IRQHandler+0x56a>
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800402c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fed8 	bl	8004de4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004034:	e02d      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01c      	beq.n	8004090 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
    }
    return;
 800405e:	e017      	b.n	8004090 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d012      	beq.n	8004092 <HAL_UART_IRQHandler+0x5c6>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fce1 	bl	8004a40 <UART_EndTransmit_IT>
    return;
 800407e:	e008      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004080:	bf00      	nop
 8004082:	e006      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
      return;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004090:	bf00      	nop
  }

}
 8004092:	37e8      	adds	r7, #232	; 0xe8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004106:	f023 030c 	bic.w	r3, r3, #12
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	6979      	ldr	r1, [r7, #20]
 8004110:	430b      	orrs	r3, r1
 8004112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4aa7      	ldr	r2, [pc, #668]	; (80043f0 <UART_SetConfig+0x318>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d120      	bne.n	800419a <UART_SetConfig+0xc2>
 8004158:	4ba6      	ldr	r3, [pc, #664]	; (80043f4 <UART_SetConfig+0x31c>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b03      	cmp	r3, #3
 8004162:	d817      	bhi.n	8004194 <UART_SetConfig+0xbc>
 8004164:	a201      	add	r2, pc, #4	; (adr r2, 800416c <UART_SetConfig+0x94>)
 8004166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416a:	bf00      	nop
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004189 	.word	0x08004189
 8004174:	0800418f 	.word	0x0800418f
 8004178:	08004183 	.word	0x08004183
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0b5      	b.n	80042ee <UART_SetConfig+0x216>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0b2      	b.n	80042ee <UART_SetConfig+0x216>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0af      	b.n	80042ee <UART_SetConfig+0x216>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e0ac      	b.n	80042ee <UART_SetConfig+0x216>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e0a9      	b.n	80042ee <UART_SetConfig+0x216>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a96      	ldr	r2, [pc, #600]	; (80043f8 <UART_SetConfig+0x320>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d124      	bne.n	80041ee <UART_SetConfig+0x116>
 80041a4:	4b93      	ldr	r3, [pc, #588]	; (80043f4 <UART_SetConfig+0x31c>)
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b0:	d011      	beq.n	80041d6 <UART_SetConfig+0xfe>
 80041b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b6:	d817      	bhi.n	80041e8 <UART_SetConfig+0x110>
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041bc:	d011      	beq.n	80041e2 <UART_SetConfig+0x10a>
 80041be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041c2:	d811      	bhi.n	80041e8 <UART_SetConfig+0x110>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0xf8>
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x104>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x110>
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e08b      	b.n	80042ee <UART_SetConfig+0x216>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e088      	b.n	80042ee <UART_SetConfig+0x216>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e085      	b.n	80042ee <UART_SetConfig+0x216>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e082      	b.n	80042ee <UART_SetConfig+0x216>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e07f      	b.n	80042ee <UART_SetConfig+0x216>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a82      	ldr	r2, [pc, #520]	; (80043fc <UART_SetConfig+0x324>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d124      	bne.n	8004242 <UART_SetConfig+0x16a>
 80041f8:	4b7e      	ldr	r3, [pc, #504]	; (80043f4 <UART_SetConfig+0x31c>)
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004204:	d011      	beq.n	800422a <UART_SetConfig+0x152>
 8004206:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800420a:	d817      	bhi.n	800423c <UART_SetConfig+0x164>
 800420c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004210:	d011      	beq.n	8004236 <UART_SetConfig+0x15e>
 8004212:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004216:	d811      	bhi.n	800423c <UART_SetConfig+0x164>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <UART_SetConfig+0x14c>
 800421c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x158>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x164>
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e061      	b.n	80042ee <UART_SetConfig+0x216>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e05e      	b.n	80042ee <UART_SetConfig+0x216>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e05b      	b.n	80042ee <UART_SetConfig+0x216>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e058      	b.n	80042ee <UART_SetConfig+0x216>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e055      	b.n	80042ee <UART_SetConfig+0x216>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6e      	ldr	r2, [pc, #440]	; (8004400 <UART_SetConfig+0x328>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d124      	bne.n	8004296 <UART_SetConfig+0x1be>
 800424c:	4b69      	ldr	r3, [pc, #420]	; (80043f4 <UART_SetConfig+0x31c>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004258:	d011      	beq.n	800427e <UART_SetConfig+0x1a6>
 800425a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800425e:	d817      	bhi.n	8004290 <UART_SetConfig+0x1b8>
 8004260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004264:	d011      	beq.n	800428a <UART_SetConfig+0x1b2>
 8004266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800426a:	d811      	bhi.n	8004290 <UART_SetConfig+0x1b8>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <UART_SetConfig+0x1a0>
 8004270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004274:	d006      	beq.n	8004284 <UART_SetConfig+0x1ac>
 8004276:	e00b      	b.n	8004290 <UART_SetConfig+0x1b8>
 8004278:	2300      	movs	r3, #0
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e037      	b.n	80042ee <UART_SetConfig+0x216>
 800427e:	2302      	movs	r3, #2
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e034      	b.n	80042ee <UART_SetConfig+0x216>
 8004284:	2304      	movs	r3, #4
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e031      	b.n	80042ee <UART_SetConfig+0x216>
 800428a:	2308      	movs	r3, #8
 800428c:	77fb      	strb	r3, [r7, #31]
 800428e:	e02e      	b.n	80042ee <UART_SetConfig+0x216>
 8004290:	2310      	movs	r3, #16
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e02b      	b.n	80042ee <UART_SetConfig+0x216>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a5a      	ldr	r2, [pc, #360]	; (8004404 <UART_SetConfig+0x32c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d124      	bne.n	80042ea <UART_SetConfig+0x212>
 80042a0:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <UART_SetConfig+0x31c>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ac:	d011      	beq.n	80042d2 <UART_SetConfig+0x1fa>
 80042ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042b2:	d817      	bhi.n	80042e4 <UART_SetConfig+0x20c>
 80042b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042b8:	d011      	beq.n	80042de <UART_SetConfig+0x206>
 80042ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042be:	d811      	bhi.n	80042e4 <UART_SetConfig+0x20c>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <UART_SetConfig+0x1f4>
 80042c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c8:	d006      	beq.n	80042d8 <UART_SetConfig+0x200>
 80042ca:	e00b      	b.n	80042e4 <UART_SetConfig+0x20c>
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e00d      	b.n	80042ee <UART_SetConfig+0x216>
 80042d2:	2302      	movs	r3, #2
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e00a      	b.n	80042ee <UART_SetConfig+0x216>
 80042d8:	2304      	movs	r3, #4
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e007      	b.n	80042ee <UART_SetConfig+0x216>
 80042de:	2308      	movs	r3, #8
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e004      	b.n	80042ee <UART_SetConfig+0x216>
 80042e4:	2310      	movs	r3, #16
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e001      	b.n	80042ee <UART_SetConfig+0x216>
 80042ea:	2310      	movs	r3, #16
 80042ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f6:	d15b      	bne.n	80043b0 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d827      	bhi.n	800434e <UART_SetConfig+0x276>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x22c>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004329 	.word	0x08004329
 8004308:	08004331 	.word	0x08004331
 800430c:	08004339 	.word	0x08004339
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800433f 	.word	0x0800433f
 8004318:	0800434f 	.word	0x0800434f
 800431c:	0800434f 	.word	0x0800434f
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fc26 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e013      	b.n	8004358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fc44 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8004334:	61b8      	str	r0, [r7, #24]
        break;
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b33      	ldr	r3, [pc, #204]	; (8004408 <UART_SetConfig+0x330>)
 800433a:	61bb      	str	r3, [r7, #24]
        break;
 800433c:	e00c      	b.n	8004358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe fba5 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8004342:	61b8      	str	r0, [r7, #24]
        break;
 8004344:	e008      	b.n	8004358 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e004      	b.n	8004358 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	77bb      	strb	r3, [r7, #30]
        break;
 8004356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8082 	beq.w	8004464 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	005a      	lsls	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b0f      	cmp	r3, #15
 800437a:	d916      	bls.n	80043aa <UART_SetConfig+0x2d2>
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004382:	d212      	bcs.n	80043aa <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f023 030f 	bic.w	r3, r3, #15
 800438c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	b29a      	uxth	r2, r3
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	4313      	orrs	r3, r2
 800439e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	89fa      	ldrh	r2, [r7, #14]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	e05c      	b.n	8004464 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	77bb      	strb	r3, [r7, #30]
 80043ae:	e059      	b.n	8004464 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d835      	bhi.n	8004422 <UART_SetConfig+0x34a>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0x2e4>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043e9 	.word	0x080043e9
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	08004423 	.word	0x08004423
 80043cc:	08004413 	.word	0x08004413
 80043d0:	08004423 	.word	0x08004423
 80043d4:	08004423 	.word	0x08004423
 80043d8:	08004423 	.word	0x08004423
 80043dc:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e0:	f7fe fbca 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80043e4:	61b8      	str	r0, [r7, #24]
        break;
 80043e6:	e021      	b.n	800442c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043e8:	f7fe fbe8 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 80043ec:	61b8      	str	r0, [r7, #24]
        break;
 80043ee:	e01d      	b.n	800442c <UART_SetConfig+0x354>
 80043f0:	40013800 	.word	0x40013800
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40004400 	.word	0x40004400
 80043fc:	40004800 	.word	0x40004800
 8004400:	40004c00 	.word	0x40004c00
 8004404:	40005000 	.word	0x40005000
 8004408:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <UART_SetConfig+0x3a4>)
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e00c      	b.n	800442c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fe fb3b 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8004416:	61b8      	str	r0, [r7, #24]
        break;
 8004418:	e008      	b.n	800442c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e004      	b.n	800442c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	77bb      	strb	r3, [r7, #30]
        break;
 800442a:	bf00      	nop
    }

    if (pclk != 0U)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	085a      	lsrs	r2, r3, #1
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	441a      	add	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d909      	bls.n	8004460 <UART_SetConfig+0x388>
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004452:	d205      	bcs.n	8004460 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	e001      	b.n	8004464 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004470:	7fbb      	ldrb	r3, [r7, #30]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	007a1200 	.word	0x007a1200

08004480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01a      	beq.n	8004596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457e:	d10a      	bne.n	8004596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	605a      	str	r2, [r3, #4]
  }
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b098      	sub	sp, #96	; 0x60
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d4:	f7fc fc22 	bl	8000e1c <HAL_GetTick>
 80045d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d12e      	bne.n	8004646 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	2200      	movs	r2, #0
 80045f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f88c 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d021      	beq.n	8004646 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004616:	653b      	str	r3, [r7, #80]	; 0x50
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
 8004622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800462e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e062      	b.n	800470c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d149      	bne.n	80046e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	2200      	movs	r2, #0
 800465e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f856 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d03c      	beq.n	80046e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	623b      	str	r3, [r7, #32]
   return(result);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
 800468e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e6      	bne.n	800466e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c0:	61fa      	str	r2, [r7, #28]
 80046c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	617b      	str	r3, [r7, #20]
   return(result);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e5      	bne.n	80046a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e011      	b.n	800470c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3758      	adds	r7, #88	; 0x58
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004724:	e049      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472c:	d045      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fc fb75 	bl	8000e1c <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <UART_WaitOnFlagUntilTimeout+0x30>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e048      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d031      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b08      	cmp	r3, #8
 8004762:	d110      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2208      	movs	r2, #8
 800476a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 f8ed 	bl	800494c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2208      	movs	r2, #8
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e029      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004794:	d111      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800479e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f8d3 	bl	800494c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d0a6      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b097      	sub	sp, #92	; 0x5c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004816:	d10e      	bne.n	8004836 <UART_Start_Receive_IT+0x52>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <UART_Start_Receive_IT+0x48>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004826:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800482a:	e01a      	b.n	8004862 <UART_Start_Receive_IT+0x7e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004834:	e015      	b.n	8004862 <UART_Start_Receive_IT+0x7e>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10d      	bne.n	800485a <UART_Start_Receive_IT+0x76>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <UART_Start_Receive_IT+0x6c>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22ff      	movs	r2, #255	; 0xff
 800484a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800484e:	e008      	b.n	8004862 <UART_Start_Receive_IT+0x7e>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	227f      	movs	r2, #127	; 0x7f
 8004854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004858:	e003      	b.n	8004862 <UART_Start_Receive_IT+0x7e>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2222      	movs	r2, #34	; 0x22
 800486e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3308      	adds	r3, #8
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	657b      	str	r3, [r7, #84]	; 0x54
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3308      	adds	r3, #8
 8004890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004892:	64ba      	str	r2, [r7, #72]	; 0x48
 8004894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e5      	bne.n	8004872 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d107      	bne.n	80048c0 <UART_Start_Receive_IT+0xdc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <UART_Start_Receive_IT+0x160>)
 80048bc:	669a      	str	r2, [r3, #104]	; 0x68
 80048be:	e002      	b.n	80048c6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a21      	ldr	r2, [pc, #132]	; (8004948 <UART_Start_Receive_IT+0x164>)
 80048c4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d019      	beq.n	8004902 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
 80048ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e6      	bne.n	80048ce <UART_Start_Receive_IT+0xea>
 8004900:	e018      	b.n	8004934 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	613b      	str	r3, [r7, #16]
   return(result);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	653b      	str	r3, [r7, #80]	; 0x50
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	623b      	str	r3, [r7, #32]
 8004922:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	69f9      	ldr	r1, [r7, #28]
 8004926:	6a3a      	ldr	r2, [r7, #32]
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	61bb      	str	r3, [r7, #24]
   return(result);
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	375c      	adds	r7, #92	; 0x5c
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	08004c3d 	.word	0x08004c3d
 8004948:	08004a95 	.word	0x08004a95

0800494c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b095      	sub	sp, #84	; 0x54
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004972:	643b      	str	r3, [r7, #64]	; 0x40
 8004974:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	61fb      	str	r3, [r7, #28]
   return(result);
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d118      	bne.n	80049f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f023 0310 	bic.w	r3, r3, #16
 80049d6:	647b      	str	r3, [r7, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6979      	ldr	r1, [r7, #20]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	613b      	str	r3, [r7, #16]
   return(result);
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a08:	bf00      	nop
 8004a0a:	3754      	adds	r7, #84	; 0x54
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff fb3a 	bl	80040ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	613b      	str	r3, [r7, #16]
   return(result);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e6      	bne.n	8004a48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fb06 	bl	8004098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8c:	bf00      	nop
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b09c      	sub	sp, #112	; 0x70
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aac:	2b22      	cmp	r3, #34	; 0x22
 8004aae:	f040 80b9 	bne.w	8004c24 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ab8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004abc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ac0:	b2d9      	uxtb	r1, r3
 8004ac2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	400a      	ands	r2, r1
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 809c 	bne.w	8004c34 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e6      	bne.n	8004afc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d018      	beq.n	8004bb6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	623b      	str	r3, [r7, #32]
   return(result);
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b98:	663b      	str	r3, [r7, #96]	; 0x60
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e6      	bne.n	8004b84 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d12e      	bne.n	8004c1c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0310 	bic.w	r3, r3, #16
 8004bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e6      	bne.n	8004bc4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d103      	bne.n	8004c0c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2210      	movs	r2, #16
 8004c0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c12:	4619      	mov	r1, r3
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff fa53 	bl	80040c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c1a:	e00b      	b.n	8004c34 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fb fb41 	bl	80002a4 <HAL_UART_RxCpltCallback>
}
 8004c22:	e007      	b.n	8004c34 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0208 	orr.w	r2, r2, #8
 8004c32:	619a      	str	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	3770      	adds	r7, #112	; 0x70
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b09c      	sub	sp, #112	; 0x70
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c54:	2b22      	cmp	r3, #34	; 0x22
 8004c56:	f040 80b9 	bne.w	8004dcc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004c6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	1c9a      	adds	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 809c 	bne.w	8004ddc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	663b      	str	r3, [r7, #96]	; 0x60
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cf6:	643a      	str	r2, [r7, #64]	; 0x40
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d018      	beq.n	8004d5e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e6      	bne.n	8004d2c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d12e      	bne.n	8004dc4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0310 	bic.w	r3, r3, #16
 8004d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d103      	bne.n	8004db4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2210      	movs	r2, #16
 8004db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff f97f 	bl	80040c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004dc2:	e00b      	b.n	8004ddc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fb fa6d 	bl	80002a4 <HAL_UART_RxCpltCallback>
}
 8004dca:	e007      	b.n	8004ddc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0208 	orr.w	r2, r2, #8
 8004dda:	619a      	str	r2, [r3, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	3770      	adds	r7, #112	; 0x70
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4d0d      	ldr	r5, [pc, #52]	; (8004e30 <__libc_init_array+0x38>)
 8004dfc:	4c0d      	ldr	r4, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	2600      	movs	r6, #0
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	4d0b      	ldr	r5, [pc, #44]	; (8004e38 <__libc_init_array+0x40>)
 8004e0a:	4c0c      	ldr	r4, [pc, #48]	; (8004e3c <__libc_init_array+0x44>)
 8004e0c:	f000 f820 	bl	8004e50 <_init>
 8004e10:	1b64      	subs	r4, r4, r5
 8004e12:	10a4      	asrs	r4, r4, #2
 8004e14:	2600      	movs	r6, #0
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08004ec0 	.word	0x08004ec0
 8004e34:	08004ec0 	.word	0x08004ec0
 8004e38:	08004ec0 	.word	0x08004ec0
 8004e3c:	08004ec4 	.word	0x08004ec4

08004e40 <memset>:
 8004e40:	4402      	add	r2, r0
 8004e42:	4603      	mov	r3, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr
