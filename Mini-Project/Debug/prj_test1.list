
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  0800e9b8  0800e9b8  0001e9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c8  0800f0c8  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0c8  0800f0c8  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0c8  0800f0c8  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c8  0800f0c8  0001f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0cc  0800f0cc  0001f0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  0800f0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202dc  2**0
                  CONTENTS
 10 .bss          000006b4  200002e0  200002e0  000202e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  000202e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dcee  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035af  00000000  00000000  0003dffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  000415b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001718  00000000  00000000  00042dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021567  00000000  00000000  000444e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4dc  00000000  00000000  00065a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8b3b  00000000  00000000  00083f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ca66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f14  00000000  00000000  0014cab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e99c 	.word	0x0800e99c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800e99c 	.word	0x0800e99c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf8:	f002 f924 	bl	8002f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfc:	f000 f85c 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d00:	f000 fcb8 	bl	8001674 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d04:	f000 f9a6 	bl	8001054 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d08:	f000 f9e4 	bl	80010d4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0c:	f000 fc90 	bl	8001630 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d10:	f000 f8c0 	bl	8000e94 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d14:	f000 fc5c 	bl	80015d0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d18:	f000 fac6 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d1c:	f000 fb12 	bl	8001344 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000d20:	f000 f928 	bl	8000f74 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000d24:	f000 fa14 	bl	8001150 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000d28:	f000 fbfe 	bl	8001528 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000d2c:	f000 fba2 	bl	8001474 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 8000d30:	f001 f936 	bl	8001fa0 <programInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <main+0xa4>)
 8000d36:	f002 fb5f 	bl	80033f8 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <main+0xa8>)
 8000d3c:	f002 fb5c 	bl	80033f8 <HAL_ADC_Start_IT>

  HAL_UART_Transmit(&huart3,"TTT to while",12,1000);
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	220c      	movs	r2, #12
 8000d46:	4916      	ldr	r1, [pc, #88]	; (8000da0 <main+0xac>)
 8000d48:	4816      	ldr	r0, [pc, #88]	; (8000da4 <main+0xb0>)
 8000d4a:	f007 f93b 	bl	8007fc4 <HAL_UART_Transmit>
  HAL_TIM_Base_Start_IT(&htim1);
 8000d4e:	4816      	ldr	r0, [pc, #88]	; (8000da8 <main+0xb4>)
 8000d50:	f005 fec0 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d54:	4815      	ldr	r0, [pc, #84]	; (8000dac <main+0xb8>)
 8000d56:	f005 febd 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d5a:	4815      	ldr	r0, [pc, #84]	; (8000db0 <main+0xbc>)
 8000d5c:	f005 feba 	bl	8006ad4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d60:	4814      	ldr	r0, [pc, #80]	; (8000db4 <main+0xc0>)
 8000d62:	f005 feb7 	bl	8006ad4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d66:	2100      	movs	r1, #0
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <main+0xbc>)
 8000d6a:	f005 ff75 	bl	8006c58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d6e:	2104      	movs	r1, #4
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <main+0xbc>)
 8000d72:	f005 ff71 	bl	8006c58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d76:	2100      	movs	r1, #0
 8000d78:	480e      	ldr	r0, [pc, #56]	; (8000db4 <main+0xc0>)
 8000d7a:	f005 ff6d 	bl	8006c58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d7e:	210c      	movs	r1, #12
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <main+0xbc>)
 8000d82:	f005 ff69 	bl	8006c58 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d86:	2100      	movs	r1, #0
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <main+0xb4>)
 8000d8a:	f005 ff65 	bl	8006c58 <HAL_TIM_PWM_Start>
//  setSegment(0,9,1);
//  setSegment(1,1,1);
//  setSegment(2,9,1);
//  setSegment(3,7,1);
//  setNumber(1110);
	turn_on_leds();
 8000d8e:	f000 fe57 	bl	8001a40 <turn_on_leds>

//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0); //B
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);  //A
//		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);  //C
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);  //D
		programLoop();
 8000d92:	f001 f911 	bl	8001fb8 <programLoop>
  {
 8000d96:	e7fc      	b.n	8000d92 <main+0x9e>
 8000d98:	200002fc 	.word	0x200002fc
 8000d9c:	2000034c 	.word	0x2000034c
 8000da0:	0800e9b8 	.word	0x0800e9b8
 8000da4:	200005d0 	.word	0x200005d0
 8000da8:	20000454 	.word	0x20000454
 8000dac:	200004a0 	.word	0x200004a0
 8000db0:	200004ec 	.word	0x200004ec
 8000db4:	20000538 	.word	0x20000538

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09e      	sub	sp, #120	; 0x78
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 f926 	bl	8009018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	463b      	mov	r3, r7
 8000dde:	223c      	movs	r2, #60	; 0x3c
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 f918 	bl	8009018 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000de8:	2303      	movs	r3, #3
 8000dea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e06:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e0c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e12:	4618      	mov	r0, r3
 8000e14:	f004 f938 	bl	8005088 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e1e:	f000 fd4d 	bl	80018bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e26:	2302      	movs	r3, #2
 8000e28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f005 f960 	bl	8006104 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e4a:	f000 fd37 	bl	80018bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <SystemClock_Config+0xd8>)
 8000e50:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_ADC12
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fb7a 	bl	8006570 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000e82:	f000 fd1b 	bl	80018bc <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3778      	adds	r7, #120	; 0x78
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	000231a4 	.word	0x000231a4

08000e94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000eb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ebc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f10:	4817      	ldr	r0, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f12:	f002 f891 	bl	8003038 <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f1c:	f000 fcce 	bl	80018bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f2c:	f003 f9ac 	bl	8004288 <HAL_ADCEx_MultiModeConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f36:	f000 fcc1 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000f46:	2307      	movs	r3, #7
 8000f48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_ADC1_Init+0xdc>)
 8000f58:	f002 feaa 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f62:	f000 fcab 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200002fc 	.word	0x200002fc

08000f74 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	; (800104c <MX_ADC3_Init+0xd8>)
 8000f98:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <MX_ADC3_Init+0xdc>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <MX_ADC3_Init+0xd8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <MX_ADC3_Init+0xd8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_ADC3_Init+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fee:	4817      	ldr	r0, [pc, #92]	; (800104c <MX_ADC3_Init+0xd8>)
 8000ff0:	f002 f822 	bl	8003038 <HAL_ADC_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8000ffa:	f000 fc5f 	bl	80018bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <MX_ADC3_Init+0xd8>)
 800100a:	f003 f93d 	bl	8004288 <HAL_ADCEx_MultiModeConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001014:	f000 fc52 	bl	80018bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2301      	movs	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001024:	2307      	movs	r3, #7
 8001026:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_ADC3_Init+0xd8>)
 8001036:	f002 fe3b 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001040:	f000 fc3c 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000034c 	.word	0x2000034c
 8001050:	50000400 	.word	0x50000400

08001054 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_I2C1_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_I2C1_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <MX_I2C1_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_I2C1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_I2C1_Init+0x74>)
 8001090:	f003 fe02 	bl	8004c98 <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800109a:	f000 fc0f 	bl	80018bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_I2C1_Init+0x74>)
 80010a2:	f003 fe88 	bl	8004db6 <HAL_I2CEx_ConfigAnalogFilter>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 fc06 	bl	80018bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_I2C1_Init+0x74>)
 80010b4:	f003 feca 	bl	8004e4c <HAL_I2CEx_ConfigDigitalFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010be:	f000 fbfd 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000039c 	.word	0x2000039c
 80010cc:	40005400 	.word	0x40005400
 80010d0:	2000090e 	.word	0x2000090e

080010d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_SPI1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	; (800114c <MX_SPI1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_SPI1_Init+0x74>)
 80010e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_SPI1_Init+0x74>)
 80010ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_SPI1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_SPI1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_SPI1_Init+0x74>)
 8001102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001106:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_SPI1_Init+0x74>)
 800110a:	2208      	movs	r2, #8
 800110c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_SPI1_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_SPI1_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_SPI1_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_SPI1_Init+0x74>)
 8001122:	2207      	movs	r2, #7
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_SPI1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_SPI1_Init+0x74>)
 800112e:	2208      	movs	r2, #8
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_SPI1_Init+0x74>)
 8001134:	f005 fbcc 	bl	80068d0 <HAL_SPI_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 fbbd 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200003f0 	.word	0x200003f0
 800114c:	40013000 	.word	0x40013000

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09a      	sub	sp, #104	; 0x68
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	222c      	movs	r2, #44	; 0x2c
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f007 ff44 	bl	8009018 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001192:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <MX_TIM1_Init+0x154>)
 8001194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_TIM1_Init+0x150>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011bc:	4838      	ldr	r0, [pc, #224]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011be:	f005 fc32 	bl	8006a26 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 fb78 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d6:	4619      	mov	r1, r3
 80011d8:	4831      	ldr	r0, [pc, #196]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011da:	f006 f871 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011e4:	f000 fb6a 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e8:	482d      	ldr	r0, [pc, #180]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011ea:	f005 fcdd 	bl	8006ba8 <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011f4:	f000 fb62 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001204:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001208:	4619      	mov	r1, r3
 800120a:	4825      	ldr	r0, [pc, #148]	; (80012a0 <MX_TIM1_Init+0x150>)
 800120c:	f006 fd70 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001216:	f000 fb51 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	; 0x60
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001240:	f005 ff2a 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800124a:	f000 fb37 	bl	80018bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001284:	f006 fdb4 	bl	8007df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800128e:	f000 fb15 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001292:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001294:	f001 fb90 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 8001298:	bf00      	nop
 800129a:	3768      	adds	r7, #104	; 0x68
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000454 	.word	0x20000454
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM2_Init+0x98>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80012d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_TIM2_Init+0x98>)
 80012de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_TIM2_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM2_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_TIM2_Init+0x98>)
 80012f2:	f005 fb98 	bl	8006a26 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012fc:	f000 fade 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM2_Init+0x98>)
 800130e:	f005 ffd7 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001318:	f000 fad0 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM2_Init+0x98>)
 800132a:	f006 fce1 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001334:	f000 fac2 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200004a0 	.word	0x200004a0

08001344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_TIM3_Init+0x128>)
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <MX_TIM3_Init+0x12c>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <MX_TIM3_Init+0x128>)
 800137e:	222f      	movs	r2, #47	; 0x2f
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM3_Init+0x128>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <MX_TIM3_Init+0x128>)
 800138a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <MX_TIM3_Init+0x128>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <MX_TIM3_Init+0x128>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139c:	4833      	ldr	r0, [pc, #204]	; (800146c <MX_TIM3_Init+0x128>)
 800139e:	f005 fb42 	bl	8006a26 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013a8:	f000 fa88 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	4619      	mov	r1, r3
 80013b8:	482c      	ldr	r0, [pc, #176]	; (800146c <MX_TIM3_Init+0x128>)
 80013ba:	f005 ff81 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013c4:	f000 fa7a 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c8:	4828      	ldr	r0, [pc, #160]	; (800146c <MX_TIM3_Init+0x128>)
 80013ca:	f005 fbed 	bl	8006ba8 <HAL_TIM_PWM_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013d4:	f000 fa72 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4821      	ldr	r0, [pc, #132]	; (800146c <MX_TIM3_Init+0x128>)
 80013e8:	f006 fc82 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013f2:	f000 fa63 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2360      	movs	r3, #96	; 0x60
 80013f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <MX_TIM3_Init+0x128>)
 800140e:	f005 fe43 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001418:	f000 fa50 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	2204      	movs	r2, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <MX_TIM3_Init+0x128>)
 8001424:	f005 fe38 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800142e:	f000 fa45 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	2208      	movs	r2, #8
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM3_Init+0x128>)
 800143a:	f005 fe2d 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001444:	f000 fa3a 	bl	80018bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	220c      	movs	r2, #12
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM3_Init+0x128>)
 8001450:	f005 fe22 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800145a:	f000 fa2f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM3_Init+0x128>)
 8001460:	f001 faaa 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200004ec 	.word	0x200004ec
 8001470:	40000400 	.word	0x40000400

08001474 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_TIM4_Init+0xac>)
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <MX_TIM4_Init+0xb0>)
 800149c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_TIM4_Init+0xac>)
 80014a0:	222f      	movs	r2, #47	; 0x2f
 80014a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_TIM4_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_TIM4_Init+0xac>)
 80014ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_TIM4_Init+0xac>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_TIM4_Init+0xac>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <MX_TIM4_Init+0xac>)
 80014c0:	f005 fb72 	bl	8006ba8 <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80014ca:	f000 f9f7 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MX_TIM4_Init+0xac>)
 80014de:	f006 fc07 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80014e8:	f000 f9e8 	bl	80018bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_TIM4_Init+0xac>)
 8001504:	f005 fdc8 	bl	8007098 <HAL_TIM_PWM_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800150e:	f000 f9d5 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <MX_TIM4_Init+0xac>)
 8001514:	f001 fa50 	bl	80029b8 <HAL_TIM_MspPostInit>

}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	; 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000538 	.word	0x20000538
 8001524:	40000800 	.word	0x40000800

08001528 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <MX_TIM8_Init+0xa4>)
 800154a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_TIM8_Init+0xa0>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM8_Init+0xa0>)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_TIM8_Init+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001572:	4815      	ldr	r0, [pc, #84]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001574:	f005 fa57 	bl	8006a26 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800157e:	f000 f99d 	bl	80018bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	480e      	ldr	r0, [pc, #56]	; (80015c8 <MX_TIM8_Init+0xa0>)
 8001590:	f005 fe96 	bl	80072c0 <HAL_TIM_ConfigClockSource>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800159a:	f000 f98f 	bl	80018bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4806      	ldr	r0, [pc, #24]	; (80015c8 <MX_TIM8_Init+0xa0>)
 80015b0:	f006 fb9e 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015ba:	f000 f97f 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000584 	.word	0x20000584
 80015cc:	40013400 	.word	0x40013400

080015d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015d6:	4a15      	ldr	r2, [pc, #84]	; (800162c <MX_USART3_UART_Init+0x5c>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART3_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART3_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART3_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART3_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART3_UART_Init+0x58>)
 8001614:	f006 fc88 	bl	8007f28 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800161e:	f000 f94d 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200005d0 	.word	0x200005d0
 800162c:	40004800 	.word	0x40004800

08001630 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <MX_USB_PCD_Init+0x40>)
 8001638:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800163c:	2208      	movs	r2, #8
 800163e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001642:	2202      	movs	r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001648:	2202      	movs	r2, #2
 800164a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USB_PCD_Init+0x3c>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_USB_PCD_Init+0x3c>)
 800165a:	f003 fc43 	bl	8004ee4 <HAL_PCD_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001664:	f000 f92a 	bl	80018bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000658 	.word	0x20000658
 8001670:	40005c00 	.word	0x40005c00

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168a:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <MX_GPIO_Init+0x230>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4a85      	ldr	r2, [pc, #532]	; (80018a4 <MX_GPIO_Init+0x230>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	6153      	str	r3, [r2, #20]
 8001696:	4b83      	ldr	r3, [pc, #524]	; (80018a4 <MX_GPIO_Init+0x230>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	4a7f      	ldr	r2, [pc, #508]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ac:	6153      	str	r3, [r2, #20]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a79      	ldr	r2, [pc, #484]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b74      	ldr	r3, [pc, #464]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a73      	ldr	r2, [pc, #460]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b71      	ldr	r3, [pc, #452]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a6d      	ldr	r2, [pc, #436]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <MX_GPIO_Init+0x230>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	4b68      	ldr	r3, [pc, #416]	; (80018a4 <MX_GPIO_Init+0x230>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a67      	ldr	r2, [pc, #412]	; (80018a4 <MX_GPIO_Init+0x230>)
 8001708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b65      	ldr	r3, [pc, #404]	; (80018a4 <MX_GPIO_Init+0x230>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800171a:	2200      	movs	r2, #0
 800171c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001720:	4861      	ldr	r0, [pc, #388]	; (80018a8 <MX_GPIO_Init+0x234>)
 8001722:	f003 fa6f 	bl	8004c04 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2114      	movs	r1, #20
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f003 fa69 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2150      	movs	r1, #80	; 0x50
 8001736:	485d      	ldr	r0, [pc, #372]	; (80018ac <MX_GPIO_Init+0x238>)
 8001738:	f003 fa64 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	f242 0105 	movw	r1, #8197	; 0x2005
 8001742:	485b      	ldr	r0, [pc, #364]	; (80018b0 <MX_GPIO_Init+0x23c>)
 8001744:	f003 fa5e 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 800174e:	4859      	ldr	r0, [pc, #356]	; (80018b4 <MX_GPIO_Init+0x240>)
 8001750:	f003 fa58 	bl	8004c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 8001754:	2324      	movs	r3, #36	; 0x24
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001758:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	484f      	ldr	r0, [pc, #316]	; (80018a8 <MX_GPIO_Init+0x234>)
 800176a:	f003 f8d1 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800176e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001772:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4848      	ldr	r0, [pc, #288]	; (80018a8 <MX_GPIO_Init+0x234>)
 8001788:	f003 f8c2 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179a:	f107 031c 	add.w	r3, r7, #28
 800179e:	4619      	mov	r1, r3
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <MX_GPIO_Init+0x238>)
 80017a2:	f003 f8b5 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f003 f8a8 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f003 f89a 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80017dc:	2314      	movs	r3, #20
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f6:	f003 f88b 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017fa:	2310      	movs	r3, #16
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001804:	2301      	movs	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	4619      	mov	r1, r3
 800180e:	482a      	ldr	r0, [pc, #168]	; (80018b8 <MX_GPIO_Init+0x244>)
 8001810:	f003 f87e 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001814:	2350      	movs	r3, #80	; 0x50
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4820      	ldr	r0, [pc, #128]	; (80018ac <MX_GPIO_Init+0x238>)
 800182c:	f003 f870 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001830:	f242 0305 	movw	r3, #8197	; 0x2005
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4819      	ldr	r0, [pc, #100]	; (80018b0 <MX_GPIO_Init+0x23c>)
 800184a:	f003 f861 	bl	8004910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 800184e:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_GPIO_Init+0x240>)
 8001868:	f003 f852 	bl	8004910 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2006      	movs	r0, #6
 8001872:	f002 ffa0 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001876:	2006      	movs	r0, #6
 8001878:	f002 ffb9 	bl	80047ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	2007      	movs	r0, #7
 8001882:	f002 ff98 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001886:	2007      	movs	r0, #7
 8001888:	f002 ffb1 	bl	80047ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200a      	movs	r0, #10
 8001892:	f002 ff90 	bl	80047b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001896:	200a      	movs	r0, #10
 8001898:	f002 ffa9 	bl	80047ee <HAL_NVIC_EnableIRQ>

}
 800189c:	bf00      	nop
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	48001000 	.word	0x48001000
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000c00 	.word	0x48000c00
 80018b8:	48001400 	.word	0x48001400

080018bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c0:	b672      	cpsid	i
}
 80018c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <Error_Handler+0x8>
	...

080018c8 <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim1; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_1;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]

//  volume=5;
  if (pwm_freq == 0 || pwm_freq > 20000)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <PWM_Change_Tone+0x1c>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d937      	bls.n	8001954 <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <PWM_Change_Tone+0x168>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <PWM_Change_Tone+0x30>
 80018ec:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2200      	movs	r2, #0
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34
 80018f6:	e097      	b.n	8001a28 <PWM_Change_Tone+0x160>
 80018f8:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <PWM_Change_Tone+0x168>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d105      	bne.n	800190c <PWM_Change_Tone+0x44>
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <PWM_Change_Tone+0x16c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	6393      	str	r3, [r2, #56]	; 0x38
 800190a:	e08d      	b.n	8001a28 <PWM_Change_Tone+0x160>
 800190c:	4b48      	ldr	r3, [pc, #288]	; (8001a30 <PWM_Change_Tone+0x168>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d105      	bne.n	8001920 <PWM_Change_Tone+0x58>
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <PWM_Change_Tone+0x16c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800191e:	e083      	b.n	8001a28 <PWM_Change_Tone+0x160>
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <PWM_Change_Tone+0x168>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d105      	bne.n	8001934 <PWM_Change_Tone+0x6c>
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <PWM_Change_Tone+0x16c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	e079      	b.n	8001a28 <PWM_Change_Tone+0x160>
 8001934:	4b3e      	ldr	r3, [pc, #248]	; (8001a30 <PWM_Change_Tone+0x168>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d105      	bne.n	8001948 <PWM_Change_Tone+0x80>
 800193c:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <PWM_Change_Tone+0x16c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	e06f      	b.n	8001a28 <PWM_Change_Tone+0x160>
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <PWM_Change_Tone+0x16c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	2300      	movs	r3, #0
 8001950:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001952:	e069      	b.n	8001a28 <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001954:	f004 fd52 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 8001958:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4a35      	ldr	r2, [pc, #212]	; (8001a38 <PWM_Change_Tone+0x170>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0b9b      	lsrs	r3, r3, #14
 800196a:	b29b      	uxth	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001970:	8b7b      	ldrh	r3, [r7, #26]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
 8001978:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a2b      	ldr	r2, [pc, #172]	; (8001a3c <PWM_Change_Tone+0x174>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	09db      	lsrs	r3, r3, #7
 8001994:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 8001996:	8b7b      	ldrh	r3, [r7, #26]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <PWM_Change_Tone+0x16c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	3a01      	subs	r2, #1
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 80019ae:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <PWM_Change_Tone+0x168>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <PWM_Change_Tone+0x104>
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80019ca:	e02d      	b.n	8001a28 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <PWM_Change_Tone+0x168>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d105      	bne.n	80019e0 <PWM_Change_Tone+0x118>
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80019de:	e023      	b.n	8001a28 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <PWM_Change_Tone+0x168>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d105      	bne.n	80019f4 <PWM_Change_Tone+0x12c>
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80019f2:	e019      	b.n	8001a28 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <PWM_Change_Tone+0x168>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d105      	bne.n	8001a08 <PWM_Change_Tone+0x140>
 80019fc:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <PWM_Change_Tone+0x16c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001a06:	e00f      	b.n	8001a28 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a08:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <PWM_Change_Tone+0x168>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d105      	bne.n	8001a1c <PWM_Change_Tone+0x154>
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <PWM_Change_Tone+0x16c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001a1a:	e005      	b.n	8001a28 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <PWM_Change_Tone+0x16c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001a26:	e7ff      	b.n	8001a28 <PWM_Change_Tone+0x160>
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000948 	.word	0x20000948
 8001a34:	2000009c 	.word	0x2000009c
 8001a38:	45e7b273 	.word	0x45e7b273
 8001a3c:	10624dd3 	.word	0x10624dd3

08001a40 <turn_on_leds>:

int alert = 0;
uint32_t LEDs_power;

void turn_on_leds(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	// Green 2 PC7

	// white 3 PE4

	// red 4 PC9
	if(alert == 0){
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <turn_on_leds+0x144>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f040 8099 	bne.w	8001b80 <turn_on_leds+0x140>
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);

		if(numbers[1] == 1){
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <turn_on_leds+0x148>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d117      	bne.n	8001a86 <turn_on_leds+0x46>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001a56:	4b4d      	ldr	r3, [pc, #308]	; (8001b8c <turn_on_leds+0x14c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <turn_on_leds+0x150>)
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001a60:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <turn_on_leds+0x14c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001a68:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <turn_on_leds+0x154>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001a70:	4b46      	ldr	r3, [pc, #280]	; (8001b8c <turn_on_leds+0x14c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a7e:	4846      	ldr	r0, [pc, #280]	; (8001b98 <turn_on_leds+0x158>)
 8001a80:	f003 f8c0 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
		}
	}
}
 8001a84:	e07c      	b.n	8001b80 <turn_on_leds+0x140>
		}else if(numbers[1] == 2){
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <turn_on_leds+0x148>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d11e      	bne.n	8001acc <turn_on_leds+0x8c>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <turn_on_leds+0x14c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a3f      	ldr	r2, [pc, #252]	; (8001b90 <turn_on_leds+0x150>)
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001a98:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <turn_on_leds+0x14c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <turn_on_leds+0x150>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <turn_on_leds+0x154>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <turn_on_leds+0x14c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab8:	4837      	ldr	r0, [pc, #220]	; (8001b98 <turn_on_leds+0x158>)
 8001aba:	f003 f8a3 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ac4:	4834      	ldr	r0, [pc, #208]	; (8001b98 <turn_on_leds+0x158>)
 8001ac6:	f003 f89d 	bl	8004c04 <HAL_GPIO_WritePin>
}
 8001aca:	e059      	b.n	8001b80 <turn_on_leds+0x140>
		}else if(numbers[1] == 3){
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <turn_on_leds+0x148>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d125      	bne.n	8001b20 <turn_on_leds+0xe0>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <turn_on_leds+0x14c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <turn_on_leds+0x150>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <turn_on_leds+0x14c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <turn_on_leds+0x150>)
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <turn_on_leds+0x154>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a28      	ldr	r2, [pc, #160]	; (8001b90 <turn_on_leds+0x150>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <turn_on_leds+0x14c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2200      	movs	r2, #0
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001afa:	2201      	movs	r2, #1
 8001afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b00:	4825      	ldr	r0, [pc, #148]	; (8001b98 <turn_on_leds+0x158>)
 8001b02:	f003 f87f 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0c:	4822      	ldr	r0, [pc, #136]	; (8001b98 <turn_on_leds+0x158>)
 8001b0e:	f003 f879 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	481f      	ldr	r0, [pc, #124]	; (8001b98 <turn_on_leds+0x158>)
 8001b1a:	f003 f873 	bl	8004c04 <HAL_GPIO_WritePin>
}
 8001b1e:	e02f      	b.n	8001b80 <turn_on_leds+0x140>
		}else if(numbers[1] == 4){
 8001b20:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <turn_on_leds+0x148>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d12b      	bne.n	8001b80 <turn_on_leds+0x140>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <turn_on_leds+0x14c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <turn_on_leds+0x150>)
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <turn_on_leds+0x14c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <turn_on_leds+0x150>)
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <turn_on_leds+0x154>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <turn_on_leds+0x150>)
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LEDs_power);
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <turn_on_leds+0x14c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <turn_on_leds+0x150>)
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b56:	4810      	ldr	r0, [pc, #64]	; (8001b98 <turn_on_leds+0x158>)
 8001b58:	f003 f854 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b62:	480d      	ldr	r0, [pc, #52]	; (8001b98 <turn_on_leds+0x158>)
 8001b64:	f003 f84e 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b6e:	480a      	ldr	r0, [pc, #40]	; (8001b98 <turn_on_leds+0x158>)
 8001b70:	f003 f848 	bl	8004c04 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <turn_on_leds+0x158>)
 8001b7c:	f003 f842 	bl	8004c04 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000094c 	.word	0x2000094c
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	200004ec 	.word	0x200004ec
 8001b90:	20000950 	.word	0x20000950
 8001b94:	20000538 	.word	0x20000538
 8001b98:	48001000 	.word	0x48001000

08001b9c <turn_off_leds>:

void turn_off_leds(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	// Orange(yellow)1 PB4
	// Green 2 PC7
	// white 3 PE4
	// red 4 PC9

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <turn_off_leds+0x58>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <turn_off_leds+0x58>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <turn_off_leds+0x5c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <turn_off_leds+0x58>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <turn_off_leds+0x60>)
 8001bc8:	f003 f81c 	bl	8004c04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd2:	480a      	ldr	r0, [pc, #40]	; (8001bfc <turn_off_leds+0x60>)
 8001bd4:	f003 f816 	bl	8004c04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4807      	ldr	r0, [pc, #28]	; (8001bfc <turn_off_leds+0x60>)
 8001be0:	f003 f810 	bl	8004c04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <turn_off_leds+0x60>)
 8001bec:	f003 f80a 	bl	8004c04 <HAL_GPIO_WritePin>
}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200004ec 	.word	0x200004ec
 8001bf8:	20000538 	.word	0x20000538
 8001bfc:	48001000 	.word	0x48001000

08001c00 <sin_signal>:
void sin_signal(int counter){
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	int max = 10000;
 8001c08:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c0c:	60fb      	str	r3, [r7, #12]
	uint32_t x = (uint32_t) (max * sin(counter * (M_PI  / 180)) + 10000);
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f7fe fc88 	bl	8000524 <__aeabi_i2d>
 8001c14:	4604      	mov	r4, r0
 8001c16:	460d      	mov	r5, r1
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a318      	add	r3, pc, #96	; (adr r3, 8001c80 <sin_signal+0x80>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	ec43 2b17 	vmov	d7, r2, r3
 8001c30:	eeb0 0a47 	vmov.f32	s0, s14
 8001c34:	eef0 0a67 	vmov.f32	s1, s15
 8001c38:	f00b fe66 	bl	800d908 <sin>
 8001c3c:	ec53 2b10 	vmov	r2, r3, d0
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fcd8 	bl	80005f8 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	a30d      	add	r3, pc, #52	; (adr r3, 8001c88 <sin_signal+0x88>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fb19 	bl	800028c <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffa1 	bl	8000ba8 <__aeabi_d2uiz>
 8001c66:	4603      	mov	r3, r0
 8001c68:	60bb      	str	r3, [r7, #8]
	PWM_Change_Tone(x, 1000);
 8001c6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	f7ff fe2a 	bl	80018c8 <PWM_Change_Tone>
//	printf("%f   %d\n", x, counter);

}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7c:	f3af 8000 	nop.w
 8001c80:	a2529d39 	.word	0xa2529d39
 8001c84:	3f91df46 	.word	0x3f91df46
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40c38800 	.word	0x40c38800

08001c90 <square_signal>:

void square_signal(int counter){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b5f      	cmp	r3, #95	; 0x5f
 8001c9c:	dd0c      	ble.n	8001cb8 <square_signal+0x28>
		counter = counter % 96;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <square_signal+0x64>)
 8001ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca6:	1119      	asrs	r1, r3, #4
 8001ca8:	17d3      	asrs	r3, r2, #31
 8001caa:	1ac9      	subs	r1, r1, r3
 8001cac:	460b      	mov	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	607b      	str	r3, [r7, #4]

	}

	if (counter < 48) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b2f      	cmp	r3, #47	; 0x2f
 8001cbc:	dc08      	bgt.n	8001cd0 <square_signal+0x40>
		uint32_t x = 20000;
 8001cbe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cc2:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 8001cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc8:	68b8      	ldr	r0, [r7, #8]
 8001cca:	f7ff fdfd 	bl	80018c8 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8001cce:	e00d      	b.n	8001cec <square_signal+0x5c>
	else if (counter >= 48 && counter < 96){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b2f      	cmp	r3, #47	; 0x2f
 8001cd4:	dd0a      	ble.n	8001cec <square_signal+0x5c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b5f      	cmp	r3, #95	; 0x5f
 8001cda:	dc07      	bgt.n	8001cec <square_signal+0x5c>
		uint32_t x = 5000;
 8001cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ce0:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 8001ce2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f7ff fdee 	bl	80018c8 <PWM_Change_Tone>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2aaaaaab 	.word	0x2aaaaaab

08001cf8 <triangle_signal>:

void triangle_signal(int counter){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b5f      	cmp	r3, #95	; 0x5f
 8001d04:	dd0c      	ble.n	8001d20 <triangle_signal+0x28>
		counter = counter % 96;
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <triangle_signal+0x68>)
 8001d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d0e:	1119      	asrs	r1, r3, #4
 8001d10:	17d3      	asrs	r3, r2, #31
 8001d12:	1ac9      	subs	r1, r1, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	015b      	lsls	r3, r3, #5
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	607b      	str	r3, [r7, #4]
	}

	if (counter < 80) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b4f      	cmp	r3, #79	; 0x4f
 8001d24:	dc0a      	bgt.n	8001d3c <triangle_signal+0x44>
		uint32_t x = 250 * counter;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	22fa      	movs	r2, #250	; 0xfa
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 8001d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d34:	68b8      	ldr	r0, [r7, #8]
 8001d36:	f7ff fdc7 	bl	80018c8 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8001d3a:	e00c      	b.n	8001d56 <triangle_signal+0x5e>
	else if (counter >= 80 && counter < 96){
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b4f      	cmp	r3, #79	; 0x4f
 8001d40:	dd09      	ble.n	8001d56 <triangle_signal+0x5e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b5f      	cmp	r3, #95	; 0x5f
 8001d46:	dc06      	bgt.n	8001d56 <triangle_signal+0x5e>
		uint32_t x = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 8001d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff fdb9 	bl	80018c8 <PWM_Change_Tone>
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2aaaaaab 	.word	0x2aaaaaab

08001d64 <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b09      	cmp	r3, #9
 8001d70:	d832      	bhi.n	8001dd8 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001d74:	6a18      	ldr	r0, [r3, #32]
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001d78:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f002 ff3d 	bl	8004c04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001d8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001d90:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f002 ff30 	bl	8004c04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001da6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001daa:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	f002 ff23 	bl	8004c04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001dc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <seven_segment_display_decimal+0x7c>)
 8001dc4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f002 ff16 	bl	8004c04 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200000a0 	.word	0x200000a0

08001de4 <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	e00f      	b.n	8001e10 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <seven_segment_deactivate_digits+0x3c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <seven_segment_deactivate_digits+0x3c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	889b      	ldrh	r3, [r3, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	f002 fefd 	bl	8004c04 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	ddec      	ble.n	8001df0 <seven_segment_deactivate_digits+0xc>
    }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200000a0 	.word	0x200000a0

08001e24 <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d834      	bhi.n	8001e9c <seven_segment_activate_digit+0x78>
//		}
//		else if (d != (2-state)){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}

		if(d == state && (HAL_GetTick() - last_time_on) > 40){
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <seven_segment_activate_digit+0x80>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d11b      	bne.n	8001e76 <seven_segment_activate_digit+0x52>
 8001e3e:	f001 f8db 	bl	8002ff8 <HAL_GetTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <seven_segment_activate_digit+0x84>)
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	2b28      	cmp	r3, #40	; 0x28
 8001e4c:	d913      	bls.n	8001e76 <seven_segment_activate_digit+0x52>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <seven_segment_activate_digit+0x88>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001e56:	4915      	ldr	r1, [pc, #84]	; (8001eac <seven_segment_activate_digit+0x88>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f002 fee6 	bl	8004c34 <HAL_GPIO_TogglePin>
			last_time_on = HAL_GetTick();
 8001e68:	f001 f8c6 	bl	8002ff8 <HAL_GetTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <seven_segment_activate_digit+0x84>)
 8001e72:	601a      	str	r2, [r3, #0]
		}
		else if (d != state){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
		}
    }
}
 8001e74:	e012      	b.n	8001e9c <seven_segment_activate_digit+0x78>
		else if (d != state){
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <seven_segment_activate_digit+0x80>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00c      	beq.n	8001e9c <seven_segment_activate_digit+0x78>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <seven_segment_activate_digit+0x88>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <seven_segment_activate_digit+0x88>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	889b      	ldrh	r3, [r3, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	4619      	mov	r1, r3
 8001e98:	f002 feb4 	bl	8004c04 <HAL_GPIO_WritePin>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000944 	.word	0x20000944
 8001ea8:	20000954 	.word	0x20000954
 8001eac:	200000a0 	.word	0x200000a0

08001eb0 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i <= 3; ++i) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e00d      	b.n	8001eda <seven_segment_set_num+0x2a>
            seven_segment.digits[i] = num[i];
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <seven_segment_set_num+0x40>)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3310      	adds	r3, #16
 8001ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i <= 3; ++i) {
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d9ee      	bls.n	8001ebe <seven_segment_set_num+0xe>
		}
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	200000a0 	.word	0x200000a0

08001ef4 <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
    if (HAL_GetTick() - last_time_tmp > 5) {
 8001ef8:	f001 f87e 	bl	8002ff8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <seven_segment_refresh+0x9c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d940      	bls.n	8001f8a <seven_segment_refresh+0x96>
        seven_segment_deactivate_digits();
 8001f08:	f7ff ff6c 	bl	8001de4 <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff87 	bl	8001e24 <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <seven_segment_refresh+0xa4>)
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff1e 	bl	8001d64 <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 2) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 0)){
 8001f28:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <seven_segment_refresh+0xa8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d103      	bne.n	8001f38 <seven_segment_refresh+0x44>
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d00f      	beq.n	8001f58 <seven_segment_refresh+0x64>
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <seven_segment_refresh+0xa8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d103      	bne.n	8001f48 <seven_segment_refresh+0x54>
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d007      	beq.n	8001f58 <seven_segment_refresh+0x64>
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <seven_segment_refresh+0xa8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <seven_segment_refresh+0x72>
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d106      	bne.n	8001f66 <seven_segment_refresh+0x72>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f60:	f002 fe50 	bl	8004c04 <HAL_GPIO_WritePin>
 8001f64:	e005      	b.n	8001f72 <seven_segment_refresh+0x7e>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2104      	movs	r1, #4
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f002 fe49 	bl	8004c04 <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 4; //active each 4 segments
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <seven_segment_refresh+0xa0>)
 8001f7e:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 8001f80:	f001 f83a 	bl	8002ff8 <HAL_GetTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a02      	ldr	r2, [pc, #8]	; (8001f90 <seven_segment_refresh+0x9c>)
 8001f88:	6013      	str	r3, [r2, #0]
    }
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000974 	.word	0x20000974
 8001f94:	20000978 	.word	0x20000978
 8001f98:	200000a0 	.word	0x200000a0
 8001f9c:	20000944 	.word	0x20000944

08001fa0 <programInit>:

void programInit() {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    seven_segment_set_num(numbers);
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <programInit+0x14>)
 8001fa6:	f7ff ff83 	bl	8001eb0 <seven_segment_set_num>
    event();
 8001faa:	f000 f80b 	bl	8001fc4 <event>
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <programLoop>:

void programLoop() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 8001fbc:	f7ff ff9a 	bl	8001ef4 <seven_segment_refresh>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <event>:
		{.port=GPIOE, .pin=GPIO_PIN_14}, //6: D8
		{.port=GPIOE, .pin=GPIO_PIN_15}, //7: D6
		{.port=GPIOE, .pin=GPIO_PIN_8},  //8: D4
}};

void event(){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
	int a=numbers[2];
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <event+0x24>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	60fb      	str	r3, [r7, #12]
	int b=numbers[1];
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <event+0x24>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60bb      	str	r3, [r7, #8]
	int c=numbers[0];
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <event+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	607b      	str	r3, [r7, #4]
	seven_segment_deactivate_digits();
 8001fdc:	f7ff ff02 	bl	8001de4 <seven_segment_deactivate_digits>

	//TODO: write event there

}
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000000 	.word	0x20000000

08001fec <setNumber>:
		numbers[state]=digit;
	}
	seven_segment_set_num(numbers);
}

void setNumber(int number){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	2300      	movs	r3, #0
 8002002:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f242 720f 	movw	r2, #9999	; 0x270f
 800200a:	4293      	cmp	r3, r2
 800200c:	dc5b      	bgt.n	80020c6 <setNumber+0xda>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db58      	blt.n	80020c6 <setNumber+0xda>
		a = number % 10;
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <setNumber+0xe4>)
 8002018:	fb83 1302 	smull	r1, r3, r3, r2
 800201c:	1099      	asrs	r1, r3, #2
 800201e:	17d3      	asrs	r3, r2, #31
 8002020:	1ac9      	subs	r1, r1, r3
 8002022:	460b      	mov	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <setNumber+0xe4>)
 8002032:	fb82 1203 	smull	r1, r2, r2, r3
 8002036:	1092      	asrs	r2, r2, #2
 8002038:	17db      	asrs	r3, r3, #31
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	607b      	str	r3, [r7, #4]
		b = number % 10;
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <setNumber+0xe4>)
 8002042:	fb83 1302 	smull	r1, r3, r3, r2
 8002046:	1099      	asrs	r1, r3, #2
 8002048:	17d3      	asrs	r3, r2, #31
 800204a:	1ac9      	subs	r1, r1, r3
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	623b      	str	r3, [r7, #32]
		number /= 10;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <setNumber+0xe4>)
 800205c:	fb82 1203 	smull	r1, r2, r2, r3
 8002060:	1092      	asrs	r2, r2, #2
 8002062:	17db      	asrs	r3, r3, #31
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <setNumber+0xe4>)
 800206c:	fb83 1302 	smull	r1, r3, r3, r2
 8002070:	1099      	asrs	r1, r3, #2
 8002072:	17d3      	asrs	r3, r2, #31
 8002074:	1ac9      	subs	r1, r1, r3
 8002076:	460b      	mov	r3, r1
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]
		number /= 10;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <setNumber+0xe4>)
 8002086:	fb82 1203 	smull	r1, r2, r2, r3
 800208a:	1092      	asrs	r2, r2, #2
 800208c:	17db      	asrs	r3, r3, #31
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	607b      	str	r3, [r7, #4]
		d = number % 10;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <setNumber+0xe4>)
 8002096:	fb83 1302 	smull	r1, r3, r3, r2
 800209a:	1099      	asrs	r1, r3, #2
 800209c:	17d3      	asrs	r3, r2, #31
 800209e:	1ac9      	subs	r1, r1, r3
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]

//		setSegment(3,a,0);
//		setSegment(2,b,0);
//		setSegment(1,c,0);
//		setSegment(0,d,0);
		int numbers2[4]={d,c,b,a};
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fef5 	bl	8001eb0 <seven_segment_set_num>
	}

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	66666667 	.word	0x66666667

080020d4 <HAL_GPIO_EXTI_Callback>:

int last_time2 = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_4) { //Left button (Decrease Number) ==> PF4
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d169      	bne.n	80021b8 <HAL_GPIO_EXTI_Callback+0xe4>
			if (HAL_GetTick() - last_time2 > 400){
 80020e4:	f000 ff88 	bl	8002ff8 <HAL_GetTick>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a87      	ldr	r2, [pc, #540]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80020f4:	f240 8101 	bls.w	80022fa <HAL_GPIO_EXTI_Callback+0x226>
				if (state == 0){
 80020f8:	4b84      	ldr	r3, [pc, #528]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d119      	bne.n	8002134 <HAL_GPIO_EXTI_Callback+0x60>
					numbers[state]=(numbers[state] - 1);
 8002100:	4b82      	ldr	r3, [pc, #520]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a82      	ldr	r2, [pc, #520]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002106:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800210a:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3a01      	subs	r2, #1
 8002110:	497f      	ldr	r1, [pc, #508]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (numbers[state] == -1)
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7d      	ldr	r2, [pc, #500]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d13f      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>
						numbers[state]=9;
 8002126:	4b79      	ldr	r3, [pc, #484]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a79      	ldr	r2, [pc, #484]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800212c:	2109      	movs	r1, #9
 800212e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002132:	e038      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>

				}else if (state == 1){
 8002134:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d118      	bne.n	800216e <HAL_GPIO_EXTI_Callback+0x9a>
					numbers[state]=(numbers[state] - 1);
 800213c:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002142:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002146:	4b71      	ldr	r3, [pc, #452]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3a01      	subs	r2, #1
 800214c:	4970      	ldr	r1, [pc, #448]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 8002152:	4b6e      	ldr	r3, [pc, #440]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d122      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>
							numbers[state]=4;
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002166:	2104      	movs	r1, #4
 8002168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800216c:	e01b      	b.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>

				}else if (state == 2){
 800216e:	4b67      	ldr	r3, [pc, #412]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d117      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>
					numbers[state]=(numbers[state] - 1);
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800217c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002180:	4b62      	ldr	r3, [pc, #392]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3a01      	subs	r2, #1
 8002186:	4962      	ldr	r1, [pc, #392]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0xd2>
							numbers[state]=3;
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 80021a0:	2103      	movs	r1, #3
 80021a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				last_time2=HAL_GetTick();
 80021a6:	f000 ff27 	bl	8002ff8 <HAL_GetTick>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b56      	ldr	r3, [pc, #344]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80021b0:	601a      	str	r2, [r3, #0]
				event();
 80021b2:	f7ff ff07 	bl	8001fc4 <event>
 80021b6:	e0a0      	b.n	80022fa <HAL_GPIO_EXTI_Callback+0x226>
			}
		}

		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button (Increase Number) ==> PA1
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d17d      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0x1e6>
			if (HAL_GetTick() - last_time2 > 400){
 80021be:	f000 ff1b 	bl	8002ff8 <HAL_GetTick>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80021ce:	f240 8094 	bls.w	80022fa <HAL_GPIO_EXTI_Callback+0x226>
				if (state == 0){
 80021d2:	4b4e      	ldr	r3, [pc, #312]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_GPIO_EXTI_Callback+0x134>
					numbers[state]=(numbers[state] + 1) % 10;
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a4c      	ldr	r2, [pc, #304]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	1c59      	adds	r1, r3, #1
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_GPIO_EXTI_Callback+0x240>)
 80021ec:	fb83 2301 	smull	r2, r3, r3, r1
 80021f0:	109a      	asrs	r2, r3, #2
 80021f2:	17cb      	asrs	r3, r1, #31
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	1aca      	subs	r2, r1, r3
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002202:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8002206:	e04f      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x1d4>

				}else if (state == 1){
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d125      	bne.n	800225c <HAL_GPIO_EXTI_Callback+0x188>
					numbers[state]=(numbers[state] + 1) % 5;
 8002210:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_GPIO_EXTI_Callback+0x240>)
 8002222:	fb83 2301 	smull	r2, r3, r3, r1
 8002226:	105a      	asrs	r2, r3, #1
 8002228:	17cb      	asrs	r3, r1, #31
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	1aca      	subs	r2, r1, r3
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002236:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12f      	bne.n	80022a8 <HAL_GPIO_EXTI_Callback+0x1d4>
						numbers[state]++;
 8002248:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800224e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002252:	3201      	adds	r2, #1
 8002254:	492e      	ldr	r1, [pc, #184]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800225a:	e025      	b.n	80022a8 <HAL_GPIO_EXTI_Callback+0x1d4>

				}else if (state == 2){
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d121      	bne.n	80022a8 <HAL_GPIO_EXTI_Callback+0x1d4>
					numbers[state]=(numbers[state] + 1) % 4;
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	3301      	adds	r3, #1
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	4259      	negs	r1, r3
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	f001 0103 	and.w	r1, r1, #3
 800227e:	bf58      	it	pl
 8002280:	424b      	negpl	r3, r1
 8002282:	4923      	ldr	r1, [pc, #140]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002284:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					if (numbers[state] == 0)
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a20      	ldr	r2, [pc, #128]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_GPIO_EXTI_Callback+0x1d4>
						numbers[state]++;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 800229c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022a0:	3201      	adds	r2, #1
 80022a2:	491b      	ldr	r1, [pc, #108]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 80022a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				last_time2=HAL_GetTick();
 80022a8:	f000 fea6 	bl	8002ff8 <HAL_GetTick>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80022b2:	601a      	str	r2, [r3, #0]
				event();
 80022b4:	f7ff fe86 	bl	8001fc4 <event>
 80022b8:	e01f      	b.n	80022fa <HAL_GPIO_EXTI_Callback+0x226>
			}
		}

		else if (GPIO_Pin == GPIO_PIN_0) { //Right button (Next Number)==> PC0
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d11c      	bne.n	80022fa <HAL_GPIO_EXTI_Callback+0x226>
			if (HAL_GetTick() - last_time2 > 400){
 80022c0:	f000 fe9a 	bl	8002ff8 <HAL_GetTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80022d0:	d913      	bls.n	80022fa <HAL_GPIO_EXTI_Callback+0x226>
				state = (state + 1) % 3;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_GPIO_EXTI_Callback+0x244>)
 80022da:	fb83 3201 	smull	r3, r2, r3, r1
 80022de:	17cb      	asrs	r3, r1, #31
 80022e0:	1ad2      	subs	r2, r2, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	1aca      	subs	r2, r1, r3
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_GPIO_EXTI_Callback+0x238>)
 80022ec:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 80022ee:	f000 fe83 	bl	8002ff8 <HAL_GetTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <HAL_GPIO_EXTI_Callback+0x234>)
 80022f8:	601a      	str	r2, [r3, #0]
				}
			}
		seven_segment_set_num(numbers);
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_GPIO_EXTI_Callback+0x23c>)
 80022fc:	f7ff fdd8 	bl	8001eb0 <seven_segment_set_num>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000958 	.word	0x20000958
 800230c:	20000944 	.word	0x20000944
 8002310:	20000000 	.word	0x20000000
 8002314:	66666667 	.word	0x66666667
 8002318:	55555556 	.word	0x55555556

0800231c <HAL_ADC_ConvCpltCallback>:


int currentBR;
int currentVolume;
int threshhold_plus = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b0a4      	sub	sp, #144	; 0x90
 8002320:	af02      	add	r7, sp, #8
 8002322:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <HAL_ADC_ConvCpltCallback+0xf8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d133      	bne.n	8002396 <HAL_ADC_ConvCpltCallback+0x7a>
//	  HAL_UART_Transmit(&huart3,"TTT",3,1000);

		int x = HAL_ADC_GetValue(&hadc3);
 800232e:	483a      	ldr	r0, [pc, #232]	; (8002418 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002330:	f001 f9a2 	bl	8003678 <HAL_ADC_GetValue>
 8002334:	4603      	mov	r3, r0
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
		float fx = ((float) x * 100 / 4095);
 8002338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002342:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800241c <HAL_ADC_ConvCpltCallback+0x100>
 8002346:	ee27 7a87 	vmul.f32	s14, s15, s14
 800234a:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002420 <HAL_ADC_ConvCpltCallback+0x104>
 800234e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002352:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		currentVolume = (int) fx;
 8002356:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800235a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235e:	ee17 2a90 	vmov	r2, s15
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_ADC_ConvCpltCallback+0x108>)
 8002364:	601a      	str	r2, [r3, #0]
		unsigned char data[100];
		int n = sprintf(data, "volume: %d  %.4f\n", x, fx);
 8002366:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002368:	f7fe f8ee 	bl	8000548 <__aeabi_f2d>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	f107 000c 	add.w	r0, r7, #12
 8002374:	e9cd 2300 	strd	r2, r3, [sp]
 8002378:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800237a:	492b      	ldr	r1, [pc, #172]	; (8002428 <HAL_ADC_ConvCpltCallback+0x10c>)
 800237c:	f007 fcd4 	bl	8009d28 <siprintf>
 8002380:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart3, data, n, 1000);
 8002382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002384:	b29a      	uxth	r2, r3
 8002386:	f107 010c 	add.w	r1, r7, #12
 800238a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800238e:	4827      	ldr	r0, [pc, #156]	; (800242c <HAL_ADC_ConvCpltCallback+0x110>)
 8002390:	f005 fe18 	bl	8007fc4 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, data, n, 1000);
//		HAL_Delay(10);
		checkBrightness();
	}

}
 8002394:	e039      	b.n	800240a <HAL_ADC_ConvCpltCallback+0xee>
	else if(hadc->Instance == ADC1){
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239e:	d134      	bne.n	800240a <HAL_ADC_ConvCpltCallback+0xee>
		int x = HAL_ADC_GetValue(&hadc1);
 80023a0:	4823      	ldr	r0, [pc, #140]	; (8002430 <HAL_ADC_ConvCpltCallback+0x114>)
 80023a2:	f001 f969 	bl	8003678 <HAL_ADC_GetValue>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		currentBR=x;
 80023ac:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_ADC_ConvCpltCallback+0x118>)
 80023ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b2:	6013      	str	r3, [r2, #0]
		float fx = ((float) x * 100 / 3800);
 80023b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800241c <HAL_ADC_ConvCpltCallback+0x100>
 80023c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002438 <HAL_ADC_ConvCpltCallback+0x11c>
 80023cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023d0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
 80023d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80023d8:	f7fe f8b6 	bl	8000548 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	f107 000c 	add.w	r0, r7, #12
 80023e4:	e9cd 2300 	strd	r2, r3, [sp]
 80023e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80023ec:	4913      	ldr	r1, [pc, #76]	; (800243c <HAL_ADC_ConvCpltCallback+0x120>)
 80023ee:	f007 fc9b 	bl	8009d28 <siprintf>
 80023f2:	67f8      	str	r0, [r7, #124]	; 0x7c
		HAL_UART_Transmit(&huart3, data, n, 1000);
 80023f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f107 010c 	add.w	r1, r7, #12
 80023fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002400:	480a      	ldr	r0, [pc, #40]	; (800242c <HAL_ADC_ConvCpltCallback+0x110>)
 8002402:	f005 fddf 	bl	8007fc4 <HAL_UART_Transmit>
		checkBrightness();
 8002406:	f000 f8e3 	bl	80025d0 <checkBrightness>
}
 800240a:	bf00      	nop
 800240c:	3788      	adds	r7, #136	; 0x88
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	50000400 	.word	0x50000400
 8002418:	2000034c 	.word	0x2000034c
 800241c:	42c80000 	.word	0x42c80000
 8002420:	457ff000 	.word	0x457ff000
 8002424:	20000960 	.word	0x20000960
 8002428:	0800e9c8 	.word	0x0800e9c8
 800242c:	200005d0 	.word	0x200005d0
 8002430:	200002fc 	.word	0x200002fc
 8002434:	2000095c 	.word	0x2000095c
 8002438:	456d8000 	.word	0x456d8000
 800243c:	0800e9dc 	.word	0x0800e9dc

08002440 <HAL_TIM_PeriodElapsedCallback>:

//Play Warn
uint64_t counter = 0;
int buzz_type = 2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002440:	b5b0      	push	{r4, r5, r7, lr}
 8002442:	b09e      	sub	sp, #120	; 0x78
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d16b      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0xea>
		counter = counter + 1;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	1c54      	adds	r4, r2, #1
 800245a:	f143 0500 	adc.w	r5, r3, #0
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002460:	e9c3 4500 	strd	r4, r5, [r3]
		buzz_type = numbers[2];
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4a34      	ldr	r2, [pc, #208]	; (800253c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800246a:	6013      	str	r3, [r2, #0]
		if(counter > 5000){
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f241 3189 	movw	r1, #5001	; 0x1389
 8002476:	428a      	cmp	r2, r1
 8002478:	f173 0300 	sbcs.w	r3, r3, #0
 800247c:	d306      	bcc.n	800248c <HAL_TIM_PeriodElapsedCallback+0x4c>
			counter = 0;
 800247e:	492d      	ldr	r1, [pc, #180]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9c1 2300 	strd	r2, r3, [r1]
		}
//	    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);

		HAL_ADC_Start_IT(&hadc1);
 800248c:	482c      	ldr	r0, [pc, #176]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800248e:	f000 ffb3 	bl	80033f8 <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc3);
 8002492:	482c      	ldr	r0, [pc, #176]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002494:	f000 ffb0 	bl	80033f8 <HAL_ADC_Start_IT>
		checkBrightness();
 8002498:	f000 f89a 	bl	80025d0 <checkBrightness>
		int LEDLight = (int) numbers[0]*100 + mledlight[(currentVolume/5)-1];
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2264      	movs	r2, #100	; 0x64
 80024a2:	fb03 f202 	mul.w	r2, r3, r2
 80024a6:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4928      	ldr	r1, [pc, #160]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80024ac:	fb81 0103 	smull	r0, r1, r1, r3
 80024b0:	1049      	asrs	r1, r1, #1
 80024b2:	17db      	asrs	r3, r3, #31
 80024b4:	1acb      	subs	r3, r1, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	4925      	ldr	r1, [pc, #148]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80024ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024be:	4413      	add	r3, r2
 80024c0:	677b      	str	r3, [r7, #116]	; 0x74
		// test
//		unsigned char data[100];
//		int n = sprintf(data, "LEDLIGHT: %d taghsim 5 %d \n", LEDLight, (currentVolume/7));
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		//
	    threshhold_plus = (int) mthreshold[(currentVolume/7)-1];
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80024c8:	fb82 1203 	smull	r1, r2, r2, r3
 80024cc:	441a      	add	r2, r3
 80024ce:	1092      	asrs	r2, r2, #2
 80024d0:	17db      	asrs	r3, r3, #31
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	4a20      	ldr	r2, [pc, #128]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80024d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80024de:	6013      	str	r3, [r2, #0]

		unsigned char data[100];
		int n = sprintf(data, "Treshhold plus: %d taghsim 5 %d \n", threshhold_plus, (currentVolume/7));
 80024e0:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80024ea:	fb82 0203 	smull	r0, r2, r2, r3
 80024ee:	441a      	add	r2, r3
 80024f0:	1092      	asrs	r2, r2, #2
 80024f2:	17db      	asrs	r3, r3, #31
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f107 000c 	add.w	r0, r7, #12
 80024fa:	460a      	mov	r2, r1
 80024fc:	4918      	ldr	r1, [pc, #96]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80024fe:	f007 fc13 	bl	8009d28 <siprintf>
 8002502:	6738      	str	r0, [r7, #112]	; 0x70
		HAL_UART_Transmit(&huart3, data, n, 1000);
 8002504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002506:	b29a      	uxth	r2, r3
 8002508:	f107 010c 	add.w	r1, r7, #12
 800250c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002510:	4814      	ldr	r0, [pc, #80]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002512:	f005 fd57 	bl	8007fc4 <HAL_UART_Transmit>
		if(LEDLight < 0){
 8002516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002518:	2b00      	cmp	r3, #0
 800251a:	da03      	bge.n	8002524 <HAL_TIM_PeriodElapsedCallback+0xe4>
			LEDs_power = 0;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
		}
		else{
			LEDs_power = LEDLight;
		}
	}
}
 8002522:	e002      	b.n	800252a <HAL_TIM_PeriodElapsedCallback+0xea>
			LEDs_power = LEDLight;
 8002524:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002526:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	3778      	adds	r7, #120	; 0x78
 800252e:	46bd      	mov	sp, r7
 8002530:	bdb0      	pop	{r4, r5, r7, pc}
 8002532:	bf00      	nop
 8002534:	20000968 	.word	0x20000968
 8002538:	20000000 	.word	0x20000000
 800253c:	200000f4 	.word	0x200000f4
 8002540:	200002fc 	.word	0x200002fc
 8002544:	2000034c 	.word	0x2000034c
 8002548:	20000960 	.word	0x20000960
 800254c:	66666667 	.word	0x66666667
 8002550:	20000010 	.word	0x20000010
 8002554:	92492493 	.word	0x92492493
 8002558:	20000060 	.word	0x20000060
 800255c:	20000964 	.word	0x20000964
 8002560:	0800e9ec 	.word	0x0800e9ec
 8002564:	200005d0 	.word	0x200005d0
 8002568:	20000950 	.word	0x20000950

0800256c <playAlarm>:

void playAlarm(){
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	if (alert==1){
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <playAlarm+0x58>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d122      	bne.n	80025be <playAlarm+0x52>
		if(buzz_type == 3){
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <playAlarm+0x5c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d107      	bne.n	8002590 <playAlarm+0x24>
			triangle_signal(counter);
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <playAlarm+0x60>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	4613      	mov	r3, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fbb5 	bl	8001cf8 <triangle_signal>
		}
		else if(buzz_type == 1){
			sin_signal(counter);
		}
	}
}
 800258e:	e016      	b.n	80025be <playAlarm+0x52>
		else if(buzz_type == 2){
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <playAlarm+0x5c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d107      	bne.n	80025a8 <playAlarm+0x3c>
			square_signal(counter);
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <playAlarm+0x60>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	4613      	mov	r3, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fb75 	bl	8001c90 <square_signal>
}
 80025a6:	e00a      	b.n	80025be <playAlarm+0x52>
		else if(buzz_type == 1){
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <playAlarm+0x5c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <playAlarm+0x52>
			sin_signal(counter);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <playAlarm+0x60>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	4613      	mov	r3, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fb21 	bl	8001c00 <sin_signal>
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000094c 	.word	0x2000094c
 80025c8:	200000f4 	.word	0x200000f4
 80025cc:	20000968 	.word	0x20000968

080025d0 <checkBrightness>:

int warnCount=0;
int threshold=500;

void checkBrightness(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	if (currentBR >= threshold){
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <checkBrightness+0x78>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <checkBrightness+0x7c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	db24      	blt.n	800262a <checkBrightness+0x5a>
		setNumber(currentBR);
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <checkBrightness+0x78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fd01 	bl	8001fec <setNumber>
		if(alert == 0){
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <checkBrightness+0x80>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d112      	bne.n	8002618 <checkBrightness+0x48>
			warnCount=(warnCount+1)%10;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <checkBrightness+0x84>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1c59      	adds	r1, r3, #1
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <checkBrightness+0x88>)
 80025fa:	fb83 2301 	smull	r2, r3, r3, r1
 80025fe:	109a      	asrs	r2, r3, #2
 8002600:	17cb      	asrs	r3, r1, #31
 8002602:	1ad2      	subs	r2, r2, r3
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	1aca      	subs	r2, r1, r3
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <checkBrightness+0x84>)
 8002610:	601a      	str	r2, [r3, #0]
			alert = 1;
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <checkBrightness+0x80>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

		}
		turn_off_leds();
 8002618:	f7ff fac0 	bl	8001b9c <turn_off_leds>
		playAlarm();
 800261c:	f7ff ffa6 	bl	800256c <playAlarm>
		numbers[3]=warnCount;
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <checkBrightness+0x84>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0d      	ldr	r2, [pc, #52]	; (800265c <checkBrightness+0x8c>)
 8002626:	60d3      	str	r3, [r2, #12]
		alert=0;
		seven_segment_set_num(numbers);
		PWM_Change_Tone(0, 0);
		turn_on_leds();
	}
}
 8002628:	e00b      	b.n	8002642 <checkBrightness+0x72>
		alert=0;
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <checkBrightness+0x80>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
		seven_segment_set_num(numbers);
 8002630:	480a      	ldr	r0, [pc, #40]	; (800265c <checkBrightness+0x8c>)
 8002632:	f7ff fc3d 	bl	8001eb0 <seven_segment_set_num>
		PWM_Change_Tone(0, 0);
 8002636:	2100      	movs	r1, #0
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff f945 	bl	80018c8 <PWM_Change_Tone>
		turn_on_leds();
 800263e:	f7ff f9ff 	bl	8001a40 <turn_on_leds>
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000095c 	.word	0x2000095c
 800264c:	200000f8 	.word	0x200000f8
 8002650:	2000094c 	.word	0x2000094c
 8002654:	20000970 	.word	0x20000970
 8002658:	66666667 	.word	0x66666667
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_MspInit+0x44>)
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_MspInit+0x44>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6193      	str	r3, [r2, #24]
 8002672:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <HAL_MspInit+0x44>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_MspInit+0x44>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <HAL_MspInit+0x44>)
 8002684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_MspInit+0x44>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002696:	2005      	movs	r0, #5
 8002698:	f002 f882 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	; 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c8:	d12d      	bne.n	8002726 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4a30      	ldr	r2, [pc, #192]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6153      	str	r3, [r2, #20]
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	6153      	str	r3, [r2, #20]
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026fa:	2308      	movs	r3, #8
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fe:	2303      	movs	r3, #3
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f002 f8fe 	bl	8004910 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	2012      	movs	r0, #18
 800271a:	f002 f84c 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800271e:	2012      	movs	r0, #18
 8002720:	f002 f865 	bl	80047ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002724:	e030      	b.n	8002788 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC3)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_ADC_MspInit+0xec>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d12b      	bne.n	8002788 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 8002736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800273a:	6153      	str	r3, [r2, #20]
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 800274e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002752:	6153      	str	r3, [r2, #20]
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002760:	2302      	movs	r3, #2
 8002762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002764:	2303      	movs	r3, #3
 8002766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	4619      	mov	r1, r3
 8002772:	4809      	ldr	r0, [pc, #36]	; (8002798 <HAL_ADC_MspInit+0xf0>)
 8002774:	f002 f8cc 	bl	8004910 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	202f      	movs	r0, #47	; 0x2f
 800277e:	f002 f81a 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002782:	202f      	movs	r0, #47	; 0x2f
 8002784:	f002 f833 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 8002788:	bf00      	nop
 800278a:	3730      	adds	r7, #48	; 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	50000400 	.word	0x50000400
 8002798:	48000400 	.word	0x48000400

0800279c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_I2C_MspInit+0x7c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d127      	bne.n	800280e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_I2C_MspInit+0x80>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <HAL_I2C_MspInit+0x80>)
 80027c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c8:	6153      	str	r3, [r2, #20]
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_I2C_MspInit+0x80>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80027d6:	23c0      	movs	r3, #192	; 0xc0
 80027d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e6:	2304      	movs	r3, #4
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	480b      	ldr	r0, [pc, #44]	; (8002820 <HAL_I2C_MspInit+0x84>)
 80027f2:	f002 f88d 	bl	8004910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_I2C_MspInit+0x80>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_I2C_MspInit+0x80>)
 80027fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_I2C_MspInit+0x80>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40005400 	.word	0x40005400
 800281c:	40021000 	.word	0x40021000
 8002820:	48000400 	.word	0x48000400

08002824 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <HAL_SPI_MspInit+0x7c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d128      	bne.n	8002898 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 800284c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002850:	6193      	str	r3, [r2, #24]
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_SPI_MspInit+0x80>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002876:	23e0      	movs	r3, #224	; 0xe0
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002886:	2305      	movs	r3, #5
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002894:	f002 f83c 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013000 	.word	0x40013000
 80028a4:	40021000 	.word	0x40021000

080028a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a2c      	ldr	r2, [pc, #176]	; (8002968 <HAL_TIM_Base_MspInit+0xc0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028d2:	e044      	b.n	800295e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d114      	bne.n	8002908 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	201c      	movs	r0, #28
 80028fc:	f001 ff5b 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002900:	201c      	movs	r0, #28
 8002902:	f001 ff74 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 8002906:	e02a      	b.n	800295e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_TIM_Base_MspInit+0xc8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d114      	bne.n	800293c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	61d3      	str	r3, [r2, #28]
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	201d      	movs	r0, #29
 8002930:	f001 ff41 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002934:	201d      	movs	r0, #29
 8002936:	f001 ff5a 	bl	80047ee <HAL_NVIC_EnableIRQ>
}
 800293a:	e010      	b.n	800295e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_TIM_Base_MspInit+0xcc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10b      	bne.n	800295e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 800294c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002950:	6193      	str	r3, [r2, #24]
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_TIM_Base_MspInit+0xc4>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40000400 	.word	0x40000400
 8002974:	40013400 	.word	0x40013400

08002978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10b      	bne.n	80029a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 031c 	add.w	r3, r7, #28
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_TIM_MspPostInit+0x164>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d11e      	bne.n	8002a18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	6153      	str	r3, [r2, #20]
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a04:	2306      	movs	r3, #6
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a12:	f001 ff7d 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a16:	e07c      	b.n	8002b12 <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a41      	ldr	r2, [pc, #260]	; (8002b24 <HAL_TIM_MspPostInit+0x16c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d155      	bne.n	8002ace <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a2c:	6153      	str	r3, [r2, #20]
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3a:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a44:	6153      	str	r3, [r2, #20]
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4a32      	ldr	r2, [pc, #200]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6153      	str	r3, [r2, #20]
 8002a5e:	4b30      	ldr	r3, [pc, #192]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a6a:	2310      	movs	r3, #16
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	4828      	ldr	r0, [pc, #160]	; (8002b28 <HAL_TIM_MspPostInit+0x170>)
 8002a86:	f001 ff43 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8002a8a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a90:	2302      	movs	r3, #2
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa0:	f107 031c 	add.w	r3, r7, #28
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4821      	ldr	r0, [pc, #132]	; (8002b2c <HAL_TIM_MspPostInit+0x174>)
 8002aa8:	f001 ff32 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aac:	2310      	movs	r3, #16
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002abc:	2302      	movs	r3, #2
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 031c 	add.w	r3, r7, #28
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	481a      	ldr	r0, [pc, #104]	; (8002b30 <HAL_TIM_MspPostInit+0x178>)
 8002ac8:	f001 ff22 	bl	8004910 <HAL_GPIO_Init>
}
 8002acc:	e021      	b.n	8002b12 <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM4)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_MspPostInit+0x17c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d11c      	bne.n	8002b12 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	6153      	str	r3, [r2, #20]
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <HAL_TIM_MspPostInit+0x168>)
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b02:	2302      	movs	r3, #2
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480a      	ldr	r0, [pc, #40]	; (8002b38 <HAL_TIM_MspPostInit+0x180>)
 8002b0e:	f001 feff 	bl	8004910 <HAL_GPIO_Init>
}
 8002b12:	bf00      	nop
 8002b14:	3730      	adds	r7, #48	; 0x30
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	48001000 	.word	0x48001000
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000400 	.word	0x48000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	48000c00 	.word	0x48000c00

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_UART_MspInit+0x8c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d130      	bne.n	8002bc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6153      	str	r3, [r2, #20]
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_UART_MspInit+0x90>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ba0:	2307      	movs	r3, #7
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4809      	ldr	r0, [pc, #36]	; (8002bd0 <HAL_UART_MspInit+0x94>)
 8002bac:	f001 feb0 	bl	8004910 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2027      	movs	r0, #39	; 0x27
 8002bb6:	f001 fdfe 	bl	80047b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002bba:	2027      	movs	r0, #39	; 0x27
 8002bbc:	f001 fe17 	bl	80047ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	3728      	adds	r7, #40	; 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40004800 	.word	0x40004800
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	48000400 	.word	0x48000400

08002bd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_PCD_MspInit+0x80>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d129      	bne.n	8002c4a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c00:	6153      	str	r3, [r2, #20]
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|DP_Pin;
 8002c0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002c20:	230e      	movs	r3, #14
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2e:	f001 fe6f 	bl	8004910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c3c:	61d3      	str	r3, [r2, #28]
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_PCD_MspInit+0x84>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40005c00 	.word	0x40005c00
 8002c58:	40021000 	.word	0x40021000

08002c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <NMI_Handler+0x4>

08002c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler+0x4>

08002c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <MemManage_Handler+0x4>

08002c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca8:	f000 f992 	bl	8002fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	f001 ffd7 	bl	8004c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f001 ffd0 	bl	8004c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002cd0:	2010      	movs	r0, #16
 8002cd2:	f001 ffc9 	bl	8004c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <ADC1_2_IRQHandler+0x10>)
 8002ce2:	f000 fcd7 	bl	8003694 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200002fc 	.word	0x200002fc

08002cf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <TIM2_IRQHandler+0x10>)
 8002cf6:	f004 f8af 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200004a0 	.word	0x200004a0

08002d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <TIM3_IRQHandler+0x10>)
 8002d0a:	f004 f8a5 	bl	8006e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200004ec 	.word	0x200004ec

08002d18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <USART3_IRQHandler+0x10>)
 8002d1e:	f005 f9db 	bl	80080d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200005d0 	.word	0x200005d0

08002d2c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <ADC3_IRQHandler+0x10>)
 8002d32:	f000 fcaf 	bl	8003694 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	2000034c 	.word	0x2000034c

08002d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return 1;
 8002d44:	2301      	movs	r3, #1
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_kill>:

int _kill(int pid, int sig)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d5a:	f006 f933 	bl	8008fc4 <__errno>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2216      	movs	r2, #22
 8002d62:	601a      	str	r2, [r3, #0]
  return -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <_exit>:

void _exit (int status)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ffe7 	bl	8002d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d82:	e7fe      	b.n	8002d82 <_exit+0x12>

08002d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e00a      	b.n	8002dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d96:	f3af 8000 	nop.w
 8002d9a:	4601      	mov	r1, r0
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	60ba      	str	r2, [r7, #8]
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dbf0      	blt.n	8002d96 <_read+0x12>
  }

  return len;
 8002db4:	687b      	ldr	r3, [r7, #4]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e009      	b.n	8002de4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	60ba      	str	r2, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3301      	adds	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dbf1      	blt.n	8002dd0 <_write+0x12>
  }
  return len;
 8002dec:	687b      	ldr	r3, [r7, #4]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <_close>:

int _close(int file)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_isatty>:

int _isatty(int file)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <_sbrk+0x5c>)
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <_sbrk+0x60>)
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <_sbrk+0x64>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <_sbrk+0x64>)
 8002e7e:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <_sbrk+0x68>)
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d207      	bcs.n	8002ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e90:	f006 f898 	bl	8008fc4 <__errno>
 8002e94:	4603      	mov	r3, r0
 8002e96:	220c      	movs	r2, #12
 8002e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	e009      	b.n	8002eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <_sbrk+0x64>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <_sbrk+0x64>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	4a05      	ldr	r2, [pc, #20]	; (8002ec4 <_sbrk+0x64>)
 8002eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2000a000 	.word	0x2000a000
 8002ec0:	00000400 	.word	0x00000400
 8002ec4:	2000097c 	.word	0x2000097c
 8002ec8:	20000998 	.word	0x20000998

08002ecc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <SystemInit+0x20>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <SystemInit+0x20>)
 8002ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ef4:	f7ff ffea 	bl	8002ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef8:	480c      	ldr	r0, [pc, #48]	; (8002f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002efa:	490d      	ldr	r1, [pc, #52]	; (8002f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <LoopForever+0xe>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f00:	e002      	b.n	8002f08 <LoopCopyDataInit>

08002f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f06:	3304      	adds	r3, #4

08002f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f0c:	d3f9      	bcc.n	8002f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f10:	4c0a      	ldr	r4, [pc, #40]	; (8002f3c <LoopForever+0x16>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f14:	e001      	b.n	8002f1a <LoopFillZerobss>

08002f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f18:	3204      	adds	r2, #4

08002f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f1c:	d3fb      	bcc.n	8002f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f1e:	f006 f857 	bl	8008fd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f22:	f7fd fee7 	bl	8000cf4 <main>

08002f26 <LoopForever>:

LoopForever:
    b LoopForever
 8002f26:	e7fe      	b.n	8002f26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f28:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f30:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002f34:	0800f0d0 	.word	0x0800f0d0
  ldr r2, =_sbss
 8002f38:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002f3c:	20000994 	.word	0x20000994

08002f40 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC4_IRQHandler>
	...

08002f44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_Init+0x28>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <HAL_Init+0x28>)
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f001 fc23 	bl	80047a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f808 	bl	8002f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f60:	f7ff fb7e 	bl	8002660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_InitTick+0x54>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_InitTick+0x58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fc3b 	bl	800480a <HAL_SYSTICK_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00e      	b.n	8002fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d80a      	bhi.n	8002fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	f001 fc03 	bl	80047b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb0:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <HAL_InitTick+0x5c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	200000fc 	.word	0x200000fc
 8002fc8:	20000104 	.word	0x20000104
 8002fcc:	20000100 	.word	0x20000100

08002fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x20>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000104 	.word	0x20000104
 8002ff4:	20000980 	.word	0x20000980

08002ff8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_GetTick+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000980 	.word	0x20000980

08003010 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b09a      	sub	sp, #104	; 0x68
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e1c9      	b.n	80033ec <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d176      	bne.n	8003158 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d152      	bne.n	8003118 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fb0b 	bl	80026a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d13b      	bne.n	8003118 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f001 fa47 	bl	8004534 <ADC_Disable>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d12f      	bne.n	8003118 <HAL_ADC_Init+0xe0>
 80030b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d12b      	bne.n	8003118 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030c8:	f023 0302 	bic.w	r3, r3, #2
 80030cc:	f043 0202 	orr.w	r2, r3, #2
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030f4:	4b86      	ldr	r3, [pc, #536]	; (8003310 <HAL_ADC_Init+0x2d8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a86      	ldr	r2, [pc, #536]	; (8003314 <HAL_ADC_Init+0x2dc>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9a      	lsrs	r2, r3, #18
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800310a:	e002      	b.n	8003112 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3b01      	subs	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f9      	bne.n	800310c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003134:	d110      	bne.n	8003158 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f023 0312 	bic.w	r3, r3, #18
 800313e:	f043 0210 	orr.w	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	f040 8136 	bne.w	80033d2 <HAL_ADC_Init+0x39a>
 8003166:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 8131 	bne.w	80033d2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 8129 	bne.w	80033d2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003188:	f043 0202 	orr.w	r2, r3, #2
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003198:	d004      	beq.n	80031a4 <HAL_ADC_Init+0x16c>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_ADC_Init+0x2e0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_Init+0x170>
 80031a4:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_ADC_Init+0x2e4>)
 80031a6:	e000      	b.n	80031aa <HAL_ADC_Init+0x172>
 80031a8:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_ADC_Init+0x2e8>)
 80031aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b4:	d102      	bne.n	80031bc <HAL_ADC_Init+0x184>
 80031b6:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_ADC_Init+0x2e0>)
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e01a      	b.n	80031f2 <HAL_ADC_Init+0x1ba>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_ADC_Init+0x2e0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d103      	bne.n	80031ce <HAL_ADC_Init+0x196>
 80031c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e011      	b.n	80031f2 <HAL_ADC_Init+0x1ba>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_ADC_Init+0x2ec>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d102      	bne.n	80031de <HAL_ADC_Init+0x1a6>
 80031d8:	4b53      	ldr	r3, [pc, #332]	; (8003328 <HAL_ADC_Init+0x2f0>)
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e009      	b.n	80031f2 <HAL_ADC_Init+0x1ba>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_ADC_Init+0x2f0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d102      	bne.n	80031ee <HAL_ADC_Init+0x1b6>
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_ADC_Init+0x2ec>)
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e001      	b.n	80031f2 <HAL_ADC_Init+0x1ba>
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d108      	bne.n	8003212 <HAL_ADC_Init+0x1da>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_ADC_Init+0x1da>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_ADC_Init+0x1dc>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11c      	bne.n	8003252 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003218:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_ADC_Init+0x202>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x202>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_ADC_Init+0x204>
 800323a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	431a      	orrs	r2, r3
 800324e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003250:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7e5b      	ldrb	r3, [r3, #25]
 8003256:	035b      	lsls	r3, r3, #13
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800325c:	2a01      	cmp	r2, #1
 800325e:	d002      	beq.n	8003266 <HAL_ADC_Init+0x22e>
 8003260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003264:	e000      	b.n	8003268 <HAL_ADC_Init+0x230>
 8003266:	2200      	movs	r2, #0
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003278:	4313      	orrs	r3, r2
 800327a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d11b      	bne.n	80032be <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7e5b      	ldrb	r3, [r3, #25]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	045a      	lsls	r2, r3, #17
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	4313      	orrs	r3, r2
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	663b      	str	r3, [r7, #96]	; 0x60
 80032a0:	e00d      	b.n	80032be <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d03a      	beq.n	800333c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <HAL_ADC_Init+0x2ec>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_ADC_Init+0x2a2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <HAL_ADC_Init+0x2f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d128      	bne.n	800332c <HAL_ADC_Init+0x2f4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80032e2:	d012      	beq.n	800330a <HAL_ADC_Init+0x2d2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ec:	d00a      	beq.n	8003304 <HAL_ADC_Init+0x2cc>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80032f6:	d002      	beq.n	80032fe <HAL_ADC_Init+0x2c6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	e018      	b.n	8003330 <HAL_ADC_Init+0x2f8>
 80032fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003302:	e015      	b.n	8003330 <HAL_ADC_Init+0x2f8>
 8003304:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003308:	e012      	b.n	8003330 <HAL_ADC_Init+0x2f8>
 800330a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800330e:	e00f      	b.n	8003330 <HAL_ADC_Init+0x2f8>
 8003310:	200000fc 	.word	0x200000fc
 8003314:	431bde83 	.word	0x431bde83
 8003318:	50000100 	.word	0x50000100
 800331c:	50000300 	.word	0x50000300
 8003320:	50000700 	.word	0x50000700
 8003324:	50000400 	.word	0x50000400
 8003328:	50000500 	.word	0x50000500
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003334:	4313      	orrs	r3, r2
 8003336:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003338:	4313      	orrs	r3, r2
 800333a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d114      	bne.n	8003374 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003358:	f023 0302 	bic.w	r3, r3, #2
 800335c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	7e1b      	ldrb	r3, [r3, #24]
 8003362:	039a      	lsls	r2, r3, #14
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4313      	orrs	r3, r2
 800336e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003370:	4313      	orrs	r3, r2
 8003372:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_ADC_Init+0x3bc>)
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003384:	430b      	orrs	r3, r1
 8003386:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10c      	bne.n	80033aa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f023 010f 	bic.w	r1, r3, #15
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
 80033a8:	e007      	b.n	80033ba <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 020f 	bic.w	r2, r2, #15
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f023 0303 	bic.w	r3, r3, #3
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
 80033d0:	e00a      	b.n	80033e8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f023 0312 	bic.w	r3, r3, #18
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80033e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3768      	adds	r7, #104	; 0x68
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	fff0c007 	.word	0xfff0c007

080033f8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8123 	bne.w	800365a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_ADC_Start_IT+0x2a>
 800341e:	2302      	movs	r3, #2
 8003420:	e11e      	b.n	8003660 <HAL_ADC_Start_IT+0x268>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 f81e 	bl	800446c <ADC_Enable>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 810a 	bne.w	8003650 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003458:	d004      	beq.n	8003464 <HAL_ADC_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a82      	ldr	r2, [pc, #520]	; (8003668 <HAL_ADC_Start_IT+0x270>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d106      	bne.n	8003472 <HAL_ADC_Start_IT+0x7a>
 8003464:	4b81      	ldr	r3, [pc, #516]	; (800366c <HAL_ADC_Start_IT+0x274>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_ADC_Start_IT+0x9a>
 8003470:	e005      	b.n	800347e <HAL_ADC_Start_IT+0x86>
 8003472:	4b7f      	ldr	r3, [pc, #508]	; (8003670 <HAL_ADC_Start_IT+0x278>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_ADC_Start_IT+0x9a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003486:	d004      	beq.n	8003492 <HAL_ADC_Start_IT+0x9a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_ADC_Start_IT+0x27c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d115      	bne.n	80034be <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d036      	beq.n	800351a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034bc:	e02d      	b.n	800351a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d2:	d004      	beq.n	80034de <HAL_ADC_Start_IT+0xe6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a63      	ldr	r2, [pc, #396]	; (8003668 <HAL_ADC_Start_IT+0x270>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d10a      	bne.n	80034f4 <HAL_ADC_Start_IT+0xfc>
 80034de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	e008      	b.n	8003506 <HAL_ADC_Start_IT+0x10e>
 80034f4:	4b5f      	ldr	r3, [pc, #380]	; (8003674 <HAL_ADC_Start_IT+0x27c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003512:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d106      	bne.n	8003536 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f023 0206 	bic.w	r2, r3, #6
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	645a      	str	r2, [r3, #68]	; 0x44
 8003534:	e002      	b.n	800353c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	221c      	movs	r2, #28
 800354a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d110      	bne.n	8003576 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	605a      	str	r2, [r3, #4]
          break;
 8003574:	e008      	b.n	8003588 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 020c 	orr.w	r2, r2, #12
 8003584:	605a      	str	r2, [r3, #4]
          break;
 8003586:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0210 	bic.w	r2, r2, #16
 800359e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_Start_IT+0x1bc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_ADC_Start_IT+0x270>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d106      	bne.n	80035c2 <HAL_ADC_Start_IT+0x1ca>
 80035b4:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_ADC_Start_IT+0x274>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03e      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 80035c0:	e005      	b.n	80035ce <HAL_ADC_Start_IT+0x1d6>
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_ADC_Start_IT+0x278>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d037      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d6:	d004      	beq.n	80035e2 <HAL_ADC_Start_IT+0x1ea>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a22      	ldr	r2, [pc, #136]	; (8003668 <HAL_ADC_Start_IT+0x270>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d106      	bne.n	80035f0 <HAL_ADC_Start_IT+0x1f8>
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <HAL_ADC_Start_IT+0x274>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d027      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 80035ee:	e005      	b.n	80035fc <HAL_ADC_Start_IT+0x204>
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_ADC_Start_IT+0x278>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d020      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003604:	d004      	beq.n	8003610 <HAL_ADC_Start_IT+0x218>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <HAL_ADC_Start_IT+0x270>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d106      	bne.n	800361e <HAL_ADC_Start_IT+0x226>
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_ADC_Start_IT+0x274>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	2b09      	cmp	r3, #9
 800361a:	d010      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 800361c:	e005      	b.n	800362a <HAL_ADC_Start_IT+0x232>
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_ADC_Start_IT+0x278>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2b09      	cmp	r3, #9
 8003628:	d009      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003632:	d004      	beq.n	800363e <HAL_ADC_Start_IT+0x246>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_ADC_Start_IT+0x27c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10f      	bne.n	800365e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0204 	orr.w	r2, r2, #4
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	e006      	b.n	800365e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003658:	e001      	b.n	800365e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	50000100 	.word	0x50000100
 800366c:	50000300 	.word	0x50000300
 8003670:	50000700 	.word	0x50000700
 8003674:	50000400 	.word	0x50000400

08003678 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_ADC_IRQHandler+0x38>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80bc 	beq.w	8003850 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b6 	beq.w	8003850 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d105      	bne.n	80036fc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003704:	d004      	beq.n	8003710 <HAL_ADC_IRQHandler+0x7c>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a90      	ldr	r2, [pc, #576]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d106      	bne.n	800371e <HAL_ADC_IRQHandler+0x8a>
 8003710:	4b8f      	ldr	r3, [pc, #572]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03e      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 800371c:	e005      	b.n	800372a <HAL_ADC_IRQHandler+0x96>
 800371e:	4b8d      	ldr	r3, [pc, #564]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2b00      	cmp	r3, #0
 8003728:	d037      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003732:	d004      	beq.n	800373e <HAL_ADC_IRQHandler+0xaa>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a84      	ldr	r2, [pc, #528]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d106      	bne.n	800374c <HAL_ADC_IRQHandler+0xb8>
 800373e:	4b84      	ldr	r3, [pc, #528]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2b05      	cmp	r3, #5
 8003748:	d027      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 800374a:	e005      	b.n	8003758 <HAL_ADC_IRQHandler+0xc4>
 800374c:	4b81      	ldr	r3, [pc, #516]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2b05      	cmp	r3, #5
 8003756:	d020      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003760:	d004      	beq.n	800376c <HAL_ADC_IRQHandler+0xd8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a79      	ldr	r2, [pc, #484]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d106      	bne.n	800377a <HAL_ADC_IRQHandler+0xe6>
 800376c:	4b78      	ldr	r3, [pc, #480]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b09      	cmp	r3, #9
 8003776:	d010      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 8003778:	e005      	b.n	8003786 <HAL_ADC_IRQHandler+0xf2>
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2b09      	cmp	r3, #9
 8003784:	d009      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378e:	d004      	beq.n	800379a <HAL_ADC_IRQHandler+0x106>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a70      	ldr	r2, [pc, #448]	; (8003958 <HAL_ADC_IRQHandler+0x2c4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d104      	bne.n	80037a4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
 80037a2:	e00f      	b.n	80037c4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_IRQHandler+0x124>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d102      	bne.n	80037be <HAL_ADC_IRQHandler+0x12a>
 80037b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037bc:	e000      	b.n	80037c0 <HAL_ADC_IRQHandler+0x12c>
 80037be:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_ADC_IRQHandler+0x2c4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d137      	bne.n	8003842 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d132      	bne.n	8003842 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02d      	beq.n	8003842 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d11a      	bne.n	800382a <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020c 	bic.w	r2, r2, #12
 8003802:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d112      	bne.n	8003842 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
 8003828:	e00b      	b.n	8003842 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fe fd6a 	bl	800231c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	220c      	movs	r2, #12
 800384e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_ADC_IRQHandler+0x1d0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8138 	beq.w	8003ae0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8132 	beq.w	8003ae0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003890:	d004      	beq.n	800389c <HAL_ADC_IRQHandler+0x208>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2d      	ldr	r2, [pc, #180]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d106      	bne.n	80038aa <HAL_ADC_IRQHandler+0x216>
 800389c:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 80038a8:	e005      	b.n	80038b6 <HAL_ADC_IRQHandler+0x222>
 80038aa:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d037      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038be:	d004      	beq.n	80038ca <HAL_ADC_IRQHandler+0x236>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d106      	bne.n	80038d8 <HAL_ADC_IRQHandler+0x244>
 80038ca:	4b21      	ldr	r3, [pc, #132]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d027      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 80038d6:	e005      	b.n	80038e4 <HAL_ADC_IRQHandler+0x250>
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d020      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ec:	d004      	beq.n	80038f8 <HAL_ADC_IRQHandler+0x264>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d106      	bne.n	8003906 <HAL_ADC_IRQHandler+0x272>
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_ADC_IRQHandler+0x2bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 031f 	and.w	r3, r3, #31
 8003900:	2b09      	cmp	r3, #9
 8003902:	d010      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 8003904:	e005      	b.n	8003912 <HAL_ADC_IRQHandler+0x27e>
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <HAL_ADC_IRQHandler+0x2c0>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2b09      	cmp	r3, #9
 8003910:	d009      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391a:	d004      	beq.n	8003926 <HAL_ADC_IRQHandler+0x292>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <HAL_ADC_IRQHandler+0x2c4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d104      	bne.n	8003930 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	e018      	b.n	8003962 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003938:	d004      	beq.n	8003944 <HAL_ADC_IRQHandler+0x2b0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <HAL_ADC_IRQHandler+0x2b8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d10b      	bne.n	800395c <HAL_ADC_IRQHandler+0x2c8>
 8003944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003948:	e009      	b.n	800395e <HAL_ADC_IRQHandler+0x2ca>
 800394a:	bf00      	nop
 800394c:	50000100 	.word	0x50000100
 8003950:	50000300 	.word	0x50000300
 8003954:	50000700 	.word	0x50000700
 8003958:	50000400 	.word	0x50000400
 800395c:	4b92      	ldr	r3, [pc, #584]	; (8003ba8 <HAL_ADC_IRQHandler+0x514>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 80b0 	bne.w	8003ad2 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00d      	beq.n	8003998 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80a3 	bne.w	8003ad2 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 809d 	bne.w	8003ad2 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8097 	beq.w	8003ad2 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ac:	d004      	beq.n	80039b8 <HAL_ADC_IRQHandler+0x324>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_ADC_IRQHandler+0x518>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d106      	bne.n	80039c6 <HAL_ADC_IRQHandler+0x332>
 80039b8:	4b7d      	ldr	r3, [pc, #500]	; (8003bb0 <HAL_ADC_IRQHandler+0x51c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03e      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 80039c4:	e005      	b.n	80039d2 <HAL_ADC_IRQHandler+0x33e>
 80039c6:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <HAL_ADC_IRQHandler+0x520>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d037      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_IRQHandler+0x352>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <HAL_ADC_IRQHandler+0x518>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_IRQHandler+0x360>
 80039e6:	4b72      	ldr	r3, [pc, #456]	; (8003bb0 <HAL_ADC_IRQHandler+0x51c>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d027      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 80039f2:	e005      	b.n	8003a00 <HAL_ADC_IRQHandler+0x36c>
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_ADC_IRQHandler+0x520>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d020      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a08:	d004      	beq.n	8003a14 <HAL_ADC_IRQHandler+0x380>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a67      	ldr	r2, [pc, #412]	; (8003bac <HAL_ADC_IRQHandler+0x518>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d106      	bne.n	8003a22 <HAL_ADC_IRQHandler+0x38e>
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_ADC_IRQHandler+0x51c>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2b07      	cmp	r3, #7
 8003a1e:	d010      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 8003a20:	e005      	b.n	8003a2e <HAL_ADC_IRQHandler+0x39a>
 8003a22:	4b64      	ldr	r3, [pc, #400]	; (8003bb4 <HAL_ADC_IRQHandler+0x520>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2b07      	cmp	r3, #7
 8003a2c:	d009      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a36:	d004      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x3ae>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5a      	ldr	r2, [pc, #360]	; (8003ba8 <HAL_ADC_IRQHandler+0x514>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d104      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e00f      	b.n	8003a6c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a54:	d004      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x3cc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_ADC_IRQHandler+0x518>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d102      	bne.n	8003a66 <HAL_ADC_IRQHandler+0x3d2>
 8003a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a64:	e000      	b.n	8003a68 <HAL_ADC_IRQHandler+0x3d4>
 8003a66:	4b50      	ldr	r3, [pc, #320]	; (8003ba8 <HAL_ADC_IRQHandler+0x514>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12d      	bne.n	8003ad2 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d11a      	bne.n	8003aba <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a92:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d112      	bne.n	8003ad2 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab8:	e00b      	b.n	8003ad2 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8c4 	bl	8003c60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2260      	movs	r2, #96	; 0x60
 8003ade:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x47a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fa85 	bl	8003010 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x4aa>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8aa 	bl	8003c88 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3c:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x4da>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f89c 	bl	8003c9c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d04f      	beq.n	8003c18 <HAL_ADC_IRQHandler+0x584>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d04a      	beq.n	8003c18 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e02d      	b.n	8003bec <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b98:	d004      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x510>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a03      	ldr	r2, [pc, #12]	; (8003bac <HAL_ADC_IRQHandler+0x518>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <HAL_ADC_IRQHandler+0x524>
 8003ba4:	4b02      	ldr	r3, [pc, #8]	; (8003bb0 <HAL_ADC_IRQHandler+0x51c>)
 8003ba6:	e008      	b.n	8003bba <HAL_ADC_IRQHandler+0x526>
 8003ba8:	50000400 	.word	0x50000400
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000300 	.word	0x50000300
 8003bb4:	50000700 	.word	0x50000700
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_ADC_IRQHandler+0x5c8>)
 8003bba:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10a      	bne.n	8003bec <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e007      	b.n	8003bec <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003be8:	2301      	movs	r3, #1
 8003bea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10e      	bne.n	8003c10 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f043 0202 	orr.w	r2, r3, #2
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff fa0a 	bl	8003024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x5c0>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f043 0208 	orr.w	r2, r3, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f810 	bl	8003c74 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003c54:	bf00      	nop
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	50000700 	.word	0x50000700

08003c60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b09b      	sub	sp, #108	; 0x6c
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x22>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e2ca      	b.n	8004268 <HAL_ADC_ConfigChannel+0x5b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 82ae 	bne.w	8004246 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d81c      	bhi.n	8003d2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	4413      	add	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	461a      	mov	r2, r3
 8003d06:	231f      	movs	r3, #31
 8003d08:	4093      	lsls	r3, r2
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	4019      	ands	r1, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2a:	e063      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d81e      	bhi.n	8003d72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	3b1e      	subs	r3, #30
 8003d48:	221f      	movs	r2, #31
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	4019      	ands	r1, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	3b1e      	subs	r3, #30
 8003d64:	fa00 f203 	lsl.w	r2, r0, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d70:	e040      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b0e      	cmp	r3, #14
 8003d78:	d81e      	bhi.n	8003db8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	4413      	add	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	3b3c      	subs	r3, #60	; 0x3c
 8003d8e:	221f      	movs	r2, #31
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	4019      	ands	r1, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	3b3c      	subs	r3, #60	; 0x3c
 8003daa:	fa00 f203 	lsl.w	r2, r0, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
 8003db6:	e01d      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	3b5a      	subs	r3, #90	; 0x5a
 8003dcc:	221f      	movs	r2, #31
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	4019      	ands	r1, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4413      	add	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	3b5a      	subs	r3, #90	; 0x5a
 8003de8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f040 80e5 	bne.w	8003fce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d91c      	bls.n	8003e46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6999      	ldr	r1, [r3, #24]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3b1e      	subs	r3, #30
 8003e1e:	2207      	movs	r2, #7
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	4019      	ands	r1, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6898      	ldr	r0, [r3, #8]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	3b1e      	subs	r3, #30
 8003e38:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
 8003e44:	e019      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6959      	ldr	r1, [r3, #20]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	4413      	add	r3, r2
 8003e56:	2207      	movs	r2, #7
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4019      	ands	r1, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6898      	ldr	r0, [r3, #8]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d84f      	bhi.n	8003f3c <HAL_ADC_ConfigChannel+0x28c>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_ADC_ConfigChannel+0x1f4>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003eb5 	.word	0x08003eb5
 8003ea8:	08003ed7 	.word	0x08003ed7
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003f1b 	.word	0x08003f1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eba:	4b9a      	ldr	r3, [pc, #616]	; (8004124 <HAL_ADC_ConfigChannel+0x474>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	0691      	lsls	r1, r2, #26
 8003ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ed4:	e07e      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003edc:	4b91      	ldr	r3, [pc, #580]	; (8004124 <HAL_ADC_ConfigChannel+0x474>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	0691      	lsls	r1, r2, #26
 8003ee6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ef4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ef6:	e06d      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <HAL_ADC_ConfigChannel+0x474>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	0691      	lsls	r1, r2, #26
 8003f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f18:	e05c      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f20:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_ADC_ConfigChannel+0x474>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	0691      	lsls	r1, r2, #26
 8003f2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f3a:	e04b      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	069b      	lsls	r3, r3, #26
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	069b      	lsls	r3, r3, #26
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d107      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	069b      	lsls	r3, r3, #26
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fa6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d10a      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003fcc:	e001      	b.n	8003fd2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8003fd2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x344>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x344>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x346>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f040 8130 	bne.w	800425c <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d00f      	beq.n	8004024 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	400a      	ands	r2, r1
 800401e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004022:	e049      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	409a      	lsls	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b09      	cmp	r3, #9
 8004044:	d91c      	bls.n	8004080 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6999      	ldr	r1, [r3, #24]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	3b1b      	subs	r3, #27
 8004058:	2207      	movs	r2, #7
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	4019      	ands	r1, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6898      	ldr	r0, [r3, #8]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	3b1b      	subs	r3, #27
 8004072:	fa00 f203 	lsl.w	r2, r0, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	619a      	str	r2, [r3, #24]
 800407e:	e01b      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6959      	ldr	r1, [r3, #20]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	4613      	mov	r3, r2
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4413      	add	r3, r2
 8004092:	2207      	movs	r2, #7
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	4019      	ands	r1, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6898      	ldr	r0, [r3, #8]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	fa00 f203 	lsl.w	r2, r0, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c0:	d004      	beq.n	80040cc <HAL_ADC_ConfigChannel+0x41c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_ADC_ConfigChannel+0x478>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x420>
 80040cc:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_ADC_ConfigChannel+0x47c>)
 80040ce:	e000      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x422>
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <HAL_ADC_ConfigChannel+0x480>)
 80040d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040ec:	2b11      	cmp	r3, #17
 80040ee:	d105      	bne.n	80040fc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80040f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004100:	2b12      	cmp	r3, #18
 8004102:	f040 80ab 	bne.w	800425c <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800410e:	2b00      	cmp	r3, #0
 8004110:	f040 80a4 	bne.w	800425c <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800411c:	d10a      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x484>
 800411e:	4b02      	ldr	r3, [pc, #8]	; (8004128 <HAL_ADC_ConfigChannel+0x478>)
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e022      	b.n	800416a <HAL_ADC_ConfigChannel+0x4ba>
 8004124:	83fff000 	.word	0x83fff000
 8004128:	50000100 	.word	0x50000100
 800412c:	50000300 	.word	0x50000300
 8004130:	50000700 	.word	0x50000700
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4e      	ldr	r2, [pc, #312]	; (8004274 <HAL_ADC_ConfigChannel+0x5c4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d103      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x496>
 800413e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e011      	b.n	800416a <HAL_ADC_ConfigChannel+0x4ba>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4b      	ldr	r2, [pc, #300]	; (8004278 <HAL_ADC_ConfigChannel+0x5c8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d102      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x4a6>
 8004150:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_ADC_ConfigChannel+0x5cc>)
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e009      	b.n	800416a <HAL_ADC_ConfigChannel+0x4ba>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a48      	ldr	r2, [pc, #288]	; (800427c <HAL_ADC_ConfigChannel+0x5cc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d102      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x4b6>
 8004160:	4b45      	ldr	r3, [pc, #276]	; (8004278 <HAL_ADC_ConfigChannel+0x5c8>)
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e001      	b.n	800416a <HAL_ADC_ConfigChannel+0x4ba>
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_ADC_ConfigChannel+0x4da>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_ADC_ConfigChannel+0x4da>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <HAL_ADC_ConfigChannel+0x4dc>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d150      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004190:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d107      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x502>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x502>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x504>
 80041b2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13c      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d11d      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x54c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c8:	d118      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_ADC_ConfigChannel+0x5d0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2a      	ldr	r2, [pc, #168]	; (8004284 <HAL_ADC_ConfigChannel+0x5d4>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	0c9a      	lsrs	r2, r3, #18
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041ec:	e002      	b.n	80041f4 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f9      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041fa:	e02e      	b.n	800425a <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b11      	cmp	r3, #17
 8004202:	d10b      	bne.n	800421c <HAL_ADC_ConfigChannel+0x56c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800420c:	d106      	bne.n	800421c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800420e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004218:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800421a:	e01e      	b.n	800425a <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b12      	cmp	r3, #18
 8004222:	d11a      	bne.n	800425a <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800422c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004230:	e013      	b.n	800425a <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004244:	e00a      	b.n	800425c <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004258:	e000      	b.n	800425c <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800425a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004264:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004268:	4618      	mov	r0, r3
 800426a:	376c      	adds	r7, #108	; 0x6c
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	50000100 	.word	0x50000100
 8004278:	50000400 	.word	0x50000400
 800427c:	50000500 	.word	0x50000500
 8004280:	200000fc 	.word	0x200000fc
 8004284:	431bde83 	.word	0x431bde83

08004288 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004288:	b480      	push	{r7}
 800428a:	b099      	sub	sp, #100	; 0x64
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a0:	d102      	bne.n	80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80042a2:	4b6d      	ldr	r3, [pc, #436]	; (8004458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	e01a      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d103      	bne.n	80042ba <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80042b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	e011      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a67      	ldr	r2, [pc, #412]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d102      	bne.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042c4:	4b66      	ldr	r3, [pc, #408]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e009      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a64      	ldr	r2, [pc, #400]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d102      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042d4:	4b61      	ldr	r3, [pc, #388]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	e001      	b.n	80042de <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0b0      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e0a9      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 808d 	bne.w	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 8086 	bne.w	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004324:	d004      	beq.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4b      	ldr	r2, [pc, #300]	; (8004458 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d101      	bne.n	8004334 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004330:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004332:	e000      	b.n	8004336 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004334:	4b4c      	ldr	r3, [pc, #304]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004336:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d040      	beq.n	80043c2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004352:	035b      	lsls	r3, r3, #13
 8004354:	430b      	orrs	r3, r1
 8004356:	431a      	orrs	r2, r3
 8004358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d108      	bne.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d15c      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800439e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d14b      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043ac:	f023 030f 	bic.w	r3, r3, #15
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	6811      	ldr	r1, [r2, #0]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	431a      	orrs	r2, r3
 80043bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043be:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043c0:	e03c      	b.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043cc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d108      	bne.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d123      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d107      	bne.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004410:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004412:	2b00      	cmp	r3, #0
 8004414:	d112      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800441e:	f023 030f 	bic.w	r3, r3, #15
 8004422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004424:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004426:	e009      	b.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800443a:	e000      	b.n	800443e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800443c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800444a:	4618      	mov	r0, r3
 800444c:	3764      	adds	r7, #100	; 0x64
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	50000100 	.word	0x50000100
 800445c:	50000400 	.word	0x50000400
 8004460:	50000500 	.word	0x50000500
 8004464:	50000300 	.word	0x50000300
 8004468:	50000700 	.word	0x50000700

0800446c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d108      	bne.n	8004498 <ADC_Enable+0x2c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <ADC_Enable+0x2c>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <ADC_Enable+0x2e>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d143      	bne.n	8004526 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	4b22      	ldr	r3, [pc, #136]	; (8004530 <ADC_Enable+0xc4>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e02f      	b.n	8004528 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80044d8:	f7fe fd8e 	bl	8002ff8 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044de:	e01b      	b.n	8004518 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044e0:	f7fe fd8a 	bl	8002ff8 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d914      	bls.n	8004518 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d00d      	beq.n	8004518 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f043 0210 	orr.w	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f043 0201 	orr.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d1dc      	bne.n	80044e0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	8000003f 	.word	0x8000003f

08004534 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d108      	bne.n	8004560 <ADC_Disable+0x2c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <ADC_Disable+0x2c>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <ADC_Disable+0x2e>
 8004560:	2300      	movs	r3, #0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d047      	beq.n	80045f6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 030d 	and.w	r3, r3, #13
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10f      	bne.n	8004594 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0202 	orr.w	r2, r2, #2
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2203      	movs	r2, #3
 800458a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800458c:	f7fe fd34 	bl	8002ff8 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004592:	e029      	b.n	80045e8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	f043 0210 	orr.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	f043 0201 	orr.w	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e023      	b.n	80045f8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045b0:	f7fe fd22 	bl	8002ff8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d914      	bls.n	80045e8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10d      	bne.n	80045e8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0210 	orr.w	r2, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d0dc      	beq.n	80045b0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800461c:	4013      	ands	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800462c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <__NVIC_SetPriorityGrouping+0x44>)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	60d3      	str	r3, [r2, #12]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00

08004648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <__NVIC_GetPriorityGrouping+0x18>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0307 	and.w	r3, r3, #7
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000ed00 	.word	0xe000ed00

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	6039      	str	r1, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db0a      	blt.n	80046ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <__NVIC_SetPriority+0x4c>)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	0112      	lsls	r2, r2, #4
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	440b      	add	r3, r1
 80046c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c8:	e00a      	b.n	80046e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4908      	ldr	r1, [pc, #32]	; (80046f0 <__NVIC_SetPriority+0x50>)
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3b04      	subs	r3, #4
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	440b      	add	r3, r1
 80046de:	761a      	strb	r2, [r3, #24]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	e000e100 	.word	0xe000e100
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f1c3 0307 	rsb	r3, r3, #7
 800470e:	2b04      	cmp	r3, #4
 8004710:	bf28      	it	cs
 8004712:	2304      	movcs	r3, #4
 8004714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3304      	adds	r3, #4
 800471a:	2b06      	cmp	r3, #6
 800471c:	d902      	bls.n	8004724 <NVIC_EncodePriority+0x30>
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3b03      	subs	r3, #3
 8004722:	e000      	b.n	8004726 <NVIC_EncodePriority+0x32>
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	f04f 32ff 	mov.w	r2, #4294967295
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	401a      	ands	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800473c:	f04f 31ff 	mov.w	r1, #4294967295
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43d9      	mvns	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800474c:	4313      	orrs	r3, r2
         );
}
 800474e:	4618      	mov	r0, r3
 8004750:	3724      	adds	r7, #36	; 0x24
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3b01      	subs	r3, #1
 8004768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800476c:	d301      	bcc.n	8004772 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800476e:	2301      	movs	r3, #1
 8004770:	e00f      	b.n	8004792 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <SysTick_Config+0x40>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477a:	210f      	movs	r1, #15
 800477c:	f04f 30ff 	mov.w	r0, #4294967295
 8004780:	f7ff ff8e 	bl	80046a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <SysTick_Config+0x40>)
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <SysTick_Config+0x40>)
 800478c:	2207      	movs	r2, #7
 800478e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	e000e010 	.word	0xe000e010

080047a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff29 	bl	8004600 <__NVIC_SetPriorityGrouping>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	4603      	mov	r3, r0
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047c8:	f7ff ff3e 	bl	8004648 <__NVIC_GetPriorityGrouping>
 80047cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	6978      	ldr	r0, [r7, #20]
 80047d4:	f7ff ff8e 	bl	80046f4 <NVIC_EncodePriority>
 80047d8:	4602      	mov	r2, r0
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff5d 	bl	80046a0 <__NVIC_SetPriority>
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	4603      	mov	r3, r0
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff31 	bl	8004664 <__NVIC_EnableIRQ>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffa2 	bl	800475c <SysTick_Config>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004830:	2b02      	cmp	r3, #2
 8004832:	d008      	beq.n	8004846 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e020      	b.n	8004888 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 020e 	bic.w	r2, r2, #14
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f202 	lsl.w	r2, r1, r2
 8004874:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d005      	beq.n	80048b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e027      	b.n	8004906 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 020e 	bic.w	r2, r2, #14
 80048c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	2101      	movs	r1, #1
 80048e0:	fa01 f202 	lsl.w	r2, r1, r2
 80048e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
    } 
  }
  return status;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800491e:	e154      	b.n	8004bca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	4013      	ands	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8146 	beq.w	8004bc4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d005      	beq.n	8004950 <HAL_GPIO_Init+0x40>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d130      	bne.n	80049b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	2203      	movs	r2, #3
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004986:	2201      	movs	r2, #1
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4013      	ands	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	091b      	lsrs	r3, r3, #4
 800499c:	f003 0201 	and.w	r2, r3, #1
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d017      	beq.n	80049ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	2203      	movs	r2, #3
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4013      	ands	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d123      	bne.n	8004a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	08da      	lsrs	r2, r3, #3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3208      	adds	r2, #8
 8004a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	220f      	movs	r2, #15
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	08da      	lsrs	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3208      	adds	r2, #8
 8004a3c:	6939      	ldr	r1, [r7, #16]
 8004a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 0203 	and.w	r2, r3, #3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 80a0 	beq.w	8004bc4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a84:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <HAL_GPIO_Init+0x2d8>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	4a57      	ldr	r2, [pc, #348]	; (8004be8 <HAL_GPIO_Init+0x2d8>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6193      	str	r3, [r2, #24]
 8004a90:	4b55      	ldr	r3, [pc, #340]	; (8004be8 <HAL_GPIO_Init+0x2d8>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a9c:	4a53      	ldr	r2, [pc, #332]	; (8004bec <HAL_GPIO_Init+0x2dc>)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	3302      	adds	r3, #2
 8004aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4013      	ands	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ac6:	d019      	beq.n	8004afc <HAL_GPIO_Init+0x1ec>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a49      	ldr	r2, [pc, #292]	; (8004bf0 <HAL_GPIO_Init+0x2e0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_GPIO_Init+0x1e8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a48      	ldr	r2, [pc, #288]	; (8004bf4 <HAL_GPIO_Init+0x2e4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00d      	beq.n	8004af4 <HAL_GPIO_Init+0x1e4>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a47      	ldr	r2, [pc, #284]	; (8004bf8 <HAL_GPIO_Init+0x2e8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <HAL_GPIO_Init+0x1e0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a46      	ldr	r2, [pc, #280]	; (8004bfc <HAL_GPIO_Init+0x2ec>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d101      	bne.n	8004aec <HAL_GPIO_Init+0x1dc>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	e008      	b.n	8004afe <HAL_GPIO_Init+0x1ee>
 8004aec:	2305      	movs	r3, #5
 8004aee:	e006      	b.n	8004afe <HAL_GPIO_Init+0x1ee>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e004      	b.n	8004afe <HAL_GPIO_Init+0x1ee>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e002      	b.n	8004afe <HAL_GPIO_Init+0x1ee>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_GPIO_Init+0x1ee>
 8004afc:	2300      	movs	r3, #0
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	f002 0203 	and.w	r2, r2, #3
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	4093      	lsls	r3, r2
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004b0e:	4937      	ldr	r1, [pc, #220]	; (8004bec <HAL_GPIO_Init+0x2dc>)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b1c:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004b40:	4a2f      	ldr	r2, [pc, #188]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b6a:	4a25      	ldr	r2, [pc, #148]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b70:	4b23      	ldr	r3, [pc, #140]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004bbe:	4a10      	ldr	r2, [pc, #64]	; (8004c00 <HAL_GPIO_Init+0x2f0>)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f47f aea3 	bne.w	8004920 <HAL_GPIO_Init+0x10>
  }
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	40021000 	.word	0x40021000
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	48000400 	.word	0x48000400
 8004bf4:	48000800 	.word	0x48000800
 8004bf8:	48000c00 	.word	0x48000c00
 8004bfc:	48001000 	.word	0x48001000
 8004c00:	40010400 	.word	0x40010400

08004c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	807b      	strh	r3, [r7, #2]
 8004c10:	4613      	mov	r3, r2
 8004c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c14:	787b      	ldrb	r3, [r7, #1]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c20:	e002      	b.n	8004c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	041a      	lsls	r2, r3, #16
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43d9      	mvns	r1, r3
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	400b      	ands	r3, r1
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	619a      	str	r2, [r3, #24]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c72:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c7e:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd fa24 	bl	80020d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40010400 	.word	0x40010400

08004c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e081      	b.n	8004dae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fd6c 	bl	800279c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e006      	b.n	8004d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d104      	bne.n	8004d32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d138      	bne.n	8004e3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e032      	b.n	8004e40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2224      	movs	r2, #36	; 0x24
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e000      	b.n	8004e40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d139      	bne.n	8004ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e033      	b.n	8004ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee6:	b08b      	sub	sp, #44	; 0x2c
 8004ee8:	af06      	add	r7, sp, #24
 8004eea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0c4      	b.n	8005080 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fd fe62 	bl	8002bd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2203      	movs	r2, #3
 8004f14:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f004 f814 	bl	8008f4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	e040      	b.n	8004faa <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	3301      	adds	r3, #1
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3303      	adds	r3, #3
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	3338      	adds	r3, #56	; 0x38
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f7c:	7bfa      	ldrb	r2, [r7, #15]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	440b      	add	r3, r1
 8004f8a:	333c      	adds	r3, #60	; 0x3c
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3340      	adds	r3, #64	; 0x40
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3b9      	bcc.n	8004f28 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	e044      	b.n	8005044 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004fd0:	7bfa      	ldrb	r2, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	440b      	add	r3, r1
 8004fde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fe2:	7bfa      	ldrb	r2, [r7, #15]
 8004fe4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	440b      	add	r3, r1
 8005036:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	3301      	adds	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3b5      	bcc.n	8004fba <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	687e      	ldr	r6, [r7, #4]
 8005056:	466d      	mov	r5, sp
 8005058:	f106 0410 	add.w	r4, r6, #16
 800505c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	1d33      	adds	r3, r6, #4
 8005066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005068:	6838      	ldr	r0, [r7, #0]
 800506a:	f003 ff89 	bl	8008f80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800508e:	af00      	add	r7, sp, #0
 8005090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005098:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f001 b823 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 817d 	beq.w	80053be <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050c4:	4bbc      	ldr	r3, [pc, #752]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d00c      	beq.n	80050ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050d0:	4bb9      	ldr	r3, [pc, #740]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d15c      	bne.n	8005196 <HAL_RCC_OscConfig+0x10e>
 80050dc:	4bb6      	ldr	r3, [pc, #728]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e8:	d155      	bne.n	8005196 <HAL_RCC_OscConfig+0x10e>
 80050ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050ee:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80050f6:	fa93 f3a3 	rbit	r3, r3
 80050fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_OscConfig+0x94>
 8005116:	4ba8      	ldr	r3, [pc, #672]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e015      	b.n	8005148 <HAL_RCC_OscConfig+0xc0>
 800511c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005120:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005134:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005138:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800513c:	fa93 f3a3 	rbit	r3, r3
 8005140:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005144:	4b9c      	ldr	r3, [pc, #624]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800514c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005150:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800515c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005160:	fab2 f282 	clz	r2, r2
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	f042 0220 	orr.w	r2, r2, #32
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	f002 021f 	and.w	r2, r2, #31
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f202 	lsl.w	r2, r1, r2
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 811f 	beq.w	80053bc <HAL_RCC_OscConfig+0x334>
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 8116 	bne.w	80053bc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f000 bfaf 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x12e>
 80051a8:	4b83      	ldr	r3, [pc, #524]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a82      	ldr	r2, [pc, #520]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	e036      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 80051b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x158>
 80051c6:	4b7c      	ldr	r3, [pc, #496]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7b      	ldr	r2, [pc, #492]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a78      	ldr	r2, [pc, #480]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e021      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051f0:	d10c      	bne.n	800520c <HAL_RCC_OscConfig+0x184>
 80051f2:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a70      	ldr	r2, [pc, #448]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80051f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	4b6e      	ldr	r3, [pc, #440]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6d      	ldr	r2, [pc, #436]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0x19c>
 800520c:	4b6a      	ldr	r3, [pc, #424]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a69      	ldr	r2, [pc, #420]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	4b67      	ldr	r3, [pc, #412]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a66      	ldr	r2, [pc, #408]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800521e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005222:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005224:	4b64      	ldr	r3, [pc, #400]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	f023 020f 	bic.w	r2, r3, #15
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	495f      	ldr	r1, [pc, #380]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800523a:	4313      	orrs	r3, r2
 800523c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800523e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d059      	beq.n	8005302 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524e:	f7fd fed3 	bl	8002ff8 <HAL_GetTick>
 8005252:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	e00a      	b.n	800526e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005258:	f7fd fece 	bl	8002ff8 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b64      	cmp	r3, #100	; 0x64
 8005266:	d902      	bls.n	800526e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	f000 bf43 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 800526e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005272:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005282:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_OscConfig+0x218>
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	e015      	b.n	80052cc <HAL_RCC_OscConfig+0x244>
 80052a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80052b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052b8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80052bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80052c0:	fa93 f3a3 	rbit	r3, r3
 80052c4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80052c8:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052d0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80052d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80052d8:	fa92 f2a2 	rbit	r2, r2
 80052dc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80052e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80052e4:	fab2 f282 	clz	r2, r2
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	f042 0220 	orr.w	r2, r2, #32
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	f002 021f 	and.w	r2, r2, #31
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f202 	lsl.w	r2, r1, r2
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ab      	beq.n	8005258 <HAL_RCC_OscConfig+0x1d0>
 8005300:	e05d      	b.n	80053be <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fd fe79 	bl	8002ff8 <HAL_GetTick>
 8005306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530c:	f7fd fe74 	bl	8002ff8 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b64      	cmp	r3, #100	; 0x64
 800531a:	d902      	bls.n	8005322 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	f000 bee9 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005326:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800532e:	fa93 f3a3 	rbit	r3, r3
 8005332:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005336:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	b2db      	uxtb	r3, r3
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_RCC_OscConfig+0x2cc>
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	e015      	b.n	8005380 <HAL_RCC_OscConfig+0x2f8>
 8005354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005358:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005360:	fa93 f3a3 	rbit	r3, r3
 8005364:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800536c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005370:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005374:	fa93 f3a3 	rbit	r3, r3
 8005378:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <HAL_RCC_OscConfig+0x330>)
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005384:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005388:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800538c:	fa92 f2a2 	rbit	r2, r2
 8005390:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005394:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005398:	fab2 f282 	clz	r2, r2
 800539c:	b2d2      	uxtb	r2, r2
 800539e:	f042 0220 	orr.w	r2, r2, #32
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	f002 021f 	and.w	r2, r2, #31
 80053a8:	2101      	movs	r1, #1
 80053aa:	fa01 f202 	lsl.w	r2, r1, r2
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ab      	bne.n	800530c <HAL_RCC_OscConfig+0x284>
 80053b4:	e003      	b.n	80053be <HAL_RCC_OscConfig+0x336>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 817d 	beq.w	80056ce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053d4:	4ba6      	ldr	r3, [pc, #664]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053e0:	4ba3      	ldr	r3, [pc, #652]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d172      	bne.n	80054d2 <HAL_RCC_OscConfig+0x44a>
 80053ec:	4ba0      	ldr	r3, [pc, #640]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d16c      	bne.n	80054d2 <HAL_RCC_OscConfig+0x44a>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fe:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800540a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d102      	bne.n	8005428 <HAL_RCC_OscConfig+0x3a0>
 8005422:	4b93      	ldr	r3, [pc, #588]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	e013      	b.n	8005450 <HAL_RCC_OscConfig+0x3c8>
 8005428:	2302      	movs	r3, #2
 800542a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005432:	fa93 f3a3 	rbit	r3, r3
 8005436:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800543a:	2302      	movs	r3, #2
 800543c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005440:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005444:	fa93 f3a3 	rbit	r3, r3
 8005448:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	2202      	movs	r2, #2
 8005452:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005456:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800545a:	fa92 f2a2 	rbit	r2, r2
 800545e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005462:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005466:	fab2 f282 	clz	r2, r2
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	f042 0220 	orr.w	r2, r2, #32
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	f002 021f 	and.w	r2, r2, #31
 8005476:	2101      	movs	r1, #1
 8005478:	fa01 f202 	lsl.w	r2, r1, r2
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCC_OscConfig+0x410>
 8005482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d002      	beq.n	8005498 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f000 be2e 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b75      	ldr	r3, [pc, #468]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	21f8      	movs	r1, #248	; 0xf8
 80054ae:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80054b6:	fa91 f1a1 	rbit	r1, r1
 80054ba:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80054be:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80054c2:	fab1 f181 	clz	r1, r1
 80054c6:	b2c9      	uxtb	r1, r1
 80054c8:	408b      	lsls	r3, r1
 80054ca:	4969      	ldr	r1, [pc, #420]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d0:	e0fd      	b.n	80056ce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8088 	beq.w	80055f4 <HAL_RCC_OscConfig+0x56c>
 80054e4:	2301      	movs	r3, #1
 80054e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80054ee:	fa93 f3a3 	rbit	r3, r3
 80054f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80054f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fa:	fab3 f383 	clz	r3, r3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005504:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	461a      	mov	r2, r3
 800550c:	2301      	movs	r3, #1
 800550e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fd fd72 	bl	8002ff8 <HAL_GetTick>
 8005514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551a:	f7fd fd6d 	bl	8002ff8 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d902      	bls.n	8005530 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	f000 bde2 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005530:	2302      	movs	r3, #2
 8005532:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005542:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d102      	bne.n	8005560 <HAL_RCC_OscConfig+0x4d8>
 800555a:	4b45      	ldr	r3, [pc, #276]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	e013      	b.n	8005588 <HAL_RCC_OscConfig+0x500>
 8005560:	2302      	movs	r3, #2
 8005562:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800556a:	fa93 f3a3 	rbit	r3, r3
 800556e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005572:	2302      	movs	r3, #2
 8005574:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005578:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800557c:	fa93 f3a3 	rbit	r3, r3
 8005580:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005584:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2202      	movs	r2, #2
 800558a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800558e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005592:	fa92 f2a2 	rbit	r2, r2
 8005596:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800559a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800559e:	fab2 f282 	clz	r2, r2
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	f042 0220 	orr.w	r2, r2, #32
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	f002 021f 	and.w	r2, r2, #31
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f202 	lsl.w	r2, r1, r2
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0af      	beq.n	800551a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ba:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	21f8      	movs	r1, #248	; 0xf8
 80055d0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80055d8:	fa91 f1a1 	rbit	r1, r1
 80055dc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80055e0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80055e4:	fab1 f181 	clz	r1, r1
 80055e8:	b2c9      	uxtb	r1, r1
 80055ea:	408b      	lsls	r3, r1
 80055ec:	4920      	ldr	r1, [pc, #128]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
 80055f2:	e06c      	b.n	80056ce <HAL_RCC_OscConfig+0x646>
 80055f4:	2301      	movs	r3, #1
 80055f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005606:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005620:	f7fd fcea 	bl	8002ff8 <HAL_GetTick>
 8005624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562a:	f7fd fce5 	bl	8002ff8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d902      	bls.n	8005640 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	f000 bd5a 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005640:	2302      	movs	r3, #2
 8005642:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800564a:	fa93 f3a3 	rbit	r3, r3
 800564e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005656:	fab3 f383 	clz	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d104      	bne.n	8005674 <HAL_RCC_OscConfig+0x5ec>
 800566a:	4b01      	ldr	r3, [pc, #4]	; (8005670 <HAL_RCC_OscConfig+0x5e8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	e015      	b.n	800569c <HAL_RCC_OscConfig+0x614>
 8005670:	40021000 	.word	0x40021000
 8005674:	2302      	movs	r3, #2
 8005676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800567a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800567e:	fa93 f3a3 	rbit	r3, r3
 8005682:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005686:	2302      	movs	r3, #2
 8005688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800568c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005690:	fa93 f3a3 	rbit	r3, r3
 8005694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005698:	4bc8      	ldr	r3, [pc, #800]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2202      	movs	r2, #2
 800569e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80056a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80056a6:	fa92 f2a2 	rbit	r2, r2
 80056aa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80056ae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80056b2:	fab2 f282 	clz	r2, r2
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	f002 021f 	and.w	r2, r2, #31
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f202 	lsl.w	r2, r1, r2
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1ad      	bne.n	800562a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8110 	beq.w	8005904 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d079      	beq.n	80057e8 <HAL_RCC_OscConfig+0x760>
 80056f4:	2301      	movs	r3, #1
 80056f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	4bab      	ldr	r3, [pc, #684]	; (80059c0 <HAL_RCC_OscConfig+0x938>)
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	461a      	mov	r2, r3
 800571a:	2301      	movs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fd fc6b 	bl	8002ff8 <HAL_GetTick>
 8005722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005726:	e00a      	b.n	800573e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005728:	f7fd fc66 	bl	8002ff8 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d902      	bls.n	800573e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	f000 bcdb 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 800573e:	2302      	movs	r3, #2
 8005740:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005754:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005758:	2202      	movs	r2, #2
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005760:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	fa93 f2a3 	rbit	r2, r3
 800576a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	2202      	movs	r2, #2
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	fa93 f2a3 	rbit	r2, r3
 800578e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005796:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 800579a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057a4:	2102      	movs	r1, #2
 80057a6:	6019      	str	r1, [r3, #0]
 80057a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	fa93 f1a3 	rbit	r1, r3
 80057b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057be:	6019      	str	r1, [r3, #0]
  return result;
 80057c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	2101      	movs	r1, #1
 80057dc:	fa01 f303 	lsl.w	r3, r1, r3
 80057e0:	4013      	ands	r3, r2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0a0      	beq.n	8005728 <HAL_RCC_OscConfig+0x6a0>
 80057e6:	e08d      	b.n	8005904 <HAL_RCC_OscConfig+0x87c>
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	fa93 f2a3 	rbit	r2, r3
 8005802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800580a:	601a      	str	r2, [r3, #0]
  return result;
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005814:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <HAL_RCC_OscConfig+0x938>)
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	461a      	mov	r2, r3
 8005826:	2300      	movs	r3, #0
 8005828:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582a:	f7fd fbe5 	bl	8002ff8 <HAL_GetTick>
 800582e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005832:	e00a      	b.n	800584a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005834:	f7fd fbe0 	bl	8002ff8 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d902      	bls.n	800584a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	f000 bc55 	b.w	80060f4 <HAL_RCC_OscConfig+0x106c>
 800584a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005852:	2202      	movs	r2, #2
 8005854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	fa93 f2a3 	rbit	r2, r3
 8005864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005868:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005872:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005876:	2202      	movs	r2, #2
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fa93 f2a3 	rbit	r2, r3
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589a:	2202      	movs	r2, #2
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	fa93 f2a3 	rbit	r2, r3
 80058ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 80058b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058c2:	2102      	movs	r1, #2
 80058c4:	6019      	str	r1, [r3, #0]
 80058c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	fa93 f1a3 	rbit	r1, r3
 80058d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058dc:	6019      	str	r1, [r3, #0]
  return result;
 80058de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	fab3 f383 	clz	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	2101      	movs	r1, #1
 80058fa:	fa01 f303 	lsl.w	r3, r1, r3
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d197      	bne.n	8005834 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 81a1 	beq.w	8005c5c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005920:	4b26      	ldr	r3, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d116      	bne.n	800595a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	61d3      	str	r3, [r2, #28]
 8005938:	4b20      	ldr	r3, [pc, #128]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005944:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005952:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <HAL_RCC_OscConfig+0x93c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d11a      	bne.n	800599c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <HAL_RCC_OscConfig+0x93c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <HAL_RCC_OscConfig+0x93c>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fd fb41 	bl	8002ff8 <HAL_GetTick>
 8005976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597a:	e009      	b.n	8005990 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597c:	f7fd fb3c 	bl	8002ff8 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e3b1      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_RCC_OscConfig+0x93c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0ef      	beq.n	800597c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_OscConfig+0x940>
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	4a02      	ldr	r2, [pc, #8]	; (80059bc <HAL_RCC_OscConfig+0x934>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6213      	str	r3, [r2, #32]
 80059b8:	e03c      	b.n	8005a34 <HAL_RCC_OscConfig+0x9ac>
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	10908120 	.word	0x10908120
 80059c4:	40007000 	.word	0x40007000
 80059c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCC_OscConfig+0x96a>
 80059d8:	4bc1      	ldr	r3, [pc, #772]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4ac0      	ldr	r2, [pc, #768]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	6213      	str	r3, [r2, #32]
 80059e4:	4bbe      	ldr	r3, [pc, #760]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	4abd      	ldr	r2, [pc, #756]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 80059ea:	f023 0304 	bic.w	r3, r3, #4
 80059ee:	6213      	str	r3, [r2, #32]
 80059f0:	e020      	b.n	8005a34 <HAL_RCC_OscConfig+0x9ac>
 80059f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x994>
 8005a02:	4bb7      	ldr	r3, [pc, #732]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	4ab6      	ldr	r2, [pc, #728]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a08:	f043 0304 	orr.w	r3, r3, #4
 8005a0c:	6213      	str	r3, [r2, #32]
 8005a0e:	4bb4      	ldr	r3, [pc, #720]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4ab3      	ldr	r2, [pc, #716]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6213      	str	r3, [r2, #32]
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0x9ac>
 8005a1c:	4bb0      	ldr	r3, [pc, #704]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4aaf      	ldr	r2, [pc, #700]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6213      	str	r3, [r2, #32]
 8005a28:	4bad      	ldr	r3, [pc, #692]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	4aac      	ldr	r2, [pc, #688]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005a2e:	f023 0304 	bic.w	r3, r3, #4
 8005a32:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8081 	beq.w	8005b48 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a46:	f7fd fad7 	bl	8002ff8 <HAL_GetTick>
 8005a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a50:	f7fd fad2 	bl	8002ff8 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e345      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005a70:	2202      	movs	r2, #2
 8005a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	fa93 f2a3 	rbit	r2, r3
 8005a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005a94:	2202      	movs	r2, #2
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	fa93 f2a3 	rbit	r2, r3
 8005aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aaa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005aae:	601a      	str	r2, [r3, #0]
  return result;
 8005ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005ab8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aba:	fab3 f383 	clz	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCC_OscConfig+0xa4c>
 8005ace:	4b84      	ldr	r3, [pc, #528]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	e013      	b.n	8005afc <HAL_RCC_OscConfig+0xa74>
 8005ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005adc:	2202      	movs	r2, #2
 8005ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ae4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	fa93 f2a3 	rbit	r2, r3
 8005aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	4b79      	ldr	r3, [pc, #484]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005b04:	2102      	movs	r1, #2
 8005b06:	6011      	str	r1, [r2, #0]
 8005b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	fa92 f1a2 	rbit	r1, r2
 8005b16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005b1e:	6011      	str	r1, [r2, #0]
  return result;
 8005b20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005b24:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	fab2 f282 	clz	r2, r2
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	f002 021f 	and.w	r2, r2, #31
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d084      	beq.n	8005a50 <HAL_RCC_OscConfig+0x9c8>
 8005b46:	e07f      	b.n	8005c48 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b48:	f7fd fa56 	bl	8002ff8 <HAL_GetTick>
 8005b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b50:	e00b      	b.n	8005b6a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b52:	f7fd fa51 	bl	8002ff8 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e2c4      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005b72:	2202      	movs	r2, #2
 8005b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	fa93 f2a3 	rbit	r2, r3
 8005b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005b96:	2202      	movs	r2, #2
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	fa93 f2a3 	rbit	r2, r3
 8005ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005bb0:	601a      	str	r2, [r3, #0]
  return result;
 8005bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005bba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bbc:	fab3 f383 	clz	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f043 0302 	orr.w	r3, r3, #2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d102      	bne.n	8005bd6 <HAL_RCC_OscConfig+0xb4e>
 8005bd0:	4b43      	ldr	r3, [pc, #268]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	e013      	b.n	8005bfe <HAL_RCC_OscConfig+0xb76>
 8005bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005bde:	2202      	movs	r2, #2
 8005be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	fa93 f2a3 	rbit	r2, r3
 8005bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005c06:	2102      	movs	r1, #2
 8005c08:	6011      	str	r1, [r2, #0]
 8005c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	fa92 f1a2 	rbit	r1, r2
 8005c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c20:	6011      	str	r1, [r2, #0]
  return result;
 8005c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c26:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	fab2 f282 	clz	r2, r2
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	f002 021f 	and.w	r2, r2, #31
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d184      	bne.n	8005b52 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c50:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	4a22      	ldr	r2, [pc, #136]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8242 	beq.w	80060f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ce0 <HAL_RCC_OscConfig+0xc58>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	f000 8213 	beq.w	80060a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	f040 8162 	bne.w	8005f52 <HAL_RCC_OscConfig+0xeca>
 8005c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c92:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	fa93 f2a3 	rbit	r2, r3
 8005caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005cb2:	601a      	str	r2, [r3, #0]
  return result;
 8005cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005cbc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd4:	f7fd f990 	bl	8002ff8 <HAL_GetTick>
 8005cd8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cdc:	e00c      	b.n	8005cf8 <HAL_RCC_OscConfig+0xc70>
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce4:	f7fd f988 	bl	8002ff8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1fd      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	fa93 f2a3 	rbit	r2, r3
 8005d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d18:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005d1c:	601a      	str	r2, [r3, #0]
  return result;
 8005d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d22:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005d26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d28:	fab3 f383 	clz	r3, r3
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d102      	bne.n	8005d42 <HAL_RCC_OscConfig+0xcba>
 8005d3c:	4bb0      	ldr	r3, [pc, #704]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	e027      	b.n	8005d92 <HAL_RCC_OscConfig+0xd0a>
 8005d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	fa93 f2a3 	rbit	r2, r3
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	fa93 f2a3 	rbit	r2, r3
 8005d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d88:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	4b9c      	ldr	r3, [pc, #624]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d96:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005d9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005d9e:	6011      	str	r1, [r2, #0]
 8005da0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005da4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	fa92 f1a2 	rbit	r1, r2
 8005dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005db2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005db6:	6011      	str	r1, [r2, #0]
  return result;
 8005db8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dbc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	fab2 f282 	clz	r2, r2
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	f042 0220 	orr.w	r2, r2, #32
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	f002 021f 	and.w	r2, r2, #31
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d182      	bne.n	8005ce4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dde:	4b88      	ldr	r3, [pc, #544]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	497f      	ldr	r1, [pc, #508]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	604b      	str	r3, [r1, #4]
 8005e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e0a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e18:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	fa93 f2a3 	rbit	r2, r3
 8005e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e2a:	601a      	str	r2, [r3, #0]
  return result;
 8005e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e30:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e34:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e36:	fab3 f383 	clz	r3, r3
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	461a      	mov	r2, r3
 8005e48:	2301      	movs	r3, #1
 8005e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4c:	f7fd f8d4 	bl	8002ff8 <HAL_GetTick>
 8005e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e54:	e009      	b.n	8005e6a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e56:	f7fd f8cf 	bl	8002ff8 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e144      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	fa93 f2a3 	rbit	r2, r3
 8005e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e8e:	601a      	str	r2, [r3, #0]
  return result;
 8005e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e94:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005e98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d102      	bne.n	8005eb4 <HAL_RCC_OscConfig+0xe2c>
 8005eae:	4b54      	ldr	r3, [pc, #336]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	e027      	b.n	8005f04 <HAL_RCC_OscConfig+0xe7c>
 8005eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	fa93 f2a3 	rbit	r2, r3
 8005ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ede:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	fa93 f2a3 	rbit	r2, r3
 8005ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f08:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f10:	6011      	str	r1, [r2, #0]
 8005f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f16:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	fa92 f1a2 	rbit	r1, r2
 8005f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f24:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f28:	6011      	str	r1, [r2, #0]
  return result;
 8005f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f2e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	fab2 f282 	clz	r2, r2
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	f042 0220 	orr.w	r2, r2, #32
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	f002 021f 	and.w	r2, r2, #31
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d082      	beq.n	8005e56 <HAL_RCC_OscConfig+0xdce>
 8005f50:	e0cf      	b.n	80060f2 <HAL_RCC_OscConfig+0x106a>
 8005f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f56:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	fa93 f2a3 	rbit	r2, r3
 8005f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f76:	601a      	str	r2, [r3, #0]
  return result;
 8005f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005f80:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fd f82e 	bl	8002ff8 <HAL_GetTick>
 8005f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa0:	e009      	b.n	8005fb6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fd f829 	bl	8002ff8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d901      	bls.n	8005fb6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e09e      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
 8005fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fba:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	fa93 f2a3 	rbit	r2, r3
 8005fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005fda:	601a      	str	r2, [r3, #0]
  return result;
 8005fdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005fe4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fe6:	fab3 f383 	clz	r3, r3
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f043 0301 	orr.w	r3, r3, #1
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d104      	bne.n	8006004 <HAL_RCC_OscConfig+0xf7c>
 8005ffa:	4b01      	ldr	r3, [pc, #4]	; (8006000 <HAL_RCC_OscConfig+0xf78>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	e029      	b.n	8006054 <HAL_RCC_OscConfig+0xfcc>
 8006000:	40021000 	.word	0x40021000
 8006004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006008:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800600c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006016:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	fa93 f2a3 	rbit	r2, r3
 8006020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006024:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	fa93 f2a3 	rbit	r2, r3
 8006046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <HAL_RCC_OscConfig+0x1078>)
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006058:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800605c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006060:	6011      	str	r1, [r2, #0]
 8006062:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006066:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	fa92 f1a2 	rbit	r1, r2
 8006070:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006074:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006078:	6011      	str	r1, [r2, #0]
  return result;
 800607a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800607e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	fab2 f282 	clz	r2, r2
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	f042 0220 	orr.w	r2, r2, #32
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	f002 021f 	and.w	r2, r2, #31
 8006094:	2101      	movs	r1, #1
 8006096:	fa01 f202 	lsl.w	r2, r1, r2
 800609a:	4013      	ands	r3, r2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d180      	bne.n	8005fa2 <HAL_RCC_OscConfig+0xf1a>
 80060a0:	e027      	b.n	80060f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e01e      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <HAL_RCC_OscConfig+0x1078>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80060be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80060c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d10b      	bne.n	80060ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80060d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80060da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d001      	beq.n	80060f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000

08006104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b09e      	sub	sp, #120	; 0x78
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e162      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800611c:	4b90      	ldr	r3, [pc, #576]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d910      	bls.n	800614c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b8d      	ldr	r3, [pc, #564]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f023 0207 	bic.w	r2, r3, #7
 8006132:	498b      	ldr	r1, [pc, #556]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b89      	ldr	r3, [pc, #548]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e14a      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006158:	4b82      	ldr	r3, [pc, #520]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	497f      	ldr	r1, [pc, #508]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 8006166:	4313      	orrs	r3, r2
 8006168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80dc 	beq.w	8006330 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d13c      	bne.n	80061fa <HAL_RCC_ClockConfig+0xf6>
 8006180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006184:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006188:	fa93 f3a3 	rbit	r3, r3
 800618c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800618e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006190:	fab3 f383 	clz	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d102      	bne.n	80061aa <HAL_RCC_ClockConfig+0xa6>
 80061a4:	4b6f      	ldr	r3, [pc, #444]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	e00f      	b.n	80061ca <HAL_RCC_ClockConfig+0xc6>
 80061aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061b2:	fa93 f3a3 	rbit	r3, r3
 80061b6:	667b      	str	r3, [r7, #100]	; 0x64
 80061b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061bc:	663b      	str	r3, [r7, #96]	; 0x60
 80061be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c6:	4b67      	ldr	r3, [pc, #412]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80061d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061d2:	fa92 f2a2 	rbit	r2, r2
 80061d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80061d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061da:	fab2 f282 	clz	r2, r2
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	f042 0220 	orr.w	r2, r2, #32
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	f002 021f 	and.w	r2, r2, #31
 80061ea:	2101      	movs	r1, #1
 80061ec:	fa01 f202 	lsl.w	r2, r1, r2
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d17b      	bne.n	80062ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0f3      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d13c      	bne.n	800627c <HAL_RCC_ClockConfig+0x178>
 8006202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620a:	fa93 f3a3 	rbit	r3, r3
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	fab3 f383 	clz	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	b2db      	uxtb	r3, r3
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d102      	bne.n	800622c <HAL_RCC_ClockConfig+0x128>
 8006226:	4b4f      	ldr	r3, [pc, #316]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	e00f      	b.n	800624c <HAL_RCC_ClockConfig+0x148>
 800622c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006234:	fa93 f3a3 	rbit	r3, r3
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
 800623a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800623e:	643b      	str	r3, [r7, #64]	; 0x40
 8006240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006248:	4b46      	ldr	r3, [pc, #280]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006250:	63ba      	str	r2, [r7, #56]	; 0x38
 8006252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006254:	fa92 f2a2 	rbit	r2, r2
 8006258:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800625a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800625c:	fab2 f282 	clz	r2, r2
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	f042 0220 	orr.w	r2, r2, #32
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	f002 021f 	and.w	r2, r2, #31
 800626c:	2101      	movs	r1, #1
 800626e:	fa01 f202 	lsl.w	r2, r1, r2
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d13a      	bne.n	80062ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0b2      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
 800627c:	2302      	movs	r3, #2
 800627e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	fa93 f3a3 	rbit	r3, r3
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b01      	cmp	r3, #1
 800629c:	d102      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x1a0>
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	e00d      	b.n	80062c0 <HAL_RCC_ClockConfig+0x1bc>
 80062a4:	2302      	movs	r3, #2
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
 80062b0:	2302      	movs	r3, #2
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	4b29      	ldr	r3, [pc, #164]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2202      	movs	r2, #2
 80062c2:	61ba      	str	r2, [r7, #24]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	fa92 f2a2 	rbit	r2, r2
 80062ca:	617a      	str	r2, [r7, #20]
  return result;
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	fab2 f282 	clz	r2, r2
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	f042 0220 	orr.w	r2, r2, #32
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	f002 021f 	and.w	r2, r2, #31
 80062de:	2101      	movs	r1, #1
 80062e0:	fa01 f202 	lsl.w	r2, r1, r2
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e079      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f023 0203 	bic.w	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	491a      	ldr	r1, [pc, #104]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006300:	f7fc fe7a 	bl	8002ff8 <HAL_GetTick>
 8006304:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	e00a      	b.n	800631e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006308:	f7fc fe76 	bl	8002ff8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e061      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631e:	4b11      	ldr	r3, [pc, #68]	; (8006364 <HAL_RCC_ClockConfig+0x260>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f003 020c 	and.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	429a      	cmp	r2, r3
 800632e:	d1eb      	bne.n	8006308 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d214      	bcs.n	8006368 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b08      	ldr	r3, [pc, #32]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 0207 	bic.w	r2, r3, #7
 8006346:	4906      	ldr	r1, [pc, #24]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	4313      	orrs	r3, r2
 800634c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <HAL_RCC_ClockConfig+0x25c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d005      	beq.n	8006368 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e040      	b.n	80063e2 <HAL_RCC_ClockConfig+0x2de>
 8006360:	40022000 	.word	0x40022000
 8006364:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCC_ClockConfig+0x2e8>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	491a      	ldr	r1, [pc, #104]	; (80063ec <HAL_RCC_ClockConfig+0x2e8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006392:	4b16      	ldr	r3, [pc, #88]	; (80063ec <HAL_RCC_ClockConfig+0x2e8>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4912      	ldr	r1, [pc, #72]	; (80063ec <HAL_RCC_ClockConfig+0x2e8>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80063a6:	f000 f829 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80063aa:	4601      	mov	r1, r0
 80063ac:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <HAL_RCC_ClockConfig+0x2e8>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b4:	22f0      	movs	r2, #240	; 0xf0
 80063b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	fa92 f2a2 	rbit	r2, r2
 80063be:	60fa      	str	r2, [r7, #12]
  return result;
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	fab2 f282 	clz	r2, r2
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	40d3      	lsrs	r3, r2
 80063ca:	4a09      	ldr	r2, [pc, #36]	; (80063f0 <HAL_RCC_ClockConfig+0x2ec>)
 80063cc:	5cd3      	ldrb	r3, [r2, r3]
 80063ce:	fa21 f303 	lsr.w	r3, r1, r3
 80063d2:	4a08      	ldr	r2, [pc, #32]	; (80063f4 <HAL_RCC_ClockConfig+0x2f0>)
 80063d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80063d6:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <HAL_RCC_ClockConfig+0x2f4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fc fdc8 	bl	8002f70 <HAL_InitTick>
  
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3778      	adds	r7, #120	; 0x78
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40021000 	.word	0x40021000
 80063f0:	0800ea10 	.word	0x0800ea10
 80063f4:	200000fc 	.word	0x200000fc
 80063f8:	20000100 	.word	0x20000100

080063fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b08b      	sub	sp, #44	; 0x2c
 8006400:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	2300      	movs	r3, #0
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006416:	4b29      	ldr	r3, [pc, #164]	; (80064bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	2b04      	cmp	r3, #4
 8006424:	d002      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x30>
 8006426:	2b08      	cmp	r3, #8
 8006428:	d003      	beq.n	8006432 <HAL_RCC_GetSysClockFreq+0x36>
 800642a:	e03c      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800642c:	4b24      	ldr	r3, [pc, #144]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800642e:	623b      	str	r3, [r7, #32]
      break;
 8006430:	e03c      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006438:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800643c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	fa92 f2a2 	rbit	r2, r2
 8006444:	607a      	str	r2, [r7, #4]
  return result;
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	fab2 f282 	clz	r2, r2
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	40d3      	lsrs	r3, r2
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006452:	5cd3      	ldrb	r3, [r2, r3]
 8006454:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006456:	4b19      	ldr	r3, [pc, #100]	; (80064bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	220f      	movs	r2, #15
 8006460:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	fa92 f2a2 	rbit	r2, r2
 8006468:	60fa      	str	r2, [r7, #12]
  return result;
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	fab2 f282 	clz	r2, r2
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	40d3      	lsrs	r3, r2
 8006474:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006476:	5cd3      	ldrb	r3, [r2, r3]
 8006478:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006484:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	fbb2 f2f3 	udiv	r2, r2, r3
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
 8006494:	e004      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	623b      	str	r3, [r7, #32]
      break;
 80064a4:	e002      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064a8:	623b      	str	r3, [r7, #32]
      break;
 80064aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	372c      	adds	r7, #44	; 0x2c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40021000 	.word	0x40021000
 80064c0:	007a1200 	.word	0x007a1200
 80064c4:	0800ea28 	.word	0x0800ea28
 80064c8:	0800ea38 	.word	0x0800ea38
 80064cc:	003d0900 	.word	0x003d0900

080064d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200000fc 	.word	0x200000fc

080064e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80064ee:	f7ff ffef 	bl	80064d0 <HAL_RCC_GetHCLKFreq>
 80064f2:	4601      	mov	r1, r0
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006500:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	fa92 f2a2 	rbit	r2, r2
 8006508:	603a      	str	r2, [r7, #0]
  return result;
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	fab2 f282 	clz	r2, r2
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	40d3      	lsrs	r3, r2
 8006514:	4a04      	ldr	r2, [pc, #16]	; (8006528 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006516:	5cd3      	ldrb	r3, [r2, r3]
 8006518:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40021000 	.word	0x40021000
 8006528:	0800ea20 	.word	0x0800ea20

0800652c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006532:	f7ff ffcd 	bl	80064d0 <HAL_RCC_GetHCLKFreq>
 8006536:	4601      	mov	r1, r0
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006540:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006544:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	fa92 f2a2 	rbit	r2, r2
 800654c:	603a      	str	r2, [r7, #0]
  return result;
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	fab2 f282 	clz	r2, r2
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	40d3      	lsrs	r3, r2
 8006558:	4a04      	ldr	r2, [pc, #16]	; (800656c <HAL_RCC_GetPCLK2Freq+0x40>)
 800655a:	5cd3      	ldrb	r3, [r2, r3]
 800655c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40021000 	.word	0x40021000
 800656c:	0800ea20 	.word	0x0800ea20

08006570 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b092      	sub	sp, #72	; 0x48
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006580:	2300      	movs	r3, #0
 8006582:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80d4 	beq.w	800673c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006594:	4b4e      	ldr	r3, [pc, #312]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10e      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	4a4a      	ldr	r2, [pc, #296]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065aa:	61d3      	str	r3, [r2, #28]
 80065ac:	4b48      	ldr	r3, [pc, #288]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065be:	4b45      	ldr	r3, [pc, #276]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d118      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ca:	4b42      	ldr	r3, [pc, #264]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a41      	ldr	r2, [pc, #260]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065d6:	f7fc fd0f 	bl	8002ff8 <HAL_GetTick>
 80065da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065dc:	e008      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065de:	f7fc fd0b 	bl	8002ff8 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b64      	cmp	r3, #100	; 0x64
 80065ea:	d901      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e169      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f0:	4b38      	ldr	r3, [pc, #224]	; (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065fc:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006604:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8084 	beq.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006618:	429a      	cmp	r2, r3
 800661a:	d07c      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800661c:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800662a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	fa93 f3a3 	rbit	r3, r3
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006636:	fab3 f383 	clz	r3, r3
 800663a:	b2db      	uxtb	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	4b26      	ldr	r3, [pc, #152]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	461a      	mov	r2, r3
 8006646:	2301      	movs	r3, #1
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800664e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	fa93 f3a3 	rbit	r3, r3
 8006656:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800665a:	fab3 f383 	clz	r3, r3
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	461a      	mov	r2, r3
 800666a:	2300      	movs	r3, #0
 800666c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800666e:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006672:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04b      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667e:	f7fc fcbb 	bl	8002ff8 <HAL_GetTick>
 8006682:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006684:	e00a      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006686:	f7fc fcb7 	bl	8002ff8 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f241 3288 	movw	r2, #5000	; 0x1388
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e113      	b.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800669c:	2302      	movs	r3, #2
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	fa93 f3a3 	rbit	r3, r3
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	2302      	movs	r3, #2
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	fa93 f3a3 	rbit	r3, r3
 80066b2:	61fb      	str	r3, [r7, #28]
  return result;
 80066b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b6:	fab3 f383 	clz	r3, r3
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f043 0302 	orr.w	r3, r3, #2
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d108      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80066ca:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	e00d      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40007000 	.word	0x40007000
 80066d8:	10908100 	.word	0x10908100
 80066dc:	2302      	movs	r3, #2
 80066de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	4b78      	ldr	r3, [pc, #480]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2202      	movs	r2, #2
 80066ee:	613a      	str	r2, [r7, #16]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	fa92 f2a2 	rbit	r2, r2
 80066f6:	60fa      	str	r2, [r7, #12]
  return result;
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	fab2 f282 	clz	r2, r2
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	f002 021f 	and.w	r2, r2, #31
 800670a:	2101      	movs	r1, #1
 800670c:	fa01 f202 	lsl.w	r2, r1, r2
 8006710:	4013      	ands	r3, r2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0b7      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006716:	4b6d      	ldr	r3, [pc, #436]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	496a      	ldr	r1, [pc, #424]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006728:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	4a65      	ldr	r2, [pc, #404]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006748:	4b60      	ldr	r3, [pc, #384]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	f023 0203 	bic.w	r2, r3, #3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	495d      	ldr	r1, [pc, #372]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006756:	4313      	orrs	r3, r2
 8006758:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006766:	4b59      	ldr	r3, [pc, #356]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4956      	ldr	r1, [pc, #344]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006774:	4313      	orrs	r3, r2
 8006776:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0304 	and.w	r3, r3, #4
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006784:	4b51      	ldr	r3, [pc, #324]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	494e      	ldr	r1, [pc, #312]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067a2:	4b4a      	ldr	r3, [pc, #296]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f023 0210 	bic.w	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	4947      	ldr	r1, [pc, #284]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d008      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80067c0:	4b42      	ldr	r3, [pc, #264]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	493f      	ldr	r1, [pc, #252]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d008      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067de:	4b3b      	ldr	r3, [pc, #236]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	f023 0220 	bic.w	r2, r3, #32
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	4938      	ldr	r1, [pc, #224]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d008      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067fc:	4b33      	ldr	r3, [pc, #204]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	4930      	ldr	r1, [pc, #192]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800680a:	4313      	orrs	r3, r2
 800680c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800681a:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	4929      	ldr	r1, [pc, #164]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006828:	4313      	orrs	r3, r2
 800682a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006838:	4b24      	ldr	r3, [pc, #144]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	4921      	ldr	r1, [pc, #132]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b00      	cmp	r3, #0
 8006854:	d008      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006856:	4b1d      	ldr	r3, [pc, #116]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	491a      	ldr	r1, [pc, #104]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006864:	4313      	orrs	r3, r2
 8006866:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	4912      	ldr	r1, [pc, #72]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006882:	4313      	orrs	r3, r2
 8006884:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006892:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	490b      	ldr	r1, [pc, #44]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80068b0:	4b06      	ldr	r3, [pc, #24]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	4903      	ldr	r1, [pc, #12]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3748      	adds	r7, #72	; 0x48
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	40021000 	.word	0x40021000

080068d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e09d      	b.n	8006a1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d108      	bne.n	80068fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f2:	d009      	beq.n	8006908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	61da      	str	r2, [r3, #28]
 80068fa:	e005      	b.n	8006908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fb ff7e 	bl	8002824 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006948:	d902      	bls.n	8006950 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e002      	b.n	8006956 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006954:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800695e:	d007      	beq.n	8006970 <HAL_SPI_Init+0xa0>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006968:	d002      	beq.n	8006970 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	ea42 0103 	orr.w	r1, r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	0c1b      	lsrs	r3, r3, #16
 80069cc:	f003 0204 	and.w	r2, r3, #4
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069ec:	ea42 0103 	orr.w	r1, r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e049      	b.n	8006acc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fb ff2b 	bl	80028a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fd1d 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d001      	beq.n	8006aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e04a      	b.n	8006b82 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68da      	ldr	r2, [r3, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0201 	orr.w	r2, r2, #1
 8006b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d018      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d013      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <HAL_TIM_Base_Start_IT+0xc0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00e      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d009      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d004      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0x6c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a19      	ldr	r2, [pc, #100]	; (8006ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d115      	bne.n	8006b6c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	4b17      	ldr	r3, [pc, #92]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d015      	beq.n	8006b7e <HAL_TIM_Base_Start_IT+0xaa>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d011      	beq.n	8006b7e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0201 	orr.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b6a:	e008      	b.n	8006b7e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	e000      	b.n	8006b80 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	00010007 	.word	0x00010007

08006ba8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e049      	b.n	8006c4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d106      	bne.n	8006bd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7fb fed2 	bl	8002978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3304      	adds	r3, #4
 8006be4:	4619      	mov	r1, r3
 8006be6:	4610      	mov	r0, r2
 8006be8:	f000 fc5c 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <HAL_TIM_PWM_Start+0x24>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e03c      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x9e>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d109      	bne.n	8006c96 <HAL_TIM_PWM_Start+0x3e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	e02f      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x9e>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d109      	bne.n	8006cb0 <HAL_TIM_PWM_Start+0x58>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	e022      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x9e>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b0c      	cmp	r3, #12
 8006cb4:	d109      	bne.n	8006cca <HAL_TIM_PWM_Start+0x72>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	bf14      	ite	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	2300      	moveq	r3, #0
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	e015      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x9e>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d109      	bne.n	8006ce4 <HAL_TIM_PWM_Start+0x8c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e008      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e097      	b.n	8006e2e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xb6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d0c:	e023      	b.n	8006d56 <HAL_TIM_PWM_Start+0xfe>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Start+0xc6>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d1c:	e01b      	b.n	8006d56 <HAL_TIM_PWM_Start+0xfe>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Start+0xd6>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d2c:	e013      	b.n	8006d56 <HAL_TIM_PWM_Start+0xfe>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b0c      	cmp	r3, #12
 8006d32:	d104      	bne.n	8006d3e <HAL_TIM_PWM_Start+0xe6>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d3c:	e00b      	b.n	8006d56 <HAL_TIM_PWM_Start+0xfe>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d104      	bne.n	8006d4e <HAL_TIM_PWM_Start+0xf6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4c:	e003      	b.n	8006d56 <HAL_TIM_PWM_Start+0xfe>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 ffa0 	bl	8007ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a33      	ldr	r2, [pc, #204]	; (8006e38 <HAL_TIM_PWM_Start+0x1e0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x13e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a32      	ldr	r2, [pc, #200]	; (8006e3c <HAL_TIM_PWM_Start+0x1e4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x13e>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a30      	ldr	r2, [pc, #192]	; (8006e40 <HAL_TIM_PWM_Start+0x1e8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x13e>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a2f      	ldr	r2, [pc, #188]	; (8006e44 <HAL_TIM_PWM_Start+0x1ec>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_TIM_PWM_Start+0x13e>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <HAL_TIM_PWM_Start+0x1f0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d101      	bne.n	8006d9a <HAL_TIM_PWM_Start+0x142>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <HAL_TIM_PWM_Start+0x144>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a20      	ldr	r2, [pc, #128]	; (8006e38 <HAL_TIM_PWM_Start+0x1e0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_TIM_PWM_Start+0x194>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d013      	beq.n	8006dec <HAL_TIM_PWM_Start+0x194>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <HAL_TIM_PWM_Start+0x1f4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_TIM_PWM_Start+0x194>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <HAL_TIM_PWM_Start+0x1f8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_TIM_PWM_Start+0x194>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_TIM_PWM_Start+0x1e4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIM_PWM_Start+0x194>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <HAL_TIM_PWM_Start+0x1e8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d115      	bne.n	8006e18 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689a      	ldr	r2, [r3, #8]
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <HAL_TIM_PWM_Start+0x1fc>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b06      	cmp	r3, #6
 8006dfc:	d015      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x1d2>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e04:	d011      	beq.n	8006e2a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e16:	e008      	b.n	8006e2a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0201 	orr.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e000      	b.n	8006e2c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	00010007 	.word	0x00010007

08006e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d122      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d11b      	bne.n	8006eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0202 	mvn.w	r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fae3 	bl	8007466 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fad5 	bl	8007452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fae6 	bl	800747a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d122      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0304 	and.w	r3, r3, #4
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d11b      	bne.n	8006f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0204 	mvn.w	r2, #4
 8006ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fab9 	bl	8007466 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 faab 	bl	8007452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fabc 	bl	800747a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d122      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d11b      	bne.n	8006f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa8f 	bl	8007466 <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa81 	bl	8007452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa92 	bl	800747a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d122      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d11b      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2208      	movs	r2, #8
 8006f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa65 	bl	8007466 <HAL_TIM_IC_CaptureCallback>
 8006f9c:	e005      	b.n	8006faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa57 	bl	8007452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa68 	bl	800747a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d10e      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d107      	bne.n	8006fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f06f 0201 	mvn.w	r2, #1
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7fb fa32 	bl	8002440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d10e      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d107      	bne.n	8007008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 ff7c 	bl	8007f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	d10e      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007022:	2b80      	cmp	r3, #128	; 0x80
 8007024:	d107      	bne.n	8007036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800702e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 ff6f 	bl	8007f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d10e      	bne.n	8007062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d107      	bne.n	8007062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa16 	bl	800748e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b20      	cmp	r3, #32
 800706e:	d10e      	bne.n	800708e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b20      	cmp	r3, #32
 800707c:	d107      	bne.n	800708e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f06f 0220 	mvn.w	r2, #32
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 ff2f 	bl	8007eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800708e:	bf00      	nop
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
	...

08007098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0ff      	b.n	80072b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b14      	cmp	r3, #20
 80070c2:	f200 80f0 	bhi.w	80072a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	08007121 	.word	0x08007121
 80070d0:	080072a7 	.word	0x080072a7
 80070d4:	080072a7 	.word	0x080072a7
 80070d8:	080072a7 	.word	0x080072a7
 80070dc:	08007161 	.word	0x08007161
 80070e0:	080072a7 	.word	0x080072a7
 80070e4:	080072a7 	.word	0x080072a7
 80070e8:	080072a7 	.word	0x080072a7
 80070ec:	080071a3 	.word	0x080071a3
 80070f0:	080072a7 	.word	0x080072a7
 80070f4:	080072a7 	.word	0x080072a7
 80070f8:	080072a7 	.word	0x080072a7
 80070fc:	080071e3 	.word	0x080071e3
 8007100:	080072a7 	.word	0x080072a7
 8007104:	080072a7 	.word	0x080072a7
 8007108:	080072a7 	.word	0x080072a7
 800710c:	08007225 	.word	0x08007225
 8007110:	080072a7 	.word	0x080072a7
 8007114:	080072a7 	.word	0x080072a7
 8007118:	080072a7 	.word	0x080072a7
 800711c:	08007265 	.word	0x08007265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fa4c 	bl	80075c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699a      	ldr	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0208 	orr.w	r2, r2, #8
 800713a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0204 	bic.w	r2, r2, #4
 800714a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6999      	ldr	r1, [r3, #24]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	619a      	str	r2, [r3, #24]
      break;
 800715e:	e0a5      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fabc 	bl	80076e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800717a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800718a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6999      	ldr	r1, [r3, #24]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	021a      	lsls	r2, r3, #8
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	619a      	str	r2, [r3, #24]
      break;
 80071a0:	e084      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fb25 	bl	80077f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69da      	ldr	r2, [r3, #28]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0208 	orr.w	r2, r2, #8
 80071bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0204 	bic.w	r2, r2, #4
 80071cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69d9      	ldr	r1, [r3, #28]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	61da      	str	r2, [r3, #28]
      break;
 80071e0:	e064      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68b9      	ldr	r1, [r7, #8]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fb8d 	bl	8007908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69da      	ldr	r2, [r3, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69da      	ldr	r2, [r3, #28]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69d9      	ldr	r1, [r3, #28]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	021a      	lsls	r2, r3, #8
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	61da      	str	r2, [r3, #28]
      break;
 8007222:	e043      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fbd6 	bl	80079dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0208 	orr.w	r2, r2, #8
 800723e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0204 	bic.w	r2, r2, #4
 800724e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	691a      	ldr	r2, [r3, #16]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007262:	e023      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 fc1a 	bl	8007aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80072a4:	e002      	b.n	80072ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
      break;
 80072aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_ConfigClockSource+0x1c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e0b6      	b.n	800744a <HAL_TIM_ConfigClockSource+0x18a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007318:	d03e      	beq.n	8007398 <HAL_TIM_ConfigClockSource+0xd8>
 800731a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731e:	f200 8087 	bhi.w	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007326:	f000 8086 	beq.w	8007436 <HAL_TIM_ConfigClockSource+0x176>
 800732a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800732e:	d87f      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007330:	2b70      	cmp	r3, #112	; 0x70
 8007332:	d01a      	beq.n	800736a <HAL_TIM_ConfigClockSource+0xaa>
 8007334:	2b70      	cmp	r3, #112	; 0x70
 8007336:	d87b      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007338:	2b60      	cmp	r3, #96	; 0x60
 800733a:	d050      	beq.n	80073de <HAL_TIM_ConfigClockSource+0x11e>
 800733c:	2b60      	cmp	r3, #96	; 0x60
 800733e:	d877      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007340:	2b50      	cmp	r3, #80	; 0x50
 8007342:	d03c      	beq.n	80073be <HAL_TIM_ConfigClockSource+0xfe>
 8007344:	2b50      	cmp	r3, #80	; 0x50
 8007346:	d873      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d058      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0x13e>
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d86f      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007350:	2b30      	cmp	r3, #48	; 0x30
 8007352:	d064      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15e>
 8007354:	2b30      	cmp	r3, #48	; 0x30
 8007356:	d86b      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007358:	2b20      	cmp	r3, #32
 800735a:	d060      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15e>
 800735c:	2b20      	cmp	r3, #32
 800735e:	d867      	bhi.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d05c      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15e>
 8007364:	2b10      	cmp	r3, #16
 8007366:	d05a      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x15e>
 8007368:	e062      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	6899      	ldr	r1, [r3, #8]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f000 fc73 	bl	8007c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800738c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	609a      	str	r2, [r3, #8]
      break;
 8007396:	e04f      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	6899      	ldr	r1, [r3, #8]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f000 fc5c 	bl	8007c64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ba:	609a      	str	r2, [r3, #8]
      break;
 80073bc:	e03c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	461a      	mov	r2, r3
 80073cc:	f000 fbd0 	bl	8007b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2150      	movs	r1, #80	; 0x50
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fc29 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80073dc:	e02c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6859      	ldr	r1, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f000 fbef 	bl	8007bce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2160      	movs	r1, #96	; 0x60
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 fc19 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80073fc:	e01c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6859      	ldr	r1, [r3, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	461a      	mov	r2, r3
 800740c:	f000 fbb0 	bl	8007b70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2140      	movs	r1, #64	; 0x40
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fc09 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 800741c:	e00c      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f000 fc00 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 800742e:	e003      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	73fb      	strb	r3, [r7, #15]
      break;
 8007434:	e000      	b.n	8007438 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <TIM_Base_SetConfig+0x104>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00f      	beq.n	80074dc <TIM_Base_SetConfig+0x38>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c2:	d00b      	beq.n	80074dc <TIM_Base_SetConfig+0x38>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a39      	ldr	r2, [pc, #228]	; (80075ac <TIM_Base_SetConfig+0x108>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d007      	beq.n	80074dc <TIM_Base_SetConfig+0x38>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a38      	ldr	r2, [pc, #224]	; (80075b0 <TIM_Base_SetConfig+0x10c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d003      	beq.n	80074dc <TIM_Base_SetConfig+0x38>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a37      	ldr	r2, [pc, #220]	; (80075b4 <TIM_Base_SetConfig+0x110>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d108      	bne.n	80074ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2d      	ldr	r2, [pc, #180]	; (80075a8 <TIM_Base_SetConfig+0x104>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01b      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074fc:	d017      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <TIM_Base_SetConfig+0x108>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <TIM_Base_SetConfig+0x10c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <TIM_Base_SetConfig+0x110>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <TIM_Base_SetConfig+0x114>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <TIM_Base_SetConfig+0x118>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_Base_SetConfig+0x8a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <TIM_Base_SetConfig+0x11c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d108      	bne.n	8007540 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <TIM_Base_SetConfig+0x104>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00f      	beq.n	800758c <TIM_Base_SetConfig+0xe8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a11      	ldr	r2, [pc, #68]	; (80075b4 <TIM_Base_SetConfig+0x110>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_Base_SetConfig+0xe8>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a10      	ldr	r2, [pc, #64]	; (80075b8 <TIM_Base_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_Base_SetConfig+0xe8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a0f      	ldr	r2, [pc, #60]	; (80075bc <TIM_Base_SetConfig+0x118>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_Base_SetConfig+0xe8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <TIM_Base_SetConfig+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d103      	bne.n	8007594 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	615a      	str	r2, [r3, #20]
}
 800759a:	bf00      	nop
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40000400 	.word	0x40000400
 80075b0:	40000800 	.word	0x40000800
 80075b4:	40013400 	.word	0x40013400
 80075b8:	40014000 	.word	0x40014000
 80075bc:	40014400 	.word	0x40014400
 80075c0:	40014800 	.word	0x40014800

080075c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	f023 0201 	bic.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 0302 	bic.w	r3, r3, #2
 8007610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a2c      	ldr	r2, [pc, #176]	; (80076d0 <TIM_OC1_SetConfig+0x10c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00f      	beq.n	8007644 <TIM_OC1_SetConfig+0x80>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a2b      	ldr	r2, [pc, #172]	; (80076d4 <TIM_OC1_SetConfig+0x110>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_OC1_SetConfig+0x80>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <TIM_OC1_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_OC1_SetConfig+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a29      	ldr	r2, [pc, #164]	; (80076dc <TIM_OC1_SetConfig+0x118>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC1_SetConfig+0x80>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a28      	ldr	r2, [pc, #160]	; (80076e0 <TIM_OC1_SetConfig+0x11c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10c      	bne.n	800765e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f023 0308 	bic.w	r3, r3, #8
 800764a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0304 	bic.w	r3, r3, #4
 800765c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <TIM_OC1_SetConfig+0x10c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00f      	beq.n	8007686 <TIM_OC1_SetConfig+0xc2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <TIM_OC1_SetConfig+0x110>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00b      	beq.n	8007686 <TIM_OC1_SetConfig+0xc2>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_OC1_SetConfig+0x114>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d007      	beq.n	8007686 <TIM_OC1_SetConfig+0xc2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a18      	ldr	r2, [pc, #96]	; (80076dc <TIM_OC1_SetConfig+0x118>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_OC1_SetConfig+0xc2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a17      	ldr	r2, [pc, #92]	; (80076e0 <TIM_OC1_SetConfig+0x11c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d111      	bne.n	80076aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800768c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	621a      	str	r2, [r3, #32]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	40012c00 	.word	0x40012c00
 80076d4:	40013400 	.word	0x40013400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40014400 	.word	0x40014400
 80076e0:	40014800 	.word	0x40014800

080076e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0210 	bic.w	r2, r3, #16
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800771e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	021b      	lsls	r3, r3, #8
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0320 	bic.w	r3, r3, #32
 8007732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a28      	ldr	r2, [pc, #160]	; (80077e4 <TIM_OC2_SetConfig+0x100>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC2_SetConfig+0x6c>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a27      	ldr	r2, [pc, #156]	; (80077e8 <TIM_OC2_SetConfig+0x104>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10d      	bne.n	800776c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800776a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <TIM_OC2_SetConfig+0x100>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00f      	beq.n	8007794 <TIM_OC2_SetConfig+0xb0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <TIM_OC2_SetConfig+0x104>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00b      	beq.n	8007794 <TIM_OC2_SetConfig+0xb0>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <TIM_OC2_SetConfig+0x108>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d007      	beq.n	8007794 <TIM_OC2_SetConfig+0xb0>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a1a      	ldr	r2, [pc, #104]	; (80077f0 <TIM_OC2_SetConfig+0x10c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d003      	beq.n	8007794 <TIM_OC2_SetConfig+0xb0>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a19      	ldr	r2, [pc, #100]	; (80077f4 <TIM_OC2_SetConfig+0x110>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d113      	bne.n	80077bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	621a      	str	r2, [r3, #32]
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40013400 	.word	0x40013400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400
 80077f4:	40014800 	.word	0x40014800

080077f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0303 	bic.w	r3, r3, #3
 8007832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a27      	ldr	r2, [pc, #156]	; (80078f4 <TIM_OC3_SetConfig+0xfc>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d003      	beq.n	8007862 <TIM_OC3_SetConfig+0x6a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <TIM_OC3_SetConfig+0x100>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d10d      	bne.n	800787e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	4313      	orrs	r3, r2
 8007874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a1c      	ldr	r2, [pc, #112]	; (80078f4 <TIM_OC3_SetConfig+0xfc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d00f      	beq.n	80078a6 <TIM_OC3_SetConfig+0xae>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <TIM_OC3_SetConfig+0x100>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00b      	beq.n	80078a6 <TIM_OC3_SetConfig+0xae>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <TIM_OC3_SetConfig+0x104>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d007      	beq.n	80078a6 <TIM_OC3_SetConfig+0xae>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a19      	ldr	r2, [pc, #100]	; (8007900 <TIM_OC3_SetConfig+0x108>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d003      	beq.n	80078a6 <TIM_OC3_SetConfig+0xae>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a18      	ldr	r2, [pc, #96]	; (8007904 <TIM_OC3_SetConfig+0x10c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d113      	bne.n	80078ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40013400 	.word	0x40013400
 80078fc:	40014000 	.word	0x40014000
 8007900:	40014400 	.word	0x40014400
 8007904:	40014800 	.word	0x40014800

08007908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800793a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	021b      	lsls	r3, r3, #8
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4313      	orrs	r3, r2
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	031b      	lsls	r3, r3, #12
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <TIM_OC4_SetConfig+0xc0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d00f      	beq.n	800798c <TIM_OC4_SetConfig+0x84>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a17      	ldr	r2, [pc, #92]	; (80079cc <TIM_OC4_SetConfig+0xc4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_OC4_SetConfig+0x84>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a16      	ldr	r2, [pc, #88]	; (80079d0 <TIM_OC4_SetConfig+0xc8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_OC4_SetConfig+0x84>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a15      	ldr	r2, [pc, #84]	; (80079d4 <TIM_OC4_SetConfig+0xcc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_OC4_SetConfig+0x84>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <TIM_OC4_SetConfig+0xd0>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d109      	bne.n	80079a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	019b      	lsls	r3, r3, #6
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	40012c00 	.word	0x40012c00
 80079cc:	40013400 	.word	0x40013400
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800

080079dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	041b      	lsls	r3, r3, #16
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <TIM_OC5_SetConfig+0xb4>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00f      	beq.n	8007a56 <TIM_OC5_SetConfig+0x7a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a16      	ldr	r2, [pc, #88]	; (8007a94 <TIM_OC5_SetConfig+0xb8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_OC5_SetConfig+0x7a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a15      	ldr	r2, [pc, #84]	; (8007a98 <TIM_OC5_SetConfig+0xbc>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_OC5_SetConfig+0x7a>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a14      	ldr	r2, [pc, #80]	; (8007a9c <TIM_OC5_SetConfig+0xc0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_OC5_SetConfig+0x7a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <TIM_OC5_SetConfig+0xc4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d109      	bne.n	8007a6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	621a      	str	r2, [r3, #32]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	40013400 	.word	0x40013400
 8007a98:	40014000 	.word	0x40014000
 8007a9c:	40014400 	.word	0x40014400
 8007aa0:	40014800 	.word	0x40014800

08007aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	051b      	lsls	r3, r3, #20
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <TIM_OC6_SetConfig+0xb8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00f      	beq.n	8007b20 <TIM_OC6_SetConfig+0x7c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <TIM_OC6_SetConfig+0xbc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00b      	beq.n	8007b20 <TIM_OC6_SetConfig+0x7c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <TIM_OC6_SetConfig+0xc0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d007      	beq.n	8007b20 <TIM_OC6_SetConfig+0x7c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <TIM_OC6_SetConfig+0xc4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC6_SetConfig+0x7c>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a14      	ldr	r2, [pc, #80]	; (8007b6c <TIM_OC6_SetConfig+0xc8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d109      	bne.n	8007b34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	029b      	lsls	r3, r3, #10
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	621a      	str	r2, [r3, #32]
}
 8007b4e:	bf00      	nop
 8007b50:	371c      	adds	r7, #28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40013400 	.word	0x40013400
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f023 030a 	bic.w	r3, r3, #10
 8007bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b087      	sub	sp, #28
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0210 	bic.w	r2, r3, #16
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	031b      	lsls	r3, r3, #12
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f043 0307 	orr.w	r3, r3, #7
 8007c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	609a      	str	r2, [r3, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	021a      	lsls	r2, r3, #8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	609a      	str	r2, [r3, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e063      	b.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a2b      	ldr	r2, [pc, #172]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2a      	ldr	r2, [pc, #168]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d108      	bne.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d018      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7a:	d013      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a18      	ldr	r2, [pc, #96]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a12      	ldr	r2, [pc, #72]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a13      	ldr	r2, [pc, #76]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d10c      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40013400 	.word	0x40013400
 8007de4:	40000400 	.word	0x40000400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e065      	b.n	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a14      	ldr	r2, [pc, #80]	; (8007ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d115      	bne.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	051b      	lsls	r3, r3, #20
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40013400 	.word	0x40013400

08007eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e040      	b.n	8007fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fa fdf6 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	; 0x24
 8007f54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fbbc 	bl	80086e4 <UART_SetConfig>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e022      	b.n	8007fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fd84 	bl	8008a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fe0b 	bl	8008bd0 <UART_CheckIdleState>
 8007fba:	4603      	mov	r3, r0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08a      	sub	sp, #40	; 0x28
 8007fc8:	af02      	add	r7, sp, #8
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d178      	bne.n	80080ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_UART_Transmit+0x24>
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e071      	b.n	80080d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2221      	movs	r2, #33	; 0x21
 8007ff8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ffa:	f7fa fffd 	bl	8002ff8 <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008018:	d108      	bne.n	800802c <HAL_UART_Transmit+0x68>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e003      	b.n	8008034 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008034:	e030      	b.n	8008098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fe6d 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e03c      	b.n	80080d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	881a      	ldrh	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008068:	b292      	uxth	r2, r2
 800806a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	3302      	adds	r3, #2
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e008      	b.n	8008086 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	b292      	uxth	r2, r2
 800807e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	3301      	adds	r3, #1
 8008084:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800809e:	b29b      	uxth	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1c8      	bne.n	8008036 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2200      	movs	r2, #0
 80080ac:	2140      	movs	r1, #64	; 0x40
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fe36 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e005      	b.n	80080d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e000      	b.n	80080d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80080ce:	2302      	movs	r3, #2
  }
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b0ba      	sub	sp, #232	; 0xe8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008102:	f640 030f 	movw	r3, #2063	; 0x80f
 8008106:	4013      	ands	r3, r2
 8008108:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800810c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d115      	bne.n	8008140 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00f      	beq.n	8008140 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d009      	beq.n	8008140 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 82ab 	beq.w	800868c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
      }
      return;
 800813e:	e2a5      	b.n	800868c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 8117 	beq.w	8008378 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800814a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d106      	bne.n	8008164 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008156:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800815a:	4b85      	ldr	r3, [pc, #532]	; (8008370 <HAL_UART_IRQHandler+0x298>)
 800815c:	4013      	ands	r3, r2
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 810a 	beq.w	8008378 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d011      	beq.n	8008194 <HAL_UART_IRQHandler+0xbc>
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2201      	movs	r2, #1
 8008182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818a:	f043 0201 	orr.w	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d011      	beq.n	80081c4 <HAL_UART_IRQHandler+0xec>
 80081a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2202      	movs	r2, #2
 80081b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ba:	f043 0204 	orr.w	r2, r3, #4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c8:	f003 0304 	and.w	r3, r3, #4
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <HAL_UART_IRQHandler+0x11c>
 80081d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2204      	movs	r2, #4
 80081e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ea:	f043 0202 	orr.w	r2, r3, #2
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f8:	f003 0308 	and.w	r3, r3, #8
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d017      	beq.n	8008230 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d105      	bne.n	8008218 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800820c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008210:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2208      	movs	r2, #8
 800821e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008226:	f043 0208 	orr.w	r2, r3, #8
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008238:	2b00      	cmp	r3, #0
 800823a:	d012      	beq.n	8008262 <HAL_UART_IRQHandler+0x18a>
 800823c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008258:	f043 0220 	orr.w	r2, r3, #32
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 8211 	beq.w	8008690 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800826e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800827a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b40      	cmp	r3, #64	; 0x40
 80082ac:	d005      	beq.n	80082ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d04f      	beq.n	800835a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fd97 	bl	8008dee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ca:	2b40      	cmp	r3, #64	; 0x40
 80082cc:	d141      	bne.n	8008352 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3308      	adds	r3, #8
 80082f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1d9      	bne.n	80082ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800831e:	2b00      	cmp	r3, #0
 8008320:	d013      	beq.n	800834a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008326:	4a13      	ldr	r2, [pc, #76]	; (8008374 <HAL_UART_IRQHandler+0x29c>)
 8008328:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800832e:	4618      	mov	r0, r3
 8008330:	f7fc fab0 	bl	8004894 <HAL_DMA_Abort_IT>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d017      	beq.n	800836a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008344:	4610      	mov	r0, r2
 8008346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	e00f      	b.n	800836a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9b4 	bl	80086b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008350:	e00b      	b.n	800836a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9b0 	bl	80086b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	e007      	b.n	800836a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9ac 	bl	80086b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008368:	e192      	b.n	8008690 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836a:	bf00      	nop
    return;
 800836c:	e190      	b.n	8008690 <HAL_UART_IRQHandler+0x5b8>
 800836e:	bf00      	nop
 8008370:	04000120 	.word	0x04000120
 8008374:	08008eb7 	.word	0x08008eb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837c:	2b01      	cmp	r3, #1
 800837e:	f040 814b 	bne.w	8008618 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008386:	f003 0310 	and.w	r3, r3, #16
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 8144 	beq.w	8008618 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 813d 	beq.w	8008618 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2210      	movs	r2, #16
 80083a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	f040 80b5 	bne.w	8008520 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 8164 	beq.w	8008694 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80083d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083d6:	429a      	cmp	r2, r3
 80083d8:	f080 815c 	bcs.w	8008694 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	f000 8086 	beq.w	80084fe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800840a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800841c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008420:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008428:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1da      	bne.n	80083f2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800844c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3308      	adds	r3, #8
 800845c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008460:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008464:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008468:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800846c:	e841 2300 	strex	r3, r2, [r1]
 8008470:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008474:	2b00      	cmp	r3, #0
 8008476:	d1e1      	bne.n	800843c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008482:	e853 3f00 	ldrex	r3, [r3]
 8008486:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800848a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800849c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800849e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e3      	bne.n	8008478 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	f023 0310 	bic.w	r3, r3, #16
 80084d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80084e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e4      	bne.n	80084be <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fc f992 	bl	8004822 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2202      	movs	r2, #2
 8008502:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8d7 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800851e:	e0b9      	b.n	8008694 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800852c:	b29b      	uxth	r3, r3
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80ab 	beq.w	8008698 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8008542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a6 	beq.w	8008698 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800856e:	647b      	str	r3, [r7, #68]	; 0x44
 8008570:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e4      	bne.n	800854c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	623b      	str	r3, [r7, #32]
   return(result);
 8008592:	6a3b      	ldr	r3, [r7, #32]
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3308      	adds	r3, #8
 80085a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085a6:	633a      	str	r2, [r7, #48]	; 0x30
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e3      	bne.n	8008582 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	60fb      	str	r3, [r7, #12]
   return(result);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	69b9      	ldr	r1, [r7, #24]
 80085f6:	69fa      	ldr	r2, [r7, #28]
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	617b      	str	r3, [r7, #20]
   return(result);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e4      	bne.n	80085ce <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800860a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f85b 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008616:	e03f      	b.n	8008698 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00e      	beq.n	8008642 <HAL_UART_IRQHandler+0x56a>
 8008624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fc7b 	bl	8008f36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008640:	e02d      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800864e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d01c      	beq.n	800869c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
    }
    return;
 800866a:	e017      	b.n	800869c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d012      	beq.n	800869e <HAL_UART_IRQHandler+0x5c6>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00c      	beq.n	800869e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc2c 	bl	8008ee2 <UART_EndTransmit_IT>
    return;
 800868a:	e008      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
      return;
 800868c:	bf00      	nop
 800868e:	e006      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
    return;
 8008690:	bf00      	nop
 8008692:	e004      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
      return;
 8008694:	bf00      	nop
 8008696:	e002      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
      return;
 8008698:	bf00      	nop
 800869a:	e000      	b.n	800869e <HAL_UART_IRQHandler+0x5c6>
    return;
 800869c:	bf00      	nop
  }

}
 800869e:	37e8      	adds	r7, #232	; 0xe8
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	431a      	orrs	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008712:	f023 030c 	bic.w	r3, r3, #12
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6812      	ldr	r2, [r2, #0]
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	430b      	orrs	r3, r1
 800871e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	430a      	orrs	r2, r1
 8008758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4aa7      	ldr	r2, [pc, #668]	; (80089fc <UART_SetConfig+0x318>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d120      	bne.n	80087a6 <UART_SetConfig+0xc2>
 8008764:	4ba6      	ldr	r3, [pc, #664]	; (8008a00 <UART_SetConfig+0x31c>)
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	f003 0303 	and.w	r3, r3, #3
 800876c:	2b03      	cmp	r3, #3
 800876e:	d817      	bhi.n	80087a0 <UART_SetConfig+0xbc>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <UART_SetConfig+0x94>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	08008789 	.word	0x08008789
 800877c:	08008795 	.word	0x08008795
 8008780:	0800879b 	.word	0x0800879b
 8008784:	0800878f 	.word	0x0800878f
 8008788:	2301      	movs	r3, #1
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e0b5      	b.n	80088fa <UART_SetConfig+0x216>
 800878e:	2302      	movs	r3, #2
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e0b2      	b.n	80088fa <UART_SetConfig+0x216>
 8008794:	2304      	movs	r3, #4
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e0af      	b.n	80088fa <UART_SetConfig+0x216>
 800879a:	2308      	movs	r3, #8
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e0ac      	b.n	80088fa <UART_SetConfig+0x216>
 80087a0:	2310      	movs	r3, #16
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	e0a9      	b.n	80088fa <UART_SetConfig+0x216>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a96      	ldr	r2, [pc, #600]	; (8008a04 <UART_SetConfig+0x320>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d124      	bne.n	80087fa <UART_SetConfig+0x116>
 80087b0:	4b93      	ldr	r3, [pc, #588]	; (8008a00 <UART_SetConfig+0x31c>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087bc:	d011      	beq.n	80087e2 <UART_SetConfig+0xfe>
 80087be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80087c2:	d817      	bhi.n	80087f4 <UART_SetConfig+0x110>
 80087c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087c8:	d011      	beq.n	80087ee <UART_SetConfig+0x10a>
 80087ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087ce:	d811      	bhi.n	80087f4 <UART_SetConfig+0x110>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <UART_SetConfig+0xf8>
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d006      	beq.n	80087e8 <UART_SetConfig+0x104>
 80087da:	e00b      	b.n	80087f4 <UART_SetConfig+0x110>
 80087dc:	2300      	movs	r3, #0
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e08b      	b.n	80088fa <UART_SetConfig+0x216>
 80087e2:	2302      	movs	r3, #2
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e088      	b.n	80088fa <UART_SetConfig+0x216>
 80087e8:	2304      	movs	r3, #4
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e085      	b.n	80088fa <UART_SetConfig+0x216>
 80087ee:	2308      	movs	r3, #8
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	e082      	b.n	80088fa <UART_SetConfig+0x216>
 80087f4:	2310      	movs	r3, #16
 80087f6:	77fb      	strb	r3, [r7, #31]
 80087f8:	e07f      	b.n	80088fa <UART_SetConfig+0x216>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a82      	ldr	r2, [pc, #520]	; (8008a08 <UART_SetConfig+0x324>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d124      	bne.n	800884e <UART_SetConfig+0x16a>
 8008804:	4b7e      	ldr	r3, [pc, #504]	; (8008a00 <UART_SetConfig+0x31c>)
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800880c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008810:	d011      	beq.n	8008836 <UART_SetConfig+0x152>
 8008812:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008816:	d817      	bhi.n	8008848 <UART_SetConfig+0x164>
 8008818:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800881c:	d011      	beq.n	8008842 <UART_SetConfig+0x15e>
 800881e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008822:	d811      	bhi.n	8008848 <UART_SetConfig+0x164>
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <UART_SetConfig+0x14c>
 8008828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800882c:	d006      	beq.n	800883c <UART_SetConfig+0x158>
 800882e:	e00b      	b.n	8008848 <UART_SetConfig+0x164>
 8008830:	2300      	movs	r3, #0
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e061      	b.n	80088fa <UART_SetConfig+0x216>
 8008836:	2302      	movs	r3, #2
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e05e      	b.n	80088fa <UART_SetConfig+0x216>
 800883c:	2304      	movs	r3, #4
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e05b      	b.n	80088fa <UART_SetConfig+0x216>
 8008842:	2308      	movs	r3, #8
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e058      	b.n	80088fa <UART_SetConfig+0x216>
 8008848:	2310      	movs	r3, #16
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	e055      	b.n	80088fa <UART_SetConfig+0x216>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a6e      	ldr	r2, [pc, #440]	; (8008a0c <UART_SetConfig+0x328>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d124      	bne.n	80088a2 <UART_SetConfig+0x1be>
 8008858:	4b69      	ldr	r3, [pc, #420]	; (8008a00 <UART_SetConfig+0x31c>)
 800885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008864:	d011      	beq.n	800888a <UART_SetConfig+0x1a6>
 8008866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800886a:	d817      	bhi.n	800889c <UART_SetConfig+0x1b8>
 800886c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008870:	d011      	beq.n	8008896 <UART_SetConfig+0x1b2>
 8008872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008876:	d811      	bhi.n	800889c <UART_SetConfig+0x1b8>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <UART_SetConfig+0x1a0>
 800887c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008880:	d006      	beq.n	8008890 <UART_SetConfig+0x1ac>
 8008882:	e00b      	b.n	800889c <UART_SetConfig+0x1b8>
 8008884:	2300      	movs	r3, #0
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e037      	b.n	80088fa <UART_SetConfig+0x216>
 800888a:	2302      	movs	r3, #2
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e034      	b.n	80088fa <UART_SetConfig+0x216>
 8008890:	2304      	movs	r3, #4
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e031      	b.n	80088fa <UART_SetConfig+0x216>
 8008896:	2308      	movs	r3, #8
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e02e      	b.n	80088fa <UART_SetConfig+0x216>
 800889c:	2310      	movs	r3, #16
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	e02b      	b.n	80088fa <UART_SetConfig+0x216>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a5a      	ldr	r2, [pc, #360]	; (8008a10 <UART_SetConfig+0x32c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d124      	bne.n	80088f6 <UART_SetConfig+0x212>
 80088ac:	4b54      	ldr	r3, [pc, #336]	; (8008a00 <UART_SetConfig+0x31c>)
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80088b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088b8:	d011      	beq.n	80088de <UART_SetConfig+0x1fa>
 80088ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80088be:	d817      	bhi.n	80088f0 <UART_SetConfig+0x20c>
 80088c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088c4:	d011      	beq.n	80088ea <UART_SetConfig+0x206>
 80088c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ca:	d811      	bhi.n	80088f0 <UART_SetConfig+0x20c>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <UART_SetConfig+0x1f4>
 80088d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088d4:	d006      	beq.n	80088e4 <UART_SetConfig+0x200>
 80088d6:	e00b      	b.n	80088f0 <UART_SetConfig+0x20c>
 80088d8:	2300      	movs	r3, #0
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	e00d      	b.n	80088fa <UART_SetConfig+0x216>
 80088de:	2302      	movs	r3, #2
 80088e0:	77fb      	strb	r3, [r7, #31]
 80088e2:	e00a      	b.n	80088fa <UART_SetConfig+0x216>
 80088e4:	2304      	movs	r3, #4
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	e007      	b.n	80088fa <UART_SetConfig+0x216>
 80088ea:	2308      	movs	r3, #8
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e004      	b.n	80088fa <UART_SetConfig+0x216>
 80088f0:	2310      	movs	r3, #16
 80088f2:	77fb      	strb	r3, [r7, #31]
 80088f4:	e001      	b.n	80088fa <UART_SetConfig+0x216>
 80088f6:	2310      	movs	r3, #16
 80088f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008902:	d15b      	bne.n	80089bc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8008904:	7ffb      	ldrb	r3, [r7, #31]
 8008906:	2b08      	cmp	r3, #8
 8008908:	d827      	bhi.n	800895a <UART_SetConfig+0x276>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <UART_SetConfig+0x22c>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008935 	.word	0x08008935
 8008914:	0800893d 	.word	0x0800893d
 8008918:	08008945 	.word	0x08008945
 800891c:	0800895b 	.word	0x0800895b
 8008920:	0800894b 	.word	0x0800894b
 8008924:	0800895b 	.word	0x0800895b
 8008928:	0800895b 	.word	0x0800895b
 800892c:	0800895b 	.word	0x0800895b
 8008930:	08008953 	.word	0x08008953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008934:	f7fd fdd8 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8008938:	61b8      	str	r0, [r7, #24]
        break;
 800893a:	e013      	b.n	8008964 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800893c:	f7fd fdf6 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 8008940:	61b8      	str	r0, [r7, #24]
        break;
 8008942:	e00f      	b.n	8008964 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008944:	4b33      	ldr	r3, [pc, #204]	; (8008a14 <UART_SetConfig+0x330>)
 8008946:	61bb      	str	r3, [r7, #24]
        break;
 8008948:	e00c      	b.n	8008964 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800894a:	f7fd fd57 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 800894e:	61b8      	str	r0, [r7, #24]
        break;
 8008950:	e008      	b.n	8008964 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008956:	61bb      	str	r3, [r7, #24]
        break;
 8008958:	e004      	b.n	8008964 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	77bb      	strb	r3, [r7, #30]
        break;
 8008962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 8082 	beq.w	8008a70 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	005a      	lsls	r2, r3, #1
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	441a      	add	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008980:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b0f      	cmp	r3, #15
 8008986:	d916      	bls.n	80089b6 <UART_SetConfig+0x2d2>
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800898e:	d212      	bcs.n	80089b6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f023 030f 	bic.w	r3, r3, #15
 8008998:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	89fa      	ldrh	r2, [r7, #14]
 80089b2:	60da      	str	r2, [r3, #12]
 80089b4:	e05c      	b.n	8008a70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	77bb      	strb	r3, [r7, #30]
 80089ba:	e059      	b.n	8008a70 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089bc:	7ffb      	ldrb	r3, [r7, #31]
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d835      	bhi.n	8008a2e <UART_SetConfig+0x34a>
 80089c2:	a201      	add	r2, pc, #4	; (adr r2, 80089c8 <UART_SetConfig+0x2e4>)
 80089c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a2f 	.word	0x08008a2f
 80089d8:	08008a1f 	.word	0x08008a1f
 80089dc:	08008a2f 	.word	0x08008a2f
 80089e0:	08008a2f 	.word	0x08008a2f
 80089e4:	08008a2f 	.word	0x08008a2f
 80089e8:	08008a27 	.word	0x08008a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ec:	f7fd fd7c 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 80089f0:	61b8      	str	r0, [r7, #24]
        break;
 80089f2:	e021      	b.n	8008a38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fd fd9a 	bl	800652c <HAL_RCC_GetPCLK2Freq>
 80089f8:	61b8      	str	r0, [r7, #24]
        break;
 80089fa:	e01d      	b.n	8008a38 <UART_SetConfig+0x354>
 80089fc:	40013800 	.word	0x40013800
 8008a00:	40021000 	.word	0x40021000
 8008a04:	40004400 	.word	0x40004400
 8008a08:	40004800 	.word	0x40004800
 8008a0c:	40004c00 	.word	0x40004c00
 8008a10:	40005000 	.word	0x40005000
 8008a14:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a18:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <UART_SetConfig+0x3a4>)
 8008a1a:	61bb      	str	r3, [r7, #24]
        break;
 8008a1c:	e00c      	b.n	8008a38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a1e:	f7fd fced 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 8008a22:	61b8      	str	r0, [r7, #24]
        break;
 8008a24:	e008      	b.n	8008a38 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a2a:	61bb      	str	r3, [r7, #24]
        break;
 8008a2c:	e004      	b.n	8008a38 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	77bb      	strb	r3, [r7, #30]
        break;
 8008a36:	bf00      	nop
    }

    if (pclk != 0U)
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d018      	beq.n	8008a70 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	085a      	lsrs	r2, r3, #1
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	441a      	add	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b0f      	cmp	r3, #15
 8008a56:	d909      	bls.n	8008a6c <UART_SetConfig+0x388>
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5e:	d205      	bcs.n	8008a6c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	e001      	b.n	8008a70 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	007a1200 	.word	0x007a1200

08008a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00a      	beq.n	8008ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00a      	beq.n	8008afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00a      	beq.n	8008b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	f003 0320 	and.w	r3, r3, #32
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01a      	beq.n	8008ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b8a:	d10a      	bne.n	8008ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00a      	beq.n	8008bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	605a      	str	r2, [r3, #4]
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b098      	sub	sp, #96	; 0x60
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008be0:	f7fa fa0a 	bl	8002ff8 <HAL_GetTick>
 8008be4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0308 	and.w	r3, r3, #8
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d12e      	bne.n	8008c52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f88c 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d021      	beq.n	8008c52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c22:	653b      	str	r3, [r7, #80]	; 0x50
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e6      	bne.n	8008c0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e062      	b.n	8008d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d149      	bne.n	8008cf4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f856 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d03c      	beq.n	8008cf4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	623b      	str	r3, [r7, #32]
   return(result);
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c98:	633b      	str	r3, [r7, #48]	; 0x30
 8008c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e6      	bne.n	8008c7a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	e853 3f00 	ldrex	r3, [r3]
 8008cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ccc:	61fa      	str	r2, [r7, #28]
 8008cce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	69b9      	ldr	r1, [r7, #24]
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	e841 2300 	strex	r3, r2, [r1]
 8008cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d1e5      	bne.n	8008cac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e011      	b.n	8008d18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3758      	adds	r7, #88	; 0x58
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d30:	e049      	b.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d38:	d045      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3a:	f7fa f95d 	bl	8002ff8 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d302      	bcc.n	8008d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e048      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d031      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d110      	bne.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2208      	movs	r2, #8
 8008d76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f838 	bl	8008dee <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2208      	movs	r2, #8
 8008d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e029      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da0:	d111      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f81e 	bl	8008dee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e00f      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69da      	ldr	r2, [r3, #28]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	bf0c      	ite	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	2300      	movne	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d0a6      	beq.n	8008d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b095      	sub	sp, #84	; 0x54
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e14:	643b      	str	r3, [r7, #64]	; 0x40
 8008e16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f023 0301 	bic.w	r3, r3, #1
 8008e3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3308      	adds	r3, #8
 8008e46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e5      	bne.n	8008e28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d118      	bne.n	8008e96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f023 0310 	bic.w	r3, r3, #16
 8008e78:	647b      	str	r3, [r7, #68]	; 0x44
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e82:	61bb      	str	r3, [r7, #24]
 8008e84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6979      	ldr	r1, [r7, #20]
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008eaa:	bf00      	nop
 8008eac:	3754      	adds	r7, #84	; 0x54
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fbef 	bl	80086b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b088      	sub	sp, #32
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	61bb      	str	r3, [r7, #24]
 8008f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6979      	ldr	r1, [r7, #20]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	613b      	str	r3, [r7, #16]
   return(result);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff fbbb 	bl	80086a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f2e:	bf00      	nop
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f3e:	bf00      	nop
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f52:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008f56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	43db      	mvns	r3, r3
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	4013      	ands	r3, r2
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 0014 	add.w	r0, r7, #20
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	b004      	add	sp, #16
 8008fc0:	4770      	bx	lr
	...

08008fc4 <__errno>:
 8008fc4:	4b01      	ldr	r3, [pc, #4]	; (8008fcc <__errno+0x8>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000108 	.word	0x20000108

08008fd0 <__libc_init_array>:
 8008fd0:	b570      	push	{r4, r5, r6, lr}
 8008fd2:	4d0d      	ldr	r5, [pc, #52]	; (8009008 <__libc_init_array+0x38>)
 8008fd4:	4c0d      	ldr	r4, [pc, #52]	; (800900c <__libc_init_array+0x3c>)
 8008fd6:	1b64      	subs	r4, r4, r5
 8008fd8:	10a4      	asrs	r4, r4, #2
 8008fda:	2600      	movs	r6, #0
 8008fdc:	42a6      	cmp	r6, r4
 8008fde:	d109      	bne.n	8008ff4 <__libc_init_array+0x24>
 8008fe0:	4d0b      	ldr	r5, [pc, #44]	; (8009010 <__libc_init_array+0x40>)
 8008fe2:	4c0c      	ldr	r4, [pc, #48]	; (8009014 <__libc_init_array+0x44>)
 8008fe4:	f005 fcda 	bl	800e99c <_init>
 8008fe8:	1b64      	subs	r4, r4, r5
 8008fea:	10a4      	asrs	r4, r4, #2
 8008fec:	2600      	movs	r6, #0
 8008fee:	42a6      	cmp	r6, r4
 8008ff0:	d105      	bne.n	8008ffe <__libc_init_array+0x2e>
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
 8008ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff8:	4798      	blx	r3
 8008ffa:	3601      	adds	r6, #1
 8008ffc:	e7ee      	b.n	8008fdc <__libc_init_array+0xc>
 8008ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009002:	4798      	blx	r3
 8009004:	3601      	adds	r6, #1
 8009006:	e7f2      	b.n	8008fee <__libc_init_array+0x1e>
 8009008:	0800f0c8 	.word	0x0800f0c8
 800900c:	0800f0c8 	.word	0x0800f0c8
 8009010:	0800f0c8 	.word	0x0800f0c8
 8009014:	0800f0cc 	.word	0x0800f0cc

08009018 <memset>:
 8009018:	4402      	add	r2, r0
 800901a:	4603      	mov	r3, r0
 800901c:	4293      	cmp	r3, r2
 800901e:	d100      	bne.n	8009022 <memset+0xa>
 8009020:	4770      	bx	lr
 8009022:	f803 1b01 	strb.w	r1, [r3], #1
 8009026:	e7f9      	b.n	800901c <memset+0x4>

08009028 <__cvt>:
 8009028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	ec55 4b10 	vmov	r4, r5, d0
 8009030:	2d00      	cmp	r5, #0
 8009032:	460e      	mov	r6, r1
 8009034:	4619      	mov	r1, r3
 8009036:	462b      	mov	r3, r5
 8009038:	bfbb      	ittet	lt
 800903a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800903e:	461d      	movlt	r5, r3
 8009040:	2300      	movge	r3, #0
 8009042:	232d      	movlt	r3, #45	; 0x2d
 8009044:	700b      	strb	r3, [r1, #0]
 8009046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009048:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800904c:	4691      	mov	r9, r2
 800904e:	f023 0820 	bic.w	r8, r3, #32
 8009052:	bfbc      	itt	lt
 8009054:	4622      	movlt	r2, r4
 8009056:	4614      	movlt	r4, r2
 8009058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905c:	d005      	beq.n	800906a <__cvt+0x42>
 800905e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009062:	d100      	bne.n	8009066 <__cvt+0x3e>
 8009064:	3601      	adds	r6, #1
 8009066:	2102      	movs	r1, #2
 8009068:	e000      	b.n	800906c <__cvt+0x44>
 800906a:	2103      	movs	r1, #3
 800906c:	ab03      	add	r3, sp, #12
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	ab02      	add	r3, sp, #8
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	ec45 4b10 	vmov	d0, r4, r5
 8009078:	4653      	mov	r3, sl
 800907a:	4632      	mov	r2, r6
 800907c:	f001 fdac 	bl	800abd8 <_dtoa_r>
 8009080:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009084:	4607      	mov	r7, r0
 8009086:	d102      	bne.n	800908e <__cvt+0x66>
 8009088:	f019 0f01 	tst.w	r9, #1
 800908c:	d022      	beq.n	80090d4 <__cvt+0xac>
 800908e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009092:	eb07 0906 	add.w	r9, r7, r6
 8009096:	d110      	bne.n	80090ba <__cvt+0x92>
 8009098:	783b      	ldrb	r3, [r7, #0]
 800909a:	2b30      	cmp	r3, #48	; 0x30
 800909c:	d10a      	bne.n	80090b4 <__cvt+0x8c>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80090aa:	b918      	cbnz	r0, 80090b4 <__cvt+0x8c>
 80090ac:	f1c6 0601 	rsb	r6, r6, #1
 80090b0:	f8ca 6000 	str.w	r6, [sl]
 80090b4:	f8da 3000 	ldr.w	r3, [sl]
 80090b8:	4499      	add	r9, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	2300      	movs	r3, #0
 80090be:	4620      	mov	r0, r4
 80090c0:	4629      	mov	r1, r5
 80090c2:	f7f7 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80090c6:	b108      	cbz	r0, 80090cc <__cvt+0xa4>
 80090c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80090cc:	2230      	movs	r2, #48	; 0x30
 80090ce:	9b03      	ldr	r3, [sp, #12]
 80090d0:	454b      	cmp	r3, r9
 80090d2:	d307      	bcc.n	80090e4 <__cvt+0xbc>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	1bdb      	subs	r3, r3, r7
 80090da:	4638      	mov	r0, r7
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	b004      	add	sp, #16
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	1c59      	adds	r1, r3, #1
 80090e6:	9103      	str	r1, [sp, #12]
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e7f0      	b.n	80090ce <__cvt+0xa6>

080090ec <__exponent>:
 80090ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ee:	4603      	mov	r3, r0
 80090f0:	2900      	cmp	r1, #0
 80090f2:	bfb8      	it	lt
 80090f4:	4249      	neglt	r1, r1
 80090f6:	f803 2b02 	strb.w	r2, [r3], #2
 80090fa:	bfb4      	ite	lt
 80090fc:	222d      	movlt	r2, #45	; 0x2d
 80090fe:	222b      	movge	r2, #43	; 0x2b
 8009100:	2909      	cmp	r1, #9
 8009102:	7042      	strb	r2, [r0, #1]
 8009104:	dd2a      	ble.n	800915c <__exponent+0x70>
 8009106:	f10d 0407 	add.w	r4, sp, #7
 800910a:	46a4      	mov	ip, r4
 800910c:	270a      	movs	r7, #10
 800910e:	46a6      	mov	lr, r4
 8009110:	460a      	mov	r2, r1
 8009112:	fb91 f6f7 	sdiv	r6, r1, r7
 8009116:	fb07 1516 	mls	r5, r7, r6, r1
 800911a:	3530      	adds	r5, #48	; 0x30
 800911c:	2a63      	cmp	r2, #99	; 0x63
 800911e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009122:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009126:	4631      	mov	r1, r6
 8009128:	dcf1      	bgt.n	800910e <__exponent+0x22>
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	f1ae 0502 	sub.w	r5, lr, #2
 8009130:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009134:	1c44      	adds	r4, r0, #1
 8009136:	4629      	mov	r1, r5
 8009138:	4561      	cmp	r1, ip
 800913a:	d30a      	bcc.n	8009152 <__exponent+0x66>
 800913c:	f10d 0209 	add.w	r2, sp, #9
 8009140:	eba2 020e 	sub.w	r2, r2, lr
 8009144:	4565      	cmp	r5, ip
 8009146:	bf88      	it	hi
 8009148:	2200      	movhi	r2, #0
 800914a:	4413      	add	r3, r2
 800914c:	1a18      	subs	r0, r3, r0
 800914e:	b003      	add	sp, #12
 8009150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009156:	f804 2f01 	strb.w	r2, [r4, #1]!
 800915a:	e7ed      	b.n	8009138 <__exponent+0x4c>
 800915c:	2330      	movs	r3, #48	; 0x30
 800915e:	3130      	adds	r1, #48	; 0x30
 8009160:	7083      	strb	r3, [r0, #2]
 8009162:	70c1      	strb	r1, [r0, #3]
 8009164:	1d03      	adds	r3, r0, #4
 8009166:	e7f1      	b.n	800914c <__exponent+0x60>

08009168 <_printf_float>:
 8009168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	ed2d 8b02 	vpush	{d8}
 8009170:	b08d      	sub	sp, #52	; 0x34
 8009172:	460c      	mov	r4, r1
 8009174:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009178:	4616      	mov	r6, r2
 800917a:	461f      	mov	r7, r3
 800917c:	4605      	mov	r5, r0
 800917e:	f002 fe89 	bl	800be94 <_localeconv_r>
 8009182:	f8d0 a000 	ldr.w	sl, [r0]
 8009186:	4650      	mov	r0, sl
 8009188:	f7f7 f822 	bl	80001d0 <strlen>
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	; 0x28
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f8d8 3000 	ldr.w	r3, [r8]
 8009198:	f894 b018 	ldrb.w	fp, [r4, #24]
 800919c:	3307      	adds	r3, #7
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	f8c8 2000 	str.w	r2, [r8]
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80091b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80091c0:	ee08 0a10 	vmov	s16, r0
 80091c4:	4b9f      	ldr	r3, [pc, #636]	; (8009444 <_printf_float+0x2dc>)
 80091c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	f7f7 fcad 	bl	8000b2c <__aeabi_dcmpun>
 80091d2:	bb88      	cbnz	r0, 8009238 <_printf_float+0xd0>
 80091d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d8:	4b9a      	ldr	r3, [pc, #616]	; (8009444 <_printf_float+0x2dc>)
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	f7f7 fc87 	bl	8000af0 <__aeabi_dcmple>
 80091e2:	bb48      	cbnz	r0, 8009238 <_printf_float+0xd0>
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	f7f7 fc76 	bl	8000adc <__aeabi_dcmplt>
 80091f0:	b110      	cbz	r0, 80091f8 <_printf_float+0x90>
 80091f2:	232d      	movs	r3, #45	; 0x2d
 80091f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091f8:	4b93      	ldr	r3, [pc, #588]	; (8009448 <_printf_float+0x2e0>)
 80091fa:	4894      	ldr	r0, [pc, #592]	; (800944c <_printf_float+0x2e4>)
 80091fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009200:	bf94      	ite	ls
 8009202:	4698      	movls	r8, r3
 8009204:	4680      	movhi	r8, r0
 8009206:	2303      	movs	r3, #3
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	9b05      	ldr	r3, [sp, #20]
 800920c:	f023 0204 	bic.w	r2, r3, #4
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	f04f 0900 	mov.w	r9, #0
 8009216:	9700      	str	r7, [sp, #0]
 8009218:	4633      	mov	r3, r6
 800921a:	aa0b      	add	r2, sp, #44	; 0x2c
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f9d8 	bl	80095d4 <_printf_common>
 8009224:	3001      	adds	r0, #1
 8009226:	f040 8090 	bne.w	800934a <_printf_float+0x1e2>
 800922a:	f04f 30ff 	mov.w	r0, #4294967295
 800922e:	b00d      	add	sp, #52	; 0x34
 8009230:	ecbd 8b02 	vpop	{d8}
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 fc74 	bl	8000b2c <__aeabi_dcmpun>
 8009244:	b140      	cbz	r0, 8009258 <_printf_float+0xf0>
 8009246:	464b      	mov	r3, r9
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbc      	itt	lt
 800924c:	232d      	movlt	r3, #45	; 0x2d
 800924e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009252:	487f      	ldr	r0, [pc, #508]	; (8009450 <_printf_float+0x2e8>)
 8009254:	4b7f      	ldr	r3, [pc, #508]	; (8009454 <_printf_float+0x2ec>)
 8009256:	e7d1      	b.n	80091fc <_printf_float+0x94>
 8009258:	6863      	ldr	r3, [r4, #4]
 800925a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	1c5a      	adds	r2, r3, #1
 8009262:	d13f      	bne.n	80092e4 <_printf_float+0x17c>
 8009264:	2306      	movs	r3, #6
 8009266:	6063      	str	r3, [r4, #4]
 8009268:	9b05      	ldr	r3, [sp, #20]
 800926a:	6861      	ldr	r1, [r4, #4]
 800926c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009270:	2300      	movs	r3, #0
 8009272:	9303      	str	r3, [sp, #12]
 8009274:	ab0a      	add	r3, sp, #40	; 0x28
 8009276:	e9cd b301 	strd	fp, r3, [sp, #4]
 800927a:	ab09      	add	r3, sp, #36	; 0x24
 800927c:	ec49 8b10 	vmov	d0, r8, r9
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff fecd 	bl	8009028 <__cvt>
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009292:	2b47      	cmp	r3, #71	; 0x47
 8009294:	4680      	mov	r8, r0
 8009296:	d108      	bne.n	80092aa <_printf_float+0x142>
 8009298:	1cc8      	adds	r0, r1, #3
 800929a:	db02      	blt.n	80092a2 <_printf_float+0x13a>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	4299      	cmp	r1, r3
 80092a0:	dd41      	ble.n	8009326 <_printf_float+0x1be>
 80092a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80092a6:	fa5f fb8b 	uxtb.w	fp, fp
 80092aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092ae:	d820      	bhi.n	80092f2 <_printf_float+0x18a>
 80092b0:	3901      	subs	r1, #1
 80092b2:	465a      	mov	r2, fp
 80092b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092b8:	9109      	str	r1, [sp, #36]	; 0x24
 80092ba:	f7ff ff17 	bl	80090ec <__exponent>
 80092be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c0:	1813      	adds	r3, r2, r0
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	4681      	mov	r9, r0
 80092c6:	6123      	str	r3, [r4, #16]
 80092c8:	dc02      	bgt.n	80092d0 <_printf_float+0x168>
 80092ca:	6822      	ldr	r2, [r4, #0]
 80092cc:	07d2      	lsls	r2, r2, #31
 80092ce:	d501      	bpl.n	80092d4 <_printf_float+0x16c>
 80092d0:	3301      	adds	r3, #1
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d09c      	beq.n	8009216 <_printf_float+0xae>
 80092dc:	232d      	movs	r3, #45	; 0x2d
 80092de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e2:	e798      	b.n	8009216 <_printf_float+0xae>
 80092e4:	9a06      	ldr	r2, [sp, #24]
 80092e6:	2a47      	cmp	r2, #71	; 0x47
 80092e8:	d1be      	bne.n	8009268 <_printf_float+0x100>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1bc      	bne.n	8009268 <_printf_float+0x100>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7b9      	b.n	8009266 <_printf_float+0xfe>
 80092f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092f6:	d118      	bne.n	800932a <_printf_float+0x1c2>
 80092f8:	2900      	cmp	r1, #0
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	dd0b      	ble.n	8009316 <_printf_float+0x1ae>
 80092fe:	6121      	str	r1, [r4, #16]
 8009300:	b913      	cbnz	r3, 8009308 <_printf_float+0x1a0>
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	07d0      	lsls	r0, r2, #31
 8009306:	d502      	bpl.n	800930e <_printf_float+0x1a6>
 8009308:	3301      	adds	r3, #1
 800930a:	440b      	add	r3, r1
 800930c:	6123      	str	r3, [r4, #16]
 800930e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009310:	f04f 0900 	mov.w	r9, #0
 8009314:	e7de      	b.n	80092d4 <_printf_float+0x16c>
 8009316:	b913      	cbnz	r3, 800931e <_printf_float+0x1b6>
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	07d2      	lsls	r2, r2, #31
 800931c:	d501      	bpl.n	8009322 <_printf_float+0x1ba>
 800931e:	3302      	adds	r3, #2
 8009320:	e7f4      	b.n	800930c <_printf_float+0x1a4>
 8009322:	2301      	movs	r3, #1
 8009324:	e7f2      	b.n	800930c <_printf_float+0x1a4>
 8009326:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800932a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800932c:	4299      	cmp	r1, r3
 800932e:	db05      	blt.n	800933c <_printf_float+0x1d4>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	6121      	str	r1, [r4, #16]
 8009334:	07d8      	lsls	r0, r3, #31
 8009336:	d5ea      	bpl.n	800930e <_printf_float+0x1a6>
 8009338:	1c4b      	adds	r3, r1, #1
 800933a:	e7e7      	b.n	800930c <_printf_float+0x1a4>
 800933c:	2900      	cmp	r1, #0
 800933e:	bfd4      	ite	le
 8009340:	f1c1 0202 	rsble	r2, r1, #2
 8009344:	2201      	movgt	r2, #1
 8009346:	4413      	add	r3, r2
 8009348:	e7e0      	b.n	800930c <_printf_float+0x1a4>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	055a      	lsls	r2, r3, #21
 800934e:	d407      	bmi.n	8009360 <_printf_float+0x1f8>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	4642      	mov	r2, r8
 8009354:	4631      	mov	r1, r6
 8009356:	4628      	mov	r0, r5
 8009358:	47b8      	blx	r7
 800935a:	3001      	adds	r0, #1
 800935c:	d12c      	bne.n	80093b8 <_printf_float+0x250>
 800935e:	e764      	b.n	800922a <_printf_float+0xc2>
 8009360:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009364:	f240 80e0 	bls.w	8009528 <_printf_float+0x3c0>
 8009368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800936c:	2200      	movs	r2, #0
 800936e:	2300      	movs	r3, #0
 8009370:	f7f7 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009374:	2800      	cmp	r0, #0
 8009376:	d034      	beq.n	80093e2 <_printf_float+0x27a>
 8009378:	4a37      	ldr	r2, [pc, #220]	; (8009458 <_printf_float+0x2f0>)
 800937a:	2301      	movs	r3, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4628      	mov	r0, r5
 8009380:	47b8      	blx	r7
 8009382:	3001      	adds	r0, #1
 8009384:	f43f af51 	beq.w	800922a <_printf_float+0xc2>
 8009388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800938c:	429a      	cmp	r2, r3
 800938e:	db02      	blt.n	8009396 <_printf_float+0x22e>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	07d8      	lsls	r0, r3, #31
 8009394:	d510      	bpl.n	80093b8 <_printf_float+0x250>
 8009396:	ee18 3a10 	vmov	r3, s16
 800939a:	4652      	mov	r2, sl
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af41 	beq.w	800922a <_printf_float+0xc2>
 80093a8:	f04f 0800 	mov.w	r8, #0
 80093ac:	f104 091a 	add.w	r9, r4, #26
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4543      	cmp	r3, r8
 80093b6:	dc09      	bgt.n	80093cc <_printf_float+0x264>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	079b      	lsls	r3, r3, #30
 80093bc:	f100 8105 	bmi.w	80095ca <_printf_float+0x462>
 80093c0:	68e0      	ldr	r0, [r4, #12]
 80093c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c4:	4298      	cmp	r0, r3
 80093c6:	bfb8      	it	lt
 80093c8:	4618      	movlt	r0, r3
 80093ca:	e730      	b.n	800922e <_printf_float+0xc6>
 80093cc:	2301      	movs	r3, #1
 80093ce:	464a      	mov	r2, r9
 80093d0:	4631      	mov	r1, r6
 80093d2:	4628      	mov	r0, r5
 80093d4:	47b8      	blx	r7
 80093d6:	3001      	adds	r0, #1
 80093d8:	f43f af27 	beq.w	800922a <_printf_float+0xc2>
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	e7e6      	b.n	80093b0 <_printf_float+0x248>
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc39      	bgt.n	800945c <_printf_float+0x2f4>
 80093e8:	4a1b      	ldr	r2, [pc, #108]	; (8009458 <_printf_float+0x2f0>)
 80093ea:	2301      	movs	r3, #1
 80093ec:	4631      	mov	r1, r6
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f af19 	beq.w	800922a <_printf_float+0xc2>
 80093f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093fc:	4313      	orrs	r3, r2
 80093fe:	d102      	bne.n	8009406 <_printf_float+0x29e>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	d5d8      	bpl.n	80093b8 <_printf_float+0x250>
 8009406:	ee18 3a10 	vmov	r3, s16
 800940a:	4652      	mov	r2, sl
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	47b8      	blx	r7
 8009412:	3001      	adds	r0, #1
 8009414:	f43f af09 	beq.w	800922a <_printf_float+0xc2>
 8009418:	f04f 0900 	mov.w	r9, #0
 800941c:	f104 0a1a 	add.w	sl, r4, #26
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	425b      	negs	r3, r3
 8009424:	454b      	cmp	r3, r9
 8009426:	dc01      	bgt.n	800942c <_printf_float+0x2c4>
 8009428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942a:	e792      	b.n	8009352 <_printf_float+0x1ea>
 800942c:	2301      	movs	r3, #1
 800942e:	4652      	mov	r2, sl
 8009430:	4631      	mov	r1, r6
 8009432:	4628      	mov	r0, r5
 8009434:	47b8      	blx	r7
 8009436:	3001      	adds	r0, #1
 8009438:	f43f aef7 	beq.w	800922a <_printf_float+0xc2>
 800943c:	f109 0901 	add.w	r9, r9, #1
 8009440:	e7ee      	b.n	8009420 <_printf_float+0x2b8>
 8009442:	bf00      	nop
 8009444:	7fefffff 	.word	0x7fefffff
 8009448:	0800ea4c 	.word	0x0800ea4c
 800944c:	0800ea50 	.word	0x0800ea50
 8009450:	0800ea58 	.word	0x0800ea58
 8009454:	0800ea54 	.word	0x0800ea54
 8009458:	0800ea5c 	.word	0x0800ea5c
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009460:	429a      	cmp	r2, r3
 8009462:	bfa8      	it	ge
 8009464:	461a      	movge	r2, r3
 8009466:	2a00      	cmp	r2, #0
 8009468:	4691      	mov	r9, r2
 800946a:	dc37      	bgt.n	80094dc <_printf_float+0x374>
 800946c:	f04f 0b00 	mov.w	fp, #0
 8009470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009474:	f104 021a 	add.w	r2, r4, #26
 8009478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	eba3 0309 	sub.w	r3, r3, r9
 8009480:	455b      	cmp	r3, fp
 8009482:	dc33      	bgt.n	80094ec <_printf_float+0x384>
 8009484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009488:	429a      	cmp	r2, r3
 800948a:	db3b      	blt.n	8009504 <_printf_float+0x39c>
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d438      	bmi.n	8009504 <_printf_float+0x39c>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009498:	1a9a      	subs	r2, r3, r2
 800949a:	eba3 0901 	sub.w	r9, r3, r1
 800949e:	4591      	cmp	r9, r2
 80094a0:	bfa8      	it	ge
 80094a2:	4691      	movge	r9, r2
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	dc35      	bgt.n	8009516 <_printf_float+0x3ae>
 80094aa:	f04f 0800 	mov.w	r8, #0
 80094ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094b2:	f104 0a1a 	add.w	sl, r4, #26
 80094b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	eba3 0309 	sub.w	r3, r3, r9
 80094c0:	4543      	cmp	r3, r8
 80094c2:	f77f af79 	ble.w	80093b8 <_printf_float+0x250>
 80094c6:	2301      	movs	r3, #1
 80094c8:	4652      	mov	r2, sl
 80094ca:	4631      	mov	r1, r6
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b8      	blx	r7
 80094d0:	3001      	adds	r0, #1
 80094d2:	f43f aeaa 	beq.w	800922a <_printf_float+0xc2>
 80094d6:	f108 0801 	add.w	r8, r8, #1
 80094da:	e7ec      	b.n	80094b6 <_printf_float+0x34e>
 80094dc:	4613      	mov	r3, r2
 80094de:	4631      	mov	r1, r6
 80094e0:	4642      	mov	r2, r8
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b8      	blx	r7
 80094e6:	3001      	adds	r0, #1
 80094e8:	d1c0      	bne.n	800946c <_printf_float+0x304>
 80094ea:	e69e      	b.n	800922a <_printf_float+0xc2>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	9205      	str	r2, [sp, #20]
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f ae97 	beq.w	800922a <_printf_float+0xc2>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	f10b 0b01 	add.w	fp, fp, #1
 8009502:	e7b9      	b.n	8009478 <_printf_float+0x310>
 8009504:	ee18 3a10 	vmov	r3, s16
 8009508:	4652      	mov	r2, sl
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	d1be      	bne.n	8009492 <_printf_float+0x32a>
 8009514:	e689      	b.n	800922a <_printf_float+0xc2>
 8009516:	9a05      	ldr	r2, [sp, #20]
 8009518:	464b      	mov	r3, r9
 800951a:	4442      	add	r2, r8
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	d1c1      	bne.n	80094aa <_printf_float+0x342>
 8009526:	e680      	b.n	800922a <_printf_float+0xc2>
 8009528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800952a:	2a01      	cmp	r2, #1
 800952c:	dc01      	bgt.n	8009532 <_printf_float+0x3ca>
 800952e:	07db      	lsls	r3, r3, #31
 8009530:	d538      	bpl.n	80095a4 <_printf_float+0x43c>
 8009532:	2301      	movs	r3, #1
 8009534:	4642      	mov	r2, r8
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	f43f ae74 	beq.w	800922a <_printf_float+0xc2>
 8009542:	ee18 3a10 	vmov	r3, s16
 8009546:	4652      	mov	r2, sl
 8009548:	4631      	mov	r1, r6
 800954a:	4628      	mov	r0, r5
 800954c:	47b8      	blx	r7
 800954e:	3001      	adds	r0, #1
 8009550:	f43f ae6b 	beq.w	800922a <_printf_float+0xc2>
 8009554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	f7f7 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009560:	b9d8      	cbnz	r0, 800959a <_printf_float+0x432>
 8009562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009564:	f108 0201 	add.w	r2, r8, #1
 8009568:	3b01      	subs	r3, #1
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d10e      	bne.n	8009592 <_printf_float+0x42a>
 8009574:	e659      	b.n	800922a <_printf_float+0xc2>
 8009576:	2301      	movs	r3, #1
 8009578:	4652      	mov	r2, sl
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae52 	beq.w	800922a <_printf_float+0xc2>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	3b01      	subs	r3, #1
 800958e:	4543      	cmp	r3, r8
 8009590:	dcf1      	bgt.n	8009576 <_printf_float+0x40e>
 8009592:	464b      	mov	r3, r9
 8009594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009598:	e6dc      	b.n	8009354 <_printf_float+0x1ec>
 800959a:	f04f 0800 	mov.w	r8, #0
 800959e:	f104 0a1a 	add.w	sl, r4, #26
 80095a2:	e7f2      	b.n	800958a <_printf_float+0x422>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4642      	mov	r2, r8
 80095a8:	e7df      	b.n	800956a <_printf_float+0x402>
 80095aa:	2301      	movs	r3, #1
 80095ac:	464a      	mov	r2, r9
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f ae38 	beq.w	800922a <_printf_float+0xc2>
 80095ba:	f108 0801 	add.w	r8, r8, #1
 80095be:	68e3      	ldr	r3, [r4, #12]
 80095c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095c2:	1a5b      	subs	r3, r3, r1
 80095c4:	4543      	cmp	r3, r8
 80095c6:	dcf0      	bgt.n	80095aa <_printf_float+0x442>
 80095c8:	e6fa      	b.n	80093c0 <_printf_float+0x258>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	f104 0919 	add.w	r9, r4, #25
 80095d2:	e7f4      	b.n	80095be <_printf_float+0x456>

080095d4 <_printf_common>:
 80095d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d8:	4616      	mov	r6, r2
 80095da:	4699      	mov	r9, r3
 80095dc:	688a      	ldr	r2, [r1, #8]
 80095de:	690b      	ldr	r3, [r1, #16]
 80095e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bfb8      	it	lt
 80095e8:	4613      	movlt	r3, r2
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095f0:	4607      	mov	r7, r0
 80095f2:	460c      	mov	r4, r1
 80095f4:	b10a      	cbz	r2, 80095fa <_printf_common+0x26>
 80095f6:	3301      	adds	r3, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	0699      	lsls	r1, r3, #26
 80095fe:	bf42      	ittt	mi
 8009600:	6833      	ldrmi	r3, [r6, #0]
 8009602:	3302      	addmi	r3, #2
 8009604:	6033      	strmi	r3, [r6, #0]
 8009606:	6825      	ldr	r5, [r4, #0]
 8009608:	f015 0506 	ands.w	r5, r5, #6
 800960c:	d106      	bne.n	800961c <_printf_common+0x48>
 800960e:	f104 0a19 	add.w	sl, r4, #25
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	6832      	ldr	r2, [r6, #0]
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	42ab      	cmp	r3, r5
 800961a:	dc26      	bgt.n	800966a <_printf_common+0x96>
 800961c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009620:	1e13      	subs	r3, r2, #0
 8009622:	6822      	ldr	r2, [r4, #0]
 8009624:	bf18      	it	ne
 8009626:	2301      	movne	r3, #1
 8009628:	0692      	lsls	r2, r2, #26
 800962a:	d42b      	bmi.n	8009684 <_printf_common+0xb0>
 800962c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009630:	4649      	mov	r1, r9
 8009632:	4638      	mov	r0, r7
 8009634:	47c0      	blx	r8
 8009636:	3001      	adds	r0, #1
 8009638:	d01e      	beq.n	8009678 <_printf_common+0xa4>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	68e5      	ldr	r5, [r4, #12]
 800963e:	6832      	ldr	r2, [r6, #0]
 8009640:	f003 0306 	and.w	r3, r3, #6
 8009644:	2b04      	cmp	r3, #4
 8009646:	bf08      	it	eq
 8009648:	1aad      	subeq	r5, r5, r2
 800964a:	68a3      	ldr	r3, [r4, #8]
 800964c:	6922      	ldr	r2, [r4, #16]
 800964e:	bf0c      	ite	eq
 8009650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009654:	2500      	movne	r5, #0
 8009656:	4293      	cmp	r3, r2
 8009658:	bfc4      	itt	gt
 800965a:	1a9b      	subgt	r3, r3, r2
 800965c:	18ed      	addgt	r5, r5, r3
 800965e:	2600      	movs	r6, #0
 8009660:	341a      	adds	r4, #26
 8009662:	42b5      	cmp	r5, r6
 8009664:	d11a      	bne.n	800969c <_printf_common+0xc8>
 8009666:	2000      	movs	r0, #0
 8009668:	e008      	b.n	800967c <_printf_common+0xa8>
 800966a:	2301      	movs	r3, #1
 800966c:	4652      	mov	r2, sl
 800966e:	4649      	mov	r1, r9
 8009670:	4638      	mov	r0, r7
 8009672:	47c0      	blx	r8
 8009674:	3001      	adds	r0, #1
 8009676:	d103      	bne.n	8009680 <_printf_common+0xac>
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	3501      	adds	r5, #1
 8009682:	e7c6      	b.n	8009612 <_printf_common+0x3e>
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	2030      	movs	r0, #48	; 0x30
 800968a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800968e:	4422      	add	r2, r4
 8009690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009698:	3302      	adds	r3, #2
 800969a:	e7c7      	b.n	800962c <_printf_common+0x58>
 800969c:	2301      	movs	r3, #1
 800969e:	4622      	mov	r2, r4
 80096a0:	4649      	mov	r1, r9
 80096a2:	4638      	mov	r0, r7
 80096a4:	47c0      	blx	r8
 80096a6:	3001      	adds	r0, #1
 80096a8:	d0e6      	beq.n	8009678 <_printf_common+0xa4>
 80096aa:	3601      	adds	r6, #1
 80096ac:	e7d9      	b.n	8009662 <_printf_common+0x8e>
	...

080096b0 <_printf_i>:
 80096b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b4:	7e0f      	ldrb	r7, [r1, #24]
 80096b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096b8:	2f78      	cmp	r7, #120	; 0x78
 80096ba:	4691      	mov	r9, r2
 80096bc:	4680      	mov	r8, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	469a      	mov	sl, r3
 80096c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80096c6:	d807      	bhi.n	80096d8 <_printf_i+0x28>
 80096c8:	2f62      	cmp	r7, #98	; 0x62
 80096ca:	d80a      	bhi.n	80096e2 <_printf_i+0x32>
 80096cc:	2f00      	cmp	r7, #0
 80096ce:	f000 80d8 	beq.w	8009882 <_printf_i+0x1d2>
 80096d2:	2f58      	cmp	r7, #88	; 0x58
 80096d4:	f000 80a3 	beq.w	800981e <_printf_i+0x16e>
 80096d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096e0:	e03a      	b.n	8009758 <_printf_i+0xa8>
 80096e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096e6:	2b15      	cmp	r3, #21
 80096e8:	d8f6      	bhi.n	80096d8 <_printf_i+0x28>
 80096ea:	a101      	add	r1, pc, #4	; (adr r1, 80096f0 <_printf_i+0x40>)
 80096ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096f0:	08009749 	.word	0x08009749
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	080096d9 	.word	0x080096d9
 80096fc:	080096d9 	.word	0x080096d9
 8009700:	080096d9 	.word	0x080096d9
 8009704:	080096d9 	.word	0x080096d9
 8009708:	0800975d 	.word	0x0800975d
 800970c:	080096d9 	.word	0x080096d9
 8009710:	080096d9 	.word	0x080096d9
 8009714:	080096d9 	.word	0x080096d9
 8009718:	080096d9 	.word	0x080096d9
 800971c:	08009869 	.word	0x08009869
 8009720:	0800978d 	.word	0x0800978d
 8009724:	0800984b 	.word	0x0800984b
 8009728:	080096d9 	.word	0x080096d9
 800972c:	080096d9 	.word	0x080096d9
 8009730:	0800988b 	.word	0x0800988b
 8009734:	080096d9 	.word	0x080096d9
 8009738:	0800978d 	.word	0x0800978d
 800973c:	080096d9 	.word	0x080096d9
 8009740:	080096d9 	.word	0x080096d9
 8009744:	08009853 	.word	0x08009853
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	602a      	str	r2, [r5, #0]
 8009750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009758:	2301      	movs	r3, #1
 800975a:	e0a3      	b.n	80098a4 <_printf_i+0x1f4>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	6829      	ldr	r1, [r5, #0]
 8009760:	0606      	lsls	r6, r0, #24
 8009762:	f101 0304 	add.w	r3, r1, #4
 8009766:	d50a      	bpl.n	800977e <_printf_i+0xce>
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	2e00      	cmp	r6, #0
 800976e:	da03      	bge.n	8009778 <_printf_i+0xc8>
 8009770:	232d      	movs	r3, #45	; 0x2d
 8009772:	4276      	negs	r6, r6
 8009774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009778:	485e      	ldr	r0, [pc, #376]	; (80098f4 <_printf_i+0x244>)
 800977a:	230a      	movs	r3, #10
 800977c:	e019      	b.n	80097b2 <_printf_i+0x102>
 800977e:	680e      	ldr	r6, [r1, #0]
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009786:	bf18      	it	ne
 8009788:	b236      	sxthne	r6, r6
 800978a:	e7ef      	b.n	800976c <_printf_i+0xbc>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	1d19      	adds	r1, r3, #4
 8009792:	6029      	str	r1, [r5, #0]
 8009794:	0601      	lsls	r1, r0, #24
 8009796:	d501      	bpl.n	800979c <_printf_i+0xec>
 8009798:	681e      	ldr	r6, [r3, #0]
 800979a:	e002      	b.n	80097a2 <_printf_i+0xf2>
 800979c:	0646      	lsls	r6, r0, #25
 800979e:	d5fb      	bpl.n	8009798 <_printf_i+0xe8>
 80097a0:	881e      	ldrh	r6, [r3, #0]
 80097a2:	4854      	ldr	r0, [pc, #336]	; (80098f4 <_printf_i+0x244>)
 80097a4:	2f6f      	cmp	r7, #111	; 0x6f
 80097a6:	bf0c      	ite	eq
 80097a8:	2308      	moveq	r3, #8
 80097aa:	230a      	movne	r3, #10
 80097ac:	2100      	movs	r1, #0
 80097ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097b2:	6865      	ldr	r5, [r4, #4]
 80097b4:	60a5      	str	r5, [r4, #8]
 80097b6:	2d00      	cmp	r5, #0
 80097b8:	bfa2      	ittt	ge
 80097ba:	6821      	ldrge	r1, [r4, #0]
 80097bc:	f021 0104 	bicge.w	r1, r1, #4
 80097c0:	6021      	strge	r1, [r4, #0]
 80097c2:	b90e      	cbnz	r6, 80097c8 <_printf_i+0x118>
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	d04d      	beq.n	8009864 <_printf_i+0x1b4>
 80097c8:	4615      	mov	r5, r2
 80097ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80097ce:	fb03 6711 	mls	r7, r3, r1, r6
 80097d2:	5dc7      	ldrb	r7, [r0, r7]
 80097d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097d8:	4637      	mov	r7, r6
 80097da:	42bb      	cmp	r3, r7
 80097dc:	460e      	mov	r6, r1
 80097de:	d9f4      	bls.n	80097ca <_printf_i+0x11a>
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	d10b      	bne.n	80097fc <_printf_i+0x14c>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	07de      	lsls	r6, r3, #31
 80097e8:	d508      	bpl.n	80097fc <_printf_i+0x14c>
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4299      	cmp	r1, r3
 80097f0:	bfde      	ittt	le
 80097f2:	2330      	movle	r3, #48	; 0x30
 80097f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097fc:	1b52      	subs	r2, r2, r5
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	f8cd a000 	str.w	sl, [sp]
 8009804:	464b      	mov	r3, r9
 8009806:	aa03      	add	r2, sp, #12
 8009808:	4621      	mov	r1, r4
 800980a:	4640      	mov	r0, r8
 800980c:	f7ff fee2 	bl	80095d4 <_printf_common>
 8009810:	3001      	adds	r0, #1
 8009812:	d14c      	bne.n	80098ae <_printf_i+0x1fe>
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	b004      	add	sp, #16
 800981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981e:	4835      	ldr	r0, [pc, #212]	; (80098f4 <_printf_i+0x244>)
 8009820:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009824:	6829      	ldr	r1, [r5, #0]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	f851 6b04 	ldr.w	r6, [r1], #4
 800982c:	6029      	str	r1, [r5, #0]
 800982e:	061d      	lsls	r5, r3, #24
 8009830:	d514      	bpl.n	800985c <_printf_i+0x1ac>
 8009832:	07df      	lsls	r7, r3, #31
 8009834:	bf44      	itt	mi
 8009836:	f043 0320 	orrmi.w	r3, r3, #32
 800983a:	6023      	strmi	r3, [r4, #0]
 800983c:	b91e      	cbnz	r6, 8009846 <_printf_i+0x196>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f023 0320 	bic.w	r3, r3, #32
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	2310      	movs	r3, #16
 8009848:	e7b0      	b.n	80097ac <_printf_i+0xfc>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	f043 0320 	orr.w	r3, r3, #32
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	2378      	movs	r3, #120	; 0x78
 8009854:	4828      	ldr	r0, [pc, #160]	; (80098f8 <_printf_i+0x248>)
 8009856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800985a:	e7e3      	b.n	8009824 <_printf_i+0x174>
 800985c:	0659      	lsls	r1, r3, #25
 800985e:	bf48      	it	mi
 8009860:	b2b6      	uxthmi	r6, r6
 8009862:	e7e6      	b.n	8009832 <_printf_i+0x182>
 8009864:	4615      	mov	r5, r2
 8009866:	e7bb      	b.n	80097e0 <_printf_i+0x130>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	6826      	ldr	r6, [r4, #0]
 800986c:	6961      	ldr	r1, [r4, #20]
 800986e:	1d18      	adds	r0, r3, #4
 8009870:	6028      	str	r0, [r5, #0]
 8009872:	0635      	lsls	r5, r6, #24
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	d501      	bpl.n	800987c <_printf_i+0x1cc>
 8009878:	6019      	str	r1, [r3, #0]
 800987a:	e002      	b.n	8009882 <_printf_i+0x1d2>
 800987c:	0670      	lsls	r0, r6, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0x1c8>
 8009880:	8019      	strh	r1, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	6123      	str	r3, [r4, #16]
 8009886:	4615      	mov	r5, r2
 8009888:	e7ba      	b.n	8009800 <_printf_i+0x150>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	1d1a      	adds	r2, r3, #4
 800988e:	602a      	str	r2, [r5, #0]
 8009890:	681d      	ldr	r5, [r3, #0]
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	2100      	movs	r1, #0
 8009896:	4628      	mov	r0, r5
 8009898:	f7f6 fca2 	bl	80001e0 <memchr>
 800989c:	b108      	cbz	r0, 80098a2 <_printf_i+0x1f2>
 800989e:	1b40      	subs	r0, r0, r5
 80098a0:	6060      	str	r0, [r4, #4]
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	6123      	str	r3, [r4, #16]
 80098a6:	2300      	movs	r3, #0
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ac:	e7a8      	b.n	8009800 <_printf_i+0x150>
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4649      	mov	r1, r9
 80098b4:	4640      	mov	r0, r8
 80098b6:	47d0      	blx	sl
 80098b8:	3001      	adds	r0, #1
 80098ba:	d0ab      	beq.n	8009814 <_printf_i+0x164>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	079b      	lsls	r3, r3, #30
 80098c0:	d413      	bmi.n	80098ea <_printf_i+0x23a>
 80098c2:	68e0      	ldr	r0, [r4, #12]
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	4298      	cmp	r0, r3
 80098c8:	bfb8      	it	lt
 80098ca:	4618      	movlt	r0, r3
 80098cc:	e7a4      	b.n	8009818 <_printf_i+0x168>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4632      	mov	r2, r6
 80098d2:	4649      	mov	r1, r9
 80098d4:	4640      	mov	r0, r8
 80098d6:	47d0      	blx	sl
 80098d8:	3001      	adds	r0, #1
 80098da:	d09b      	beq.n	8009814 <_printf_i+0x164>
 80098dc:	3501      	adds	r5, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	9903      	ldr	r1, [sp, #12]
 80098e2:	1a5b      	subs	r3, r3, r1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dcf2      	bgt.n	80098ce <_printf_i+0x21e>
 80098e8:	e7eb      	b.n	80098c2 <_printf_i+0x212>
 80098ea:	2500      	movs	r5, #0
 80098ec:	f104 0619 	add.w	r6, r4, #25
 80098f0:	e7f5      	b.n	80098de <_printf_i+0x22e>
 80098f2:	bf00      	nop
 80098f4:	0800ea5e 	.word	0x0800ea5e
 80098f8:	0800ea6f 	.word	0x0800ea6f

080098fc <_scanf_float>:
 80098fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009900:	b087      	sub	sp, #28
 8009902:	4617      	mov	r7, r2
 8009904:	9303      	str	r3, [sp, #12]
 8009906:	688b      	ldr	r3, [r1, #8]
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800990e:	bf83      	ittte	hi
 8009910:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009914:	195b      	addhi	r3, r3, r5
 8009916:	9302      	strhi	r3, [sp, #8]
 8009918:	2300      	movls	r3, #0
 800991a:	bf86      	itte	hi
 800991c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009920:	608b      	strhi	r3, [r1, #8]
 8009922:	9302      	strls	r3, [sp, #8]
 8009924:	680b      	ldr	r3, [r1, #0]
 8009926:	468b      	mov	fp, r1
 8009928:	2500      	movs	r5, #0
 800992a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800992e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009932:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009936:	4680      	mov	r8, r0
 8009938:	460c      	mov	r4, r1
 800993a:	465e      	mov	r6, fp
 800993c:	46aa      	mov	sl, r5
 800993e:	46a9      	mov	r9, r5
 8009940:	9501      	str	r5, [sp, #4]
 8009942:	68a2      	ldr	r2, [r4, #8]
 8009944:	b152      	cbz	r2, 800995c <_scanf_float+0x60>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b4e      	cmp	r3, #78	; 0x4e
 800994c:	d864      	bhi.n	8009a18 <_scanf_float+0x11c>
 800994e:	2b40      	cmp	r3, #64	; 0x40
 8009950:	d83c      	bhi.n	80099cc <_scanf_float+0xd0>
 8009952:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009956:	b2c8      	uxtb	r0, r1
 8009958:	280e      	cmp	r0, #14
 800995a:	d93a      	bls.n	80099d2 <_scanf_float+0xd6>
 800995c:	f1b9 0f00 	cmp.w	r9, #0
 8009960:	d003      	beq.n	800996a <_scanf_float+0x6e>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800996e:	f1ba 0f01 	cmp.w	sl, #1
 8009972:	f200 8113 	bhi.w	8009b9c <_scanf_float+0x2a0>
 8009976:	455e      	cmp	r6, fp
 8009978:	f200 8105 	bhi.w	8009b86 <_scanf_float+0x28a>
 800997c:	2501      	movs	r5, #1
 800997e:	4628      	mov	r0, r5
 8009980:	b007      	add	sp, #28
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800998a:	2a0d      	cmp	r2, #13
 800998c:	d8e6      	bhi.n	800995c <_scanf_float+0x60>
 800998e:	a101      	add	r1, pc, #4	; (adr r1, 8009994 <_scanf_float+0x98>)
 8009990:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009994:	08009ad3 	.word	0x08009ad3
 8009998:	0800995d 	.word	0x0800995d
 800999c:	0800995d 	.word	0x0800995d
 80099a0:	0800995d 	.word	0x0800995d
 80099a4:	08009b33 	.word	0x08009b33
 80099a8:	08009b0b 	.word	0x08009b0b
 80099ac:	0800995d 	.word	0x0800995d
 80099b0:	0800995d 	.word	0x0800995d
 80099b4:	08009ae1 	.word	0x08009ae1
 80099b8:	0800995d 	.word	0x0800995d
 80099bc:	0800995d 	.word	0x0800995d
 80099c0:	0800995d 	.word	0x0800995d
 80099c4:	0800995d 	.word	0x0800995d
 80099c8:	08009a99 	.word	0x08009a99
 80099cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80099d0:	e7db      	b.n	800998a <_scanf_float+0x8e>
 80099d2:	290e      	cmp	r1, #14
 80099d4:	d8c2      	bhi.n	800995c <_scanf_float+0x60>
 80099d6:	a001      	add	r0, pc, #4	; (adr r0, 80099dc <_scanf_float+0xe0>)
 80099d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099dc:	08009a8b 	.word	0x08009a8b
 80099e0:	0800995d 	.word	0x0800995d
 80099e4:	08009a8b 	.word	0x08009a8b
 80099e8:	08009b1f 	.word	0x08009b1f
 80099ec:	0800995d 	.word	0x0800995d
 80099f0:	08009a39 	.word	0x08009a39
 80099f4:	08009a75 	.word	0x08009a75
 80099f8:	08009a75 	.word	0x08009a75
 80099fc:	08009a75 	.word	0x08009a75
 8009a00:	08009a75 	.word	0x08009a75
 8009a04:	08009a75 	.word	0x08009a75
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	08009a75 	.word	0x08009a75
 8009a14:	08009a75 	.word	0x08009a75
 8009a18:	2b6e      	cmp	r3, #110	; 0x6e
 8009a1a:	d809      	bhi.n	8009a30 <_scanf_float+0x134>
 8009a1c:	2b60      	cmp	r3, #96	; 0x60
 8009a1e:	d8b2      	bhi.n	8009986 <_scanf_float+0x8a>
 8009a20:	2b54      	cmp	r3, #84	; 0x54
 8009a22:	d077      	beq.n	8009b14 <_scanf_float+0x218>
 8009a24:	2b59      	cmp	r3, #89	; 0x59
 8009a26:	d199      	bne.n	800995c <_scanf_float+0x60>
 8009a28:	2d07      	cmp	r5, #7
 8009a2a:	d197      	bne.n	800995c <_scanf_float+0x60>
 8009a2c:	2508      	movs	r5, #8
 8009a2e:	e029      	b.n	8009a84 <_scanf_float+0x188>
 8009a30:	2b74      	cmp	r3, #116	; 0x74
 8009a32:	d06f      	beq.n	8009b14 <_scanf_float+0x218>
 8009a34:	2b79      	cmp	r3, #121	; 0x79
 8009a36:	e7f6      	b.n	8009a26 <_scanf_float+0x12a>
 8009a38:	6821      	ldr	r1, [r4, #0]
 8009a3a:	05c8      	lsls	r0, r1, #23
 8009a3c:	d51a      	bpl.n	8009a74 <_scanf_float+0x178>
 8009a3e:	9b02      	ldr	r3, [sp, #8]
 8009a40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a44:	6021      	str	r1, [r4, #0]
 8009a46:	f109 0901 	add.w	r9, r9, #1
 8009a4a:	b11b      	cbz	r3, 8009a54 <_scanf_float+0x158>
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	3201      	adds	r2, #1
 8009a50:	9302      	str	r3, [sp, #8]
 8009a52:	60a2      	str	r2, [r4, #8]
 8009a54:	68a3      	ldr	r3, [r4, #8]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	60a3      	str	r3, [r4, #8]
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	607b      	str	r3, [r7, #4]
 8009a68:	f340 8084 	ble.w	8009b74 <_scanf_float+0x278>
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	e766      	b.n	8009942 <_scanf_float+0x46>
 8009a74:	eb1a 0f05 	cmn.w	sl, r5
 8009a78:	f47f af70 	bne.w	800995c <_scanf_float+0x60>
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	e7e4      	b.n	8009a54 <_scanf_float+0x158>
 8009a8a:	6822      	ldr	r2, [r4, #0]
 8009a8c:	0610      	lsls	r0, r2, #24
 8009a8e:	f57f af65 	bpl.w	800995c <_scanf_float+0x60>
 8009a92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a96:	e7f4      	b.n	8009a82 <_scanf_float+0x186>
 8009a98:	f1ba 0f00 	cmp.w	sl, #0
 8009a9c:	d10e      	bne.n	8009abc <_scanf_float+0x1c0>
 8009a9e:	f1b9 0f00 	cmp.w	r9, #0
 8009aa2:	d10e      	bne.n	8009ac2 <_scanf_float+0x1c6>
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009aaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009aae:	d108      	bne.n	8009ac2 <_scanf_float+0x1c6>
 8009ab0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ab4:	6022      	str	r2, [r4, #0]
 8009ab6:	f04f 0a01 	mov.w	sl, #1
 8009aba:	e7e3      	b.n	8009a84 <_scanf_float+0x188>
 8009abc:	f1ba 0f02 	cmp.w	sl, #2
 8009ac0:	d055      	beq.n	8009b6e <_scanf_float+0x272>
 8009ac2:	2d01      	cmp	r5, #1
 8009ac4:	d002      	beq.n	8009acc <_scanf_float+0x1d0>
 8009ac6:	2d04      	cmp	r5, #4
 8009ac8:	f47f af48 	bne.w	800995c <_scanf_float+0x60>
 8009acc:	3501      	adds	r5, #1
 8009ace:	b2ed      	uxtb	r5, r5
 8009ad0:	e7d8      	b.n	8009a84 <_scanf_float+0x188>
 8009ad2:	f1ba 0f01 	cmp.w	sl, #1
 8009ad6:	f47f af41 	bne.w	800995c <_scanf_float+0x60>
 8009ada:	f04f 0a02 	mov.w	sl, #2
 8009ade:	e7d1      	b.n	8009a84 <_scanf_float+0x188>
 8009ae0:	b97d      	cbnz	r5, 8009b02 <_scanf_float+0x206>
 8009ae2:	f1b9 0f00 	cmp.w	r9, #0
 8009ae6:	f47f af3c 	bne.w	8009962 <_scanf_float+0x66>
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009af0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009af4:	f47f af39 	bne.w	800996a <_scanf_float+0x6e>
 8009af8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009afc:	6022      	str	r2, [r4, #0]
 8009afe:	2501      	movs	r5, #1
 8009b00:	e7c0      	b.n	8009a84 <_scanf_float+0x188>
 8009b02:	2d03      	cmp	r5, #3
 8009b04:	d0e2      	beq.n	8009acc <_scanf_float+0x1d0>
 8009b06:	2d05      	cmp	r5, #5
 8009b08:	e7de      	b.n	8009ac8 <_scanf_float+0x1cc>
 8009b0a:	2d02      	cmp	r5, #2
 8009b0c:	f47f af26 	bne.w	800995c <_scanf_float+0x60>
 8009b10:	2503      	movs	r5, #3
 8009b12:	e7b7      	b.n	8009a84 <_scanf_float+0x188>
 8009b14:	2d06      	cmp	r5, #6
 8009b16:	f47f af21 	bne.w	800995c <_scanf_float+0x60>
 8009b1a:	2507      	movs	r5, #7
 8009b1c:	e7b2      	b.n	8009a84 <_scanf_float+0x188>
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	0591      	lsls	r1, r2, #22
 8009b22:	f57f af1b 	bpl.w	800995c <_scanf_float+0x60>
 8009b26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b30:	e7a8      	b.n	8009a84 <_scanf_float+0x188>
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009b38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009b3c:	d006      	beq.n	8009b4c <_scanf_float+0x250>
 8009b3e:	0550      	lsls	r0, r2, #21
 8009b40:	f57f af0c 	bpl.w	800995c <_scanf_float+0x60>
 8009b44:	f1b9 0f00 	cmp.w	r9, #0
 8009b48:	f43f af0f 	beq.w	800996a <_scanf_float+0x6e>
 8009b4c:	0591      	lsls	r1, r2, #22
 8009b4e:	bf58      	it	pl
 8009b50:	9901      	ldrpl	r1, [sp, #4]
 8009b52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b56:	bf58      	it	pl
 8009b58:	eba9 0101 	subpl.w	r1, r9, r1
 8009b5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009b60:	bf58      	it	pl
 8009b62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	f04f 0900 	mov.w	r9, #0
 8009b6c:	e78a      	b.n	8009a84 <_scanf_float+0x188>
 8009b6e:	f04f 0a03 	mov.w	sl, #3
 8009b72:	e787      	b.n	8009a84 <_scanf_float+0x188>
 8009b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b78:	4639      	mov	r1, r7
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4798      	blx	r3
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f43f aedf 	beq.w	8009942 <_scanf_float+0x46>
 8009b84:	e6ea      	b.n	800995c <_scanf_float+0x60>
 8009b86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b8e:	463a      	mov	r2, r7
 8009b90:	4640      	mov	r0, r8
 8009b92:	4798      	blx	r3
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	e6ec      	b.n	8009976 <_scanf_float+0x7a>
 8009b9c:	1e6b      	subs	r3, r5, #1
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d825      	bhi.n	8009bee <_scanf_float+0x2f2>
 8009ba2:	2d02      	cmp	r5, #2
 8009ba4:	d836      	bhi.n	8009c14 <_scanf_float+0x318>
 8009ba6:	455e      	cmp	r6, fp
 8009ba8:	f67f aee8 	bls.w	800997c <_scanf_float+0x80>
 8009bac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bb4:	463a      	mov	r2, r7
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	4798      	blx	r3
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	e7f1      	b.n	8009ba6 <_scanf_float+0x2aa>
 8009bc2:	9802      	ldr	r0, [sp, #8]
 8009bc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009bcc:	9002      	str	r0, [sp, #8]
 8009bce:	463a      	mov	r2, r7
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4798      	blx	r3
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	6123      	str	r3, [r4, #16]
 8009bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bde:	fa5f fa8a 	uxtb.w	sl, sl
 8009be2:	f1ba 0f02 	cmp.w	sl, #2
 8009be6:	d1ec      	bne.n	8009bc2 <_scanf_float+0x2c6>
 8009be8:	3d03      	subs	r5, #3
 8009bea:	b2ed      	uxtb	r5, r5
 8009bec:	1b76      	subs	r6, r6, r5
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	05da      	lsls	r2, r3, #23
 8009bf2:	d52f      	bpl.n	8009c54 <_scanf_float+0x358>
 8009bf4:	055b      	lsls	r3, r3, #21
 8009bf6:	d510      	bpl.n	8009c1a <_scanf_float+0x31e>
 8009bf8:	455e      	cmp	r6, fp
 8009bfa:	f67f aebf 	bls.w	800997c <_scanf_float+0x80>
 8009bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c06:	463a      	mov	r2, r7
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4798      	blx	r3
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	e7f1      	b.n	8009bf8 <_scanf_float+0x2fc>
 8009c14:	46aa      	mov	sl, r5
 8009c16:	9602      	str	r6, [sp, #8]
 8009c18:	e7df      	b.n	8009bda <_scanf_float+0x2de>
 8009c1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	2965      	cmp	r1, #101	; 0x65
 8009c22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c26:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	d00c      	beq.n	8009c48 <_scanf_float+0x34c>
 8009c2e:	2945      	cmp	r1, #69	; 0x45
 8009c30:	d00a      	beq.n	8009c48 <_scanf_float+0x34c>
 8009c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c36:	463a      	mov	r2, r7
 8009c38:	4640      	mov	r0, r8
 8009c3a:	4798      	blx	r3
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c42:	3b01      	subs	r3, #1
 8009c44:	1eb5      	subs	r5, r6, #2
 8009c46:	6123      	str	r3, [r4, #16]
 8009c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	4640      	mov	r0, r8
 8009c50:	4798      	blx	r3
 8009c52:	462e      	mov	r6, r5
 8009c54:	6825      	ldr	r5, [r4, #0]
 8009c56:	f015 0510 	ands.w	r5, r5, #16
 8009c5a:	d159      	bne.n	8009d10 <_scanf_float+0x414>
 8009c5c:	7035      	strb	r5, [r6, #0]
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c68:	d11b      	bne.n	8009ca2 <_scanf_float+0x3a6>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	454b      	cmp	r3, r9
 8009c6e:	eba3 0209 	sub.w	r2, r3, r9
 8009c72:	d123      	bne.n	8009cbc <_scanf_float+0x3c0>
 8009c74:	2200      	movs	r2, #0
 8009c76:	4659      	mov	r1, fp
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f000 fe97 	bl	800a9ac <_strtod_r>
 8009c7e:	6822      	ldr	r2, [r4, #0]
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	f012 0f02 	tst.w	r2, #2
 8009c86:	ec57 6b10 	vmov	r6, r7, d0
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	d021      	beq.n	8009cd2 <_scanf_float+0x3d6>
 8009c8e:	9903      	ldr	r1, [sp, #12]
 8009c90:	1d1a      	adds	r2, r3, #4
 8009c92:	600a      	str	r2, [r1, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	e9c3 6700 	strd	r6, r7, [r3]
 8009c9a:	68e3      	ldr	r3, [r4, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	60e3      	str	r3, [r4, #12]
 8009ca0:	e66d      	b.n	800997e <_scanf_float+0x82>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0e5      	beq.n	8009c74 <_scanf_float+0x378>
 8009ca8:	9905      	ldr	r1, [sp, #20]
 8009caa:	230a      	movs	r3, #10
 8009cac:	462a      	mov	r2, r5
 8009cae:	3101      	adds	r1, #1
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	f000 ff03 	bl	800aabc <_strtol_r>
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	9e05      	ldr	r6, [sp, #20]
 8009cba:	1ac2      	subs	r2, r0, r3
 8009cbc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009cc0:	429e      	cmp	r6, r3
 8009cc2:	bf28      	it	cs
 8009cc4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009cc8:	4912      	ldr	r1, [pc, #72]	; (8009d14 <_scanf_float+0x418>)
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f000 f82c 	bl	8009d28 <siprintf>
 8009cd0:	e7d0      	b.n	8009c74 <_scanf_float+0x378>
 8009cd2:	9903      	ldr	r1, [sp, #12]
 8009cd4:	f012 0f04 	tst.w	r2, #4
 8009cd8:	f103 0204 	add.w	r2, r3, #4
 8009cdc:	600a      	str	r2, [r1, #0]
 8009cde:	d1d9      	bne.n	8009c94 <_scanf_float+0x398>
 8009ce0:	f8d3 8000 	ldr.w	r8, [r3]
 8009ce4:	ee10 2a10 	vmov	r2, s0
 8009ce8:	ee10 0a10 	vmov	r0, s0
 8009cec:	463b      	mov	r3, r7
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7f6 ff1c 	bl	8000b2c <__aeabi_dcmpun>
 8009cf4:	b128      	cbz	r0, 8009d02 <_scanf_float+0x406>
 8009cf6:	4808      	ldr	r0, [pc, #32]	; (8009d18 <_scanf_float+0x41c>)
 8009cf8:	f000 f810 	bl	8009d1c <nanf>
 8009cfc:	ed88 0a00 	vstr	s0, [r8]
 8009d00:	e7cb      	b.n	8009c9a <_scanf_float+0x39e>
 8009d02:	4630      	mov	r0, r6
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 ff6f 	bl	8000be8 <__aeabi_d2f>
 8009d0a:	f8c8 0000 	str.w	r0, [r8]
 8009d0e:	e7c4      	b.n	8009c9a <_scanf_float+0x39e>
 8009d10:	2500      	movs	r5, #0
 8009d12:	e634      	b.n	800997e <_scanf_float+0x82>
 8009d14:	0800ea80 	.word	0x0800ea80
 8009d18:	0800ee88 	.word	0x0800ee88

08009d1c <nanf>:
 8009d1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009d24 <nanf+0x8>
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	7fc00000 	.word	0x7fc00000

08009d28 <siprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b500      	push	{lr}
 8009d2c:	b09c      	sub	sp, #112	; 0x70
 8009d2e:	ab1d      	add	r3, sp, #116	; 0x74
 8009d30:	9002      	str	r0, [sp, #8]
 8009d32:	9006      	str	r0, [sp, #24]
 8009d34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d38:	4809      	ldr	r0, [pc, #36]	; (8009d60 <siprintf+0x38>)
 8009d3a:	9107      	str	r1, [sp, #28]
 8009d3c:	9104      	str	r1, [sp, #16]
 8009d3e:	4909      	ldr	r1, [pc, #36]	; (8009d64 <siprintf+0x3c>)
 8009d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d44:	9105      	str	r1, [sp, #20]
 8009d46:	6800      	ldr	r0, [r0, #0]
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	a902      	add	r1, sp, #8
 8009d4c:	f002 fee2 	bl	800cb14 <_svfiprintf_r>
 8009d50:	9b02      	ldr	r3, [sp, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	b01c      	add	sp, #112	; 0x70
 8009d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d5c:	b003      	add	sp, #12
 8009d5e:	4770      	bx	lr
 8009d60:	20000108 	.word	0x20000108
 8009d64:	ffff0208 	.word	0xffff0208

08009d68 <sulp>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	ec45 4b10 	vmov	d0, r4, r5
 8009d72:	4616      	mov	r6, r2
 8009d74:	f002 fc2c 	bl	800c5d0 <__ulp>
 8009d78:	ec51 0b10 	vmov	r0, r1, d0
 8009d7c:	b17e      	cbz	r6, 8009d9e <sulp+0x36>
 8009d7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	dd09      	ble.n	8009d9e <sulp+0x36>
 8009d8a:	051b      	lsls	r3, r3, #20
 8009d8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d90:	2400      	movs	r4, #0
 8009d92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d96:	4622      	mov	r2, r4
 8009d98:	462b      	mov	r3, r5
 8009d9a:	f7f6 fc2d 	bl	80005f8 <__aeabi_dmul>
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}

08009da0 <_strtod_l>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	ed2d 8b02 	vpush	{d8}
 8009da8:	b09d      	sub	sp, #116	; 0x74
 8009daa:	461f      	mov	r7, r3
 8009dac:	2300      	movs	r3, #0
 8009dae:	9318      	str	r3, [sp, #96]	; 0x60
 8009db0:	4ba2      	ldr	r3, [pc, #648]	; (800a03c <_strtod_l+0x29c>)
 8009db2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9305      	str	r3, [sp, #20]
 8009db8:	4604      	mov	r4, r0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	4688      	mov	r8, r1
 8009dbe:	f7f6 fa07 	bl	80001d0 <strlen>
 8009dc2:	f04f 0a00 	mov.w	sl, #0
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	f04f 0b00 	mov.w	fp, #0
 8009dcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	2a2b      	cmp	r2, #43	; 0x2b
 8009dd6:	d04e      	beq.n	8009e76 <_strtod_l+0xd6>
 8009dd8:	d83b      	bhi.n	8009e52 <_strtod_l+0xb2>
 8009dda:	2a0d      	cmp	r2, #13
 8009ddc:	d834      	bhi.n	8009e48 <_strtod_l+0xa8>
 8009dde:	2a08      	cmp	r2, #8
 8009de0:	d834      	bhi.n	8009e4c <_strtod_l+0xac>
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d03e      	beq.n	8009e64 <_strtod_l+0xc4>
 8009de6:	2300      	movs	r3, #0
 8009de8:	930a      	str	r3, [sp, #40]	; 0x28
 8009dea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009dec:	7833      	ldrb	r3, [r6, #0]
 8009dee:	2b30      	cmp	r3, #48	; 0x30
 8009df0:	f040 80b0 	bne.w	8009f54 <_strtod_l+0x1b4>
 8009df4:	7873      	ldrb	r3, [r6, #1]
 8009df6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dfa:	2b58      	cmp	r3, #88	; 0x58
 8009dfc:	d168      	bne.n	8009ed0 <_strtod_l+0x130>
 8009dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	ab18      	add	r3, sp, #96	; 0x60
 8009e04:	9702      	str	r7, [sp, #8]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	4a8d      	ldr	r2, [pc, #564]	; (800a040 <_strtod_l+0x2a0>)
 8009e0a:	ab19      	add	r3, sp, #100	; 0x64
 8009e0c:	a917      	add	r1, sp, #92	; 0x5c
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f001 fd38 	bl	800b884 <__gethex>
 8009e14:	f010 0707 	ands.w	r7, r0, #7
 8009e18:	4605      	mov	r5, r0
 8009e1a:	d005      	beq.n	8009e28 <_strtod_l+0x88>
 8009e1c:	2f06      	cmp	r7, #6
 8009e1e:	d12c      	bne.n	8009e7a <_strtod_l+0xda>
 8009e20:	3601      	adds	r6, #1
 8009e22:	2300      	movs	r3, #0
 8009e24:	9617      	str	r6, [sp, #92]	; 0x5c
 8009e26:	930a      	str	r3, [sp, #40]	; 0x28
 8009e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f040 8590 	bne.w	800a950 <_strtod_l+0xbb0>
 8009e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e32:	b1eb      	cbz	r3, 8009e70 <_strtod_l+0xd0>
 8009e34:	4652      	mov	r2, sl
 8009e36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e3a:	ec43 2b10 	vmov	d0, r2, r3
 8009e3e:	b01d      	add	sp, #116	; 0x74
 8009e40:	ecbd 8b02 	vpop	{d8}
 8009e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e48:	2a20      	cmp	r2, #32
 8009e4a:	d1cc      	bne.n	8009de6 <_strtod_l+0x46>
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e50:	e7be      	b.n	8009dd0 <_strtod_l+0x30>
 8009e52:	2a2d      	cmp	r2, #45	; 0x2d
 8009e54:	d1c7      	bne.n	8009de6 <_strtod_l+0x46>
 8009e56:	2201      	movs	r2, #1
 8009e58:	920a      	str	r2, [sp, #40]	; 0x28
 8009e5a:	1c5a      	adds	r2, r3, #1
 8009e5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1c2      	bne.n	8009dea <_strtod_l+0x4a>
 8009e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 856e 	bne.w	800a94c <_strtod_l+0xbac>
 8009e70:	4652      	mov	r2, sl
 8009e72:	465b      	mov	r3, fp
 8009e74:	e7e1      	b.n	8009e3a <_strtod_l+0x9a>
 8009e76:	2200      	movs	r2, #0
 8009e78:	e7ee      	b.n	8009e58 <_strtod_l+0xb8>
 8009e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e7c:	b13a      	cbz	r2, 8009e8e <_strtod_l+0xee>
 8009e7e:	2135      	movs	r1, #53	; 0x35
 8009e80:	a81a      	add	r0, sp, #104	; 0x68
 8009e82:	f002 fcb0 	bl	800c7e6 <__copybits>
 8009e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f002 f86f 	bl	800bf6c <_Bfree>
 8009e8e:	3f01      	subs	r7, #1
 8009e90:	2f04      	cmp	r7, #4
 8009e92:	d806      	bhi.n	8009ea2 <_strtod_l+0x102>
 8009e94:	e8df f007 	tbb	[pc, r7]
 8009e98:	1714030a 	.word	0x1714030a
 8009e9c:	0a          	.byte	0x0a
 8009e9d:	00          	.byte	0x00
 8009e9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009ea2:	0728      	lsls	r0, r5, #28
 8009ea4:	d5c0      	bpl.n	8009e28 <_strtod_l+0x88>
 8009ea6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009eaa:	e7bd      	b.n	8009e28 <_strtod_l+0x88>
 8009eac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009eba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ebe:	e7f0      	b.n	8009ea2 <_strtod_l+0x102>
 8009ec0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a044 <_strtod_l+0x2a4>
 8009ec4:	e7ed      	b.n	8009ea2 <_strtod_l+0x102>
 8009ec6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009eca:	f04f 3aff 	mov.w	sl, #4294967295
 8009ece:	e7e8      	b.n	8009ea2 <_strtod_l+0x102>
 8009ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ed6:	785b      	ldrb	r3, [r3, #1]
 8009ed8:	2b30      	cmp	r3, #48	; 0x30
 8009eda:	d0f9      	beq.n	8009ed0 <_strtod_l+0x130>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d0a3      	beq.n	8009e28 <_strtod_l+0x88>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	f04f 0900 	mov.w	r9, #0
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eea:	9308      	str	r3, [sp, #32]
 8009eec:	f8cd 901c 	str.w	r9, [sp, #28]
 8009ef0:	464f      	mov	r7, r9
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009ef6:	7806      	ldrb	r6, [r0, #0]
 8009ef8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009efc:	b2d9      	uxtb	r1, r3
 8009efe:	2909      	cmp	r1, #9
 8009f00:	d92a      	bls.n	8009f58 <_strtod_l+0x1b8>
 8009f02:	9905      	ldr	r1, [sp, #20]
 8009f04:	462a      	mov	r2, r5
 8009f06:	f002 ff1f 	bl	800cd48 <strncmp>
 8009f0a:	b398      	cbz	r0, 8009f74 <_strtod_l+0x1d4>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	4632      	mov	r2, r6
 8009f10:	463d      	mov	r5, r7
 8009f12:	9005      	str	r0, [sp, #20]
 8009f14:	4603      	mov	r3, r0
 8009f16:	2a65      	cmp	r2, #101	; 0x65
 8009f18:	d001      	beq.n	8009f1e <_strtod_l+0x17e>
 8009f1a:	2a45      	cmp	r2, #69	; 0x45
 8009f1c:	d118      	bne.n	8009f50 <_strtod_l+0x1b0>
 8009f1e:	b91d      	cbnz	r5, 8009f28 <_strtod_l+0x188>
 8009f20:	9a04      	ldr	r2, [sp, #16]
 8009f22:	4302      	orrs	r2, r0
 8009f24:	d09e      	beq.n	8009e64 <_strtod_l+0xc4>
 8009f26:	2500      	movs	r5, #0
 8009f28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009f2c:	f108 0201 	add.w	r2, r8, #1
 8009f30:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009f36:	2a2b      	cmp	r2, #43	; 0x2b
 8009f38:	d075      	beq.n	800a026 <_strtod_l+0x286>
 8009f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8009f3c:	d07b      	beq.n	800a036 <_strtod_l+0x296>
 8009f3e:	f04f 0c00 	mov.w	ip, #0
 8009f42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f46:	2909      	cmp	r1, #9
 8009f48:	f240 8082 	bls.w	800a050 <_strtod_l+0x2b0>
 8009f4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f50:	2600      	movs	r6, #0
 8009f52:	e09d      	b.n	800a090 <_strtod_l+0x2f0>
 8009f54:	2300      	movs	r3, #0
 8009f56:	e7c4      	b.n	8009ee2 <_strtod_l+0x142>
 8009f58:	2f08      	cmp	r7, #8
 8009f5a:	bfd8      	it	le
 8009f5c:	9907      	ldrle	r1, [sp, #28]
 8009f5e:	f100 0001 	add.w	r0, r0, #1
 8009f62:	bfda      	itte	le
 8009f64:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f68:	9307      	strle	r3, [sp, #28]
 8009f6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009f6e:	3701      	adds	r7, #1
 8009f70:	9017      	str	r0, [sp, #92]	; 0x5c
 8009f72:	e7bf      	b.n	8009ef4 <_strtod_l+0x154>
 8009f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f76:	195a      	adds	r2, r3, r5
 8009f78:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f7a:	5d5a      	ldrb	r2, [r3, r5]
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	d037      	beq.n	8009ff0 <_strtod_l+0x250>
 8009f80:	9005      	str	r0, [sp, #20]
 8009f82:	463d      	mov	r5, r7
 8009f84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009f88:	2b09      	cmp	r3, #9
 8009f8a:	d912      	bls.n	8009fb2 <_strtod_l+0x212>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e7c2      	b.n	8009f16 <_strtod_l+0x176>
 8009f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f96:	785a      	ldrb	r2, [r3, #1]
 8009f98:	3001      	adds	r0, #1
 8009f9a:	2a30      	cmp	r2, #48	; 0x30
 8009f9c:	d0f8      	beq.n	8009f90 <_strtod_l+0x1f0>
 8009f9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	f200 84d9 	bhi.w	800a95a <_strtod_l+0xbba>
 8009fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009faa:	9005      	str	r0, [sp, #20]
 8009fac:	2000      	movs	r0, #0
 8009fae:	9308      	str	r3, [sp, #32]
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	3a30      	subs	r2, #48	; 0x30
 8009fb4:	f100 0301 	add.w	r3, r0, #1
 8009fb8:	d014      	beq.n	8009fe4 <_strtod_l+0x244>
 8009fba:	9905      	ldr	r1, [sp, #20]
 8009fbc:	4419      	add	r1, r3
 8009fbe:	9105      	str	r1, [sp, #20]
 8009fc0:	462b      	mov	r3, r5
 8009fc2:	eb00 0e05 	add.w	lr, r0, r5
 8009fc6:	210a      	movs	r1, #10
 8009fc8:	4573      	cmp	r3, lr
 8009fca:	d113      	bne.n	8009ff4 <_strtod_l+0x254>
 8009fcc:	182b      	adds	r3, r5, r0
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	f105 0501 	add.w	r5, r5, #1
 8009fd4:	4405      	add	r5, r0
 8009fd6:	dc1c      	bgt.n	800a012 <_strtod_l+0x272>
 8009fd8:	9907      	ldr	r1, [sp, #28]
 8009fda:	230a      	movs	r3, #10
 8009fdc:	fb03 2301 	mla	r3, r3, r1, r2
 8009fe0:	9307      	str	r3, [sp, #28]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fe6:	1c51      	adds	r1, r2, #1
 8009fe8:	9117      	str	r1, [sp, #92]	; 0x5c
 8009fea:	7852      	ldrb	r2, [r2, #1]
 8009fec:	4618      	mov	r0, r3
 8009fee:	e7c9      	b.n	8009f84 <_strtod_l+0x1e4>
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	e7d2      	b.n	8009f9a <_strtod_l+0x1fa>
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	dc04      	bgt.n	800a002 <_strtod_l+0x262>
 8009ff8:	9e07      	ldr	r6, [sp, #28]
 8009ffa:	434e      	muls	r6, r1
 8009ffc:	9607      	str	r6, [sp, #28]
 8009ffe:	3301      	adds	r3, #1
 800a000:	e7e2      	b.n	8009fc8 <_strtod_l+0x228>
 800a002:	f103 0c01 	add.w	ip, r3, #1
 800a006:	f1bc 0f10 	cmp.w	ip, #16
 800a00a:	bfd8      	it	le
 800a00c:	fb01 f909 	mulle.w	r9, r1, r9
 800a010:	e7f5      	b.n	8009ffe <_strtod_l+0x25e>
 800a012:	2d10      	cmp	r5, #16
 800a014:	bfdc      	itt	le
 800a016:	230a      	movle	r3, #10
 800a018:	fb03 2909 	mlale	r9, r3, r9, r2
 800a01c:	e7e1      	b.n	8009fe2 <_strtod_l+0x242>
 800a01e:	2300      	movs	r3, #0
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	2301      	movs	r3, #1
 800a024:	e77c      	b.n	8009f20 <_strtod_l+0x180>
 800a026:	f04f 0c00 	mov.w	ip, #0
 800a02a:	f108 0202 	add.w	r2, r8, #2
 800a02e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a030:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a034:	e785      	b.n	8009f42 <_strtod_l+0x1a2>
 800a036:	f04f 0c01 	mov.w	ip, #1
 800a03a:	e7f6      	b.n	800a02a <_strtod_l+0x28a>
 800a03c:	0800ecd0 	.word	0x0800ecd0
 800a040:	0800ea88 	.word	0x0800ea88
 800a044:	7ff00000 	.word	0x7ff00000
 800a048:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a04a:	1c51      	adds	r1, r2, #1
 800a04c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a04e:	7852      	ldrb	r2, [r2, #1]
 800a050:	2a30      	cmp	r2, #48	; 0x30
 800a052:	d0f9      	beq.n	800a048 <_strtod_l+0x2a8>
 800a054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a058:	2908      	cmp	r1, #8
 800a05a:	f63f af79 	bhi.w	8009f50 <_strtod_l+0x1b0>
 800a05e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a064:	9206      	str	r2, [sp, #24]
 800a066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a068:	1c51      	adds	r1, r2, #1
 800a06a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a06c:	7852      	ldrb	r2, [r2, #1]
 800a06e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a072:	2e09      	cmp	r6, #9
 800a074:	d937      	bls.n	800a0e6 <_strtod_l+0x346>
 800a076:	9e06      	ldr	r6, [sp, #24]
 800a078:	1b89      	subs	r1, r1, r6
 800a07a:	2908      	cmp	r1, #8
 800a07c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a080:	dc02      	bgt.n	800a088 <_strtod_l+0x2e8>
 800a082:	4576      	cmp	r6, lr
 800a084:	bfa8      	it	ge
 800a086:	4676      	movge	r6, lr
 800a088:	f1bc 0f00 	cmp.w	ip, #0
 800a08c:	d000      	beq.n	800a090 <_strtod_l+0x2f0>
 800a08e:	4276      	negs	r6, r6
 800a090:	2d00      	cmp	r5, #0
 800a092:	d14d      	bne.n	800a130 <_strtod_l+0x390>
 800a094:	9904      	ldr	r1, [sp, #16]
 800a096:	4301      	orrs	r1, r0
 800a098:	f47f aec6 	bne.w	8009e28 <_strtod_l+0x88>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f47f aee1 	bne.w	8009e64 <_strtod_l+0xc4>
 800a0a2:	2a69      	cmp	r2, #105	; 0x69
 800a0a4:	d027      	beq.n	800a0f6 <_strtod_l+0x356>
 800a0a6:	dc24      	bgt.n	800a0f2 <_strtod_l+0x352>
 800a0a8:	2a49      	cmp	r2, #73	; 0x49
 800a0aa:	d024      	beq.n	800a0f6 <_strtod_l+0x356>
 800a0ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a0ae:	f47f aed9 	bne.w	8009e64 <_strtod_l+0xc4>
 800a0b2:	499f      	ldr	r1, [pc, #636]	; (800a330 <_strtod_l+0x590>)
 800a0b4:	a817      	add	r0, sp, #92	; 0x5c
 800a0b6:	f001 fe3d 	bl	800bd34 <__match>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	f43f aed2 	beq.w	8009e64 <_strtod_l+0xc4>
 800a0c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b28      	cmp	r3, #40	; 0x28
 800a0c6:	d12d      	bne.n	800a124 <_strtod_l+0x384>
 800a0c8:	499a      	ldr	r1, [pc, #616]	; (800a334 <_strtod_l+0x594>)
 800a0ca:	aa1a      	add	r2, sp, #104	; 0x68
 800a0cc:	a817      	add	r0, sp, #92	; 0x5c
 800a0ce:	f001 fe45 	bl	800bd5c <__hexnan>
 800a0d2:	2805      	cmp	r0, #5
 800a0d4:	d126      	bne.n	800a124 <_strtod_l+0x384>
 800a0d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a0dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a0e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a0e4:	e6a0      	b.n	8009e28 <_strtod_l+0x88>
 800a0e6:	210a      	movs	r1, #10
 800a0e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a0ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a0f0:	e7b9      	b.n	800a066 <_strtod_l+0x2c6>
 800a0f2:	2a6e      	cmp	r2, #110	; 0x6e
 800a0f4:	e7db      	b.n	800a0ae <_strtod_l+0x30e>
 800a0f6:	4990      	ldr	r1, [pc, #576]	; (800a338 <_strtod_l+0x598>)
 800a0f8:	a817      	add	r0, sp, #92	; 0x5c
 800a0fa:	f001 fe1b 	bl	800bd34 <__match>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f aeb0 	beq.w	8009e64 <_strtod_l+0xc4>
 800a104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a106:	498d      	ldr	r1, [pc, #564]	; (800a33c <_strtod_l+0x59c>)
 800a108:	3b01      	subs	r3, #1
 800a10a:	a817      	add	r0, sp, #92	; 0x5c
 800a10c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a10e:	f001 fe11 	bl	800bd34 <__match>
 800a112:	b910      	cbnz	r0, 800a11a <_strtod_l+0x37a>
 800a114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a116:	3301      	adds	r3, #1
 800a118:	9317      	str	r3, [sp, #92]	; 0x5c
 800a11a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a34c <_strtod_l+0x5ac>
 800a11e:	f04f 0a00 	mov.w	sl, #0
 800a122:	e681      	b.n	8009e28 <_strtod_l+0x88>
 800a124:	4886      	ldr	r0, [pc, #536]	; (800a340 <_strtod_l+0x5a0>)
 800a126:	f002 fdf7 	bl	800cd18 <nan>
 800a12a:	ec5b ab10 	vmov	sl, fp, d0
 800a12e:	e67b      	b.n	8009e28 <_strtod_l+0x88>
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	9807      	ldr	r0, [sp, #28]
 800a134:	1af3      	subs	r3, r6, r3
 800a136:	2f00      	cmp	r7, #0
 800a138:	bf08      	it	eq
 800a13a:	462f      	moveq	r7, r5
 800a13c:	2d10      	cmp	r5, #16
 800a13e:	9306      	str	r3, [sp, #24]
 800a140:	46a8      	mov	r8, r5
 800a142:	bfa8      	it	ge
 800a144:	f04f 0810 	movge.w	r8, #16
 800a148:	f7f6 f9dc 	bl	8000504 <__aeabi_ui2d>
 800a14c:	2d09      	cmp	r5, #9
 800a14e:	4682      	mov	sl, r0
 800a150:	468b      	mov	fp, r1
 800a152:	dd13      	ble.n	800a17c <_strtod_l+0x3dc>
 800a154:	4b7b      	ldr	r3, [pc, #492]	; (800a344 <_strtod_l+0x5a4>)
 800a156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a15a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a15e:	f7f6 fa4b 	bl	80005f8 <__aeabi_dmul>
 800a162:	4682      	mov	sl, r0
 800a164:	4648      	mov	r0, r9
 800a166:	468b      	mov	fp, r1
 800a168:	f7f6 f9cc 	bl	8000504 <__aeabi_ui2d>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4650      	mov	r0, sl
 800a172:	4659      	mov	r1, fp
 800a174:	f7f6 f88a 	bl	800028c <__adddf3>
 800a178:	4682      	mov	sl, r0
 800a17a:	468b      	mov	fp, r1
 800a17c:	2d0f      	cmp	r5, #15
 800a17e:	dc38      	bgt.n	800a1f2 <_strtod_l+0x452>
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f43f ae50 	beq.w	8009e28 <_strtod_l+0x88>
 800a188:	dd24      	ble.n	800a1d4 <_strtod_l+0x434>
 800a18a:	2b16      	cmp	r3, #22
 800a18c:	dc0b      	bgt.n	800a1a6 <_strtod_l+0x406>
 800a18e:	496d      	ldr	r1, [pc, #436]	; (800a344 <_strtod_l+0x5a4>)
 800a190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a198:	4652      	mov	r2, sl
 800a19a:	465b      	mov	r3, fp
 800a19c:	f7f6 fa2c 	bl	80005f8 <__aeabi_dmul>
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	e640      	b.n	8009e28 <_strtod_l+0x88>
 800a1a6:	9a06      	ldr	r2, [sp, #24]
 800a1a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	db20      	blt.n	800a1f2 <_strtod_l+0x452>
 800a1b0:	4c64      	ldr	r4, [pc, #400]	; (800a344 <_strtod_l+0x5a4>)
 800a1b2:	f1c5 050f 	rsb	r5, r5, #15
 800a1b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	465b      	mov	r3, fp
 800a1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1c2:	f7f6 fa19 	bl	80005f8 <__aeabi_dmul>
 800a1c6:	9b06      	ldr	r3, [sp, #24]
 800a1c8:	1b5d      	subs	r5, r3, r5
 800a1ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a1ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a1d2:	e7e3      	b.n	800a19c <_strtod_l+0x3fc>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	3316      	adds	r3, #22
 800a1d8:	db0b      	blt.n	800a1f2 <_strtod_l+0x452>
 800a1da:	9b05      	ldr	r3, [sp, #20]
 800a1dc:	1b9e      	subs	r6, r3, r6
 800a1de:	4b59      	ldr	r3, [pc, #356]	; (800a344 <_strtod_l+0x5a4>)
 800a1e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a1e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1e8:	4650      	mov	r0, sl
 800a1ea:	4659      	mov	r1, fp
 800a1ec:	f7f6 fb2e 	bl	800084c <__aeabi_ddiv>
 800a1f0:	e7d6      	b.n	800a1a0 <_strtod_l+0x400>
 800a1f2:	9b06      	ldr	r3, [sp, #24]
 800a1f4:	eba5 0808 	sub.w	r8, r5, r8
 800a1f8:	4498      	add	r8, r3
 800a1fa:	f1b8 0f00 	cmp.w	r8, #0
 800a1fe:	dd74      	ble.n	800a2ea <_strtod_l+0x54a>
 800a200:	f018 030f 	ands.w	r3, r8, #15
 800a204:	d00a      	beq.n	800a21c <_strtod_l+0x47c>
 800a206:	494f      	ldr	r1, [pc, #316]	; (800a344 <_strtod_l+0x5a4>)
 800a208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a20c:	4652      	mov	r2, sl
 800a20e:	465b      	mov	r3, fp
 800a210:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	4682      	mov	sl, r0
 800a21a:	468b      	mov	fp, r1
 800a21c:	f038 080f 	bics.w	r8, r8, #15
 800a220:	d04f      	beq.n	800a2c2 <_strtod_l+0x522>
 800a222:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a226:	dd22      	ble.n	800a26e <_strtod_l+0x4ce>
 800a228:	2500      	movs	r5, #0
 800a22a:	462e      	mov	r6, r5
 800a22c:	9507      	str	r5, [sp, #28]
 800a22e:	9505      	str	r5, [sp, #20]
 800a230:	2322      	movs	r3, #34	; 0x22
 800a232:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a34c <_strtod_l+0x5ac>
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	f04f 0a00 	mov.w	sl, #0
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f43f adf2 	beq.w	8009e28 <_strtod_l+0x88>
 800a244:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a246:	4620      	mov	r0, r4
 800a248:	f001 fe90 	bl	800bf6c <_Bfree>
 800a24c:	9905      	ldr	r1, [sp, #20]
 800a24e:	4620      	mov	r0, r4
 800a250:	f001 fe8c 	bl	800bf6c <_Bfree>
 800a254:	4631      	mov	r1, r6
 800a256:	4620      	mov	r0, r4
 800a258:	f001 fe88 	bl	800bf6c <_Bfree>
 800a25c:	9907      	ldr	r1, [sp, #28]
 800a25e:	4620      	mov	r0, r4
 800a260:	f001 fe84 	bl	800bf6c <_Bfree>
 800a264:	4629      	mov	r1, r5
 800a266:	4620      	mov	r0, r4
 800a268:	f001 fe80 	bl	800bf6c <_Bfree>
 800a26c:	e5dc      	b.n	8009e28 <_strtod_l+0x88>
 800a26e:	4b36      	ldr	r3, [pc, #216]	; (800a348 <_strtod_l+0x5a8>)
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	2300      	movs	r3, #0
 800a274:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a278:	4650      	mov	r0, sl
 800a27a:	4659      	mov	r1, fp
 800a27c:	4699      	mov	r9, r3
 800a27e:	f1b8 0f01 	cmp.w	r8, #1
 800a282:	dc21      	bgt.n	800a2c8 <_strtod_l+0x528>
 800a284:	b10b      	cbz	r3, 800a28a <_strtod_l+0x4ea>
 800a286:	4682      	mov	sl, r0
 800a288:	468b      	mov	fp, r1
 800a28a:	4b2f      	ldr	r3, [pc, #188]	; (800a348 <_strtod_l+0x5a8>)
 800a28c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a290:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a294:	4652      	mov	r2, sl
 800a296:	465b      	mov	r3, fp
 800a298:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a29c:	f7f6 f9ac 	bl	80005f8 <__aeabi_dmul>
 800a2a0:	4b2a      	ldr	r3, [pc, #168]	; (800a34c <_strtod_l+0x5ac>)
 800a2a2:	460a      	mov	r2, r1
 800a2a4:	400b      	ands	r3, r1
 800a2a6:	492a      	ldr	r1, [pc, #168]	; (800a350 <_strtod_l+0x5b0>)
 800a2a8:	428b      	cmp	r3, r1
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	d8bc      	bhi.n	800a228 <_strtod_l+0x488>
 800a2ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a2b2:	428b      	cmp	r3, r1
 800a2b4:	bf86      	itte	hi
 800a2b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a354 <_strtod_l+0x5b4>
 800a2ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	e084      	b.n	800a3d2 <_strtod_l+0x632>
 800a2c8:	f018 0f01 	tst.w	r8, #1
 800a2cc:	d005      	beq.n	800a2da <_strtod_l+0x53a>
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	9a04      	ldr	r2, [sp, #16]
 800a2dc:	3208      	adds	r2, #8
 800a2de:	f109 0901 	add.w	r9, r9, #1
 800a2e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2e6:	9204      	str	r2, [sp, #16]
 800a2e8:	e7c9      	b.n	800a27e <_strtod_l+0x4de>
 800a2ea:	d0ea      	beq.n	800a2c2 <_strtod_l+0x522>
 800a2ec:	f1c8 0800 	rsb	r8, r8, #0
 800a2f0:	f018 020f 	ands.w	r2, r8, #15
 800a2f4:	d00a      	beq.n	800a30c <_strtod_l+0x56c>
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <_strtod_l+0x5a4>)
 800a2f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	4659      	mov	r1, fp
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f6 faa2 	bl	800084c <__aeabi_ddiv>
 800a308:	4682      	mov	sl, r0
 800a30a:	468b      	mov	fp, r1
 800a30c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a310:	d0d7      	beq.n	800a2c2 <_strtod_l+0x522>
 800a312:	f1b8 0f1f 	cmp.w	r8, #31
 800a316:	dd1f      	ble.n	800a358 <_strtod_l+0x5b8>
 800a318:	2500      	movs	r5, #0
 800a31a:	462e      	mov	r6, r5
 800a31c:	9507      	str	r5, [sp, #28]
 800a31e:	9505      	str	r5, [sp, #20]
 800a320:	2322      	movs	r3, #34	; 0x22
 800a322:	f04f 0a00 	mov.w	sl, #0
 800a326:	f04f 0b00 	mov.w	fp, #0
 800a32a:	6023      	str	r3, [r4, #0]
 800a32c:	e786      	b.n	800a23c <_strtod_l+0x49c>
 800a32e:	bf00      	nop
 800a330:	0800ea59 	.word	0x0800ea59
 800a334:	0800ea9c 	.word	0x0800ea9c
 800a338:	0800ea51 	.word	0x0800ea51
 800a33c:	0800ebdc 	.word	0x0800ebdc
 800a340:	0800ee88 	.word	0x0800ee88
 800a344:	0800ed68 	.word	0x0800ed68
 800a348:	0800ed40 	.word	0x0800ed40
 800a34c:	7ff00000 	.word	0x7ff00000
 800a350:	7ca00000 	.word	0x7ca00000
 800a354:	7fefffff 	.word	0x7fefffff
 800a358:	f018 0310 	ands.w	r3, r8, #16
 800a35c:	bf18      	it	ne
 800a35e:	236a      	movne	r3, #106	; 0x6a
 800a360:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a710 <_strtod_l+0x970>
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	4650      	mov	r0, sl
 800a368:	4659      	mov	r1, fp
 800a36a:	2300      	movs	r3, #0
 800a36c:	f018 0f01 	tst.w	r8, #1
 800a370:	d004      	beq.n	800a37c <_strtod_l+0x5dc>
 800a372:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a376:	f7f6 f93f 	bl	80005f8 <__aeabi_dmul>
 800a37a:	2301      	movs	r3, #1
 800a37c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a380:	f109 0908 	add.w	r9, r9, #8
 800a384:	d1f2      	bne.n	800a36c <_strtod_l+0x5cc>
 800a386:	b10b      	cbz	r3, 800a38c <_strtod_l+0x5ec>
 800a388:	4682      	mov	sl, r0
 800a38a:	468b      	mov	fp, r1
 800a38c:	9b04      	ldr	r3, [sp, #16]
 800a38e:	b1c3      	cbz	r3, 800a3c2 <_strtod_l+0x622>
 800a390:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a398:	2b00      	cmp	r3, #0
 800a39a:	4659      	mov	r1, fp
 800a39c:	dd11      	ble.n	800a3c2 <_strtod_l+0x622>
 800a39e:	2b1f      	cmp	r3, #31
 800a3a0:	f340 8124 	ble.w	800a5ec <_strtod_l+0x84c>
 800a3a4:	2b34      	cmp	r3, #52	; 0x34
 800a3a6:	bfde      	ittt	le
 800a3a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a3ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a3b0:	fa03 f202 	lslle.w	r2, r3, r2
 800a3b4:	f04f 0a00 	mov.w	sl, #0
 800a3b8:	bfcc      	ite	gt
 800a3ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a3be:	ea02 0b01 	andle.w	fp, r2, r1
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4650      	mov	r0, sl
 800a3c8:	4659      	mov	r1, fp
 800a3ca:	f7f6 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d1a2      	bne.n	800a318 <_strtod_l+0x578>
 800a3d2:	9b07      	ldr	r3, [sp, #28]
 800a3d4:	9300      	str	r3, [sp, #0]
 800a3d6:	9908      	ldr	r1, [sp, #32]
 800a3d8:	462b      	mov	r3, r5
 800a3da:	463a      	mov	r2, r7
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f001 fe2d 	bl	800c03c <__s2b>
 800a3e2:	9007      	str	r0, [sp, #28]
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	f43f af1f 	beq.w	800a228 <_strtod_l+0x488>
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	1b9e      	subs	r6, r3, r6
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfb4      	ite	lt
 800a3f4:	4633      	movlt	r3, r6
 800a3f6:	2300      	movge	r3, #0
 800a3f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2500      	movs	r5, #0
 800a3fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a402:	9312      	str	r3, [sp, #72]	; 0x48
 800a404:	462e      	mov	r6, r5
 800a406:	9b07      	ldr	r3, [sp, #28]
 800a408:	4620      	mov	r0, r4
 800a40a:	6859      	ldr	r1, [r3, #4]
 800a40c:	f001 fd6e 	bl	800beec <_Balloc>
 800a410:	9005      	str	r0, [sp, #20]
 800a412:	2800      	cmp	r0, #0
 800a414:	f43f af0c 	beq.w	800a230 <_strtod_l+0x490>
 800a418:	9b07      	ldr	r3, [sp, #28]
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	3202      	adds	r2, #2
 800a41e:	f103 010c 	add.w	r1, r3, #12
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	300c      	adds	r0, #12
 800a426:	f001 fd53 	bl	800bed0 <memcpy>
 800a42a:	ec4b ab10 	vmov	d0, sl, fp
 800a42e:	aa1a      	add	r2, sp, #104	; 0x68
 800a430:	a919      	add	r1, sp, #100	; 0x64
 800a432:	4620      	mov	r0, r4
 800a434:	f002 f948 	bl	800c6c8 <__d2b>
 800a438:	ec4b ab18 	vmov	d8, sl, fp
 800a43c:	9018      	str	r0, [sp, #96]	; 0x60
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f aef6 	beq.w	800a230 <_strtod_l+0x490>
 800a444:	2101      	movs	r1, #1
 800a446:	4620      	mov	r0, r4
 800a448:	f001 fe92 	bl	800c170 <__i2b>
 800a44c:	4606      	mov	r6, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f aeee 	beq.w	800a230 <_strtod_l+0x490>
 800a454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a456:	9904      	ldr	r1, [sp, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfab      	itete	ge
 800a45c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a45e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a462:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a466:	bfac      	ite	ge
 800a468:	eb03 0902 	addge.w	r9, r3, r2
 800a46c:	1ad7      	sublt	r7, r2, r3
 800a46e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a470:	eba3 0801 	sub.w	r8, r3, r1
 800a474:	4490      	add	r8, r2
 800a476:	4ba1      	ldr	r3, [pc, #644]	; (800a6fc <_strtod_l+0x95c>)
 800a478:	f108 38ff 	add.w	r8, r8, #4294967295
 800a47c:	4598      	cmp	r8, r3
 800a47e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a482:	f280 80c7 	bge.w	800a614 <_strtod_l+0x874>
 800a486:	eba3 0308 	sub.w	r3, r3, r8
 800a48a:	2b1f      	cmp	r3, #31
 800a48c:	eba2 0203 	sub.w	r2, r2, r3
 800a490:	f04f 0101 	mov.w	r1, #1
 800a494:	f300 80b1 	bgt.w	800a5fa <_strtod_l+0x85a>
 800a498:	fa01 f303 	lsl.w	r3, r1, r3
 800a49c:	930d      	str	r3, [sp, #52]	; 0x34
 800a49e:	2300      	movs	r3, #0
 800a4a0:	9308      	str	r3, [sp, #32]
 800a4a2:	eb09 0802 	add.w	r8, r9, r2
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	45c1      	cmp	r9, r8
 800a4aa:	4417      	add	r7, r2
 800a4ac:	441f      	add	r7, r3
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	bfa8      	it	ge
 800a4b2:	4643      	movge	r3, r8
 800a4b4:	42bb      	cmp	r3, r7
 800a4b6:	bfa8      	it	ge
 800a4b8:	463b      	movge	r3, r7
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bfc2      	ittt	gt
 800a4be:	eba8 0803 	subgt.w	r8, r8, r3
 800a4c2:	1aff      	subgt	r7, r7, r3
 800a4c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a4c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dd17      	ble.n	800a4fe <_strtod_l+0x75e>
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f001 ff0c 	bl	800c2f0 <__pow5mult>
 800a4d8:	4606      	mov	r6, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	f43f aea8 	beq.w	800a230 <_strtod_l+0x490>
 800a4e0:	4601      	mov	r1, r0
 800a4e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f001 fe59 	bl	800c19c <__multiply>
 800a4ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f43f ae9f 	beq.w	800a230 <_strtod_l+0x490>
 800a4f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f001 fd39 	bl	800bf6c <_Bfree>
 800a4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	f300 808c 	bgt.w	800a61e <_strtod_l+0x87e>
 800a506:	9b06      	ldr	r3, [sp, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dd08      	ble.n	800a51e <_strtod_l+0x77e>
 800a50c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a50e:	9905      	ldr	r1, [sp, #20]
 800a510:	4620      	mov	r0, r4
 800a512:	f001 feed 	bl	800c2f0 <__pow5mult>
 800a516:	9005      	str	r0, [sp, #20]
 800a518:	2800      	cmp	r0, #0
 800a51a:	f43f ae89 	beq.w	800a230 <_strtod_l+0x490>
 800a51e:	2f00      	cmp	r7, #0
 800a520:	dd08      	ble.n	800a534 <_strtod_l+0x794>
 800a522:	9905      	ldr	r1, [sp, #20]
 800a524:	463a      	mov	r2, r7
 800a526:	4620      	mov	r0, r4
 800a528:	f001 ff3c 	bl	800c3a4 <__lshift>
 800a52c:	9005      	str	r0, [sp, #20]
 800a52e:	2800      	cmp	r0, #0
 800a530:	f43f ae7e 	beq.w	800a230 <_strtod_l+0x490>
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	dd08      	ble.n	800a54c <_strtod_l+0x7ac>
 800a53a:	4631      	mov	r1, r6
 800a53c:	464a      	mov	r2, r9
 800a53e:	4620      	mov	r0, r4
 800a540:	f001 ff30 	bl	800c3a4 <__lshift>
 800a544:	4606      	mov	r6, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae72 	beq.w	800a230 <_strtod_l+0x490>
 800a54c:	9a05      	ldr	r2, [sp, #20]
 800a54e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a550:	4620      	mov	r0, r4
 800a552:	f001 ffb3 	bl	800c4bc <__mdiff>
 800a556:	4605      	mov	r5, r0
 800a558:	2800      	cmp	r0, #0
 800a55a:	f43f ae69 	beq.w	800a230 <_strtod_l+0x490>
 800a55e:	68c3      	ldr	r3, [r0, #12]
 800a560:	930b      	str	r3, [sp, #44]	; 0x2c
 800a562:	2300      	movs	r3, #0
 800a564:	60c3      	str	r3, [r0, #12]
 800a566:	4631      	mov	r1, r6
 800a568:	f001 ff8c 	bl	800c484 <__mcmp>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	da60      	bge.n	800a632 <_strtod_l+0x892>
 800a570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a572:	ea53 030a 	orrs.w	r3, r3, sl
 800a576:	f040 8082 	bne.w	800a67e <_strtod_l+0x8de>
 800a57a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d17d      	bne.n	800a67e <_strtod_l+0x8de>
 800a582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a586:	0d1b      	lsrs	r3, r3, #20
 800a588:	051b      	lsls	r3, r3, #20
 800a58a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a58e:	d976      	bls.n	800a67e <_strtod_l+0x8de>
 800a590:	696b      	ldr	r3, [r5, #20]
 800a592:	b913      	cbnz	r3, 800a59a <_strtod_l+0x7fa>
 800a594:	692b      	ldr	r3, [r5, #16]
 800a596:	2b01      	cmp	r3, #1
 800a598:	dd71      	ble.n	800a67e <_strtod_l+0x8de>
 800a59a:	4629      	mov	r1, r5
 800a59c:	2201      	movs	r2, #1
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f001 ff00 	bl	800c3a4 <__lshift>
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	f001 ff6c 	bl	800c484 <__mcmp>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	dd66      	ble.n	800a67e <_strtod_l+0x8de>
 800a5b0:	9904      	ldr	r1, [sp, #16]
 800a5b2:	4a53      	ldr	r2, [pc, #332]	; (800a700 <_strtod_l+0x960>)
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	2900      	cmp	r1, #0
 800a5b8:	f000 8081 	beq.w	800a6be <_strtod_l+0x91e>
 800a5bc:	ea02 010b 	and.w	r1, r2, fp
 800a5c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a5c4:	dc7b      	bgt.n	800a6be <_strtod_l+0x91e>
 800a5c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a5ca:	f77f aea9 	ble.w	800a320 <_strtod_l+0x580>
 800a5ce:	4b4d      	ldr	r3, [pc, #308]	; (800a704 <_strtod_l+0x964>)
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	4659      	mov	r1, fp
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4303      	orrs	r3, r0
 800a5de:	bf08      	it	eq
 800a5e0:	2322      	moveq	r3, #34	; 0x22
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	468b      	mov	fp, r1
 800a5e6:	bf08      	it	eq
 800a5e8:	6023      	streq	r3, [r4, #0]
 800a5ea:	e62b      	b.n	800a244 <_strtod_l+0x4a4>
 800a5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a5f8:	e6e3      	b.n	800a3c2 <_strtod_l+0x622>
 800a5fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a5fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a602:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a606:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a60a:	fa01 f308 	lsl.w	r3, r1, r8
 800a60e:	9308      	str	r3, [sp, #32]
 800a610:	910d      	str	r1, [sp, #52]	; 0x34
 800a612:	e746      	b.n	800a4a2 <_strtod_l+0x702>
 800a614:	2300      	movs	r3, #0
 800a616:	9308      	str	r3, [sp, #32]
 800a618:	2301      	movs	r3, #1
 800a61a:	930d      	str	r3, [sp, #52]	; 0x34
 800a61c:	e741      	b.n	800a4a2 <_strtod_l+0x702>
 800a61e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a620:	4642      	mov	r2, r8
 800a622:	4620      	mov	r0, r4
 800a624:	f001 febe 	bl	800c3a4 <__lshift>
 800a628:	9018      	str	r0, [sp, #96]	; 0x60
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f47f af6b 	bne.w	800a506 <_strtod_l+0x766>
 800a630:	e5fe      	b.n	800a230 <_strtod_l+0x490>
 800a632:	465f      	mov	r7, fp
 800a634:	d16e      	bne.n	800a714 <_strtod_l+0x974>
 800a636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a63c:	b342      	cbz	r2, 800a690 <_strtod_l+0x8f0>
 800a63e:	4a32      	ldr	r2, [pc, #200]	; (800a708 <_strtod_l+0x968>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d128      	bne.n	800a696 <_strtod_l+0x8f6>
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	4651      	mov	r1, sl
 800a648:	b1eb      	cbz	r3, 800a686 <_strtod_l+0x8e6>
 800a64a:	4b2d      	ldr	r3, [pc, #180]	; (800a700 <_strtod_l+0x960>)
 800a64c:	403b      	ands	r3, r7
 800a64e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	d819      	bhi.n	800a68c <_strtod_l+0x8ec>
 800a658:	0d1b      	lsrs	r3, r3, #20
 800a65a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a65e:	fa02 f303 	lsl.w	r3, r2, r3
 800a662:	4299      	cmp	r1, r3
 800a664:	d117      	bne.n	800a696 <_strtod_l+0x8f6>
 800a666:	4b29      	ldr	r3, [pc, #164]	; (800a70c <_strtod_l+0x96c>)
 800a668:	429f      	cmp	r7, r3
 800a66a:	d102      	bne.n	800a672 <_strtod_l+0x8d2>
 800a66c:	3101      	adds	r1, #1
 800a66e:	f43f addf 	beq.w	800a230 <_strtod_l+0x490>
 800a672:	4b23      	ldr	r3, [pc, #140]	; (800a700 <_strtod_l+0x960>)
 800a674:	403b      	ands	r3, r7
 800a676:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1a4      	bne.n	800a5ce <_strtod_l+0x82e>
 800a684:	e5de      	b.n	800a244 <_strtod_l+0x4a4>
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	e7ea      	b.n	800a662 <_strtod_l+0x8c2>
 800a68c:	4613      	mov	r3, r2
 800a68e:	e7e8      	b.n	800a662 <_strtod_l+0x8c2>
 800a690:	ea53 030a 	orrs.w	r3, r3, sl
 800a694:	d08c      	beq.n	800a5b0 <_strtod_l+0x810>
 800a696:	9b08      	ldr	r3, [sp, #32]
 800a698:	b1db      	cbz	r3, 800a6d2 <_strtod_l+0x932>
 800a69a:	423b      	tst	r3, r7
 800a69c:	d0ef      	beq.n	800a67e <_strtod_l+0x8de>
 800a69e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	4659      	mov	r1, fp
 800a6a6:	b1c3      	cbz	r3, 800a6da <_strtod_l+0x93a>
 800a6a8:	f7ff fb5e 	bl	8009d68 <sulp>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	ec51 0b18 	vmov	r0, r1, d8
 800a6b4:	f7f5 fdea 	bl	800028c <__adddf3>
 800a6b8:	4682      	mov	sl, r0
 800a6ba:	468b      	mov	fp, r1
 800a6bc:	e7df      	b.n	800a67e <_strtod_l+0x8de>
 800a6be:	4013      	ands	r3, r2
 800a6c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a6c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a6d0:	e7d5      	b.n	800a67e <_strtod_l+0x8de>
 800a6d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6d4:	ea13 0f0a 	tst.w	r3, sl
 800a6d8:	e7e0      	b.n	800a69c <_strtod_l+0x8fc>
 800a6da:	f7ff fb45 	bl	8009d68 <sulp>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	ec51 0b18 	vmov	r0, r1, d8
 800a6e6:	f7f5 fdcf 	bl	8000288 <__aeabi_dsub>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4682      	mov	sl, r0
 800a6f0:	468b      	mov	fp, r1
 800a6f2:	f7f6 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0c1      	beq.n	800a67e <_strtod_l+0x8de>
 800a6fa:	e611      	b.n	800a320 <_strtod_l+0x580>
 800a6fc:	fffffc02 	.word	0xfffffc02
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	39500000 	.word	0x39500000
 800a708:	000fffff 	.word	0x000fffff
 800a70c:	7fefffff 	.word	0x7fefffff
 800a710:	0800eab0 	.word	0x0800eab0
 800a714:	4631      	mov	r1, r6
 800a716:	4628      	mov	r0, r5
 800a718:	f002 f832 	bl	800c780 <__ratio>
 800a71c:	ec59 8b10 	vmov	r8, r9, d0
 800a720:	ee10 0a10 	vmov	r0, s0
 800a724:	2200      	movs	r2, #0
 800a726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a72a:	4649      	mov	r1, r9
 800a72c:	f7f6 f9e0 	bl	8000af0 <__aeabi_dcmple>
 800a730:	2800      	cmp	r0, #0
 800a732:	d07a      	beq.n	800a82a <_strtod_l+0xa8a>
 800a734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a736:	2b00      	cmp	r3, #0
 800a738:	d04a      	beq.n	800a7d0 <_strtod_l+0xa30>
 800a73a:	4b95      	ldr	r3, [pc, #596]	; (800a990 <_strtod_l+0xbf0>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a742:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a990 <_strtod_l+0xbf0>
 800a746:	f04f 0800 	mov.w	r8, #0
 800a74a:	4b92      	ldr	r3, [pc, #584]	; (800a994 <_strtod_l+0xbf4>)
 800a74c:	403b      	ands	r3, r7
 800a74e:	930d      	str	r3, [sp, #52]	; 0x34
 800a750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a752:	4b91      	ldr	r3, [pc, #580]	; (800a998 <_strtod_l+0xbf8>)
 800a754:	429a      	cmp	r2, r3
 800a756:	f040 80b0 	bne.w	800a8ba <_strtod_l+0xb1a>
 800a75a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a75e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a762:	ec4b ab10 	vmov	d0, sl, fp
 800a766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a76a:	f001 ff31 	bl	800c5d0 <__ulp>
 800a76e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a772:	ec53 2b10 	vmov	r2, r3, d0
 800a776:	f7f5 ff3f 	bl	80005f8 <__aeabi_dmul>
 800a77a:	4652      	mov	r2, sl
 800a77c:	465b      	mov	r3, fp
 800a77e:	f7f5 fd85 	bl	800028c <__adddf3>
 800a782:	460b      	mov	r3, r1
 800a784:	4983      	ldr	r1, [pc, #524]	; (800a994 <_strtod_l+0xbf4>)
 800a786:	4a85      	ldr	r2, [pc, #532]	; (800a99c <_strtod_l+0xbfc>)
 800a788:	4019      	ands	r1, r3
 800a78a:	4291      	cmp	r1, r2
 800a78c:	4682      	mov	sl, r0
 800a78e:	d960      	bls.n	800a852 <_strtod_l+0xab2>
 800a790:	ee18 3a90 	vmov	r3, s17
 800a794:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a798:	4293      	cmp	r3, r2
 800a79a:	d104      	bne.n	800a7a6 <_strtod_l+0xa06>
 800a79c:	ee18 3a10 	vmov	r3, s16
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	f43f ad45 	beq.w	800a230 <_strtod_l+0x490>
 800a7a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a9a8 <_strtod_l+0xc08>
 800a7aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a7ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f001 fbdb 	bl	800bf6c <_Bfree>
 800a7b6:	9905      	ldr	r1, [sp, #20]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f001 fbd7 	bl	800bf6c <_Bfree>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f001 fbd3 	bl	800bf6c <_Bfree>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 fbcf 	bl	800bf6c <_Bfree>
 800a7ce:	e61a      	b.n	800a406 <_strtod_l+0x666>
 800a7d0:	f1ba 0f00 	cmp.w	sl, #0
 800a7d4:	d11b      	bne.n	800a80e <_strtod_l+0xa6e>
 800a7d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7da:	b9f3      	cbnz	r3, 800a81a <_strtod_l+0xa7a>
 800a7dc:	4b6c      	ldr	r3, [pc, #432]	; (800a990 <_strtod_l+0xbf0>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	f7f6 f97a 	bl	8000adc <__aeabi_dcmplt>
 800a7e8:	b9d0      	cbnz	r0, 800a820 <_strtod_l+0xa80>
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4b6c      	ldr	r3, [pc, #432]	; (800a9a0 <_strtod_l+0xc00>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f7f5 ff01 	bl	80005f8 <__aeabi_dmul>
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a802:	9315      	str	r3, [sp, #84]	; 0x54
 800a804:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a80c:	e79d      	b.n	800a74a <_strtod_l+0x9aa>
 800a80e:	f1ba 0f01 	cmp.w	sl, #1
 800a812:	d102      	bne.n	800a81a <_strtod_l+0xa7a>
 800a814:	2f00      	cmp	r7, #0
 800a816:	f43f ad83 	beq.w	800a320 <_strtod_l+0x580>
 800a81a:	4b62      	ldr	r3, [pc, #392]	; (800a9a4 <_strtod_l+0xc04>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	e78e      	b.n	800a73e <_strtod_l+0x99e>
 800a820:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a9a0 <_strtod_l+0xc00>
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	e7e7      	b.n	800a7fa <_strtod_l+0xa5a>
 800a82a:	4b5d      	ldr	r3, [pc, #372]	; (800a9a0 <_strtod_l+0xc00>)
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a838:	4680      	mov	r8, r0
 800a83a:	4689      	mov	r9, r1
 800a83c:	b933      	cbnz	r3, 800a84c <_strtod_l+0xaac>
 800a83e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a842:	900e      	str	r0, [sp, #56]	; 0x38
 800a844:	930f      	str	r3, [sp, #60]	; 0x3c
 800a846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a84a:	e7dd      	b.n	800a808 <_strtod_l+0xa68>
 800a84c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a850:	e7f9      	b.n	800a846 <_strtod_l+0xaa6>
 800a852:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1a8      	bne.n	800a7ae <_strtod_l+0xa0e>
 800a85c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a862:	0d1b      	lsrs	r3, r3, #20
 800a864:	051b      	lsls	r3, r3, #20
 800a866:	429a      	cmp	r2, r3
 800a868:	d1a1      	bne.n	800a7ae <_strtod_l+0xa0e>
 800a86a:	4640      	mov	r0, r8
 800a86c:	4649      	mov	r1, r9
 800a86e:	f7f6 fa0b 	bl	8000c88 <__aeabi_d2lz>
 800a872:	f7f5 fe93 	bl	800059c <__aeabi_l2d>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fd03 	bl	8000288 <__aeabi_dsub>
 800a882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a888:	ea43 030a 	orr.w	r3, r3, sl
 800a88c:	4313      	orrs	r3, r2
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	d055      	beq.n	800a940 <_strtod_l+0xba0>
 800a894:	a336      	add	r3, pc, #216	; (adr r3, 800a970 <_strtod_l+0xbd0>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f6 f91f 	bl	8000adc <__aeabi_dcmplt>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	f47f acd0 	bne.w	800a244 <_strtod_l+0x4a4>
 800a8a4:	a334      	add	r3, pc, #208	; (adr r3, 800a978 <_strtod_l+0xbd8>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	f7f6 f933 	bl	8000b18 <__aeabi_dcmpgt>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	f43f af7b 	beq.w	800a7ae <_strtod_l+0xa0e>
 800a8b8:	e4c4      	b.n	800a244 <_strtod_l+0x4a4>
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	b333      	cbz	r3, 800a90c <_strtod_l+0xb6c>
 800a8be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8c4:	d822      	bhi.n	800a90c <_strtod_l+0xb6c>
 800a8c6:	a32e      	add	r3, pc, #184	; (adr r3, 800a980 <_strtod_l+0xbe0>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f6 f90e 	bl	8000af0 <__aeabi_dcmple>
 800a8d4:	b1a0      	cbz	r0, 800a900 <_strtod_l+0xb60>
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	4640      	mov	r0, r8
 800a8da:	f7f6 f965 	bl	8000ba8 <__aeabi_d2uiz>
 800a8de:	2801      	cmp	r0, #1
 800a8e0:	bf38      	it	cc
 800a8e2:	2001      	movcc	r0, #1
 800a8e4:	f7f5 fe0e 	bl	8000504 <__aeabi_ui2d>
 800a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	4689      	mov	r9, r1
 800a8ee:	bb23      	cbnz	r3, 800a93a <_strtod_l+0xb9a>
 800a8f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8f4:	9010      	str	r0, [sp, #64]	; 0x40
 800a8f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a8f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a904:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a910:	eeb0 0a48 	vmov.f32	s0, s16
 800a914:	eef0 0a68 	vmov.f32	s1, s17
 800a918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a91c:	f001 fe58 	bl	800c5d0 <__ulp>
 800a920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a924:	ec53 2b10 	vmov	r2, r3, d0
 800a928:	f7f5 fe66 	bl	80005f8 <__aeabi_dmul>
 800a92c:	ec53 2b18 	vmov	r2, r3, d8
 800a930:	f7f5 fcac 	bl	800028c <__adddf3>
 800a934:	4682      	mov	sl, r0
 800a936:	468b      	mov	fp, r1
 800a938:	e78d      	b.n	800a856 <_strtod_l+0xab6>
 800a93a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a93e:	e7db      	b.n	800a8f8 <_strtod_l+0xb58>
 800a940:	a311      	add	r3, pc, #68	; (adr r3, 800a988 <_strtod_l+0xbe8>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	f7f6 f8c9 	bl	8000adc <__aeabi_dcmplt>
 800a94a:	e7b2      	b.n	800a8b2 <_strtod_l+0xb12>
 800a94c:	2300      	movs	r3, #0
 800a94e:	930a      	str	r3, [sp, #40]	; 0x28
 800a950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	f7ff ba6b 	b.w	8009e30 <_strtod_l+0x90>
 800a95a:	2a65      	cmp	r2, #101	; 0x65
 800a95c:	f43f ab5f 	beq.w	800a01e <_strtod_l+0x27e>
 800a960:	2a45      	cmp	r2, #69	; 0x45
 800a962:	f43f ab5c 	beq.w	800a01e <_strtod_l+0x27e>
 800a966:	2301      	movs	r3, #1
 800a968:	f7ff bb94 	b.w	800a094 <_strtod_l+0x2f4>
 800a96c:	f3af 8000 	nop.w
 800a970:	94a03595 	.word	0x94a03595
 800a974:	3fdfffff 	.word	0x3fdfffff
 800a978:	35afe535 	.word	0x35afe535
 800a97c:	3fe00000 	.word	0x3fe00000
 800a980:	ffc00000 	.word	0xffc00000
 800a984:	41dfffff 	.word	0x41dfffff
 800a988:	94a03595 	.word	0x94a03595
 800a98c:	3fcfffff 	.word	0x3fcfffff
 800a990:	3ff00000 	.word	0x3ff00000
 800a994:	7ff00000 	.word	0x7ff00000
 800a998:	7fe00000 	.word	0x7fe00000
 800a99c:	7c9fffff 	.word	0x7c9fffff
 800a9a0:	3fe00000 	.word	0x3fe00000
 800a9a4:	bff00000 	.word	0xbff00000
 800a9a8:	7fefffff 	.word	0x7fefffff

0800a9ac <_strtod_r>:
 800a9ac:	4b01      	ldr	r3, [pc, #4]	; (800a9b4 <_strtod_r+0x8>)
 800a9ae:	f7ff b9f7 	b.w	8009da0 <_strtod_l>
 800a9b2:	bf00      	nop
 800a9b4:	20000170 	.word	0x20000170

0800a9b8 <_strtol_l.constprop.0>:
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9be:	d001      	beq.n	800a9c4 <_strtol_l.constprop.0+0xc>
 800a9c0:	2b24      	cmp	r3, #36	; 0x24
 800a9c2:	d906      	bls.n	800a9d2 <_strtol_l.constprop.0+0x1a>
 800a9c4:	f7fe fafe 	bl	8008fc4 <__errno>
 800a9c8:	2316      	movs	r3, #22
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aab8 <_strtol_l.constprop.0+0x100>
 800a9d6:	460d      	mov	r5, r1
 800a9d8:	462e      	mov	r6, r5
 800a9da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a9e2:	f017 0708 	ands.w	r7, r7, #8
 800a9e6:	d1f7      	bne.n	800a9d8 <_strtol_l.constprop.0+0x20>
 800a9e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a9ea:	d132      	bne.n	800aa52 <_strtol_l.constprop.0+0x9a>
 800a9ec:	782c      	ldrb	r4, [r5, #0]
 800a9ee:	2701      	movs	r7, #1
 800a9f0:	1cb5      	adds	r5, r6, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d05b      	beq.n	800aaae <_strtol_l.constprop.0+0xf6>
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d109      	bne.n	800aa0e <_strtol_l.constprop.0+0x56>
 800a9fa:	2c30      	cmp	r4, #48	; 0x30
 800a9fc:	d107      	bne.n	800aa0e <_strtol_l.constprop.0+0x56>
 800a9fe:	782c      	ldrb	r4, [r5, #0]
 800aa00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aa04:	2c58      	cmp	r4, #88	; 0x58
 800aa06:	d14d      	bne.n	800aaa4 <_strtol_l.constprop.0+0xec>
 800aa08:	786c      	ldrb	r4, [r5, #1]
 800aa0a:	2310      	movs	r3, #16
 800aa0c:	3502      	adds	r5, #2
 800aa0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aa12:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa16:	f04f 0c00 	mov.w	ip, #0
 800aa1a:	fbb8 f9f3 	udiv	r9, r8, r3
 800aa1e:	4666      	mov	r6, ip
 800aa20:	fb03 8a19 	mls	sl, r3, r9, r8
 800aa24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aa28:	f1be 0f09 	cmp.w	lr, #9
 800aa2c:	d816      	bhi.n	800aa5c <_strtol_l.constprop.0+0xa4>
 800aa2e:	4674      	mov	r4, lr
 800aa30:	42a3      	cmp	r3, r4
 800aa32:	dd24      	ble.n	800aa7e <_strtol_l.constprop.0+0xc6>
 800aa34:	f1bc 0f00 	cmp.w	ip, #0
 800aa38:	db1e      	blt.n	800aa78 <_strtol_l.constprop.0+0xc0>
 800aa3a:	45b1      	cmp	r9, r6
 800aa3c:	d31c      	bcc.n	800aa78 <_strtol_l.constprop.0+0xc0>
 800aa3e:	d101      	bne.n	800aa44 <_strtol_l.constprop.0+0x8c>
 800aa40:	45a2      	cmp	sl, r4
 800aa42:	db19      	blt.n	800aa78 <_strtol_l.constprop.0+0xc0>
 800aa44:	fb06 4603 	mla	r6, r6, r3, r4
 800aa48:	f04f 0c01 	mov.w	ip, #1
 800aa4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa50:	e7e8      	b.n	800aa24 <_strtol_l.constprop.0+0x6c>
 800aa52:	2c2b      	cmp	r4, #43	; 0x2b
 800aa54:	bf04      	itt	eq
 800aa56:	782c      	ldrbeq	r4, [r5, #0]
 800aa58:	1cb5      	addeq	r5, r6, #2
 800aa5a:	e7ca      	b.n	800a9f2 <_strtol_l.constprop.0+0x3a>
 800aa5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aa60:	f1be 0f19 	cmp.w	lr, #25
 800aa64:	d801      	bhi.n	800aa6a <_strtol_l.constprop.0+0xb2>
 800aa66:	3c37      	subs	r4, #55	; 0x37
 800aa68:	e7e2      	b.n	800aa30 <_strtol_l.constprop.0+0x78>
 800aa6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aa6e:	f1be 0f19 	cmp.w	lr, #25
 800aa72:	d804      	bhi.n	800aa7e <_strtol_l.constprop.0+0xc6>
 800aa74:	3c57      	subs	r4, #87	; 0x57
 800aa76:	e7db      	b.n	800aa30 <_strtol_l.constprop.0+0x78>
 800aa78:	f04f 3cff 	mov.w	ip, #4294967295
 800aa7c:	e7e6      	b.n	800aa4c <_strtol_l.constprop.0+0x94>
 800aa7e:	f1bc 0f00 	cmp.w	ip, #0
 800aa82:	da05      	bge.n	800aa90 <_strtol_l.constprop.0+0xd8>
 800aa84:	2322      	movs	r3, #34	; 0x22
 800aa86:	6003      	str	r3, [r0, #0]
 800aa88:	4646      	mov	r6, r8
 800aa8a:	b942      	cbnz	r2, 800aa9e <_strtol_l.constprop.0+0xe6>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	e79e      	b.n	800a9ce <_strtol_l.constprop.0+0x16>
 800aa90:	b107      	cbz	r7, 800aa94 <_strtol_l.constprop.0+0xdc>
 800aa92:	4276      	negs	r6, r6
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d0f9      	beq.n	800aa8c <_strtol_l.constprop.0+0xd4>
 800aa98:	f1bc 0f00 	cmp.w	ip, #0
 800aa9c:	d000      	beq.n	800aaa0 <_strtol_l.constprop.0+0xe8>
 800aa9e:	1e69      	subs	r1, r5, #1
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	e7f3      	b.n	800aa8c <_strtol_l.constprop.0+0xd4>
 800aaa4:	2430      	movs	r4, #48	; 0x30
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1b1      	bne.n	800aa0e <_strtol_l.constprop.0+0x56>
 800aaaa:	2308      	movs	r3, #8
 800aaac:	e7af      	b.n	800aa0e <_strtol_l.constprop.0+0x56>
 800aaae:	2c30      	cmp	r4, #48	; 0x30
 800aab0:	d0a5      	beq.n	800a9fe <_strtol_l.constprop.0+0x46>
 800aab2:	230a      	movs	r3, #10
 800aab4:	e7ab      	b.n	800aa0e <_strtol_l.constprop.0+0x56>
 800aab6:	bf00      	nop
 800aab8:	0800ead9 	.word	0x0800ead9

0800aabc <_strtol_r>:
 800aabc:	f7ff bf7c 	b.w	800a9b8 <_strtol_l.constprop.0>

0800aac0 <quorem>:
 800aac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	6903      	ldr	r3, [r0, #16]
 800aac6:	690c      	ldr	r4, [r1, #16]
 800aac8:	42a3      	cmp	r3, r4
 800aaca:	4607      	mov	r7, r0
 800aacc:	f2c0 8081 	blt.w	800abd2 <quorem+0x112>
 800aad0:	3c01      	subs	r4, #1
 800aad2:	f101 0814 	add.w	r8, r1, #20
 800aad6:	f100 0514 	add.w	r5, r0, #20
 800aada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aae8:	3301      	adds	r3, #1
 800aaea:	429a      	cmp	r2, r3
 800aaec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aaf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aaf4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aaf8:	d331      	bcc.n	800ab5e <quorem+0x9e>
 800aafa:	f04f 0e00 	mov.w	lr, #0
 800aafe:	4640      	mov	r0, r8
 800ab00:	46ac      	mov	ip, r5
 800ab02:	46f2      	mov	sl, lr
 800ab04:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab08:	b293      	uxth	r3, r2
 800ab0a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	ebaa 0303 	sub.w	r3, sl, r3
 800ab18:	f8dc a000 	ldr.w	sl, [ip]
 800ab1c:	0c12      	lsrs	r2, r2, #16
 800ab1e:	fa13 f38a 	uxtah	r3, r3, sl
 800ab22:	fb06 e202 	mla	r2, r6, r2, lr
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	9b00      	ldr	r3, [sp, #0]
 800ab2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab2e:	b292      	uxth	r2, r2
 800ab30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab38:	f8bd 3000 	ldrh.w	r3, [sp]
 800ab3c:	4581      	cmp	r9, r0
 800ab3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab42:	f84c 3b04 	str.w	r3, [ip], #4
 800ab46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab4a:	d2db      	bcs.n	800ab04 <quorem+0x44>
 800ab4c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab50:	b92b      	cbnz	r3, 800ab5e <quorem+0x9e>
 800ab52:	9b01      	ldr	r3, [sp, #4]
 800ab54:	3b04      	subs	r3, #4
 800ab56:	429d      	cmp	r5, r3
 800ab58:	461a      	mov	r2, r3
 800ab5a:	d32e      	bcc.n	800abba <quorem+0xfa>
 800ab5c:	613c      	str	r4, [r7, #16]
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f001 fc90 	bl	800c484 <__mcmp>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	db24      	blt.n	800abb2 <quorem+0xf2>
 800ab68:	3601      	adds	r6, #1
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f04f 0c00 	mov.w	ip, #0
 800ab70:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab74:	f8d0 e000 	ldr.w	lr, [r0]
 800ab78:	b293      	uxth	r3, r2
 800ab7a:	ebac 0303 	sub.w	r3, ip, r3
 800ab7e:	0c12      	lsrs	r2, r2, #16
 800ab80:	fa13 f38e 	uxtah	r3, r3, lr
 800ab84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab92:	45c1      	cmp	r9, r8
 800ab94:	f840 3b04 	str.w	r3, [r0], #4
 800ab98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab9c:	d2e8      	bcs.n	800ab70 <quorem+0xb0>
 800ab9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba6:	b922      	cbnz	r2, 800abb2 <quorem+0xf2>
 800aba8:	3b04      	subs	r3, #4
 800abaa:	429d      	cmp	r5, r3
 800abac:	461a      	mov	r2, r3
 800abae:	d30a      	bcc.n	800abc6 <quorem+0x106>
 800abb0:	613c      	str	r4, [r7, #16]
 800abb2:	4630      	mov	r0, r6
 800abb4:	b003      	add	sp, #12
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	3b04      	subs	r3, #4
 800abbe:	2a00      	cmp	r2, #0
 800abc0:	d1cc      	bne.n	800ab5c <quorem+0x9c>
 800abc2:	3c01      	subs	r4, #1
 800abc4:	e7c7      	b.n	800ab56 <quorem+0x96>
 800abc6:	6812      	ldr	r2, [r2, #0]
 800abc8:	3b04      	subs	r3, #4
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d1f0      	bne.n	800abb0 <quorem+0xf0>
 800abce:	3c01      	subs	r4, #1
 800abd0:	e7eb      	b.n	800abaa <quorem+0xea>
 800abd2:	2000      	movs	r0, #0
 800abd4:	e7ee      	b.n	800abb4 <quorem+0xf4>
	...

0800abd8 <_dtoa_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	ed2d 8b04 	vpush	{d8-d9}
 800abe0:	ec57 6b10 	vmov	r6, r7, d0
 800abe4:	b093      	sub	sp, #76	; 0x4c
 800abe6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800abe8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800abec:	9106      	str	r1, [sp, #24]
 800abee:	ee10 aa10 	vmov	sl, s0
 800abf2:	4604      	mov	r4, r0
 800abf4:	9209      	str	r2, [sp, #36]	; 0x24
 800abf6:	930c      	str	r3, [sp, #48]	; 0x30
 800abf8:	46bb      	mov	fp, r7
 800abfa:	b975      	cbnz	r5, 800ac1a <_dtoa_r+0x42>
 800abfc:	2010      	movs	r0, #16
 800abfe:	f001 f94d 	bl	800be9c <malloc>
 800ac02:	4602      	mov	r2, r0
 800ac04:	6260      	str	r0, [r4, #36]	; 0x24
 800ac06:	b920      	cbnz	r0, 800ac12 <_dtoa_r+0x3a>
 800ac08:	4ba7      	ldr	r3, [pc, #668]	; (800aea8 <_dtoa_r+0x2d0>)
 800ac0a:	21ea      	movs	r1, #234	; 0xea
 800ac0c:	48a7      	ldr	r0, [pc, #668]	; (800aeac <_dtoa_r+0x2d4>)
 800ac0e:	f002 f8bd 	bl	800cd8c <__assert_func>
 800ac12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac16:	6005      	str	r5, [r0, #0]
 800ac18:	60c5      	str	r5, [r0, #12]
 800ac1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac1c:	6819      	ldr	r1, [r3, #0]
 800ac1e:	b151      	cbz	r1, 800ac36 <_dtoa_r+0x5e>
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	604a      	str	r2, [r1, #4]
 800ac24:	2301      	movs	r3, #1
 800ac26:	4093      	lsls	r3, r2
 800ac28:	608b      	str	r3, [r1, #8]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 f99e 	bl	800bf6c <_Bfree>
 800ac30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac32:	2200      	movs	r2, #0
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	1e3b      	subs	r3, r7, #0
 800ac38:	bfaa      	itet	ge
 800ac3a:	2300      	movge	r3, #0
 800ac3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ac40:	f8c8 3000 	strge.w	r3, [r8]
 800ac44:	4b9a      	ldr	r3, [pc, #616]	; (800aeb0 <_dtoa_r+0x2d8>)
 800ac46:	bfbc      	itt	lt
 800ac48:	2201      	movlt	r2, #1
 800ac4a:	f8c8 2000 	strlt.w	r2, [r8]
 800ac4e:	ea33 030b 	bics.w	r3, r3, fp
 800ac52:	d11b      	bne.n	800ac8c <_dtoa_r+0xb4>
 800ac54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac60:	4333      	orrs	r3, r6
 800ac62:	f000 8592 	beq.w	800b78a <_dtoa_r+0xbb2>
 800ac66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac68:	b963      	cbnz	r3, 800ac84 <_dtoa_r+0xac>
 800ac6a:	4b92      	ldr	r3, [pc, #584]	; (800aeb4 <_dtoa_r+0x2dc>)
 800ac6c:	e022      	b.n	800acb4 <_dtoa_r+0xdc>
 800ac6e:	4b92      	ldr	r3, [pc, #584]	; (800aeb8 <_dtoa_r+0x2e0>)
 800ac70:	9301      	str	r3, [sp, #4]
 800ac72:	3308      	adds	r3, #8
 800ac74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	9801      	ldr	r0, [sp, #4]
 800ac7a:	b013      	add	sp, #76	; 0x4c
 800ac7c:	ecbd 8b04 	vpop	{d8-d9}
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	4b8b      	ldr	r3, [pc, #556]	; (800aeb4 <_dtoa_r+0x2dc>)
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	3303      	adds	r3, #3
 800ac8a:	e7f3      	b.n	800ac74 <_dtoa_r+0x9c>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	4650      	mov	r0, sl
 800ac92:	4659      	mov	r1, fp
 800ac94:	f7f5 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac98:	ec4b ab19 	vmov	d9, sl, fp
 800ac9c:	4680      	mov	r8, r0
 800ac9e:	b158      	cbz	r0, 800acb8 <_dtoa_r+0xe0>
 800aca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aca2:	2301      	movs	r3, #1
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 856b 	beq.w	800b784 <_dtoa_r+0xbac>
 800acae:	4883      	ldr	r0, [pc, #524]	; (800aebc <_dtoa_r+0x2e4>)
 800acb0:	6018      	str	r0, [r3, #0]
 800acb2:	1e43      	subs	r3, r0, #1
 800acb4:	9301      	str	r3, [sp, #4]
 800acb6:	e7df      	b.n	800ac78 <_dtoa_r+0xa0>
 800acb8:	ec4b ab10 	vmov	d0, sl, fp
 800acbc:	aa10      	add	r2, sp, #64	; 0x40
 800acbe:	a911      	add	r1, sp, #68	; 0x44
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 fd01 	bl	800c6c8 <__d2b>
 800acc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800acca:	ee08 0a10 	vmov	s16, r0
 800acce:	2d00      	cmp	r5, #0
 800acd0:	f000 8084 	beq.w	800addc <_dtoa_r+0x204>
 800acd4:	ee19 3a90 	vmov	r3, s19
 800acd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ace0:	4656      	mov	r6, sl
 800ace2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ace6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800acee:	4b74      	ldr	r3, [pc, #464]	; (800aec0 <_dtoa_r+0x2e8>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fac7 	bl	8000288 <__aeabi_dsub>
 800acfa:	a365      	add	r3, pc, #404	; (adr r3, 800ae90 <_dtoa_r+0x2b8>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	f7f5 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ad04:	a364      	add	r3, pc, #400	; (adr r3, 800ae98 <_dtoa_r+0x2c0>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	f7f5 fabf 	bl	800028c <__adddf3>
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4628      	mov	r0, r5
 800ad12:	460f      	mov	r7, r1
 800ad14:	f7f5 fc06 	bl	8000524 <__aeabi_i2d>
 800ad18:	a361      	add	r3, pc, #388	; (adr r3, 800aea0 <_dtoa_r+0x2c8>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	f7f5 faaf 	bl	800028c <__adddf3>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	f7f5 ff11 	bl	8000b58 <__aeabi_d2iz>
 800ad36:	2200      	movs	r2, #0
 800ad38:	9000      	str	r0, [sp, #0]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 fecc 	bl	8000adc <__aeabi_dcmplt>
 800ad44:	b150      	cbz	r0, 800ad5c <_dtoa_r+0x184>
 800ad46:	9800      	ldr	r0, [sp, #0]
 800ad48:	f7f5 fbec 	bl	8000524 <__aeabi_i2d>
 800ad4c:	4632      	mov	r2, r6
 800ad4e:	463b      	mov	r3, r7
 800ad50:	f7f5 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad54:	b910      	cbnz	r0, 800ad5c <_dtoa_r+0x184>
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	9b00      	ldr	r3, [sp, #0]
 800ad5e:	2b16      	cmp	r3, #22
 800ad60:	d85a      	bhi.n	800ae18 <_dtoa_r+0x240>
 800ad62:	9a00      	ldr	r2, [sp, #0]
 800ad64:	4b57      	ldr	r3, [pc, #348]	; (800aec4 <_dtoa_r+0x2ec>)
 800ad66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	ec51 0b19 	vmov	r0, r1, d9
 800ad72:	f7f5 feb3 	bl	8000adc <__aeabi_dcmplt>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d050      	beq.n	800ae1c <_dtoa_r+0x244>
 800ad7a:	9b00      	ldr	r3, [sp, #0]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	2300      	movs	r3, #0
 800ad82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad86:	1b5d      	subs	r5, r3, r5
 800ad88:	1e6b      	subs	r3, r5, #1
 800ad8a:	9305      	str	r3, [sp, #20]
 800ad8c:	bf45      	ittet	mi
 800ad8e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ad92:	9304      	strmi	r3, [sp, #16]
 800ad94:	2300      	movpl	r3, #0
 800ad96:	2300      	movmi	r3, #0
 800ad98:	bf4c      	ite	mi
 800ad9a:	9305      	strmi	r3, [sp, #20]
 800ad9c:	9304      	strpl	r3, [sp, #16]
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	db3d      	blt.n	800ae20 <_dtoa_r+0x248>
 800ada4:	9b05      	ldr	r3, [sp, #20]
 800ada6:	9a00      	ldr	r2, [sp, #0]
 800ada8:	920a      	str	r2, [sp, #40]	; 0x28
 800adaa:	4413      	add	r3, r2
 800adac:	9305      	str	r3, [sp, #20]
 800adae:	2300      	movs	r3, #0
 800adb0:	9307      	str	r3, [sp, #28]
 800adb2:	9b06      	ldr	r3, [sp, #24]
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	f200 8089 	bhi.w	800aecc <_dtoa_r+0x2f4>
 800adba:	2b05      	cmp	r3, #5
 800adbc:	bfc4      	itt	gt
 800adbe:	3b04      	subgt	r3, #4
 800adc0:	9306      	strgt	r3, [sp, #24]
 800adc2:	9b06      	ldr	r3, [sp, #24]
 800adc4:	f1a3 0302 	sub.w	r3, r3, #2
 800adc8:	bfcc      	ite	gt
 800adca:	2500      	movgt	r5, #0
 800adcc:	2501      	movle	r5, #1
 800adce:	2b03      	cmp	r3, #3
 800add0:	f200 8087 	bhi.w	800aee2 <_dtoa_r+0x30a>
 800add4:	e8df f003 	tbb	[pc, r3]
 800add8:	59383a2d 	.word	0x59383a2d
 800addc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ade0:	441d      	add	r5, r3
 800ade2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ade6:	2b20      	cmp	r3, #32
 800ade8:	bfc1      	itttt	gt
 800adea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800adee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800adf2:	fa0b f303 	lslgt.w	r3, fp, r3
 800adf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800adfa:	bfda      	itte	le
 800adfc:	f1c3 0320 	rsble	r3, r3, #32
 800ae00:	fa06 f003 	lslle.w	r0, r6, r3
 800ae04:	4318      	orrgt	r0, r3
 800ae06:	f7f5 fb7d 	bl	8000504 <__aeabi_ui2d>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae12:	3d01      	subs	r5, #1
 800ae14:	930e      	str	r3, [sp, #56]	; 0x38
 800ae16:	e76a      	b.n	800acee <_dtoa_r+0x116>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e7b2      	b.n	800ad82 <_dtoa_r+0x1aa>
 800ae1c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae1e:	e7b1      	b.n	800ad84 <_dtoa_r+0x1ac>
 800ae20:	9b04      	ldr	r3, [sp, #16]
 800ae22:	9a00      	ldr	r2, [sp, #0]
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	4253      	negs	r3, r2
 800ae2a:	9307      	str	r3, [sp, #28]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	e7bf      	b.n	800adb2 <_dtoa_r+0x1da>
 800ae32:	2300      	movs	r3, #0
 800ae34:	9308      	str	r3, [sp, #32]
 800ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dc55      	bgt.n	800aee8 <_dtoa_r+0x310>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ae42:	461a      	mov	r2, r3
 800ae44:	9209      	str	r2, [sp, #36]	; 0x24
 800ae46:	e00c      	b.n	800ae62 <_dtoa_r+0x28a>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e7f3      	b.n	800ae34 <_dtoa_r+0x25c>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae50:	9308      	str	r3, [sp, #32]
 800ae52:	9b00      	ldr	r3, [sp, #0]
 800ae54:	4413      	add	r3, r2
 800ae56:	9302      	str	r3, [sp, #8]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	bfb8      	it	lt
 800ae60:	2301      	movlt	r3, #1
 800ae62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ae64:	2200      	movs	r2, #0
 800ae66:	6042      	str	r2, [r0, #4]
 800ae68:	2204      	movs	r2, #4
 800ae6a:	f102 0614 	add.w	r6, r2, #20
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	6841      	ldr	r1, [r0, #4]
 800ae72:	d93d      	bls.n	800aef0 <_dtoa_r+0x318>
 800ae74:	4620      	mov	r0, r4
 800ae76:	f001 f839 	bl	800beec <_Balloc>
 800ae7a:	9001      	str	r0, [sp, #4]
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d13b      	bne.n	800aef8 <_dtoa_r+0x320>
 800ae80:	4b11      	ldr	r3, [pc, #68]	; (800aec8 <_dtoa_r+0x2f0>)
 800ae82:	4602      	mov	r2, r0
 800ae84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae88:	e6c0      	b.n	800ac0c <_dtoa_r+0x34>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e7df      	b.n	800ae4e <_dtoa_r+0x276>
 800ae8e:	bf00      	nop
 800ae90:	636f4361 	.word	0x636f4361
 800ae94:	3fd287a7 	.word	0x3fd287a7
 800ae98:	8b60c8b3 	.word	0x8b60c8b3
 800ae9c:	3fc68a28 	.word	0x3fc68a28
 800aea0:	509f79fb 	.word	0x509f79fb
 800aea4:	3fd34413 	.word	0x3fd34413
 800aea8:	0800ebe6 	.word	0x0800ebe6
 800aeac:	0800ebfd 	.word	0x0800ebfd
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	0800ebe2 	.word	0x0800ebe2
 800aeb8:	0800ebd9 	.word	0x0800ebd9
 800aebc:	0800ea5d 	.word	0x0800ea5d
 800aec0:	3ff80000 	.word	0x3ff80000
 800aec4:	0800ed68 	.word	0x0800ed68
 800aec8:	0800ec58 	.word	0x0800ec58
 800aecc:	2501      	movs	r5, #1
 800aece:	2300      	movs	r3, #0
 800aed0:	9306      	str	r3, [sp, #24]
 800aed2:	9508      	str	r5, [sp, #32]
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aedc:	2200      	movs	r2, #0
 800aede:	2312      	movs	r3, #18
 800aee0:	e7b0      	b.n	800ae44 <_dtoa_r+0x26c>
 800aee2:	2301      	movs	r3, #1
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	e7f5      	b.n	800aed4 <_dtoa_r+0x2fc>
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aeee:	e7b8      	b.n	800ae62 <_dtoa_r+0x28a>
 800aef0:	3101      	adds	r1, #1
 800aef2:	6041      	str	r1, [r0, #4]
 800aef4:	0052      	lsls	r2, r2, #1
 800aef6:	e7b8      	b.n	800ae6a <_dtoa_r+0x292>
 800aef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aefa:	9a01      	ldr	r2, [sp, #4]
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	2b0e      	cmp	r3, #14
 800af02:	f200 809d 	bhi.w	800b040 <_dtoa_r+0x468>
 800af06:	2d00      	cmp	r5, #0
 800af08:	f000 809a 	beq.w	800b040 <_dtoa_r+0x468>
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	dd32      	ble.n	800af78 <_dtoa_r+0x3a0>
 800af12:	4ab7      	ldr	r2, [pc, #732]	; (800b1f0 <_dtoa_r+0x618>)
 800af14:	f003 030f 	and.w	r3, r3, #15
 800af18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af20:	9b00      	ldr	r3, [sp, #0]
 800af22:	05d8      	lsls	r0, r3, #23
 800af24:	ea4f 1723 	mov.w	r7, r3, asr #4
 800af28:	d516      	bpl.n	800af58 <_dtoa_r+0x380>
 800af2a:	4bb2      	ldr	r3, [pc, #712]	; (800b1f4 <_dtoa_r+0x61c>)
 800af2c:	ec51 0b19 	vmov	r0, r1, d9
 800af30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af34:	f7f5 fc8a 	bl	800084c <__aeabi_ddiv>
 800af38:	f007 070f 	and.w	r7, r7, #15
 800af3c:	4682      	mov	sl, r0
 800af3e:	468b      	mov	fp, r1
 800af40:	2503      	movs	r5, #3
 800af42:	4eac      	ldr	r6, [pc, #688]	; (800b1f4 <_dtoa_r+0x61c>)
 800af44:	b957      	cbnz	r7, 800af5c <_dtoa_r+0x384>
 800af46:	4642      	mov	r2, r8
 800af48:	464b      	mov	r3, r9
 800af4a:	4650      	mov	r0, sl
 800af4c:	4659      	mov	r1, fp
 800af4e:	f7f5 fc7d 	bl	800084c <__aeabi_ddiv>
 800af52:	4682      	mov	sl, r0
 800af54:	468b      	mov	fp, r1
 800af56:	e028      	b.n	800afaa <_dtoa_r+0x3d2>
 800af58:	2502      	movs	r5, #2
 800af5a:	e7f2      	b.n	800af42 <_dtoa_r+0x36a>
 800af5c:	07f9      	lsls	r1, r7, #31
 800af5e:	d508      	bpl.n	800af72 <_dtoa_r+0x39a>
 800af60:	4640      	mov	r0, r8
 800af62:	4649      	mov	r1, r9
 800af64:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af68:	f7f5 fb46 	bl	80005f8 <__aeabi_dmul>
 800af6c:	3501      	adds	r5, #1
 800af6e:	4680      	mov	r8, r0
 800af70:	4689      	mov	r9, r1
 800af72:	107f      	asrs	r7, r7, #1
 800af74:	3608      	adds	r6, #8
 800af76:	e7e5      	b.n	800af44 <_dtoa_r+0x36c>
 800af78:	f000 809b 	beq.w	800b0b2 <_dtoa_r+0x4da>
 800af7c:	9b00      	ldr	r3, [sp, #0]
 800af7e:	4f9d      	ldr	r7, [pc, #628]	; (800b1f4 <_dtoa_r+0x61c>)
 800af80:	425e      	negs	r6, r3
 800af82:	4b9b      	ldr	r3, [pc, #620]	; (800b1f0 <_dtoa_r+0x618>)
 800af84:	f006 020f 	and.w	r2, r6, #15
 800af88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	ec51 0b19 	vmov	r0, r1, d9
 800af94:	f7f5 fb30 	bl	80005f8 <__aeabi_dmul>
 800af98:	1136      	asrs	r6, r6, #4
 800af9a:	4682      	mov	sl, r0
 800af9c:	468b      	mov	fp, r1
 800af9e:	2300      	movs	r3, #0
 800afa0:	2502      	movs	r5, #2
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d17a      	bne.n	800b09c <_dtoa_r+0x4c4>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1d3      	bne.n	800af52 <_dtoa_r+0x37a>
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8082 	beq.w	800b0b6 <_dtoa_r+0x4de>
 800afb2:	4b91      	ldr	r3, [pc, #580]	; (800b1f8 <_dtoa_r+0x620>)
 800afb4:	2200      	movs	r2, #0
 800afb6:	4650      	mov	r0, sl
 800afb8:	4659      	mov	r1, fp
 800afba:	f7f5 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d079      	beq.n	800b0b6 <_dtoa_r+0x4de>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d076      	beq.n	800b0b6 <_dtoa_r+0x4de>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd36      	ble.n	800b03c <_dtoa_r+0x464>
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	4650      	mov	r0, sl
 800afd2:	4659      	mov	r1, fp
 800afd4:	1e5f      	subs	r7, r3, #1
 800afd6:	2200      	movs	r2, #0
 800afd8:	4b88      	ldr	r3, [pc, #544]	; (800b1fc <_dtoa_r+0x624>)
 800afda:	f7f5 fb0d 	bl	80005f8 <__aeabi_dmul>
 800afde:	9e02      	ldr	r6, [sp, #8]
 800afe0:	4682      	mov	sl, r0
 800afe2:	468b      	mov	fp, r1
 800afe4:	3501      	adds	r5, #1
 800afe6:	4628      	mov	r0, r5
 800afe8:	f7f5 fa9c 	bl	8000524 <__aeabi_i2d>
 800afec:	4652      	mov	r2, sl
 800afee:	465b      	mov	r3, fp
 800aff0:	f7f5 fb02 	bl	80005f8 <__aeabi_dmul>
 800aff4:	4b82      	ldr	r3, [pc, #520]	; (800b200 <_dtoa_r+0x628>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	f7f5 f948 	bl	800028c <__adddf3>
 800affc:	46d0      	mov	r8, sl
 800affe:	46d9      	mov	r9, fp
 800b000:	4682      	mov	sl, r0
 800b002:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b006:	2e00      	cmp	r6, #0
 800b008:	d158      	bne.n	800b0bc <_dtoa_r+0x4e4>
 800b00a:	4b7e      	ldr	r3, [pc, #504]	; (800b204 <_dtoa_r+0x62c>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	4640      	mov	r0, r8
 800b010:	4649      	mov	r1, r9
 800b012:	f7f5 f939 	bl	8000288 <__aeabi_dsub>
 800b016:	4652      	mov	r2, sl
 800b018:	465b      	mov	r3, fp
 800b01a:	4680      	mov	r8, r0
 800b01c:	4689      	mov	r9, r1
 800b01e:	f7f5 fd7b 	bl	8000b18 <__aeabi_dcmpgt>
 800b022:	2800      	cmp	r0, #0
 800b024:	f040 8295 	bne.w	800b552 <_dtoa_r+0x97a>
 800b028:	4652      	mov	r2, sl
 800b02a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b02e:	4640      	mov	r0, r8
 800b030:	4649      	mov	r1, r9
 800b032:	f7f5 fd53 	bl	8000adc <__aeabi_dcmplt>
 800b036:	2800      	cmp	r0, #0
 800b038:	f040 8289 	bne.w	800b54e <_dtoa_r+0x976>
 800b03c:	ec5b ab19 	vmov	sl, fp, d9
 800b040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b042:	2b00      	cmp	r3, #0
 800b044:	f2c0 8148 	blt.w	800b2d8 <_dtoa_r+0x700>
 800b048:	9a00      	ldr	r2, [sp, #0]
 800b04a:	2a0e      	cmp	r2, #14
 800b04c:	f300 8144 	bgt.w	800b2d8 <_dtoa_r+0x700>
 800b050:	4b67      	ldr	r3, [pc, #412]	; (800b1f0 <_dtoa_r+0x618>)
 800b052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b056:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f280 80d5 	bge.w	800b20c <_dtoa_r+0x634>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f300 80d1 	bgt.w	800b20c <_dtoa_r+0x634>
 800b06a:	f040 826f 	bne.w	800b54c <_dtoa_r+0x974>
 800b06e:	4b65      	ldr	r3, [pc, #404]	; (800b204 <_dtoa_r+0x62c>)
 800b070:	2200      	movs	r2, #0
 800b072:	4640      	mov	r0, r8
 800b074:	4649      	mov	r1, r9
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	4652      	mov	r2, sl
 800b07c:	465b      	mov	r3, fp
 800b07e:	f7f5 fd41 	bl	8000b04 <__aeabi_dcmpge>
 800b082:	9e03      	ldr	r6, [sp, #12]
 800b084:	4637      	mov	r7, r6
 800b086:	2800      	cmp	r0, #0
 800b088:	f040 8245 	bne.w	800b516 <_dtoa_r+0x93e>
 800b08c:	9d01      	ldr	r5, [sp, #4]
 800b08e:	2331      	movs	r3, #49	; 0x31
 800b090:	f805 3b01 	strb.w	r3, [r5], #1
 800b094:	9b00      	ldr	r3, [sp, #0]
 800b096:	3301      	adds	r3, #1
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	e240      	b.n	800b51e <_dtoa_r+0x946>
 800b09c:	07f2      	lsls	r2, r6, #31
 800b09e:	d505      	bpl.n	800b0ac <_dtoa_r+0x4d4>
 800b0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0a4:	f7f5 faa8 	bl	80005f8 <__aeabi_dmul>
 800b0a8:	3501      	adds	r5, #1
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	1076      	asrs	r6, r6, #1
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	e777      	b.n	800afa2 <_dtoa_r+0x3ca>
 800b0b2:	2502      	movs	r5, #2
 800b0b4:	e779      	b.n	800afaa <_dtoa_r+0x3d2>
 800b0b6:	9f00      	ldr	r7, [sp, #0]
 800b0b8:	9e03      	ldr	r6, [sp, #12]
 800b0ba:	e794      	b.n	800afe6 <_dtoa_r+0x40e>
 800b0bc:	9901      	ldr	r1, [sp, #4]
 800b0be:	4b4c      	ldr	r3, [pc, #304]	; (800b1f0 <_dtoa_r+0x618>)
 800b0c0:	4431      	add	r1, r6
 800b0c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b0c4:	9908      	ldr	r1, [sp, #32]
 800b0c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b0ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0ce:	2900      	cmp	r1, #0
 800b0d0:	d043      	beq.n	800b15a <_dtoa_r+0x582>
 800b0d2:	494d      	ldr	r1, [pc, #308]	; (800b208 <_dtoa_r+0x630>)
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	f7f5 fbb9 	bl	800084c <__aeabi_ddiv>
 800b0da:	4652      	mov	r2, sl
 800b0dc:	465b      	mov	r3, fp
 800b0de:	f7f5 f8d3 	bl	8000288 <__aeabi_dsub>
 800b0e2:	9d01      	ldr	r5, [sp, #4]
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7f5 fd34 	bl	8000b58 <__aeabi_d2iz>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	f7f5 fa17 	bl	8000524 <__aeabi_i2d>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	4649      	mov	r1, r9
 800b0fe:	f7f5 f8c3 	bl	8000288 <__aeabi_dsub>
 800b102:	3630      	adds	r6, #48	; 0x30
 800b104:	f805 6b01 	strb.w	r6, [r5], #1
 800b108:	4652      	mov	r2, sl
 800b10a:	465b      	mov	r3, fp
 800b10c:	4680      	mov	r8, r0
 800b10e:	4689      	mov	r9, r1
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	2800      	cmp	r0, #0
 800b116:	d163      	bne.n	800b1e0 <_dtoa_r+0x608>
 800b118:	4642      	mov	r2, r8
 800b11a:	464b      	mov	r3, r9
 800b11c:	4936      	ldr	r1, [pc, #216]	; (800b1f8 <_dtoa_r+0x620>)
 800b11e:	2000      	movs	r0, #0
 800b120:	f7f5 f8b2 	bl	8000288 <__aeabi_dsub>
 800b124:	4652      	mov	r2, sl
 800b126:	465b      	mov	r3, fp
 800b128:	f7f5 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	f040 80b5 	bne.w	800b29c <_dtoa_r+0x6c4>
 800b132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b134:	429d      	cmp	r5, r3
 800b136:	d081      	beq.n	800b03c <_dtoa_r+0x464>
 800b138:	4b30      	ldr	r3, [pc, #192]	; (800b1fc <_dtoa_r+0x624>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	4650      	mov	r0, sl
 800b13e:	4659      	mov	r1, fp
 800b140:	f7f5 fa5a 	bl	80005f8 <__aeabi_dmul>
 800b144:	4b2d      	ldr	r3, [pc, #180]	; (800b1fc <_dtoa_r+0x624>)
 800b146:	4682      	mov	sl, r0
 800b148:	468b      	mov	fp, r1
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	2200      	movs	r2, #0
 800b150:	f7f5 fa52 	bl	80005f8 <__aeabi_dmul>
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	e7c6      	b.n	800b0e8 <_dtoa_r+0x510>
 800b15a:	4650      	mov	r0, sl
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 fa4b 	bl	80005f8 <__aeabi_dmul>
 800b162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b164:	9d01      	ldr	r5, [sp, #4]
 800b166:	930f      	str	r3, [sp, #60]	; 0x3c
 800b168:	4682      	mov	sl, r0
 800b16a:	468b      	mov	fp, r1
 800b16c:	4649      	mov	r1, r9
 800b16e:	4640      	mov	r0, r8
 800b170:	f7f5 fcf2 	bl	8000b58 <__aeabi_d2iz>
 800b174:	4606      	mov	r6, r0
 800b176:	f7f5 f9d5 	bl	8000524 <__aeabi_i2d>
 800b17a:	3630      	adds	r6, #48	; 0x30
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4640      	mov	r0, r8
 800b182:	4649      	mov	r1, r9
 800b184:	f7f5 f880 	bl	8000288 <__aeabi_dsub>
 800b188:	f805 6b01 	strb.w	r6, [r5], #1
 800b18c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b18e:	429d      	cmp	r5, r3
 800b190:	4680      	mov	r8, r0
 800b192:	4689      	mov	r9, r1
 800b194:	f04f 0200 	mov.w	r2, #0
 800b198:	d124      	bne.n	800b1e4 <_dtoa_r+0x60c>
 800b19a:	4b1b      	ldr	r3, [pc, #108]	; (800b208 <_dtoa_r+0x630>)
 800b19c:	4650      	mov	r0, sl
 800b19e:	4659      	mov	r1, fp
 800b1a0:	f7f5 f874 	bl	800028c <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	f7f5 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d173      	bne.n	800b29c <_dtoa_r+0x6c4>
 800b1b4:	4652      	mov	r2, sl
 800b1b6:	465b      	mov	r3, fp
 800b1b8:	4913      	ldr	r1, [pc, #76]	; (800b208 <_dtoa_r+0x630>)
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f7f5 f864 	bl	8000288 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 fc88 	bl	8000adc <__aeabi_dcmplt>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f43f af35 	beq.w	800b03c <_dtoa_r+0x464>
 800b1d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b1d4:	1e6b      	subs	r3, r5, #1
 800b1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1dc:	2b30      	cmp	r3, #48	; 0x30
 800b1de:	d0f8      	beq.n	800b1d2 <_dtoa_r+0x5fa>
 800b1e0:	9700      	str	r7, [sp, #0]
 800b1e2:	e049      	b.n	800b278 <_dtoa_r+0x6a0>
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <_dtoa_r+0x624>)
 800b1e6:	f7f5 fa07 	bl	80005f8 <__aeabi_dmul>
 800b1ea:	4680      	mov	r8, r0
 800b1ec:	4689      	mov	r9, r1
 800b1ee:	e7bd      	b.n	800b16c <_dtoa_r+0x594>
 800b1f0:	0800ed68 	.word	0x0800ed68
 800b1f4:	0800ed40 	.word	0x0800ed40
 800b1f8:	3ff00000 	.word	0x3ff00000
 800b1fc:	40240000 	.word	0x40240000
 800b200:	401c0000 	.word	0x401c0000
 800b204:	40140000 	.word	0x40140000
 800b208:	3fe00000 	.word	0x3fe00000
 800b20c:	9d01      	ldr	r5, [sp, #4]
 800b20e:	4656      	mov	r6, sl
 800b210:	465f      	mov	r7, fp
 800b212:	4642      	mov	r2, r8
 800b214:	464b      	mov	r3, r9
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 fb17 	bl	800084c <__aeabi_ddiv>
 800b21e:	f7f5 fc9b 	bl	8000b58 <__aeabi_d2iz>
 800b222:	4682      	mov	sl, r0
 800b224:	f7f5 f97e 	bl	8000524 <__aeabi_i2d>
 800b228:	4642      	mov	r2, r8
 800b22a:	464b      	mov	r3, r9
 800b22c:	f7f5 f9e4 	bl	80005f8 <__aeabi_dmul>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b23c:	f7f5 f824 	bl	8000288 <__aeabi_dsub>
 800b240:	f805 6b01 	strb.w	r6, [r5], #1
 800b244:	9e01      	ldr	r6, [sp, #4]
 800b246:	9f03      	ldr	r7, [sp, #12]
 800b248:	1bae      	subs	r6, r5, r6
 800b24a:	42b7      	cmp	r7, r6
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	d135      	bne.n	800b2be <_dtoa_r+0x6e6>
 800b252:	f7f5 f81b 	bl	800028c <__adddf3>
 800b256:	4642      	mov	r2, r8
 800b258:	464b      	mov	r3, r9
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	f7f5 fc5b 	bl	8000b18 <__aeabi_dcmpgt>
 800b262:	b9d0      	cbnz	r0, 800b29a <_dtoa_r+0x6c2>
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	4630      	mov	r0, r6
 800b26a:	4639      	mov	r1, r7
 800b26c:	f7f5 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b270:	b110      	cbz	r0, 800b278 <_dtoa_r+0x6a0>
 800b272:	f01a 0f01 	tst.w	sl, #1
 800b276:	d110      	bne.n	800b29a <_dtoa_r+0x6c2>
 800b278:	4620      	mov	r0, r4
 800b27a:	ee18 1a10 	vmov	r1, s16
 800b27e:	f000 fe75 	bl	800bf6c <_Bfree>
 800b282:	2300      	movs	r3, #0
 800b284:	9800      	ldr	r0, [sp, #0]
 800b286:	702b      	strb	r3, [r5, #0]
 800b288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b28a:	3001      	adds	r0, #1
 800b28c:	6018      	str	r0, [r3, #0]
 800b28e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b290:	2b00      	cmp	r3, #0
 800b292:	f43f acf1 	beq.w	800ac78 <_dtoa_r+0xa0>
 800b296:	601d      	str	r5, [r3, #0]
 800b298:	e4ee      	b.n	800ac78 <_dtoa_r+0xa0>
 800b29a:	9f00      	ldr	r7, [sp, #0]
 800b29c:	462b      	mov	r3, r5
 800b29e:	461d      	mov	r5, r3
 800b2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2a4:	2a39      	cmp	r2, #57	; 0x39
 800b2a6:	d106      	bne.n	800b2b6 <_dtoa_r+0x6de>
 800b2a8:	9a01      	ldr	r2, [sp, #4]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d1f7      	bne.n	800b29e <_dtoa_r+0x6c6>
 800b2ae:	9901      	ldr	r1, [sp, #4]
 800b2b0:	2230      	movs	r2, #48	; 0x30
 800b2b2:	3701      	adds	r7, #1
 800b2b4:	700a      	strb	r2, [r1, #0]
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e790      	b.n	800b1e0 <_dtoa_r+0x608>
 800b2be:	4ba6      	ldr	r3, [pc, #664]	; (800b558 <_dtoa_r+0x980>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f999 	bl	80005f8 <__aeabi_dmul>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4606      	mov	r6, r0
 800b2cc:	460f      	mov	r7, r1
 800b2ce:	f7f5 fbfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d09d      	beq.n	800b212 <_dtoa_r+0x63a>
 800b2d6:	e7cf      	b.n	800b278 <_dtoa_r+0x6a0>
 800b2d8:	9a08      	ldr	r2, [sp, #32]
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	f000 80d7 	beq.w	800b48e <_dtoa_r+0x8b6>
 800b2e0:	9a06      	ldr	r2, [sp, #24]
 800b2e2:	2a01      	cmp	r2, #1
 800b2e4:	f300 80ba 	bgt.w	800b45c <_dtoa_r+0x884>
 800b2e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f000 80b2 	beq.w	800b454 <_dtoa_r+0x87c>
 800b2f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2f4:	9e07      	ldr	r6, [sp, #28]
 800b2f6:	9d04      	ldr	r5, [sp, #16]
 800b2f8:	9a04      	ldr	r2, [sp, #16]
 800b2fa:	441a      	add	r2, r3
 800b2fc:	9204      	str	r2, [sp, #16]
 800b2fe:	9a05      	ldr	r2, [sp, #20]
 800b300:	2101      	movs	r1, #1
 800b302:	441a      	add	r2, r3
 800b304:	4620      	mov	r0, r4
 800b306:	9205      	str	r2, [sp, #20]
 800b308:	f000 ff32 	bl	800c170 <__i2b>
 800b30c:	4607      	mov	r7, r0
 800b30e:	2d00      	cmp	r5, #0
 800b310:	dd0c      	ble.n	800b32c <_dtoa_r+0x754>
 800b312:	9b05      	ldr	r3, [sp, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd09      	ble.n	800b32c <_dtoa_r+0x754>
 800b318:	42ab      	cmp	r3, r5
 800b31a:	9a04      	ldr	r2, [sp, #16]
 800b31c:	bfa8      	it	ge
 800b31e:	462b      	movge	r3, r5
 800b320:	1ad2      	subs	r2, r2, r3
 800b322:	9204      	str	r2, [sp, #16]
 800b324:	9a05      	ldr	r2, [sp, #20]
 800b326:	1aed      	subs	r5, r5, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	b31b      	cbz	r3, 800b378 <_dtoa_r+0x7a0>
 800b330:	9b08      	ldr	r3, [sp, #32]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80af 	beq.w	800b496 <_dtoa_r+0x8be>
 800b338:	2e00      	cmp	r6, #0
 800b33a:	dd13      	ble.n	800b364 <_dtoa_r+0x78c>
 800b33c:	4639      	mov	r1, r7
 800b33e:	4632      	mov	r2, r6
 800b340:	4620      	mov	r0, r4
 800b342:	f000 ffd5 	bl	800c2f0 <__pow5mult>
 800b346:	ee18 2a10 	vmov	r2, s16
 800b34a:	4601      	mov	r1, r0
 800b34c:	4607      	mov	r7, r0
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 ff24 	bl	800c19c <__multiply>
 800b354:	ee18 1a10 	vmov	r1, s16
 800b358:	4680      	mov	r8, r0
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fe06 	bl	800bf6c <_Bfree>
 800b360:	ee08 8a10 	vmov	s16, r8
 800b364:	9b07      	ldr	r3, [sp, #28]
 800b366:	1b9a      	subs	r2, r3, r6
 800b368:	d006      	beq.n	800b378 <_dtoa_r+0x7a0>
 800b36a:	ee18 1a10 	vmov	r1, s16
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 ffbe 	bl	800c2f0 <__pow5mult>
 800b374:	ee08 0a10 	vmov	s16, r0
 800b378:	2101      	movs	r1, #1
 800b37a:	4620      	mov	r0, r4
 800b37c:	f000 fef8 	bl	800c170 <__i2b>
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	4606      	mov	r6, r0
 800b386:	f340 8088 	ble.w	800b49a <_dtoa_r+0x8c2>
 800b38a:	461a      	mov	r2, r3
 800b38c:	4601      	mov	r1, r0
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 ffae 	bl	800c2f0 <__pow5mult>
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	2b01      	cmp	r3, #1
 800b398:	4606      	mov	r6, r0
 800b39a:	f340 8081 	ble.w	800b4a0 <_dtoa_r+0x8c8>
 800b39e:	f04f 0800 	mov.w	r8, #0
 800b3a2:	6933      	ldr	r3, [r6, #16]
 800b3a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b3a8:	6918      	ldr	r0, [r3, #16]
 800b3aa:	f000 fe91 	bl	800c0d0 <__hi0bits>
 800b3ae:	f1c0 0020 	rsb	r0, r0, #32
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	4418      	add	r0, r3
 800b3b6:	f010 001f 	ands.w	r0, r0, #31
 800b3ba:	f000 8092 	beq.w	800b4e2 <_dtoa_r+0x90a>
 800b3be:	f1c0 0320 	rsb	r3, r0, #32
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	f340 808a 	ble.w	800b4dc <_dtoa_r+0x904>
 800b3c8:	f1c0 001c 	rsb	r0, r0, #28
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	4403      	add	r3, r0
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	4403      	add	r3, r0
 800b3d6:	4405      	add	r5, r0
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	dd07      	ble.n	800b3f0 <_dtoa_r+0x818>
 800b3e0:	ee18 1a10 	vmov	r1, s16
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 ffdc 	bl	800c3a4 <__lshift>
 800b3ec:	ee08 0a10 	vmov	s16, r0
 800b3f0:	9b05      	ldr	r3, [sp, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	dd05      	ble.n	800b402 <_dtoa_r+0x82a>
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 ffd2 	bl	800c3a4 <__lshift>
 800b400:	4606      	mov	r6, r0
 800b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d06e      	beq.n	800b4e6 <_dtoa_r+0x90e>
 800b408:	ee18 0a10 	vmov	r0, s16
 800b40c:	4631      	mov	r1, r6
 800b40e:	f001 f839 	bl	800c484 <__mcmp>
 800b412:	2800      	cmp	r0, #0
 800b414:	da67      	bge.n	800b4e6 <_dtoa_r+0x90e>
 800b416:	9b00      	ldr	r3, [sp, #0]
 800b418:	3b01      	subs	r3, #1
 800b41a:	ee18 1a10 	vmov	r1, s16
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	220a      	movs	r2, #10
 800b422:	2300      	movs	r3, #0
 800b424:	4620      	mov	r0, r4
 800b426:	f000 fdc3 	bl	800bfb0 <__multadd>
 800b42a:	9b08      	ldr	r3, [sp, #32]
 800b42c:	ee08 0a10 	vmov	s16, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	f000 81b1 	beq.w	800b798 <_dtoa_r+0xbc0>
 800b436:	2300      	movs	r3, #0
 800b438:	4639      	mov	r1, r7
 800b43a:	220a      	movs	r2, #10
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 fdb7 	bl	800bfb0 <__multadd>
 800b442:	9b02      	ldr	r3, [sp, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	4607      	mov	r7, r0
 800b448:	f300 808e 	bgt.w	800b568 <_dtoa_r+0x990>
 800b44c:	9b06      	ldr	r3, [sp, #24]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	dc51      	bgt.n	800b4f6 <_dtoa_r+0x91e>
 800b452:	e089      	b.n	800b568 <_dtoa_r+0x990>
 800b454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b45a:	e74b      	b.n	800b2f4 <_dtoa_r+0x71c>
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1e5e      	subs	r6, r3, #1
 800b460:	9b07      	ldr	r3, [sp, #28]
 800b462:	42b3      	cmp	r3, r6
 800b464:	bfbf      	itttt	lt
 800b466:	9b07      	ldrlt	r3, [sp, #28]
 800b468:	9607      	strlt	r6, [sp, #28]
 800b46a:	1af2      	sublt	r2, r6, r3
 800b46c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b46e:	bfb6      	itet	lt
 800b470:	189b      	addlt	r3, r3, r2
 800b472:	1b9e      	subge	r6, r3, r6
 800b474:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	bfb8      	it	lt
 800b47a:	2600      	movlt	r6, #0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bfb7      	itett	lt
 800b480:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b484:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b488:	1a9d      	sublt	r5, r3, r2
 800b48a:	2300      	movlt	r3, #0
 800b48c:	e734      	b.n	800b2f8 <_dtoa_r+0x720>
 800b48e:	9e07      	ldr	r6, [sp, #28]
 800b490:	9d04      	ldr	r5, [sp, #16]
 800b492:	9f08      	ldr	r7, [sp, #32]
 800b494:	e73b      	b.n	800b30e <_dtoa_r+0x736>
 800b496:	9a07      	ldr	r2, [sp, #28]
 800b498:	e767      	b.n	800b36a <_dtoa_r+0x792>
 800b49a:	9b06      	ldr	r3, [sp, #24]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	dc18      	bgt.n	800b4d2 <_dtoa_r+0x8fa>
 800b4a0:	f1ba 0f00 	cmp.w	sl, #0
 800b4a4:	d115      	bne.n	800b4d2 <_dtoa_r+0x8fa>
 800b4a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4aa:	b993      	cbnz	r3, 800b4d2 <_dtoa_r+0x8fa>
 800b4ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4b0:	0d1b      	lsrs	r3, r3, #20
 800b4b2:	051b      	lsls	r3, r3, #20
 800b4b4:	b183      	cbz	r3, 800b4d8 <_dtoa_r+0x900>
 800b4b6:	9b04      	ldr	r3, [sp, #16]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	9305      	str	r3, [sp, #20]
 800b4c2:	f04f 0801 	mov.w	r8, #1
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f47f af6a 	bne.w	800b3a2 <_dtoa_r+0x7ca>
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e76f      	b.n	800b3b2 <_dtoa_r+0x7da>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	e7f6      	b.n	800b4c6 <_dtoa_r+0x8ee>
 800b4d8:	4698      	mov	r8, r3
 800b4da:	e7f4      	b.n	800b4c6 <_dtoa_r+0x8ee>
 800b4dc:	f43f af7d 	beq.w	800b3da <_dtoa_r+0x802>
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	301c      	adds	r0, #28
 800b4e4:	e772      	b.n	800b3cc <_dtoa_r+0x7f4>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dc37      	bgt.n	800b55c <_dtoa_r+0x984>
 800b4ec:	9b06      	ldr	r3, [sp, #24]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dd34      	ble.n	800b55c <_dtoa_r+0x984>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	9302      	str	r3, [sp, #8]
 800b4f6:	9b02      	ldr	r3, [sp, #8]
 800b4f8:	b96b      	cbnz	r3, 800b516 <_dtoa_r+0x93e>
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	4620      	mov	r0, r4
 800b500:	f000 fd56 	bl	800bfb0 <__multadd>
 800b504:	4601      	mov	r1, r0
 800b506:	4606      	mov	r6, r0
 800b508:	ee18 0a10 	vmov	r0, s16
 800b50c:	f000 ffba 	bl	800c484 <__mcmp>
 800b510:	2800      	cmp	r0, #0
 800b512:	f73f adbb 	bgt.w	800b08c <_dtoa_r+0x4b4>
 800b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b518:	9d01      	ldr	r5, [sp, #4]
 800b51a:	43db      	mvns	r3, r3
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	f04f 0800 	mov.w	r8, #0
 800b522:	4631      	mov	r1, r6
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fd21 	bl	800bf6c <_Bfree>
 800b52a:	2f00      	cmp	r7, #0
 800b52c:	f43f aea4 	beq.w	800b278 <_dtoa_r+0x6a0>
 800b530:	f1b8 0f00 	cmp.w	r8, #0
 800b534:	d005      	beq.n	800b542 <_dtoa_r+0x96a>
 800b536:	45b8      	cmp	r8, r7
 800b538:	d003      	beq.n	800b542 <_dtoa_r+0x96a>
 800b53a:	4641      	mov	r1, r8
 800b53c:	4620      	mov	r0, r4
 800b53e:	f000 fd15 	bl	800bf6c <_Bfree>
 800b542:	4639      	mov	r1, r7
 800b544:	4620      	mov	r0, r4
 800b546:	f000 fd11 	bl	800bf6c <_Bfree>
 800b54a:	e695      	b.n	800b278 <_dtoa_r+0x6a0>
 800b54c:	2600      	movs	r6, #0
 800b54e:	4637      	mov	r7, r6
 800b550:	e7e1      	b.n	800b516 <_dtoa_r+0x93e>
 800b552:	9700      	str	r7, [sp, #0]
 800b554:	4637      	mov	r7, r6
 800b556:	e599      	b.n	800b08c <_dtoa_r+0x4b4>
 800b558:	40240000 	.word	0x40240000
 800b55c:	9b08      	ldr	r3, [sp, #32]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80ca 	beq.w	800b6f8 <_dtoa_r+0xb20>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	9302      	str	r3, [sp, #8]
 800b568:	2d00      	cmp	r5, #0
 800b56a:	dd05      	ble.n	800b578 <_dtoa_r+0x9a0>
 800b56c:	4639      	mov	r1, r7
 800b56e:	462a      	mov	r2, r5
 800b570:	4620      	mov	r0, r4
 800b572:	f000 ff17 	bl	800c3a4 <__lshift>
 800b576:	4607      	mov	r7, r0
 800b578:	f1b8 0f00 	cmp.w	r8, #0
 800b57c:	d05b      	beq.n	800b636 <_dtoa_r+0xa5e>
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4620      	mov	r0, r4
 800b582:	f000 fcb3 	bl	800beec <_Balloc>
 800b586:	4605      	mov	r5, r0
 800b588:	b928      	cbnz	r0, 800b596 <_dtoa_r+0x9be>
 800b58a:	4b87      	ldr	r3, [pc, #540]	; (800b7a8 <_dtoa_r+0xbd0>)
 800b58c:	4602      	mov	r2, r0
 800b58e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b592:	f7ff bb3b 	b.w	800ac0c <_dtoa_r+0x34>
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	3202      	adds	r2, #2
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	f107 010c 	add.w	r1, r7, #12
 800b5a0:	300c      	adds	r0, #12
 800b5a2:	f000 fc95 	bl	800bed0 <memcpy>
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fefa 	bl	800c3a4 <__lshift>
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	f103 0901 	add.w	r9, r3, #1
 800b5b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	f00a 0301 	and.w	r3, sl, #1
 800b5c2:	46b8      	mov	r8, r7
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	ee18 0a10 	vmov	r0, s16
 800b5ce:	f7ff fa77 	bl	800aac0 <quorem>
 800b5d2:	4641      	mov	r1, r8
 800b5d4:	9002      	str	r0, [sp, #8]
 800b5d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b5da:	ee18 0a10 	vmov	r0, s16
 800b5de:	f000 ff51 	bl	800c484 <__mcmp>
 800b5e2:	463a      	mov	r2, r7
 800b5e4:	9003      	str	r0, [sp, #12]
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f000 ff67 	bl	800c4bc <__mdiff>
 800b5ee:	68c2      	ldr	r2, [r0, #12]
 800b5f0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	bb02      	cbnz	r2, 800b63a <_dtoa_r+0xa62>
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	ee18 0a10 	vmov	r0, s16
 800b5fe:	f000 ff41 	bl	800c484 <__mcmp>
 800b602:	4602      	mov	r2, r0
 800b604:	4629      	mov	r1, r5
 800b606:	4620      	mov	r0, r4
 800b608:	9207      	str	r2, [sp, #28]
 800b60a:	f000 fcaf 	bl	800bf6c <_Bfree>
 800b60e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b612:	ea43 0102 	orr.w	r1, r3, r2
 800b616:	9b04      	ldr	r3, [sp, #16]
 800b618:	430b      	orrs	r3, r1
 800b61a:	464d      	mov	r5, r9
 800b61c:	d10f      	bne.n	800b63e <_dtoa_r+0xa66>
 800b61e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b622:	d02a      	beq.n	800b67a <_dtoa_r+0xaa2>
 800b624:	9b03      	ldr	r3, [sp, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	dd02      	ble.n	800b630 <_dtoa_r+0xa58>
 800b62a:	9b02      	ldr	r3, [sp, #8]
 800b62c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b630:	f88b a000 	strb.w	sl, [fp]
 800b634:	e775      	b.n	800b522 <_dtoa_r+0x94a>
 800b636:	4638      	mov	r0, r7
 800b638:	e7ba      	b.n	800b5b0 <_dtoa_r+0x9d8>
 800b63a:	2201      	movs	r2, #1
 800b63c:	e7e2      	b.n	800b604 <_dtoa_r+0xa2c>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	db04      	blt.n	800b64e <_dtoa_r+0xa76>
 800b644:	9906      	ldr	r1, [sp, #24]
 800b646:	430b      	orrs	r3, r1
 800b648:	9904      	ldr	r1, [sp, #16]
 800b64a:	430b      	orrs	r3, r1
 800b64c:	d122      	bne.n	800b694 <_dtoa_r+0xabc>
 800b64e:	2a00      	cmp	r2, #0
 800b650:	ddee      	ble.n	800b630 <_dtoa_r+0xa58>
 800b652:	ee18 1a10 	vmov	r1, s16
 800b656:	2201      	movs	r2, #1
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 fea3 	bl	800c3a4 <__lshift>
 800b65e:	4631      	mov	r1, r6
 800b660:	ee08 0a10 	vmov	s16, r0
 800b664:	f000 ff0e 	bl	800c484 <__mcmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	dc03      	bgt.n	800b674 <_dtoa_r+0xa9c>
 800b66c:	d1e0      	bne.n	800b630 <_dtoa_r+0xa58>
 800b66e:	f01a 0f01 	tst.w	sl, #1
 800b672:	d0dd      	beq.n	800b630 <_dtoa_r+0xa58>
 800b674:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b678:	d1d7      	bne.n	800b62a <_dtoa_r+0xa52>
 800b67a:	2339      	movs	r3, #57	; 0x39
 800b67c:	f88b 3000 	strb.w	r3, [fp]
 800b680:	462b      	mov	r3, r5
 800b682:	461d      	mov	r5, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b68a:	2a39      	cmp	r2, #57	; 0x39
 800b68c:	d071      	beq.n	800b772 <_dtoa_r+0xb9a>
 800b68e:	3201      	adds	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e746      	b.n	800b522 <_dtoa_r+0x94a>
 800b694:	2a00      	cmp	r2, #0
 800b696:	dd07      	ble.n	800b6a8 <_dtoa_r+0xad0>
 800b698:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b69c:	d0ed      	beq.n	800b67a <_dtoa_r+0xaa2>
 800b69e:	f10a 0301 	add.w	r3, sl, #1
 800b6a2:	f88b 3000 	strb.w	r3, [fp]
 800b6a6:	e73c      	b.n	800b522 <_dtoa_r+0x94a>
 800b6a8:	9b05      	ldr	r3, [sp, #20]
 800b6aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b6ae:	4599      	cmp	r9, r3
 800b6b0:	d047      	beq.n	800b742 <_dtoa_r+0xb6a>
 800b6b2:	ee18 1a10 	vmov	r1, s16
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	220a      	movs	r2, #10
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f000 fc78 	bl	800bfb0 <__multadd>
 800b6c0:	45b8      	cmp	r8, r7
 800b6c2:	ee08 0a10 	vmov	s16, r0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	f04f 020a 	mov.w	r2, #10
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	d106      	bne.n	800b6e2 <_dtoa_r+0xb0a>
 800b6d4:	f000 fc6c 	bl	800bfb0 <__multadd>
 800b6d8:	4680      	mov	r8, r0
 800b6da:	4607      	mov	r7, r0
 800b6dc:	f109 0901 	add.w	r9, r9, #1
 800b6e0:	e772      	b.n	800b5c8 <_dtoa_r+0x9f0>
 800b6e2:	f000 fc65 	bl	800bfb0 <__multadd>
 800b6e6:	4639      	mov	r1, r7
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	220a      	movs	r2, #10
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fc5e 	bl	800bfb0 <__multadd>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	e7f1      	b.n	800b6dc <_dtoa_r+0xb04>
 800b6f8:	9b03      	ldr	r3, [sp, #12]
 800b6fa:	9302      	str	r3, [sp, #8]
 800b6fc:	9d01      	ldr	r5, [sp, #4]
 800b6fe:	ee18 0a10 	vmov	r0, s16
 800b702:	4631      	mov	r1, r6
 800b704:	f7ff f9dc 	bl	800aac0 <quorem>
 800b708:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b70c:	9b01      	ldr	r3, [sp, #4]
 800b70e:	f805 ab01 	strb.w	sl, [r5], #1
 800b712:	1aea      	subs	r2, r5, r3
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	4293      	cmp	r3, r2
 800b718:	dd09      	ble.n	800b72e <_dtoa_r+0xb56>
 800b71a:	ee18 1a10 	vmov	r1, s16
 800b71e:	2300      	movs	r3, #0
 800b720:	220a      	movs	r2, #10
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fc44 	bl	800bfb0 <__multadd>
 800b728:	ee08 0a10 	vmov	s16, r0
 800b72c:	e7e7      	b.n	800b6fe <_dtoa_r+0xb26>
 800b72e:	9b02      	ldr	r3, [sp, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfc8      	it	gt
 800b734:	461d      	movgt	r5, r3
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	bfd8      	it	le
 800b73a:	2501      	movle	r5, #1
 800b73c:	441d      	add	r5, r3
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	ee18 1a10 	vmov	r1, s16
 800b746:	2201      	movs	r2, #1
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 fe2b 	bl	800c3a4 <__lshift>
 800b74e:	4631      	mov	r1, r6
 800b750:	ee08 0a10 	vmov	s16, r0
 800b754:	f000 fe96 	bl	800c484 <__mcmp>
 800b758:	2800      	cmp	r0, #0
 800b75a:	dc91      	bgt.n	800b680 <_dtoa_r+0xaa8>
 800b75c:	d102      	bne.n	800b764 <_dtoa_r+0xb8c>
 800b75e:	f01a 0f01 	tst.w	sl, #1
 800b762:	d18d      	bne.n	800b680 <_dtoa_r+0xaa8>
 800b764:	462b      	mov	r3, r5
 800b766:	461d      	mov	r5, r3
 800b768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b76c:	2a30      	cmp	r2, #48	; 0x30
 800b76e:	d0fa      	beq.n	800b766 <_dtoa_r+0xb8e>
 800b770:	e6d7      	b.n	800b522 <_dtoa_r+0x94a>
 800b772:	9a01      	ldr	r2, [sp, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d184      	bne.n	800b682 <_dtoa_r+0xaaa>
 800b778:	9b00      	ldr	r3, [sp, #0]
 800b77a:	3301      	adds	r3, #1
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	2331      	movs	r3, #49	; 0x31
 800b780:	7013      	strb	r3, [r2, #0]
 800b782:	e6ce      	b.n	800b522 <_dtoa_r+0x94a>
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <_dtoa_r+0xbd4>)
 800b786:	f7ff ba95 	b.w	800acb4 <_dtoa_r+0xdc>
 800b78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f47f aa6e 	bne.w	800ac6e <_dtoa_r+0x96>
 800b792:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <_dtoa_r+0xbd8>)
 800b794:	f7ff ba8e 	b.w	800acb4 <_dtoa_r+0xdc>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dcae      	bgt.n	800b6fc <_dtoa_r+0xb24>
 800b79e:	9b06      	ldr	r3, [sp, #24]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	f73f aea8 	bgt.w	800b4f6 <_dtoa_r+0x91e>
 800b7a6:	e7a9      	b.n	800b6fc <_dtoa_r+0xb24>
 800b7a8:	0800ec58 	.word	0x0800ec58
 800b7ac:	0800ea5c 	.word	0x0800ea5c
 800b7b0:	0800ebd9 	.word	0x0800ebd9

0800b7b4 <rshift>:
 800b7b4:	6903      	ldr	r3, [r0, #16]
 800b7b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7c2:	f100 0414 	add.w	r4, r0, #20
 800b7c6:	dd45      	ble.n	800b854 <rshift+0xa0>
 800b7c8:	f011 011f 	ands.w	r1, r1, #31
 800b7cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7d4:	d10c      	bne.n	800b7f0 <rshift+0x3c>
 800b7d6:	f100 0710 	add.w	r7, r0, #16
 800b7da:	4629      	mov	r1, r5
 800b7dc:	42b1      	cmp	r1, r6
 800b7de:	d334      	bcc.n	800b84a <rshift+0x96>
 800b7e0:	1a9b      	subs	r3, r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	1eea      	subs	r2, r5, #3
 800b7e6:	4296      	cmp	r6, r2
 800b7e8:	bf38      	it	cc
 800b7ea:	2300      	movcc	r3, #0
 800b7ec:	4423      	add	r3, r4
 800b7ee:	e015      	b.n	800b81c <rshift+0x68>
 800b7f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7f4:	f1c1 0820 	rsb	r8, r1, #32
 800b7f8:	40cf      	lsrs	r7, r1
 800b7fa:	f105 0e04 	add.w	lr, r5, #4
 800b7fe:	46a1      	mov	r9, r4
 800b800:	4576      	cmp	r6, lr
 800b802:	46f4      	mov	ip, lr
 800b804:	d815      	bhi.n	800b832 <rshift+0x7e>
 800b806:	1a9a      	subs	r2, r3, r2
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	3a04      	subs	r2, #4
 800b80c:	3501      	adds	r5, #1
 800b80e:	42ae      	cmp	r6, r5
 800b810:	bf38      	it	cc
 800b812:	2200      	movcc	r2, #0
 800b814:	18a3      	adds	r3, r4, r2
 800b816:	50a7      	str	r7, [r4, r2]
 800b818:	b107      	cbz	r7, 800b81c <rshift+0x68>
 800b81a:	3304      	adds	r3, #4
 800b81c:	1b1a      	subs	r2, r3, r4
 800b81e:	42a3      	cmp	r3, r4
 800b820:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b824:	bf08      	it	eq
 800b826:	2300      	moveq	r3, #0
 800b828:	6102      	str	r2, [r0, #16]
 800b82a:	bf08      	it	eq
 800b82c:	6143      	streq	r3, [r0, #20]
 800b82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b832:	f8dc c000 	ldr.w	ip, [ip]
 800b836:	fa0c fc08 	lsl.w	ip, ip, r8
 800b83a:	ea4c 0707 	orr.w	r7, ip, r7
 800b83e:	f849 7b04 	str.w	r7, [r9], #4
 800b842:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b846:	40cf      	lsrs	r7, r1
 800b848:	e7da      	b.n	800b800 <rshift+0x4c>
 800b84a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b84e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b852:	e7c3      	b.n	800b7dc <rshift+0x28>
 800b854:	4623      	mov	r3, r4
 800b856:	e7e1      	b.n	800b81c <rshift+0x68>

0800b858 <__hexdig_fun>:
 800b858:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b85c:	2b09      	cmp	r3, #9
 800b85e:	d802      	bhi.n	800b866 <__hexdig_fun+0xe>
 800b860:	3820      	subs	r0, #32
 800b862:	b2c0      	uxtb	r0, r0
 800b864:	4770      	bx	lr
 800b866:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b86a:	2b05      	cmp	r3, #5
 800b86c:	d801      	bhi.n	800b872 <__hexdig_fun+0x1a>
 800b86e:	3847      	subs	r0, #71	; 0x47
 800b870:	e7f7      	b.n	800b862 <__hexdig_fun+0xa>
 800b872:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b876:	2b05      	cmp	r3, #5
 800b878:	d801      	bhi.n	800b87e <__hexdig_fun+0x26>
 800b87a:	3827      	subs	r0, #39	; 0x27
 800b87c:	e7f1      	b.n	800b862 <__hexdig_fun+0xa>
 800b87e:	2000      	movs	r0, #0
 800b880:	4770      	bx	lr
	...

0800b884 <__gethex>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	ed2d 8b02 	vpush	{d8}
 800b88c:	b089      	sub	sp, #36	; 0x24
 800b88e:	ee08 0a10 	vmov	s16, r0
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	4bb4      	ldr	r3, [pc, #720]	; (800bb68 <__gethex+0x2e4>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	4618      	mov	r0, r3
 800b89c:	468b      	mov	fp, r1
 800b89e:	4690      	mov	r8, r2
 800b8a0:	f7f4 fc96 	bl	80001d0 <strlen>
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	f8db 2000 	ldr.w	r2, [fp]
 800b8aa:	4403      	add	r3, r0
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	1c93      	adds	r3, r2, #2
 800b8b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8be:	32fe      	adds	r2, #254	; 0xfe
 800b8c0:	18d1      	adds	r1, r2, r3
 800b8c2:	461f      	mov	r7, r3
 800b8c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8c8:	9100      	str	r1, [sp, #0]
 800b8ca:	2830      	cmp	r0, #48	; 0x30
 800b8cc:	d0f8      	beq.n	800b8c0 <__gethex+0x3c>
 800b8ce:	f7ff ffc3 	bl	800b858 <__hexdig_fun>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d13a      	bne.n	800b94e <__gethex+0xca>
 800b8d8:	9901      	ldr	r1, [sp, #4]
 800b8da:	4652      	mov	r2, sl
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f001 fa33 	bl	800cd48 <strncmp>
 800b8e2:	4605      	mov	r5, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d168      	bne.n	800b9ba <__gethex+0x136>
 800b8e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b8ec:	eb07 060a 	add.w	r6, r7, sl
 800b8f0:	f7ff ffb2 	bl	800b858 <__hexdig_fun>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d062      	beq.n	800b9be <__gethex+0x13a>
 800b8f8:	4633      	mov	r3, r6
 800b8fa:	7818      	ldrb	r0, [r3, #0]
 800b8fc:	2830      	cmp	r0, #48	; 0x30
 800b8fe:	461f      	mov	r7, r3
 800b900:	f103 0301 	add.w	r3, r3, #1
 800b904:	d0f9      	beq.n	800b8fa <__gethex+0x76>
 800b906:	f7ff ffa7 	bl	800b858 <__hexdig_fun>
 800b90a:	2301      	movs	r3, #1
 800b90c:	fab0 f480 	clz	r4, r0
 800b910:	0964      	lsrs	r4, r4, #5
 800b912:	4635      	mov	r5, r6
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	463a      	mov	r2, r7
 800b918:	4616      	mov	r6, r2
 800b91a:	3201      	adds	r2, #1
 800b91c:	7830      	ldrb	r0, [r6, #0]
 800b91e:	f7ff ff9b 	bl	800b858 <__hexdig_fun>
 800b922:	2800      	cmp	r0, #0
 800b924:	d1f8      	bne.n	800b918 <__gethex+0x94>
 800b926:	9901      	ldr	r1, [sp, #4]
 800b928:	4652      	mov	r2, sl
 800b92a:	4630      	mov	r0, r6
 800b92c:	f001 fa0c 	bl	800cd48 <strncmp>
 800b930:	b980      	cbnz	r0, 800b954 <__gethex+0xd0>
 800b932:	b94d      	cbnz	r5, 800b948 <__gethex+0xc4>
 800b934:	eb06 050a 	add.w	r5, r6, sl
 800b938:	462a      	mov	r2, r5
 800b93a:	4616      	mov	r6, r2
 800b93c:	3201      	adds	r2, #1
 800b93e:	7830      	ldrb	r0, [r6, #0]
 800b940:	f7ff ff8a 	bl	800b858 <__hexdig_fun>
 800b944:	2800      	cmp	r0, #0
 800b946:	d1f8      	bne.n	800b93a <__gethex+0xb6>
 800b948:	1bad      	subs	r5, r5, r6
 800b94a:	00ad      	lsls	r5, r5, #2
 800b94c:	e004      	b.n	800b958 <__gethex+0xd4>
 800b94e:	2400      	movs	r4, #0
 800b950:	4625      	mov	r5, r4
 800b952:	e7e0      	b.n	800b916 <__gethex+0x92>
 800b954:	2d00      	cmp	r5, #0
 800b956:	d1f7      	bne.n	800b948 <__gethex+0xc4>
 800b958:	7833      	ldrb	r3, [r6, #0]
 800b95a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b95e:	2b50      	cmp	r3, #80	; 0x50
 800b960:	d13b      	bne.n	800b9da <__gethex+0x156>
 800b962:	7873      	ldrb	r3, [r6, #1]
 800b964:	2b2b      	cmp	r3, #43	; 0x2b
 800b966:	d02c      	beq.n	800b9c2 <__gethex+0x13e>
 800b968:	2b2d      	cmp	r3, #45	; 0x2d
 800b96a:	d02e      	beq.n	800b9ca <__gethex+0x146>
 800b96c:	1c71      	adds	r1, r6, #1
 800b96e:	f04f 0900 	mov.w	r9, #0
 800b972:	7808      	ldrb	r0, [r1, #0]
 800b974:	f7ff ff70 	bl	800b858 <__hexdig_fun>
 800b978:	1e43      	subs	r3, r0, #1
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b18      	cmp	r3, #24
 800b97e:	d82c      	bhi.n	800b9da <__gethex+0x156>
 800b980:	f1a0 0210 	sub.w	r2, r0, #16
 800b984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b988:	f7ff ff66 	bl	800b858 <__hexdig_fun>
 800b98c:	1e43      	subs	r3, r0, #1
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b18      	cmp	r3, #24
 800b992:	d91d      	bls.n	800b9d0 <__gethex+0x14c>
 800b994:	f1b9 0f00 	cmp.w	r9, #0
 800b998:	d000      	beq.n	800b99c <__gethex+0x118>
 800b99a:	4252      	negs	r2, r2
 800b99c:	4415      	add	r5, r2
 800b99e:	f8cb 1000 	str.w	r1, [fp]
 800b9a2:	b1e4      	cbz	r4, 800b9de <__gethex+0x15a>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	bf14      	ite	ne
 800b9aa:	2700      	movne	r7, #0
 800b9ac:	2706      	moveq	r7, #6
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	b009      	add	sp, #36	; 0x24
 800b9b2:	ecbd 8b02 	vpop	{d8}
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	463e      	mov	r6, r7
 800b9bc:	4625      	mov	r5, r4
 800b9be:	2401      	movs	r4, #1
 800b9c0:	e7ca      	b.n	800b958 <__gethex+0xd4>
 800b9c2:	f04f 0900 	mov.w	r9, #0
 800b9c6:	1cb1      	adds	r1, r6, #2
 800b9c8:	e7d3      	b.n	800b972 <__gethex+0xee>
 800b9ca:	f04f 0901 	mov.w	r9, #1
 800b9ce:	e7fa      	b.n	800b9c6 <__gethex+0x142>
 800b9d0:	230a      	movs	r3, #10
 800b9d2:	fb03 0202 	mla	r2, r3, r2, r0
 800b9d6:	3a10      	subs	r2, #16
 800b9d8:	e7d4      	b.n	800b984 <__gethex+0x100>
 800b9da:	4631      	mov	r1, r6
 800b9dc:	e7df      	b.n	800b99e <__gethex+0x11a>
 800b9de:	1bf3      	subs	r3, r6, r7
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	2b07      	cmp	r3, #7
 800b9e6:	dc0b      	bgt.n	800ba00 <__gethex+0x17c>
 800b9e8:	ee18 0a10 	vmov	r0, s16
 800b9ec:	f000 fa7e 	bl	800beec <_Balloc>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b940      	cbnz	r0, 800ba06 <__gethex+0x182>
 800b9f4:	4b5d      	ldr	r3, [pc, #372]	; (800bb6c <__gethex+0x2e8>)
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	21de      	movs	r1, #222	; 0xde
 800b9fa:	485d      	ldr	r0, [pc, #372]	; (800bb70 <__gethex+0x2ec>)
 800b9fc:	f001 f9c6 	bl	800cd8c <__assert_func>
 800ba00:	3101      	adds	r1, #1
 800ba02:	105b      	asrs	r3, r3, #1
 800ba04:	e7ee      	b.n	800b9e4 <__gethex+0x160>
 800ba06:	f100 0914 	add.w	r9, r0, #20
 800ba0a:	f04f 0b00 	mov.w	fp, #0
 800ba0e:	f1ca 0301 	rsb	r3, sl, #1
 800ba12:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba16:	f8cd b000 	str.w	fp, [sp]
 800ba1a:	9306      	str	r3, [sp, #24]
 800ba1c:	42b7      	cmp	r7, r6
 800ba1e:	d340      	bcc.n	800baa2 <__gethex+0x21e>
 800ba20:	9802      	ldr	r0, [sp, #8]
 800ba22:	9b00      	ldr	r3, [sp, #0]
 800ba24:	f840 3b04 	str.w	r3, [r0], #4
 800ba28:	eba0 0009 	sub.w	r0, r0, r9
 800ba2c:	1080      	asrs	r0, r0, #2
 800ba2e:	0146      	lsls	r6, r0, #5
 800ba30:	6120      	str	r0, [r4, #16]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 fb4c 	bl	800c0d0 <__hi0bits>
 800ba38:	1a30      	subs	r0, r6, r0
 800ba3a:	f8d8 6000 	ldr.w	r6, [r8]
 800ba3e:	42b0      	cmp	r0, r6
 800ba40:	dd63      	ble.n	800bb0a <__gethex+0x286>
 800ba42:	1b87      	subs	r7, r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fef0 	bl	800c82c <__any_on>
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	b1a8      	cbz	r0, 800ba7c <__gethex+0x1f8>
 800ba50:	1e7b      	subs	r3, r7, #1
 800ba52:	1159      	asrs	r1, r3, #5
 800ba54:	f003 021f 	and.w	r2, r3, #31
 800ba58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba5c:	f04f 0a01 	mov.w	sl, #1
 800ba60:	fa0a f202 	lsl.w	r2, sl, r2
 800ba64:	420a      	tst	r2, r1
 800ba66:	d009      	beq.n	800ba7c <__gethex+0x1f8>
 800ba68:	4553      	cmp	r3, sl
 800ba6a:	dd05      	ble.n	800ba78 <__gethex+0x1f4>
 800ba6c:	1eb9      	subs	r1, r7, #2
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fedc 	bl	800c82c <__any_on>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d145      	bne.n	800bb04 <__gethex+0x280>
 800ba78:	f04f 0a02 	mov.w	sl, #2
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f7ff fe98 	bl	800b7b4 <rshift>
 800ba84:	443d      	add	r5, r7
 800ba86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba8a:	42ab      	cmp	r3, r5
 800ba8c:	da4c      	bge.n	800bb28 <__gethex+0x2a4>
 800ba8e:	ee18 0a10 	vmov	r0, s16
 800ba92:	4621      	mov	r1, r4
 800ba94:	f000 fa6a 	bl	800bf6c <_Bfree>
 800ba98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	27a3      	movs	r7, #163	; 0xa3
 800baa0:	e785      	b.n	800b9ae <__gethex+0x12a>
 800baa2:	1e73      	subs	r3, r6, #1
 800baa4:	9a05      	ldr	r2, [sp, #20]
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800baac:	4293      	cmp	r3, r2
 800baae:	d019      	beq.n	800bae4 <__gethex+0x260>
 800bab0:	f1bb 0f20 	cmp.w	fp, #32
 800bab4:	d107      	bne.n	800bac6 <__gethex+0x242>
 800bab6:	9b02      	ldr	r3, [sp, #8]
 800bab8:	9a00      	ldr	r2, [sp, #0]
 800baba:	f843 2b04 	str.w	r2, [r3], #4
 800babe:	9302      	str	r3, [sp, #8]
 800bac0:	2300      	movs	r3, #0
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	469b      	mov	fp, r3
 800bac6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800baca:	f7ff fec5 	bl	800b858 <__hexdig_fun>
 800bace:	9b00      	ldr	r3, [sp, #0]
 800bad0:	f000 000f 	and.w	r0, r0, #15
 800bad4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bad8:	4303      	orrs	r3, r0
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	f10b 0b04 	add.w	fp, fp, #4
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	e00d      	b.n	800bb00 <__gethex+0x27c>
 800bae4:	9b03      	ldr	r3, [sp, #12]
 800bae6:	9a06      	ldr	r2, [sp, #24]
 800bae8:	4413      	add	r3, r2
 800baea:	42bb      	cmp	r3, r7
 800baec:	d3e0      	bcc.n	800bab0 <__gethex+0x22c>
 800baee:	4618      	mov	r0, r3
 800baf0:	9901      	ldr	r1, [sp, #4]
 800baf2:	9307      	str	r3, [sp, #28]
 800baf4:	4652      	mov	r2, sl
 800baf6:	f001 f927 	bl	800cd48 <strncmp>
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d1d7      	bne.n	800bab0 <__gethex+0x22c>
 800bb00:	461e      	mov	r6, r3
 800bb02:	e78b      	b.n	800ba1c <__gethex+0x198>
 800bb04:	f04f 0a03 	mov.w	sl, #3
 800bb08:	e7b8      	b.n	800ba7c <__gethex+0x1f8>
 800bb0a:	da0a      	bge.n	800bb22 <__gethex+0x29e>
 800bb0c:	1a37      	subs	r7, r6, r0
 800bb0e:	4621      	mov	r1, r4
 800bb10:	ee18 0a10 	vmov	r0, s16
 800bb14:	463a      	mov	r2, r7
 800bb16:	f000 fc45 	bl	800c3a4 <__lshift>
 800bb1a:	1bed      	subs	r5, r5, r7
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	f100 0914 	add.w	r9, r0, #20
 800bb22:	f04f 0a00 	mov.w	sl, #0
 800bb26:	e7ae      	b.n	800ba86 <__gethex+0x202>
 800bb28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb2c:	42a8      	cmp	r0, r5
 800bb2e:	dd72      	ble.n	800bc16 <__gethex+0x392>
 800bb30:	1b45      	subs	r5, r0, r5
 800bb32:	42ae      	cmp	r6, r5
 800bb34:	dc36      	bgt.n	800bba4 <__gethex+0x320>
 800bb36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d02a      	beq.n	800bb94 <__gethex+0x310>
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d02c      	beq.n	800bb9c <__gethex+0x318>
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d11c      	bne.n	800bb80 <__gethex+0x2fc>
 800bb46:	42ae      	cmp	r6, r5
 800bb48:	d11a      	bne.n	800bb80 <__gethex+0x2fc>
 800bb4a:	2e01      	cmp	r6, #1
 800bb4c:	d112      	bne.n	800bb74 <__gethex+0x2f0>
 800bb4e:	9a04      	ldr	r2, [sp, #16]
 800bb50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb54:	6013      	str	r3, [r2, #0]
 800bb56:	2301      	movs	r3, #1
 800bb58:	6123      	str	r3, [r4, #16]
 800bb5a:	f8c9 3000 	str.w	r3, [r9]
 800bb5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb60:	2762      	movs	r7, #98	; 0x62
 800bb62:	601c      	str	r4, [r3, #0]
 800bb64:	e723      	b.n	800b9ae <__gethex+0x12a>
 800bb66:	bf00      	nop
 800bb68:	0800ecd0 	.word	0x0800ecd0
 800bb6c:	0800ec58 	.word	0x0800ec58
 800bb70:	0800ec69 	.word	0x0800ec69
 800bb74:	1e71      	subs	r1, r6, #1
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 fe58 	bl	800c82c <__any_on>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	d1e6      	bne.n	800bb4e <__gethex+0x2ca>
 800bb80:	ee18 0a10 	vmov	r0, s16
 800bb84:	4621      	mov	r1, r4
 800bb86:	f000 f9f1 	bl	800bf6c <_Bfree>
 800bb8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	2750      	movs	r7, #80	; 0x50
 800bb92:	e70c      	b.n	800b9ae <__gethex+0x12a>
 800bb94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1f2      	bne.n	800bb80 <__gethex+0x2fc>
 800bb9a:	e7d8      	b.n	800bb4e <__gethex+0x2ca>
 800bb9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d1d5      	bne.n	800bb4e <__gethex+0x2ca>
 800bba2:	e7ed      	b.n	800bb80 <__gethex+0x2fc>
 800bba4:	1e6f      	subs	r7, r5, #1
 800bba6:	f1ba 0f00 	cmp.w	sl, #0
 800bbaa:	d131      	bne.n	800bc10 <__gethex+0x38c>
 800bbac:	b127      	cbz	r7, 800bbb8 <__gethex+0x334>
 800bbae:	4639      	mov	r1, r7
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fe3b 	bl	800c82c <__any_on>
 800bbb6:	4682      	mov	sl, r0
 800bbb8:	117b      	asrs	r3, r7, #5
 800bbba:	2101      	movs	r1, #1
 800bbbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bbc0:	f007 071f 	and.w	r7, r7, #31
 800bbc4:	fa01 f707 	lsl.w	r7, r1, r7
 800bbc8:	421f      	tst	r7, r3
 800bbca:	4629      	mov	r1, r5
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bf18      	it	ne
 800bbd0:	f04a 0a02 	orrne.w	sl, sl, #2
 800bbd4:	1b76      	subs	r6, r6, r5
 800bbd6:	f7ff fded 	bl	800b7b4 <rshift>
 800bbda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbde:	2702      	movs	r7, #2
 800bbe0:	f1ba 0f00 	cmp.w	sl, #0
 800bbe4:	d048      	beq.n	800bc78 <__gethex+0x3f4>
 800bbe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d015      	beq.n	800bc1a <__gethex+0x396>
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d017      	beq.n	800bc22 <__gethex+0x39e>
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d109      	bne.n	800bc0a <__gethex+0x386>
 800bbf6:	f01a 0f02 	tst.w	sl, #2
 800bbfa:	d006      	beq.n	800bc0a <__gethex+0x386>
 800bbfc:	f8d9 0000 	ldr.w	r0, [r9]
 800bc00:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc04:	f01a 0f01 	tst.w	sl, #1
 800bc08:	d10e      	bne.n	800bc28 <__gethex+0x3a4>
 800bc0a:	f047 0710 	orr.w	r7, r7, #16
 800bc0e:	e033      	b.n	800bc78 <__gethex+0x3f4>
 800bc10:	f04f 0a01 	mov.w	sl, #1
 800bc14:	e7d0      	b.n	800bbb8 <__gethex+0x334>
 800bc16:	2701      	movs	r7, #1
 800bc18:	e7e2      	b.n	800bbe0 <__gethex+0x35c>
 800bc1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc1c:	f1c3 0301 	rsb	r3, r3, #1
 800bc20:	9315      	str	r3, [sp, #84]	; 0x54
 800bc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0f0      	beq.n	800bc0a <__gethex+0x386>
 800bc28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc2c:	f104 0314 	add.w	r3, r4, #20
 800bc30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc38:	f04f 0c00 	mov.w	ip, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc42:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc46:	d01c      	beq.n	800bc82 <__gethex+0x3fe>
 800bc48:	3201      	adds	r2, #1
 800bc4a:	6002      	str	r2, [r0, #0]
 800bc4c:	2f02      	cmp	r7, #2
 800bc4e:	f104 0314 	add.w	r3, r4, #20
 800bc52:	d13f      	bne.n	800bcd4 <__gethex+0x450>
 800bc54:	f8d8 2000 	ldr.w	r2, [r8]
 800bc58:	3a01      	subs	r2, #1
 800bc5a:	42b2      	cmp	r2, r6
 800bc5c:	d10a      	bne.n	800bc74 <__gethex+0x3f0>
 800bc5e:	1171      	asrs	r1, r6, #5
 800bc60:	2201      	movs	r2, #1
 800bc62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc66:	f006 061f 	and.w	r6, r6, #31
 800bc6a:	fa02 f606 	lsl.w	r6, r2, r6
 800bc6e:	421e      	tst	r6, r3
 800bc70:	bf18      	it	ne
 800bc72:	4617      	movne	r7, r2
 800bc74:	f047 0720 	orr.w	r7, r7, #32
 800bc78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc7a:	601c      	str	r4, [r3, #0]
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	601d      	str	r5, [r3, #0]
 800bc80:	e695      	b.n	800b9ae <__gethex+0x12a>
 800bc82:	4299      	cmp	r1, r3
 800bc84:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc88:	d8d8      	bhi.n	800bc3c <__gethex+0x3b8>
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	459b      	cmp	fp, r3
 800bc8e:	db19      	blt.n	800bcc4 <__gethex+0x440>
 800bc90:	6861      	ldr	r1, [r4, #4]
 800bc92:	ee18 0a10 	vmov	r0, s16
 800bc96:	3101      	adds	r1, #1
 800bc98:	f000 f928 	bl	800beec <_Balloc>
 800bc9c:	4681      	mov	r9, r0
 800bc9e:	b918      	cbnz	r0, 800bca8 <__gethex+0x424>
 800bca0:	4b1a      	ldr	r3, [pc, #104]	; (800bd0c <__gethex+0x488>)
 800bca2:	4602      	mov	r2, r0
 800bca4:	2184      	movs	r1, #132	; 0x84
 800bca6:	e6a8      	b.n	800b9fa <__gethex+0x176>
 800bca8:	6922      	ldr	r2, [r4, #16]
 800bcaa:	3202      	adds	r2, #2
 800bcac:	f104 010c 	add.w	r1, r4, #12
 800bcb0:	0092      	lsls	r2, r2, #2
 800bcb2:	300c      	adds	r0, #12
 800bcb4:	f000 f90c 	bl	800bed0 <memcpy>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	ee18 0a10 	vmov	r0, s16
 800bcbe:	f000 f955 	bl	800bf6c <_Bfree>
 800bcc2:	464c      	mov	r4, r9
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bccc:	6122      	str	r2, [r4, #16]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	615a      	str	r2, [r3, #20]
 800bcd2:	e7bb      	b.n	800bc4c <__gethex+0x3c8>
 800bcd4:	6922      	ldr	r2, [r4, #16]
 800bcd6:	455a      	cmp	r2, fp
 800bcd8:	dd0b      	ble.n	800bcf2 <__gethex+0x46e>
 800bcda:	2101      	movs	r1, #1
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7ff fd69 	bl	800b7b4 <rshift>
 800bce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bce6:	3501      	adds	r5, #1
 800bce8:	42ab      	cmp	r3, r5
 800bcea:	f6ff aed0 	blt.w	800ba8e <__gethex+0x20a>
 800bcee:	2701      	movs	r7, #1
 800bcf0:	e7c0      	b.n	800bc74 <__gethex+0x3f0>
 800bcf2:	f016 061f 	ands.w	r6, r6, #31
 800bcf6:	d0fa      	beq.n	800bcee <__gethex+0x46a>
 800bcf8:	4453      	add	r3, sl
 800bcfa:	f1c6 0620 	rsb	r6, r6, #32
 800bcfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd02:	f000 f9e5 	bl	800c0d0 <__hi0bits>
 800bd06:	42b0      	cmp	r0, r6
 800bd08:	dbe7      	blt.n	800bcda <__gethex+0x456>
 800bd0a:	e7f0      	b.n	800bcee <__gethex+0x46a>
 800bd0c:	0800ec58 	.word	0x0800ec58

0800bd10 <L_shift>:
 800bd10:	f1c2 0208 	rsb	r2, r2, #8
 800bd14:	0092      	lsls	r2, r2, #2
 800bd16:	b570      	push	{r4, r5, r6, lr}
 800bd18:	f1c2 0620 	rsb	r6, r2, #32
 800bd1c:	6843      	ldr	r3, [r0, #4]
 800bd1e:	6804      	ldr	r4, [r0, #0]
 800bd20:	fa03 f506 	lsl.w	r5, r3, r6
 800bd24:	432c      	orrs	r4, r5
 800bd26:	40d3      	lsrs	r3, r2
 800bd28:	6004      	str	r4, [r0, #0]
 800bd2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd2e:	4288      	cmp	r0, r1
 800bd30:	d3f4      	bcc.n	800bd1c <L_shift+0xc>
 800bd32:	bd70      	pop	{r4, r5, r6, pc}

0800bd34 <__match>:
 800bd34:	b530      	push	{r4, r5, lr}
 800bd36:	6803      	ldr	r3, [r0, #0]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd3e:	b914      	cbnz	r4, 800bd46 <__match+0x12>
 800bd40:	6003      	str	r3, [r0, #0]
 800bd42:	2001      	movs	r0, #1
 800bd44:	bd30      	pop	{r4, r5, pc}
 800bd46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd4e:	2d19      	cmp	r5, #25
 800bd50:	bf98      	it	ls
 800bd52:	3220      	addls	r2, #32
 800bd54:	42a2      	cmp	r2, r4
 800bd56:	d0f0      	beq.n	800bd3a <__match+0x6>
 800bd58:	2000      	movs	r0, #0
 800bd5a:	e7f3      	b.n	800bd44 <__match+0x10>

0800bd5c <__hexnan>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	680b      	ldr	r3, [r1, #0]
 800bd62:	115e      	asrs	r6, r3, #5
 800bd64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd68:	f013 031f 	ands.w	r3, r3, #31
 800bd6c:	b087      	sub	sp, #28
 800bd6e:	bf18      	it	ne
 800bd70:	3604      	addne	r6, #4
 800bd72:	2500      	movs	r5, #0
 800bd74:	1f37      	subs	r7, r6, #4
 800bd76:	4690      	mov	r8, r2
 800bd78:	6802      	ldr	r2, [r0, #0]
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd82:	46b9      	mov	r9, r7
 800bd84:	463c      	mov	r4, r7
 800bd86:	9502      	str	r5, [sp, #8]
 800bd88:	46ab      	mov	fp, r5
 800bd8a:	7851      	ldrb	r1, [r2, #1]
 800bd8c:	1c53      	adds	r3, r2, #1
 800bd8e:	9303      	str	r3, [sp, #12]
 800bd90:	b341      	cbz	r1, 800bde4 <__hexnan+0x88>
 800bd92:	4608      	mov	r0, r1
 800bd94:	9205      	str	r2, [sp, #20]
 800bd96:	9104      	str	r1, [sp, #16]
 800bd98:	f7ff fd5e 	bl	800b858 <__hexdig_fun>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d14f      	bne.n	800be40 <__hexnan+0xe4>
 800bda0:	9904      	ldr	r1, [sp, #16]
 800bda2:	9a05      	ldr	r2, [sp, #20]
 800bda4:	2920      	cmp	r1, #32
 800bda6:	d818      	bhi.n	800bdda <__hexnan+0x7e>
 800bda8:	9b02      	ldr	r3, [sp, #8]
 800bdaa:	459b      	cmp	fp, r3
 800bdac:	dd13      	ble.n	800bdd6 <__hexnan+0x7a>
 800bdae:	454c      	cmp	r4, r9
 800bdb0:	d206      	bcs.n	800bdc0 <__hexnan+0x64>
 800bdb2:	2d07      	cmp	r5, #7
 800bdb4:	dc04      	bgt.n	800bdc0 <__hexnan+0x64>
 800bdb6:	462a      	mov	r2, r5
 800bdb8:	4649      	mov	r1, r9
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7ff ffa8 	bl	800bd10 <L_shift>
 800bdc0:	4544      	cmp	r4, r8
 800bdc2:	d950      	bls.n	800be66 <__hexnan+0x10a>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f1a4 0904 	sub.w	r9, r4, #4
 800bdca:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdce:	f8cd b008 	str.w	fp, [sp, #8]
 800bdd2:	464c      	mov	r4, r9
 800bdd4:	461d      	mov	r5, r3
 800bdd6:	9a03      	ldr	r2, [sp, #12]
 800bdd8:	e7d7      	b.n	800bd8a <__hexnan+0x2e>
 800bdda:	2929      	cmp	r1, #41	; 0x29
 800bddc:	d156      	bne.n	800be8c <__hexnan+0x130>
 800bdde:	3202      	adds	r2, #2
 800bde0:	f8ca 2000 	str.w	r2, [sl]
 800bde4:	f1bb 0f00 	cmp.w	fp, #0
 800bde8:	d050      	beq.n	800be8c <__hexnan+0x130>
 800bdea:	454c      	cmp	r4, r9
 800bdec:	d206      	bcs.n	800bdfc <__hexnan+0xa0>
 800bdee:	2d07      	cmp	r5, #7
 800bdf0:	dc04      	bgt.n	800bdfc <__hexnan+0xa0>
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f7ff ff8a 	bl	800bd10 <L_shift>
 800bdfc:	4544      	cmp	r4, r8
 800bdfe:	d934      	bls.n	800be6a <__hexnan+0x10e>
 800be00:	f1a8 0204 	sub.w	r2, r8, #4
 800be04:	4623      	mov	r3, r4
 800be06:	f853 1b04 	ldr.w	r1, [r3], #4
 800be0a:	f842 1f04 	str.w	r1, [r2, #4]!
 800be0e:	429f      	cmp	r7, r3
 800be10:	d2f9      	bcs.n	800be06 <__hexnan+0xaa>
 800be12:	1b3b      	subs	r3, r7, r4
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	3304      	adds	r3, #4
 800be1a:	3401      	adds	r4, #1
 800be1c:	3e03      	subs	r6, #3
 800be1e:	42b4      	cmp	r4, r6
 800be20:	bf88      	it	hi
 800be22:	2304      	movhi	r3, #4
 800be24:	4443      	add	r3, r8
 800be26:	2200      	movs	r2, #0
 800be28:	f843 2b04 	str.w	r2, [r3], #4
 800be2c:	429f      	cmp	r7, r3
 800be2e:	d2fb      	bcs.n	800be28 <__hexnan+0xcc>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	b91b      	cbnz	r3, 800be3c <__hexnan+0xe0>
 800be34:	4547      	cmp	r7, r8
 800be36:	d127      	bne.n	800be88 <__hexnan+0x12c>
 800be38:	2301      	movs	r3, #1
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	2005      	movs	r0, #5
 800be3e:	e026      	b.n	800be8e <__hexnan+0x132>
 800be40:	3501      	adds	r5, #1
 800be42:	2d08      	cmp	r5, #8
 800be44:	f10b 0b01 	add.w	fp, fp, #1
 800be48:	dd06      	ble.n	800be58 <__hexnan+0xfc>
 800be4a:	4544      	cmp	r4, r8
 800be4c:	d9c3      	bls.n	800bdd6 <__hexnan+0x7a>
 800be4e:	2300      	movs	r3, #0
 800be50:	f844 3c04 	str.w	r3, [r4, #-4]
 800be54:	2501      	movs	r5, #1
 800be56:	3c04      	subs	r4, #4
 800be58:	6822      	ldr	r2, [r4, #0]
 800be5a:	f000 000f 	and.w	r0, r0, #15
 800be5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	e7b7      	b.n	800bdd6 <__hexnan+0x7a>
 800be66:	2508      	movs	r5, #8
 800be68:	e7b5      	b.n	800bdd6 <__hexnan+0x7a>
 800be6a:	9b01      	ldr	r3, [sp, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0df      	beq.n	800be30 <__hexnan+0xd4>
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	f1c3 0320 	rsb	r3, r3, #32
 800be78:	fa22 f303 	lsr.w	r3, r2, r3
 800be7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be80:	401a      	ands	r2, r3
 800be82:	f846 2c04 	str.w	r2, [r6, #-4]
 800be86:	e7d3      	b.n	800be30 <__hexnan+0xd4>
 800be88:	3f04      	subs	r7, #4
 800be8a:	e7d1      	b.n	800be30 <__hexnan+0xd4>
 800be8c:	2004      	movs	r0, #4
 800be8e:	b007      	add	sp, #28
 800be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be94 <_localeconv_r>:
 800be94:	4800      	ldr	r0, [pc, #0]	; (800be98 <_localeconv_r+0x4>)
 800be96:	4770      	bx	lr
 800be98:	20000260 	.word	0x20000260

0800be9c <malloc>:
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <malloc+0xc>)
 800be9e:	4601      	mov	r1, r0
 800bea0:	6818      	ldr	r0, [r3, #0]
 800bea2:	f000 bd67 	b.w	800c974 <_malloc_r>
 800bea6:	bf00      	nop
 800bea8:	20000108 	.word	0x20000108

0800beac <__ascii_mbtowc>:
 800beac:	b082      	sub	sp, #8
 800beae:	b901      	cbnz	r1, 800beb2 <__ascii_mbtowc+0x6>
 800beb0:	a901      	add	r1, sp, #4
 800beb2:	b142      	cbz	r2, 800bec6 <__ascii_mbtowc+0x1a>
 800beb4:	b14b      	cbz	r3, 800beca <__ascii_mbtowc+0x1e>
 800beb6:	7813      	ldrb	r3, [r2, #0]
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	7812      	ldrb	r2, [r2, #0]
 800bebc:	1e10      	subs	r0, r2, #0
 800bebe:	bf18      	it	ne
 800bec0:	2001      	movne	r0, #1
 800bec2:	b002      	add	sp, #8
 800bec4:	4770      	bx	lr
 800bec6:	4610      	mov	r0, r2
 800bec8:	e7fb      	b.n	800bec2 <__ascii_mbtowc+0x16>
 800beca:	f06f 0001 	mvn.w	r0, #1
 800bece:	e7f8      	b.n	800bec2 <__ascii_mbtowc+0x16>

0800bed0 <memcpy>:
 800bed0:	440a      	add	r2, r1
 800bed2:	4291      	cmp	r1, r2
 800bed4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed8:	d100      	bne.n	800bedc <memcpy+0xc>
 800beda:	4770      	bx	lr
 800bedc:	b510      	push	{r4, lr}
 800bede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee6:	4291      	cmp	r1, r2
 800bee8:	d1f9      	bne.n	800bede <memcpy+0xe>
 800beea:	bd10      	pop	{r4, pc}

0800beec <_Balloc>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef0:	4604      	mov	r4, r0
 800bef2:	460d      	mov	r5, r1
 800bef4:	b976      	cbnz	r6, 800bf14 <_Balloc+0x28>
 800bef6:	2010      	movs	r0, #16
 800bef8:	f7ff ffd0 	bl	800be9c <malloc>
 800befc:	4602      	mov	r2, r0
 800befe:	6260      	str	r0, [r4, #36]	; 0x24
 800bf00:	b920      	cbnz	r0, 800bf0c <_Balloc+0x20>
 800bf02:	4b18      	ldr	r3, [pc, #96]	; (800bf64 <_Balloc+0x78>)
 800bf04:	4818      	ldr	r0, [pc, #96]	; (800bf68 <_Balloc+0x7c>)
 800bf06:	2166      	movs	r1, #102	; 0x66
 800bf08:	f000 ff40 	bl	800cd8c <__assert_func>
 800bf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf10:	6006      	str	r6, [r0, #0]
 800bf12:	60c6      	str	r6, [r0, #12]
 800bf14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf16:	68f3      	ldr	r3, [r6, #12]
 800bf18:	b183      	cbz	r3, 800bf3c <_Balloc+0x50>
 800bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf22:	b9b8      	cbnz	r0, 800bf54 <_Balloc+0x68>
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2a:	1d72      	adds	r2, r6, #5
 800bf2c:	0092      	lsls	r2, r2, #2
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 fc9d 	bl	800c86e <_calloc_r>
 800bf34:	b160      	cbz	r0, 800bf50 <_Balloc+0x64>
 800bf36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3a:	e00e      	b.n	800bf5a <_Balloc+0x6e>
 800bf3c:	2221      	movs	r2, #33	; 0x21
 800bf3e:	2104      	movs	r1, #4
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fc94 	bl	800c86e <_calloc_r>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	60f0      	str	r0, [r6, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e4      	bne.n	800bf1a <_Balloc+0x2e>
 800bf50:	2000      	movs	r0, #0
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	6802      	ldr	r2, [r0, #0]
 800bf56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf60:	e7f7      	b.n	800bf52 <_Balloc+0x66>
 800bf62:	bf00      	nop
 800bf64:	0800ebe6 	.word	0x0800ebe6
 800bf68:	0800ece4 	.word	0x0800ece4

0800bf6c <_Bfree>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	b976      	cbnz	r6, 800bf94 <_Bfree+0x28>
 800bf76:	2010      	movs	r0, #16
 800bf78:	f7ff ff90 	bl	800be9c <malloc>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6268      	str	r0, [r5, #36]	; 0x24
 800bf80:	b920      	cbnz	r0, 800bf8c <_Bfree+0x20>
 800bf82:	4b09      	ldr	r3, [pc, #36]	; (800bfa8 <_Bfree+0x3c>)
 800bf84:	4809      	ldr	r0, [pc, #36]	; (800bfac <_Bfree+0x40>)
 800bf86:	218a      	movs	r1, #138	; 0x8a
 800bf88:	f000 ff00 	bl	800cd8c <__assert_func>
 800bf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf90:	6006      	str	r6, [r0, #0]
 800bf92:	60c6      	str	r6, [r0, #12]
 800bf94:	b13c      	cbz	r4, 800bfa6 <_Bfree+0x3a>
 800bf96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf98:	6862      	ldr	r2, [r4, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa0:	6021      	str	r1, [r4, #0]
 800bfa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	0800ebe6 	.word	0x0800ebe6
 800bfac:	0800ece4 	.word	0x0800ece4

0800bfb0 <__multadd>:
 800bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb4:	690d      	ldr	r5, [r1, #16]
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	461e      	mov	r6, r3
 800bfbc:	f101 0c14 	add.w	ip, r1, #20
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f8dc 3000 	ldr.w	r3, [ip]
 800bfc6:	b299      	uxth	r1, r3
 800bfc8:	fb02 6101 	mla	r1, r2, r1, r6
 800bfcc:	0c1e      	lsrs	r6, r3, #16
 800bfce:	0c0b      	lsrs	r3, r1, #16
 800bfd0:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfdc:	4285      	cmp	r5, r0
 800bfde:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfe6:	dcec      	bgt.n	800bfc2 <__multadd+0x12>
 800bfe8:	b30e      	cbz	r6, 800c02e <__multadd+0x7e>
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	dc19      	bgt.n	800c024 <__multadd+0x74>
 800bff0:	6861      	ldr	r1, [r4, #4]
 800bff2:	4638      	mov	r0, r7
 800bff4:	3101      	adds	r1, #1
 800bff6:	f7ff ff79 	bl	800beec <_Balloc>
 800bffa:	4680      	mov	r8, r0
 800bffc:	b928      	cbnz	r0, 800c00a <__multadd+0x5a>
 800bffe:	4602      	mov	r2, r0
 800c000:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <__multadd+0x84>)
 800c002:	480d      	ldr	r0, [pc, #52]	; (800c038 <__multadd+0x88>)
 800c004:	21b5      	movs	r1, #181	; 0xb5
 800c006:	f000 fec1 	bl	800cd8c <__assert_func>
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	3202      	adds	r2, #2
 800c00e:	f104 010c 	add.w	r1, r4, #12
 800c012:	0092      	lsls	r2, r2, #2
 800c014:	300c      	adds	r0, #12
 800c016:	f7ff ff5b 	bl	800bed0 <memcpy>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff ffa5 	bl	800bf6c <_Bfree>
 800c022:	4644      	mov	r4, r8
 800c024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c028:	3501      	adds	r5, #1
 800c02a:	615e      	str	r6, [r3, #20]
 800c02c:	6125      	str	r5, [r4, #16]
 800c02e:	4620      	mov	r0, r4
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c034:	0800ec58 	.word	0x0800ec58
 800c038:	0800ece4 	.word	0x0800ece4

0800c03c <__s2b>:
 800c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c040:	460c      	mov	r4, r1
 800c042:	4615      	mov	r5, r2
 800c044:	461f      	mov	r7, r3
 800c046:	2209      	movs	r2, #9
 800c048:	3308      	adds	r3, #8
 800c04a:	4606      	mov	r6, r0
 800c04c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c050:	2100      	movs	r1, #0
 800c052:	2201      	movs	r2, #1
 800c054:	429a      	cmp	r2, r3
 800c056:	db09      	blt.n	800c06c <__s2b+0x30>
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ff47 	bl	800beec <_Balloc>
 800c05e:	b940      	cbnz	r0, 800c072 <__s2b+0x36>
 800c060:	4602      	mov	r2, r0
 800c062:	4b19      	ldr	r3, [pc, #100]	; (800c0c8 <__s2b+0x8c>)
 800c064:	4819      	ldr	r0, [pc, #100]	; (800c0cc <__s2b+0x90>)
 800c066:	21ce      	movs	r1, #206	; 0xce
 800c068:	f000 fe90 	bl	800cd8c <__assert_func>
 800c06c:	0052      	lsls	r2, r2, #1
 800c06e:	3101      	adds	r1, #1
 800c070:	e7f0      	b.n	800c054 <__s2b+0x18>
 800c072:	9b08      	ldr	r3, [sp, #32]
 800c074:	6143      	str	r3, [r0, #20]
 800c076:	2d09      	cmp	r5, #9
 800c078:	f04f 0301 	mov.w	r3, #1
 800c07c:	6103      	str	r3, [r0, #16]
 800c07e:	dd16      	ble.n	800c0ae <__s2b+0x72>
 800c080:	f104 0909 	add.w	r9, r4, #9
 800c084:	46c8      	mov	r8, r9
 800c086:	442c      	add	r4, r5
 800c088:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c08c:	4601      	mov	r1, r0
 800c08e:	3b30      	subs	r3, #48	; 0x30
 800c090:	220a      	movs	r2, #10
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff ff8c 	bl	800bfb0 <__multadd>
 800c098:	45a0      	cmp	r8, r4
 800c09a:	d1f5      	bne.n	800c088 <__s2b+0x4c>
 800c09c:	f1a5 0408 	sub.w	r4, r5, #8
 800c0a0:	444c      	add	r4, r9
 800c0a2:	1b2d      	subs	r5, r5, r4
 800c0a4:	1963      	adds	r3, r4, r5
 800c0a6:	42bb      	cmp	r3, r7
 800c0a8:	db04      	blt.n	800c0b4 <__s2b+0x78>
 800c0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ae:	340a      	adds	r4, #10
 800c0b0:	2509      	movs	r5, #9
 800c0b2:	e7f6      	b.n	800c0a2 <__s2b+0x66>
 800c0b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	3b30      	subs	r3, #48	; 0x30
 800c0bc:	220a      	movs	r2, #10
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ff76 	bl	800bfb0 <__multadd>
 800c0c4:	e7ee      	b.n	800c0a4 <__s2b+0x68>
 800c0c6:	bf00      	nop
 800c0c8:	0800ec58 	.word	0x0800ec58
 800c0cc:	0800ece4 	.word	0x0800ece4

0800c0d0 <__hi0bits>:
 800c0d0:	0c03      	lsrs	r3, r0, #16
 800c0d2:	041b      	lsls	r3, r3, #16
 800c0d4:	b9d3      	cbnz	r3, 800c10c <__hi0bits+0x3c>
 800c0d6:	0400      	lsls	r0, r0, #16
 800c0d8:	2310      	movs	r3, #16
 800c0da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0de:	bf04      	itt	eq
 800c0e0:	0200      	lsleq	r0, r0, #8
 800c0e2:	3308      	addeq	r3, #8
 800c0e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e8:	bf04      	itt	eq
 800c0ea:	0100      	lsleq	r0, r0, #4
 800c0ec:	3304      	addeq	r3, #4
 800c0ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0f2:	bf04      	itt	eq
 800c0f4:	0080      	lsleq	r0, r0, #2
 800c0f6:	3302      	addeq	r3, #2
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	db05      	blt.n	800c108 <__hi0bits+0x38>
 800c0fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c100:	f103 0301 	add.w	r3, r3, #1
 800c104:	bf08      	it	eq
 800c106:	2320      	moveq	r3, #32
 800c108:	4618      	mov	r0, r3
 800c10a:	4770      	bx	lr
 800c10c:	2300      	movs	r3, #0
 800c10e:	e7e4      	b.n	800c0da <__hi0bits+0xa>

0800c110 <__lo0bits>:
 800c110:	6803      	ldr	r3, [r0, #0]
 800c112:	f013 0207 	ands.w	r2, r3, #7
 800c116:	4601      	mov	r1, r0
 800c118:	d00b      	beq.n	800c132 <__lo0bits+0x22>
 800c11a:	07da      	lsls	r2, r3, #31
 800c11c:	d423      	bmi.n	800c166 <__lo0bits+0x56>
 800c11e:	0798      	lsls	r0, r3, #30
 800c120:	bf49      	itett	mi
 800c122:	085b      	lsrmi	r3, r3, #1
 800c124:	089b      	lsrpl	r3, r3, #2
 800c126:	2001      	movmi	r0, #1
 800c128:	600b      	strmi	r3, [r1, #0]
 800c12a:	bf5c      	itt	pl
 800c12c:	600b      	strpl	r3, [r1, #0]
 800c12e:	2002      	movpl	r0, #2
 800c130:	4770      	bx	lr
 800c132:	b298      	uxth	r0, r3
 800c134:	b9a8      	cbnz	r0, 800c162 <__lo0bits+0x52>
 800c136:	0c1b      	lsrs	r3, r3, #16
 800c138:	2010      	movs	r0, #16
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	b90a      	cbnz	r2, 800c142 <__lo0bits+0x32>
 800c13e:	3008      	adds	r0, #8
 800c140:	0a1b      	lsrs	r3, r3, #8
 800c142:	071a      	lsls	r2, r3, #28
 800c144:	bf04      	itt	eq
 800c146:	091b      	lsreq	r3, r3, #4
 800c148:	3004      	addeq	r0, #4
 800c14a:	079a      	lsls	r2, r3, #30
 800c14c:	bf04      	itt	eq
 800c14e:	089b      	lsreq	r3, r3, #2
 800c150:	3002      	addeq	r0, #2
 800c152:	07da      	lsls	r2, r3, #31
 800c154:	d403      	bmi.n	800c15e <__lo0bits+0x4e>
 800c156:	085b      	lsrs	r3, r3, #1
 800c158:	f100 0001 	add.w	r0, r0, #1
 800c15c:	d005      	beq.n	800c16a <__lo0bits+0x5a>
 800c15e:	600b      	str	r3, [r1, #0]
 800c160:	4770      	bx	lr
 800c162:	4610      	mov	r0, r2
 800c164:	e7e9      	b.n	800c13a <__lo0bits+0x2a>
 800c166:	2000      	movs	r0, #0
 800c168:	4770      	bx	lr
 800c16a:	2020      	movs	r0, #32
 800c16c:	4770      	bx	lr
	...

0800c170 <__i2b>:
 800c170:	b510      	push	{r4, lr}
 800c172:	460c      	mov	r4, r1
 800c174:	2101      	movs	r1, #1
 800c176:	f7ff feb9 	bl	800beec <_Balloc>
 800c17a:	4602      	mov	r2, r0
 800c17c:	b928      	cbnz	r0, 800c18a <__i2b+0x1a>
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <__i2b+0x24>)
 800c180:	4805      	ldr	r0, [pc, #20]	; (800c198 <__i2b+0x28>)
 800c182:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c186:	f000 fe01 	bl	800cd8c <__assert_func>
 800c18a:	2301      	movs	r3, #1
 800c18c:	6144      	str	r4, [r0, #20]
 800c18e:	6103      	str	r3, [r0, #16]
 800c190:	bd10      	pop	{r4, pc}
 800c192:	bf00      	nop
 800c194:	0800ec58 	.word	0x0800ec58
 800c198:	0800ece4 	.word	0x0800ece4

0800c19c <__multiply>:
 800c19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a0:	4691      	mov	r9, r2
 800c1a2:	690a      	ldr	r2, [r1, #16]
 800c1a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	bfb8      	it	lt
 800c1ac:	460b      	movlt	r3, r1
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	bfbc      	itt	lt
 800c1b2:	464c      	movlt	r4, r9
 800c1b4:	4699      	movlt	r9, r3
 800c1b6:	6927      	ldr	r7, [r4, #16]
 800c1b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	6861      	ldr	r1, [r4, #4]
 800c1c0:	eb07 060a 	add.w	r6, r7, sl
 800c1c4:	42b3      	cmp	r3, r6
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	bfb8      	it	lt
 800c1ca:	3101      	addlt	r1, #1
 800c1cc:	f7ff fe8e 	bl	800beec <_Balloc>
 800c1d0:	b930      	cbnz	r0, 800c1e0 <__multiply+0x44>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	4b44      	ldr	r3, [pc, #272]	; (800c2e8 <__multiply+0x14c>)
 800c1d6:	4845      	ldr	r0, [pc, #276]	; (800c2ec <__multiply+0x150>)
 800c1d8:	f240 115d 	movw	r1, #349	; 0x15d
 800c1dc:	f000 fdd6 	bl	800cd8c <__assert_func>
 800c1e0:	f100 0514 	add.w	r5, r0, #20
 800c1e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	4543      	cmp	r3, r8
 800c1ee:	d321      	bcc.n	800c234 <__multiply+0x98>
 800c1f0:	f104 0314 	add.w	r3, r4, #20
 800c1f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1f8:	f109 0314 	add.w	r3, r9, #20
 800c1fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c200:	9202      	str	r2, [sp, #8]
 800c202:	1b3a      	subs	r2, r7, r4
 800c204:	3a15      	subs	r2, #21
 800c206:	f022 0203 	bic.w	r2, r2, #3
 800c20a:	3204      	adds	r2, #4
 800c20c:	f104 0115 	add.w	r1, r4, #21
 800c210:	428f      	cmp	r7, r1
 800c212:	bf38      	it	cc
 800c214:	2204      	movcc	r2, #4
 800c216:	9201      	str	r2, [sp, #4]
 800c218:	9a02      	ldr	r2, [sp, #8]
 800c21a:	9303      	str	r3, [sp, #12]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d80c      	bhi.n	800c23a <__multiply+0x9e>
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd03      	ble.n	800c22c <__multiply+0x90>
 800c224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d05a      	beq.n	800c2e2 <__multiply+0x146>
 800c22c:	6106      	str	r6, [r0, #16]
 800c22e:	b005      	add	sp, #20
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	f843 2b04 	str.w	r2, [r3], #4
 800c238:	e7d8      	b.n	800c1ec <__multiply+0x50>
 800c23a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c23e:	f1ba 0f00 	cmp.w	sl, #0
 800c242:	d024      	beq.n	800c28e <__multiply+0xf2>
 800c244:	f104 0e14 	add.w	lr, r4, #20
 800c248:	46a9      	mov	r9, r5
 800c24a:	f04f 0c00 	mov.w	ip, #0
 800c24e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c252:	f8d9 1000 	ldr.w	r1, [r9]
 800c256:	fa1f fb82 	uxth.w	fp, r2
 800c25a:	b289      	uxth	r1, r1
 800c25c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c260:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c264:	f8d9 2000 	ldr.w	r2, [r9]
 800c268:	4461      	add	r1, ip
 800c26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c26e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c276:	b289      	uxth	r1, r1
 800c278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c27c:	4577      	cmp	r7, lr
 800c27e:	f849 1b04 	str.w	r1, [r9], #4
 800c282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c286:	d8e2      	bhi.n	800c24e <__multiply+0xb2>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	f845 c002 	str.w	ip, [r5, r2]
 800c28e:	9a03      	ldr	r2, [sp, #12]
 800c290:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c294:	3304      	adds	r3, #4
 800c296:	f1b9 0f00 	cmp.w	r9, #0
 800c29a:	d020      	beq.n	800c2de <__multiply+0x142>
 800c29c:	6829      	ldr	r1, [r5, #0]
 800c29e:	f104 0c14 	add.w	ip, r4, #20
 800c2a2:	46ae      	mov	lr, r5
 800c2a4:	f04f 0a00 	mov.w	sl, #0
 800c2a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c2ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2b0:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b4:	4492      	add	sl, r2
 800c2b6:	b289      	uxth	r1, r1
 800c2b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2bc:	f84e 1b04 	str.w	r1, [lr], #4
 800c2c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c4:	f8be 1000 	ldrh.w	r1, [lr]
 800c2c8:	0c12      	lsrs	r2, r2, #16
 800c2ca:	fb09 1102 	mla	r1, r9, r2, r1
 800c2ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2d2:	4567      	cmp	r7, ip
 800c2d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2d8:	d8e6      	bhi.n	800c2a8 <__multiply+0x10c>
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	50a9      	str	r1, [r5, r2]
 800c2de:	3504      	adds	r5, #4
 800c2e0:	e79a      	b.n	800c218 <__multiply+0x7c>
 800c2e2:	3e01      	subs	r6, #1
 800c2e4:	e79c      	b.n	800c220 <__multiply+0x84>
 800c2e6:	bf00      	nop
 800c2e8:	0800ec58 	.word	0x0800ec58
 800c2ec:	0800ece4 	.word	0x0800ece4

0800c2f0 <__pow5mult>:
 800c2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f4:	4615      	mov	r5, r2
 800c2f6:	f012 0203 	ands.w	r2, r2, #3
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460f      	mov	r7, r1
 800c2fe:	d007      	beq.n	800c310 <__pow5mult+0x20>
 800c300:	4c25      	ldr	r4, [pc, #148]	; (800c398 <__pow5mult+0xa8>)
 800c302:	3a01      	subs	r2, #1
 800c304:	2300      	movs	r3, #0
 800c306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c30a:	f7ff fe51 	bl	800bfb0 <__multadd>
 800c30e:	4607      	mov	r7, r0
 800c310:	10ad      	asrs	r5, r5, #2
 800c312:	d03d      	beq.n	800c390 <__pow5mult+0xa0>
 800c314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c316:	b97c      	cbnz	r4, 800c338 <__pow5mult+0x48>
 800c318:	2010      	movs	r0, #16
 800c31a:	f7ff fdbf 	bl	800be9c <malloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	6270      	str	r0, [r6, #36]	; 0x24
 800c322:	b928      	cbnz	r0, 800c330 <__pow5mult+0x40>
 800c324:	4b1d      	ldr	r3, [pc, #116]	; (800c39c <__pow5mult+0xac>)
 800c326:	481e      	ldr	r0, [pc, #120]	; (800c3a0 <__pow5mult+0xb0>)
 800c328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c32c:	f000 fd2e 	bl	800cd8c <__assert_func>
 800c330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c334:	6004      	str	r4, [r0, #0]
 800c336:	60c4      	str	r4, [r0, #12]
 800c338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c340:	b94c      	cbnz	r4, 800c356 <__pow5mult+0x66>
 800c342:	f240 2171 	movw	r1, #625	; 0x271
 800c346:	4630      	mov	r0, r6
 800c348:	f7ff ff12 	bl	800c170 <__i2b>
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c352:	4604      	mov	r4, r0
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	f04f 0900 	mov.w	r9, #0
 800c35a:	07eb      	lsls	r3, r5, #31
 800c35c:	d50a      	bpl.n	800c374 <__pow5mult+0x84>
 800c35e:	4639      	mov	r1, r7
 800c360:	4622      	mov	r2, r4
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ff1a 	bl	800c19c <__multiply>
 800c368:	4639      	mov	r1, r7
 800c36a:	4680      	mov	r8, r0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff fdfd 	bl	800bf6c <_Bfree>
 800c372:	4647      	mov	r7, r8
 800c374:	106d      	asrs	r5, r5, #1
 800c376:	d00b      	beq.n	800c390 <__pow5mult+0xa0>
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	b938      	cbnz	r0, 800c38c <__pow5mult+0x9c>
 800c37c:	4622      	mov	r2, r4
 800c37e:	4621      	mov	r1, r4
 800c380:	4630      	mov	r0, r6
 800c382:	f7ff ff0b 	bl	800c19c <__multiply>
 800c386:	6020      	str	r0, [r4, #0]
 800c388:	f8c0 9000 	str.w	r9, [r0]
 800c38c:	4604      	mov	r4, r0
 800c38e:	e7e4      	b.n	800c35a <__pow5mult+0x6a>
 800c390:	4638      	mov	r0, r7
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	bf00      	nop
 800c398:	0800ee30 	.word	0x0800ee30
 800c39c:	0800ebe6 	.word	0x0800ebe6
 800c3a0:	0800ece4 	.word	0x0800ece4

0800c3a4 <__lshift>:
 800c3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	6849      	ldr	r1, [r1, #4]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3b2:	68a3      	ldr	r3, [r4, #8]
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	4691      	mov	r9, r2
 800c3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3bc:	f108 0601 	add.w	r6, r8, #1
 800c3c0:	42b3      	cmp	r3, r6
 800c3c2:	db0b      	blt.n	800c3dc <__lshift+0x38>
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff fd91 	bl	800beec <_Balloc>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	b948      	cbnz	r0, 800c3e2 <__lshift+0x3e>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	4b2a      	ldr	r3, [pc, #168]	; (800c47c <__lshift+0xd8>)
 800c3d2:	482b      	ldr	r0, [pc, #172]	; (800c480 <__lshift+0xdc>)
 800c3d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3d8:	f000 fcd8 	bl	800cd8c <__assert_func>
 800c3dc:	3101      	adds	r1, #1
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	e7ee      	b.n	800c3c0 <__lshift+0x1c>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f100 0114 	add.w	r1, r0, #20
 800c3e8:	f100 0210 	add.w	r2, r0, #16
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	4553      	cmp	r3, sl
 800c3f0:	db37      	blt.n	800c462 <__lshift+0xbe>
 800c3f2:	6920      	ldr	r0, [r4, #16]
 800c3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f8:	f104 0314 	add.w	r3, r4, #20
 800c3fc:	f019 091f 	ands.w	r9, r9, #31
 800c400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c408:	d02f      	beq.n	800c46a <__lshift+0xc6>
 800c40a:	f1c9 0e20 	rsb	lr, r9, #32
 800c40e:	468a      	mov	sl, r1
 800c410:	f04f 0c00 	mov.w	ip, #0
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	fa02 f209 	lsl.w	r2, r2, r9
 800c41a:	ea42 020c 	orr.w	r2, r2, ip
 800c41e:	f84a 2b04 	str.w	r2, [sl], #4
 800c422:	f853 2b04 	ldr.w	r2, [r3], #4
 800c426:	4298      	cmp	r0, r3
 800c428:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c42c:	d8f2      	bhi.n	800c414 <__lshift+0x70>
 800c42e:	1b03      	subs	r3, r0, r4
 800c430:	3b15      	subs	r3, #21
 800c432:	f023 0303 	bic.w	r3, r3, #3
 800c436:	3304      	adds	r3, #4
 800c438:	f104 0215 	add.w	r2, r4, #21
 800c43c:	4290      	cmp	r0, r2
 800c43e:	bf38      	it	cc
 800c440:	2304      	movcc	r3, #4
 800c442:	f841 c003 	str.w	ip, [r1, r3]
 800c446:	f1bc 0f00 	cmp.w	ip, #0
 800c44a:	d001      	beq.n	800c450 <__lshift+0xac>
 800c44c:	f108 0602 	add.w	r6, r8, #2
 800c450:	3e01      	subs	r6, #1
 800c452:	4638      	mov	r0, r7
 800c454:	612e      	str	r6, [r5, #16]
 800c456:	4621      	mov	r1, r4
 800c458:	f7ff fd88 	bl	800bf6c <_Bfree>
 800c45c:	4628      	mov	r0, r5
 800c45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c462:	f842 0f04 	str.w	r0, [r2, #4]!
 800c466:	3301      	adds	r3, #1
 800c468:	e7c1      	b.n	800c3ee <__lshift+0x4a>
 800c46a:	3904      	subs	r1, #4
 800c46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c470:	f841 2f04 	str.w	r2, [r1, #4]!
 800c474:	4298      	cmp	r0, r3
 800c476:	d8f9      	bhi.n	800c46c <__lshift+0xc8>
 800c478:	e7ea      	b.n	800c450 <__lshift+0xac>
 800c47a:	bf00      	nop
 800c47c:	0800ec58 	.word	0x0800ec58
 800c480:	0800ece4 	.word	0x0800ece4

0800c484 <__mcmp>:
 800c484:	b530      	push	{r4, r5, lr}
 800c486:	6902      	ldr	r2, [r0, #16]
 800c488:	690c      	ldr	r4, [r1, #16]
 800c48a:	1b12      	subs	r2, r2, r4
 800c48c:	d10e      	bne.n	800c4ac <__mcmp+0x28>
 800c48e:	f100 0314 	add.w	r3, r0, #20
 800c492:	3114      	adds	r1, #20
 800c494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c49c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4a4:	42a5      	cmp	r5, r4
 800c4a6:	d003      	beq.n	800c4b0 <__mcmp+0x2c>
 800c4a8:	d305      	bcc.n	800c4b6 <__mcmp+0x32>
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	bd30      	pop	{r4, r5, pc}
 800c4b0:	4283      	cmp	r3, r0
 800c4b2:	d3f3      	bcc.n	800c49c <__mcmp+0x18>
 800c4b4:	e7fa      	b.n	800c4ac <__mcmp+0x28>
 800c4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ba:	e7f7      	b.n	800c4ac <__mcmp+0x28>

0800c4bc <__mdiff>:
 800c4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4690      	mov	r8, r2
 800c4ca:	f7ff ffdb 	bl	800c484 <__mcmp>
 800c4ce:	1e05      	subs	r5, r0, #0
 800c4d0:	d110      	bne.n	800c4f4 <__mdiff+0x38>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff fd09 	bl	800beec <_Balloc>
 800c4da:	b930      	cbnz	r0, 800c4ea <__mdiff+0x2e>
 800c4dc:	4b3a      	ldr	r3, [pc, #232]	; (800c5c8 <__mdiff+0x10c>)
 800c4de:	4602      	mov	r2, r0
 800c4e0:	f240 2132 	movw	r1, #562	; 0x232
 800c4e4:	4839      	ldr	r0, [pc, #228]	; (800c5cc <__mdiff+0x110>)
 800c4e6:	f000 fc51 	bl	800cd8c <__assert_func>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f4:	bfa4      	itt	ge
 800c4f6:	4643      	movge	r3, r8
 800c4f8:	46a0      	movge	r8, r4
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c500:	bfa6      	itte	ge
 800c502:	461c      	movge	r4, r3
 800c504:	2500      	movge	r5, #0
 800c506:	2501      	movlt	r5, #1
 800c508:	f7ff fcf0 	bl	800beec <_Balloc>
 800c50c:	b920      	cbnz	r0, 800c518 <__mdiff+0x5c>
 800c50e:	4b2e      	ldr	r3, [pc, #184]	; (800c5c8 <__mdiff+0x10c>)
 800c510:	4602      	mov	r2, r0
 800c512:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c516:	e7e5      	b.n	800c4e4 <__mdiff+0x28>
 800c518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c51c:	6926      	ldr	r6, [r4, #16]
 800c51e:	60c5      	str	r5, [r0, #12]
 800c520:	f104 0914 	add.w	r9, r4, #20
 800c524:	f108 0514 	add.w	r5, r8, #20
 800c528:	f100 0e14 	add.w	lr, r0, #20
 800c52c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c534:	f108 0210 	add.w	r2, r8, #16
 800c538:	46f2      	mov	sl, lr
 800c53a:	2100      	movs	r1, #0
 800c53c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c544:	fa1f f883 	uxth.w	r8, r3
 800c548:	fa11 f18b 	uxtah	r1, r1, fp
 800c54c:	0c1b      	lsrs	r3, r3, #16
 800c54e:	eba1 0808 	sub.w	r8, r1, r8
 800c552:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c556:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c55a:	fa1f f888 	uxth.w	r8, r8
 800c55e:	1419      	asrs	r1, r3, #16
 800c560:	454e      	cmp	r6, r9
 800c562:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c566:	f84a 3b04 	str.w	r3, [sl], #4
 800c56a:	d8e7      	bhi.n	800c53c <__mdiff+0x80>
 800c56c:	1b33      	subs	r3, r6, r4
 800c56e:	3b15      	subs	r3, #21
 800c570:	f023 0303 	bic.w	r3, r3, #3
 800c574:	3304      	adds	r3, #4
 800c576:	3415      	adds	r4, #21
 800c578:	42a6      	cmp	r6, r4
 800c57a:	bf38      	it	cc
 800c57c:	2304      	movcc	r3, #4
 800c57e:	441d      	add	r5, r3
 800c580:	4473      	add	r3, lr
 800c582:	469e      	mov	lr, r3
 800c584:	462e      	mov	r6, r5
 800c586:	4566      	cmp	r6, ip
 800c588:	d30e      	bcc.n	800c5a8 <__mdiff+0xec>
 800c58a:	f10c 0203 	add.w	r2, ip, #3
 800c58e:	1b52      	subs	r2, r2, r5
 800c590:	f022 0203 	bic.w	r2, r2, #3
 800c594:	3d03      	subs	r5, #3
 800c596:	45ac      	cmp	ip, r5
 800c598:	bf38      	it	cc
 800c59a:	2200      	movcc	r2, #0
 800c59c:	441a      	add	r2, r3
 800c59e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5a2:	b17b      	cbz	r3, 800c5c4 <__mdiff+0x108>
 800c5a4:	6107      	str	r7, [r0, #16]
 800c5a6:	e7a3      	b.n	800c4f0 <__mdiff+0x34>
 800c5a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5ac:	fa11 f288 	uxtah	r2, r1, r8
 800c5b0:	1414      	asrs	r4, r2, #16
 800c5b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5b6:	b292      	uxth	r2, r2
 800c5b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c5c0:	1421      	asrs	r1, r4, #16
 800c5c2:	e7e0      	b.n	800c586 <__mdiff+0xca>
 800c5c4:	3f01      	subs	r7, #1
 800c5c6:	e7ea      	b.n	800c59e <__mdiff+0xe2>
 800c5c8:	0800ec58 	.word	0x0800ec58
 800c5cc:	0800ece4 	.word	0x0800ece4

0800c5d0 <__ulp>:
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	ed8d 0b00 	vstr	d0, [sp]
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	4912      	ldr	r1, [pc, #72]	; (800c624 <__ulp+0x54>)
 800c5da:	4019      	ands	r1, r3
 800c5dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5e0:	2900      	cmp	r1, #0
 800c5e2:	dd05      	ble.n	800c5f0 <__ulp+0x20>
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	ec43 2b10 	vmov	d0, r2, r3
 800c5ec:	b002      	add	sp, #8
 800c5ee:	4770      	bx	lr
 800c5f0:	4249      	negs	r1, r1
 800c5f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5fa:	f04f 0200 	mov.w	r2, #0
 800c5fe:	f04f 0300 	mov.w	r3, #0
 800c602:	da04      	bge.n	800c60e <__ulp+0x3e>
 800c604:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c608:	fa41 f300 	asr.w	r3, r1, r0
 800c60c:	e7ec      	b.n	800c5e8 <__ulp+0x18>
 800c60e:	f1a0 0114 	sub.w	r1, r0, #20
 800c612:	291e      	cmp	r1, #30
 800c614:	bfda      	itte	le
 800c616:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c61a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c61e:	2101      	movgt	r1, #1
 800c620:	460a      	mov	r2, r1
 800c622:	e7e1      	b.n	800c5e8 <__ulp+0x18>
 800c624:	7ff00000 	.word	0x7ff00000

0800c628 <__b2d>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	6905      	ldr	r5, [r0, #16]
 800c62c:	f100 0714 	add.w	r7, r0, #20
 800c630:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c634:	1f2e      	subs	r6, r5, #4
 800c636:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7ff fd48 	bl	800c0d0 <__hi0bits>
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	280a      	cmp	r0, #10
 800c646:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6c4 <__b2d+0x9c>
 800c64a:	600b      	str	r3, [r1, #0]
 800c64c:	dc14      	bgt.n	800c678 <__b2d+0x50>
 800c64e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c652:	fa24 f10e 	lsr.w	r1, r4, lr
 800c656:	42b7      	cmp	r7, r6
 800c658:	ea41 030c 	orr.w	r3, r1, ip
 800c65c:	bf34      	ite	cc
 800c65e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c662:	2100      	movcs	r1, #0
 800c664:	3015      	adds	r0, #21
 800c666:	fa04 f000 	lsl.w	r0, r4, r0
 800c66a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c66e:	ea40 0201 	orr.w	r2, r0, r1
 800c672:	ec43 2b10 	vmov	d0, r2, r3
 800c676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c678:	42b7      	cmp	r7, r6
 800c67a:	bf3a      	itte	cc
 800c67c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c680:	f1a5 0608 	subcc.w	r6, r5, #8
 800c684:	2100      	movcs	r1, #0
 800c686:	380b      	subs	r0, #11
 800c688:	d017      	beq.n	800c6ba <__b2d+0x92>
 800c68a:	f1c0 0c20 	rsb	ip, r0, #32
 800c68e:	fa04 f500 	lsl.w	r5, r4, r0
 800c692:	42be      	cmp	r6, r7
 800c694:	fa21 f40c 	lsr.w	r4, r1, ip
 800c698:	ea45 0504 	orr.w	r5, r5, r4
 800c69c:	bf8c      	ite	hi
 800c69e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c6a2:	2400      	movls	r4, #0
 800c6a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6a8:	fa01 f000 	lsl.w	r0, r1, r0
 800c6ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6b4:	ea40 0204 	orr.w	r2, r0, r4
 800c6b8:	e7db      	b.n	800c672 <__b2d+0x4a>
 800c6ba:	ea44 030c 	orr.w	r3, r4, ip
 800c6be:	460a      	mov	r2, r1
 800c6c0:	e7d7      	b.n	800c672 <__b2d+0x4a>
 800c6c2:	bf00      	nop
 800c6c4:	3ff00000 	.word	0x3ff00000

0800c6c8 <__d2b>:
 800c6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	4689      	mov	r9, r1
 800c6ce:	2101      	movs	r1, #1
 800c6d0:	ec57 6b10 	vmov	r6, r7, d0
 800c6d4:	4690      	mov	r8, r2
 800c6d6:	f7ff fc09 	bl	800beec <_Balloc>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	b930      	cbnz	r0, 800c6ec <__d2b+0x24>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	4b25      	ldr	r3, [pc, #148]	; (800c778 <__d2b+0xb0>)
 800c6e2:	4826      	ldr	r0, [pc, #152]	; (800c77c <__d2b+0xb4>)
 800c6e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c6e8:	f000 fb50 	bl	800cd8c <__assert_func>
 800c6ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6f4:	bb35      	cbnz	r5, 800c744 <__d2b+0x7c>
 800c6f6:	2e00      	cmp	r6, #0
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	d028      	beq.n	800c74e <__d2b+0x86>
 800c6fc:	4668      	mov	r0, sp
 800c6fe:	9600      	str	r6, [sp, #0]
 800c700:	f7ff fd06 	bl	800c110 <__lo0bits>
 800c704:	9900      	ldr	r1, [sp, #0]
 800c706:	b300      	cbz	r0, 800c74a <__d2b+0x82>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	f1c0 0320 	rsb	r3, r0, #32
 800c70e:	fa02 f303 	lsl.w	r3, r2, r3
 800c712:	430b      	orrs	r3, r1
 800c714:	40c2      	lsrs	r2, r0
 800c716:	6163      	str	r3, [r4, #20]
 800c718:	9201      	str	r2, [sp, #4]
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	61a3      	str	r3, [r4, #24]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	bf14      	ite	ne
 800c722:	2202      	movne	r2, #2
 800c724:	2201      	moveq	r2, #1
 800c726:	6122      	str	r2, [r4, #16]
 800c728:	b1d5      	cbz	r5, 800c760 <__d2b+0x98>
 800c72a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c72e:	4405      	add	r5, r0
 800c730:	f8c9 5000 	str.w	r5, [r9]
 800c734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c738:	f8c8 0000 	str.w	r0, [r8]
 800c73c:	4620      	mov	r0, r4
 800c73e:	b003      	add	sp, #12
 800c740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c748:	e7d5      	b.n	800c6f6 <__d2b+0x2e>
 800c74a:	6161      	str	r1, [r4, #20]
 800c74c:	e7e5      	b.n	800c71a <__d2b+0x52>
 800c74e:	a801      	add	r0, sp, #4
 800c750:	f7ff fcde 	bl	800c110 <__lo0bits>
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	6163      	str	r3, [r4, #20]
 800c758:	2201      	movs	r2, #1
 800c75a:	6122      	str	r2, [r4, #16]
 800c75c:	3020      	adds	r0, #32
 800c75e:	e7e3      	b.n	800c728 <__d2b+0x60>
 800c760:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c768:	f8c9 0000 	str.w	r0, [r9]
 800c76c:	6918      	ldr	r0, [r3, #16]
 800c76e:	f7ff fcaf 	bl	800c0d0 <__hi0bits>
 800c772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c776:	e7df      	b.n	800c738 <__d2b+0x70>
 800c778:	0800ec58 	.word	0x0800ec58
 800c77c:	0800ece4 	.word	0x0800ece4

0800c780 <__ratio>:
 800c780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	4688      	mov	r8, r1
 800c786:	4669      	mov	r1, sp
 800c788:	4681      	mov	r9, r0
 800c78a:	f7ff ff4d 	bl	800c628 <__b2d>
 800c78e:	a901      	add	r1, sp, #4
 800c790:	4640      	mov	r0, r8
 800c792:	ec55 4b10 	vmov	r4, r5, d0
 800c796:	f7ff ff47 	bl	800c628 <__b2d>
 800c79a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c79e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c7a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7b0:	ec51 0b10 	vmov	r0, r1, d0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfd6      	itet	le
 800c7b8:	460a      	movle	r2, r1
 800c7ba:	462a      	movgt	r2, r5
 800c7bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7c0:	468b      	mov	fp, r1
 800c7c2:	462f      	mov	r7, r5
 800c7c4:	bfd4      	ite	le
 800c7c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	ee10 2a10 	vmov	r2, s0
 800c7d4:	465b      	mov	r3, fp
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	f7f4 f838 	bl	800084c <__aeabi_ddiv>
 800c7dc:	ec41 0b10 	vmov	d0, r0, r1
 800c7e0:	b003      	add	sp, #12
 800c7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7e6 <__copybits>:
 800c7e6:	3901      	subs	r1, #1
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	1149      	asrs	r1, r1, #5
 800c7ec:	6914      	ldr	r4, [r2, #16]
 800c7ee:	3101      	adds	r1, #1
 800c7f0:	f102 0314 	add.w	r3, r2, #20
 800c7f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7fc:	1f05      	subs	r5, r0, #4
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	d30c      	bcc.n	800c81c <__copybits+0x36>
 800c802:	1aa3      	subs	r3, r4, r2
 800c804:	3b11      	subs	r3, #17
 800c806:	f023 0303 	bic.w	r3, r3, #3
 800c80a:	3211      	adds	r2, #17
 800c80c:	42a2      	cmp	r2, r4
 800c80e:	bf88      	it	hi
 800c810:	2300      	movhi	r3, #0
 800c812:	4418      	add	r0, r3
 800c814:	2300      	movs	r3, #0
 800c816:	4288      	cmp	r0, r1
 800c818:	d305      	bcc.n	800c826 <__copybits+0x40>
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c820:	f845 6f04 	str.w	r6, [r5, #4]!
 800c824:	e7eb      	b.n	800c7fe <__copybits+0x18>
 800c826:	f840 3b04 	str.w	r3, [r0], #4
 800c82a:	e7f4      	b.n	800c816 <__copybits+0x30>

0800c82c <__any_on>:
 800c82c:	f100 0214 	add.w	r2, r0, #20
 800c830:	6900      	ldr	r0, [r0, #16]
 800c832:	114b      	asrs	r3, r1, #5
 800c834:	4298      	cmp	r0, r3
 800c836:	b510      	push	{r4, lr}
 800c838:	db11      	blt.n	800c85e <__any_on+0x32>
 800c83a:	dd0a      	ble.n	800c852 <__any_on+0x26>
 800c83c:	f011 011f 	ands.w	r1, r1, #31
 800c840:	d007      	beq.n	800c852 <__any_on+0x26>
 800c842:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c846:	fa24 f001 	lsr.w	r0, r4, r1
 800c84a:	fa00 f101 	lsl.w	r1, r0, r1
 800c84e:	428c      	cmp	r4, r1
 800c850:	d10b      	bne.n	800c86a <__any_on+0x3e>
 800c852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c856:	4293      	cmp	r3, r2
 800c858:	d803      	bhi.n	800c862 <__any_on+0x36>
 800c85a:	2000      	movs	r0, #0
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	4603      	mov	r3, r0
 800c860:	e7f7      	b.n	800c852 <__any_on+0x26>
 800c862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c866:	2900      	cmp	r1, #0
 800c868:	d0f5      	beq.n	800c856 <__any_on+0x2a>
 800c86a:	2001      	movs	r0, #1
 800c86c:	e7f6      	b.n	800c85c <__any_on+0x30>

0800c86e <_calloc_r>:
 800c86e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c870:	fba1 2402 	umull	r2, r4, r1, r2
 800c874:	b94c      	cbnz	r4, 800c88a <_calloc_r+0x1c>
 800c876:	4611      	mov	r1, r2
 800c878:	9201      	str	r2, [sp, #4]
 800c87a:	f000 f87b 	bl	800c974 <_malloc_r>
 800c87e:	9a01      	ldr	r2, [sp, #4]
 800c880:	4605      	mov	r5, r0
 800c882:	b930      	cbnz	r0, 800c892 <_calloc_r+0x24>
 800c884:	4628      	mov	r0, r5
 800c886:	b003      	add	sp, #12
 800c888:	bd30      	pop	{r4, r5, pc}
 800c88a:	220c      	movs	r2, #12
 800c88c:	6002      	str	r2, [r0, #0]
 800c88e:	2500      	movs	r5, #0
 800c890:	e7f8      	b.n	800c884 <_calloc_r+0x16>
 800c892:	4621      	mov	r1, r4
 800c894:	f7fc fbc0 	bl	8009018 <memset>
 800c898:	e7f4      	b.n	800c884 <_calloc_r+0x16>
	...

0800c89c <_free_r>:
 800c89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c89e:	2900      	cmp	r1, #0
 800c8a0:	d044      	beq.n	800c92c <_free_r+0x90>
 800c8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8a6:	9001      	str	r0, [sp, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c8ae:	bfb8      	it	lt
 800c8b0:	18e4      	addlt	r4, r4, r3
 800c8b2:	f000 fab5 	bl	800ce20 <__malloc_lock>
 800c8b6:	4a1e      	ldr	r2, [pc, #120]	; (800c930 <_free_r+0x94>)
 800c8b8:	9801      	ldr	r0, [sp, #4]
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	b933      	cbnz	r3, 800c8cc <_free_r+0x30>
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	6014      	str	r4, [r2, #0]
 800c8c2:	b003      	add	sp, #12
 800c8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8c8:	f000 bab0 	b.w	800ce2c <__malloc_unlock>
 800c8cc:	42a3      	cmp	r3, r4
 800c8ce:	d908      	bls.n	800c8e2 <_free_r+0x46>
 800c8d0:	6825      	ldr	r5, [r4, #0]
 800c8d2:	1961      	adds	r1, r4, r5
 800c8d4:	428b      	cmp	r3, r1
 800c8d6:	bf01      	itttt	eq
 800c8d8:	6819      	ldreq	r1, [r3, #0]
 800c8da:	685b      	ldreq	r3, [r3, #4]
 800c8dc:	1949      	addeq	r1, r1, r5
 800c8de:	6021      	streq	r1, [r4, #0]
 800c8e0:	e7ed      	b.n	800c8be <_free_r+0x22>
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	b10b      	cbz	r3, 800c8ec <_free_r+0x50>
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	d9fa      	bls.n	800c8e2 <_free_r+0x46>
 800c8ec:	6811      	ldr	r1, [r2, #0]
 800c8ee:	1855      	adds	r5, r2, r1
 800c8f0:	42a5      	cmp	r5, r4
 800c8f2:	d10b      	bne.n	800c90c <_free_r+0x70>
 800c8f4:	6824      	ldr	r4, [r4, #0]
 800c8f6:	4421      	add	r1, r4
 800c8f8:	1854      	adds	r4, r2, r1
 800c8fa:	42a3      	cmp	r3, r4
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	d1e0      	bne.n	800c8c2 <_free_r+0x26>
 800c900:	681c      	ldr	r4, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	6053      	str	r3, [r2, #4]
 800c906:	4421      	add	r1, r4
 800c908:	6011      	str	r1, [r2, #0]
 800c90a:	e7da      	b.n	800c8c2 <_free_r+0x26>
 800c90c:	d902      	bls.n	800c914 <_free_r+0x78>
 800c90e:	230c      	movs	r3, #12
 800c910:	6003      	str	r3, [r0, #0]
 800c912:	e7d6      	b.n	800c8c2 <_free_r+0x26>
 800c914:	6825      	ldr	r5, [r4, #0]
 800c916:	1961      	adds	r1, r4, r5
 800c918:	428b      	cmp	r3, r1
 800c91a:	bf04      	itt	eq
 800c91c:	6819      	ldreq	r1, [r3, #0]
 800c91e:	685b      	ldreq	r3, [r3, #4]
 800c920:	6063      	str	r3, [r4, #4]
 800c922:	bf04      	itt	eq
 800c924:	1949      	addeq	r1, r1, r5
 800c926:	6021      	streq	r1, [r4, #0]
 800c928:	6054      	str	r4, [r2, #4]
 800c92a:	e7ca      	b.n	800c8c2 <_free_r+0x26>
 800c92c:	b003      	add	sp, #12
 800c92e:	bd30      	pop	{r4, r5, pc}
 800c930:	20000984 	.word	0x20000984

0800c934 <sbrk_aligned>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	4e0e      	ldr	r6, [pc, #56]	; (800c970 <sbrk_aligned+0x3c>)
 800c938:	460c      	mov	r4, r1
 800c93a:	6831      	ldr	r1, [r6, #0]
 800c93c:	4605      	mov	r5, r0
 800c93e:	b911      	cbnz	r1, 800c946 <sbrk_aligned+0x12>
 800c940:	f000 f9f2 	bl	800cd28 <_sbrk_r>
 800c944:	6030      	str	r0, [r6, #0]
 800c946:	4621      	mov	r1, r4
 800c948:	4628      	mov	r0, r5
 800c94a:	f000 f9ed 	bl	800cd28 <_sbrk_r>
 800c94e:	1c43      	adds	r3, r0, #1
 800c950:	d00a      	beq.n	800c968 <sbrk_aligned+0x34>
 800c952:	1cc4      	adds	r4, r0, #3
 800c954:	f024 0403 	bic.w	r4, r4, #3
 800c958:	42a0      	cmp	r0, r4
 800c95a:	d007      	beq.n	800c96c <sbrk_aligned+0x38>
 800c95c:	1a21      	subs	r1, r4, r0
 800c95e:	4628      	mov	r0, r5
 800c960:	f000 f9e2 	bl	800cd28 <_sbrk_r>
 800c964:	3001      	adds	r0, #1
 800c966:	d101      	bne.n	800c96c <sbrk_aligned+0x38>
 800c968:	f04f 34ff 	mov.w	r4, #4294967295
 800c96c:	4620      	mov	r0, r4
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	20000988 	.word	0x20000988

0800c974 <_malloc_r>:
 800c974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c978:	1ccd      	adds	r5, r1, #3
 800c97a:	f025 0503 	bic.w	r5, r5, #3
 800c97e:	3508      	adds	r5, #8
 800c980:	2d0c      	cmp	r5, #12
 800c982:	bf38      	it	cc
 800c984:	250c      	movcc	r5, #12
 800c986:	2d00      	cmp	r5, #0
 800c988:	4607      	mov	r7, r0
 800c98a:	db01      	blt.n	800c990 <_malloc_r+0x1c>
 800c98c:	42a9      	cmp	r1, r5
 800c98e:	d905      	bls.n	800c99c <_malloc_r+0x28>
 800c990:	230c      	movs	r3, #12
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	2600      	movs	r6, #0
 800c996:	4630      	mov	r0, r6
 800c998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c99c:	4e2e      	ldr	r6, [pc, #184]	; (800ca58 <_malloc_r+0xe4>)
 800c99e:	f000 fa3f 	bl	800ce20 <__malloc_lock>
 800c9a2:	6833      	ldr	r3, [r6, #0]
 800c9a4:	461c      	mov	r4, r3
 800c9a6:	bb34      	cbnz	r4, 800c9f6 <_malloc_r+0x82>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	f7ff ffc2 	bl	800c934 <sbrk_aligned>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	d14d      	bne.n	800ca52 <_malloc_r+0xde>
 800c9b6:	6834      	ldr	r4, [r6, #0]
 800c9b8:	4626      	mov	r6, r4
 800c9ba:	2e00      	cmp	r6, #0
 800c9bc:	d140      	bne.n	800ca40 <_malloc_r+0xcc>
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	eb04 0803 	add.w	r8, r4, r3
 800c9c8:	f000 f9ae 	bl	800cd28 <_sbrk_r>
 800c9cc:	4580      	cmp	r8, r0
 800c9ce:	d13a      	bne.n	800ca46 <_malloc_r+0xd2>
 800c9d0:	6821      	ldr	r1, [r4, #0]
 800c9d2:	3503      	adds	r5, #3
 800c9d4:	1a6d      	subs	r5, r5, r1
 800c9d6:	f025 0503 	bic.w	r5, r5, #3
 800c9da:	3508      	adds	r5, #8
 800c9dc:	2d0c      	cmp	r5, #12
 800c9de:	bf38      	it	cc
 800c9e0:	250c      	movcc	r5, #12
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	f7ff ffa5 	bl	800c934 <sbrk_aligned>
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	d02b      	beq.n	800ca46 <_malloc_r+0xd2>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	442b      	add	r3, r5
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	e00e      	b.n	800ca14 <_malloc_r+0xa0>
 800c9f6:	6822      	ldr	r2, [r4, #0]
 800c9f8:	1b52      	subs	r2, r2, r5
 800c9fa:	d41e      	bmi.n	800ca3a <_malloc_r+0xc6>
 800c9fc:	2a0b      	cmp	r2, #11
 800c9fe:	d916      	bls.n	800ca2e <_malloc_r+0xba>
 800ca00:	1961      	adds	r1, r4, r5
 800ca02:	42a3      	cmp	r3, r4
 800ca04:	6025      	str	r5, [r4, #0]
 800ca06:	bf18      	it	ne
 800ca08:	6059      	strne	r1, [r3, #4]
 800ca0a:	6863      	ldr	r3, [r4, #4]
 800ca0c:	bf08      	it	eq
 800ca0e:	6031      	streq	r1, [r6, #0]
 800ca10:	5162      	str	r2, [r4, r5]
 800ca12:	604b      	str	r3, [r1, #4]
 800ca14:	4638      	mov	r0, r7
 800ca16:	f104 060b 	add.w	r6, r4, #11
 800ca1a:	f000 fa07 	bl	800ce2c <__malloc_unlock>
 800ca1e:	f026 0607 	bic.w	r6, r6, #7
 800ca22:	1d23      	adds	r3, r4, #4
 800ca24:	1af2      	subs	r2, r6, r3
 800ca26:	d0b6      	beq.n	800c996 <_malloc_r+0x22>
 800ca28:	1b9b      	subs	r3, r3, r6
 800ca2a:	50a3      	str	r3, [r4, r2]
 800ca2c:	e7b3      	b.n	800c996 <_malloc_r+0x22>
 800ca2e:	6862      	ldr	r2, [r4, #4]
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	bf0c      	ite	eq
 800ca34:	6032      	streq	r2, [r6, #0]
 800ca36:	605a      	strne	r2, [r3, #4]
 800ca38:	e7ec      	b.n	800ca14 <_malloc_r+0xa0>
 800ca3a:	4623      	mov	r3, r4
 800ca3c:	6864      	ldr	r4, [r4, #4]
 800ca3e:	e7b2      	b.n	800c9a6 <_malloc_r+0x32>
 800ca40:	4634      	mov	r4, r6
 800ca42:	6876      	ldr	r6, [r6, #4]
 800ca44:	e7b9      	b.n	800c9ba <_malloc_r+0x46>
 800ca46:	230c      	movs	r3, #12
 800ca48:	603b      	str	r3, [r7, #0]
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f000 f9ee 	bl	800ce2c <__malloc_unlock>
 800ca50:	e7a1      	b.n	800c996 <_malloc_r+0x22>
 800ca52:	6025      	str	r5, [r4, #0]
 800ca54:	e7de      	b.n	800ca14 <_malloc_r+0xa0>
 800ca56:	bf00      	nop
 800ca58:	20000984 	.word	0x20000984

0800ca5c <__ssputs_r>:
 800ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca60:	688e      	ldr	r6, [r1, #8]
 800ca62:	429e      	cmp	r6, r3
 800ca64:	4682      	mov	sl, r0
 800ca66:	460c      	mov	r4, r1
 800ca68:	4690      	mov	r8, r2
 800ca6a:	461f      	mov	r7, r3
 800ca6c:	d838      	bhi.n	800cae0 <__ssputs_r+0x84>
 800ca6e:	898a      	ldrh	r2, [r1, #12]
 800ca70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca74:	d032      	beq.n	800cadc <__ssputs_r+0x80>
 800ca76:	6825      	ldr	r5, [r4, #0]
 800ca78:	6909      	ldr	r1, [r1, #16]
 800ca7a:	eba5 0901 	sub.w	r9, r5, r1
 800ca7e:	6965      	ldr	r5, [r4, #20]
 800ca80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca88:	3301      	adds	r3, #1
 800ca8a:	444b      	add	r3, r9
 800ca8c:	106d      	asrs	r5, r5, #1
 800ca8e:	429d      	cmp	r5, r3
 800ca90:	bf38      	it	cc
 800ca92:	461d      	movcc	r5, r3
 800ca94:	0553      	lsls	r3, r2, #21
 800ca96:	d531      	bpl.n	800cafc <__ssputs_r+0xa0>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7ff ff6b 	bl	800c974 <_malloc_r>
 800ca9e:	4606      	mov	r6, r0
 800caa0:	b950      	cbnz	r0, 800cab8 <__ssputs_r+0x5c>
 800caa2:	230c      	movs	r3, #12
 800caa4:	f8ca 3000 	str.w	r3, [sl]
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab8:	6921      	ldr	r1, [r4, #16]
 800caba:	464a      	mov	r2, r9
 800cabc:	f7ff fa08 	bl	800bed0 <memcpy>
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caca:	81a3      	strh	r3, [r4, #12]
 800cacc:	6126      	str	r6, [r4, #16]
 800cace:	6165      	str	r5, [r4, #20]
 800cad0:	444e      	add	r6, r9
 800cad2:	eba5 0509 	sub.w	r5, r5, r9
 800cad6:	6026      	str	r6, [r4, #0]
 800cad8:	60a5      	str	r5, [r4, #8]
 800cada:	463e      	mov	r6, r7
 800cadc:	42be      	cmp	r6, r7
 800cade:	d900      	bls.n	800cae2 <__ssputs_r+0x86>
 800cae0:	463e      	mov	r6, r7
 800cae2:	6820      	ldr	r0, [r4, #0]
 800cae4:	4632      	mov	r2, r6
 800cae6:	4641      	mov	r1, r8
 800cae8:	f000 f980 	bl	800cdec <memmove>
 800caec:	68a3      	ldr	r3, [r4, #8]
 800caee:	1b9b      	subs	r3, r3, r6
 800caf0:	60a3      	str	r3, [r4, #8]
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	4433      	add	r3, r6
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	2000      	movs	r0, #0
 800cafa:	e7db      	b.n	800cab4 <__ssputs_r+0x58>
 800cafc:	462a      	mov	r2, r5
 800cafe:	f000 f99b 	bl	800ce38 <_realloc_r>
 800cb02:	4606      	mov	r6, r0
 800cb04:	2800      	cmp	r0, #0
 800cb06:	d1e1      	bne.n	800cacc <__ssputs_r+0x70>
 800cb08:	6921      	ldr	r1, [r4, #16]
 800cb0a:	4650      	mov	r0, sl
 800cb0c:	f7ff fec6 	bl	800c89c <_free_r>
 800cb10:	e7c7      	b.n	800caa2 <__ssputs_r+0x46>
	...

0800cb14 <_svfiprintf_r>:
 800cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	4698      	mov	r8, r3
 800cb1a:	898b      	ldrh	r3, [r1, #12]
 800cb1c:	061b      	lsls	r3, r3, #24
 800cb1e:	b09d      	sub	sp, #116	; 0x74
 800cb20:	4607      	mov	r7, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	4614      	mov	r4, r2
 800cb26:	d50e      	bpl.n	800cb46 <_svfiprintf_r+0x32>
 800cb28:	690b      	ldr	r3, [r1, #16]
 800cb2a:	b963      	cbnz	r3, 800cb46 <_svfiprintf_r+0x32>
 800cb2c:	2140      	movs	r1, #64	; 0x40
 800cb2e:	f7ff ff21 	bl	800c974 <_malloc_r>
 800cb32:	6028      	str	r0, [r5, #0]
 800cb34:	6128      	str	r0, [r5, #16]
 800cb36:	b920      	cbnz	r0, 800cb42 <_svfiprintf_r+0x2e>
 800cb38:	230c      	movs	r3, #12
 800cb3a:	603b      	str	r3, [r7, #0]
 800cb3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb40:	e0d1      	b.n	800cce6 <_svfiprintf_r+0x1d2>
 800cb42:	2340      	movs	r3, #64	; 0x40
 800cb44:	616b      	str	r3, [r5, #20]
 800cb46:	2300      	movs	r3, #0
 800cb48:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4a:	2320      	movs	r3, #32
 800cb4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb50:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb54:	2330      	movs	r3, #48	; 0x30
 800cb56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd00 <_svfiprintf_r+0x1ec>
 800cb5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb5e:	f04f 0901 	mov.w	r9, #1
 800cb62:	4623      	mov	r3, r4
 800cb64:	469a      	mov	sl, r3
 800cb66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6a:	b10a      	cbz	r2, 800cb70 <_svfiprintf_r+0x5c>
 800cb6c:	2a25      	cmp	r2, #37	; 0x25
 800cb6e:	d1f9      	bne.n	800cb64 <_svfiprintf_r+0x50>
 800cb70:	ebba 0b04 	subs.w	fp, sl, r4
 800cb74:	d00b      	beq.n	800cb8e <_svfiprintf_r+0x7a>
 800cb76:	465b      	mov	r3, fp
 800cb78:	4622      	mov	r2, r4
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	4638      	mov	r0, r7
 800cb7e:	f7ff ff6d 	bl	800ca5c <__ssputs_r>
 800cb82:	3001      	adds	r0, #1
 800cb84:	f000 80aa 	beq.w	800ccdc <_svfiprintf_r+0x1c8>
 800cb88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb8a:	445a      	add	r2, fp
 800cb8c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb8e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80a2 	beq.w	800ccdc <_svfiprintf_r+0x1c8>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba2:	f10a 0a01 	add.w	sl, sl, #1
 800cba6:	9304      	str	r3, [sp, #16]
 800cba8:	9307      	str	r3, [sp, #28]
 800cbaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbae:	931a      	str	r3, [sp, #104]	; 0x68
 800cbb0:	4654      	mov	r4, sl
 800cbb2:	2205      	movs	r2, #5
 800cbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb8:	4851      	ldr	r0, [pc, #324]	; (800cd00 <_svfiprintf_r+0x1ec>)
 800cbba:	f7f3 fb11 	bl	80001e0 <memchr>
 800cbbe:	9a04      	ldr	r2, [sp, #16]
 800cbc0:	b9d8      	cbnz	r0, 800cbfa <_svfiprintf_r+0xe6>
 800cbc2:	06d0      	lsls	r0, r2, #27
 800cbc4:	bf44      	itt	mi
 800cbc6:	2320      	movmi	r3, #32
 800cbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbcc:	0711      	lsls	r1, r2, #28
 800cbce:	bf44      	itt	mi
 800cbd0:	232b      	movmi	r3, #43	; 0x2b
 800cbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbda:	2b2a      	cmp	r3, #42	; 0x2a
 800cbdc:	d015      	beq.n	800cc0a <_svfiprintf_r+0xf6>
 800cbde:	9a07      	ldr	r2, [sp, #28]
 800cbe0:	4654      	mov	r4, sl
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	f04f 0c0a 	mov.w	ip, #10
 800cbe8:	4621      	mov	r1, r4
 800cbea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbee:	3b30      	subs	r3, #48	; 0x30
 800cbf0:	2b09      	cmp	r3, #9
 800cbf2:	d94e      	bls.n	800cc92 <_svfiprintf_r+0x17e>
 800cbf4:	b1b0      	cbz	r0, 800cc24 <_svfiprintf_r+0x110>
 800cbf6:	9207      	str	r2, [sp, #28]
 800cbf8:	e014      	b.n	800cc24 <_svfiprintf_r+0x110>
 800cbfa:	eba0 0308 	sub.w	r3, r0, r8
 800cbfe:	fa09 f303 	lsl.w	r3, r9, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	46a2      	mov	sl, r4
 800cc08:	e7d2      	b.n	800cbb0 <_svfiprintf_r+0x9c>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	1d19      	adds	r1, r3, #4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	9103      	str	r1, [sp, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	bfbb      	ittet	lt
 800cc16:	425b      	neglt	r3, r3
 800cc18:	f042 0202 	orrlt.w	r2, r2, #2
 800cc1c:	9307      	strge	r3, [sp, #28]
 800cc1e:	9307      	strlt	r3, [sp, #28]
 800cc20:	bfb8      	it	lt
 800cc22:	9204      	strlt	r2, [sp, #16]
 800cc24:	7823      	ldrb	r3, [r4, #0]
 800cc26:	2b2e      	cmp	r3, #46	; 0x2e
 800cc28:	d10c      	bne.n	800cc44 <_svfiprintf_r+0x130>
 800cc2a:	7863      	ldrb	r3, [r4, #1]
 800cc2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2e:	d135      	bne.n	800cc9c <_svfiprintf_r+0x188>
 800cc30:	9b03      	ldr	r3, [sp, #12]
 800cc32:	1d1a      	adds	r2, r3, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	9203      	str	r2, [sp, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	bfb8      	it	lt
 800cc3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc40:	3402      	adds	r4, #2
 800cc42:	9305      	str	r3, [sp, #20]
 800cc44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd10 <_svfiprintf_r+0x1fc>
 800cc48:	7821      	ldrb	r1, [r4, #0]
 800cc4a:	2203      	movs	r2, #3
 800cc4c:	4650      	mov	r0, sl
 800cc4e:	f7f3 fac7 	bl	80001e0 <memchr>
 800cc52:	b140      	cbz	r0, 800cc66 <_svfiprintf_r+0x152>
 800cc54:	2340      	movs	r3, #64	; 0x40
 800cc56:	eba0 000a 	sub.w	r0, r0, sl
 800cc5a:	fa03 f000 	lsl.w	r0, r3, r0
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	4303      	orrs	r3, r0
 800cc62:	3401      	adds	r4, #1
 800cc64:	9304      	str	r3, [sp, #16]
 800cc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6a:	4826      	ldr	r0, [pc, #152]	; (800cd04 <_svfiprintf_r+0x1f0>)
 800cc6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc70:	2206      	movs	r2, #6
 800cc72:	f7f3 fab5 	bl	80001e0 <memchr>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d038      	beq.n	800ccec <_svfiprintf_r+0x1d8>
 800cc7a:	4b23      	ldr	r3, [pc, #140]	; (800cd08 <_svfiprintf_r+0x1f4>)
 800cc7c:	bb1b      	cbnz	r3, 800ccc6 <_svfiprintf_r+0x1b2>
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	3307      	adds	r3, #7
 800cc82:	f023 0307 	bic.w	r3, r3, #7
 800cc86:	3308      	adds	r3, #8
 800cc88:	9303      	str	r3, [sp, #12]
 800cc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8c:	4433      	add	r3, r6
 800cc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc90:	e767      	b.n	800cb62 <_svfiprintf_r+0x4e>
 800cc92:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc96:	460c      	mov	r4, r1
 800cc98:	2001      	movs	r0, #1
 800cc9a:	e7a5      	b.n	800cbe8 <_svfiprintf_r+0xd4>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	3401      	adds	r4, #1
 800cca0:	9305      	str	r3, [sp, #20]
 800cca2:	4619      	mov	r1, r3
 800cca4:	f04f 0c0a 	mov.w	ip, #10
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccae:	3a30      	subs	r2, #48	; 0x30
 800ccb0:	2a09      	cmp	r2, #9
 800ccb2:	d903      	bls.n	800ccbc <_svfiprintf_r+0x1a8>
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d0c5      	beq.n	800cc44 <_svfiprintf_r+0x130>
 800ccb8:	9105      	str	r1, [sp, #20]
 800ccba:	e7c3      	b.n	800cc44 <_svfiprintf_r+0x130>
 800ccbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e7f0      	b.n	800cca8 <_svfiprintf_r+0x194>
 800ccc6:	ab03      	add	r3, sp, #12
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	462a      	mov	r2, r5
 800cccc:	4b0f      	ldr	r3, [pc, #60]	; (800cd0c <_svfiprintf_r+0x1f8>)
 800ccce:	a904      	add	r1, sp, #16
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7fc fa49 	bl	8009168 <_printf_float>
 800ccd6:	1c42      	adds	r2, r0, #1
 800ccd8:	4606      	mov	r6, r0
 800ccda:	d1d6      	bne.n	800cc8a <_svfiprintf_r+0x176>
 800ccdc:	89ab      	ldrh	r3, [r5, #12]
 800ccde:	065b      	lsls	r3, r3, #25
 800cce0:	f53f af2c 	bmi.w	800cb3c <_svfiprintf_r+0x28>
 800cce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cce6:	b01d      	add	sp, #116	; 0x74
 800cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	ab03      	add	r3, sp, #12
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	4b06      	ldr	r3, [pc, #24]	; (800cd0c <_svfiprintf_r+0x1f8>)
 800ccf4:	a904      	add	r1, sp, #16
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	f7fc fcda 	bl	80096b0 <_printf_i>
 800ccfc:	e7eb      	b.n	800ccd6 <_svfiprintf_r+0x1c2>
 800ccfe:	bf00      	nop
 800cd00:	0800ee3c 	.word	0x0800ee3c
 800cd04:	0800ee46 	.word	0x0800ee46
 800cd08:	08009169 	.word	0x08009169
 800cd0c:	0800ca5d 	.word	0x0800ca5d
 800cd10:	0800ee42 	.word	0x0800ee42
 800cd14:	00000000 	.word	0x00000000

0800cd18 <nan>:
 800cd18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cd20 <nan+0x8>
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	00000000 	.word	0x00000000
 800cd24:	7ff80000 	.word	0x7ff80000

0800cd28 <_sbrk_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d06      	ldr	r5, [pc, #24]	; (800cd44 <_sbrk_r+0x1c>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	f7f6 f894 	bl	8002e60 <_sbrk>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_sbrk_r+0x1a>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_sbrk_r+0x1a>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	2000098c 	.word	0x2000098c

0800cd48 <strncmp>:
 800cd48:	b510      	push	{r4, lr}
 800cd4a:	b17a      	cbz	r2, 800cd6c <strncmp+0x24>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	3901      	subs	r1, #1
 800cd50:	1884      	adds	r4, r0, r2
 800cd52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd5a:	4290      	cmp	r0, r2
 800cd5c:	d101      	bne.n	800cd62 <strncmp+0x1a>
 800cd5e:	42a3      	cmp	r3, r4
 800cd60:	d101      	bne.n	800cd66 <strncmp+0x1e>
 800cd62:	1a80      	subs	r0, r0, r2
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d1f3      	bne.n	800cd52 <strncmp+0xa>
 800cd6a:	e7fa      	b.n	800cd62 <strncmp+0x1a>
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	e7f9      	b.n	800cd64 <strncmp+0x1c>

0800cd70 <__ascii_wctomb>:
 800cd70:	b149      	cbz	r1, 800cd86 <__ascii_wctomb+0x16>
 800cd72:	2aff      	cmp	r2, #255	; 0xff
 800cd74:	bf85      	ittet	hi
 800cd76:	238a      	movhi	r3, #138	; 0x8a
 800cd78:	6003      	strhi	r3, [r0, #0]
 800cd7a:	700a      	strbls	r2, [r1, #0]
 800cd7c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd80:	bf98      	it	ls
 800cd82:	2001      	movls	r0, #1
 800cd84:	4770      	bx	lr
 800cd86:	4608      	mov	r0, r1
 800cd88:	4770      	bx	lr
	...

0800cd8c <__assert_func>:
 800cd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd8e:	4614      	mov	r4, r2
 800cd90:	461a      	mov	r2, r3
 800cd92:	4b09      	ldr	r3, [pc, #36]	; (800cdb8 <__assert_func+0x2c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4605      	mov	r5, r0
 800cd98:	68d8      	ldr	r0, [r3, #12]
 800cd9a:	b14c      	cbz	r4, 800cdb0 <__assert_func+0x24>
 800cd9c:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <__assert_func+0x30>)
 800cd9e:	9100      	str	r1, [sp, #0]
 800cda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cda4:	4906      	ldr	r1, [pc, #24]	; (800cdc0 <__assert_func+0x34>)
 800cda6:	462b      	mov	r3, r5
 800cda8:	f000 f80e 	bl	800cdc8 <fiprintf>
 800cdac:	f000 fa8c 	bl	800d2c8 <abort>
 800cdb0:	4b04      	ldr	r3, [pc, #16]	; (800cdc4 <__assert_func+0x38>)
 800cdb2:	461c      	mov	r4, r3
 800cdb4:	e7f3      	b.n	800cd9e <__assert_func+0x12>
 800cdb6:	bf00      	nop
 800cdb8:	20000108 	.word	0x20000108
 800cdbc:	0800ee4d 	.word	0x0800ee4d
 800cdc0:	0800ee5a 	.word	0x0800ee5a
 800cdc4:	0800ee88 	.word	0x0800ee88

0800cdc8 <fiprintf>:
 800cdc8:	b40e      	push	{r1, r2, r3}
 800cdca:	b503      	push	{r0, r1, lr}
 800cdcc:	4601      	mov	r1, r0
 800cdce:	ab03      	add	r3, sp, #12
 800cdd0:	4805      	ldr	r0, [pc, #20]	; (800cde8 <fiprintf+0x20>)
 800cdd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd6:	6800      	ldr	r0, [r0, #0]
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	f000 f885 	bl	800cee8 <_vfiprintf_r>
 800cdde:	b002      	add	sp, #8
 800cde0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde4:	b003      	add	sp, #12
 800cde6:	4770      	bx	lr
 800cde8:	20000108 	.word	0x20000108

0800cdec <memmove>:
 800cdec:	4288      	cmp	r0, r1
 800cdee:	b510      	push	{r4, lr}
 800cdf0:	eb01 0402 	add.w	r4, r1, r2
 800cdf4:	d902      	bls.n	800cdfc <memmove+0x10>
 800cdf6:	4284      	cmp	r4, r0
 800cdf8:	4623      	mov	r3, r4
 800cdfa:	d807      	bhi.n	800ce0c <memmove+0x20>
 800cdfc:	1e43      	subs	r3, r0, #1
 800cdfe:	42a1      	cmp	r1, r4
 800ce00:	d008      	beq.n	800ce14 <memmove+0x28>
 800ce02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce0a:	e7f8      	b.n	800cdfe <memmove+0x12>
 800ce0c:	4402      	add	r2, r0
 800ce0e:	4601      	mov	r1, r0
 800ce10:	428a      	cmp	r2, r1
 800ce12:	d100      	bne.n	800ce16 <memmove+0x2a>
 800ce14:	bd10      	pop	{r4, pc}
 800ce16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce1e:	e7f7      	b.n	800ce10 <memmove+0x24>

0800ce20 <__malloc_lock>:
 800ce20:	4801      	ldr	r0, [pc, #4]	; (800ce28 <__malloc_lock+0x8>)
 800ce22:	f000 bc11 	b.w	800d648 <__retarget_lock_acquire_recursive>
 800ce26:	bf00      	nop
 800ce28:	20000990 	.word	0x20000990

0800ce2c <__malloc_unlock>:
 800ce2c:	4801      	ldr	r0, [pc, #4]	; (800ce34 <__malloc_unlock+0x8>)
 800ce2e:	f000 bc0c 	b.w	800d64a <__retarget_lock_release_recursive>
 800ce32:	bf00      	nop
 800ce34:	20000990 	.word	0x20000990

0800ce38 <_realloc_r>:
 800ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	4614      	mov	r4, r2
 800ce40:	460e      	mov	r6, r1
 800ce42:	b921      	cbnz	r1, 800ce4e <_realloc_r+0x16>
 800ce44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	4611      	mov	r1, r2
 800ce4a:	f7ff bd93 	b.w	800c974 <_malloc_r>
 800ce4e:	b92a      	cbnz	r2, 800ce5c <_realloc_r+0x24>
 800ce50:	f7ff fd24 	bl	800c89c <_free_r>
 800ce54:	4625      	mov	r5, r4
 800ce56:	4628      	mov	r0, r5
 800ce58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5c:	f000 fc5c 	bl	800d718 <_malloc_usable_size_r>
 800ce60:	4284      	cmp	r4, r0
 800ce62:	4607      	mov	r7, r0
 800ce64:	d802      	bhi.n	800ce6c <_realloc_r+0x34>
 800ce66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce6a:	d812      	bhi.n	800ce92 <_realloc_r+0x5a>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f7ff fd80 	bl	800c974 <_malloc_r>
 800ce74:	4605      	mov	r5, r0
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d0ed      	beq.n	800ce56 <_realloc_r+0x1e>
 800ce7a:	42bc      	cmp	r4, r7
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4631      	mov	r1, r6
 800ce80:	bf28      	it	cs
 800ce82:	463a      	movcs	r2, r7
 800ce84:	f7ff f824 	bl	800bed0 <memcpy>
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	f7ff fd06 	bl	800c89c <_free_r>
 800ce90:	e7e1      	b.n	800ce56 <_realloc_r+0x1e>
 800ce92:	4635      	mov	r5, r6
 800ce94:	e7df      	b.n	800ce56 <_realloc_r+0x1e>

0800ce96 <__sfputc_r>:
 800ce96:	6893      	ldr	r3, [r2, #8]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	b410      	push	{r4}
 800ce9e:	6093      	str	r3, [r2, #8]
 800cea0:	da08      	bge.n	800ceb4 <__sfputc_r+0x1e>
 800cea2:	6994      	ldr	r4, [r2, #24]
 800cea4:	42a3      	cmp	r3, r4
 800cea6:	db01      	blt.n	800ceac <__sfputc_r+0x16>
 800cea8:	290a      	cmp	r1, #10
 800ceaa:	d103      	bne.n	800ceb4 <__sfputc_r+0x1e>
 800ceac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceb0:	f000 b94a 	b.w	800d148 <__swbuf_r>
 800ceb4:	6813      	ldr	r3, [r2, #0]
 800ceb6:	1c58      	adds	r0, r3, #1
 800ceb8:	6010      	str	r0, [r2, #0]
 800ceba:	7019      	strb	r1, [r3, #0]
 800cebc:	4608      	mov	r0, r1
 800cebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <__sfputs_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	4606      	mov	r6, r0
 800cec8:	460f      	mov	r7, r1
 800ceca:	4614      	mov	r4, r2
 800cecc:	18d5      	adds	r5, r2, r3
 800cece:	42ac      	cmp	r4, r5
 800ced0:	d101      	bne.n	800ced6 <__sfputs_r+0x12>
 800ced2:	2000      	movs	r0, #0
 800ced4:	e007      	b.n	800cee6 <__sfputs_r+0x22>
 800ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceda:	463a      	mov	r2, r7
 800cedc:	4630      	mov	r0, r6
 800cede:	f7ff ffda 	bl	800ce96 <__sfputc_r>
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	d1f3      	bne.n	800cece <__sfputs_r+0xa>
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cee8 <_vfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	460d      	mov	r5, r1
 800ceee:	b09d      	sub	sp, #116	; 0x74
 800cef0:	4614      	mov	r4, r2
 800cef2:	4698      	mov	r8, r3
 800cef4:	4606      	mov	r6, r0
 800cef6:	b118      	cbz	r0, 800cf00 <_vfiprintf_r+0x18>
 800cef8:	6983      	ldr	r3, [r0, #24]
 800cefa:	b90b      	cbnz	r3, 800cf00 <_vfiprintf_r+0x18>
 800cefc:	f000 fb06 	bl	800d50c <__sinit>
 800cf00:	4b89      	ldr	r3, [pc, #548]	; (800d128 <_vfiprintf_r+0x240>)
 800cf02:	429d      	cmp	r5, r3
 800cf04:	d11b      	bne.n	800cf3e <_vfiprintf_r+0x56>
 800cf06:	6875      	ldr	r5, [r6, #4]
 800cf08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf0a:	07d9      	lsls	r1, r3, #31
 800cf0c:	d405      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	059a      	lsls	r2, r3, #22
 800cf12:	d402      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf16:	f000 fb97 	bl	800d648 <__retarget_lock_acquire_recursive>
 800cf1a:	89ab      	ldrh	r3, [r5, #12]
 800cf1c:	071b      	lsls	r3, r3, #28
 800cf1e:	d501      	bpl.n	800cf24 <_vfiprintf_r+0x3c>
 800cf20:	692b      	ldr	r3, [r5, #16]
 800cf22:	b9eb      	cbnz	r3, 800cf60 <_vfiprintf_r+0x78>
 800cf24:	4629      	mov	r1, r5
 800cf26:	4630      	mov	r0, r6
 800cf28:	f000 f960 	bl	800d1ec <__swsetup_r>
 800cf2c:	b1c0      	cbz	r0, 800cf60 <_vfiprintf_r+0x78>
 800cf2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf30:	07dc      	lsls	r4, r3, #31
 800cf32:	d50e      	bpl.n	800cf52 <_vfiprintf_r+0x6a>
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	b01d      	add	sp, #116	; 0x74
 800cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	4b7b      	ldr	r3, [pc, #492]	; (800d12c <_vfiprintf_r+0x244>)
 800cf40:	429d      	cmp	r5, r3
 800cf42:	d101      	bne.n	800cf48 <_vfiprintf_r+0x60>
 800cf44:	68b5      	ldr	r5, [r6, #8]
 800cf46:	e7df      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf48:	4b79      	ldr	r3, [pc, #484]	; (800d130 <_vfiprintf_r+0x248>)
 800cf4a:	429d      	cmp	r5, r3
 800cf4c:	bf08      	it	eq
 800cf4e:	68f5      	ldreq	r5, [r6, #12]
 800cf50:	e7da      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	0598      	lsls	r0, r3, #22
 800cf56:	d4ed      	bmi.n	800cf34 <_vfiprintf_r+0x4c>
 800cf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf5a:	f000 fb76 	bl	800d64a <__retarget_lock_release_recursive>
 800cf5e:	e7e9      	b.n	800cf34 <_vfiprintf_r+0x4c>
 800cf60:	2300      	movs	r3, #0
 800cf62:	9309      	str	r3, [sp, #36]	; 0x24
 800cf64:	2320      	movs	r3, #32
 800cf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf6e:	2330      	movs	r3, #48	; 0x30
 800cf70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d134 <_vfiprintf_r+0x24c>
 800cf74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf78:	f04f 0901 	mov.w	r9, #1
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	469a      	mov	sl, r3
 800cf80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf84:	b10a      	cbz	r2, 800cf8a <_vfiprintf_r+0xa2>
 800cf86:	2a25      	cmp	r2, #37	; 0x25
 800cf88:	d1f9      	bne.n	800cf7e <_vfiprintf_r+0x96>
 800cf8a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf8e:	d00b      	beq.n	800cfa8 <_vfiprintf_r+0xc0>
 800cf90:	465b      	mov	r3, fp
 800cf92:	4622      	mov	r2, r4
 800cf94:	4629      	mov	r1, r5
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ff94 	bl	800cec4 <__sfputs_r>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f000 80aa 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa4:	445a      	add	r2, fp
 800cfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 80a2 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfbc:	f10a 0a01 	add.w	sl, sl, #1
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	9307      	str	r3, [sp, #28]
 800cfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfca:	4654      	mov	r4, sl
 800cfcc:	2205      	movs	r2, #5
 800cfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd2:	4858      	ldr	r0, [pc, #352]	; (800d134 <_vfiprintf_r+0x24c>)
 800cfd4:	f7f3 f904 	bl	80001e0 <memchr>
 800cfd8:	9a04      	ldr	r2, [sp, #16]
 800cfda:	b9d8      	cbnz	r0, 800d014 <_vfiprintf_r+0x12c>
 800cfdc:	06d1      	lsls	r1, r2, #27
 800cfde:	bf44      	itt	mi
 800cfe0:	2320      	movmi	r3, #32
 800cfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe6:	0713      	lsls	r3, r2, #28
 800cfe8:	bf44      	itt	mi
 800cfea:	232b      	movmi	r3, #43	; 0x2b
 800cfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff0:	f89a 3000 	ldrb.w	r3, [sl]
 800cff4:	2b2a      	cmp	r3, #42	; 0x2a
 800cff6:	d015      	beq.n	800d024 <_vfiprintf_r+0x13c>
 800cff8:	9a07      	ldr	r2, [sp, #28]
 800cffa:	4654      	mov	r4, sl
 800cffc:	2000      	movs	r0, #0
 800cffe:	f04f 0c0a 	mov.w	ip, #10
 800d002:	4621      	mov	r1, r4
 800d004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d008:	3b30      	subs	r3, #48	; 0x30
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d94e      	bls.n	800d0ac <_vfiprintf_r+0x1c4>
 800d00e:	b1b0      	cbz	r0, 800d03e <_vfiprintf_r+0x156>
 800d010:	9207      	str	r2, [sp, #28]
 800d012:	e014      	b.n	800d03e <_vfiprintf_r+0x156>
 800d014:	eba0 0308 	sub.w	r3, r0, r8
 800d018:	fa09 f303 	lsl.w	r3, r9, r3
 800d01c:	4313      	orrs	r3, r2
 800d01e:	9304      	str	r3, [sp, #16]
 800d020:	46a2      	mov	sl, r4
 800d022:	e7d2      	b.n	800cfca <_vfiprintf_r+0xe2>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	1d19      	adds	r1, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	9103      	str	r1, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfbb      	ittet	lt
 800d030:	425b      	neglt	r3, r3
 800d032:	f042 0202 	orrlt.w	r2, r2, #2
 800d036:	9307      	strge	r3, [sp, #28]
 800d038:	9307      	strlt	r3, [sp, #28]
 800d03a:	bfb8      	it	lt
 800d03c:	9204      	strlt	r2, [sp, #16]
 800d03e:	7823      	ldrb	r3, [r4, #0]
 800d040:	2b2e      	cmp	r3, #46	; 0x2e
 800d042:	d10c      	bne.n	800d05e <_vfiprintf_r+0x176>
 800d044:	7863      	ldrb	r3, [r4, #1]
 800d046:	2b2a      	cmp	r3, #42	; 0x2a
 800d048:	d135      	bne.n	800d0b6 <_vfiprintf_r+0x1ce>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	1d1a      	adds	r2, r3, #4
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	9203      	str	r2, [sp, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	bfb8      	it	lt
 800d056:	f04f 33ff 	movlt.w	r3, #4294967295
 800d05a:	3402      	adds	r4, #2
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d144 <_vfiprintf_r+0x25c>
 800d062:	7821      	ldrb	r1, [r4, #0]
 800d064:	2203      	movs	r2, #3
 800d066:	4650      	mov	r0, sl
 800d068:	f7f3 f8ba 	bl	80001e0 <memchr>
 800d06c:	b140      	cbz	r0, 800d080 <_vfiprintf_r+0x198>
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	eba0 000a 	sub.w	r0, r0, sl
 800d074:	fa03 f000 	lsl.w	r0, r3, r0
 800d078:	9b04      	ldr	r3, [sp, #16]
 800d07a:	4303      	orrs	r3, r0
 800d07c:	3401      	adds	r4, #1
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d084:	482c      	ldr	r0, [pc, #176]	; (800d138 <_vfiprintf_r+0x250>)
 800d086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d08a:	2206      	movs	r2, #6
 800d08c:	f7f3 f8a8 	bl	80001e0 <memchr>
 800d090:	2800      	cmp	r0, #0
 800d092:	d03f      	beq.n	800d114 <_vfiprintf_r+0x22c>
 800d094:	4b29      	ldr	r3, [pc, #164]	; (800d13c <_vfiprintf_r+0x254>)
 800d096:	bb1b      	cbnz	r3, 800d0e0 <_vfiprintf_r+0x1f8>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	3307      	adds	r3, #7
 800d09c:	f023 0307 	bic.w	r3, r3, #7
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	443b      	add	r3, r7
 800d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0aa:	e767      	b.n	800cf7c <_vfiprintf_r+0x94>
 800d0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e7a5      	b.n	800d002 <_vfiprintf_r+0x11a>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	3401      	adds	r4, #1
 800d0ba:	9305      	str	r3, [sp, #20]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f04f 0c0a 	mov.w	ip, #10
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c8:	3a30      	subs	r2, #48	; 0x30
 800d0ca:	2a09      	cmp	r2, #9
 800d0cc:	d903      	bls.n	800d0d6 <_vfiprintf_r+0x1ee>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0c5      	beq.n	800d05e <_vfiprintf_r+0x176>
 800d0d2:	9105      	str	r1, [sp, #20]
 800d0d4:	e7c3      	b.n	800d05e <_vfiprintf_r+0x176>
 800d0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0da:	4604      	mov	r4, r0
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e7f0      	b.n	800d0c2 <_vfiprintf_r+0x1da>
 800d0e0:	ab03      	add	r3, sp, #12
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	4b16      	ldr	r3, [pc, #88]	; (800d140 <_vfiprintf_r+0x258>)
 800d0e8:	a904      	add	r1, sp, #16
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7fc f83c 	bl	8009168 <_printf_float>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	1c78      	adds	r0, r7, #1
 800d0f4:	d1d6      	bne.n	800d0a4 <_vfiprintf_r+0x1bc>
 800d0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0f8:	07d9      	lsls	r1, r3, #31
 800d0fa:	d405      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d0fc:	89ab      	ldrh	r3, [r5, #12]
 800d0fe:	059a      	lsls	r2, r3, #22
 800d100:	d402      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d104:	f000 faa1 	bl	800d64a <__retarget_lock_release_recursive>
 800d108:	89ab      	ldrh	r3, [r5, #12]
 800d10a:	065b      	lsls	r3, r3, #25
 800d10c:	f53f af12 	bmi.w	800cf34 <_vfiprintf_r+0x4c>
 800d110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d112:	e711      	b.n	800cf38 <_vfiprintf_r+0x50>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b09      	ldr	r3, [pc, #36]	; (800d140 <_vfiprintf_r+0x258>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4630      	mov	r0, r6
 800d120:	f7fc fac6 	bl	80096b0 <_printf_i>
 800d124:	e7e4      	b.n	800d0f0 <_vfiprintf_r+0x208>
 800d126:	bf00      	nop
 800d128:	0800eeac 	.word	0x0800eeac
 800d12c:	0800eecc 	.word	0x0800eecc
 800d130:	0800ee8c 	.word	0x0800ee8c
 800d134:	0800ee3c 	.word	0x0800ee3c
 800d138:	0800ee46 	.word	0x0800ee46
 800d13c:	08009169 	.word	0x08009169
 800d140:	0800cec5 	.word	0x0800cec5
 800d144:	0800ee42 	.word	0x0800ee42

0800d148 <__swbuf_r>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	460e      	mov	r6, r1
 800d14c:	4614      	mov	r4, r2
 800d14e:	4605      	mov	r5, r0
 800d150:	b118      	cbz	r0, 800d15a <__swbuf_r+0x12>
 800d152:	6983      	ldr	r3, [r0, #24]
 800d154:	b90b      	cbnz	r3, 800d15a <__swbuf_r+0x12>
 800d156:	f000 f9d9 	bl	800d50c <__sinit>
 800d15a:	4b21      	ldr	r3, [pc, #132]	; (800d1e0 <__swbuf_r+0x98>)
 800d15c:	429c      	cmp	r4, r3
 800d15e:	d12b      	bne.n	800d1b8 <__swbuf_r+0x70>
 800d160:	686c      	ldr	r4, [r5, #4]
 800d162:	69a3      	ldr	r3, [r4, #24]
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	071a      	lsls	r2, r3, #28
 800d16a:	d52f      	bpl.n	800d1cc <__swbuf_r+0x84>
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	b36b      	cbz	r3, 800d1cc <__swbuf_r+0x84>
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	6820      	ldr	r0, [r4, #0]
 800d174:	1ac0      	subs	r0, r0, r3
 800d176:	6963      	ldr	r3, [r4, #20]
 800d178:	b2f6      	uxtb	r6, r6
 800d17a:	4283      	cmp	r3, r0
 800d17c:	4637      	mov	r7, r6
 800d17e:	dc04      	bgt.n	800d18a <__swbuf_r+0x42>
 800d180:	4621      	mov	r1, r4
 800d182:	4628      	mov	r0, r5
 800d184:	f000 f92e 	bl	800d3e4 <_fflush_r>
 800d188:	bb30      	cbnz	r0, 800d1d8 <__swbuf_r+0x90>
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	60a3      	str	r3, [r4, #8]
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	6022      	str	r2, [r4, #0]
 800d196:	701e      	strb	r6, [r3, #0]
 800d198:	6963      	ldr	r3, [r4, #20]
 800d19a:	3001      	adds	r0, #1
 800d19c:	4283      	cmp	r3, r0
 800d19e:	d004      	beq.n	800d1aa <__swbuf_r+0x62>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	07db      	lsls	r3, r3, #31
 800d1a4:	d506      	bpl.n	800d1b4 <__swbuf_r+0x6c>
 800d1a6:	2e0a      	cmp	r6, #10
 800d1a8:	d104      	bne.n	800d1b4 <__swbuf_r+0x6c>
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 f919 	bl	800d3e4 <_fflush_r>
 800d1b2:	b988      	cbnz	r0, 800d1d8 <__swbuf_r+0x90>
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <__swbuf_r+0x9c>)
 800d1ba:	429c      	cmp	r4, r3
 800d1bc:	d101      	bne.n	800d1c2 <__swbuf_r+0x7a>
 800d1be:	68ac      	ldr	r4, [r5, #8]
 800d1c0:	e7cf      	b.n	800d162 <__swbuf_r+0x1a>
 800d1c2:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <__swbuf_r+0xa0>)
 800d1c4:	429c      	cmp	r4, r3
 800d1c6:	bf08      	it	eq
 800d1c8:	68ec      	ldreq	r4, [r5, #12]
 800d1ca:	e7ca      	b.n	800d162 <__swbuf_r+0x1a>
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f000 f80c 	bl	800d1ec <__swsetup_r>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d0cb      	beq.n	800d170 <__swbuf_r+0x28>
 800d1d8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1dc:	e7ea      	b.n	800d1b4 <__swbuf_r+0x6c>
 800d1de:	bf00      	nop
 800d1e0:	0800eeac 	.word	0x0800eeac
 800d1e4:	0800eecc 	.word	0x0800eecc
 800d1e8:	0800ee8c 	.word	0x0800ee8c

0800d1ec <__swsetup_r>:
 800d1ec:	4b32      	ldr	r3, [pc, #200]	; (800d2b8 <__swsetup_r+0xcc>)
 800d1ee:	b570      	push	{r4, r5, r6, lr}
 800d1f0:	681d      	ldr	r5, [r3, #0]
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	b125      	cbz	r5, 800d202 <__swsetup_r+0x16>
 800d1f8:	69ab      	ldr	r3, [r5, #24]
 800d1fa:	b913      	cbnz	r3, 800d202 <__swsetup_r+0x16>
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f000 f985 	bl	800d50c <__sinit>
 800d202:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <__swsetup_r+0xd0>)
 800d204:	429c      	cmp	r4, r3
 800d206:	d10f      	bne.n	800d228 <__swsetup_r+0x3c>
 800d208:	686c      	ldr	r4, [r5, #4]
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d210:	0719      	lsls	r1, r3, #28
 800d212:	d42c      	bmi.n	800d26e <__swsetup_r+0x82>
 800d214:	06dd      	lsls	r5, r3, #27
 800d216:	d411      	bmi.n	800d23c <__swsetup_r+0x50>
 800d218:	2309      	movs	r3, #9
 800d21a:	6033      	str	r3, [r6, #0]
 800d21c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	f04f 30ff 	mov.w	r0, #4294967295
 800d226:	e03e      	b.n	800d2a6 <__swsetup_r+0xba>
 800d228:	4b25      	ldr	r3, [pc, #148]	; (800d2c0 <__swsetup_r+0xd4>)
 800d22a:	429c      	cmp	r4, r3
 800d22c:	d101      	bne.n	800d232 <__swsetup_r+0x46>
 800d22e:	68ac      	ldr	r4, [r5, #8]
 800d230:	e7eb      	b.n	800d20a <__swsetup_r+0x1e>
 800d232:	4b24      	ldr	r3, [pc, #144]	; (800d2c4 <__swsetup_r+0xd8>)
 800d234:	429c      	cmp	r4, r3
 800d236:	bf08      	it	eq
 800d238:	68ec      	ldreq	r4, [r5, #12]
 800d23a:	e7e6      	b.n	800d20a <__swsetup_r+0x1e>
 800d23c:	0758      	lsls	r0, r3, #29
 800d23e:	d512      	bpl.n	800d266 <__swsetup_r+0x7a>
 800d240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d242:	b141      	cbz	r1, 800d256 <__swsetup_r+0x6a>
 800d244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d248:	4299      	cmp	r1, r3
 800d24a:	d002      	beq.n	800d252 <__swsetup_r+0x66>
 800d24c:	4630      	mov	r0, r6
 800d24e:	f7ff fb25 	bl	800c89c <_free_r>
 800d252:	2300      	movs	r3, #0
 800d254:	6363      	str	r3, [r4, #52]	; 0x34
 800d256:	89a3      	ldrh	r3, [r4, #12]
 800d258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d25c:	81a3      	strh	r3, [r4, #12]
 800d25e:	2300      	movs	r3, #0
 800d260:	6063      	str	r3, [r4, #4]
 800d262:	6923      	ldr	r3, [r4, #16]
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f043 0308 	orr.w	r3, r3, #8
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	6923      	ldr	r3, [r4, #16]
 800d270:	b94b      	cbnz	r3, 800d286 <__swsetup_r+0x9a>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d27c:	d003      	beq.n	800d286 <__swsetup_r+0x9a>
 800d27e:	4621      	mov	r1, r4
 800d280:	4630      	mov	r0, r6
 800d282:	f000 fa09 	bl	800d698 <__smakebuf_r>
 800d286:	89a0      	ldrh	r0, [r4, #12]
 800d288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d28c:	f010 0301 	ands.w	r3, r0, #1
 800d290:	d00a      	beq.n	800d2a8 <__swsetup_r+0xbc>
 800d292:	2300      	movs	r3, #0
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	6963      	ldr	r3, [r4, #20]
 800d298:	425b      	negs	r3, r3
 800d29a:	61a3      	str	r3, [r4, #24]
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	b943      	cbnz	r3, 800d2b2 <__swsetup_r+0xc6>
 800d2a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2a4:	d1ba      	bne.n	800d21c <__swsetup_r+0x30>
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	0781      	lsls	r1, r0, #30
 800d2aa:	bf58      	it	pl
 800d2ac:	6963      	ldrpl	r3, [r4, #20]
 800d2ae:	60a3      	str	r3, [r4, #8]
 800d2b0:	e7f4      	b.n	800d29c <__swsetup_r+0xb0>
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	e7f7      	b.n	800d2a6 <__swsetup_r+0xba>
 800d2b6:	bf00      	nop
 800d2b8:	20000108 	.word	0x20000108
 800d2bc:	0800eeac 	.word	0x0800eeac
 800d2c0:	0800eecc 	.word	0x0800eecc
 800d2c4:	0800ee8c 	.word	0x0800ee8c

0800d2c8 <abort>:
 800d2c8:	b508      	push	{r3, lr}
 800d2ca:	2006      	movs	r0, #6
 800d2cc:	f000 fa54 	bl	800d778 <raise>
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	f7f5 fd4d 	bl	8002d70 <_exit>
	...

0800d2d8 <__sflush_r>:
 800d2d8:	898a      	ldrh	r2, [r1, #12]
 800d2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2de:	4605      	mov	r5, r0
 800d2e0:	0710      	lsls	r0, r2, #28
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	d458      	bmi.n	800d398 <__sflush_r+0xc0>
 800d2e6:	684b      	ldr	r3, [r1, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dc05      	bgt.n	800d2f8 <__sflush_r+0x20>
 800d2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	dc02      	bgt.n	800d2f8 <__sflush_r+0x20>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2fa:	2e00      	cmp	r6, #0
 800d2fc:	d0f9      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d304:	682f      	ldr	r7, [r5, #0]
 800d306:	602b      	str	r3, [r5, #0]
 800d308:	d032      	beq.n	800d370 <__sflush_r+0x98>
 800d30a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	075a      	lsls	r2, r3, #29
 800d310:	d505      	bpl.n	800d31e <__sflush_r+0x46>
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	1ac0      	subs	r0, r0, r3
 800d316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d318:	b10b      	cbz	r3, 800d31e <__sflush_r+0x46>
 800d31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d31c:	1ac0      	subs	r0, r0, r3
 800d31e:	2300      	movs	r3, #0
 800d320:	4602      	mov	r2, r0
 800d322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d324:	6a21      	ldr	r1, [r4, #32]
 800d326:	4628      	mov	r0, r5
 800d328:	47b0      	blx	r6
 800d32a:	1c43      	adds	r3, r0, #1
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	d106      	bne.n	800d33e <__sflush_r+0x66>
 800d330:	6829      	ldr	r1, [r5, #0]
 800d332:	291d      	cmp	r1, #29
 800d334:	d82c      	bhi.n	800d390 <__sflush_r+0xb8>
 800d336:	4a2a      	ldr	r2, [pc, #168]	; (800d3e0 <__sflush_r+0x108>)
 800d338:	40ca      	lsrs	r2, r1
 800d33a:	07d6      	lsls	r6, r2, #31
 800d33c:	d528      	bpl.n	800d390 <__sflush_r+0xb8>
 800d33e:	2200      	movs	r2, #0
 800d340:	6062      	str	r2, [r4, #4]
 800d342:	04d9      	lsls	r1, r3, #19
 800d344:	6922      	ldr	r2, [r4, #16]
 800d346:	6022      	str	r2, [r4, #0]
 800d348:	d504      	bpl.n	800d354 <__sflush_r+0x7c>
 800d34a:	1c42      	adds	r2, r0, #1
 800d34c:	d101      	bne.n	800d352 <__sflush_r+0x7a>
 800d34e:	682b      	ldr	r3, [r5, #0]
 800d350:	b903      	cbnz	r3, 800d354 <__sflush_r+0x7c>
 800d352:	6560      	str	r0, [r4, #84]	; 0x54
 800d354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d356:	602f      	str	r7, [r5, #0]
 800d358:	2900      	cmp	r1, #0
 800d35a:	d0ca      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d35c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d360:	4299      	cmp	r1, r3
 800d362:	d002      	beq.n	800d36a <__sflush_r+0x92>
 800d364:	4628      	mov	r0, r5
 800d366:	f7ff fa99 	bl	800c89c <_free_r>
 800d36a:	2000      	movs	r0, #0
 800d36c:	6360      	str	r0, [r4, #52]	; 0x34
 800d36e:	e7c1      	b.n	800d2f4 <__sflush_r+0x1c>
 800d370:	6a21      	ldr	r1, [r4, #32]
 800d372:	2301      	movs	r3, #1
 800d374:	4628      	mov	r0, r5
 800d376:	47b0      	blx	r6
 800d378:	1c41      	adds	r1, r0, #1
 800d37a:	d1c7      	bne.n	800d30c <__sflush_r+0x34>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0c4      	beq.n	800d30c <__sflush_r+0x34>
 800d382:	2b1d      	cmp	r3, #29
 800d384:	d001      	beq.n	800d38a <__sflush_r+0xb2>
 800d386:	2b16      	cmp	r3, #22
 800d388:	d101      	bne.n	800d38e <__sflush_r+0xb6>
 800d38a:	602f      	str	r7, [r5, #0]
 800d38c:	e7b1      	b.n	800d2f2 <__sflush_r+0x1a>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	e7ad      	b.n	800d2f4 <__sflush_r+0x1c>
 800d398:	690f      	ldr	r7, [r1, #16]
 800d39a:	2f00      	cmp	r7, #0
 800d39c:	d0a9      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d39e:	0793      	lsls	r3, r2, #30
 800d3a0:	680e      	ldr	r6, [r1, #0]
 800d3a2:	bf08      	it	eq
 800d3a4:	694b      	ldreq	r3, [r1, #20]
 800d3a6:	600f      	str	r7, [r1, #0]
 800d3a8:	bf18      	it	ne
 800d3aa:	2300      	movne	r3, #0
 800d3ac:	eba6 0807 	sub.w	r8, r6, r7
 800d3b0:	608b      	str	r3, [r1, #8]
 800d3b2:	f1b8 0f00 	cmp.w	r8, #0
 800d3b6:	dd9c      	ble.n	800d2f2 <__sflush_r+0x1a>
 800d3b8:	6a21      	ldr	r1, [r4, #32]
 800d3ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3bc:	4643      	mov	r3, r8
 800d3be:	463a      	mov	r2, r7
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	47b0      	blx	r6
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	dc06      	bgt.n	800d3d6 <__sflush_r+0xfe>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d4:	e78e      	b.n	800d2f4 <__sflush_r+0x1c>
 800d3d6:	4407      	add	r7, r0
 800d3d8:	eba8 0800 	sub.w	r8, r8, r0
 800d3dc:	e7e9      	b.n	800d3b2 <__sflush_r+0xda>
 800d3de:	bf00      	nop
 800d3e0:	20400001 	.word	0x20400001

0800d3e4 <_fflush_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	690b      	ldr	r3, [r1, #16]
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	b913      	cbnz	r3, 800d3f4 <_fflush_r+0x10>
 800d3ee:	2500      	movs	r5, #0
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	b118      	cbz	r0, 800d3fe <_fflush_r+0x1a>
 800d3f6:	6983      	ldr	r3, [r0, #24]
 800d3f8:	b90b      	cbnz	r3, 800d3fe <_fflush_r+0x1a>
 800d3fa:	f000 f887 	bl	800d50c <__sinit>
 800d3fe:	4b14      	ldr	r3, [pc, #80]	; (800d450 <_fflush_r+0x6c>)
 800d400:	429c      	cmp	r4, r3
 800d402:	d11b      	bne.n	800d43c <_fflush_r+0x58>
 800d404:	686c      	ldr	r4, [r5, #4]
 800d406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d0ef      	beq.n	800d3ee <_fflush_r+0xa>
 800d40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d410:	07d0      	lsls	r0, r2, #31
 800d412:	d404      	bmi.n	800d41e <_fflush_r+0x3a>
 800d414:	0599      	lsls	r1, r3, #22
 800d416:	d402      	bmi.n	800d41e <_fflush_r+0x3a>
 800d418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41a:	f000 f915 	bl	800d648 <__retarget_lock_acquire_recursive>
 800d41e:	4628      	mov	r0, r5
 800d420:	4621      	mov	r1, r4
 800d422:	f7ff ff59 	bl	800d2d8 <__sflush_r>
 800d426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d428:	07da      	lsls	r2, r3, #31
 800d42a:	4605      	mov	r5, r0
 800d42c:	d4e0      	bmi.n	800d3f0 <_fflush_r+0xc>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	059b      	lsls	r3, r3, #22
 800d432:	d4dd      	bmi.n	800d3f0 <_fflush_r+0xc>
 800d434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d436:	f000 f908 	bl	800d64a <__retarget_lock_release_recursive>
 800d43a:	e7d9      	b.n	800d3f0 <_fflush_r+0xc>
 800d43c:	4b05      	ldr	r3, [pc, #20]	; (800d454 <_fflush_r+0x70>)
 800d43e:	429c      	cmp	r4, r3
 800d440:	d101      	bne.n	800d446 <_fflush_r+0x62>
 800d442:	68ac      	ldr	r4, [r5, #8]
 800d444:	e7df      	b.n	800d406 <_fflush_r+0x22>
 800d446:	4b04      	ldr	r3, [pc, #16]	; (800d458 <_fflush_r+0x74>)
 800d448:	429c      	cmp	r4, r3
 800d44a:	bf08      	it	eq
 800d44c:	68ec      	ldreq	r4, [r5, #12]
 800d44e:	e7da      	b.n	800d406 <_fflush_r+0x22>
 800d450:	0800eeac 	.word	0x0800eeac
 800d454:	0800eecc 	.word	0x0800eecc
 800d458:	0800ee8c 	.word	0x0800ee8c

0800d45c <std>:
 800d45c:	2300      	movs	r3, #0
 800d45e:	b510      	push	{r4, lr}
 800d460:	4604      	mov	r4, r0
 800d462:	e9c0 3300 	strd	r3, r3, [r0]
 800d466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d46a:	6083      	str	r3, [r0, #8]
 800d46c:	8181      	strh	r1, [r0, #12]
 800d46e:	6643      	str	r3, [r0, #100]	; 0x64
 800d470:	81c2      	strh	r2, [r0, #14]
 800d472:	6183      	str	r3, [r0, #24]
 800d474:	4619      	mov	r1, r3
 800d476:	2208      	movs	r2, #8
 800d478:	305c      	adds	r0, #92	; 0x5c
 800d47a:	f7fb fdcd 	bl	8009018 <memset>
 800d47e:	4b05      	ldr	r3, [pc, #20]	; (800d494 <std+0x38>)
 800d480:	6263      	str	r3, [r4, #36]	; 0x24
 800d482:	4b05      	ldr	r3, [pc, #20]	; (800d498 <std+0x3c>)
 800d484:	62a3      	str	r3, [r4, #40]	; 0x28
 800d486:	4b05      	ldr	r3, [pc, #20]	; (800d49c <std+0x40>)
 800d488:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d48a:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <std+0x44>)
 800d48c:	6224      	str	r4, [r4, #32]
 800d48e:	6323      	str	r3, [r4, #48]	; 0x30
 800d490:	bd10      	pop	{r4, pc}
 800d492:	bf00      	nop
 800d494:	0800d7b1 	.word	0x0800d7b1
 800d498:	0800d7d3 	.word	0x0800d7d3
 800d49c:	0800d80b 	.word	0x0800d80b
 800d4a0:	0800d82f 	.word	0x0800d82f

0800d4a4 <_cleanup_r>:
 800d4a4:	4901      	ldr	r1, [pc, #4]	; (800d4ac <_cleanup_r+0x8>)
 800d4a6:	f000 b8af 	b.w	800d608 <_fwalk_reent>
 800d4aa:	bf00      	nop
 800d4ac:	0800d3e5 	.word	0x0800d3e5

0800d4b0 <__sfmoreglue>:
 800d4b0:	b570      	push	{r4, r5, r6, lr}
 800d4b2:	2268      	movs	r2, #104	; 0x68
 800d4b4:	1e4d      	subs	r5, r1, #1
 800d4b6:	4355      	muls	r5, r2
 800d4b8:	460e      	mov	r6, r1
 800d4ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4be:	f7ff fa59 	bl	800c974 <_malloc_r>
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	b140      	cbz	r0, 800d4d8 <__sfmoreglue+0x28>
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	e9c0 1600 	strd	r1, r6, [r0]
 800d4cc:	300c      	adds	r0, #12
 800d4ce:	60a0      	str	r0, [r4, #8]
 800d4d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4d4:	f7fb fda0 	bl	8009018 <memset>
 800d4d8:	4620      	mov	r0, r4
 800d4da:	bd70      	pop	{r4, r5, r6, pc}

0800d4dc <__sfp_lock_acquire>:
 800d4dc:	4801      	ldr	r0, [pc, #4]	; (800d4e4 <__sfp_lock_acquire+0x8>)
 800d4de:	f000 b8b3 	b.w	800d648 <__retarget_lock_acquire_recursive>
 800d4e2:	bf00      	nop
 800d4e4:	20000991 	.word	0x20000991

0800d4e8 <__sfp_lock_release>:
 800d4e8:	4801      	ldr	r0, [pc, #4]	; (800d4f0 <__sfp_lock_release+0x8>)
 800d4ea:	f000 b8ae 	b.w	800d64a <__retarget_lock_release_recursive>
 800d4ee:	bf00      	nop
 800d4f0:	20000991 	.word	0x20000991

0800d4f4 <__sinit_lock_acquire>:
 800d4f4:	4801      	ldr	r0, [pc, #4]	; (800d4fc <__sinit_lock_acquire+0x8>)
 800d4f6:	f000 b8a7 	b.w	800d648 <__retarget_lock_acquire_recursive>
 800d4fa:	bf00      	nop
 800d4fc:	20000992 	.word	0x20000992

0800d500 <__sinit_lock_release>:
 800d500:	4801      	ldr	r0, [pc, #4]	; (800d508 <__sinit_lock_release+0x8>)
 800d502:	f000 b8a2 	b.w	800d64a <__retarget_lock_release_recursive>
 800d506:	bf00      	nop
 800d508:	20000992 	.word	0x20000992

0800d50c <__sinit>:
 800d50c:	b510      	push	{r4, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	f7ff fff0 	bl	800d4f4 <__sinit_lock_acquire>
 800d514:	69a3      	ldr	r3, [r4, #24]
 800d516:	b11b      	cbz	r3, 800d520 <__sinit+0x14>
 800d518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d51c:	f7ff bff0 	b.w	800d500 <__sinit_lock_release>
 800d520:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d524:	6523      	str	r3, [r4, #80]	; 0x50
 800d526:	4b13      	ldr	r3, [pc, #76]	; (800d574 <__sinit+0x68>)
 800d528:	4a13      	ldr	r2, [pc, #76]	; (800d578 <__sinit+0x6c>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d52e:	42a3      	cmp	r3, r4
 800d530:	bf04      	itt	eq
 800d532:	2301      	moveq	r3, #1
 800d534:	61a3      	streq	r3, [r4, #24]
 800d536:	4620      	mov	r0, r4
 800d538:	f000 f820 	bl	800d57c <__sfp>
 800d53c:	6060      	str	r0, [r4, #4]
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 f81c 	bl	800d57c <__sfp>
 800d544:	60a0      	str	r0, [r4, #8]
 800d546:	4620      	mov	r0, r4
 800d548:	f000 f818 	bl	800d57c <__sfp>
 800d54c:	2200      	movs	r2, #0
 800d54e:	60e0      	str	r0, [r4, #12]
 800d550:	2104      	movs	r1, #4
 800d552:	6860      	ldr	r0, [r4, #4]
 800d554:	f7ff ff82 	bl	800d45c <std>
 800d558:	68a0      	ldr	r0, [r4, #8]
 800d55a:	2201      	movs	r2, #1
 800d55c:	2109      	movs	r1, #9
 800d55e:	f7ff ff7d 	bl	800d45c <std>
 800d562:	68e0      	ldr	r0, [r4, #12]
 800d564:	2202      	movs	r2, #2
 800d566:	2112      	movs	r1, #18
 800d568:	f7ff ff78 	bl	800d45c <std>
 800d56c:	2301      	movs	r3, #1
 800d56e:	61a3      	str	r3, [r4, #24]
 800d570:	e7d2      	b.n	800d518 <__sinit+0xc>
 800d572:	bf00      	nop
 800d574:	0800ea48 	.word	0x0800ea48
 800d578:	0800d4a5 	.word	0x0800d4a5

0800d57c <__sfp>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	4607      	mov	r7, r0
 800d580:	f7ff ffac 	bl	800d4dc <__sfp_lock_acquire>
 800d584:	4b1e      	ldr	r3, [pc, #120]	; (800d600 <__sfp+0x84>)
 800d586:	681e      	ldr	r6, [r3, #0]
 800d588:	69b3      	ldr	r3, [r6, #24]
 800d58a:	b913      	cbnz	r3, 800d592 <__sfp+0x16>
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff ffbd 	bl	800d50c <__sinit>
 800d592:	3648      	adds	r6, #72	; 0x48
 800d594:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d598:	3b01      	subs	r3, #1
 800d59a:	d503      	bpl.n	800d5a4 <__sfp+0x28>
 800d59c:	6833      	ldr	r3, [r6, #0]
 800d59e:	b30b      	cbz	r3, 800d5e4 <__sfp+0x68>
 800d5a0:	6836      	ldr	r6, [r6, #0]
 800d5a2:	e7f7      	b.n	800d594 <__sfp+0x18>
 800d5a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5a8:	b9d5      	cbnz	r5, 800d5e0 <__sfp+0x64>
 800d5aa:	4b16      	ldr	r3, [pc, #88]	; (800d604 <__sfp+0x88>)
 800d5ac:	60e3      	str	r3, [r4, #12]
 800d5ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5b2:	6665      	str	r5, [r4, #100]	; 0x64
 800d5b4:	f000 f847 	bl	800d646 <__retarget_lock_init_recursive>
 800d5b8:	f7ff ff96 	bl	800d4e8 <__sfp_lock_release>
 800d5bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5c4:	6025      	str	r5, [r4, #0]
 800d5c6:	61a5      	str	r5, [r4, #24]
 800d5c8:	2208      	movs	r2, #8
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5d0:	f7fb fd22 	bl	8009018 <memset>
 800d5d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5dc:	4620      	mov	r0, r4
 800d5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e0:	3468      	adds	r4, #104	; 0x68
 800d5e2:	e7d9      	b.n	800d598 <__sfp+0x1c>
 800d5e4:	2104      	movs	r1, #4
 800d5e6:	4638      	mov	r0, r7
 800d5e8:	f7ff ff62 	bl	800d4b0 <__sfmoreglue>
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	6030      	str	r0, [r6, #0]
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	d1d5      	bne.n	800d5a0 <__sfp+0x24>
 800d5f4:	f7ff ff78 	bl	800d4e8 <__sfp_lock_release>
 800d5f8:	230c      	movs	r3, #12
 800d5fa:	603b      	str	r3, [r7, #0]
 800d5fc:	e7ee      	b.n	800d5dc <__sfp+0x60>
 800d5fe:	bf00      	nop
 800d600:	0800ea48 	.word	0x0800ea48
 800d604:	ffff0001 	.word	0xffff0001

0800d608 <_fwalk_reent>:
 800d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d60c:	4606      	mov	r6, r0
 800d60e:	4688      	mov	r8, r1
 800d610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d614:	2700      	movs	r7, #0
 800d616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d61a:	f1b9 0901 	subs.w	r9, r9, #1
 800d61e:	d505      	bpl.n	800d62c <_fwalk_reent+0x24>
 800d620:	6824      	ldr	r4, [r4, #0]
 800d622:	2c00      	cmp	r4, #0
 800d624:	d1f7      	bne.n	800d616 <_fwalk_reent+0xe>
 800d626:	4638      	mov	r0, r7
 800d628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62c:	89ab      	ldrh	r3, [r5, #12]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d907      	bls.n	800d642 <_fwalk_reent+0x3a>
 800d632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d636:	3301      	adds	r3, #1
 800d638:	d003      	beq.n	800d642 <_fwalk_reent+0x3a>
 800d63a:	4629      	mov	r1, r5
 800d63c:	4630      	mov	r0, r6
 800d63e:	47c0      	blx	r8
 800d640:	4307      	orrs	r7, r0
 800d642:	3568      	adds	r5, #104	; 0x68
 800d644:	e7e9      	b.n	800d61a <_fwalk_reent+0x12>

0800d646 <__retarget_lock_init_recursive>:
 800d646:	4770      	bx	lr

0800d648 <__retarget_lock_acquire_recursive>:
 800d648:	4770      	bx	lr

0800d64a <__retarget_lock_release_recursive>:
 800d64a:	4770      	bx	lr

0800d64c <__swhatbuf_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	460e      	mov	r6, r1
 800d650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d654:	2900      	cmp	r1, #0
 800d656:	b096      	sub	sp, #88	; 0x58
 800d658:	4614      	mov	r4, r2
 800d65a:	461d      	mov	r5, r3
 800d65c:	da08      	bge.n	800d670 <__swhatbuf_r+0x24>
 800d65e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	602a      	str	r2, [r5, #0]
 800d666:	061a      	lsls	r2, r3, #24
 800d668:	d410      	bmi.n	800d68c <__swhatbuf_r+0x40>
 800d66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d66e:	e00e      	b.n	800d68e <__swhatbuf_r+0x42>
 800d670:	466a      	mov	r2, sp
 800d672:	f000 f903 	bl	800d87c <_fstat_r>
 800d676:	2800      	cmp	r0, #0
 800d678:	dbf1      	blt.n	800d65e <__swhatbuf_r+0x12>
 800d67a:	9a01      	ldr	r2, [sp, #4]
 800d67c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d680:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d684:	425a      	negs	r2, r3
 800d686:	415a      	adcs	r2, r3
 800d688:	602a      	str	r2, [r5, #0]
 800d68a:	e7ee      	b.n	800d66a <__swhatbuf_r+0x1e>
 800d68c:	2340      	movs	r3, #64	; 0x40
 800d68e:	2000      	movs	r0, #0
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	b016      	add	sp, #88	; 0x58
 800d694:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d698 <__smakebuf_r>:
 800d698:	898b      	ldrh	r3, [r1, #12]
 800d69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d69c:	079d      	lsls	r5, r3, #30
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	d507      	bpl.n	800d6b4 <__smakebuf_r+0x1c>
 800d6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	6123      	str	r3, [r4, #16]
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	6163      	str	r3, [r4, #20]
 800d6b0:	b002      	add	sp, #8
 800d6b2:	bd70      	pop	{r4, r5, r6, pc}
 800d6b4:	ab01      	add	r3, sp, #4
 800d6b6:	466a      	mov	r2, sp
 800d6b8:	f7ff ffc8 	bl	800d64c <__swhatbuf_r>
 800d6bc:	9900      	ldr	r1, [sp, #0]
 800d6be:	4605      	mov	r5, r0
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f7ff f957 	bl	800c974 <_malloc_r>
 800d6c6:	b948      	cbnz	r0, 800d6dc <__smakebuf_r+0x44>
 800d6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6cc:	059a      	lsls	r2, r3, #22
 800d6ce:	d4ef      	bmi.n	800d6b0 <__smakebuf_r+0x18>
 800d6d0:	f023 0303 	bic.w	r3, r3, #3
 800d6d4:	f043 0302 	orr.w	r3, r3, #2
 800d6d8:	81a3      	strh	r3, [r4, #12]
 800d6da:	e7e3      	b.n	800d6a4 <__smakebuf_r+0xc>
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <__smakebuf_r+0x7c>)
 800d6de:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6e0:	89a3      	ldrh	r3, [r4, #12]
 800d6e2:	6020      	str	r0, [r4, #0]
 800d6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	9b00      	ldr	r3, [sp, #0]
 800d6ec:	6163      	str	r3, [r4, #20]
 800d6ee:	9b01      	ldr	r3, [sp, #4]
 800d6f0:	6120      	str	r0, [r4, #16]
 800d6f2:	b15b      	cbz	r3, 800d70c <__smakebuf_r+0x74>
 800d6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	f000 f8d1 	bl	800d8a0 <_isatty_r>
 800d6fe:	b128      	cbz	r0, 800d70c <__smakebuf_r+0x74>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f023 0303 	bic.w	r3, r3, #3
 800d706:	f043 0301 	orr.w	r3, r3, #1
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	89a0      	ldrh	r0, [r4, #12]
 800d70e:	4305      	orrs	r5, r0
 800d710:	81a5      	strh	r5, [r4, #12]
 800d712:	e7cd      	b.n	800d6b0 <__smakebuf_r+0x18>
 800d714:	0800d4a5 	.word	0x0800d4a5

0800d718 <_malloc_usable_size_r>:
 800d718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d71c:	1f18      	subs	r0, r3, #4
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bfbc      	itt	lt
 800d722:	580b      	ldrlt	r3, [r1, r0]
 800d724:	18c0      	addlt	r0, r0, r3
 800d726:	4770      	bx	lr

0800d728 <_raise_r>:
 800d728:	291f      	cmp	r1, #31
 800d72a:	b538      	push	{r3, r4, r5, lr}
 800d72c:	4604      	mov	r4, r0
 800d72e:	460d      	mov	r5, r1
 800d730:	d904      	bls.n	800d73c <_raise_r+0x14>
 800d732:	2316      	movs	r3, #22
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	f04f 30ff 	mov.w	r0, #4294967295
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d73e:	b112      	cbz	r2, 800d746 <_raise_r+0x1e>
 800d740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d744:	b94b      	cbnz	r3, 800d75a <_raise_r+0x32>
 800d746:	4620      	mov	r0, r4
 800d748:	f000 f830 	bl	800d7ac <_getpid_r>
 800d74c:	462a      	mov	r2, r5
 800d74e:	4601      	mov	r1, r0
 800d750:	4620      	mov	r0, r4
 800d752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d756:	f000 b817 	b.w	800d788 <_kill_r>
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d00a      	beq.n	800d774 <_raise_r+0x4c>
 800d75e:	1c59      	adds	r1, r3, #1
 800d760:	d103      	bne.n	800d76a <_raise_r+0x42>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	2001      	movs	r0, #1
 800d768:	e7e7      	b.n	800d73a <_raise_r+0x12>
 800d76a:	2400      	movs	r4, #0
 800d76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d770:	4628      	mov	r0, r5
 800d772:	4798      	blx	r3
 800d774:	2000      	movs	r0, #0
 800d776:	e7e0      	b.n	800d73a <_raise_r+0x12>

0800d778 <raise>:
 800d778:	4b02      	ldr	r3, [pc, #8]	; (800d784 <raise+0xc>)
 800d77a:	4601      	mov	r1, r0
 800d77c:	6818      	ldr	r0, [r3, #0]
 800d77e:	f7ff bfd3 	b.w	800d728 <_raise_r>
 800d782:	bf00      	nop
 800d784:	20000108 	.word	0x20000108

0800d788 <_kill_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d07      	ldr	r5, [pc, #28]	; (800d7a8 <_kill_r+0x20>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	4611      	mov	r1, r2
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	f7f5 fadb 	bl	8002d50 <_kill>
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	d102      	bne.n	800d7a4 <_kill_r+0x1c>
 800d79e:	682b      	ldr	r3, [r5, #0]
 800d7a0:	b103      	cbz	r3, 800d7a4 <_kill_r+0x1c>
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000098c 	.word	0x2000098c

0800d7ac <_getpid_r>:
 800d7ac:	f7f5 bac8 	b.w	8002d40 <_getpid>

0800d7b0 <__sread>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b8:	f000 f894 	bl	800d8e4 <_read_r>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	bfab      	itete	ge
 800d7c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d7c4:	181b      	addge	r3, r3, r0
 800d7c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7ca:	bfac      	ite	ge
 800d7cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7ce:	81a3      	strhlt	r3, [r4, #12]
 800d7d0:	bd10      	pop	{r4, pc}

0800d7d2 <__swrite>:
 800d7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	461f      	mov	r7, r3
 800d7d8:	898b      	ldrh	r3, [r1, #12]
 800d7da:	05db      	lsls	r3, r3, #23
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	d505      	bpl.n	800d7f0 <__swrite+0x1e>
 800d7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f000 f868 	bl	800d8c0 <_lseek_r>
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7fa:	81a3      	strh	r3, [r4, #12]
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	463b      	mov	r3, r7
 800d800:	4628      	mov	r0, r5
 800d802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d806:	f000 b817 	b.w	800d838 <_write_r>

0800d80a <__sseek>:
 800d80a:	b510      	push	{r4, lr}
 800d80c:	460c      	mov	r4, r1
 800d80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d812:	f000 f855 	bl	800d8c0 <_lseek_r>
 800d816:	1c43      	adds	r3, r0, #1
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	bf15      	itete	ne
 800d81c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d81e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d826:	81a3      	strheq	r3, [r4, #12]
 800d828:	bf18      	it	ne
 800d82a:	81a3      	strhne	r3, [r4, #12]
 800d82c:	bd10      	pop	{r4, pc}

0800d82e <__sclose>:
 800d82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d832:	f000 b813 	b.w	800d85c <_close_r>
	...

0800d838 <_write_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4d07      	ldr	r5, [pc, #28]	; (800d858 <_write_r+0x20>)
 800d83c:	4604      	mov	r4, r0
 800d83e:	4608      	mov	r0, r1
 800d840:	4611      	mov	r1, r2
 800d842:	2200      	movs	r2, #0
 800d844:	602a      	str	r2, [r5, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	f7f5 fab9 	bl	8002dbe <_write>
 800d84c:	1c43      	adds	r3, r0, #1
 800d84e:	d102      	bne.n	800d856 <_write_r+0x1e>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	b103      	cbz	r3, 800d856 <_write_r+0x1e>
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	bd38      	pop	{r3, r4, r5, pc}
 800d858:	2000098c 	.word	0x2000098c

0800d85c <_close_r>:
 800d85c:	b538      	push	{r3, r4, r5, lr}
 800d85e:	4d06      	ldr	r5, [pc, #24]	; (800d878 <_close_r+0x1c>)
 800d860:	2300      	movs	r3, #0
 800d862:	4604      	mov	r4, r0
 800d864:	4608      	mov	r0, r1
 800d866:	602b      	str	r3, [r5, #0]
 800d868:	f7f5 fac5 	bl	8002df6 <_close>
 800d86c:	1c43      	adds	r3, r0, #1
 800d86e:	d102      	bne.n	800d876 <_close_r+0x1a>
 800d870:	682b      	ldr	r3, [r5, #0]
 800d872:	b103      	cbz	r3, 800d876 <_close_r+0x1a>
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	bd38      	pop	{r3, r4, r5, pc}
 800d878:	2000098c 	.word	0x2000098c

0800d87c <_fstat_r>:
 800d87c:	b538      	push	{r3, r4, r5, lr}
 800d87e:	4d07      	ldr	r5, [pc, #28]	; (800d89c <_fstat_r+0x20>)
 800d880:	2300      	movs	r3, #0
 800d882:	4604      	mov	r4, r0
 800d884:	4608      	mov	r0, r1
 800d886:	4611      	mov	r1, r2
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	f7f5 fac0 	bl	8002e0e <_fstat>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d102      	bne.n	800d898 <_fstat_r+0x1c>
 800d892:	682b      	ldr	r3, [r5, #0]
 800d894:	b103      	cbz	r3, 800d898 <_fstat_r+0x1c>
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	bd38      	pop	{r3, r4, r5, pc}
 800d89a:	bf00      	nop
 800d89c:	2000098c 	.word	0x2000098c

0800d8a0 <_isatty_r>:
 800d8a0:	b538      	push	{r3, r4, r5, lr}
 800d8a2:	4d06      	ldr	r5, [pc, #24]	; (800d8bc <_isatty_r+0x1c>)
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	4608      	mov	r0, r1
 800d8aa:	602b      	str	r3, [r5, #0]
 800d8ac:	f7f5 fabf 	bl	8002e2e <_isatty>
 800d8b0:	1c43      	adds	r3, r0, #1
 800d8b2:	d102      	bne.n	800d8ba <_isatty_r+0x1a>
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	b103      	cbz	r3, 800d8ba <_isatty_r+0x1a>
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
 800d8bc:	2000098c 	.word	0x2000098c

0800d8c0 <_lseek_r>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4d07      	ldr	r5, [pc, #28]	; (800d8e0 <_lseek_r+0x20>)
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	4608      	mov	r0, r1
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	602a      	str	r2, [r5, #0]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f7f5 fab8 	bl	8002e44 <_lseek>
 800d8d4:	1c43      	adds	r3, r0, #1
 800d8d6:	d102      	bne.n	800d8de <_lseek_r+0x1e>
 800d8d8:	682b      	ldr	r3, [r5, #0]
 800d8da:	b103      	cbz	r3, 800d8de <_lseek_r+0x1e>
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	bd38      	pop	{r3, r4, r5, pc}
 800d8e0:	2000098c 	.word	0x2000098c

0800d8e4 <_read_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	; (800d904 <_read_r+0x20>)
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	4608      	mov	r0, r1
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	602a      	str	r2, [r5, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	f7f5 fa46 	bl	8002d84 <_read>
 800d8f8:	1c43      	adds	r3, r0, #1
 800d8fa:	d102      	bne.n	800d902 <_read_r+0x1e>
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	b103      	cbz	r3, 800d902 <_read_r+0x1e>
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	bd38      	pop	{r3, r4, r5, pc}
 800d904:	2000098c 	.word	0x2000098c

0800d908 <sin>:
 800d908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d90a:	ec53 2b10 	vmov	r2, r3, d0
 800d90e:	4828      	ldr	r0, [pc, #160]	; (800d9b0 <sin+0xa8>)
 800d910:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d914:	4281      	cmp	r1, r0
 800d916:	dc07      	bgt.n	800d928 <sin+0x20>
 800d918:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d9a8 <sin+0xa0>
 800d91c:	2000      	movs	r0, #0
 800d91e:	b005      	add	sp, #20
 800d920:	f85d eb04 	ldr.w	lr, [sp], #4
 800d924:	f000 be6c 	b.w	800e600 <__kernel_sin>
 800d928:	4822      	ldr	r0, [pc, #136]	; (800d9b4 <sin+0xac>)
 800d92a:	4281      	cmp	r1, r0
 800d92c:	dd09      	ble.n	800d942 <sin+0x3a>
 800d92e:	ee10 0a10 	vmov	r0, s0
 800d932:	4619      	mov	r1, r3
 800d934:	f7f2 fca8 	bl	8000288 <__aeabi_dsub>
 800d938:	ec41 0b10 	vmov	d0, r0, r1
 800d93c:	b005      	add	sp, #20
 800d93e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d942:	4668      	mov	r0, sp
 800d944:	f000 f838 	bl	800d9b8 <__ieee754_rem_pio2>
 800d948:	f000 0003 	and.w	r0, r0, #3
 800d94c:	2801      	cmp	r0, #1
 800d94e:	d00c      	beq.n	800d96a <sin+0x62>
 800d950:	2802      	cmp	r0, #2
 800d952:	d011      	beq.n	800d978 <sin+0x70>
 800d954:	b9f0      	cbnz	r0, 800d994 <sin+0x8c>
 800d956:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d95a:	ed9d 0b00 	vldr	d0, [sp]
 800d95e:	2001      	movs	r0, #1
 800d960:	f000 fe4e 	bl	800e600 <__kernel_sin>
 800d964:	ec51 0b10 	vmov	r0, r1, d0
 800d968:	e7e6      	b.n	800d938 <sin+0x30>
 800d96a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d96e:	ed9d 0b00 	vldr	d0, [sp]
 800d972:	f000 fa2d 	bl	800ddd0 <__kernel_cos>
 800d976:	e7f5      	b.n	800d964 <sin+0x5c>
 800d978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d97c:	ed9d 0b00 	vldr	d0, [sp]
 800d980:	2001      	movs	r0, #1
 800d982:	f000 fe3d 	bl	800e600 <__kernel_sin>
 800d986:	ec53 2b10 	vmov	r2, r3, d0
 800d98a:	ee10 0a10 	vmov	r0, s0
 800d98e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d992:	e7d1      	b.n	800d938 <sin+0x30>
 800d994:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d998:	ed9d 0b00 	vldr	d0, [sp]
 800d99c:	f000 fa18 	bl	800ddd0 <__kernel_cos>
 800d9a0:	e7f1      	b.n	800d986 <sin+0x7e>
 800d9a2:	bf00      	nop
 800d9a4:	f3af 8000 	nop.w
	...
 800d9b0:	3fe921fb 	.word	0x3fe921fb
 800d9b4:	7fefffff 	.word	0x7fefffff

0800d9b8 <__ieee754_rem_pio2>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	ed2d 8b02 	vpush	{d8}
 800d9c0:	ec55 4b10 	vmov	r4, r5, d0
 800d9c4:	4bca      	ldr	r3, [pc, #808]	; (800dcf0 <__ieee754_rem_pio2+0x338>)
 800d9c6:	b08b      	sub	sp, #44	; 0x2c
 800d9c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d9cc:	4598      	cmp	r8, r3
 800d9ce:	4682      	mov	sl, r0
 800d9d0:	9502      	str	r5, [sp, #8]
 800d9d2:	dc08      	bgt.n	800d9e6 <__ieee754_rem_pio2+0x2e>
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	ed80 0b00 	vstr	d0, [r0]
 800d9dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d9e0:	f04f 0b00 	mov.w	fp, #0
 800d9e4:	e028      	b.n	800da38 <__ieee754_rem_pio2+0x80>
 800d9e6:	4bc3      	ldr	r3, [pc, #780]	; (800dcf4 <__ieee754_rem_pio2+0x33c>)
 800d9e8:	4598      	cmp	r8, r3
 800d9ea:	dc78      	bgt.n	800dade <__ieee754_rem_pio2+0x126>
 800d9ec:	9b02      	ldr	r3, [sp, #8]
 800d9ee:	4ec2      	ldr	r6, [pc, #776]	; (800dcf8 <__ieee754_rem_pio2+0x340>)
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	ee10 0a10 	vmov	r0, s0
 800d9f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800dcb8 <__ieee754_rem_pio2+0x300>)
 800d9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	dd39      	ble.n	800da74 <__ieee754_rem_pio2+0xbc>
 800da00:	f7f2 fc42 	bl	8000288 <__aeabi_dsub>
 800da04:	45b0      	cmp	r8, r6
 800da06:	4604      	mov	r4, r0
 800da08:	460d      	mov	r5, r1
 800da0a:	d01b      	beq.n	800da44 <__ieee754_rem_pio2+0x8c>
 800da0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800dcc0 <__ieee754_rem_pio2+0x308>)
 800da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da12:	f7f2 fc39 	bl	8000288 <__aeabi_dsub>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	e9ca 2300 	strd	r2, r3, [sl]
 800da1e:	4620      	mov	r0, r4
 800da20:	4629      	mov	r1, r5
 800da22:	f7f2 fc31 	bl	8000288 <__aeabi_dsub>
 800da26:	a3a6      	add	r3, pc, #664	; (adr r3, 800dcc0 <__ieee754_rem_pio2+0x308>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fc2c 	bl	8000288 <__aeabi_dsub>
 800da30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da34:	f04f 0b01 	mov.w	fp, #1
 800da38:	4658      	mov	r0, fp
 800da3a:	b00b      	add	sp, #44	; 0x2c
 800da3c:	ecbd 8b02 	vpop	{d8}
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	a3a0      	add	r3, pc, #640	; (adr r3, 800dcc8 <__ieee754_rem_pio2+0x310>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	f7f2 fc1d 	bl	8000288 <__aeabi_dsub>
 800da4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x318>)
 800da50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da54:	4604      	mov	r4, r0
 800da56:	460d      	mov	r5, r1
 800da58:	f7f2 fc16 	bl	8000288 <__aeabi_dsub>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	e9ca 2300 	strd	r2, r3, [sl]
 800da64:	4620      	mov	r0, r4
 800da66:	4629      	mov	r1, r5
 800da68:	f7f2 fc0e 	bl	8000288 <__aeabi_dsub>
 800da6c:	a398      	add	r3, pc, #608	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x318>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	e7db      	b.n	800da2c <__ieee754_rem_pio2+0x74>
 800da74:	f7f2 fc0a 	bl	800028c <__adddf3>
 800da78:	45b0      	cmp	r8, r6
 800da7a:	4604      	mov	r4, r0
 800da7c:	460d      	mov	r5, r1
 800da7e:	d016      	beq.n	800daae <__ieee754_rem_pio2+0xf6>
 800da80:	a38f      	add	r3, pc, #572	; (adr r3, 800dcc0 <__ieee754_rem_pio2+0x308>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fc01 	bl	800028c <__adddf3>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	e9ca 2300 	strd	r2, r3, [sl]
 800da92:	4620      	mov	r0, r4
 800da94:	4629      	mov	r1, r5
 800da96:	f7f2 fbf7 	bl	8000288 <__aeabi_dsub>
 800da9a:	a389      	add	r3, pc, #548	; (adr r3, 800dcc0 <__ieee754_rem_pio2+0x308>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f7f2 fbf4 	bl	800028c <__adddf3>
 800daa4:	f04f 3bff 	mov.w	fp, #4294967295
 800daa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800daac:	e7c4      	b.n	800da38 <__ieee754_rem_pio2+0x80>
 800daae:	a386      	add	r3, pc, #536	; (adr r3, 800dcc8 <__ieee754_rem_pio2+0x310>)
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	f7f2 fbea 	bl	800028c <__adddf3>
 800dab8:	a385      	add	r3, pc, #532	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x318>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	f7f2 fbe3 	bl	800028c <__adddf3>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	e9ca 2300 	strd	r2, r3, [sl]
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fbd9 	bl	8000288 <__aeabi_dsub>
 800dad6:	a37e      	add	r3, pc, #504	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x318>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	e7e0      	b.n	800daa0 <__ieee754_rem_pio2+0xe8>
 800dade:	4b87      	ldr	r3, [pc, #540]	; (800dcfc <__ieee754_rem_pio2+0x344>)
 800dae0:	4598      	cmp	r8, r3
 800dae2:	f300 80d9 	bgt.w	800dc98 <__ieee754_rem_pio2+0x2e0>
 800dae6:	f000 fe49 	bl	800e77c <fabs>
 800daea:	ec55 4b10 	vmov	r4, r5, d0
 800daee:	ee10 0a10 	vmov	r0, s0
 800daf2:	a379      	add	r3, pc, #484	; (adr r3, 800dcd8 <__ieee754_rem_pio2+0x320>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fd7d 	bl	80005f8 <__aeabi_dmul>
 800dafe:	4b80      	ldr	r3, [pc, #512]	; (800dd00 <__ieee754_rem_pio2+0x348>)
 800db00:	2200      	movs	r2, #0
 800db02:	f7f2 fbc3 	bl	800028c <__adddf3>
 800db06:	f7f3 f827 	bl	8000b58 <__aeabi_d2iz>
 800db0a:	4683      	mov	fp, r0
 800db0c:	f7f2 fd0a 	bl	8000524 <__aeabi_i2d>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	ec43 2b18 	vmov	d8, r2, r3
 800db18:	a367      	add	r3, pc, #412	; (adr r3, 800dcb8 <__ieee754_rem_pio2+0x300>)
 800db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1e:	f7f2 fd6b 	bl	80005f8 <__aeabi_dmul>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	4620      	mov	r0, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	f7f2 fbad 	bl	8000288 <__aeabi_dsub>
 800db2e:	a364      	add	r3, pc, #400	; (adr r3, 800dcc0 <__ieee754_rem_pio2+0x308>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	ec51 0b18 	vmov	r0, r1, d8
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	f1bb 0f1f 	cmp.w	fp, #31
 800db44:	4604      	mov	r4, r0
 800db46:	460d      	mov	r5, r1
 800db48:	dc0d      	bgt.n	800db66 <__ieee754_rem_pio2+0x1ae>
 800db4a:	4b6e      	ldr	r3, [pc, #440]	; (800dd04 <__ieee754_rem_pio2+0x34c>)
 800db4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800db50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db54:	4543      	cmp	r3, r8
 800db56:	d006      	beq.n	800db66 <__ieee754_rem_pio2+0x1ae>
 800db58:	4622      	mov	r2, r4
 800db5a:	462b      	mov	r3, r5
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 fb92 	bl	8000288 <__aeabi_dsub>
 800db64:	e00f      	b.n	800db86 <__ieee754_rem_pio2+0x1ce>
 800db66:	462b      	mov	r3, r5
 800db68:	4622      	mov	r2, r4
 800db6a:	4630      	mov	r0, r6
 800db6c:	4639      	mov	r1, r7
 800db6e:	f7f2 fb8b 	bl	8000288 <__aeabi_dsub>
 800db72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800db80:	f1b8 0f10 	cmp.w	r8, #16
 800db84:	dc02      	bgt.n	800db8c <__ieee754_rem_pio2+0x1d4>
 800db86:	e9ca 0100 	strd	r0, r1, [sl]
 800db8a:	e039      	b.n	800dc00 <__ieee754_rem_pio2+0x248>
 800db8c:	a34e      	add	r3, pc, #312	; (adr r3, 800dcc8 <__ieee754_rem_pio2+0x310>)
 800db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db92:	ec51 0b18 	vmov	r0, r1, d8
 800db96:	f7f2 fd2f 	bl	80005f8 <__aeabi_dmul>
 800db9a:	4604      	mov	r4, r0
 800db9c:	460d      	mov	r5, r1
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 fb6f 	bl	8000288 <__aeabi_dsub>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4680      	mov	r8, r0
 800dbb0:	4689      	mov	r9, r1
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	4639      	mov	r1, r7
 800dbb6:	f7f2 fb67 	bl	8000288 <__aeabi_dsub>
 800dbba:	4622      	mov	r2, r4
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	f7f2 fb63 	bl	8000288 <__aeabi_dsub>
 800dbc2:	a343      	add	r3, pc, #268	; (adr r3, 800dcd0 <__ieee754_rem_pio2+0x318>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	4604      	mov	r4, r0
 800dbca:	460d      	mov	r5, r1
 800dbcc:	ec51 0b18 	vmov	r0, r1, d8
 800dbd0:	f7f2 fd12 	bl	80005f8 <__aeabi_dmul>
 800dbd4:	4622      	mov	r2, r4
 800dbd6:	462b      	mov	r3, r5
 800dbd8:	f7f2 fb56 	bl	8000288 <__aeabi_dsub>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	4640      	mov	r0, r8
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	f7f2 fb4e 	bl	8000288 <__aeabi_dsub>
 800dbec:	9a03      	ldr	r2, [sp, #12]
 800dbee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	2b31      	cmp	r3, #49	; 0x31
 800dbf6:	dc24      	bgt.n	800dc42 <__ieee754_rem_pio2+0x28a>
 800dbf8:	e9ca 0100 	strd	r0, r1, [sl]
 800dbfc:	4646      	mov	r6, r8
 800dbfe:	464f      	mov	r7, r9
 800dc00:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc04:	4630      	mov	r0, r6
 800dc06:	4642      	mov	r2, r8
 800dc08:	464b      	mov	r3, r9
 800dc0a:	4639      	mov	r1, r7
 800dc0c:	f7f2 fb3c 	bl	8000288 <__aeabi_dsub>
 800dc10:	462b      	mov	r3, r5
 800dc12:	4622      	mov	r2, r4
 800dc14:	f7f2 fb38 	bl	8000288 <__aeabi_dsub>
 800dc18:	9b02      	ldr	r3, [sp, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc20:	f6bf af0a 	bge.w	800da38 <__ieee754_rem_pio2+0x80>
 800dc24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dc28:	f8ca 3004 	str.w	r3, [sl, #4]
 800dc2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc30:	f8ca 8000 	str.w	r8, [sl]
 800dc34:	f8ca 0008 	str.w	r0, [sl, #8]
 800dc38:	f8ca 300c 	str.w	r3, [sl, #12]
 800dc3c:	f1cb 0b00 	rsb	fp, fp, #0
 800dc40:	e6fa      	b.n	800da38 <__ieee754_rem_pio2+0x80>
 800dc42:	a327      	add	r3, pc, #156	; (adr r3, 800dce0 <__ieee754_rem_pio2+0x328>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	ec51 0b18 	vmov	r0, r1, d8
 800dc4c:	f7f2 fcd4 	bl	80005f8 <__aeabi_dmul>
 800dc50:	4604      	mov	r4, r0
 800dc52:	460d      	mov	r5, r1
 800dc54:	4602      	mov	r2, r0
 800dc56:	460b      	mov	r3, r1
 800dc58:	4640      	mov	r0, r8
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f7f2 fb14 	bl	8000288 <__aeabi_dsub>
 800dc60:	4602      	mov	r2, r0
 800dc62:	460b      	mov	r3, r1
 800dc64:	4606      	mov	r6, r0
 800dc66:	460f      	mov	r7, r1
 800dc68:	4640      	mov	r0, r8
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	f7f2 fb0c 	bl	8000288 <__aeabi_dsub>
 800dc70:	4622      	mov	r2, r4
 800dc72:	462b      	mov	r3, r5
 800dc74:	f7f2 fb08 	bl	8000288 <__aeabi_dsub>
 800dc78:	a31b      	add	r3, pc, #108	; (adr r3, 800dce8 <__ieee754_rem_pio2+0x330>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	4604      	mov	r4, r0
 800dc80:	460d      	mov	r5, r1
 800dc82:	ec51 0b18 	vmov	r0, r1, d8
 800dc86:	f7f2 fcb7 	bl	80005f8 <__aeabi_dmul>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fafb 	bl	8000288 <__aeabi_dsub>
 800dc92:	4604      	mov	r4, r0
 800dc94:	460d      	mov	r5, r1
 800dc96:	e75f      	b.n	800db58 <__ieee754_rem_pio2+0x1a0>
 800dc98:	4b1b      	ldr	r3, [pc, #108]	; (800dd08 <__ieee754_rem_pio2+0x350>)
 800dc9a:	4598      	cmp	r8, r3
 800dc9c:	dd36      	ble.n	800dd0c <__ieee754_rem_pio2+0x354>
 800dc9e:	ee10 2a10 	vmov	r2, s0
 800dca2:	462b      	mov	r3, r5
 800dca4:	4620      	mov	r0, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	f7f2 faee 	bl	8000288 <__aeabi_dsub>
 800dcac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcb0:	e9ca 0100 	strd	r0, r1, [sl]
 800dcb4:	e694      	b.n	800d9e0 <__ieee754_rem_pio2+0x28>
 800dcb6:	bf00      	nop
 800dcb8:	54400000 	.word	0x54400000
 800dcbc:	3ff921fb 	.word	0x3ff921fb
 800dcc0:	1a626331 	.word	0x1a626331
 800dcc4:	3dd0b461 	.word	0x3dd0b461
 800dcc8:	1a600000 	.word	0x1a600000
 800dccc:	3dd0b461 	.word	0x3dd0b461
 800dcd0:	2e037073 	.word	0x2e037073
 800dcd4:	3ba3198a 	.word	0x3ba3198a
 800dcd8:	6dc9c883 	.word	0x6dc9c883
 800dcdc:	3fe45f30 	.word	0x3fe45f30
 800dce0:	2e000000 	.word	0x2e000000
 800dce4:	3ba3198a 	.word	0x3ba3198a
 800dce8:	252049c1 	.word	0x252049c1
 800dcec:	397b839a 	.word	0x397b839a
 800dcf0:	3fe921fb 	.word	0x3fe921fb
 800dcf4:	4002d97b 	.word	0x4002d97b
 800dcf8:	3ff921fb 	.word	0x3ff921fb
 800dcfc:	413921fb 	.word	0x413921fb
 800dd00:	3fe00000 	.word	0x3fe00000
 800dd04:	0800eeec 	.word	0x0800eeec
 800dd08:	7fefffff 	.word	0x7fefffff
 800dd0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dd10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dd14:	ee10 0a10 	vmov	r0, s0
 800dd18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dd1c:	ee10 6a10 	vmov	r6, s0
 800dd20:	460f      	mov	r7, r1
 800dd22:	f7f2 ff19 	bl	8000b58 <__aeabi_d2iz>
 800dd26:	f7f2 fbfd 	bl	8000524 <__aeabi_i2d>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4639      	mov	r1, r7
 800dd32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd36:	f7f2 faa7 	bl	8000288 <__aeabi_dsub>
 800dd3a:	4b23      	ldr	r3, [pc, #140]	; (800ddc8 <__ieee754_rem_pio2+0x410>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f7f2 fc5b 	bl	80005f8 <__aeabi_dmul>
 800dd42:	460f      	mov	r7, r1
 800dd44:	4606      	mov	r6, r0
 800dd46:	f7f2 ff07 	bl	8000b58 <__aeabi_d2iz>
 800dd4a:	f7f2 fbeb 	bl	8000524 <__aeabi_i2d>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	4630      	mov	r0, r6
 800dd54:	4639      	mov	r1, r7
 800dd56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dd5a:	f7f2 fa95 	bl	8000288 <__aeabi_dsub>
 800dd5e:	4b1a      	ldr	r3, [pc, #104]	; (800ddc8 <__ieee754_rem_pio2+0x410>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	f7f2 fc49 	bl	80005f8 <__aeabi_dmul>
 800dd66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd6a:	ad04      	add	r5, sp, #16
 800dd6c:	f04f 0803 	mov.w	r8, #3
 800dd70:	46a9      	mov	r9, r5
 800dd72:	2600      	movs	r6, #0
 800dd74:	2700      	movs	r7, #0
 800dd76:	4632      	mov	r2, r6
 800dd78:	463b      	mov	r3, r7
 800dd7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dd7e:	46c3      	mov	fp, r8
 800dd80:	3d08      	subs	r5, #8
 800dd82:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd86:	f7f2 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d1f3      	bne.n	800dd76 <__ieee754_rem_pio2+0x3be>
 800dd8e:	4b0f      	ldr	r3, [pc, #60]	; (800ddcc <__ieee754_rem_pio2+0x414>)
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	2302      	movs	r3, #2
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	4622      	mov	r2, r4
 800dd98:	465b      	mov	r3, fp
 800dd9a:	4651      	mov	r1, sl
 800dd9c:	4648      	mov	r0, r9
 800dd9e:	f000 f8df 	bl	800df60 <__kernel_rem_pio2>
 800dda2:	9b02      	ldr	r3, [sp, #8]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	4683      	mov	fp, r0
 800dda8:	f6bf ae46 	bge.w	800da38 <__ieee754_rem_pio2+0x80>
 800ddac:	e9da 2100 	ldrd	r2, r1, [sl]
 800ddb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddb4:	e9ca 2300 	strd	r2, r3, [sl]
 800ddb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ddbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ddc4:	e73a      	b.n	800dc3c <__ieee754_rem_pio2+0x284>
 800ddc6:	bf00      	nop
 800ddc8:	41700000 	.word	0x41700000
 800ddcc:	0800ef6c 	.word	0x0800ef6c

0800ddd0 <__kernel_cos>:
 800ddd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	ec57 6b10 	vmov	r6, r7, d0
 800ddd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dddc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dde0:	ed8d 1b00 	vstr	d1, [sp]
 800dde4:	da07      	bge.n	800ddf6 <__kernel_cos+0x26>
 800dde6:	ee10 0a10 	vmov	r0, s0
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 feb4 	bl	8000b58 <__aeabi_d2iz>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f000 8088 	beq.w	800df06 <__kernel_cos+0x136>
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	463b      	mov	r3, r7
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	f7f2 fbfb 	bl	80005f8 <__aeabi_dmul>
 800de02:	4b51      	ldr	r3, [pc, #324]	; (800df48 <__kernel_cos+0x178>)
 800de04:	2200      	movs	r2, #0
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	f7f2 fbf5 	bl	80005f8 <__aeabi_dmul>
 800de0e:	a340      	add	r3, pc, #256	; (adr r3, 800df10 <__kernel_cos+0x140>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	4682      	mov	sl, r0
 800de16:	468b      	mov	fp, r1
 800de18:	4620      	mov	r0, r4
 800de1a:	4629      	mov	r1, r5
 800de1c:	f7f2 fbec 	bl	80005f8 <__aeabi_dmul>
 800de20:	a33d      	add	r3, pc, #244	; (adr r3, 800df18 <__kernel_cos+0x148>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fa31 	bl	800028c <__adddf3>
 800de2a:	4622      	mov	r2, r4
 800de2c:	462b      	mov	r3, r5
 800de2e:	f7f2 fbe3 	bl	80005f8 <__aeabi_dmul>
 800de32:	a33b      	add	r3, pc, #236	; (adr r3, 800df20 <__kernel_cos+0x150>)
 800de34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de38:	f7f2 fa26 	bl	8000288 <__aeabi_dsub>
 800de3c:	4622      	mov	r2, r4
 800de3e:	462b      	mov	r3, r5
 800de40:	f7f2 fbda 	bl	80005f8 <__aeabi_dmul>
 800de44:	a338      	add	r3, pc, #224	; (adr r3, 800df28 <__kernel_cos+0x158>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fa1f 	bl	800028c <__adddf3>
 800de4e:	4622      	mov	r2, r4
 800de50:	462b      	mov	r3, r5
 800de52:	f7f2 fbd1 	bl	80005f8 <__aeabi_dmul>
 800de56:	a336      	add	r3, pc, #216	; (adr r3, 800df30 <__kernel_cos+0x160>)
 800de58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5c:	f7f2 fa14 	bl	8000288 <__aeabi_dsub>
 800de60:	4622      	mov	r2, r4
 800de62:	462b      	mov	r3, r5
 800de64:	f7f2 fbc8 	bl	80005f8 <__aeabi_dmul>
 800de68:	a333      	add	r3, pc, #204	; (adr r3, 800df38 <__kernel_cos+0x168>)
 800de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6e:	f7f2 fa0d 	bl	800028c <__adddf3>
 800de72:	4622      	mov	r2, r4
 800de74:	462b      	mov	r3, r5
 800de76:	f7f2 fbbf 	bl	80005f8 <__aeabi_dmul>
 800de7a:	4622      	mov	r2, r4
 800de7c:	462b      	mov	r3, r5
 800de7e:	f7f2 fbbb 	bl	80005f8 <__aeabi_dmul>
 800de82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de86:	4604      	mov	r4, r0
 800de88:	460d      	mov	r5, r1
 800de8a:	4630      	mov	r0, r6
 800de8c:	4639      	mov	r1, r7
 800de8e:	f7f2 fbb3 	bl	80005f8 <__aeabi_dmul>
 800de92:	460b      	mov	r3, r1
 800de94:	4602      	mov	r2, r0
 800de96:	4629      	mov	r1, r5
 800de98:	4620      	mov	r0, r4
 800de9a:	f7f2 f9f5 	bl	8000288 <__aeabi_dsub>
 800de9e:	4b2b      	ldr	r3, [pc, #172]	; (800df4c <__kernel_cos+0x17c>)
 800dea0:	4598      	cmp	r8, r3
 800dea2:	4606      	mov	r6, r0
 800dea4:	460f      	mov	r7, r1
 800dea6:	dc10      	bgt.n	800deca <__kernel_cos+0xfa>
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4650      	mov	r0, sl
 800deae:	4659      	mov	r1, fp
 800deb0:	f7f2 f9ea 	bl	8000288 <__aeabi_dsub>
 800deb4:	460b      	mov	r3, r1
 800deb6:	4926      	ldr	r1, [pc, #152]	; (800df50 <__kernel_cos+0x180>)
 800deb8:	4602      	mov	r2, r0
 800deba:	2000      	movs	r0, #0
 800debc:	f7f2 f9e4 	bl	8000288 <__aeabi_dsub>
 800dec0:	ec41 0b10 	vmov	d0, r0, r1
 800dec4:	b003      	add	sp, #12
 800dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deca:	4b22      	ldr	r3, [pc, #136]	; (800df54 <__kernel_cos+0x184>)
 800decc:	4920      	ldr	r1, [pc, #128]	; (800df50 <__kernel_cos+0x180>)
 800dece:	4598      	cmp	r8, r3
 800ded0:	bfcc      	ite	gt
 800ded2:	4d21      	ldrgt	r5, [pc, #132]	; (800df58 <__kernel_cos+0x188>)
 800ded4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ded8:	2400      	movs	r4, #0
 800deda:	4622      	mov	r2, r4
 800dedc:	462b      	mov	r3, r5
 800dede:	2000      	movs	r0, #0
 800dee0:	f7f2 f9d2 	bl	8000288 <__aeabi_dsub>
 800dee4:	4622      	mov	r2, r4
 800dee6:	4680      	mov	r8, r0
 800dee8:	4689      	mov	r9, r1
 800deea:	462b      	mov	r3, r5
 800deec:	4650      	mov	r0, sl
 800deee:	4659      	mov	r1, fp
 800def0:	f7f2 f9ca 	bl	8000288 <__aeabi_dsub>
 800def4:	4632      	mov	r2, r6
 800def6:	463b      	mov	r3, r7
 800def8:	f7f2 f9c6 	bl	8000288 <__aeabi_dsub>
 800defc:	4602      	mov	r2, r0
 800defe:	460b      	mov	r3, r1
 800df00:	4640      	mov	r0, r8
 800df02:	4649      	mov	r1, r9
 800df04:	e7da      	b.n	800debc <__kernel_cos+0xec>
 800df06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800df40 <__kernel_cos+0x170>
 800df0a:	e7db      	b.n	800dec4 <__kernel_cos+0xf4>
 800df0c:	f3af 8000 	nop.w
 800df10:	be8838d4 	.word	0xbe8838d4
 800df14:	bda8fae9 	.word	0xbda8fae9
 800df18:	bdb4b1c4 	.word	0xbdb4b1c4
 800df1c:	3e21ee9e 	.word	0x3e21ee9e
 800df20:	809c52ad 	.word	0x809c52ad
 800df24:	3e927e4f 	.word	0x3e927e4f
 800df28:	19cb1590 	.word	0x19cb1590
 800df2c:	3efa01a0 	.word	0x3efa01a0
 800df30:	16c15177 	.word	0x16c15177
 800df34:	3f56c16c 	.word	0x3f56c16c
 800df38:	5555554c 	.word	0x5555554c
 800df3c:	3fa55555 	.word	0x3fa55555
 800df40:	00000000 	.word	0x00000000
 800df44:	3ff00000 	.word	0x3ff00000
 800df48:	3fe00000 	.word	0x3fe00000
 800df4c:	3fd33332 	.word	0x3fd33332
 800df50:	3ff00000 	.word	0x3ff00000
 800df54:	3fe90000 	.word	0x3fe90000
 800df58:	3fd20000 	.word	0x3fd20000
 800df5c:	00000000 	.word	0x00000000

0800df60 <__kernel_rem_pio2>:
 800df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	ed2d 8b02 	vpush	{d8}
 800df68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800df6c:	f112 0f14 	cmn.w	r2, #20
 800df70:	9308      	str	r3, [sp, #32]
 800df72:	9101      	str	r1, [sp, #4]
 800df74:	4bc4      	ldr	r3, [pc, #784]	; (800e288 <__kernel_rem_pio2+0x328>)
 800df76:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800df78:	900b      	str	r0, [sp, #44]	; 0x2c
 800df7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df7e:	9302      	str	r3, [sp, #8]
 800df80:	9b08      	ldr	r3, [sp, #32]
 800df82:	f103 33ff 	add.w	r3, r3, #4294967295
 800df86:	bfa8      	it	ge
 800df88:	1ed4      	subge	r4, r2, #3
 800df8a:	9306      	str	r3, [sp, #24]
 800df8c:	bfb2      	itee	lt
 800df8e:	2400      	movlt	r4, #0
 800df90:	2318      	movge	r3, #24
 800df92:	fb94 f4f3 	sdivge	r4, r4, r3
 800df96:	f06f 0317 	mvn.w	r3, #23
 800df9a:	fb04 3303 	mla	r3, r4, r3, r3
 800df9e:	eb03 0a02 	add.w	sl, r3, r2
 800dfa2:	9b02      	ldr	r3, [sp, #8]
 800dfa4:	9a06      	ldr	r2, [sp, #24]
 800dfa6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e278 <__kernel_rem_pio2+0x318>
 800dfaa:	eb03 0802 	add.w	r8, r3, r2
 800dfae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dfb0:	1aa7      	subs	r7, r4, r2
 800dfb2:	ae22      	add	r6, sp, #136	; 0x88
 800dfb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dfb8:	2500      	movs	r5, #0
 800dfba:	4545      	cmp	r5, r8
 800dfbc:	dd13      	ble.n	800dfe6 <__kernel_rem_pio2+0x86>
 800dfbe:	9b08      	ldr	r3, [sp, #32]
 800dfc0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e278 <__kernel_rem_pio2+0x318>
 800dfc4:	aa22      	add	r2, sp, #136	; 0x88
 800dfc6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dfca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800dfce:	f04f 0800 	mov.w	r8, #0
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	4598      	cmp	r8, r3
 800dfd6:	dc2f      	bgt.n	800e038 <__kernel_rem_pio2+0xd8>
 800dfd8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dfdc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800dfe0:	462f      	mov	r7, r5
 800dfe2:	2600      	movs	r6, #0
 800dfe4:	e01b      	b.n	800e01e <__kernel_rem_pio2+0xbe>
 800dfe6:	42ef      	cmn	r7, r5
 800dfe8:	d407      	bmi.n	800dffa <__kernel_rem_pio2+0x9a>
 800dfea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dfee:	f7f2 fa99 	bl	8000524 <__aeabi_i2d>
 800dff2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dff6:	3501      	adds	r5, #1
 800dff8:	e7df      	b.n	800dfba <__kernel_rem_pio2+0x5a>
 800dffa:	ec51 0b18 	vmov	r0, r1, d8
 800dffe:	e7f8      	b.n	800dff2 <__kernel_rem_pio2+0x92>
 800e000:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e004:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e008:	f7f2 faf6 	bl	80005f8 <__aeabi_dmul>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e014:	f7f2 f93a 	bl	800028c <__adddf3>
 800e018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e01c:	3601      	adds	r6, #1
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	429e      	cmp	r6, r3
 800e022:	f1a7 0708 	sub.w	r7, r7, #8
 800e026:	ddeb      	ble.n	800e000 <__kernel_rem_pio2+0xa0>
 800e028:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e02c:	f108 0801 	add.w	r8, r8, #1
 800e030:	ecab 7b02 	vstmia	fp!, {d7}
 800e034:	3508      	adds	r5, #8
 800e036:	e7cc      	b.n	800dfd2 <__kernel_rem_pio2+0x72>
 800e038:	9b02      	ldr	r3, [sp, #8]
 800e03a:	aa0e      	add	r2, sp, #56	; 0x38
 800e03c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e040:	930d      	str	r3, [sp, #52]	; 0x34
 800e042:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e044:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e048:	9c02      	ldr	r4, [sp, #8]
 800e04a:	930c      	str	r3, [sp, #48]	; 0x30
 800e04c:	00e3      	lsls	r3, r4, #3
 800e04e:	930a      	str	r3, [sp, #40]	; 0x28
 800e050:	ab9a      	add	r3, sp, #616	; 0x268
 800e052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e056:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e05a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e05e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e060:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e064:	46c3      	mov	fp, r8
 800e066:	46a1      	mov	r9, r4
 800e068:	f1b9 0f00 	cmp.w	r9, #0
 800e06c:	f1a5 0508 	sub.w	r5, r5, #8
 800e070:	dc77      	bgt.n	800e162 <__kernel_rem_pio2+0x202>
 800e072:	ec47 6b10 	vmov	d0, r6, r7
 800e076:	4650      	mov	r0, sl
 800e078:	f000 fc0a 	bl	800e890 <scalbn>
 800e07c:	ec57 6b10 	vmov	r6, r7, d0
 800e080:	2200      	movs	r2, #0
 800e082:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e086:	ee10 0a10 	vmov	r0, s0
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 fab4 	bl	80005f8 <__aeabi_dmul>
 800e090:	ec41 0b10 	vmov	d0, r0, r1
 800e094:	f000 fb7c 	bl	800e790 <floor>
 800e098:	4b7c      	ldr	r3, [pc, #496]	; (800e28c <__kernel_rem_pio2+0x32c>)
 800e09a:	ec51 0b10 	vmov	r0, r1, d0
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f7f2 faaa 	bl	80005f8 <__aeabi_dmul>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	4639      	mov	r1, r7
 800e0ac:	f7f2 f8ec 	bl	8000288 <__aeabi_dsub>
 800e0b0:	460f      	mov	r7, r1
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	f7f2 fd50 	bl	8000b58 <__aeabi_d2iz>
 800e0b8:	9004      	str	r0, [sp, #16]
 800e0ba:	f7f2 fa33 	bl	8000524 <__aeabi_i2d>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	f7f2 f8df 	bl	8000288 <__aeabi_dsub>
 800e0ca:	f1ba 0f00 	cmp.w	sl, #0
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	dd6d      	ble.n	800e1b0 <__kernel_rem_pio2+0x250>
 800e0d4:	1e62      	subs	r2, r4, #1
 800e0d6:	ab0e      	add	r3, sp, #56	; 0x38
 800e0d8:	9d04      	ldr	r5, [sp, #16]
 800e0da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e0de:	f1ca 0118 	rsb	r1, sl, #24
 800e0e2:	fa40 f301 	asr.w	r3, r0, r1
 800e0e6:	441d      	add	r5, r3
 800e0e8:	408b      	lsls	r3, r1
 800e0ea:	1ac0      	subs	r0, r0, r3
 800e0ec:	ab0e      	add	r3, sp, #56	; 0x38
 800e0ee:	9504      	str	r5, [sp, #16]
 800e0f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e0f4:	f1ca 0317 	rsb	r3, sl, #23
 800e0f8:	fa40 fb03 	asr.w	fp, r0, r3
 800e0fc:	f1bb 0f00 	cmp.w	fp, #0
 800e100:	dd65      	ble.n	800e1ce <__kernel_rem_pio2+0x26e>
 800e102:	9b04      	ldr	r3, [sp, #16]
 800e104:	2200      	movs	r2, #0
 800e106:	3301      	adds	r3, #1
 800e108:	9304      	str	r3, [sp, #16]
 800e10a:	4615      	mov	r5, r2
 800e10c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e110:	4294      	cmp	r4, r2
 800e112:	f300 809c 	bgt.w	800e24e <__kernel_rem_pio2+0x2ee>
 800e116:	f1ba 0f00 	cmp.w	sl, #0
 800e11a:	dd07      	ble.n	800e12c <__kernel_rem_pio2+0x1cc>
 800e11c:	f1ba 0f01 	cmp.w	sl, #1
 800e120:	f000 80c0 	beq.w	800e2a4 <__kernel_rem_pio2+0x344>
 800e124:	f1ba 0f02 	cmp.w	sl, #2
 800e128:	f000 80c6 	beq.w	800e2b8 <__kernel_rem_pio2+0x358>
 800e12c:	f1bb 0f02 	cmp.w	fp, #2
 800e130:	d14d      	bne.n	800e1ce <__kernel_rem_pio2+0x26e>
 800e132:	4632      	mov	r2, r6
 800e134:	463b      	mov	r3, r7
 800e136:	4956      	ldr	r1, [pc, #344]	; (800e290 <__kernel_rem_pio2+0x330>)
 800e138:	2000      	movs	r0, #0
 800e13a:	f7f2 f8a5 	bl	8000288 <__aeabi_dsub>
 800e13e:	4606      	mov	r6, r0
 800e140:	460f      	mov	r7, r1
 800e142:	2d00      	cmp	r5, #0
 800e144:	d043      	beq.n	800e1ce <__kernel_rem_pio2+0x26e>
 800e146:	4650      	mov	r0, sl
 800e148:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e280 <__kernel_rem_pio2+0x320>
 800e14c:	f000 fba0 	bl	800e890 <scalbn>
 800e150:	4630      	mov	r0, r6
 800e152:	4639      	mov	r1, r7
 800e154:	ec53 2b10 	vmov	r2, r3, d0
 800e158:	f7f2 f896 	bl	8000288 <__aeabi_dsub>
 800e15c:	4606      	mov	r6, r0
 800e15e:	460f      	mov	r7, r1
 800e160:	e035      	b.n	800e1ce <__kernel_rem_pio2+0x26e>
 800e162:	4b4c      	ldr	r3, [pc, #304]	; (800e294 <__kernel_rem_pio2+0x334>)
 800e164:	2200      	movs	r2, #0
 800e166:	4630      	mov	r0, r6
 800e168:	4639      	mov	r1, r7
 800e16a:	f7f2 fa45 	bl	80005f8 <__aeabi_dmul>
 800e16e:	f7f2 fcf3 	bl	8000b58 <__aeabi_d2iz>
 800e172:	f7f2 f9d7 	bl	8000524 <__aeabi_i2d>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	ec43 2b18 	vmov	d8, r2, r3
 800e17e:	4b46      	ldr	r3, [pc, #280]	; (800e298 <__kernel_rem_pio2+0x338>)
 800e180:	2200      	movs	r2, #0
 800e182:	f7f2 fa39 	bl	80005f8 <__aeabi_dmul>
 800e186:	4602      	mov	r2, r0
 800e188:	460b      	mov	r3, r1
 800e18a:	4630      	mov	r0, r6
 800e18c:	4639      	mov	r1, r7
 800e18e:	f7f2 f87b 	bl	8000288 <__aeabi_dsub>
 800e192:	f7f2 fce1 	bl	8000b58 <__aeabi_d2iz>
 800e196:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e19a:	f84b 0b04 	str.w	r0, [fp], #4
 800e19e:	ec51 0b18 	vmov	r0, r1, d8
 800e1a2:	f7f2 f873 	bl	800028c <__adddf3>
 800e1a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	e75b      	b.n	800e068 <__kernel_rem_pio2+0x108>
 800e1b0:	d106      	bne.n	800e1c0 <__kernel_rem_pio2+0x260>
 800e1b2:	1e63      	subs	r3, r4, #1
 800e1b4:	aa0e      	add	r2, sp, #56	; 0x38
 800e1b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e1ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e1be:	e79d      	b.n	800e0fc <__kernel_rem_pio2+0x19c>
 800e1c0:	4b36      	ldr	r3, [pc, #216]	; (800e29c <__kernel_rem_pio2+0x33c>)
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f7f2 fc9e 	bl	8000b04 <__aeabi_dcmpge>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d13d      	bne.n	800e248 <__kernel_rem_pio2+0x2e8>
 800e1cc:	4683      	mov	fp, r0
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	4639      	mov	r1, r7
 800e1d6:	f7f2 fc77 	bl	8000ac8 <__aeabi_dcmpeq>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	f000 80c0 	beq.w	800e360 <__kernel_rem_pio2+0x400>
 800e1e0:	1e65      	subs	r5, r4, #1
 800e1e2:	462b      	mov	r3, r5
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	9902      	ldr	r1, [sp, #8]
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	da6c      	bge.n	800e2c6 <__kernel_rem_pio2+0x366>
 800e1ec:	2a00      	cmp	r2, #0
 800e1ee:	f000 8089 	beq.w	800e304 <__kernel_rem_pio2+0x3a4>
 800e1f2:	ab0e      	add	r3, sp, #56	; 0x38
 800e1f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e1f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f000 80ad 	beq.w	800e35c <__kernel_rem_pio2+0x3fc>
 800e202:	4650      	mov	r0, sl
 800e204:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e280 <__kernel_rem_pio2+0x320>
 800e208:	f000 fb42 	bl	800e890 <scalbn>
 800e20c:	ab9a      	add	r3, sp, #616	; 0x268
 800e20e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e212:	ec57 6b10 	vmov	r6, r7, d0
 800e216:	00ec      	lsls	r4, r5, #3
 800e218:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e21c:	46aa      	mov	sl, r5
 800e21e:	f1ba 0f00 	cmp.w	sl, #0
 800e222:	f280 80d6 	bge.w	800e3d2 <__kernel_rem_pio2+0x472>
 800e226:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e278 <__kernel_rem_pio2+0x318>
 800e22a:	462e      	mov	r6, r5
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	f2c0 8104 	blt.w	800e43a <__kernel_rem_pio2+0x4da>
 800e232:	ab72      	add	r3, sp, #456	; 0x1c8
 800e234:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e238:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e2a0 <__kernel_rem_pio2+0x340>
 800e23c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e240:	f04f 0800 	mov.w	r8, #0
 800e244:	1baf      	subs	r7, r5, r6
 800e246:	e0ea      	b.n	800e41e <__kernel_rem_pio2+0x4be>
 800e248:	f04f 0b02 	mov.w	fp, #2
 800e24c:	e759      	b.n	800e102 <__kernel_rem_pio2+0x1a2>
 800e24e:	f8d8 3000 	ldr.w	r3, [r8]
 800e252:	b955      	cbnz	r5, 800e26a <__kernel_rem_pio2+0x30a>
 800e254:	b123      	cbz	r3, 800e260 <__kernel_rem_pio2+0x300>
 800e256:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e25a:	f8c8 3000 	str.w	r3, [r8]
 800e25e:	2301      	movs	r3, #1
 800e260:	3201      	adds	r2, #1
 800e262:	f108 0804 	add.w	r8, r8, #4
 800e266:	461d      	mov	r5, r3
 800e268:	e752      	b.n	800e110 <__kernel_rem_pio2+0x1b0>
 800e26a:	1acb      	subs	r3, r1, r3
 800e26c:	f8c8 3000 	str.w	r3, [r8]
 800e270:	462b      	mov	r3, r5
 800e272:	e7f5      	b.n	800e260 <__kernel_rem_pio2+0x300>
 800e274:	f3af 8000 	nop.w
	...
 800e284:	3ff00000 	.word	0x3ff00000
 800e288:	0800f0b8 	.word	0x0800f0b8
 800e28c:	40200000 	.word	0x40200000
 800e290:	3ff00000 	.word	0x3ff00000
 800e294:	3e700000 	.word	0x3e700000
 800e298:	41700000 	.word	0x41700000
 800e29c:	3fe00000 	.word	0x3fe00000
 800e2a0:	0800f078 	.word	0x0800f078
 800e2a4:	1e62      	subs	r2, r4, #1
 800e2a6:	ab0e      	add	r3, sp, #56	; 0x38
 800e2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e2b0:	a90e      	add	r1, sp, #56	; 0x38
 800e2b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e2b6:	e739      	b.n	800e12c <__kernel_rem_pio2+0x1cc>
 800e2b8:	1e62      	subs	r2, r4, #1
 800e2ba:	ab0e      	add	r3, sp, #56	; 0x38
 800e2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e2c4:	e7f4      	b.n	800e2b0 <__kernel_rem_pio2+0x350>
 800e2c6:	a90e      	add	r1, sp, #56	; 0x38
 800e2c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	e789      	b.n	800e1e6 <__kernel_rem_pio2+0x286>
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e2d8:	2900      	cmp	r1, #0
 800e2da:	d0fa      	beq.n	800e2d2 <__kernel_rem_pio2+0x372>
 800e2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e2e2:	446a      	add	r2, sp
 800e2e4:	3a98      	subs	r2, #152	; 0x98
 800e2e6:	920a      	str	r2, [sp, #40]	; 0x28
 800e2e8:	9a08      	ldr	r2, [sp, #32]
 800e2ea:	18e3      	adds	r3, r4, r3
 800e2ec:	18a5      	adds	r5, r4, r2
 800e2ee:	aa22      	add	r2, sp, #136	; 0x88
 800e2f0:	f104 0801 	add.w	r8, r4, #1
 800e2f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9b04      	ldr	r3, [sp, #16]
 800e2fc:	4543      	cmp	r3, r8
 800e2fe:	da04      	bge.n	800e30a <__kernel_rem_pio2+0x3aa>
 800e300:	461c      	mov	r4, r3
 800e302:	e6a3      	b.n	800e04c <__kernel_rem_pio2+0xec>
 800e304:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e306:	2301      	movs	r3, #1
 800e308:	e7e4      	b.n	800e2d4 <__kernel_rem_pio2+0x374>
 800e30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e30c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e310:	f7f2 f908 	bl	8000524 <__aeabi_i2d>
 800e314:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e31a:	46ab      	mov	fp, r5
 800e31c:	461c      	mov	r4, r3
 800e31e:	f04f 0900 	mov.w	r9, #0
 800e322:	2600      	movs	r6, #0
 800e324:	2700      	movs	r7, #0
 800e326:	9b06      	ldr	r3, [sp, #24]
 800e328:	4599      	cmp	r9, r3
 800e32a:	dd06      	ble.n	800e33a <__kernel_rem_pio2+0x3da>
 800e32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e32e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e332:	f108 0801 	add.w	r8, r8, #1
 800e336:	930a      	str	r3, [sp, #40]	; 0x28
 800e338:	e7df      	b.n	800e2fa <__kernel_rem_pio2+0x39a>
 800e33a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e33e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e342:	f7f2 f959 	bl	80005f8 <__aeabi_dmul>
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	4630      	mov	r0, r6
 800e34c:	4639      	mov	r1, r7
 800e34e:	f7f1 ff9d 	bl	800028c <__adddf3>
 800e352:	f109 0901 	add.w	r9, r9, #1
 800e356:	4606      	mov	r6, r0
 800e358:	460f      	mov	r7, r1
 800e35a:	e7e4      	b.n	800e326 <__kernel_rem_pio2+0x3c6>
 800e35c:	3d01      	subs	r5, #1
 800e35e:	e748      	b.n	800e1f2 <__kernel_rem_pio2+0x292>
 800e360:	ec47 6b10 	vmov	d0, r6, r7
 800e364:	f1ca 0000 	rsb	r0, sl, #0
 800e368:	f000 fa92 	bl	800e890 <scalbn>
 800e36c:	ec57 6b10 	vmov	r6, r7, d0
 800e370:	4ba0      	ldr	r3, [pc, #640]	; (800e5f4 <__kernel_rem_pio2+0x694>)
 800e372:	ee10 0a10 	vmov	r0, s0
 800e376:	2200      	movs	r2, #0
 800e378:	4639      	mov	r1, r7
 800e37a:	f7f2 fbc3 	bl	8000b04 <__aeabi_dcmpge>
 800e37e:	b1f8      	cbz	r0, 800e3c0 <__kernel_rem_pio2+0x460>
 800e380:	4b9d      	ldr	r3, [pc, #628]	; (800e5f8 <__kernel_rem_pio2+0x698>)
 800e382:	2200      	movs	r2, #0
 800e384:	4630      	mov	r0, r6
 800e386:	4639      	mov	r1, r7
 800e388:	f7f2 f936 	bl	80005f8 <__aeabi_dmul>
 800e38c:	f7f2 fbe4 	bl	8000b58 <__aeabi_d2iz>
 800e390:	4680      	mov	r8, r0
 800e392:	f7f2 f8c7 	bl	8000524 <__aeabi_i2d>
 800e396:	4b97      	ldr	r3, [pc, #604]	; (800e5f4 <__kernel_rem_pio2+0x694>)
 800e398:	2200      	movs	r2, #0
 800e39a:	f7f2 f92d 	bl	80005f8 <__aeabi_dmul>
 800e39e:	460b      	mov	r3, r1
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f7f1 ff6f 	bl	8000288 <__aeabi_dsub>
 800e3aa:	f7f2 fbd5 	bl	8000b58 <__aeabi_d2iz>
 800e3ae:	1c65      	adds	r5, r4, #1
 800e3b0:	ab0e      	add	r3, sp, #56	; 0x38
 800e3b2:	f10a 0a18 	add.w	sl, sl, #24
 800e3b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e3ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e3be:	e720      	b.n	800e202 <__kernel_rem_pio2+0x2a2>
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	4639      	mov	r1, r7
 800e3c4:	f7f2 fbc8 	bl	8000b58 <__aeabi_d2iz>
 800e3c8:	ab0e      	add	r3, sp, #56	; 0x38
 800e3ca:	4625      	mov	r5, r4
 800e3cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e3d0:	e717      	b.n	800e202 <__kernel_rem_pio2+0x2a2>
 800e3d2:	ab0e      	add	r3, sp, #56	; 0x38
 800e3d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e3d8:	f7f2 f8a4 	bl	8000524 <__aeabi_i2d>
 800e3dc:	4632      	mov	r2, r6
 800e3de:	463b      	mov	r3, r7
 800e3e0:	f7f2 f90a 	bl	80005f8 <__aeabi_dmul>
 800e3e4:	4b84      	ldr	r3, [pc, #528]	; (800e5f8 <__kernel_rem_pio2+0x698>)
 800e3e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	f7f2 f902 	bl	80005f8 <__aeabi_dmul>
 800e3f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3f8:	4606      	mov	r6, r0
 800e3fa:	460f      	mov	r7, r1
 800e3fc:	e70f      	b.n	800e21e <__kernel_rem_pio2+0x2be>
 800e3fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e402:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e406:	f7f2 f8f7 	bl	80005f8 <__aeabi_dmul>
 800e40a:	4602      	mov	r2, r0
 800e40c:	460b      	mov	r3, r1
 800e40e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e412:	f7f1 ff3b 	bl	800028c <__adddf3>
 800e416:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e41a:	f108 0801 	add.w	r8, r8, #1
 800e41e:	9b02      	ldr	r3, [sp, #8]
 800e420:	4598      	cmp	r8, r3
 800e422:	dc01      	bgt.n	800e428 <__kernel_rem_pio2+0x4c8>
 800e424:	45b8      	cmp	r8, r7
 800e426:	ddea      	ble.n	800e3fe <__kernel_rem_pio2+0x49e>
 800e428:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e42c:	ab4a      	add	r3, sp, #296	; 0x128
 800e42e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e432:	ed87 7b00 	vstr	d7, [r7]
 800e436:	3e01      	subs	r6, #1
 800e438:	e6f8      	b.n	800e22c <__kernel_rem_pio2+0x2cc>
 800e43a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	dc0b      	bgt.n	800e458 <__kernel_rem_pio2+0x4f8>
 800e440:	2b00      	cmp	r3, #0
 800e442:	dc35      	bgt.n	800e4b0 <__kernel_rem_pio2+0x550>
 800e444:	d059      	beq.n	800e4fa <__kernel_rem_pio2+0x59a>
 800e446:	9b04      	ldr	r3, [sp, #16]
 800e448:	f003 0007 	and.w	r0, r3, #7
 800e44c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e450:	ecbd 8b02 	vpop	{d8}
 800e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e458:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d1f3      	bne.n	800e446 <__kernel_rem_pio2+0x4e6>
 800e45e:	ab4a      	add	r3, sp, #296	; 0x128
 800e460:	4423      	add	r3, r4
 800e462:	9306      	str	r3, [sp, #24]
 800e464:	461c      	mov	r4, r3
 800e466:	469a      	mov	sl, r3
 800e468:	9502      	str	r5, [sp, #8]
 800e46a:	9b02      	ldr	r3, [sp, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f1aa 0a08 	sub.w	sl, sl, #8
 800e472:	dc6b      	bgt.n	800e54c <__kernel_rem_pio2+0x5ec>
 800e474:	46aa      	mov	sl, r5
 800e476:	f1ba 0f01 	cmp.w	sl, #1
 800e47a:	f1a4 0408 	sub.w	r4, r4, #8
 800e47e:	f300 8085 	bgt.w	800e58c <__kernel_rem_pio2+0x62c>
 800e482:	9c06      	ldr	r4, [sp, #24]
 800e484:	2000      	movs	r0, #0
 800e486:	3408      	adds	r4, #8
 800e488:	2100      	movs	r1, #0
 800e48a:	2d01      	cmp	r5, #1
 800e48c:	f300 809d 	bgt.w	800e5ca <__kernel_rem_pio2+0x66a>
 800e490:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e494:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e498:	f1bb 0f00 	cmp.w	fp, #0
 800e49c:	f040 809b 	bne.w	800e5d6 <__kernel_rem_pio2+0x676>
 800e4a0:	9b01      	ldr	r3, [sp, #4]
 800e4a2:	e9c3 5600 	strd	r5, r6, [r3]
 800e4a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e4aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e4ae:	e7ca      	b.n	800e446 <__kernel_rem_pio2+0x4e6>
 800e4b0:	3408      	adds	r4, #8
 800e4b2:	ab4a      	add	r3, sp, #296	; 0x128
 800e4b4:	441c      	add	r4, r3
 800e4b6:	462e      	mov	r6, r5
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	2e00      	cmp	r6, #0
 800e4be:	da36      	bge.n	800e52e <__kernel_rem_pio2+0x5ce>
 800e4c0:	f1bb 0f00 	cmp.w	fp, #0
 800e4c4:	d039      	beq.n	800e53a <__kernel_rem_pio2+0x5da>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4cc:	9c01      	ldr	r4, [sp, #4]
 800e4ce:	e9c4 2300 	strd	r2, r3, [r4]
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e4da:	f7f1 fed5 	bl	8000288 <__aeabi_dsub>
 800e4de:	ae4c      	add	r6, sp, #304	; 0x130
 800e4e0:	2401      	movs	r4, #1
 800e4e2:	42a5      	cmp	r5, r4
 800e4e4:	da2c      	bge.n	800e540 <__kernel_rem_pio2+0x5e0>
 800e4e6:	f1bb 0f00 	cmp.w	fp, #0
 800e4ea:	d002      	beq.n	800e4f2 <__kernel_rem_pio2+0x592>
 800e4ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	9b01      	ldr	r3, [sp, #4]
 800e4f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e4f8:	e7a5      	b.n	800e446 <__kernel_rem_pio2+0x4e6>
 800e4fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e4fe:	eb0d 0403 	add.w	r4, sp, r3
 800e502:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e506:	2000      	movs	r0, #0
 800e508:	2100      	movs	r1, #0
 800e50a:	2d00      	cmp	r5, #0
 800e50c:	da09      	bge.n	800e522 <__kernel_rem_pio2+0x5c2>
 800e50e:	f1bb 0f00 	cmp.w	fp, #0
 800e512:	d002      	beq.n	800e51a <__kernel_rem_pio2+0x5ba>
 800e514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e518:	4619      	mov	r1, r3
 800e51a:	9b01      	ldr	r3, [sp, #4]
 800e51c:	e9c3 0100 	strd	r0, r1, [r3]
 800e520:	e791      	b.n	800e446 <__kernel_rem_pio2+0x4e6>
 800e522:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e526:	f7f1 feb1 	bl	800028c <__adddf3>
 800e52a:	3d01      	subs	r5, #1
 800e52c:	e7ed      	b.n	800e50a <__kernel_rem_pio2+0x5aa>
 800e52e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e532:	f7f1 feab 	bl	800028c <__adddf3>
 800e536:	3e01      	subs	r6, #1
 800e538:	e7c0      	b.n	800e4bc <__kernel_rem_pio2+0x55c>
 800e53a:	4602      	mov	r2, r0
 800e53c:	460b      	mov	r3, r1
 800e53e:	e7c5      	b.n	800e4cc <__kernel_rem_pio2+0x56c>
 800e540:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e544:	f7f1 fea2 	bl	800028c <__adddf3>
 800e548:	3401      	adds	r4, #1
 800e54a:	e7ca      	b.n	800e4e2 <__kernel_rem_pio2+0x582>
 800e54c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e550:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e554:	9b02      	ldr	r3, [sp, #8]
 800e556:	3b01      	subs	r3, #1
 800e558:	9302      	str	r3, [sp, #8]
 800e55a:	4632      	mov	r2, r6
 800e55c:	463b      	mov	r3, r7
 800e55e:	4640      	mov	r0, r8
 800e560:	4649      	mov	r1, r9
 800e562:	f7f1 fe93 	bl	800028c <__adddf3>
 800e566:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4640      	mov	r0, r8
 800e570:	4649      	mov	r1, r9
 800e572:	f7f1 fe89 	bl	8000288 <__aeabi_dsub>
 800e576:	4632      	mov	r2, r6
 800e578:	463b      	mov	r3, r7
 800e57a:	f7f1 fe87 	bl	800028c <__adddf3>
 800e57e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e582:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e586:	ed8a 7b00 	vstr	d7, [sl]
 800e58a:	e76e      	b.n	800e46a <__kernel_rem_pio2+0x50a>
 800e58c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e590:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e594:	4640      	mov	r0, r8
 800e596:	4632      	mov	r2, r6
 800e598:	463b      	mov	r3, r7
 800e59a:	4649      	mov	r1, r9
 800e59c:	f7f1 fe76 	bl	800028c <__adddf3>
 800e5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	4649      	mov	r1, r9
 800e5ac:	f7f1 fe6c 	bl	8000288 <__aeabi_dsub>
 800e5b0:	4632      	mov	r2, r6
 800e5b2:	463b      	mov	r3, r7
 800e5b4:	f7f1 fe6a 	bl	800028c <__adddf3>
 800e5b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e5c0:	ed84 7b00 	vstr	d7, [r4]
 800e5c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5c8:	e755      	b.n	800e476 <__kernel_rem_pio2+0x516>
 800e5ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e5ce:	f7f1 fe5d 	bl	800028c <__adddf3>
 800e5d2:	3d01      	subs	r5, #1
 800e5d4:	e759      	b.n	800e48a <__kernel_rem_pio2+0x52a>
 800e5d6:	9b01      	ldr	r3, [sp, #4]
 800e5d8:	9a01      	ldr	r2, [sp, #4]
 800e5da:	601d      	str	r5, [r3, #0]
 800e5dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e5e0:	605c      	str	r4, [r3, #4]
 800e5e2:	609f      	str	r7, [r3, #8]
 800e5e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e5e8:	60d3      	str	r3, [r2, #12]
 800e5ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ee:	6110      	str	r0, [r2, #16]
 800e5f0:	6153      	str	r3, [r2, #20]
 800e5f2:	e728      	b.n	800e446 <__kernel_rem_pio2+0x4e6>
 800e5f4:	41700000 	.word	0x41700000
 800e5f8:	3e700000 	.word	0x3e700000
 800e5fc:	00000000 	.word	0x00000000

0800e600 <__kernel_sin>:
 800e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e604:	ed2d 8b04 	vpush	{d8-d9}
 800e608:	eeb0 8a41 	vmov.f32	s16, s2
 800e60c:	eef0 8a61 	vmov.f32	s17, s3
 800e610:	ec55 4b10 	vmov	r4, r5, d0
 800e614:	b083      	sub	sp, #12
 800e616:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e61a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e61e:	9001      	str	r0, [sp, #4]
 800e620:	da06      	bge.n	800e630 <__kernel_sin+0x30>
 800e622:	ee10 0a10 	vmov	r0, s0
 800e626:	4629      	mov	r1, r5
 800e628:	f7f2 fa96 	bl	8000b58 <__aeabi_d2iz>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d051      	beq.n	800e6d4 <__kernel_sin+0xd4>
 800e630:	4622      	mov	r2, r4
 800e632:	462b      	mov	r3, r5
 800e634:	4620      	mov	r0, r4
 800e636:	4629      	mov	r1, r5
 800e638:	f7f1 ffde 	bl	80005f8 <__aeabi_dmul>
 800e63c:	4682      	mov	sl, r0
 800e63e:	468b      	mov	fp, r1
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4620      	mov	r0, r4
 800e646:	4629      	mov	r1, r5
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	a341      	add	r3, pc, #260	; (adr r3, 800e754 <__kernel_sin+0x154>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	4680      	mov	r8, r0
 800e654:	4689      	mov	r9, r1
 800e656:	4650      	mov	r0, sl
 800e658:	4659      	mov	r1, fp
 800e65a:	f7f1 ffcd 	bl	80005f8 <__aeabi_dmul>
 800e65e:	a33f      	add	r3, pc, #252	; (adr r3, 800e75c <__kernel_sin+0x15c>)
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f7f1 fe10 	bl	8000288 <__aeabi_dsub>
 800e668:	4652      	mov	r2, sl
 800e66a:	465b      	mov	r3, fp
 800e66c:	f7f1 ffc4 	bl	80005f8 <__aeabi_dmul>
 800e670:	a33c      	add	r3, pc, #240	; (adr r3, 800e764 <__kernel_sin+0x164>)
 800e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e676:	f7f1 fe09 	bl	800028c <__adddf3>
 800e67a:	4652      	mov	r2, sl
 800e67c:	465b      	mov	r3, fp
 800e67e:	f7f1 ffbb 	bl	80005f8 <__aeabi_dmul>
 800e682:	a33a      	add	r3, pc, #232	; (adr r3, 800e76c <__kernel_sin+0x16c>)
 800e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e688:	f7f1 fdfe 	bl	8000288 <__aeabi_dsub>
 800e68c:	4652      	mov	r2, sl
 800e68e:	465b      	mov	r3, fp
 800e690:	f7f1 ffb2 	bl	80005f8 <__aeabi_dmul>
 800e694:	a337      	add	r3, pc, #220	; (adr r3, 800e774 <__kernel_sin+0x174>)
 800e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69a:	f7f1 fdf7 	bl	800028c <__adddf3>
 800e69e:	9b01      	ldr	r3, [sp, #4]
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	460f      	mov	r7, r1
 800e6a4:	b9eb      	cbnz	r3, 800e6e2 <__kernel_sin+0xe2>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4650      	mov	r0, sl
 800e6ac:	4659      	mov	r1, fp
 800e6ae:	f7f1 ffa3 	bl	80005f8 <__aeabi_dmul>
 800e6b2:	a325      	add	r3, pc, #148	; (adr r3, 800e748 <__kernel_sin+0x148>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	f7f1 fde6 	bl	8000288 <__aeabi_dsub>
 800e6bc:	4642      	mov	r2, r8
 800e6be:	464b      	mov	r3, r9
 800e6c0:	f7f1 ff9a 	bl	80005f8 <__aeabi_dmul>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	460b      	mov	r3, r1
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	f7f1 fdde 	bl	800028c <__adddf3>
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	ec45 4b10 	vmov	d0, r4, r5
 800e6d8:	b003      	add	sp, #12
 800e6da:	ecbd 8b04 	vpop	{d8-d9}
 800e6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <__kernel_sin+0x150>)
 800e6e4:	ec51 0b18 	vmov	r0, r1, d8
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f7f1 ff85 	bl	80005f8 <__aeabi_dmul>
 800e6ee:	4632      	mov	r2, r6
 800e6f0:	ec41 0b19 	vmov	d9, r0, r1
 800e6f4:	463b      	mov	r3, r7
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	f7f1 ff7d 	bl	80005f8 <__aeabi_dmul>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	ec51 0b19 	vmov	r0, r1, d9
 800e706:	f7f1 fdbf 	bl	8000288 <__aeabi_dsub>
 800e70a:	4652      	mov	r2, sl
 800e70c:	465b      	mov	r3, fp
 800e70e:	f7f1 ff73 	bl	80005f8 <__aeabi_dmul>
 800e712:	ec53 2b18 	vmov	r2, r3, d8
 800e716:	f7f1 fdb7 	bl	8000288 <__aeabi_dsub>
 800e71a:	a30b      	add	r3, pc, #44	; (adr r3, 800e748 <__kernel_sin+0x148>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	4606      	mov	r6, r0
 800e722:	460f      	mov	r7, r1
 800e724:	4640      	mov	r0, r8
 800e726:	4649      	mov	r1, r9
 800e728:	f7f1 ff66 	bl	80005f8 <__aeabi_dmul>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4630      	mov	r0, r6
 800e732:	4639      	mov	r1, r7
 800e734:	f7f1 fdaa 	bl	800028c <__adddf3>
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	4620      	mov	r0, r4
 800e73e:	4629      	mov	r1, r5
 800e740:	f7f1 fda2 	bl	8000288 <__aeabi_dsub>
 800e744:	e7c4      	b.n	800e6d0 <__kernel_sin+0xd0>
 800e746:	bf00      	nop
 800e748:	55555549 	.word	0x55555549
 800e74c:	3fc55555 	.word	0x3fc55555
 800e750:	3fe00000 	.word	0x3fe00000
 800e754:	5acfd57c 	.word	0x5acfd57c
 800e758:	3de5d93a 	.word	0x3de5d93a
 800e75c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e760:	3e5ae5e6 	.word	0x3e5ae5e6
 800e764:	57b1fe7d 	.word	0x57b1fe7d
 800e768:	3ec71de3 	.word	0x3ec71de3
 800e76c:	19c161d5 	.word	0x19c161d5
 800e770:	3f2a01a0 	.word	0x3f2a01a0
 800e774:	1110f8a6 	.word	0x1110f8a6
 800e778:	3f811111 	.word	0x3f811111

0800e77c <fabs>:
 800e77c:	ec51 0b10 	vmov	r0, r1, d0
 800e780:	ee10 2a10 	vmov	r2, s0
 800e784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e788:	ec43 2b10 	vmov	d0, r2, r3
 800e78c:	4770      	bx	lr
	...

0800e790 <floor>:
 800e790:	ec51 0b10 	vmov	r0, r1, d0
 800e794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e798:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e79c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e7a0:	2e13      	cmp	r6, #19
 800e7a2:	ee10 5a10 	vmov	r5, s0
 800e7a6:	ee10 8a10 	vmov	r8, s0
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	dc32      	bgt.n	800e814 <floor+0x84>
 800e7ae:	2e00      	cmp	r6, #0
 800e7b0:	da14      	bge.n	800e7dc <floor+0x4c>
 800e7b2:	a333      	add	r3, pc, #204	; (adr r3, 800e880 <floor+0xf0>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	f7f1 fd68 	bl	800028c <__adddf3>
 800e7bc:	2200      	movs	r2, #0
 800e7be:	2300      	movs	r3, #0
 800e7c0:	f7f2 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 800e7c4:	b138      	cbz	r0, 800e7d6 <floor+0x46>
 800e7c6:	2c00      	cmp	r4, #0
 800e7c8:	da57      	bge.n	800e87a <floor+0xea>
 800e7ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e7ce:	431d      	orrs	r5, r3
 800e7d0:	d001      	beq.n	800e7d6 <floor+0x46>
 800e7d2:	4c2d      	ldr	r4, [pc, #180]	; (800e888 <floor+0xf8>)
 800e7d4:	2500      	movs	r5, #0
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	4628      	mov	r0, r5
 800e7da:	e025      	b.n	800e828 <floor+0x98>
 800e7dc:	4f2b      	ldr	r7, [pc, #172]	; (800e88c <floor+0xfc>)
 800e7de:	4137      	asrs	r7, r6
 800e7e0:	ea01 0307 	and.w	r3, r1, r7
 800e7e4:	4303      	orrs	r3, r0
 800e7e6:	d01f      	beq.n	800e828 <floor+0x98>
 800e7e8:	a325      	add	r3, pc, #148	; (adr r3, 800e880 <floor+0xf0>)
 800e7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ee:	f7f1 fd4d 	bl	800028c <__adddf3>
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f7f2 f98f 	bl	8000b18 <__aeabi_dcmpgt>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d0eb      	beq.n	800e7d6 <floor+0x46>
 800e7fe:	2c00      	cmp	r4, #0
 800e800:	bfbe      	ittt	lt
 800e802:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e806:	fa43 f606 	asrlt.w	r6, r3, r6
 800e80a:	19a4      	addlt	r4, r4, r6
 800e80c:	ea24 0407 	bic.w	r4, r4, r7
 800e810:	2500      	movs	r5, #0
 800e812:	e7e0      	b.n	800e7d6 <floor+0x46>
 800e814:	2e33      	cmp	r6, #51	; 0x33
 800e816:	dd0b      	ble.n	800e830 <floor+0xa0>
 800e818:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e81c:	d104      	bne.n	800e828 <floor+0x98>
 800e81e:	ee10 2a10 	vmov	r2, s0
 800e822:	460b      	mov	r3, r1
 800e824:	f7f1 fd32 	bl	800028c <__adddf3>
 800e828:	ec41 0b10 	vmov	d0, r0, r1
 800e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e830:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e834:	f04f 33ff 	mov.w	r3, #4294967295
 800e838:	fa23 f707 	lsr.w	r7, r3, r7
 800e83c:	4207      	tst	r7, r0
 800e83e:	d0f3      	beq.n	800e828 <floor+0x98>
 800e840:	a30f      	add	r3, pc, #60	; (adr r3, 800e880 <floor+0xf0>)
 800e842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e846:	f7f1 fd21 	bl	800028c <__adddf3>
 800e84a:	2200      	movs	r2, #0
 800e84c:	2300      	movs	r3, #0
 800e84e:	f7f2 f963 	bl	8000b18 <__aeabi_dcmpgt>
 800e852:	2800      	cmp	r0, #0
 800e854:	d0bf      	beq.n	800e7d6 <floor+0x46>
 800e856:	2c00      	cmp	r4, #0
 800e858:	da02      	bge.n	800e860 <floor+0xd0>
 800e85a:	2e14      	cmp	r6, #20
 800e85c:	d103      	bne.n	800e866 <floor+0xd6>
 800e85e:	3401      	adds	r4, #1
 800e860:	ea25 0507 	bic.w	r5, r5, r7
 800e864:	e7b7      	b.n	800e7d6 <floor+0x46>
 800e866:	2301      	movs	r3, #1
 800e868:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e86c:	fa03 f606 	lsl.w	r6, r3, r6
 800e870:	4435      	add	r5, r6
 800e872:	4545      	cmp	r5, r8
 800e874:	bf38      	it	cc
 800e876:	18e4      	addcc	r4, r4, r3
 800e878:	e7f2      	b.n	800e860 <floor+0xd0>
 800e87a:	2500      	movs	r5, #0
 800e87c:	462c      	mov	r4, r5
 800e87e:	e7aa      	b.n	800e7d6 <floor+0x46>
 800e880:	8800759c 	.word	0x8800759c
 800e884:	7e37e43c 	.word	0x7e37e43c
 800e888:	bff00000 	.word	0xbff00000
 800e88c:	000fffff 	.word	0x000fffff

0800e890 <scalbn>:
 800e890:	b570      	push	{r4, r5, r6, lr}
 800e892:	ec55 4b10 	vmov	r4, r5, d0
 800e896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e89a:	4606      	mov	r6, r0
 800e89c:	462b      	mov	r3, r5
 800e89e:	b99a      	cbnz	r2, 800e8c8 <scalbn+0x38>
 800e8a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8a4:	4323      	orrs	r3, r4
 800e8a6:	d036      	beq.n	800e916 <scalbn+0x86>
 800e8a8:	4b39      	ldr	r3, [pc, #228]	; (800e990 <scalbn+0x100>)
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	ee10 0a10 	vmov	r0, s0
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f7f1 fea1 	bl	80005f8 <__aeabi_dmul>
 800e8b6:	4b37      	ldr	r3, [pc, #220]	; (800e994 <scalbn+0x104>)
 800e8b8:	429e      	cmp	r6, r3
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	460d      	mov	r5, r1
 800e8be:	da10      	bge.n	800e8e2 <scalbn+0x52>
 800e8c0:	a32b      	add	r3, pc, #172	; (adr r3, 800e970 <scalbn+0xe0>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	e03a      	b.n	800e93e <scalbn+0xae>
 800e8c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e8cc:	428a      	cmp	r2, r1
 800e8ce:	d10c      	bne.n	800e8ea <scalbn+0x5a>
 800e8d0:	ee10 2a10 	vmov	r2, s0
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	f7f1 fcd8 	bl	800028c <__adddf3>
 800e8dc:	4604      	mov	r4, r0
 800e8de:	460d      	mov	r5, r1
 800e8e0:	e019      	b.n	800e916 <scalbn+0x86>
 800e8e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	3a36      	subs	r2, #54	; 0x36
 800e8ea:	4432      	add	r2, r6
 800e8ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e8f0:	428a      	cmp	r2, r1
 800e8f2:	dd08      	ble.n	800e906 <scalbn+0x76>
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	a120      	add	r1, pc, #128	; (adr r1, 800e978 <scalbn+0xe8>)
 800e8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8fc:	da1c      	bge.n	800e938 <scalbn+0xa8>
 800e8fe:	a120      	add	r1, pc, #128	; (adr r1, 800e980 <scalbn+0xf0>)
 800e900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e904:	e018      	b.n	800e938 <scalbn+0xa8>
 800e906:	2a00      	cmp	r2, #0
 800e908:	dd08      	ble.n	800e91c <scalbn+0x8c>
 800e90a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e90e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e912:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e916:	ec45 4b10 	vmov	d0, r4, r5
 800e91a:	bd70      	pop	{r4, r5, r6, pc}
 800e91c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e920:	da19      	bge.n	800e956 <scalbn+0xc6>
 800e922:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e926:	429e      	cmp	r6, r3
 800e928:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e92c:	dd0a      	ble.n	800e944 <scalbn+0xb4>
 800e92e:	a112      	add	r1, pc, #72	; (adr r1, 800e978 <scalbn+0xe8>)
 800e930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e2      	bne.n	800e8fe <scalbn+0x6e>
 800e938:	a30f      	add	r3, pc, #60	; (adr r3, 800e978 <scalbn+0xe8>)
 800e93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93e:	f7f1 fe5b 	bl	80005f8 <__aeabi_dmul>
 800e942:	e7cb      	b.n	800e8dc <scalbn+0x4c>
 800e944:	a10a      	add	r1, pc, #40	; (adr r1, 800e970 <scalbn+0xe0>)
 800e946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0b8      	beq.n	800e8c0 <scalbn+0x30>
 800e94e:	a10e      	add	r1, pc, #56	; (adr r1, 800e988 <scalbn+0xf8>)
 800e950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e954:	e7b4      	b.n	800e8c0 <scalbn+0x30>
 800e956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e95a:	3236      	adds	r2, #54	; 0x36
 800e95c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e960:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e964:	4620      	mov	r0, r4
 800e966:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <scalbn+0x108>)
 800e968:	2200      	movs	r2, #0
 800e96a:	e7e8      	b.n	800e93e <scalbn+0xae>
 800e96c:	f3af 8000 	nop.w
 800e970:	c2f8f359 	.word	0xc2f8f359
 800e974:	01a56e1f 	.word	0x01a56e1f
 800e978:	8800759c 	.word	0x8800759c
 800e97c:	7e37e43c 	.word	0x7e37e43c
 800e980:	8800759c 	.word	0x8800759c
 800e984:	fe37e43c 	.word	0xfe37e43c
 800e988:	c2f8f359 	.word	0xc2f8f359
 800e98c:	81a56e1f 	.word	0x81a56e1f
 800e990:	43500000 	.word	0x43500000
 800e994:	ffff3cb0 	.word	0xffff3cb0
 800e998:	3c900000 	.word	0x3c900000

0800e99c <_init>:
 800e99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99e:	bf00      	nop
 800e9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9a2:	bc08      	pop	{r3}
 800e9a4:	469e      	mov	lr, r3
 800e9a6:	4770      	bx	lr

0800e9a8 <_fini>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	bf00      	nop
 800e9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ae:	bc08      	pop	{r3}
 800e9b0:	469e      	mov	lr, r3
 800e9b2:	4770      	bx	lr
