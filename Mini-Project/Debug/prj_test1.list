
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08010370  08010370  00020370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d20  08010d20  00030254  2**0
                  CONTENTS
  4 .ARM          00000000  08010d20  08010d20  00030254  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d20  08010d20  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d20  08010d20  00020d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d24  08010d24  00020d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08010d28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          00000790  20000258  20000258  00030258  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200009e8  200009e8  00030258  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa28  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003833  00000000  00000000  0004fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  000534e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  00054e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222c4  00000000  00000000  000565f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002002c  00000000  00000000  000788b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce98b  00000000  00000000  000988e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016726b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085cc  00000000  00000000  001672bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010354 	.word	0x08010354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	08010354 	.word	0x08010354

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f002 fce9 	bl	80036d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f867 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 fced 	bl	80016e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d06:	f000 f9b5 	bl	8001074 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d0a:	f000 fa19 	bl	8001140 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d0e:	f000 fcc5 	bl	800169c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000d12:	f000 f8cf 	bl	8000eb4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000d16:	f000 fc91 	bl	800163c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000d1a:	f000 fafb 	bl	8001314 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d1e:	f000 fb47 	bl	80013b0 <MX_TIM3_Init>
  MX_ADC3_Init();
 8000d22:	f000 f937 	bl	8000f94 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000d26:	f000 fa49 	bl	80011bc <MX_TIM1_Init>
  MX_TIM8_Init();
 8000d2a:	f000 fc33 	bl	8001594 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000d2e:	f000 fbd7 	bl	80014e0 <MX_TIM4_Init>
  MX_RTC_Init();
 8000d32:	f000 f9df 	bl	80010f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 8000d36:	f001 fd7f 	bl	8002838 <programInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_IT(&hadc1);
 8000d3a:	481e      	ldr	r0, [pc, #120]	; (8000db4 <main+0xc0>)
 8000d3c:	f002 ff22 	bl	8003b84 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 8000d40:	481d      	ldr	r0, [pc, #116]	; (8000db8 <main+0xc4>)
 8000d42:	f002 ff1f 	bl	8003b84 <HAL_ADC_Start_IT>

//  HAL_UART_Transmit(&huart3,"TTT to while",12,1000);
  HAL_TIM_Base_Start_IT(&htim1);
 8000d46:	481d      	ldr	r0, [pc, #116]	; (8000dbc <main+0xc8>)
 8000d48:	f006 fcc4 	bl	80076d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d4c:	481c      	ldr	r0, [pc, #112]	; (8000dc0 <main+0xcc>)
 8000d4e:	f006 fcc1 	bl	80076d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d52:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <main+0xd0>)
 8000d54:	f006 fcbe 	bl	80076d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d58:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <main+0xd4>)
 8000d5a:	f006 fcbb 	bl	80076d4 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <main+0xd0>)
 8000d62:	f006 fd79 	bl	8007858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d66:	2104      	movs	r1, #4
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <main+0xd0>)
 8000d6a:	f006 fd75 	bl	8007858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <main+0xd4>)
 8000d72:	f006 fd71 	bl	8007858 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000d76:	210c      	movs	r1, #12
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <main+0xd0>)
 8000d7a:	f006 fd6d 	bl	8007858 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	480e      	ldr	r0, [pc, #56]	; (8000dbc <main+0xc8>)
 8000d82:	f006 fd69 	bl	8007858 <HAL_TIM_PWM_Start>
  uart_rx_enable_it();
 8000d86:	f001 fd8f 	bl	80028a8 <uart_rx_enable_it>
 8000d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d8e:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d98:	683b      	ldr	r3, [r7, #0]
//  setSegment(1,1,1);
//  setSegment(2,9,1);
//  setSegment(3,7,1);
//  setNumber(1110);
//	turn_on_leds();
  __HAL_RCC_RTC_ENABLE();
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <main+0xd8>)
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	461a      	mov	r2, r3
 8000daa:	2301      	movs	r3, #1
 8000dac:	6013      	str	r3, [r2, #0]

  set_start_time();
 8000dae:	f000 fdc1 	bl	8001934 <set_start_time>

  while (1)
 8000db2:	e7fe      	b.n	8000db2 <main+0xbe>
 8000db4:	20000274 	.word	0x20000274
 8000db8:	200002c4 	.word	0x200002c4
 8000dbc:	200003ec 	.word	0x200003ec
 8000dc0:	20000438 	.word	0x20000438
 8000dc4:	20000484 	.word	0x20000484
 8000dc8:	200004d0 	.word	0x200004d0
 8000dcc:	10908100 	.word	0x10908100

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b09e      	sub	sp, #120	; 0x78
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dda:	2228      	movs	r2, #40	; 0x28
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f009 f9ba 	bl	800a158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	223c      	movs	r2, #60	; 0x3c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f009 f9ac 	bl	800a158 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000e00:	230b      	movs	r3, #11
 8000e02:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	2310      	movs	r3, #16
 8000e14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e16:	2301      	movs	r3, #1
 8000e18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e22:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e28:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fcf0 	bl	8005814 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fd75 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fd18 	bl	8006890 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e66:	f000 fd5f 	bl	8001928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <SystemClock_Config+0xe0>)
 8000e6c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e86:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f005 ff2f 	bl	8006cfc <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ea4:	f000 fd40 	bl	8001928 <Error_Handler>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3778      	adds	r7, #120	; 0x78
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	000331a4 	.word	0x000331a4

08000eb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed6:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000ed8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000edc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f32:	f002 fc47 	bl	80037c4 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f3c:	f000 fcf4 	bl	8001928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f4c:	f003 fd62 	bl	8004a14 <HAL_ADCEx_MultiModeConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f56:	f000 fce7 	bl	8001928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000f66:	2307      	movs	r3, #7
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4806      	ldr	r0, [pc, #24]	; (8000f90 <MX_ADC1_Init+0xdc>)
 8000f78:	f003 fa60 	bl	800443c <HAL_ADC_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000f82:	f000 fcd1 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000274 	.word	0x20000274

08000f94 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fb8:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <MX_ADC3_Init+0xdc>)
 8000fba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <MX_ADC3_Init+0xd8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_ADC3_Init+0xd8>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_ADC3_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_ADC3_Init+0xd8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_ADC3_Init+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_ADC3_Init+0xd8>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800100e:	4817      	ldr	r0, [pc, #92]	; (800106c <MX_ADC3_Init+0xd8>)
 8001010:	f002 fbd8 	bl	80037c4 <HAL_ADC_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800101a:	f000 fc85 	bl	8001928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <MX_ADC3_Init+0xd8>)
 800102a:	f003 fcf3 	bl	8004a14 <HAL_ADCEx_MultiModeConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8001034:	f000 fc78 	bl	8001928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001038:	2301      	movs	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103c:	2301      	movs	r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001044:	2307      	movs	r3, #7
 8001046:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_ADC3_Init+0xd8>)
 8001056:	f003 f9f1 	bl	800443c <HAL_ADC_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8001060:	f000 fc62 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200002c4 	.word	0x200002c4
 8001070:	50000400 	.word	0x50000400

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f004 f9b8 	bl	8005424 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 fc35 	bl	8001928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f004 fa3e 	bl	8005542 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 fc2c 	bl	8001928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f004 fa80 	bl	80055d8 <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 fc23 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000314 	.word	0x20000314
 80010ec:	40005400 	.word	0x40005400
 80010f0:	2000090e 	.word	0x2000090e

080010f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_RTC_Init+0x44>)
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <MX_RTC_Init+0x48>)
 80010fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_RTC_Init+0x44>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_RTC_Init+0x44>)
 8001106:	227f      	movs	r2, #127	; 0x7f
 8001108:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_RTC_Init+0x44>)
 800110c:	22ff      	movs	r2, #255	; 0xff
 800110e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_RTC_Init+0x44>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_RTC_Init+0x44>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_RTC_Init+0x44>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_RTC_Init+0x44>)
 8001124:	f005 ff9a 	bl	800705c <HAL_RTC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800112e:	f000 fbfb 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000368 	.word	0x20000368
 800113c:	40002800 	.word	0x40002800

08001140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_SPI1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_SPI1_Init+0x74>)
 800114c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_SPI1_Init+0x74>)
 800115a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800115e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_SPI1_Init+0x74>)
 800116e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001172:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001176:	2208      	movs	r2, #8
 8001178:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_SPI1_Init+0x74>)
 800118e:	2207      	movs	r2, #7
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_SPI1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_SPI1_Init+0x74>)
 800119a:	2208      	movs	r2, #8
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_SPI1_Init+0x74>)
 80011a0:	f006 f996 	bl	80074d0 <HAL_SPI_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 fbbd 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000388 	.word	0x20000388
 80011b8:	40013000 	.word	0x40013000

080011bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b09a      	sub	sp, #104	; 0x68
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	615a      	str	r2, [r3, #20]
 80011ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	222c      	movs	r2, #44	; 0x2c
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f008 ffae 	bl	800a158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <MX_TIM1_Init+0x150>)
 80011fe:	4a44      	ldr	r2, [pc, #272]	; (8001310 <MX_TIM1_Init+0x154>)
 8001200:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <MX_TIM1_Init+0x150>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <MX_TIM1_Init+0x150>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <MX_TIM1_Init+0x150>)
 8001210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001214:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b3d      	ldr	r3, [pc, #244]	; (800130c <MX_TIM1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <MX_TIM1_Init+0x150>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <MX_TIM1_Init+0x150>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001228:	4838      	ldr	r0, [pc, #224]	; (800130c <MX_TIM1_Init+0x150>)
 800122a:	f006 f9fc 	bl	8007626 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001234:	f000 fb78 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001242:	4619      	mov	r1, r3
 8001244:	4831      	ldr	r0, [pc, #196]	; (800130c <MX_TIM1_Init+0x150>)
 8001246:	f006 fe3b 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001250:	f000 fb6a 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001254:	482d      	ldr	r0, [pc, #180]	; (800130c <MX_TIM1_Init+0x150>)
 8001256:	f006 faa7 	bl	80077a8 <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001260:	f000 fb62 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001274:	4619      	mov	r1, r3
 8001276:	4825      	ldr	r0, [pc, #148]	; (800130c <MX_TIM1_Init+0x150>)
 8001278:	f007 fb3a 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001282:	f000 fb51 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001286:	2360      	movs	r3, #96	; 0x60
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_TIM1_Init+0x150>)
 80012ac:	f006 fcf4 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012b6:	f000 fb37 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM1_Init+0x150>)
 80012f0:	f007 fb7e 	bl	80089f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012fa:	f000 fb15 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012fe:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM1_Init+0x150>)
 8001300:	f001 ff20 	bl	8003144 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3768      	adds	r7, #104	; 0x68
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200003ec 	.word	0x200003ec
 8001310:	40012c00 	.word	0x40012c00

08001314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_TIM2_Init+0x98>)
 8001334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001338:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_TIM2_Init+0x98>)
 800133c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_TIM2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_TIM2_Init+0x98>)
 800134a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_TIM2_Init+0x98>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_TIM2_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_TIM2_Init+0x98>)
 800135e:	f006 f962 	bl	8007626 <HAL_TIM_Base_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001368:	f000 fade 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_TIM2_Init+0x98>)
 800137a:	f006 fda1 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001384:	f000 fad0 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_TIM2_Init+0x98>)
 8001396:	f007 faab 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013a0:	f000 fac2 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013a4:	bf00      	nop
 80013a6:	3720      	adds	r7, #32
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000438 	.word	0x20000438

080013b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <MX_TIM3_Init+0x128>)
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <MX_TIM3_Init+0x12c>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <MX_TIM3_Init+0x128>)
 80013ea:	222f      	movs	r2, #47	; 0x2f
 80013ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <MX_TIM3_Init+0x128>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_TIM3_Init+0x128>)
 80013f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <MX_TIM3_Init+0x128>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <MX_TIM3_Init+0x128>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001408:	4833      	ldr	r0, [pc, #204]	; (80014d8 <MX_TIM3_Init+0x128>)
 800140a:	f006 f90c 	bl	8007626 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001414:	f000 fa88 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	4619      	mov	r1, r3
 8001424:	482c      	ldr	r0, [pc, #176]	; (80014d8 <MX_TIM3_Init+0x128>)
 8001426:	f006 fd4b 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001430:	f000 fa7a 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001434:	4828      	ldr	r0, [pc, #160]	; (80014d8 <MX_TIM3_Init+0x128>)
 8001436:	f006 f9b7 	bl	80077a8 <HAL_TIM_PWM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001440:	f000 fa72 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4821      	ldr	r0, [pc, #132]	; (80014d8 <MX_TIM3_Init+0x128>)
 8001454:	f007 fa4c 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800145e:	f000 fa63 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001462:	2360      	movs	r3, #96	; 0x60
 8001464:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_TIM3_Init+0x128>)
 800147a:	f006 fc0d 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001484:	f000 fa50 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	2204      	movs	r2, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4812      	ldr	r0, [pc, #72]	; (80014d8 <MX_TIM3_Init+0x128>)
 8001490:	f006 fc02 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800149a:	f000 fa45 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	2208      	movs	r2, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM3_Init+0x128>)
 80014a6:	f006 fbf7 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80014b0:	f000 fa3a 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	220c      	movs	r2, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM3_Init+0x128>)
 80014bc:	f006 fbec 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80014c6:	f000 fa2f 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM3_Init+0x128>)
 80014cc:	f001 fe3a 	bl	8003144 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000484 	.word	0x20000484
 80014dc:	40000400 	.word	0x40000400

080014e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_TIM4_Init+0xac>)
 8001506:	4a22      	ldr	r2, [pc, #136]	; (8001590 <MX_TIM4_Init+0xb0>)
 8001508:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_TIM4_Init+0xac>)
 800150c:	222f      	movs	r2, #47	; 0x2f
 800150e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_TIM4_Init+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_TIM4_Init+0xac>)
 8001518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800151c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_TIM4_Init+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_TIM4_Init+0xac>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM4_Init+0xac>)
 800152c:	f006 f93c 	bl	80077a8 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001536:	f000 f9f7 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4619      	mov	r1, r3
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_TIM4_Init+0xac>)
 800154a:	f007 f9d1 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001554:	f000 f9e8 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM4_Init+0xac>)
 8001570:	f006 fb92 	bl	8007c98 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800157a:	f000 f9d5 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM4_Init+0xac>)
 8001580:	f001 fde0 	bl	8003144 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200004d0 	.word	0x200004d0
 8001590:	40000800 	.word	0x40000800

08001594 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015b4:	4a20      	ldr	r2, [pc, #128]	; (8001638 <MX_TIM8_Init+0xa4>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015de:	4815      	ldr	r0, [pc, #84]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015e0:	f006 f821 	bl	8007626 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015ea:	f000 f99d 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <MX_TIM8_Init+0xa0>)
 80015fc:	f006 fc60 	bl	8007ec0 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001606:	f000 f98f 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM8_Init+0xa0>)
 800161c:	f007 f968 	bl	80088f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001626:	f000 f97f 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000051c 	.word	0x2000051c
 8001638:	40013400 	.word	0x40013400

0800163c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <MX_USART3_UART_Init+0x5c>)
 8001644:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001648:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800164c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART3_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART3_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART3_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART3_UART_Init+0x58>)
 8001680:	f007 fa52 	bl	8008b28 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800168a:	f000 f94d 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000568 	.word	0x20000568
 8001698:	40004800 	.word	0x40004800

0800169c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <MX_USB_PCD_Init+0x40>)
 80016a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016a8:	2208      	movs	r2, #8
 80016aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_USB_PCD_Init+0x3c>)
 80016c6:	f003 ffd3 	bl	8005670 <HAL_PCD_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80016d0:	f000 f92a 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200005f0 	.word	0x200005f0
 80016dc:	40005c00 	.word	0x40005c00

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016f6:	4b86      	ldr	r3, [pc, #536]	; (8001910 <MX_GPIO_Init+0x230>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a85      	ldr	r2, [pc, #532]	; (8001910 <MX_GPIO_Init+0x230>)
 80016fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b83      	ldr	r3, [pc, #524]	; (8001910 <MX_GPIO_Init+0x230>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b80      	ldr	r3, [pc, #512]	; (8001910 <MX_GPIO_Init+0x230>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a7f      	ldr	r2, [pc, #508]	; (8001910 <MX_GPIO_Init+0x230>)
 8001714:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <MX_GPIO_Init+0x230>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <MX_GPIO_Init+0x230>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a79      	ldr	r2, [pc, #484]	; (8001910 <MX_GPIO_Init+0x230>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b77      	ldr	r3, [pc, #476]	; (8001910 <MX_GPIO_Init+0x230>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	4b74      	ldr	r3, [pc, #464]	; (8001910 <MX_GPIO_Init+0x230>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4a73      	ldr	r2, [pc, #460]	; (8001910 <MX_GPIO_Init+0x230>)
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	6153      	str	r3, [r2, #20]
 800174a:	4b71      	ldr	r3, [pc, #452]	; (8001910 <MX_GPIO_Init+0x230>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <MX_GPIO_Init+0x230>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a6d      	ldr	r2, [pc, #436]	; (8001910 <MX_GPIO_Init+0x230>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <MX_GPIO_Init+0x230>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	4b68      	ldr	r3, [pc, #416]	; (8001910 <MX_GPIO_Init+0x230>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a67      	ldr	r2, [pc, #412]	; (8001910 <MX_GPIO_Init+0x230>)
 8001774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	4b65      	ldr	r3, [pc, #404]	; (8001910 <MX_GPIO_Init+0x230>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001786:	2200      	movs	r2, #0
 8001788:	f64f 7108 	movw	r1, #65288	; 0xff08
 800178c:	4861      	ldr	r0, [pc, #388]	; (8001914 <MX_GPIO_Init+0x234>)
 800178e:	f003 fdff 	bl	8005390 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2114      	movs	r1, #20
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f003 fdf9 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2150      	movs	r1, #80	; 0x50
 80017a2:	485d      	ldr	r0, [pc, #372]	; (8001918 <MX_GPIO_Init+0x238>)
 80017a4:	f003 fdf4 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f242 0105 	movw	r1, #8197	; 0x2005
 80017ae:	485b      	ldr	r0, [pc, #364]	; (800191c <MX_GPIO_Init+0x23c>)
 80017b0:	f003 fdee 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80017ba:	4859      	ldr	r0, [pc, #356]	; (8001920 <MX_GPIO_Init+0x240>)
 80017bc:	f003 fde8 	bl	8005390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 80017c0:	2324      	movs	r3, #36	; 0x24
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	484f      	ldr	r0, [pc, #316]	; (8001914 <MX_GPIO_Init+0x234>)
 80017d6:	f003 fc61 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80017da:	f64f 7308 	movw	r3, #65288	; 0xff08
 80017de:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	4848      	ldr	r0, [pc, #288]	; (8001914 <MX_GPIO_Init+0x234>)
 80017f4:	f003 fc52 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4842      	ldr	r0, [pc, #264]	; (8001918 <MX_GPIO_Init+0x238>)
 800180e:	f003 fc45 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f003 fc38 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001830:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001836:	2301      	movs	r3, #1
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f003 fc2a 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001848:	2314      	movs	r3, #20
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f003 fc1b 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001866:	2310      	movs	r3, #16
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	482a      	ldr	r0, [pc, #168]	; (8001924 <MX_GPIO_Init+0x244>)
 800187c:	f003 fc0e 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001880:	2350      	movs	r3, #80	; 0x50
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4820      	ldr	r0, [pc, #128]	; (8001918 <MX_GPIO_Init+0x238>)
 8001898:	f003 fc00 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 800189c:	f242 0305 	movw	r3, #8197	; 0x2005
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <MX_GPIO_Init+0x23c>)
 80018b6:	f003 fbf1 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 80018ba:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <MX_GPIO_Init+0x240>)
 80018d4:	f003 fbe2 	bl	800509c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018d8:	2200      	movs	r2, #0
 80018da:	2100      	movs	r1, #0
 80018dc:	2006      	movs	r0, #6
 80018de:	f003 fb30 	bl	8004f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018e2:	2006      	movs	r0, #6
 80018e4:	f003 fb49 	bl	8004f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2007      	movs	r0, #7
 80018ee:	f003 fb28 	bl	8004f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018f2:	2007      	movs	r0, #7
 80018f4:	f003 fb41 	bl	8004f7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	200a      	movs	r0, #10
 80018fe:	f003 fb20 	bl	8004f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001902:	200a      	movs	r0, #10
 8001904:	f003 fb39 	bl	8004f7a <HAL_NVIC_EnableIRQ>

}
 8001908:	bf00      	nop
 800190a:	3730      	adds	r7, #48	; 0x30
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	48001000 	.word	0x48001000
 8001918:	48000800 	.word	0x48000800
 800191c:	48000400 	.word	0x48000400
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48001400 	.word	0x48001400

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef rtc_time ;
char timeStr[100];

void set_start_time(int hour, int minute, int second){
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	RTC_TimeTypeDef start_t ;
//	start_t.Hours = localTime->tm_hour;
//	start_t.Minutes = localTime->tm_min;
//	start_t.Seconds = localTime->tm_sec;

	start_t.Hours = 20;
 8001940:	2314      	movs	r3, #20
 8001942:	753b      	strb	r3, [r7, #20]
	start_t.Minutes = 20;
 8001944:	2314      	movs	r3, #20
 8001946:	757b      	strb	r3, [r7, #21]
	start_t.Seconds = 20;
 8001948:	2314      	movs	r3, #20
 800194a:	75bb      	strb	r3, [r7, #22]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <set_start_time+0x30>)
 8001956:	f005 fc04 	bl	8007162 <HAL_RTC_SetTime>
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	; 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000368 	.word	0x20000368

08001968 <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim1; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_1;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]

//  volume=5;
  if (pwm_freq == 0 || pwm_freq > 20000)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <PWM_Change_Tone+0x1c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001980:	4293      	cmp	r3, r2
 8001982:	d937      	bls.n	80019f4 <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <PWM_Change_Tone+0x30>
 800198c:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
 8001996:	e097      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <PWM_Change_Tone+0x168>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d105      	bne.n	80019ac <PWM_Change_Tone+0x44>
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	6393      	str	r3, [r2, #56]	; 0x38
 80019aa:	e08d      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <PWM_Change_Tone+0x168>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d105      	bne.n	80019c0 <PWM_Change_Tone+0x58>
 80019b4:	4b47      	ldr	r3, [pc, #284]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80019be:	e083      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <PWM_Change_Tone+0x168>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d105      	bne.n	80019d4 <PWM_Change_Tone+0x6c>
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2300      	movs	r3, #0
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	e079      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <PWM_Change_Tone+0x168>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d105      	bne.n	80019e8 <PWM_Change_Tone+0x80>
 80019dc:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
 80019e6:	e06f      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2300      	movs	r3, #0
 80019f0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019f2:	e069      	b.n	8001ac8 <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 80019f4:	f005 f8c8 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 80019f8:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	4a35      	ldr	r2, [pc, #212]	; (8001ad8 <PWM_Change_Tone+0x170>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0b9b      	lsrs	r3, r3, #14
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001a10:	8b7b      	ldrh	r3, [r7, #26]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	fb02 f303 	mul.w	r3, r2, r3
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <PWM_Change_Tone+0x174>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	09db      	lsrs	r3, r3, #7
 8001a34:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 8001a36:	8b7b      	ldrh	r3, [r7, #26]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	3a01      	subs	r2, #1
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 8001a4e:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <PWM_Change_Tone+0x104>
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001a6a:	e02d      	b.n	8001ac8 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d105      	bne.n	8001a80 <PWM_Change_Tone+0x118>
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a7e:	e023      	b.n	8001ac8 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d105      	bne.n	8001a94 <PWM_Change_Tone+0x12c>
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a92:	e019      	b.n	8001ac8 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d105      	bne.n	8001aa8 <PWM_Change_Tone+0x140>
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001aa6:	e00f      	b.n	8001ac8 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <PWM_Change_Tone+0x168>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d105      	bne.n	8001abc <PWM_Change_Tone+0x154>
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001aba:	e005      	b.n	8001ac8 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <PWM_Change_Tone+0x16c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ac6:	e7ff      	b.n	8001ac8 <PWM_Change_Tone+0x160>
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000958 	.word	0x20000958
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	45e7b273 	.word	0x45e7b273
 8001adc:	10624dd3 	.word	0x10624dd3

08001ae0 <turn_on_leds>:

int alert = 0;
uint32_t LEDs_power;

void turn_on_leds(){
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	// Green 2 PC7

	// white 3 PE4

	// red 4 PC9
	if(alert == 0){
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <turn_on_leds+0xd0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d15c      	bne.n	8001ba6 <turn_on_leds+0xc6>
		if(numbers[1] == 1){
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <turn_on_leds+0xd4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d111      	bne.n	8001b18 <turn_on_leds+0x38>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <turn_on_leds+0xd8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <turn_on_leds+0xdc>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2200      	movs	r2, #0
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <turn_on_leds+0xe0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b0e:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
		}
	}
}
 8001b16:	e046      	b.n	8001ba6 <turn_on_leds+0xc6>
		}else if(numbers[1] == 2){
 8001b18:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <turn_on_leds+0xd4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d112      	bne.n	8001b46 <turn_on_leds+0x66>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <turn_on_leds+0xdc>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <turn_on_leds+0xdc>)
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001b34:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <turn_on_leds+0xe0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b44:	e02f      	b.n	8001ba6 <turn_on_leds+0xc6>
		}else if(numbers[1] == 3){
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <turn_on_leds+0xd4>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d113      	bne.n	8001b76 <turn_on_leds+0x96>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <turn_on_leds+0xdc>)
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <turn_on_leds+0xdc>)
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <turn_on_leds+0xe0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <turn_on_leds+0xdc>)
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b74:	e017      	b.n	8001ba6 <turn_on_leds+0xc6>
		}else if(numbers[1] == 4){
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <turn_on_leds+0xd4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d113      	bne.n	8001ba6 <turn_on_leds+0xc6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <turn_on_leds+0xdc>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <turn_on_leds+0xdc>)
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <turn_on_leds+0xe0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <turn_on_leds+0xdc>)
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LEDs_power);
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <turn_on_leds+0xd8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <turn_on_leds+0xdc>)
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	2000095c 	.word	0x2000095c
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000484 	.word	0x20000484
 8001bbc:	20000960 	.word	0x20000960
 8001bc0:	200004d0 	.word	0x200004d0

08001bc4 <turn_off_leds>:

void turn_off_leds(){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	// Orange(yellow)1 PB4
	// Green 2 PC7
	// white 3 PE4
	// red 4 PC9

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <turn_off_leds+0x58>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <turn_off_leds+0x58>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <turn_off_leds+0x5c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <turn_off_leds+0x58>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <turn_off_leds+0x60>)
 8001bf0:	f003 fbce 	bl	8005390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfa:	480a      	ldr	r0, [pc, #40]	; (8001c24 <turn_off_leds+0x60>)
 8001bfc:	f003 fbc8 	bl	8005390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c06:	4807      	ldr	r0, [pc, #28]	; (8001c24 <turn_off_leds+0x60>)
 8001c08:	f003 fbc2 	bl	8005390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <turn_off_leds+0x60>)
 8001c14:	f003 fbbc 	bl	8005390 <HAL_GPIO_WritePin>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000484 	.word	0x20000484
 8001c20:	200004d0 	.word	0x200004d0
 8001c24:	48001000 	.word	0x48001000

08001c28 <sin_signal>:
void sin_signal(int counter){
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	int max = 10000;
 8001c30:	f242 7310 	movw	r3, #10000	; 0x2710
 8001c34:	60fb      	str	r3, [r7, #12]
	uint32_t x = (uint32_t) (max * sin(counter * (M_PI  / 180)) + 10000);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7fe fc74 	bl	8000524 <__aeabi_i2d>
 8001c3c:	4604      	mov	r4, r0
 8001c3e:	460d      	mov	r5, r1
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7fe fc6f 	bl	8000524 <__aeabi_i2d>
 8001c46:	a318      	add	r3, pc, #96	; (adr r3, 8001ca8 <sin_signal+0x80>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fcd4 	bl	80005f8 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	ec43 2b17 	vmov	d7, r2, r3
 8001c58:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5c:	eef0 0a67 	vmov.f32	s1, s15
 8001c60:	f00d fb2e 	bl	800f2c0 <sin>
 8001c64:	ec53 2b10 	vmov	r2, r3, d0
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fcc4 	bl	80005f8 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	a30d      	add	r3, pc, #52	; (adr r3, 8001cb0 <sin_signal+0x88>)
 8001c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7e:	f7fe fb05 	bl	800028c <__adddf3>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	60bb      	str	r3, [r7, #8]
	PWM_Change_Tone(x, 1000);
 8001c92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c96:	68b8      	ldr	r0, [r7, #8]
 8001c98:	f7ff fe66 	bl	8001968 <PWM_Change_Tone>
//	printf("%f   %d\n", x, counter);

}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	a2529d39 	.word	0xa2529d39
 8001cac:	3f91df46 	.word	0x3f91df46
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	40c38800 	.word	0x40c38800

08001cb8 <square_signal>:

void square_signal(int counter){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b5f      	cmp	r3, #95	; 0x5f
 8001cc4:	dd0c      	ble.n	8001ce0 <square_signal+0x28>
		counter = counter % 96;
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <square_signal+0x64>)
 8001cca:	fb83 1302 	smull	r1, r3, r3, r2
 8001cce:	1119      	asrs	r1, r3, #4
 8001cd0:	17d3      	asrs	r3, r2, #31
 8001cd2:	1ac9      	subs	r1, r1, r3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	440b      	add	r3, r1
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	607b      	str	r3, [r7, #4]

	}

	if (counter < 48) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce4:	dc08      	bgt.n	8001cf8 <square_signal+0x40>
		uint32_t x = 20000;
 8001ce6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001cea:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 8001cec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cf0:	68b8      	ldr	r0, [r7, #8]
 8001cf2:	f7ff fe39 	bl	8001968 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8001cf6:	e00d      	b.n	8001d14 <square_signal+0x5c>
	else if (counter >= 48 && counter < 96){
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8001cfc:	dd0a      	ble.n	8001d14 <square_signal+0x5c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b5f      	cmp	r3, #95	; 0x5f
 8001d02:	dc07      	bgt.n	8001d14 <square_signal+0x5c>
		uint32_t x = 5000;
 8001d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d08:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 8001d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff fe2a 	bl	8001968 <PWM_Change_Tone>
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2aaaaaab 	.word	0x2aaaaaab

08001d20 <triangle_signal>:

void triangle_signal(int counter){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b5f      	cmp	r3, #95	; 0x5f
 8001d2c:	dd0c      	ble.n	8001d48 <triangle_signal+0x28>
		counter = counter % 96;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <triangle_signal+0x68>)
 8001d32:	fb83 1302 	smull	r1, r3, r3, r2
 8001d36:	1119      	asrs	r1, r3, #4
 8001d38:	17d3      	asrs	r3, r2, #31
 8001d3a:	1ac9      	subs	r1, r1, r3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	607b      	str	r3, [r7, #4]
	}

	if (counter < 80) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b4f      	cmp	r3, #79	; 0x4f
 8001d4c:	dc0a      	bgt.n	8001d64 <triangle_signal+0x44>
		uint32_t x = 250 * counter;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	22fa      	movs	r2, #250	; 0xfa
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 8001d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d5c:	68b8      	ldr	r0, [r7, #8]
 8001d5e:	f7ff fe03 	bl	8001968 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8001d62:	e00c      	b.n	8001d7e <triangle_signal+0x5e>
	else if (counter >= 80 && counter < 96){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b4f      	cmp	r3, #79	; 0x4f
 8001d68:	dd09      	ble.n	8001d7e <triangle_signal+0x5e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b5f      	cmp	r3, #95	; 0x5f
 8001d6e:	dc06      	bgt.n	8001d7e <triangle_signal+0x5e>
		uint32_t x = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 8001d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fdf5 	bl	8001968 <PWM_Change_Tone>
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2aaaaaab 	.word	0x2aaaaaab

08001d8c <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b09      	cmp	r3, #9
 8001d98:	d832      	bhi.n	8001e00 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001d9c:	6a18      	ldr	r0, [r3, #32]
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001da0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	f003 faef 	bl	8005390 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001db4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001db8:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f003 fae2 	bl	8005390 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001dce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001dd2:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	f003 fad5 	bl	8005390 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001de8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <seven_segment_display_decimal+0x7c>)
 8001dec:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f003 fac8 	bl	8005390 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000014 	.word	0x20000014

08001e0c <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	e00f      	b.n	8001e38 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <seven_segment_deactivate_digits+0x3c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <seven_segment_deactivate_digits+0x3c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	889b      	ldrh	r3, [r3, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f003 faaf 	bl	8005390 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3301      	adds	r3, #1
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	ddec      	ble.n	8001e18 <seven_segment_deactivate_digits+0xc>
    }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000014 	.word	0x20000014

08001e4c <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d834      	bhi.n	8001ec4 <seven_segment_activate_digit+0x78>
//		}
//		else if (d != (2-state)){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}

		if(d == state && (HAL_GetTick() - last_time_on) > 40){
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <seven_segment_activate_digit+0x80>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d11b      	bne.n	8001e9e <seven_segment_activate_digit+0x52>
 8001e66:	f001 fc8d 	bl	8003784 <HAL_GetTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <seven_segment_activate_digit+0x84>)
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	2b28      	cmp	r3, #40	; 0x28
 8001e74:	d913      	bls.n	8001e9e <seven_segment_activate_digit+0x52>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <seven_segment_activate_digit+0x88>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001e7e:	4915      	ldr	r1, [pc, #84]	; (8001ed4 <seven_segment_activate_digit+0x88>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	889b      	ldrh	r3, [r3, #4]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f003 fa98 	bl	80053c0 <HAL_GPIO_TogglePin>
			last_time_on = HAL_GetTick();
 8001e90:	f001 fc78 	bl	8003784 <HAL_GetTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <seven_segment_activate_digit+0x84>)
 8001e9a:	601a      	str	r2, [r3, #0]
		}
		else if (d != state){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
		}
    }
}
 8001e9c:	e012      	b.n	8001ec4 <seven_segment_activate_digit+0x78>
		else if (d != state){
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <seven_segment_activate_digit+0x80>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00c      	beq.n	8001ec4 <seven_segment_activate_digit+0x78>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <seven_segment_activate_digit+0x88>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <seven_segment_activate_digit+0x88>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f003 fa66 	bl	8005390 <HAL_GPIO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000954 	.word	0x20000954
 8001ed0:	20000964 	.word	0x20000964
 8001ed4:	20000014 	.word	0x20000014

08001ed8 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i <= 3; ++i) {
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e00d      	b.n	8001f02 <seven_segment_set_num+0x2a>
            seven_segment.digits[i] = num[i];
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <seven_segment_set_num+0x40>)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3310      	adds	r3, #16
 8001ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i <= 3; ++i) {
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d9ee      	bls.n	8001ee6 <seven_segment_set_num+0xe>
		}
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000014 	.word	0x20000014

08001f1c <seven_segment_refresh>:

void seven_segment_refresh(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
    if (HAL_GetTick() - last_time_tmp > 5) {
 8001f20:	f001 fc30 	bl	8003784 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <seven_segment_refresh+0x9c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d940      	bls.n	8001fb2 <seven_segment_refresh+0x96>
        seven_segment_deactivate_digits();
 8001f30:	f7ff ff6c 	bl	8001e0c <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff87 	bl	8001e4c <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <seven_segment_refresh+0xa4>)
 8001f44:	3310      	adds	r3, #16
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff1e 	bl	8001d8c <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 2) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 0)){
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <seven_segment_refresh+0xa8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d103      	bne.n	8001f60 <seven_segment_refresh+0x44>
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d00f      	beq.n	8001f80 <seven_segment_refresh+0x64>
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <seven_segment_refresh+0xa8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d103      	bne.n	8001f70 <seven_segment_refresh+0x54>
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d007      	beq.n	8001f80 <seven_segment_refresh+0x64>
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <seven_segment_refresh+0xa8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <seven_segment_refresh+0x72>
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d106      	bne.n	8001f8e <seven_segment_refresh+0x72>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	2104      	movs	r1, #4
 8001f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f88:	f003 fa02 	bl	8005390 <HAL_GPIO_WritePin>
 8001f8c:	e005      	b.n	8001f9a <seven_segment_refresh+0x7e>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2104      	movs	r1, #4
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f003 f9fb 	bl	8005390 <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 4; //active each 4 segments
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <seven_segment_refresh+0xa0>)
 8001fa6:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 8001fa8:	f001 fbec 	bl	8003784 <HAL_GetTick>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a02      	ldr	r2, [pc, #8]	; (8001fb8 <seven_segment_refresh+0x9c>)
 8001fb0:	6013      	str	r3, [r2, #0]
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200009c8 	.word	0x200009c8
 8001fbc:	200009cc 	.word	0x200009cc
 8001fc0:	20000014 	.word	0x20000014
 8001fc4:	20000954 	.word	0x20000954

08001fc8 <programLoop>:

//void programContinue(){
//	seven_segment_set_num(numbers);
//}

void programLoop() {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 8001fcc:	f7ff ffa6 	bl	8001f1c <seven_segment_refresh>

    setNumber(1234);
 8001fd0:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8001fd4:	f000 f802 	bl	8001fdc <setNumber>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <setNumber>:
		numbers[state]=digit;
	}
	seven_segment_set_num(numbers);
}

void setNumber(int number){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	dc5b      	bgt.n	80020b6 <setNumber+0xda>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db58      	blt.n	80020b6 <setNumber+0xda>
		a = number % 10;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <setNumber+0xe4>)
 8002008:	fb83 1302 	smull	r1, r3, r3, r2
 800200c:	1099      	asrs	r1, r3, #2
 800200e:	17d3      	asrs	r3, r2, #31
 8002010:	1ac9      	subs	r1, r1, r3
 8002012:	460b      	mov	r3, r1
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <setNumber+0xe4>)
 8002022:	fb82 1203 	smull	r1, r2, r2, r3
 8002026:	1092      	asrs	r2, r2, #2
 8002028:	17db      	asrs	r3, r3, #31
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	607b      	str	r3, [r7, #4]
		b = number % 10;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <setNumber+0xe4>)
 8002032:	fb83 1302 	smull	r1, r3, r3, r2
 8002036:	1099      	asrs	r1, r3, #2
 8002038:	17d3      	asrs	r3, r2, #31
 800203a:	1ac9      	subs	r1, r1, r3
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	623b      	str	r3, [r7, #32]
		number /= 10;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <setNumber+0xe4>)
 800204c:	fb82 1203 	smull	r1, r2, r2, r3
 8002050:	1092      	asrs	r2, r2, #2
 8002052:	17db      	asrs	r3, r3, #31
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	607b      	str	r3, [r7, #4]
		c = number % 10;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <setNumber+0xe4>)
 800205c:	fb83 1302 	smull	r1, r3, r3, r2
 8002060:	1099      	asrs	r1, r3, #2
 8002062:	17d3      	asrs	r3, r2, #31
 8002064:	1ac9      	subs	r1, r1, r3
 8002066:	460b      	mov	r3, r1
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]
		number /= 10;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <setNumber+0xe4>)
 8002076:	fb82 1203 	smull	r1, r2, r2, r3
 800207a:	1092      	asrs	r2, r2, #2
 800207c:	17db      	asrs	r3, r3, #31
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	607b      	str	r3, [r7, #4]
		d = number % 10;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <setNumber+0xe4>)
 8002086:	fb83 1302 	smull	r1, r3, r3, r2
 800208a:	1099      	asrs	r1, r3, #2
 800208c:	17d3      	asrs	r3, r2, #31
 800208e:	1ac9      	subs	r1, r1, r3
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	61bb      	str	r3, [r7, #24]
		int numbers2[4]={d,c,b,a};
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 80020ac:	f107 0308 	add.w	r3, r7, #8
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff11 	bl	8001ed8 <seven_segment_set_num>
	}

}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	66666667 	.word	0x66666667

080020c4 <HAL_GPIO_EXTI_Callback>:
int threshhold_plus = 0;
int initBR=-1;
int threshold=-1;
int initFlag;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0a8      	sub	sp, #160	; 0xa0
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
	char data[100];
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80020ce:	2200      	movs	r2, #0
 80020d0:	49ac      	ldr	r1, [pc, #688]	; (8002384 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80020d2:	48ad      	ldr	r0, [pc, #692]	; (8002388 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80020d4:	f005 f8df 	bl	8007296 <HAL_RTC_GetTime>
	sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 80020d8:	4baa      	ldr	r3, [pc, #680]	; (8002384 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4ba9      	ldr	r3, [pc, #676]	; (8002384 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4ba7      	ldr	r3, [pc, #668]	; (8002384 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	460b      	mov	r3, r1
 80020ec:	49a7      	ldr	r1, [pc, #668]	; (800238c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80020ee:	48a8      	ldr	r0, [pc, #672]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80020f0:	f008 feba 	bl	800ae68 <siprintf>
	if (initFlag==0){
 80020f4:	4ba7      	ldr	r3, [pc, #668]	; (8002394 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 81f0 	bne.w	80024de <HAL_GPIO_EXTI_Callback+0x41a>
		if (GPIO_Pin == GPIO_PIN_4) { //Left button (Decrease Number) ==> PF4
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b10      	cmp	r3, #16
 8002102:	f040 80b0 	bne.w	8002266 <HAL_GPIO_EXTI_Callback+0x1a2>
			if (HAL_GetTick() - last_time2 > 400){
 8002106:	f001 fb3d 	bl	8003784 <HAL_GetTick>
 800210a:	4603      	mov	r3, r0
 800210c:	4aa2      	ldr	r2, [pc, #648]	; (8002398 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002116:	f240 81de 	bls.w	80024d6 <HAL_GPIO_EXTI_Callback+0x412>
				int n = sprintf(data, "[INFO] %s Digit %d Decreased\n", timeStr,state+1);
 800211a:	4ba0      	ldr	r3, [pc, #640]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	f107 000c 	add.w	r0, r7, #12
 8002124:	4a9a      	ldr	r2, [pc, #616]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002126:	499e      	ldr	r1, [pc, #632]	; (80023a0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8002128:	f008 fe9e 	bl	800ae68 <siprintf>
 800212c:	67f8      	str	r0, [r7, #124]	; 0x7c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 800212e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002130:	b29a      	uxth	r2, r3
 8002132:	f107 010c 	add.w	r1, r7, #12
 8002136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213a:	489a      	ldr	r0, [pc, #616]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800213c:	f006 fd42 	bl	8008bc4 <HAL_UART_Transmit>
				if (state == 0){
 8002140:	4b96      	ldr	r3, [pc, #600]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d12a      	bne.n	800219e <HAL_GPIO_EXTI_Callback+0xda>
					numbers[state]=(numbers[state] - 1);
 8002148:	4b94      	ldr	r3, [pc, #592]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a96      	ldr	r2, [pc, #600]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800214e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002152:	4b92      	ldr	r3, [pc, #584]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3a01      	subs	r2, #1
 8002158:	4993      	ldr	r1, [pc, #588]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (numbers[state] == -1)
 800215e:	4b8f      	ldr	r3, [pc, #572]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a91      	ldr	r2, [pc, #580]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d105      	bne.n	800217a <HAL_GPIO_EXTI_Callback+0xb6>
						numbers[state]=9;
 800216e:	4b8b      	ldr	r3, [pc, #556]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a8d      	ldr	r2, [pc, #564]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002174:	2109      	movs	r1, #9
 8002176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s DimStep Decreased\n", timeStr);
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002180:	498a      	ldr	r1, [pc, #552]	; (80023ac <HAL_GPIO_EXTI_Callback+0x2e8>)
 8002182:	4618      	mov	r0, r3
 8002184:	f008 fe70 	bl	800ae68 <siprintf>
 8002188:	6738      	str	r0, [r7, #112]	; 0x70
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800218a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218c:	b29a      	uxth	r2, r3
 800218e:	f107 010c 	add.w	r1, r7, #12
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	4883      	ldr	r0, [pc, #524]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002198:	f006 fd14 	bl	8008bc4 <HAL_UART_Transmit>
 800219c:	e05c      	b.n	8002258 <HAL_GPIO_EXTI_Callback+0x194>
				}else if (state == 1){
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d12a      	bne.n	80021fc <HAL_GPIO_EXTI_Callback+0x138>
					numbers[state]=(numbers[state] - 1);
 80021a6:	4b7d      	ldr	r3, [pc, #500]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7f      	ldr	r2, [pc, #508]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80021ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021b0:	4b7a      	ldr	r3, [pc, #488]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3a01      	subs	r2, #1
 80021b6:	497c      	ldr	r1, [pc, #496]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 80021bc:	4b77      	ldr	r3, [pc, #476]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <HAL_GPIO_EXTI_Callback+0x112>
							numbers[state]=4;
 80021ca:	4b74      	ldr	r3, [pc, #464]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a76      	ldr	r2, [pc, #472]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80021d0:	2104      	movs	r1, #4
 80021d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						int n = sprintf(data, "[INFO] %s Lights changed to %d\n", timeStr,numbers[1]);
 80021d6:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f107 000c 	add.w	r0, r7, #12
 80021de:	4a6c      	ldr	r2, [pc, #432]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80021e0:	4973      	ldr	r1, [pc, #460]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80021e2:	f008 fe41 	bl	800ae68 <siprintf>
 80021e6:	6778      	str	r0, [r7, #116]	; 0x74
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80021e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f107 010c 	add.w	r1, r7, #12
 80021f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f4:	486b      	ldr	r0, [pc, #428]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80021f6:	f006 fce5 	bl	8008bc4 <HAL_UART_Transmit>
 80021fa:	e02d      	b.n	8002258 <HAL_GPIO_EXTI_Callback+0x194>
				}else if (state == 2){
 80021fc:	4b67      	ldr	r3, [pc, #412]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d129      	bne.n	8002258 <HAL_GPIO_EXTI_Callback+0x194>
					numbers[state]=(numbers[state] - 1);
 8002204:	4b65      	ldr	r3, [pc, #404]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800220a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3a01      	subs	r2, #1
 8002214:	4964      	ldr	r1, [pc, #400]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 800221a:	4b60      	ldr	r3, [pc, #384]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a62      	ldr	r2, [pc, #392]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_GPIO_EXTI_Callback+0x170>
							numbers[state]=3;
 8002228:	4b5c      	ldr	r3, [pc, #368]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800222e:	2103      	movs	r1, #3
 8002230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						int n = sprintf(data, "[INFO] %s Wave changed to %d\n", timeStr,numbers[2]);
 8002234:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f107 000c 	add.w	r0, r7, #12
 800223c:	4a54      	ldr	r2, [pc, #336]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800223e:	495d      	ldr	r1, [pc, #372]	; (80023b4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8002240:	f008 fe12 	bl	800ae68 <siprintf>
 8002244:	67b8      	str	r0, [r7, #120]	; 0x78
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002248:	b29a      	uxth	r2, r3
 800224a:	f107 010c 	add.w	r1, r7, #12
 800224e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002252:	4854      	ldr	r0, [pc, #336]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002254:	f006 fcb6 	bl	8008bc4 <HAL_UART_Transmit>
				}
				last_time2=HAL_GetTick();
 8002258:	f001 fa94 	bl	8003784 <HAL_GetTick>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	e137      	b.n	80024d6 <HAL_GPIO_EXTI_Callback+0x412>
			}
		}
		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button (Increase Number) ==> PA1
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b02      	cmp	r3, #2
 800226a:	f040 80ec 	bne.w	8002446 <HAL_GPIO_EXTI_Callback+0x382>
			if (HAL_GetTick() - last_time2 > 400){
 800226e:	f001 fa89 	bl	8003784 <HAL_GetTick>
 8002272:	4603      	mov	r3, r0
 8002274:	4a48      	ldr	r2, [pc, #288]	; (8002398 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800227e:	f240 812a 	bls.w	80024d6 <HAL_GPIO_EXTI_Callback+0x412>

				int n = sprintf(data, "[INFO] %s Digit %d Increased\n", timeStr,state+1);
 8002282:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	f107 000c 	add.w	r0, r7, #12
 800228c:	4a40      	ldr	r2, [pc, #256]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800228e:	494a      	ldr	r1, [pc, #296]	; (80023b8 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8002290:	f008 fdea 	bl	800ae68 <siprintf>
 8002294:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 8002298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229c:	b29a      	uxth	r2, r3
 800229e:	f107 010c 	add.w	r1, r7, #12
 80022a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a6:	483f      	ldr	r0, [pc, #252]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80022a8:	f006 fc8c 	bl	8008bc4 <HAL_UART_Transmit>
				if (state == 0){
 80022ac:	4b3b      	ldr	r3, [pc, #236]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d129      	bne.n	8002308 <HAL_GPIO_EXTI_Callback+0x244>
					numbers[state]=(numbers[state] + 1) % 10;
 80022b4:	4b39      	ldr	r3, [pc, #228]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_GPIO_EXTI_Callback+0x2f8>)
 80022c6:	fb83 2301 	smull	r2, r3, r3, r1
 80022ca:	109a      	asrs	r2, r3, #2
 80022cc:	17cb      	asrs	r3, r1, #31
 80022ce:	1ad2      	subs	r2, r2, r3
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	1aca      	subs	r2, r1, r3
 80022da:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80022dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					int n = sprintf(data, "[INFO] %s DimStep Increased\n", timeStr);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80022e6:	4936      	ldr	r1, [pc, #216]	; (80023c0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f008 fdbd 	bl	800ae68 <siprintf>
 80022ee:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					HAL_UART_Transmit(&huart3, data, n, 1000);
 80022f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f107 010c 	add.w	r1, r7, #12
 80022fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002300:	4828      	ldr	r0, [pc, #160]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8002302:	f006 fc5f 	bl	8008bc4 <HAL_UART_Transmit>
 8002306:	e097      	b.n	8002438 <HAL_GPIO_EXTI_Callback+0x374>

				}else if (state == 1){
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d159      	bne.n	80023c4 <HAL_GPIO_EXTI_Callback+0x300>
					numbers[state]=(numbers[state] + 1) % 5;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a24      	ldr	r2, [pc, #144]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002322:	fb83 2301 	smull	r2, r3, r3, r1
 8002326:	105a      	asrs	r2, r3, #1
 8002328:	17cb      	asrs	r3, r1, #31
 800232a:	1ad2      	subs	r2, r2, r3
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	1aca      	subs	r2, r1, r3
 8002334:	4b1c      	ldr	r3, [pc, #112]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002336:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_GPIO_EXTI_Callback+0x296>
						numbers[state]++;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800234e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002352:	3201      	adds	r2, #1
 8002354:	4914      	ldr	r1, [pc, #80]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s Lights changed to %d\n", timeStr,numbers[1]);
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f107 000c 	add.w	r0, r7, #12
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8002366:	f008 fd7f 	bl	800ae68 <siprintf>
 800236a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800236e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002372:	b29a      	uxth	r2, r3
 8002374:	f107 010c 	add.w	r1, r7, #12
 8002378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237c:	4809      	ldr	r0, [pc, #36]	; (80023a4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800237e:	f006 fc21 	bl	8008bc4 <HAL_UART_Transmit>
 8002382:	e059      	b.n	8002438 <HAL_GPIO_EXTI_Callback+0x374>
 8002384:	200008dc 	.word	0x200008dc
 8002388:	20000368 	.word	0x20000368
 800238c:	08010370 	.word	0x08010370
 8002390:	200008f0 	.word	0x200008f0
 8002394:	20000970 	.word	0x20000970
 8002398:	20000968 	.word	0x20000968
 800239c:	20000954 	.word	0x20000954
 80023a0:	08010380 	.word	0x08010380
 80023a4:	20000568 	.word	0x20000568
 80023a8:	20000000 	.word	0x20000000
 80023ac:	080103a0 	.word	0x080103a0
 80023b0:	080103c0 	.word	0x080103c0
 80023b4:	080103e0 	.word	0x080103e0
 80023b8:	08010400 	.word	0x08010400
 80023bc:	66666667 	.word	0x66666667
 80023c0:	08010420 	.word	0x08010420
				}else if (state == 2){
 80023c4:	4b6c      	ldr	r3, [pc, #432]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d135      	bne.n	8002438 <HAL_GPIO_EXTI_Callback+0x374>
					numbers[state]=(numbers[state] + 1) % 4;
 80023cc:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	3301      	adds	r3, #1
 80023d8:	4a67      	ldr	r2, [pc, #412]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4259      	negs	r1, r3
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	f001 0103 	and.w	r1, r1, #3
 80023e6:	bf58      	it	pl
 80023e8:	424b      	negpl	r3, r1
 80023ea:	4964      	ldr	r1, [pc, #400]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 80023ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					if (numbers[state] == 0)
 80023f0:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_GPIO_EXTI_Callback+0x34c>
						numbers[state]++;
 80023fe:	4b5e      	ldr	r3, [pc, #376]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5e      	ldr	r2, [pc, #376]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002408:	3201      	adds	r2, #1
 800240a:	495c      	ldr	r1, [pc, #368]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s Wave changed to %d\n", timeStr,numbers[2]);
 8002410:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f107 000c 	add.w	r0, r7, #12
 8002418:	4a59      	ldr	r2, [pc, #356]	; (8002580 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800241a:	495a      	ldr	r1, [pc, #360]	; (8002584 <HAL_GPIO_EXTI_Callback+0x4c0>)
 800241c:	f008 fd24 	bl	800ae68 <siprintf>
 8002420:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002428:	b29a      	uxth	r2, r3
 800242a:	f107 010c 	add.w	r1, r7, #12
 800242e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002432:	4855      	ldr	r0, [pc, #340]	; (8002588 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8002434:	f006 fbc6 	bl	8008bc4 <HAL_UART_Transmit>
				}
				last_time2=HAL_GetTick();
 8002438:	f001 f9a4 	bl	8003784 <HAL_GetTick>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	4b52      	ldr	r3, [pc, #328]	; (800258c <HAL_GPIO_EXTI_Callback+0x4c8>)
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e047      	b.n	80024d6 <HAL_GPIO_EXTI_Callback+0x412>
			}

		}
		else if (GPIO_Pin == GPIO_PIN_0) { //Right button (Next Number)==> PC0
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d144      	bne.n	80024d6 <HAL_GPIO_EXTI_Callback+0x412>
			if (HAL_GetTick() - last_time2 > 400){
 800244c:	f001 f99a 	bl	8003784 <HAL_GetTick>
 8002450:	4603      	mov	r3, r0
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <HAL_GPIO_EXTI_Callback+0x4c8>)
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800245c:	d93b      	bls.n	80024d6 <HAL_GPIO_EXTI_Callback+0x412>
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800245e:	2200      	movs	r2, #0
 8002460:	494b      	ldr	r1, [pc, #300]	; (8002590 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002462:	484c      	ldr	r0, [pc, #304]	; (8002594 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8002464:	f004 ff17 	bl	8007296 <HAL_RTC_GetTime>
				sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002468:	4b49      	ldr	r3, [pc, #292]	; (8002590 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	4619      	mov	r1, r3
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002476:	789b      	ldrb	r3, [r3, #2]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	460b      	mov	r3, r1
 800247c:	4946      	ldr	r1, [pc, #280]	; (8002598 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800247e:	4840      	ldr	r0, [pc, #256]	; (8002580 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002480:	f008 fcf2 	bl	800ae68 <siprintf>
				int n = sprintf(data, "[INFO] %s Digit changed\n", timeStr,state+1);
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3301      	adds	r3, #1
 800248a:	f107 000c 	add.w	r0, r7, #12
 800248e:	4a3c      	ldr	r2, [pc, #240]	; (8002580 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002490:	4942      	ldr	r1, [pc, #264]	; (800259c <HAL_GPIO_EXTI_Callback+0x4d8>)
 8002492:	f008 fce9 	bl	800ae68 <siprintf>
 8002496:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
				HAL_UART_Transmit(&huart3, data, n, 1000);
 800249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800249e:	b29a      	uxth	r2, r3
 80024a0:	f107 010c 	add.w	r1, r7, #12
 80024a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a8:	4837      	ldr	r0, [pc, #220]	; (8002588 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80024aa:	f006 fb8b 	bl	8008bc4 <HAL_UART_Transmit>
				state = (state + 1) % 3;
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80024b6:	fb83 3201 	smull	r3, r2, r3, r1
 80024ba:	17cb      	asrs	r3, r1, #31
 80024bc:	1ad2      	subs	r2, r2, r3
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	1aca      	subs	r2, r1, r3
 80024c6:	4b2c      	ldr	r3, [pc, #176]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80024c8:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 80024ca:	f001 f95b 	bl	8003784 <HAL_GetTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_GPIO_EXTI_Callback+0x4c8>)
 80024d4:	601a      	str	r2, [r3, #0]
				}
			}
		seven_segment_set_num(numbers);
 80024d6:	4829      	ldr	r0, [pc, #164]	; (800257c <HAL_GPIO_EXTI_Callback+0x4b8>)
 80024d8:	f7ff fcfe 	bl	8001ed8 <seven_segment_set_num>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
				last_time2=HAL_GetTick();
			}
		}
	}
}
 80024dc:	e048      	b.n	8002570 <HAL_GPIO_EXTI_Callback+0x4ac>
		if (GPIO_Pin == GPIO_PIN_4) { //Left button: set threshold
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d145      	bne.n	8002570 <HAL_GPIO_EXTI_Callback+0x4ac>
			if (HAL_GetTick() - last_time2 > 400){
 80024e4:	f001 f94e 	bl	8003784 <HAL_GetTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a28      	ldr	r2, [pc, #160]	; (800258c <HAL_GPIO_EXTI_Callback+0x4c8>)
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024f4:	d93c      	bls.n	8002570 <HAL_GPIO_EXTI_Callback+0x4ac>
				int n = sprintf(data, "[INFO] %s Threshold setted\n", timeStr,state+1);
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_GPIO_EXTI_Callback+0x4b4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	f107 000c 	add.w	r0, r7, #12
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002502:	4928      	ldr	r1, [pc, #160]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8002504:	f008 fcb0 	bl	800ae68 <siprintf>
 8002508:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				HAL_UART_Transmit(&huart3, data, n, 1000);
 800250c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002510:	b29a      	uxth	r2, r3
 8002512:	f107 010c 	add.w	r1, r7, #12
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	481b      	ldr	r0, [pc, #108]	; (8002588 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800251c:	f006 fb52 	bl	8008bc4 <HAL_UART_Transmit>
				threshold=threshhold_plus+initBR;
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_GPIO_EXTI_Callback+0x4e8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4413      	add	r3, r2
 800252a:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x4ec>)
 800252c:	6013      	str	r3, [r2, #0]
				initFlag=0;
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x4f0>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253a:	481f      	ldr	r0, [pc, #124]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800253c:	f002 ff28 	bl	8005390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002546:	481c      	ldr	r0, [pc, #112]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8002548:	f002 ff22 	bl	8005390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002552:	4819      	ldr	r0, [pc, #100]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8002554:	f002 ff1c 	bl	8005390 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800255e:	4816      	ldr	r0, [pc, #88]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8002560:	f002 ff16 	bl	8005390 <HAL_GPIO_WritePin>
				last_time2=HAL_GetTick();
 8002564:	f001 f90e 	bl	8003784 <HAL_GetTick>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <HAL_GPIO_EXTI_Callback+0x4c8>)
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	bf00      	nop
 8002572:	3798      	adds	r7, #152	; 0x98
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000954 	.word	0x20000954
 800257c:	20000000 	.word	0x20000000
 8002580:	200008f0 	.word	0x200008f0
 8002584:	080103e0 	.word	0x080103e0
 8002588:	20000568 	.word	0x20000568
 800258c:	20000968 	.word	0x20000968
 8002590:	200008dc 	.word	0x200008dc
 8002594:	20000368 	.word	0x20000368
 8002598:	08010370 	.word	0x08010370
 800259c:	08010440 	.word	0x08010440
 80025a0:	55555556 	.word	0x55555556
 80025a4:	0801045c 	.word	0x0801045c
 80025a8:	2000096c 	.word	0x2000096c
 80025ac:	20000068 	.word	0x20000068
 80025b0:	2000006c 	.word	0x2000006c
 80025b4:	20000970 	.word	0x20000970
 80025b8:	48001000 	.word	0x48001000

080025bc <HAL_ADC_ConvCpltCallback>:


int currentBR;
int currentVolume;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0a4      	sub	sp, #144	; 0x90
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_ADC_ConvCpltCallback+0xd4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d12a      	bne.n	8002624 <HAL_ADC_ConvCpltCallback+0x68>

		int x = HAL_ADC_GetValue(&hadc3);
 80025ce:	4831      	ldr	r0, [pc, #196]	; (8002694 <HAL_ADC_ConvCpltCallback+0xd8>)
 80025d0:	f001 fc18 	bl	8003e04 <HAL_ADC_GetValue>
 80025d4:	4603      	mov	r3, r0
 80025d6:	67bb      	str	r3, [r7, #120]	; 0x78
		float fx = ((float) x * 100 / 4095);
 80025d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002698 <HAL_ADC_ConvCpltCallback+0xdc>
 80025e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025ea:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800269c <HAL_ADC_ConvCpltCallback+0xe0>
 80025ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		currentVolume = (int) fx;
 80025f6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fe:	ee17 2a90 	vmov	r2, s15
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002604:	601a      	str	r2, [r3, #0]
		unsigned char data[100];
		int n = sprintf(data, "volume: %d  %.4f\n", x, fx);
 8002606:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002608:	f7fd ff9e 	bl	8000548 <__aeabi_f2d>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	f107 000c 	add.w	r0, r7, #12
 8002614:	e9cd 2300 	strd	r2, r3, [sp]
 8002618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800261a:	4922      	ldr	r1, [pc, #136]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xe8>)
 800261c:	f008 fc24 	bl	800ae68 <siprintf>
 8002620:	6738      	str	r0, [r7, #112]	; 0x70
		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		checkBrightness();
	}

}
 8002622:	e030      	b.n	8002686 <HAL_ADC_ConvCpltCallback+0xca>
	else if(hadc->Instance == ADC1){
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800262c:	d12b      	bne.n	8002686 <HAL_ADC_ConvCpltCallback+0xca>
		int x = HAL_ADC_GetValue(&hadc1);
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <HAL_ADC_ConvCpltCallback+0xec>)
 8002630:	f001 fbe8 	bl	8003e04 <HAL_ADC_GetValue>
 8002634:	4603      	mov	r3, r0
 8002636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		currentBR=x;
 800263a:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_ADC_ConvCpltCallback+0xf0>)
 800263c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002640:	6013      	str	r3, [r2, #0]
		float fx = ((float) x * 100 / 3800);
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002698 <HAL_ADC_ConvCpltCallback+0xdc>
 8002652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002656:	eddf 6a16 	vldr	s13, [pc, #88]	; 80026b0 <HAL_ADC_ConvCpltCallback+0xf4>
 800265a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
 8002662:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002666:	f7fd ff6f 	bl	8000548 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	f107 000c 	add.w	r0, r7, #12
 8002672:	e9cd 2300 	strd	r2, r3, [sp]
 8002676:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800267a:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_ADC_ConvCpltCallback+0xf8>)
 800267c:	f008 fbf4 	bl	800ae68 <siprintf>
 8002680:	67f8      	str	r0, [r7, #124]	; 0x7c
		checkBrightness();
 8002682:	f000 f85b 	bl	800273c <checkBrightness>
}
 8002686:	bf00      	nop
 8002688:	3788      	adds	r7, #136	; 0x88
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	50000400 	.word	0x50000400
 8002694:	200002c4 	.word	0x200002c4
 8002698:	42c80000 	.word	0x42c80000
 800269c:	457ff000 	.word	0x457ff000
 80026a0:	20000978 	.word	0x20000978
 80026a4:	08010478 	.word	0x08010478
 80026a8:	20000274 	.word	0x20000274
 80026ac:	20000974 	.word	0x20000974
 80026b0:	456d8000 	.word	0x456d8000
 80026b4:	0801048c 	.word	0x0801048c

080026b8 <HAL_TIM_PeriodElapsedCallback>:
//Play Warn
uint64_t counter = 0;
int buzz_type = 2;
int warnCount=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	programLoop();
 80026c0:	f7ff fc82 	bl	8001fc8 <programLoop>
//		}
//		else{
//			LEDs_power = LEDLight;
//		}
//	}
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <playAlarm>:

void playAlarm(){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	if (initFlag == 0 && alert == 1){
 80026d0:	4b16      	ldr	r3, [pc, #88]	; (800272c <playAlarm+0x60>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d126      	bne.n	8002726 <playAlarm+0x5a>
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <playAlarm+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d122      	bne.n	8002726 <playAlarm+0x5a>
		if(buzz_type == 3)
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <playAlarm+0x68>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d107      	bne.n	80026f8 <playAlarm+0x2c>
			triangle_signal(counter);
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <playAlarm+0x6c>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	4613      	mov	r3, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fb15 	bl	8001d20 <triangle_signal>
		else if(buzz_type == 2)
			square_signal(counter);
		else if(buzz_type == 1)
			sin_signal(counter);
	}
}
 80026f6:	e016      	b.n	8002726 <playAlarm+0x5a>
		else if(buzz_type == 2)
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <playAlarm+0x68>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d107      	bne.n	8002710 <playAlarm+0x44>
			square_signal(counter);
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <playAlarm+0x6c>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	4613      	mov	r3, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fad5 	bl	8001cb8 <square_signal>
}
 800270e:	e00a      	b.n	8002726 <playAlarm+0x5a>
		else if(buzz_type == 1)
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <playAlarm+0x68>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <playAlarm+0x5a>
			sin_signal(counter);
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <playAlarm+0x6c>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	4613      	mov	r3, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fa81 	bl	8001c28 <sin_signal>
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000970 	.word	0x20000970
 8002730:	2000095c 	.word	0x2000095c
 8002734:	20000070 	.word	0x20000070
 8002738:	20000980 	.word	0x20000980

0800273c <checkBrightness>:

void checkBrightness(){
 800273c:	b580      	push	{r7, lr}
 800273e:	b09c      	sub	sp, #112	; 0x70
 8002740:	af02      	add	r7, sp, #8
	if (initFlag == 0){
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <checkBrightness+0xc8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d158      	bne.n	80027fc <checkBrightness+0xc0>
		if (currentBR >= threshold){
 800274a:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <checkBrightness+0xcc>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b2f      	ldr	r3, [pc, #188]	; (800280c <checkBrightness+0xd0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	db46      	blt.n	80027e4 <checkBrightness+0xa8>
			setNumber(currentBR);
 8002756:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <checkBrightness+0xcc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc3e 	bl	8001fdc <setNumber>

			if(alert == 0){
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <checkBrightness+0xd4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d134      	bne.n	80027d2 <checkBrightness+0x96>
				warnCount=(warnCount+1)%10;
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <checkBrightness+0xd8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	1c59      	adds	r1, r3, #1
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <checkBrightness+0xdc>)
 8002770:	fb83 2301 	smull	r2, r3, r3, r1
 8002774:	109a      	asrs	r2, r3, #2
 8002776:	17cb      	asrs	r3, r1, #31
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	1aca      	subs	r2, r1, r3
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <checkBrightness+0xd8>)
 8002786:	601a      	str	r2, [r3, #0]
				alert = 1;
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <checkBrightness+0xd4>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800278e:	2200      	movs	r2, #0
 8002790:	4922      	ldr	r1, [pc, #136]	; (800281c <checkBrightness+0xe0>)
 8002792:	4823      	ldr	r0, [pc, #140]	; (8002820 <checkBrightness+0xe4>)
 8002794:	f004 fd7f 	bl	8007296 <HAL_RTC_GetTime>
				sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <checkBrightness+0xe0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <checkBrightness+0xe0>)
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <checkBrightness+0xe0>)
 80027a6:	789b      	ldrb	r3, [r3, #2]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	460b      	mov	r3, r1
 80027ac:	491d      	ldr	r1, [pc, #116]	; (8002824 <checkBrightness+0xe8>)
 80027ae:	481e      	ldr	r0, [pc, #120]	; (8002828 <checkBrightness+0xec>)
 80027b0:	f008 fb5a 	bl	800ae68 <siprintf>
				char data[100];
				int n = sprintf(data, "[WARN] %s Critical Situation\n", timeStr);
 80027b4:	463b      	mov	r3, r7
 80027b6:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <checkBrightness+0xec>)
 80027b8:	491c      	ldr	r1, [pc, #112]	; (800282c <checkBrightness+0xf0>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f008 fb54 	bl	800ae68 <siprintf>
 80027c0:	6678      	str	r0, [r7, #100]	; 0x64
				HAL_UART_Transmit(&huart3, data, n, 1000);
 80027c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	4639      	mov	r1, r7
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	4818      	ldr	r0, [pc, #96]	; (8002830 <checkBrightness+0xf4>)
 80027ce:	f006 f9f9 	bl	8008bc4 <HAL_UART_Transmit>
			}
			turn_off_leds();
 80027d2:	f7ff f9f7 	bl	8001bc4 <turn_off_leds>
			playAlarm();
 80027d6:	f7ff ff79 	bl	80026cc <playAlarm>
			numbers[3]=warnCount;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <checkBrightness+0xd8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <checkBrightness+0xf8>)
 80027e0:	60d3      	str	r3, [r2, #12]
			seven_segment_set_num(numbers);
			PWM_Change_Tone(0, 0);
			turn_on_leds();
		}
	}
}
 80027e2:	e00b      	b.n	80027fc <checkBrightness+0xc0>
			alert=0;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <checkBrightness+0xd4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
			seven_segment_set_num(numbers);
 80027ea:	4812      	ldr	r0, [pc, #72]	; (8002834 <checkBrightness+0xf8>)
 80027ec:	f7ff fb74 	bl	8001ed8 <seven_segment_set_num>
			PWM_Change_Tone(0, 0);
 80027f0:	2100      	movs	r1, #0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7ff f8b8 	bl	8001968 <PWM_Change_Tone>
			turn_on_leds();
 80027f8:	f7ff f972 	bl	8001ae0 <turn_on_leds>
}
 80027fc:	bf00      	nop
 80027fe:	3768      	adds	r7, #104	; 0x68
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000970 	.word	0x20000970
 8002808:	20000974 	.word	0x20000974
 800280c:	2000006c 	.word	0x2000006c
 8002810:	2000095c 	.word	0x2000095c
 8002814:	20000988 	.word	0x20000988
 8002818:	66666667 	.word	0x66666667
 800281c:	200008dc 	.word	0x200008dc
 8002820:	20000368 	.word	0x20000368
 8002824:	08010370 	.word	0x08010370
 8002828:	200008f0 	.word	0x200008f0
 800282c:	0801049c 	.word	0x0801049c
 8002830:	20000568 	.word	0x20000568
 8002834:	20000000 	.word	0x20000000

08002838 <programInit>:


void programInit() {
 8002838:	b580      	push	{r7, lr}
 800283a:	b09a      	sub	sp, #104	; 0x68
 800283c:	af00      	add	r7, sp, #0
    //give environment brightenss and set treshhold by volume ==> show volume (20-20 on 7-segment)
	initFlag = 1; //time to set threshold and dont warn
 800283e:	4b16      	ldr	r3, [pc, #88]	; (8002898 <programInit+0x60>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284a:	4814      	ldr	r0, [pc, #80]	; (800289c <programInit+0x64>)
 800284c:	f002 fda0 	bl	8005390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8002850:	2201      	movs	r2, #1
 8002852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002856:	4811      	ldr	r0, [pc, #68]	; (800289c <programInit+0x64>)
 8002858:	f002 fd9a 	bl	8005390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800285c:	2201      	movs	r2, #1
 800285e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002862:	480e      	ldr	r0, [pc, #56]	; (800289c <programInit+0x64>)
 8002864:	f002 fd94 	bl	8005390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800286e:	480b      	ldr	r0, [pc, #44]	; (800289c <programInit+0x64>)
 8002870:	f002 fd8e 	bl	8005390 <HAL_GPIO_WritePin>

	char data[100];

//	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
//	sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
	int n = sprintf(data, "[INFO] Program Started\n");
 8002874:	463b      	mov	r3, r7
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <programInit+0x68>)
 8002878:	4618      	mov	r0, r3
 800287a:	f008 faf5 	bl	800ae68 <siprintf>
 800287e:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart3, data, n, 1000);
 8002880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002882:	b29a      	uxth	r2, r3
 8002884:	4639      	mov	r1, r7
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	4806      	ldr	r0, [pc, #24]	; (80028a4 <programInit+0x6c>)
 800288c:	f006 f99a 	bl	8008bc4 <HAL_UART_Transmit>
}
 8002890:	bf00      	nop
 8002892:	3768      	adds	r7, #104	; 0x68
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000970 	.word	0x20000970
 800289c:	48001000 	.word	0x48001000
 80028a0:	080104bc 	.word	0x080104bc
 80028a4:	20000568 	.word	0x20000568

080028a8 <uart_rx_enable_it>:

char character;
char input[50];
int index_arr = 0;

void uart_rx_enable_it(void) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	4903      	ldr	r1, [pc, #12]	; (80028bc <uart_rx_enable_it+0x14>)
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <uart_rx_enable_it+0x18>)
 80028b2:	f006 fa11 	bl	8008cd8 <HAL_UART_Receive_IT>
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000098c 	.word	0x2000098c
 80028c0:	20000568 	.word	0x20000568

080028c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0be      	sub	sp, #248	; 0xf8
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	6078      	str	r0, [r7, #4]
	char data[100];
    char prefix1[] = "[DIMSTEP]:";
 80028cc:	4a9c      	ldr	r2, [pc, #624]	; (8002b40 <HAL_UART_RxCpltCallback+0x27c>)
 80028ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028d4:	c303      	stmia	r3!, {r0, r1}
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	3302      	adds	r3, #2
 80028da:	0c12      	lsrs	r2, r2, #16
 80028dc:	701a      	strb	r2, [r3, #0]
    char prefix2[] = "[LIGHTS]:";
 80028de:	4a99      	ldr	r2, [pc, #612]	; (8002b44 <HAL_UART_RxCpltCallback+0x280>)
 80028e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e6:	c303      	stmia	r3!, {r0, r1}
 80028e8:	801a      	strh	r2, [r3, #0]
    char prefix3[] = "[WARNNUM]:";
 80028ea:	4a97      	ldr	r2, [pc, #604]	; (8002b48 <HAL_UART_RxCpltCallback+0x284>)
 80028ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f2:	c303      	stmia	r3!, {r0, r1}
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	3302      	adds	r3, #2
 80028f8:	0c12      	lsrs	r2, r2, #16
 80028fa:	701a      	strb	r2, [r3, #0]
    char prefix4[] = "[TIME]:";
 80028fc:	4a93      	ldr	r2, [pc, #588]	; (8002b4c <HAL_UART_RxCpltCallback+0x288>)
 80028fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002902:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002906:	e883 0003 	stmia.w	r3, {r0, r1}

    if (huart->Instance == USART3){
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_UART_RxCpltCallback+0x28c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 8227 	bne.w	8002d64 <HAL_UART_RxCpltCallback+0x4a0>
    	if(character != 10){
 8002916:	4b8f      	ldr	r3, [pc, #572]	; (8002b54 <HAL_UART_RxCpltCallback+0x290>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b0a      	cmp	r3, #10
 800291c:	d009      	beq.n	8002932 <HAL_UART_RxCpltCallback+0x6e>
    		input[index_arr++] = character;
 800291e:	4b8e      	ldr	r3, [pc, #568]	; (8002b58 <HAL_UART_RxCpltCallback+0x294>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	498c      	ldr	r1, [pc, #560]	; (8002b58 <HAL_UART_RxCpltCallback+0x294>)
 8002926:	600a      	str	r2, [r1, #0]
 8002928:	4a8a      	ldr	r2, [pc, #552]	; (8002b54 <HAL_UART_RxCpltCallback+0x290>)
 800292a:	7811      	ldrb	r1, [r2, #0]
 800292c:	4a8b      	ldr	r2, [pc, #556]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 800292e:	54d1      	strb	r1, [r2, r3]
 8002930:	e216      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
    	} else{
			input[index_arr++] = '\0';
 8002932:	4b89      	ldr	r3, [pc, #548]	; (8002b58 <HAL_UART_RxCpltCallback+0x294>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4987      	ldr	r1, [pc, #540]	; (8002b58 <HAL_UART_RxCpltCallback+0x294>)
 800293a:	600a      	str	r2, [r1, #0]
 800293c:	4a87      	ldr	r2, [pc, #540]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 800293e:	2100      	movs	r1, #0
 8002940:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 8002942:	4b85      	ldr	r3, [pc, #532]	; (8002b58 <HAL_UART_RxCpltCallback+0x294>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002948:	2200      	movs	r2, #0
 800294a:	4985      	ldr	r1, [pc, #532]	; (8002b60 <HAL_UART_RxCpltCallback+0x29c>)
 800294c:	4885      	ldr	r0, [pc, #532]	; (8002b64 <HAL_UART_RxCpltCallback+0x2a0>)
 800294e:	f004 fca2 	bl	8007296 <HAL_RTC_GetTime>
			sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002952:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_UART_RxCpltCallback+0x29c>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	4b81      	ldr	r3, [pc, #516]	; (8002b60 <HAL_UART_RxCpltCallback+0x29c>)
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	4619      	mov	r1, r3
 800295e:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <HAL_UART_RxCpltCallback+0x29c>)
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	4980      	ldr	r1, [pc, #512]	; (8002b68 <HAL_UART_RxCpltCallback+0x2a4>)
 8002968:	4880      	ldr	r0, [pc, #512]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 800296a:	f008 fa7d 	bl	800ae68 <siprintf>
			if (strncmp(input, prefix1, strlen(prefix1)) == 0){ //DIMSTEP
 800296e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd fc2c 	bl	80001d0 <strlen>
 8002978:	4602      	mov	r2, r0
 800297a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800297e:	4619      	mov	r1, r3
 8002980:	4876      	ldr	r0, [pc, #472]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 8002982:	f008 fb02 	bl	800af8a <strncmp>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d164      	bne.n	8002a56 <HAL_UART_RxCpltCallback+0x192>
				if (sscanf(input + strlen(prefix1), "%d", &value) == 1) {
 800298c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fc1d 	bl	80001d0 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	4a70      	ldr	r2, [pc, #448]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 800299a:	4413      	add	r3, r2
 800299c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80029a0:	4973      	ldr	r1, [pc, #460]	; (8002b70 <HAL_UART_RxCpltCallback+0x2ac>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f008 fa80 	bl	800aea8 <siscanf>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d13f      	bne.n	8002a2e <HAL_UART_RxCpltCallback+0x16a>
					if (value >= 0 && value <= 9){
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db28      	blt.n	8002a06 <HAL_UART_RxCpltCallback+0x142>
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b09      	cmp	r3, #9
 80029b8:	dc25      	bgt.n	8002a06 <HAL_UART_RxCpltCallback+0x142>
						int n;
						if (numbers[0]>value)
 80029ba:	4b6e      	ldr	r3, [pc, #440]	; (8002b74 <HAL_UART_RxCpltCallback+0x2b0>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dd09      	ble.n	80029d8 <HAL_UART_RxCpltCallback+0x114>
							n = sprintf(data, "[INFO] %s DimStep decreased\n", timeStr);
 80029c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029c8:	4a68      	ldr	r2, [pc, #416]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 80029ca:	496b      	ldr	r1, [pc, #428]	; (8002b78 <HAL_UART_RxCpltCallback+0x2b4>)
 80029cc:	4618      	mov	r0, r3
 80029ce:	f008 fa4b 	bl	800ae68 <siprintf>
 80029d2:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 80029d6:	e008      	b.n	80029ea <HAL_UART_RxCpltCallback+0x126>
						else
							n = sprintf(data, "[INFO] %s DimStep increased\n", timeStr);
 80029d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029dc:	4a63      	ldr	r2, [pc, #396]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 80029de:	4967      	ldr	r1, [pc, #412]	; (8002b7c <HAL_UART_RxCpltCallback+0x2b8>)
 80029e0:	4618      	mov	r0, r3
 80029e2:	f008 fa41 	bl	800ae68 <siprintf>
 80029e6:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
						numbers[0]=value;
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <HAL_UART_RxCpltCallback+0x2b0>)
 80029ee:	6013      	str	r3, [r2, #0]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80029f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	4860      	ldr	r0, [pc, #384]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002a00:	f006 f8e0 	bl	8008bc4 <HAL_UART_Transmit>
					if (value >= 0 && value <= 9){
 8002a04:	e1ac      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 8002a06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a0a:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002a0c:	495d      	ldr	r1, [pc, #372]	; (8002b84 <HAL_UART_RxCpltCallback+0x2c0>)
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f008 fa2a 	bl	800ae68 <siprintf>
 8002a14:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	4856      	ldr	r0, [pc, #344]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002a28:	f006 f8cc 	bl	8008bc4 <HAL_UART_Transmit>
 8002a2c:	e198      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8002a2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a32:	4a4e      	ldr	r2, [pc, #312]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002a34:	4954      	ldr	r1, [pc, #336]	; (8002b88 <HAL_UART_RxCpltCallback+0x2c4>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fa16 	bl	800ae68 <siprintf>
 8002a3c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4e:	484c      	ldr	r0, [pc, #304]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002a50:	f006 f8b8 	bl	8008bc4 <HAL_UART_Transmit>
 8002a54:	e184      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
				}

			}else if (strncmp(input, prefix2, strlen(prefix2)) == 0){ //LIGHTS
 8002a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fbb8 	bl	80001d0 <strlen>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a66:	4619      	mov	r1, r3
 8002a68:	483c      	ldr	r0, [pc, #240]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 8002a6a:	f008 fa8e 	bl	800af8a <strncmp>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 808f 	bne.w	8002b94 <HAL_UART_RxCpltCallback+0x2d0>
				if (sscanf(input + strlen(prefix2), "%d", &value) == 1) {
 8002a76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd fba8 	bl	80001d0 <strlen>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a36      	ldr	r2, [pc, #216]	; (8002b5c <HAL_UART_RxCpltCallback+0x298>)
 8002a84:	4413      	add	r3, r2
 8002a86:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002a8a:	4939      	ldr	r1, [pc, #228]	; (8002b70 <HAL_UART_RxCpltCallback+0x2ac>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f008 fa0b 	bl	800aea8 <siscanf>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d13f      	bne.n	8002b18 <HAL_UART_RxCpltCallback+0x254>
					if (value >= 1 && value <= 4){
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	dd28      	ble.n	8002af0 <HAL_UART_RxCpltCallback+0x22c>
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	dc25      	bgt.n	8002af0 <HAL_UART_RxCpltCallback+0x22c>
						int n;
						if (numbers[1]>value)
 8002aa4:	4b33      	ldr	r3, [pc, #204]	; (8002b74 <HAL_UART_RxCpltCallback+0x2b0>)
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	dd09      	ble.n	8002ac2 <HAL_UART_RxCpltCallback+0x1fe>
							n = sprintf(data, "[INFO] %s LIGHTS decreased\n", timeStr);
 8002aae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ab2:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_UART_RxCpltCallback+0x2c8>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f008 f9d6 	bl	800ae68 <siprintf>
 8002abc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8002ac0:	e008      	b.n	8002ad4 <HAL_UART_RxCpltCallback+0x210>
						else
							n = sprintf(data, "[INFO] %s LIGHTS increased\n", timeStr);
 8002ac2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ac6:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002ac8:	4931      	ldr	r1, [pc, #196]	; (8002b90 <HAL_UART_RxCpltCallback+0x2cc>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f008 f9cc 	bl	800ae68 <siprintf>
 8002ad0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
						numbers[1]=value;
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_UART_RxCpltCallback+0x2b0>)
 8002ad8:	6053      	str	r3, [r2, #4]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ae4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae8:	4825      	ldr	r0, [pc, #148]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002aea:	f006 f86b 	bl	8008bc4 <HAL_UART_Transmit>
					if (value >= 1 && value <= 4){
 8002aee:	e137      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 8002af0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002af6:	4923      	ldr	r1, [pc, #140]	; (8002b84 <HAL_UART_RxCpltCallback+0x2c0>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f008 f9b5 	bl	800ae68 <siprintf>
 8002afe:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b10:	481b      	ldr	r0, [pc, #108]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002b12:	f006 f857 	bl	8008bc4 <HAL_UART_Transmit>
 8002b16:	e123      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8002b18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_UART_RxCpltCallback+0x2a8>)
 8002b1e:	491a      	ldr	r1, [pc, #104]	; (8002b88 <HAL_UART_RxCpltCallback+0x2c4>)
 8002b20:	4618      	mov	r0, r3
 8002b22:	f008 f9a1 	bl	800ae68 <siprintf>
 8002b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <HAL_UART_RxCpltCallback+0x2bc>)
 8002b3a:	f006 f843 	bl	8008bc4 <HAL_UART_Transmit>
 8002b3e:	e10f      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
 8002b40:	08010618 	.word	0x08010618
 8002b44:	08010624 	.word	0x08010624
 8002b48:	08010630 	.word	0x08010630
 8002b4c:	0801063c 	.word	0x0801063c
 8002b50:	40004800 	.word	0x40004800
 8002b54:	2000098c 	.word	0x2000098c
 8002b58:	200009c4 	.word	0x200009c4
 8002b5c:	20000990 	.word	0x20000990
 8002b60:	200008dc 	.word	0x200008dc
 8002b64:	20000368 	.word	0x20000368
 8002b68:	08010370 	.word	0x08010370
 8002b6c:	200008f0 	.word	0x200008f0
 8002b70:	080104d4 	.word	0x080104d4
 8002b74:	20000000 	.word	0x20000000
 8002b78:	080104d8 	.word	0x080104d8
 8002b7c:	080104f8 	.word	0x080104f8
 8002b80:	20000568 	.word	0x20000568
 8002b84:	08010518 	.word	0x08010518
 8002b88:	0801053c 	.word	0x0801053c
 8002b8c:	08010558 	.word	0x08010558
 8002b90:	08010574 	.word	0x08010574
				}
			}else if (strncmp(input, prefix3, strlen(prefix3)) == 0){ //WARNNUM
 8002b94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fb19 	bl	80001d0 <strlen>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4871      	ldr	r0, [pc, #452]	; (8002d6c <HAL_UART_RxCpltCallback+0x4a8>)
 8002ba8:	f008 f9ef 	bl	800af8a <strncmp>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d164      	bne.n	8002c7c <HAL_UART_RxCpltCallback+0x3b8>
				if (sscanf(input + strlen(prefix3), "%d", &value) == 1) {
 8002bb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb0a 	bl	80001d0 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	4a6b      	ldr	r2, [pc, #428]	; (8002d6c <HAL_UART_RxCpltCallback+0x4a8>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002bc6:	496a      	ldr	r1, [pc, #424]	; (8002d70 <HAL_UART_RxCpltCallback+0x4ac>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f008 f96d 	bl	800aea8 <siscanf>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d13f      	bne.n	8002c54 <HAL_UART_RxCpltCallback+0x390>
					if (value >= 1 && value <= 3){
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	dd28      	ble.n	8002c2c <HAL_UART_RxCpltCallback+0x368>
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	dc25      	bgt.n	8002c2c <HAL_UART_RxCpltCallback+0x368>
						int n;
						if (numbers[2]>value)
 8002be0:	4b64      	ldr	r3, [pc, #400]	; (8002d74 <HAL_UART_RxCpltCallback+0x4b0>)
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dd09      	ble.n	8002bfe <HAL_UART_RxCpltCallback+0x33a>
							n = sprintf(data, "[INFO] %s WARNNUM decreased\n", timeStr);
 8002bea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bee:	4a62      	ldr	r2, [pc, #392]	; (8002d78 <HAL_UART_RxCpltCallback+0x4b4>)
 8002bf0:	4962      	ldr	r1, [pc, #392]	; (8002d7c <HAL_UART_RxCpltCallback+0x4b8>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f008 f938 	bl	800ae68 <siprintf>
 8002bf8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8002bfc:	e008      	b.n	8002c10 <HAL_UART_RxCpltCallback+0x34c>
						else
							n = sprintf(data, "[INFO] %s WARNNUM increased\n", timeStr);
 8002bfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <HAL_UART_RxCpltCallback+0x4b4>)
 8002c04:	495e      	ldr	r1, [pc, #376]	; (8002d80 <HAL_UART_RxCpltCallback+0x4bc>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f008 f92e 	bl	800ae68 <siprintf>
 8002c0c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
						numbers[2]=value;
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_UART_RxCpltCallback+0x4b0>)
 8002c14:	6093      	str	r3, [r2, #8]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c24:	4857      	ldr	r0, [pc, #348]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002c26:	f005 ffcd 	bl	8008bc4 <HAL_UART_Transmit>
					if (value >= 1 && value <= 3){
 8002c2a:	e099      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 8002c2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c30:	4a51      	ldr	r2, [pc, #324]	; (8002d78 <HAL_UART_RxCpltCallback+0x4b4>)
 8002c32:	4955      	ldr	r1, [pc, #340]	; (8002d88 <HAL_UART_RxCpltCallback+0x4c4>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f008 f917 	bl	800ae68 <siprintf>
 8002c3a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002c3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4c:	484d      	ldr	r0, [pc, #308]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002c4e:	f005 ffb9 	bl	8008bc4 <HAL_UART_Transmit>
 8002c52:	e085      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8002c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c58:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <HAL_UART_RxCpltCallback+0x4b4>)
 8002c5a:	494c      	ldr	r1, [pc, #304]	; (8002d8c <HAL_UART_RxCpltCallback+0x4c8>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f008 f903 	bl	800ae68 <siprintf>
 8002c62:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c74:	4843      	ldr	r0, [pc, #268]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002c76:	f005 ffa5 	bl	8008bc4 <HAL_UART_Transmit>
 8002c7a:	e071      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
				}
			}else if (strncmp(input, prefix4, strlen(prefix4)) == 0){ //Time
 8002c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd faa5 	bl	80001d0 <strlen>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4837      	ldr	r0, [pc, #220]	; (8002d6c <HAL_UART_RxCpltCallback+0x4a8>)
 8002c90:	f008 f97b 	bl	800af8a <strncmp>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d14f      	bne.n	8002d3a <HAL_UART_RxCpltCallback+0x476>
				int hour;
				int minute;
				int second;
				if (sscanf(input + strlen(prefix4), "%2d:%2d:%2d", &hour, &minute, &second) == 3) {
 8002c9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fa96 	bl	80001d0 <strlen>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4a31      	ldr	r2, [pc, #196]	; (8002d6c <HAL_UART_RxCpltCallback+0x4a8>)
 8002ca8:	1898      	adds	r0, r3, r2
 8002caa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002cae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cb2:	f107 0320 	add.w	r3, r7, #32
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4935      	ldr	r1, [pc, #212]	; (8002d90 <HAL_UART_RxCpltCallback+0x4cc>)
 8002cbc:	f008 f8f4 	bl	800aea8 <siscanf>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d126      	bne.n	8002d14 <HAL_UART_RxCpltCallback+0x450>
//					set_start_time(hour,minute,second);
					RTC_TimeTypeDef start_t ;
					start_t.Hours = hour;
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	733b      	strb	r3, [r7, #12]
					start_t.Minutes = minute;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	737b      	strb	r3, [r7, #13]
					start_t.Seconds = second;
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	73bb      	strb	r3, [r7, #14]

				    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	482c      	ldr	r0, [pc, #176]	; (8002d94 <HAL_UART_RxCpltCallback+0x4d0>)
 8002ce2:	f004 fa3e 	bl	8007162 <HAL_RTC_SetTime>

					int n = sprintf(data, "[INFO] Time set to %02d:%02d:%02d\n", hour, minute, second);
 8002ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4928      	ldr	r1, [pc, #160]	; (8002d98 <HAL_UART_RxCpltCallback+0x4d4>)
 8002cf6:	f008 f8b7 	bl	800ae68 <siprintf>
 8002cfa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0c:	481d      	ldr	r0, [pc, #116]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002d0e:	f005 ff59 	bl	8008bc4 <HAL_UART_Transmit>
 8002d12:	e025      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
				}else{
					int n = sprintf(data, "[ERR] Not valid Time\n");
 8002d14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d18:	4920      	ldr	r1, [pc, #128]	; (8002d9c <HAL_UART_RxCpltCallback+0x4d8>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f008 f8a4 	bl	800ae68 <siprintf>
 8002d20:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d32:	4814      	ldr	r0, [pc, #80]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002d34:	f005 ff46 	bl	8008bc4 <HAL_UART_Transmit>
 8002d38:	e012      	b.n	8002d60 <HAL_UART_RxCpltCallback+0x49c>
				}
			}else{											//Others
				int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8002d3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <HAL_UART_RxCpltCallback+0x4b4>)
 8002d40:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_UART_RxCpltCallback+0x4c8>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f008 f890 	bl	800ae68 <siprintf>
 8002d48:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
				HAL_UART_Transmit(&huart3, data, n, 1000);
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	480a      	ldr	r0, [pc, #40]	; (8002d84 <HAL_UART_RxCpltCallback+0x4c0>)
 8002d5c:	f005 ff32 	bl	8008bc4 <HAL_UART_Transmit>
			}

		}
		uart_rx_enable_it();
 8002d60:	f7ff fda2 	bl	80028a8 <uart_rx_enable_it>
    }
}
 8002d64:	bf00      	nop
 8002d66:	37f0      	adds	r7, #240	; 0xf0
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000990 	.word	0x20000990
 8002d70:	080104d4 	.word	0x080104d4
 8002d74:	20000000 	.word	0x20000000
 8002d78:	200008f0 	.word	0x200008f0
 8002d7c:	08010590 	.word	0x08010590
 8002d80:	080105b0 	.word	0x080105b0
 8002d84:	20000568 	.word	0x20000568
 8002d88:	08010518 	.word	0x08010518
 8002d8c:	0801053c 	.word	0x0801053c
 8002d90:	080105d0 	.word	0x080105d0
 8002d94:	20000368 	.word	0x20000368
 8002d98:	080105dc 	.word	0x080105dc
 8002d9c:	08010600 	.word	0x08010600

08002da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_MspInit+0x44>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_MspInit+0x44>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6193      	str	r3, [r2, #24]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_MspInit+0x44>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_MspInit+0x44>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_MspInit+0x44>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_MspInit+0x44>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002dd6:	2005      	movs	r0, #5
 8002dd8:	f002 f8a8 	bl	8004f2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08c      	sub	sp, #48	; 0x30
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e08:	d12d      	bne.n	8002e66 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e0a:	4b31      	ldr	r3, [pc, #196]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	6153      	str	r3, [r2, #20]
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	6153      	str	r3, [r2, #20]
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	f107 031c 	add.w	r3, r7, #28
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e50:	f002 f924 	bl	800509c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2101      	movs	r1, #1
 8002e58:	2012      	movs	r0, #18
 8002e5a:	f002 f872 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002e5e:	2012      	movs	r0, #18
 8002e60:	f002 f88b 	bl	8004f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e64:	e030      	b.n	8002ec8 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC3)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_ADC_MspInit+0xec>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12b      	bne.n	8002ec8 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	6153      	str	r3, [r2, #20]
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e92:	6153      	str	r3, [r2, #20]
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <HAL_ADC_MspInit+0xe8>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <HAL_ADC_MspInit+0xf0>)
 8002eb4:	f002 f8f2 	bl	800509c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	202f      	movs	r0, #47	; 0x2f
 8002ebe:	f002 f840 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002ec2:	202f      	movs	r0, #47	; 0x2f
 8002ec4:	f002 f859 	bl	8004f7a <HAL_NVIC_EnableIRQ>
}
 8002ec8:	bf00      	nop
 8002eca:	3730      	adds	r7, #48	; 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	50000400 	.word	0x50000400
 8002ed8:	48000400 	.word	0x48000400

08002edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <HAL_I2C_MspInit+0x7c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d127      	bne.n	8002f4e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efe:	4b17      	ldr	r3, [pc, #92]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6153      	str	r3, [r2, #20]
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002f16:	23c0      	movs	r3, #192	; 0xc0
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	2312      	movs	r3, #18
 8002f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f22:	2303      	movs	r3, #3
 8002f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f26:	2304      	movs	r3, #4
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	4619      	mov	r1, r3
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <HAL_I2C_MspInit+0x84>)
 8002f32:	f002 f8b3 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f40:	61d3      	str	r3, [r2, #28]
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_I2C_MspInit+0x80>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40005400 	.word	0x40005400
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	48000400 	.word	0x48000400

08002f64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0d      	ldr	r2, [pc, #52]	; (8002fa8 <HAL_RTC_MspInit+0x44>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d111      	bne.n	8002f9a <HAL_RTC_MspInit+0x36>
 8002f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	60bb      	str	r3, [r7, #8]
  return result;
 8002f84:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RTC_MspInit+0x48>)
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	461a      	mov	r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40002800 	.word	0x40002800
 8002fac:	10908100 	.word	0x10908100

08002fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_SPI_MspInit+0x7c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d128      	bne.n	8003024 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fdc:	6193      	str	r3, [r2, #24]
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4a10      	ldr	r2, [pc, #64]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	6153      	str	r3, [r2, #20]
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_SPI_MspInit+0x80>)
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003002:	23e0      	movs	r3, #224	; 0xe0
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003012:	2305      	movs	r3, #5
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003020:	f002 f83c 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003024:	bf00      	nop
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013000 	.word	0x40013000
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <HAL_TIM_Base_MspInit+0xc0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 800304c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003050:	6193      	str	r3, [r2, #24]
 8003052:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800305e:	e044      	b.n	80030ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d114      	bne.n	8003094 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	61d3      	str	r3, [r2, #28]
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	201c      	movs	r0, #28
 8003088:	f001 ff5b 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800308c:	201c      	movs	r0, #28
 800308e:	f001 ff74 	bl	8004f7a <HAL_NVIC_EnableIRQ>
}
 8003092:	e02a      	b.n	80030ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_TIM_Base_MspInit+0xc8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d114      	bne.n	80030c8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	61d3      	str	r3, [r2, #28]
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	201d      	movs	r0, #29
 80030bc:	f001 ff41 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030c0:	201d      	movs	r0, #29
 80030c2:	f001 ff5a 	bl	8004f7a <HAL_NVIC_EnableIRQ>
}
 80030c6:	e010      	b.n	80030ea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <HAL_TIM_Base_MspInit+0xcc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10b      	bne.n	80030ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030dc:	6193      	str	r3, [r2, #24]
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_TIM_Base_MspInit+0xc4>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
}
 80030ea:	bf00      	nop
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40000400 	.word	0x40000400
 8003100:	40013400 	.word	0x40013400

08003104 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0a      	ldr	r2, [pc, #40]	; (800313c <HAL_TIM_PWM_MspInit+0x38>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10b      	bne.n	800312e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_TIM_PWM_MspInit+0x3c>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_TIM_PWM_MspInit+0x3c>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_TIM_PWM_MspInit+0x3c>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40000800 	.word	0x40000800
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08c      	sub	sp, #48	; 0x30
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a51      	ldr	r2, [pc, #324]	; (80032a8 <HAL_TIM_MspPostInit+0x164>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d11e      	bne.n	80031a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a50      	ldr	r2, [pc, #320]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	6153      	str	r3, [r2, #20]
 8003172:	4b4e      	ldr	r3, [pc, #312]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800317e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003190:	2306      	movs	r3, #6
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003194:	f107 031c 	add.w	r3, r7, #28
 8003198:	4619      	mov	r1, r3
 800319a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800319e:	f001 ff7d 	bl	800509c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80031a2:	e07c      	b.n	800329e <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a41      	ldr	r2, [pc, #260]	; (80032b0 <HAL_TIM_MspPostInit+0x16c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d155      	bne.n	800325a <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031ae:	4b3f      	ldr	r3, [pc, #252]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	4a3e      	ldr	r2, [pc, #248]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031b8:	6153      	str	r3, [r2, #20]
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031d0:	6153      	str	r3, [r2, #20]
 80031d2:	4b36      	ldr	r3, [pc, #216]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	4a32      	ldr	r2, [pc, #200]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6153      	str	r3, [r2, #20]
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031f6:	2310      	movs	r3, #16
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003206:	2302      	movs	r3, #2
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4828      	ldr	r0, [pc, #160]	; (80032b4 <HAL_TIM_MspPostInit+0x170>)
 8003212:	f001 ff43 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003216:	f44f 7320 	mov.w	r3, #640	; 0x280
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003228:	2302      	movs	r3, #2
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	4619      	mov	r1, r3
 8003232:	4821      	ldr	r0, [pc, #132]	; (80032b8 <HAL_TIM_MspPostInit+0x174>)
 8003234:	f001 ff32 	bl	800509c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003238:	2310      	movs	r3, #16
 800323a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003248:	2302      	movs	r3, #2
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	4619      	mov	r1, r3
 8003252:	481a      	ldr	r0, [pc, #104]	; (80032bc <HAL_TIM_MspPostInit+0x178>)
 8003254:	f001 ff22 	bl	800509c <HAL_GPIO_Init>
}
 8003258:	e021      	b.n	800329e <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM4)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_TIM_MspPostInit+0x17c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d11c      	bne.n	800329e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 800326a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326e:	6153      	str	r3, [r2, #20]
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_TIM_MspPostInit+0x168>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800327c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800328e:	2302      	movs	r3, #2
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003292:	f107 031c 	add.w	r3, r7, #28
 8003296:	4619      	mov	r1, r3
 8003298:	480a      	ldr	r0, [pc, #40]	; (80032c4 <HAL_TIM_MspPostInit+0x180>)
 800329a:	f001 feff 	bl	800509c <HAL_GPIO_Init>
}
 800329e:	bf00      	nop
 80032a0:	3730      	adds	r7, #48	; 0x30
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	48001000 	.word	0x48001000
 80032b8:	48000800 	.word	0x48000800
 80032bc:	48000400 	.word	0x48000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	48000c00 	.word	0x48000c00

080032c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_UART_MspInit+0x8c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d130      	bne.n	800334c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_UART_MspInit+0x90>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <HAL_UART_MspInit+0x90>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f4:	61d3      	str	r3, [r2, #28]
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_UART_MspInit+0x90>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_UART_MspInit+0x90>)
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <HAL_UART_MspInit+0x90>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6153      	str	r3, [r2, #20]
 800330e:	4b12      	ldr	r3, [pc, #72]	; (8003358 <HAL_UART_MspInit+0x90>)
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800331a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800332c:	2307      	movs	r3, #7
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	4809      	ldr	r0, [pc, #36]	; (800335c <HAL_UART_MspInit+0x94>)
 8003338:	f001 feb0 	bl	800509c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	2027      	movs	r0, #39	; 0x27
 8003342:	f001 fdfe 	bl	8004f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003346:	2027      	movs	r0, #39	; 0x27
 8003348:	f001 fe17 	bl	8004f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800334c:	bf00      	nop
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40004800 	.word	0x40004800
 8003358:	40021000 	.word	0x40021000
 800335c:	48000400 	.word	0x48000400

08003360 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a18      	ldr	r2, [pc, #96]	; (80033e0 <HAL_PCD_MspInit+0x80>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d129      	bne.n	80033d6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	4a17      	ldr	r2, [pc, #92]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 8003388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338c:	6153      	str	r3, [r2, #20]
 800338e:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|DP_Pin;
 800339a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80033ac:	230e      	movs	r3, #14
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0314 	add.w	r3, r7, #20
 80033b4:	4619      	mov	r1, r3
 80033b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ba:	f001 fe6f 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 80033c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_PCD_MspInit+0x84>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	; 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40005c00 	.word	0x40005c00
 80033e4:	40021000 	.word	0x40021000

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <NMI_Handler+0x4>

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003434:	f000 f992 	bl	800375c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003440:	2001      	movs	r0, #1
 8003442:	f001 ffd7 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}

0800344a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800344e:	2002      	movs	r0, #2
 8003450:	f001 ffd0 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}

08003458 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800345c:	2010      	movs	r0, #16
 800345e:	f001 ffc9 	bl	80053f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <ADC1_2_IRQHandler+0x10>)
 800346e:	f000 fcd7 	bl	8003e20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000274 	.word	0x20000274

0800347c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <TIM2_IRQHandler+0x10>)
 8003482:	f004 fae9 	bl	8007a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000438 	.word	0x20000438

08003490 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <TIM3_IRQHandler+0x10>)
 8003496:	f004 fadf 	bl	8007a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000484 	.word	0x20000484

080034a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <USART3_IRQHandler+0x10>)
 80034aa:	f005 fc59 	bl	8008d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000568 	.word	0x20000568

080034b8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <ADC3_IRQHandler+0x10>)
 80034be:	f000 fcaf 	bl	8003e20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200002c4 	.word	0x200002c4

080034cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_kill>:

int _kill(int pid, int sig)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034e6:	f006 fe0d 	bl	800a104 <__errno>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2216      	movs	r2, #22
 80034ee:	601a      	str	r2, [r3, #0]
  return -1;
 80034f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_exit>:

void _exit (int status)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003504:	f04f 31ff 	mov.w	r1, #4294967295
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800350e:	e7fe      	b.n	800350e <_exit+0x12>

08003510 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	e00a      	b.n	8003538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003522:	f3af 8000 	nop.w
 8003526:	4601      	mov	r1, r0
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	60ba      	str	r2, [r7, #8]
 800352e:	b2ca      	uxtb	r2, r1
 8003530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3301      	adds	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	dbf0      	blt.n	8003522 <_read+0x12>
  }

  return len;
 8003540:	687b      	ldr	r3, [r7, #4]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e009      	b.n	8003570 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	dbf1      	blt.n	800355c <_write+0x12>
  }
  return len;
 8003578:	687b      	ldr	r3, [r7, #4]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_close>:

int _close(int file)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035aa:	605a      	str	r2, [r3, #4]
  return 0;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_isatty>:

int _isatty(int file)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035c2:	2301      	movs	r3, #1
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <_sbrk+0x5c>)
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <_sbrk+0x60>)
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <_sbrk+0x64>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_sbrk+0x64>)
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <_sbrk+0x68>)
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800360e:	4b10      	ldr	r3, [pc, #64]	; (8003650 <_sbrk+0x64>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	429a      	cmp	r2, r3
 800361a:	d207      	bcs.n	800362c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800361c:	f006 fd72 	bl	800a104 <__errno>
 8003620:	4603      	mov	r3, r0
 8003622:	220c      	movs	r2, #12
 8003624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003626:	f04f 33ff 	mov.w	r3, #4294967295
 800362a:	e009      	b.n	8003640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800362c:	4b08      	ldr	r3, [pc, #32]	; (8003650 <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <_sbrk+0x64>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	4a05      	ldr	r2, [pc, #20]	; (8003650 <_sbrk+0x64>)
 800363c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800363e:	68fb      	ldr	r3, [r7, #12]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2000a000 	.word	0x2000a000
 800364c:	00000400 	.word	0x00000400
 8003650:	200009d0 	.word	0x200009d0
 8003654:	200009e8 	.word	0x200009e8

08003658 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <SystemInit+0x20>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <SystemInit+0x20>)
 8003664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003680:	f7ff ffea 	bl	8003658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003686:	490d      	ldr	r1, [pc, #52]	; (80036bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003688:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <LoopForever+0xe>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <LoopForever+0x16>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f006 fd31 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036ae:	f7fd fb21 	bl	8000cf4 <main>

080036b2 <LoopForever>:

LoopForever:
    b LoopForever
 80036b2:	e7fe      	b.n	80036b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036bc:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80036c0:	08010d28 	.word	0x08010d28
  ldr r2, =_sbss
 80036c4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80036c8:	200009e8 	.word	0x200009e8

080036cc <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC4_IRQHandler>
	...

080036d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_Init+0x28>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a07      	ldr	r2, [pc, #28]	; (80036f8 <HAL_Init+0x28>)
 80036da:	f043 0310 	orr.w	r3, r3, #16
 80036de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f001 fc23 	bl	8004f2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f000 f808 	bl	80036fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ec:	f7ff fb58 	bl	8002da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40022000 	.word	0x40022000

080036fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x54>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_InitTick+0x58>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003712:	fbb3 f3f1 	udiv	r3, r3, r1
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fc3b 	bl	8004f96 <HAL_SYSTICK_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e00e      	b.n	8003748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d80a      	bhi.n	8003746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003730:	2200      	movs	r2, #0
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f001 fc03 	bl	8004f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800373c:	4a06      	ldr	r2, [pc, #24]	; (8003758 <HAL_InitTick+0x5c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000074 	.word	0x20000074
 8003754:	2000007c 	.word	0x2000007c
 8003758:	20000078 	.word	0x20000078

0800375c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_IncTick+0x20>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <HAL_IncTick+0x24>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4413      	add	r3, r2
 800376c:	4a04      	ldr	r2, [pc, #16]	; (8003780 <HAL_IncTick+0x24>)
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	2000007c 	.word	0x2000007c
 8003780:	200009d4 	.word	0x200009d4

08003784 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return uwTick;  
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_GetTick+0x14>)
 800378a:	681b      	ldr	r3, [r3, #0]
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	200009d4 	.word	0x200009d4

0800379c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b09a      	sub	sp, #104	; 0x68
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e1c9      	b.n	8003b78 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d176      	bne.n	80038e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d152      	bne.n	80038a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fae5 	bl	8002de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13b      	bne.n	80038a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 fa47 	bl	8004cc0 <ADC_Disable>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d12f      	bne.n	80038a4 <HAL_ADC_Init+0xe0>
 8003844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003848:	2b00      	cmp	r3, #0
 800384a:	d12b      	bne.n	80038a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003854:	f023 0302 	bic.w	r3, r3, #2
 8003858:	f043 0202 	orr.w	r2, r3, #2
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800386e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800387e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003880:	4b86      	ldr	r3, [pc, #536]	; (8003a9c <HAL_ADC_Init+0x2d8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a86      	ldr	r2, [pc, #536]	; (8003aa0 <HAL_ADC_Init+0x2dc>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9a      	lsrs	r2, r3, #18
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003896:	e002      	b.n	800389e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	3b01      	subs	r3, #1
 800389c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f9      	bne.n	8003898 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d110      	bne.n	80038e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f023 0312 	bic.w	r3, r3, #18
 80038ca:	f043 0210 	orr.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8136 	bne.w	8003b5e <HAL_ADC_Init+0x39a>
 80038f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 8131 	bne.w	8003b5e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 8129 	bne.w	8003b5e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003924:	d004      	beq.n	8003930 <HAL_ADC_Init+0x16c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <HAL_ADC_Init+0x2e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_ADC_Init+0x170>
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_ADC_Init+0x2e4>)
 8003932:	e000      	b.n	8003936 <HAL_ADC_Init+0x172>
 8003934:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_ADC_Init+0x2e8>)
 8003936:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003940:	d102      	bne.n	8003948 <HAL_ADC_Init+0x184>
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <HAL_ADC_Init+0x2e0>)
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e01a      	b.n	800397e <HAL_ADC_Init+0x1ba>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_ADC_Init+0x2e0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d103      	bne.n	800395a <HAL_ADC_Init+0x196>
 8003952:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e011      	b.n	800397e <HAL_ADC_Init+0x1ba>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a54      	ldr	r2, [pc, #336]	; (8003ab0 <HAL_ADC_Init+0x2ec>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d102      	bne.n	800396a <HAL_ADC_Init+0x1a6>
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_ADC_Init+0x2f0>)
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e009      	b.n	800397e <HAL_ADC_Init+0x1ba>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a51      	ldr	r2, [pc, #324]	; (8003ab4 <HAL_ADC_Init+0x2f0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d102      	bne.n	800397a <HAL_ADC_Init+0x1b6>
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_ADC_Init+0x2ec>)
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e001      	b.n	800397e <HAL_ADC_Init+0x1ba>
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d108      	bne.n	800399e <HAL_ADC_Init+0x1da>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_ADC_Init+0x1da>
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_ADC_Init+0x1dc>
 800399e:	2300      	movs	r3, #0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11c      	bne.n	80039de <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_ADC_Init+0x202>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_ADC_Init+0x202>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_ADC_Init+0x204>
 80039c6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	431a      	orrs	r2, r3
 80039da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039dc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	7e5b      	ldrb	r3, [r3, #25]
 80039e2:	035b      	lsls	r3, r3, #13
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e8:	2a01      	cmp	r2, #1
 80039ea:	d002      	beq.n	80039f2 <HAL_ADC_Init+0x22e>
 80039ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f0:	e000      	b.n	80039f4 <HAL_ADC_Init+0x230>
 80039f2:	2200      	movs	r2, #0
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a04:	4313      	orrs	r3, r2
 8003a06:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d11b      	bne.n	8003a4a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7e5b      	ldrb	r3, [r3, #25]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	045a      	lsls	r2, r3, #17
 8003a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003a2c:	e00d      	b.n	8003a4a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d03a      	beq.n	8003ac8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_ADC_Init+0x2ec>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_Init+0x2a2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <HAL_ADC_Init+0x2f0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d128      	bne.n	8003ab8 <HAL_ADC_Init+0x2f4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003a6e:	d012      	beq.n	8003a96 <HAL_ADC_Init+0x2d2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a78:	d00a      	beq.n	8003a90 <HAL_ADC_Init+0x2cc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Init+0x2c6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	e018      	b.n	8003abc <HAL_ADC_Init+0x2f8>
 8003a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8e:	e015      	b.n	8003abc <HAL_ADC_Init+0x2f8>
 8003a90:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003a94:	e012      	b.n	8003abc <HAL_ADC_Init+0x2f8>
 8003a96:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003a9a:	e00f      	b.n	8003abc <HAL_ADC_Init+0x2f8>
 8003a9c:	20000074 	.word	0x20000074
 8003aa0:	431bde83 	.word	0x431bde83
 8003aa4:	50000100 	.word	0x50000100
 8003aa8:	50000300 	.word	0x50000300
 8003aac:	50000700 	.word	0x50000700
 8003ab0:	50000400 	.word	0x50000400
 8003ab4:	50000500 	.word	0x50000500
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d114      	bne.n	8003b00 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae4:	f023 0302 	bic.w	r3, r3, #2
 8003ae8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7e1b      	ldrb	r3, [r3, #24]
 8003aee:	039a      	lsls	r2, r3, #14
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003afc:	4313      	orrs	r3, r2
 8003afe:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HAL_ADC_Init+0x3bc>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f023 010f 	bic.w	r1, r3, #15
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
 8003b34:	e007      	b.n	8003b46 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 020f 	bic.w	r2, r2, #15
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f023 0303 	bic.w	r3, r3, #3
 8003b54:	f043 0201 	orr.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b5c:	e00a      	b.n	8003b74 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f023 0312 	bic.w	r3, r3, #18
 8003b66:	f043 0210 	orr.w	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3768      	adds	r7, #104	; 0x68
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	fff0c007 	.word	0xfff0c007

08003b84 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 8123 	bne.w	8003de6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_Start_IT+0x2a>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e11e      	b.n	8003dec <HAL_ADC_Start_IT+0x268>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 f81e 	bl	8004bf8 <ADC_Enable>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 810a 	bne.w	8003ddc <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADC_Start_IT+0x6c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a82      	ldr	r2, [pc, #520]	; (8003df4 <HAL_ADC_Start_IT+0x270>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d106      	bne.n	8003bfe <HAL_ADC_Start_IT+0x7a>
 8003bf0:	4b81      	ldr	r3, [pc, #516]	; (8003df8 <HAL_ADC_Start_IT+0x274>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_ADC_Start_IT+0x9a>
 8003bfc:	e005      	b.n	8003c0a <HAL_ADC_Start_IT+0x86>
 8003bfe:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <HAL_ADC_Start_IT+0x278>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_ADC_Start_IT+0x9a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c12:	d004      	beq.n	8003c1e <HAL_ADC_Start_IT+0x9a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a79      	ldr	r2, [pc, #484]	; (8003e00 <HAL_ADC_Start_IT+0x27c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d115      	bne.n	8003c4a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d036      	beq.n	8003ca6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c48:	e02d      	b.n	8003ca6 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5e:	d004      	beq.n	8003c6a <HAL_ADC_Start_IT+0xe6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a63      	ldr	r2, [pc, #396]	; (8003df4 <HAL_ADC_Start_IT+0x270>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10a      	bne.n	8003c80 <HAL_ADC_Start_IT+0xfc>
 8003c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e008      	b.n	8003c92 <HAL_ADC_Start_IT+0x10e>
 8003c80:	4b5f      	ldr	r3, [pc, #380]	; (8003e00 <HAL_ADC_Start_IT+0x27c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f023 0206 	bic.w	r2, r3, #6
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc0:	e002      	b.n	8003cc8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	221c      	movs	r2, #28
 8003cd6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d110      	bne.n	8003d02 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	605a      	str	r2, [r3, #4]
          break;
 8003d00:	e008      	b.n	8003d14 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 020c 	orr.w	r2, r2, #12
 8003d10:	605a      	str	r2, [r3, #4]
          break;
 8003d12:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d107      	bne.n	8003d2c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0210 	bic.w	r2, r2, #16
 8003d2a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d34:	d004      	beq.n	8003d40 <HAL_ADC_Start_IT+0x1bc>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2e      	ldr	r2, [pc, #184]	; (8003df4 <HAL_ADC_Start_IT+0x270>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d106      	bne.n	8003d4e <HAL_ADC_Start_IT+0x1ca>
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_ADC_Start_IT+0x274>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03e      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003d4c:	e005      	b.n	8003d5a <HAL_ADC_Start_IT+0x1d6>
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_ADC_Start_IT+0x278>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d037      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d62:	d004      	beq.n	8003d6e <HAL_ADC_Start_IT+0x1ea>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_ADC_Start_IT+0x270>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d106      	bne.n	8003d7c <HAL_ADC_Start_IT+0x1f8>
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <HAL_ADC_Start_IT+0x274>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d027      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003d7a:	e005      	b.n	8003d88 <HAL_ADC_Start_IT+0x204>
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <HAL_ADC_Start_IT+0x278>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d020      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d90:	d004      	beq.n	8003d9c <HAL_ADC_Start_IT+0x218>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_ADC_Start_IT+0x270>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d106      	bne.n	8003daa <HAL_ADC_Start_IT+0x226>
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_ADC_Start_IT+0x274>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	d010      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003da8:	e005      	b.n	8003db6 <HAL_ADC_Start_IT+0x232>
 8003daa:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_ADC_Start_IT+0x278>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d009      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dbe:	d004      	beq.n	8003dca <HAL_ADC_Start_IT+0x246>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <HAL_ADC_Start_IT+0x27c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10f      	bne.n	8003dea <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0204 	orr.w	r2, r2, #4
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	e006      	b.n	8003dea <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003de4:	e001      	b.n	8003dea <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
 8003de8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	50000100 	.word	0x50000100
 8003df8:	50000300 	.word	0x50000300
 8003dfc:	50000700 	.word	0x50000700
 8003e00:	50000400 	.word	0x50000400

08003e04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_IRQHandler+0x38>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80bc 	beq.w	8003fdc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80b6 	beq.w	8003fdc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e90:	d004      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x7c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a90      	ldr	r2, [pc, #576]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d106      	bne.n	8003eaa <HAL_ADC_IRQHandler+0x8a>
 8003e9c:	4b8f      	ldr	r3, [pc, #572]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d03e      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003ea8:	e005      	b.n	8003eb6 <HAL_ADC_IRQHandler+0x96>
 8003eaa:	4b8d      	ldr	r3, [pc, #564]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d037      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebe:	d004      	beq.n	8003eca <HAL_ADC_IRQHandler+0xaa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a84      	ldr	r2, [pc, #528]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d106      	bne.n	8003ed8 <HAL_ADC_IRQHandler+0xb8>
 8003eca:	4b84      	ldr	r3, [pc, #528]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d027      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003ed6:	e005      	b.n	8003ee4 <HAL_ADC_IRQHandler+0xc4>
 8003ed8:	4b81      	ldr	r3, [pc, #516]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d020      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eec:	d004      	beq.n	8003ef8 <HAL_ADC_IRQHandler+0xd8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a79      	ldr	r2, [pc, #484]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d106      	bne.n	8003f06 <HAL_ADC_IRQHandler+0xe6>
 8003ef8:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2b09      	cmp	r3, #9
 8003f02:	d010      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003f04:	e005      	b.n	8003f12 <HAL_ADC_IRQHandler+0xf2>
 8003f06:	4b76      	ldr	r3, [pc, #472]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2b09      	cmp	r3, #9
 8003f10:	d009      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1a:	d004      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x106>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a70      	ldr	r2, [pc, #448]	; (80040e4 <HAL_ADC_IRQHandler+0x2c4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d104      	bne.n	8003f30 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e00f      	b.n	8003f50 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f38:	d004      	beq.n	8003f44 <HAL_ADC_IRQHandler+0x124>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a66      	ldr	r2, [pc, #408]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d102      	bne.n	8003f4a <HAL_ADC_IRQHandler+0x12a>
 8003f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f48:	e000      	b.n	8003f4c <HAL_ADC_IRQHandler+0x12c>
 8003f4a:	4b66      	ldr	r3, [pc, #408]	; (80040e4 <HAL_ADC_IRQHandler+0x2c4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d137      	bne.n	8003fce <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d132      	bne.n	8003fce <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02d      	beq.n	8003fce <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d11a      	bne.n	8003fb6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 020c 	bic.w	r2, r2, #12
 8003f8e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d112      	bne.n	8003fce <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fb4:	e00b      	b.n	8003fce <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0210 	orr.w	r2, r3, #16
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f043 0201 	orr.w	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe faf4 	bl	80025bc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	220c      	movs	r2, #12
 8003fda:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <HAL_ADC_IRQHandler+0x1d0>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8138 	beq.w	800426c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8132 	beq.w	800426c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800401c:	d004      	beq.n	8004028 <HAL_ADC_IRQHandler+0x208>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d106      	bne.n	8004036 <HAL_ADC_IRQHandler+0x216>
 8004028:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2b00      	cmp	r3, #0
 8004032:	d03e      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 8004034:	e005      	b.n	8004042 <HAL_ADC_IRQHandler+0x222>
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2b00      	cmp	r3, #0
 8004040:	d037      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404a:	d004      	beq.n	8004056 <HAL_ADC_IRQHandler+0x236>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d106      	bne.n	8004064 <HAL_ADC_IRQHandler+0x244>
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2b05      	cmp	r3, #5
 8004060:	d027      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 8004062:	e005      	b.n	8004070 <HAL_ADC_IRQHandler+0x250>
 8004064:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2b05      	cmp	r3, #5
 800406e:	d020      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004078:	d004      	beq.n	8004084 <HAL_ADC_IRQHandler+0x264>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d106      	bne.n	8004092 <HAL_ADC_IRQHandler+0x272>
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_ADC_IRQHandler+0x2bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2b09      	cmp	r3, #9
 800408e:	d010      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 8004090:	e005      	b.n	800409e <HAL_ADC_IRQHandler+0x27e>
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_ADC_IRQHandler+0x2c0>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2b09      	cmp	r3, #9
 800409c:	d009      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040a6:	d004      	beq.n	80040b2 <HAL_ADC_IRQHandler+0x292>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_ADC_IRQHandler+0x2c4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d104      	bne.n	80040bc <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e018      	b.n	80040ee <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d004      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x2b0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <HAL_ADC_IRQHandler+0x2b8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10b      	bne.n	80040e8 <HAL_ADC_IRQHandler+0x2c8>
 80040d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040d4:	e009      	b.n	80040ea <HAL_ADC_IRQHandler+0x2ca>
 80040d6:	bf00      	nop
 80040d8:	50000100 	.word	0x50000100
 80040dc:	50000300 	.word	0x50000300
 80040e0:	50000700 	.word	0x50000700
 80040e4:	50000400 	.word	0x50000400
 80040e8:	4b92      	ldr	r3, [pc, #584]	; (8004334 <HAL_ADC_IRQHandler+0x514>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 80b0 	bne.w	800425e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	f040 80a3 	bne.w	800425e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 809d 	bne.w	800425e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8097 	beq.w	800425e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004138:	d004      	beq.n	8004144 <HAL_ADC_IRQHandler+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7e      	ldr	r2, [pc, #504]	; (8004338 <HAL_ADC_IRQHandler+0x518>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d106      	bne.n	8004152 <HAL_ADC_IRQHandler+0x332>
 8004144:	4b7d      	ldr	r3, [pc, #500]	; (800433c <HAL_ADC_IRQHandler+0x51c>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03e      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 8004150:	e005      	b.n	800415e <HAL_ADC_IRQHandler+0x33e>
 8004152:	4b7b      	ldr	r3, [pc, #492]	; (8004340 <HAL_ADC_IRQHandler+0x520>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2b00      	cmp	r3, #0
 800415c:	d037      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004166:	d004      	beq.n	8004172 <HAL_ADC_IRQHandler+0x352>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a72      	ldr	r2, [pc, #456]	; (8004338 <HAL_ADC_IRQHandler+0x518>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d106      	bne.n	8004180 <HAL_ADC_IRQHandler+0x360>
 8004172:	4b72      	ldr	r3, [pc, #456]	; (800433c <HAL_ADC_IRQHandler+0x51c>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2b06      	cmp	r3, #6
 800417c:	d027      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 800417e:	e005      	b.n	800418c <HAL_ADC_IRQHandler+0x36c>
 8004180:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <HAL_ADC_IRQHandler+0x520>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2b06      	cmp	r3, #6
 800418a:	d020      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004194:	d004      	beq.n	80041a0 <HAL_ADC_IRQHandler+0x380>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_ADC_IRQHandler+0x518>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d106      	bne.n	80041ae <HAL_ADC_IRQHandler+0x38e>
 80041a0:	4b66      	ldr	r3, [pc, #408]	; (800433c <HAL_ADC_IRQHandler+0x51c>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2b07      	cmp	r3, #7
 80041aa:	d010      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 80041ac:	e005      	b.n	80041ba <HAL_ADC_IRQHandler+0x39a>
 80041ae:	4b64      	ldr	r3, [pc, #400]	; (8004340 <HAL_ADC_IRQHandler+0x520>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2b07      	cmp	r3, #7
 80041b8:	d009      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c2:	d004      	beq.n	80041ce <HAL_ADC_IRQHandler+0x3ae>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5a      	ldr	r2, [pc, #360]	; (8004334 <HAL_ADC_IRQHandler+0x514>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d104      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e00f      	b.n	80041f8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e0:	d004      	beq.n	80041ec <HAL_ADC_IRQHandler+0x3cc>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a54      	ldr	r2, [pc, #336]	; (8004338 <HAL_ADC_IRQHandler+0x518>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d102      	bne.n	80041f2 <HAL_ADC_IRQHandler+0x3d2>
 80041ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041f0:	e000      	b.n	80041f4 <HAL_ADC_IRQHandler+0x3d4>
 80041f2:	4b50      	ldr	r3, [pc, #320]	; (8004334 <HAL_ADC_IRQHandler+0x514>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d12d      	bne.n	800425e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11a      	bne.n	8004246 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800421e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d112      	bne.n	800425e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
 8004244:	e00b      	b.n	800425e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0210 	orr.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8c4 	bl	80043ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2260      	movs	r2, #96	; 0x60
 800426a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d011      	beq.n	800429a <HAL_ADC_IRQHandler+0x47a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff fa85 	bl	800379c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_ADC_IRQHandler+0x4aa>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8aa 	bl	8004414 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042c8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d012      	beq.n	80042fa <HAL_ADC_IRQHandler+0x4da>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f89c 	bl	8004428 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d04f      	beq.n	80043a4 <HAL_ADC_IRQHandler+0x584>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0310 	and.w	r3, r3, #16
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04a      	beq.n	80043a4 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	e02d      	b.n	8004378 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004324:	d004      	beq.n	8004330 <HAL_ADC_IRQHandler+0x510>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a03      	ldr	r2, [pc, #12]	; (8004338 <HAL_ADC_IRQHandler+0x518>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d109      	bne.n	8004344 <HAL_ADC_IRQHandler+0x524>
 8004330:	4b02      	ldr	r3, [pc, #8]	; (800433c <HAL_ADC_IRQHandler+0x51c>)
 8004332:	e008      	b.n	8004346 <HAL_ADC_IRQHandler+0x526>
 8004334:	50000400 	.word	0x50000400
 8004338:	50000100 	.word	0x50000100
 800433c:	50000300 	.word	0x50000300
 8004340:	50000700 	.word	0x50000700
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_ADC_IRQHandler+0x5c8>)
 8004346:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2b00      	cmp	r3, #0
 8004352:	d109      	bne.n	8004368 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d10a      	bne.n	8004378 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8004362:	2301      	movs	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e007      	b.n	8004378 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d10e      	bne.n	800439c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff fa0a 	bl	80037b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2210      	movs	r2, #16
 80043a2:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <HAL_ADC_IRQHandler+0x5c0>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f043 0208 	orr.w	r2, r3, #8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043d8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f810 	bl	8004400 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80043e0:	bf00      	nop
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	50000700 	.word	0x50000700

080043ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b09b      	sub	sp, #108	; 0x6c
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0x22>
 800445a:	2302      	movs	r3, #2
 800445c:	e2ca      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x5b8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 82ae 	bne.w	80049d2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d81c      	bhi.n	80044b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	461a      	mov	r2, r3
 8004492:	231f      	movs	r3, #31
 8004494:	4093      	lsls	r3, r2
 8004496:	43db      	mvns	r3, r3
 8004498:	4019      	ands	r1, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa00 f203 	lsl.w	r2, r0, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
 80044b6:	e063      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d81e      	bhi.n	80044fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	3b1e      	subs	r3, #30
 80044d4:	221f      	movs	r2, #31
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	4019      	ands	r1, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	3b1e      	subs	r3, #30
 80044f0:	fa00 f203 	lsl.w	r2, r0, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34
 80044fc:	e040      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b0e      	cmp	r3, #14
 8004504:	d81e      	bhi.n	8004544 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	3b3c      	subs	r3, #60	; 0x3c
 800451a:	221f      	movs	r2, #31
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	4019      	ands	r1, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	3b3c      	subs	r3, #60	; 0x3c
 8004536:	fa00 f203 	lsl.w	r2, r0, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
 8004542:	e01d      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	3b5a      	subs	r3, #90	; 0x5a
 8004558:	221f      	movs	r2, #31
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	4019      	ands	r1, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4413      	add	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	3b5a      	subs	r3, #90	; 0x5a
 8004574:	fa00 f203 	lsl.w	r2, r0, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 80e5 	bne.w	800475a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b09      	cmp	r3, #9
 8004596:	d91c      	bls.n	80045d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	3b1e      	subs	r3, #30
 80045aa:	2207      	movs	r2, #7
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	4019      	ands	r1, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6898      	ldr	r0, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	3b1e      	subs	r3, #30
 80045c4:	fa00 f203 	lsl.w	r2, r0, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
 80045d0:	e019      	b.n	8004606 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6959      	ldr	r1, [r3, #20]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	2207      	movs	r2, #7
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	4019      	ands	r1, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6898      	ldr	r0, [r3, #8]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	fa00 f203 	lsl.w	r2, r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b03      	cmp	r3, #3
 8004626:	d84f      	bhi.n	80046c8 <HAL_ADC_ConfigChannel+0x28c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_ADC_ConfigChannel+0x1f4>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004641 	.word	0x08004641
 8004634:	08004663 	.word	0x08004663
 8004638:	08004685 	.word	0x08004685
 800463c:	080046a7 	.word	0x080046a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004646:	4b9a      	ldr	r3, [pc, #616]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 8004648:	4013      	ands	r3, r2
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	0691      	lsls	r1, r2, #26
 8004650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004652:	430a      	orrs	r2, r1
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004660:	e07e      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004668:	4b91      	ldr	r3, [pc, #580]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 800466a:	4013      	ands	r3, r2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	0691      	lsls	r1, r2, #26
 8004672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004674:	430a      	orrs	r2, r1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004680:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004682:	e06d      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800468a:	4b89      	ldr	r3, [pc, #548]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 800468c:	4013      	ands	r3, r2
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	0691      	lsls	r1, r2, #26
 8004694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004696:	430a      	orrs	r2, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80046a4:	e05c      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ac:	4b80      	ldr	r3, [pc, #512]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	0691      	lsls	r1, r2, #26
 80046b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046b8:	430a      	orrs	r2, r1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80046c6:	e04b      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800470e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004732:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	069b      	lsls	r3, r3, #26
 8004744:	429a      	cmp	r2, r3
 8004746:	d10a      	bne.n	800475e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004756:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004758:	e001      	b.n	800475e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
      break;
 800475e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x344>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x344>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_ADC_ConfigChannel+0x346>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8130 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d00f      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	400a      	ands	r2, r1
 80047aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80047ae:	e049      	b.n	8004844 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d91c      	bls.n	800480c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	3b1b      	subs	r3, #27
 80047e4:	2207      	movs	r2, #7
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	4019      	ands	r1, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6898      	ldr	r0, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	3b1b      	subs	r3, #27
 80047fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	619a      	str	r2, [r3, #24]
 800480a:	e01b      	b.n	8004844 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	2207      	movs	r2, #7
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	4019      	ands	r1, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6898      	ldr	r0, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	4613      	mov	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4413      	add	r3, r2
 8004838:	fa00 f203 	lsl.w	r2, r0, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d004      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x41c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_ADC_ConfigChannel+0x478>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x420>
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_ADC_ConfigChannel+0x47c>)
 800485a:	e000      	b.n	800485e <HAL_ADC_ConfigChannel+0x422>
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <HAL_ADC_ConfigChannel+0x480>)
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d105      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	d015      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004878:	2b11      	cmp	r3, #17
 800487a:	d105      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800488c:	2b12      	cmp	r3, #18
 800488e:	f040 80ab 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80a4 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a8:	d10a      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x484>
 80048aa:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <HAL_ADC_ConfigChannel+0x478>)
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e022      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048b0:	83fff000 	.word	0x83fff000
 80048b4:	50000100 	.word	0x50000100
 80048b8:	50000300 	.word	0x50000300
 80048bc:	50000700 	.word	0x50000700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <HAL_ADC_ConfigChannel+0x5c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d103      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x496>
 80048ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e011      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d102      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x4a6>
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e009      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a48      	ldr	r2, [pc, #288]	; (8004a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x4b6>
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4da>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4da>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_ADC_ConfigChannel+0x4dc>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d150      	bne.n	80049be <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800491c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_ADC_ConfigChannel+0x502>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_ADC_ConfigChannel+0x502>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_ADC_ConfigChannel+0x504>
 800493e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13c      	bne.n	80049be <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b10      	cmp	r3, #16
 800494a:	d11d      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x54c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004954:	d118      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800495e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004960:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_ADC_ConfigChannel+0x5d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_ADC_ConfigChannel+0x5d4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9a      	lsrs	r2, r3, #18
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004978:	e002      	b.n	8004980 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3b01      	subs	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f9      	bne.n	800497a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004986:	e02e      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b11      	cmp	r3, #17
 800498e:	d10b      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x56c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004998:	d106      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049a6:	e01e      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d11a      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049bc:	e013      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80049d0:	e00a      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80049e4:	e000      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	376c      	adds	r7, #108	; 0x6c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	50000100 	.word	0x50000100
 8004a04:	50000400 	.word	0x50000400
 8004a08:	50000500 	.word	0x50000500
 8004a0c:	20000074 	.word	0x20000074
 8004a10:	431bde83 	.word	0x431bde83

08004a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b099      	sub	sp, #100	; 0x64
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2c:	d102      	bne.n	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	e01a      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d103      	bne.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e011      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a67      	ldr	r2, [pc, #412]	; (8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a50:	4b66      	ldr	r3, [pc, #408]	; (8004bec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	e009      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a64      	ldr	r2, [pc, #400]	; (8004bec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d102      	bne.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	e001      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0b0      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0a9      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 808d 	bne.w	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8086 	bne.w	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab0:	d004      	beq.n	8004abc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4b      	ldr	r2, [pc, #300]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004abc:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004abe:	e000      	b.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004ac2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d040      	beq.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ade:	035b      	lsls	r3, r3, #13
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d108      	bne.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d15c      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004b2a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d14b      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b38:	f023 030f 	bic.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6811      	ldr	r1, [r2, #0]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b4c:	e03c      	b.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d108      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d123      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004b9c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d112      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb2:	e009      	b.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004bc6:	e000      	b.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3764      	adds	r7, #100	; 0x64
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	50000100 	.word	0x50000100
 8004be8:	50000400 	.word	0x50000400
 8004bec:	50000500 	.word	0x50000500
 8004bf0:	50000300 	.word	0x50000300
 8004bf4:	50000700 	.word	0x50000700

08004bf8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d108      	bne.n	8004c24 <ADC_Enable+0x2c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <ADC_Enable+0x2c>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <ADC_Enable+0x2e>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d143      	bne.n	8004cb2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <ADC_Enable+0xc4>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	f043 0210 	orr.w	r2, r3, #16
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e02f      	b.n	8004cb4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004c64:	f7fe fd8e 	bl	8003784 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c6a:	e01b      	b.n	8004ca4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c6c:	f7fe fd8a 	bl	8003784 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d914      	bls.n	8004ca4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d00d      	beq.n	8004ca4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0210 	orr.w	r2, r3, #16
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e007      	b.n	8004cb4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d1dc      	bne.n	8004c6c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	8000003f 	.word	0x8000003f

08004cc0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d108      	bne.n	8004cec <ADC_Disable+0x2c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <ADC_Disable+0x2c>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <ADC_Disable+0x2e>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d047      	beq.n	8004d82 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030d 	and.w	r3, r3, #13
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d10f      	bne.n	8004d20 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0202 	orr.w	r2, r2, #2
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2203      	movs	r2, #3
 8004d16:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004d18:	f7fe fd34 	bl	8003784 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d1e:	e029      	b.n	8004d74 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d30:	f043 0201 	orr.w	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e023      	b.n	8004d84 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d3c:	f7fe fd22 	bl	8003784 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d914      	bls.n	8004d74 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10d      	bne.n	8004d74 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	f043 0210 	orr.w	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e007      	b.n	8004d84 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d0dc      	beq.n	8004d3c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004da8:	4013      	ands	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	60d3      	str	r3, [r2, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <__NVIC_GetPriorityGrouping+0x18>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 0307 	and.w	r3, r3, #7
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db0b      	blt.n	8004e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4907      	ldr	r1, [pc, #28]	; (8004e28 <__NVIC_EnableIRQ+0x38>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2001      	movs	r0, #1
 8004e12:	fa00 f202 	lsl.w	r2, r0, r2
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	e000e100 	.word	0xe000e100

08004e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db0a      	blt.n	8004e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	490c      	ldr	r1, [pc, #48]	; (8004e78 <__NVIC_SetPriority+0x4c>)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e54:	e00a      	b.n	8004e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4908      	ldr	r1, [pc, #32]	; (8004e7c <__NVIC_SetPriority+0x50>)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	3b04      	subs	r3, #4
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	440b      	add	r3, r1
 8004e6a:	761a      	strb	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	; 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f1c3 0307 	rsb	r3, r3, #7
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	bf28      	it	cs
 8004e9e:	2304      	movcs	r3, #4
 8004ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d902      	bls.n	8004eb0 <NVIC_EncodePriority+0x30>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3b03      	subs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <NVIC_EncodePriority+0x32>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	43d9      	mvns	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed8:	4313      	orrs	r3, r2
         );
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	; 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef8:	d301      	bcc.n	8004efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004efa:	2301      	movs	r3, #1
 8004efc:	e00f      	b.n	8004f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004efe:	4a0a      	ldr	r2, [pc, #40]	; (8004f28 <SysTick_Config+0x40>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f06:	210f      	movs	r1, #15
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	f7ff ff8e 	bl	8004e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <SysTick_Config+0x40>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <SysTick_Config+0x40>)
 8004f18:	2207      	movs	r2, #7
 8004f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	e000e010 	.word	0xe000e010

08004f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff29 	bl	8004d8c <__NVIC_SetPriorityGrouping>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f54:	f7ff ff3e 	bl	8004dd4 <__NVIC_GetPriorityGrouping>
 8004f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f7ff ff8e 	bl	8004e80 <NVIC_EncodePriority>
 8004f64:	4602      	mov	r2, r0
 8004f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff ff5d 	bl	8004e2c <__NVIC_SetPriority>
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	4603      	mov	r3, r0
 8004f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff ff31 	bl	8004df0 <__NVIC_EnableIRQ>
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffa2 	bl	8004ee8 <SysTick_Config>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d008      	beq.n	8004fd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e020      	b.n	8005014 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 020e 	bic.w	r2, r2, #14
 8004fe0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8005000:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005032:	2b02      	cmp	r3, #2
 8005034:	d005      	beq.n	8005042 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
 8005040:	e027      	b.n	8005092 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 020e 	bic.w	r2, r2, #14
 8005050:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f202 	lsl.w	r2, r1, r2
 8005070:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
    } 
  }
  return status;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050aa:	e154      	b.n	8005356 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8146 	beq.w	8005350 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d005      	beq.n	80050dc <HAL_GPIO_Init+0x40>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d130      	bne.n	800513e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	2203      	movs	r2, #3
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43db      	mvns	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005112:	2201      	movs	r2, #1
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	43db      	mvns	r3, r3
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4013      	ands	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f003 0201 	and.w	r2, r3, #1
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b03      	cmp	r3, #3
 8005148:	d017      	beq.n	800517a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2203      	movs	r2, #3
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4013      	ands	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d123      	bne.n	80051ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	08da      	lsrs	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3208      	adds	r2, #8
 800518e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	220f      	movs	r2, #15
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3208      	adds	r2, #8
 80051c8:	6939      	ldr	r1, [r7, #16]
 80051ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2203      	movs	r2, #3
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0203 	and.w	r2, r3, #3
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80a0 	beq.w	8005350 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005210:	4b58      	ldr	r3, [pc, #352]	; (8005374 <HAL_GPIO_Init+0x2d8>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4a57      	ldr	r2, [pc, #348]	; (8005374 <HAL_GPIO_Init+0x2d8>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6193      	str	r3, [r2, #24]
 800521c:	4b55      	ldr	r3, [pc, #340]	; (8005374 <HAL_GPIO_Init+0x2d8>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005228:	4a53      	ldr	r2, [pc, #332]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	3302      	adds	r3, #2
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	220f      	movs	r2, #15
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005252:	d019      	beq.n	8005288 <HAL_GPIO_Init+0x1ec>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a49      	ldr	r2, [pc, #292]	; (800537c <HAL_GPIO_Init+0x2e0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_GPIO_Init+0x1e8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a48      	ldr	r2, [pc, #288]	; (8005380 <HAL_GPIO_Init+0x2e4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00d      	beq.n	8005280 <HAL_GPIO_Init+0x1e4>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a47      	ldr	r2, [pc, #284]	; (8005384 <HAL_GPIO_Init+0x2e8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <HAL_GPIO_Init+0x1e0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a46      	ldr	r2, [pc, #280]	; (8005388 <HAL_GPIO_Init+0x2ec>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_GPIO_Init+0x1dc>
 8005274:	2304      	movs	r3, #4
 8005276:	e008      	b.n	800528a <HAL_GPIO_Init+0x1ee>
 8005278:	2305      	movs	r3, #5
 800527a:	e006      	b.n	800528a <HAL_GPIO_Init+0x1ee>
 800527c:	2303      	movs	r3, #3
 800527e:	e004      	b.n	800528a <HAL_GPIO_Init+0x1ee>
 8005280:	2302      	movs	r3, #2
 8005282:	e002      	b.n	800528a <HAL_GPIO_Init+0x1ee>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <HAL_GPIO_Init+0x1ee>
 8005288:	2300      	movs	r3, #0
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	f002 0203 	and.w	r2, r2, #3
 8005290:	0092      	lsls	r2, r2, #2
 8005292:	4093      	lsls	r3, r2
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800529a:	4937      	ldr	r1, [pc, #220]	; (8005378 <HAL_GPIO_Init+0x2dc>)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	089b      	lsrs	r3, r3, #2
 80052a0:	3302      	adds	r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052a8:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_GPIO_Init+0x2f0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052cc:	4a2f      	ldr	r2, [pc, #188]	; (800538c <HAL_GPIO_Init+0x2f0>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052d2:	4b2e      	ldr	r3, [pc, #184]	; (800538c <HAL_GPIO_Init+0x2f0>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	43db      	mvns	r3, r3
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4013      	ands	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052f6:	4a25      	ldr	r2, [pc, #148]	; (800538c <HAL_GPIO_Init+0x2f0>)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_GPIO_Init+0x2f0>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	43db      	mvns	r3, r3
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_GPIO_Init+0x2f0>)
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_GPIO_Init+0x2f0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	43db      	mvns	r3, r3
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4013      	ands	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800534a:	4a10      	ldr	r2, [pc, #64]	; (800538c <HAL_GPIO_Init+0x2f0>)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	3301      	adds	r3, #1
 8005354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	f47f aea3 	bne.w	80050ac <HAL_GPIO_Init+0x10>
  }
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40021000 	.word	0x40021000
 8005378:	40010000 	.word	0x40010000
 800537c:	48000400 	.word	0x48000400
 8005380:	48000800 	.word	0x48000800
 8005384:	48000c00 	.word	0x48000c00
 8005388:	48001000 	.word	0x48001000
 800538c:	40010400 	.word	0x40010400

08005390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	807b      	strh	r3, [r7, #2]
 800539c:	4613      	mov	r3, r2
 800539e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053a0:	787b      	ldrb	r3, [r7, #1]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053a6:	887a      	ldrh	r2, [r7, #2]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053ac:	e002      	b.n	80053b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ae:	887a      	ldrh	r2, [r7, #2]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	041a      	lsls	r2, r3, #16
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	43d9      	mvns	r1, r3
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	400b      	ands	r3, r1
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	619a      	str	r2, [r3, #24]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80053fe:	4b08      	ldr	r3, [pc, #32]	; (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d006      	beq.n	8005418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800540a:	4a05      	ldr	r2, [pc, #20]	; (8005420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fc fe56 	bl	80020c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40010400 	.word	0x40010400

08005424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e081      	b.n	800553a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fd fd46 	bl	8002edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	e006      	b.n	80054ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d104      	bne.n	80054be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69d9      	ldr	r1, [r3, #28]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b20      	cmp	r3, #32
 8005556:	d138      	bne.n	80055ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005562:	2302      	movs	r3, #2
 8005564:	e032      	b.n	80055cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2224      	movs	r2, #36	; 0x24
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005594:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d139      	bne.n	8005662 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e033      	b.n	8005664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800562a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	021b      	lsls	r3, r3, #8
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	e000      	b.n	8005664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005672:	b08b      	sub	sp, #44	; 0x2c
 8005674:	af06      	add	r7, sp, #24
 8005676:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0c4      	b.n	800580c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd fe62 	bl	8003360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2203      	movs	r2, #3
 80056a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f004 fcef 	bl	800a08c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	e040      	b.n	8005736 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	440b      	add	r3, r1
 80056c4:	3301      	adds	r3, #1
 80056c6:	2201      	movs	r2, #1
 80056c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	440b      	add	r3, r1
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	440b      	add	r3, r1
 80056ee:	3303      	adds	r3, #3
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	440b      	add	r3, r1
 8005702:	3338      	adds	r3, #56	; 0x38
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005708:	7bfa      	ldrb	r2, [r7, #15]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	440b      	add	r3, r1
 8005716:	333c      	adds	r3, #60	; 0x3c
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	440b      	add	r3, r1
 800572a:	3340      	adds	r3, #64	; 0x40
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3301      	adds	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d3b9      	bcc.n	80056b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e044      	b.n	80057d0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	440b      	add	r3, r1
 8005754:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800575c:	7bfa      	ldrb	r2, [r7, #15]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	440b      	add	r3, r1
 800576a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800576e:	7bfa      	ldrb	r2, [r7, #15]
 8005770:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	440b      	add	r3, r1
 8005780:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	440b      	add	r3, r1
 8005796:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	440b      	add	r3, r1
 80057ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057b4:	7bfa      	ldrb	r2, [r7, #15]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	3301      	adds	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	7bfa      	ldrb	r2, [r7, #15]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d3b5      	bcc.n	8005746 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	687e      	ldr	r6, [r7, #4]
 80057e2:	466d      	mov	r5, sp
 80057e4:	f106 0410 	add.w	r4, r6, #16
 80057e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	1d33      	adds	r3, r6, #4
 80057f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057f4:	6838      	ldr	r0, [r7, #0]
 80057f6:	f004 fc64 	bl	800a0c2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800581a:	af00      	add	r7, sp, #0
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005824:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f001 b823 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800583a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 817d 	beq.w	8005b4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005850:	4bbc      	ldr	r3, [pc, #752]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b04      	cmp	r3, #4
 800585a:	d00c      	beq.n	8005876 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800585c:	4bb9      	ldr	r3, [pc, #740]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 030c 	and.w	r3, r3, #12
 8005864:	2b08      	cmp	r3, #8
 8005866:	d15c      	bne.n	8005922 <HAL_RCC_OscConfig+0x10e>
 8005868:	4bb6      	ldr	r3, [pc, #728]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005874:	d155      	bne.n	8005922 <HAL_RCC_OscConfig+0x10e>
 8005876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800587a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005882:	fa93 f3a3 	rbit	r3, r3
 8005886:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800588a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588e:	fab3 f383 	clz	r3, r3
 8005892:	b2db      	uxtb	r3, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <HAL_RCC_OscConfig+0x94>
 80058a2:	4ba8      	ldr	r3, [pc, #672]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	e015      	b.n	80058d4 <HAL_RCC_OscConfig+0xc0>
 80058a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80058bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80058c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80058d0:	4b9c      	ldr	r3, [pc, #624]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058d8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80058dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80058e0:	fa92 f2a2 	rbit	r2, r2
 80058e4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80058e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80058ec:	fab2 f282 	clz	r2, r2
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	f042 0220 	orr.w	r2, r2, #32
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	f002 021f 	and.w	r2, r2, #31
 80058fc:	2101      	movs	r1, #1
 80058fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 811f 	beq.w	8005b48 <HAL_RCC_OscConfig+0x334>
 800590a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8116 	bne.w	8005b48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	f000 bfaf 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x12e>
 8005934:	4b83      	ldr	r3, [pc, #524]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a82      	ldr	r2, [pc, #520]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800593a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e036      	b.n	80059b0 <HAL_RCC_OscConfig+0x19c>
 8005942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_RCC_OscConfig+0x158>
 8005952:	4b7c      	ldr	r3, [pc, #496]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a7b      	ldr	r2, [pc, #492]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4b79      	ldr	r3, [pc, #484]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a78      	ldr	r2, [pc, #480]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e021      	b.n	80059b0 <HAL_RCC_OscConfig+0x19c>
 800596c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800597c:	d10c      	bne.n	8005998 <HAL_RCC_OscConfig+0x184>
 800597e:	4b71      	ldr	r3, [pc, #452]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a70      	ldr	r2, [pc, #448]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a6d      	ldr	r2, [pc, #436]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e00b      	b.n	80059b0 <HAL_RCC_OscConfig+0x19c>
 8005998:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a69      	ldr	r2, [pc, #420]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 800599e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a66      	ldr	r2, [pc, #408]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80059aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059b0:	4b64      	ldr	r3, [pc, #400]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f023 020f 	bic.w	r2, r3, #15
 80059b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	495f      	ldr	r1, [pc, #380]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d059      	beq.n	8005a8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059da:	f7fd fed3 	bl	8003784 <HAL_GetTick>
 80059de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e4:	f7fd fece 	bl	8003784 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d902      	bls.n	80059fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	f000 bf43 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 80059fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059fe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005a06:	fa93 f3a3 	rbit	r3, r3
 8005a0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a12:	fab3 f383 	clz	r3, r3
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d102      	bne.n	8005a2c <HAL_RCC_OscConfig+0x218>
 8005a26:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	e015      	b.n	8005a58 <HAL_RCC_OscConfig+0x244>
 8005a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005a48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005a4c:	fa93 f3a3 	rbit	r3, r3
 8005a50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005a54:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005a60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005a64:	fa92 f2a2 	rbit	r2, r2
 8005a68:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005a6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005a70:	fab2 f282 	clz	r2, r2
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	f042 0220 	orr.w	r2, r2, #32
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	f002 021f 	and.w	r2, r2, #31
 8005a80:	2101      	movs	r1, #1
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0ab      	beq.n	80059e4 <HAL_RCC_OscConfig+0x1d0>
 8005a8c:	e05d      	b.n	8005b4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fe79 	bl	8003784 <HAL_GetTick>
 8005a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a98:	f7fd fe74 	bl	8003784 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b64      	cmp	r3, #100	; 0x64
 8005aa6:	d902      	bls.n	8005aae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	f000 bee9 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 8005aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ab2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005aba:	fa93 f3a3 	rbit	r3, r3
 8005abe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac6:	fab3 f383 	clz	r3, r3
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d102      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x2cc>
 8005ada:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	e015      	b.n	8005b0c <HAL_RCC_OscConfig+0x2f8>
 8005ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ae4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005aec:	fa93 f3a3 	rbit	r3, r3
 8005af0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005af8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005afc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <HAL_RCC_OscConfig+0x330>)
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005b14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005b18:	fa92 f2a2 	rbit	r2, r2
 8005b1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005b20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005b24:	fab2 f282 	clz	r2, r2
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	f042 0220 	orr.w	r2, r2, #32
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	f002 021f 	and.w	r2, r2, #31
 8005b34:	2101      	movs	r1, #1
 8005b36:	fa01 f202 	lsl.w	r2, r1, r2
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ab      	bne.n	8005a98 <HAL_RCC_OscConfig+0x284>
 8005b40:	e003      	b.n	8005b4a <HAL_RCC_OscConfig+0x336>
 8005b42:	bf00      	nop
 8005b44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 817d 	beq.w	8005e5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005b60:	4ba6      	ldr	r3, [pc, #664]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005b6c:	4ba3      	ldr	r3, [pc, #652]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 030c 	and.w	r3, r3, #12
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d172      	bne.n	8005c5e <HAL_RCC_OscConfig+0x44a>
 8005b78:	4ba0      	ldr	r3, [pc, #640]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d16c      	bne.n	8005c5e <HAL_RCC_OscConfig+0x44a>
 8005b84:	2302      	movs	r3, #2
 8005b86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005b8e:	fa93 f3a3 	rbit	r3, r3
 8005b92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005b96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d102      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x3a0>
 8005bae:	4b93      	ldr	r3, [pc, #588]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	e013      	b.n	8005bdc <HAL_RCC_OscConfig+0x3c8>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005bd0:	fa93 f3a3 	rbit	r3, r3
 8005bd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005bd8:	4b88      	ldr	r3, [pc, #544]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005be2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005be6:	fa92 f2a2 	rbit	r2, r2
 8005bea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005bee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005bf2:	fab2 f282 	clz	r2, r2
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f042 0220 	orr.w	r2, r2, #32
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	f002 021f 	and.w	r2, r2, #31
 8005c02:	2101      	movs	r1, #1
 8005c04:	fa01 f202 	lsl.w	r2, r1, r2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_RCC_OscConfig+0x410>
 8005c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d002      	beq.n	8005c24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f000 be2e 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b75      	ldr	r3, [pc, #468]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	21f8      	movs	r1, #248	; 0xf8
 8005c3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005c42:	fa91 f1a1 	rbit	r1, r1
 8005c46:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005c4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005c4e:	fab1 f181 	clz	r1, r1
 8005c52:	b2c9      	uxtb	r1, r1
 8005c54:	408b      	lsls	r3, r1
 8005c56:	4969      	ldr	r1, [pc, #420]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5c:	e0fd      	b.n	8005e5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8088 	beq.w	8005d80 <HAL_RCC_OscConfig+0x56c>
 8005c70:	2301      	movs	r3, #1
 8005c72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c7a:	fa93 f3a3 	rbit	r3, r3
 8005c7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005c82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	461a      	mov	r2, r3
 8005c98:	2301      	movs	r3, #1
 8005c9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd fd72 	bl	8003784 <HAL_GetTick>
 8005ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fd fd6d 	bl	8003784 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	f000 bde2 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005cce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d102      	bne.n	8005cec <HAL_RCC_OscConfig+0x4d8>
 8005ce6:	4b45      	ldr	r3, [pc, #276]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	e013      	b.n	8005d14 <HAL_RCC_OscConfig+0x500>
 8005cec:	2302      	movs	r3, #2
 8005cee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005cfe:	2302      	movs	r3, #2
 8005d00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005d04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005d08:	fa93 f3a3 	rbit	r3, r3
 8005d0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005d10:	4b3a      	ldr	r3, [pc, #232]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2202      	movs	r2, #2
 8005d16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005d1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005d1e:	fa92 f2a2 	rbit	r2, r2
 8005d22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005d26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005d2a:	fab2 f282 	clz	r2, r2
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	f042 0220 	orr.w	r2, r2, #32
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	f002 021f 	and.w	r2, r2, #31
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0af      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	21f8      	movs	r1, #248	; 0xf8
 8005d5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005d64:	fa91 f1a1 	rbit	r1, r1
 8005d68:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005d6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005d70:	fab1 f181 	clz	r1, r1
 8005d74:	b2c9      	uxtb	r1, r1
 8005d76:	408b      	lsls	r3, r1
 8005d78:	4920      	ldr	r1, [pc, #128]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]
 8005d7e:	e06c      	b.n	8005e5a <HAL_RCC_OscConfig+0x646>
 8005d80:	2301      	movs	r3, #1
 8005d82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005d8a:	fa93 f3a3 	rbit	r3, r3
 8005d8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d96:	fab3 f383 	clz	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005da0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	461a      	mov	r2, r3
 8005da8:	2300      	movs	r3, #0
 8005daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dac:	f7fd fcea 	bl	8003784 <HAL_GetTick>
 8005db0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005db4:	e00a      	b.n	8005dcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fd fce5 	bl	8003784 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d902      	bls.n	8005dcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f000 bd5a 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dd6:	fa93 f3a3 	rbit	r3, r3
 8005dda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	fab3 f383 	clz	r3, r3
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d104      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5ec>
 8005df6:	4b01      	ldr	r3, [pc, #4]	; (8005dfc <HAL_RCC_OscConfig+0x5e8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	e015      	b.n	8005e28 <HAL_RCC_OscConfig+0x614>
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	2302      	movs	r3, #2
 8005e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e0a:	fa93 f3a3 	rbit	r3, r3
 8005e0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e12:	2302      	movs	r3, #2
 8005e14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005e1c:	fa93 f3a3 	rbit	r3, r3
 8005e20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e24:	4bc8      	ldr	r3, [pc, #800]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005e2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005e32:	fa92 f2a2 	rbit	r2, r2
 8005e36:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005e3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005e3e:	fab2 f282 	clz	r2, r2
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	f042 0220 	orr.w	r2, r2, #32
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	f002 021f 	and.w	r2, r2, #31
 8005e4e:	2101      	movs	r1, #1
 8005e50:	fa01 f202 	lsl.w	r2, r1, r2
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1ad      	bne.n	8005db6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8110 	beq.w	8006090 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d079      	beq.n	8005f74 <HAL_RCC_OscConfig+0x760>
 8005e80:	2301      	movs	r3, #1
 8005e82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e8a:	fa93 f3a3 	rbit	r3, r3
 8005e8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4bab      	ldr	r3, [pc, #684]	; (800614c <HAL_RCC_OscConfig+0x938>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eaa:	f7fd fc6b 	bl	8003784 <HAL_GetTick>
 8005eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb4:	f7fd fc66 	bl	8003784 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d902      	bls.n	8005eca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	f000 bcdb 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ed4:	fa93 f3a3 	rbit	r3, r3
 8005ed8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	fa93 f2a3 	rbit	r2, r3
 8005ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	2202      	movs	r2, #2
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	fa93 f2a3 	rbit	r2, r3
 8005f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f24:	4b88      	ldr	r3, [pc, #544]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 8005f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f30:	2102      	movs	r1, #2
 8005f32:	6019      	str	r1, [r3, #0]
 8005f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	fa93 f1a3 	rbit	r1, r3
 8005f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005f4a:	6019      	str	r1, [r3, #0]
  return result;
 8005f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f50:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 031f 	and.w	r3, r3, #31
 8005f66:	2101      	movs	r1, #1
 8005f68:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0a0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x6a0>
 8005f72:	e08d      	b.n	8006090 <HAL_RCC_OscConfig+0x87c>
 8005f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	fa93 f2a3 	rbit	r2, r3
 8005f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f96:	601a      	str	r2, [r3, #0]
  return result;
 8005f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005fa0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa2:	fab3 f383 	clz	r3, r3
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4b68      	ldr	r3, [pc, #416]	; (800614c <HAL_RCC_OscConfig+0x938>)
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd fbe5 	bl	8003784 <HAL_GetTick>
 8005fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbe:	e00a      	b.n	8005fd6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc0:	f7fd fbe0 	bl	8003784 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d902      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	f000 bc55 	b.w	8006880 <HAL_RCC_OscConfig+0x106c>
 8005fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fda:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005fde:	2202      	movs	r2, #2
 8005fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	fa93 f2a3 	rbit	r2, r3
 8005ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ff4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ffe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006002:	2202      	movs	r2, #2
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	fa93 f2a3 	rbit	r2, r3
 8006014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006026:	2202      	movs	r2, #2
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	fa93 f2a3 	rbit	r2, r3
 8006038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006042:	4b41      	ldr	r3, [pc, #260]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 8006044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800604e:	2102      	movs	r1, #2
 8006050:	6019      	str	r1, [r3, #0]
 8006052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006056:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	fa93 f1a3 	rbit	r1, r3
 8006060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006064:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006068:	6019      	str	r1, [r3, #0]
  return result;
 800606a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800606e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f303 	lsl.w	r3, r1, r3
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d197      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 81a1 	beq.w	80063e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d116      	bne.n	80060e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 80060be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c2:	61d3      	str	r3, [r2, #28]
 80060c4:	4b20      	ldr	r3, [pc, #128]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80060cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80060de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e6:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <HAL_RCC_OscConfig+0x93c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11a      	bne.n	8006128 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <HAL_RCC_OscConfig+0x93c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_RCC_OscConfig+0x93c>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060fe:	f7fd fb41 	bl	8003784 <HAL_GetTick>
 8006102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006106:	e009      	b.n	800611c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006108:	f7fd fb3c 	bl	8003784 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b64      	cmp	r3, #100	; 0x64
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e3b1      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <HAL_RCC_OscConfig+0x93c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0ef      	beq.n	8006108 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10d      	bne.n	8006154 <HAL_RCC_OscConfig+0x940>
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	4a02      	ldr	r2, [pc, #8]	; (8006148 <HAL_RCC_OscConfig+0x934>)
 800613e:	f043 0301 	orr.w	r3, r3, #1
 8006142:	6213      	str	r3, [r2, #32]
 8006144:	e03c      	b.n	80061c0 <HAL_RCC_OscConfig+0x9ac>
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
 800614c:	10908120 	.word	0x10908120
 8006150:	40007000 	.word	0x40007000
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10c      	bne.n	800617e <HAL_RCC_OscConfig+0x96a>
 8006164:	4bc1      	ldr	r3, [pc, #772]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	4ac0      	ldr	r2, [pc, #768]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	6213      	str	r3, [r2, #32]
 8006170:	4bbe      	ldr	r3, [pc, #760]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	4abd      	ldr	r2, [pc, #756]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006176:	f023 0304 	bic.w	r3, r3, #4
 800617a:	6213      	str	r3, [r2, #32]
 800617c:	e020      	b.n	80061c0 <HAL_RCC_OscConfig+0x9ac>
 800617e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b05      	cmp	r3, #5
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x994>
 800618e:	4bb7      	ldr	r3, [pc, #732]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	4ab6      	ldr	r2, [pc, #728]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006194:	f043 0304 	orr.w	r3, r3, #4
 8006198:	6213      	str	r3, [r2, #32]
 800619a:	4bb4      	ldr	r3, [pc, #720]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	4ab3      	ldr	r2, [pc, #716]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	6213      	str	r3, [r2, #32]
 80061a6:	e00b      	b.n	80061c0 <HAL_RCC_OscConfig+0x9ac>
 80061a8:	4bb0      	ldr	r3, [pc, #704]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	4aaf      	ldr	r2, [pc, #700]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	6213      	str	r3, [r2, #32]
 80061b4:	4bad      	ldr	r3, [pc, #692]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	4aac      	ldr	r2, [pc, #688]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8081 	beq.w	80062d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d2:	f7fd fad7 	bl	8003784 <HAL_GetTick>
 80061d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061da:	e00b      	b.n	80061f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061dc:	f7fd fad2 	bl	8003784 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e345      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
 80061f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80061fc:	2202      	movs	r2, #2
 80061fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006204:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	fa93 f2a3 	rbit	r2, r3
 800620e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006212:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006220:	2202      	movs	r2, #2
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006228:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	fa93 f2a3 	rbit	r2, r3
 8006232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006236:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800623a:	601a      	str	r2, [r3, #0]
  return result;
 800623c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006240:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006244:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006246:	fab3 f383 	clz	r3, r3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d102      	bne.n	8006260 <HAL_RCC_OscConfig+0xa4c>
 800625a:	4b84      	ldr	r3, [pc, #528]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	e013      	b.n	8006288 <HAL_RCC_OscConfig+0xa74>
 8006260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006264:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006268:	2202      	movs	r2, #2
 800626a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800626c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006270:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	fa93 f2a3 	rbit	r2, r3
 800627a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800627e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b79      	ldr	r3, [pc, #484]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800628c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006290:	2102      	movs	r1, #2
 8006292:	6011      	str	r1, [r2, #0]
 8006294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006298:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	fa92 f1a2 	rbit	r1, r2
 80062a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80062aa:	6011      	str	r1, [r2, #0]
  return result;
 80062ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80062b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80062b4:	6812      	ldr	r2, [r2, #0]
 80062b6:	fab2 f282 	clz	r2, r2
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	f002 021f 	and.w	r2, r2, #31
 80062c6:	2101      	movs	r1, #1
 80062c8:	fa01 f202 	lsl.w	r2, r1, r2
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d084      	beq.n	80061dc <HAL_RCC_OscConfig+0x9c8>
 80062d2:	e07f      	b.n	80063d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d4:	f7fd fa56 	bl	8003784 <HAL_GetTick>
 80062d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062dc:	e00b      	b.n	80062f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062de:	f7fd fa51 	bl	8003784 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e2c4      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
 80062f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80062fe:	2202      	movs	r2, #2
 8006300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006306:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	fa93 f2a3 	rbit	r2, r3
 8006310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006314:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800631e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006322:	2202      	movs	r2, #2
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800632a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	fa93 f2a3 	rbit	r2, r3
 8006334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006338:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800633c:	601a      	str	r2, [r3, #0]
  return result;
 800633e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006342:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	b2db      	uxtb	r3, r3
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	b2db      	uxtb	r3, r3
 8006352:	f043 0302 	orr.w	r3, r3, #2
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d102      	bne.n	8006362 <HAL_RCC_OscConfig+0xb4e>
 800635c:	4b43      	ldr	r3, [pc, #268]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	e013      	b.n	800638a <HAL_RCC_OscConfig+0xb76>
 8006362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006366:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800636a:	2202      	movs	r2, #2
 800636c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006372:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	fa93 f2a3 	rbit	r2, r3
 800637c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006380:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	4b39      	ldr	r3, [pc, #228]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800638e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006392:	2102      	movs	r1, #2
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800639a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	fa92 f1a2 	rbit	r1, r2
 80063a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80063ac:	6011      	str	r1, [r2, #0]
  return result;
 80063ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	fab2 f282 	clz	r2, r2
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	f002 021f 	and.w	r2, r2, #31
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f202 	lsl.w	r2, r1, r2
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d184      	bne.n	80062de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d105      	bne.n	80063e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80063e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8242 	beq.w	800687e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063fa:	4b1c      	ldr	r3, [pc, #112]	; (800646c <HAL_RCC_OscConfig+0xc58>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b08      	cmp	r3, #8
 8006404:	f000 8213 	beq.w	800682e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800640c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	2b02      	cmp	r3, #2
 8006416:	f040 8162 	bne.w	80066de <HAL_RCC_OscConfig+0xeca>
 800641a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006422:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800642c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	fa93 f2a3 	rbit	r2, r3
 8006436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800643a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800643e:	601a      	str	r2, [r3, #0]
  return result;
 8006440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006444:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006448:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644a:	fab3 f383 	clz	r3, r3
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006454:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	461a      	mov	r2, r3
 800645c:	2300      	movs	r3, #0
 800645e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006460:	f7fd f990 	bl	8003784 <HAL_GetTick>
 8006464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006468:	e00c      	b.n	8006484 <HAL_RCC_OscConfig+0xc70>
 800646a:	bf00      	nop
 800646c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006470:	f7fd f988 	bl	8003784 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1fd      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
 8006484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006488:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800648c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006496:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	fa93 f2a3 	rbit	r2, r3
 80064a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80064a8:	601a      	str	r2, [r3, #0]
  return result;
 80064aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80064b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_RCC_OscConfig+0xcba>
 80064c8:	4bb0      	ldr	r3, [pc, #704]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	e027      	b.n	800651e <HAL_RCC_OscConfig+0xd0a>
 80064ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80064d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	fa93 f2a3 	rbit	r2, r3
 80064ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80064fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006506:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	fa93 f2a3 	rbit	r2, r3
 8006510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006514:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	4b9c      	ldr	r3, [pc, #624]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006522:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006526:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800652a:	6011      	str	r1, [r2, #0]
 800652c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006530:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	fa92 f1a2 	rbit	r1, r2
 800653a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800653e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006542:	6011      	str	r1, [r2, #0]
  return result;
 8006544:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006548:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	fab2 f282 	clz	r2, r2
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	f042 0220 	orr.w	r2, r2, #32
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	f002 021f 	and.w	r2, r2, #31
 800655e:	2101      	movs	r1, #1
 8006560:	fa01 f202 	lsl.w	r2, r1, r2
 8006564:	4013      	ands	r3, r2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d182      	bne.n	8006470 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800656a:	4b88      	ldr	r3, [pc, #544]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800657e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	430b      	orrs	r3, r1
 800658c:	497f      	ldr	r1, [pc, #508]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 800658e:	4313      	orrs	r3, r2
 8006590:	604b      	str	r3, [r1, #4]
 8006592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006596:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800659a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800659e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	fa93 f2a3 	rbit	r2, r3
 80065ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80065b6:	601a      	str	r2, [r3, #0]
  return result;
 80065b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80065c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c2:	fab3 f383 	clz	r3, r3
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	461a      	mov	r2, r3
 80065d4:	2301      	movs	r3, #1
 80065d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d8:	f7fd f8d4 	bl	8003784 <HAL_GetTick>
 80065dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065e0:	e009      	b.n	80065f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e2:	f7fd f8cf 	bl	8003784 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e144      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
 80065f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80065fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006608:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	fa93 f2a3 	rbit	r2, r3
 8006612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006616:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800661a:	601a      	str	r2, [r3, #0]
  return result;
 800661c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006620:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006624:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006626:	fab3 f383 	clz	r3, r3
 800662a:	b2db      	uxtb	r3, r3
 800662c:	095b      	lsrs	r3, r3, #5
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d102      	bne.n	8006640 <HAL_RCC_OscConfig+0xe2c>
 800663a:	4b54      	ldr	r3, [pc, #336]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	e027      	b.n	8006690 <HAL_RCC_OscConfig+0xe7c>
 8006640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006644:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800664c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006652:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	fa93 f2a3 	rbit	r2, r3
 800665c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006660:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800666e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006678:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	fa93 f2a3 	rbit	r2, r3
 8006682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006686:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	4b3f      	ldr	r3, [pc, #252]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006694:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006698:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800669c:	6011      	str	r1, [r2, #0]
 800669e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	fa92 f1a2 	rbit	r1, r2
 80066ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80066b4:	6011      	str	r1, [r2, #0]
  return result;
 80066b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	fab2 f282 	clz	r2, r2
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	f042 0220 	orr.w	r2, r2, #32
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	f002 021f 	and.w	r2, r2, #31
 80066d0:	2101      	movs	r1, #1
 80066d2:	fa01 f202 	lsl.w	r2, r1, r2
 80066d6:	4013      	ands	r3, r2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d082      	beq.n	80065e2 <HAL_RCC_OscConfig+0xdce>
 80066dc:	e0cf      	b.n	800687e <HAL_RCC_OscConfig+0x106a>
 80066de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80066e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	fa93 f2a3 	rbit	r2, r3
 80066fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006702:	601a      	str	r2, [r3, #0]
  return result;
 8006704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006708:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800670c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fd f82e 	bl	8003784 <HAL_GetTick>
 8006728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800672c:	e009      	b.n	8006742 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672e:	f7fd f829 	bl	8003784 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e09e      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
 8006742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006746:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800674a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800674e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006754:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	fa93 f2a3 	rbit	r2, r3
 800675e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006762:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006766:	601a      	str	r2, [r3, #0]
  return result;
 8006768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800676c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006772:	fab3 f383 	clz	r3, r3
 8006776:	b2db      	uxtb	r3, r3
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d104      	bne.n	8006790 <HAL_RCC_OscConfig+0xf7c>
 8006786:	4b01      	ldr	r3, [pc, #4]	; (800678c <HAL_RCC_OscConfig+0xf78>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	e029      	b.n	80067e0 <HAL_RCC_OscConfig+0xfcc>
 800678c:	40021000 	.word	0x40021000
 8006790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006794:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800679c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	fa93 f2a3 	rbit	r2, r3
 80067ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80067be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	fa93 f2a3 	rbit	r2, r3
 80067d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	4b2b      	ldr	r3, [pc, #172]	; (800688c <HAL_RCC_OscConfig+0x1078>)
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80067e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80067ec:	6011      	str	r1, [r2, #0]
 80067ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	fa92 f1a2 	rbit	r1, r2
 80067fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006800:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006804:	6011      	str	r1, [r2, #0]
  return result;
 8006806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800680a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	fab2 f282 	clz	r2, r2
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	f042 0220 	orr.w	r2, r2, #32
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	f002 021f 	and.w	r2, r2, #31
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f202 	lsl.w	r2, r1, r2
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d180      	bne.n	800672e <HAL_RCC_OscConfig+0xf1a>
 800682c:	e027      	b.n	800687e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800682e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006832:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e01e      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006842:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_RCC_OscConfig+0x1078>)
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800684a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800684e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	429a      	cmp	r2, r3
 8006860:	d10b      	bne.n	800687a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800686a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800686e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006876:	429a      	cmp	r2, r3
 8006878:	d001      	beq.n	800687e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000

08006890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b09e      	sub	sp, #120	; 0x78
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e162      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b90      	ldr	r3, [pc, #576]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b8d      	ldr	r3, [pc, #564]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 0207 	bic.w	r2, r3, #7
 80068be:	498b      	ldr	r1, [pc, #556]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b89      	ldr	r3, [pc, #548]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e14a      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d008      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e4:	4b82      	ldr	r3, [pc, #520]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	497f      	ldr	r1, [pc, #508]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 80dc 	beq.w	8006abc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d13c      	bne.n	8006986 <HAL_RCC_ClockConfig+0xf6>
 800690c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006910:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006914:	fa93 f3a3 	rbit	r3, r3
 8006918:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800691a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691c:	fab3 f383 	clz	r3, r3
 8006920:	b2db      	uxtb	r3, r3
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d102      	bne.n	8006936 <HAL_RCC_ClockConfig+0xa6>
 8006930:	4b6f      	ldr	r3, [pc, #444]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	e00f      	b.n	8006956 <HAL_RCC_ClockConfig+0xc6>
 8006936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800693a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800693e:	fa93 f3a3 	rbit	r3, r3
 8006942:	667b      	str	r3, [r7, #100]	; 0x64
 8006944:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006948:	663b      	str	r3, [r7, #96]	; 0x60
 800694a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800694c:	fa93 f3a3 	rbit	r3, r3
 8006950:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006952:	4b67      	ldr	r3, [pc, #412]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800695a:	65ba      	str	r2, [r7, #88]	; 0x58
 800695c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800695e:	fa92 f2a2 	rbit	r2, r2
 8006962:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006966:	fab2 f282 	clz	r2, r2
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	f002 021f 	and.w	r2, r2, #31
 8006976:	2101      	movs	r1, #1
 8006978:	fa01 f202 	lsl.w	r2, r1, r2
 800697c:	4013      	ands	r3, r2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d17b      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e0f3      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d13c      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x178>
 800698e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006992:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006996:	fa93 f3a3 	rbit	r3, r3
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800699c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800699e:	fab3 f383 	clz	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d102      	bne.n	80069b8 <HAL_RCC_ClockConfig+0x128>
 80069b2:	4b4f      	ldr	r3, [pc, #316]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	e00f      	b.n	80069d8 <HAL_RCC_ClockConfig+0x148>
 80069b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c0:	fa93 f3a3 	rbit	r3, r3
 80069c4:	647b      	str	r3, [r7, #68]	; 0x44
 80069c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	fa93 f3a3 	rbit	r3, r3
 80069d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d4:	4b46      	ldr	r3, [pc, #280]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069dc:	63ba      	str	r2, [r7, #56]	; 0x38
 80069de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e0:	fa92 f2a2 	rbit	r2, r2
 80069e4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80069e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e8:	fab2 f282 	clz	r2, r2
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	f042 0220 	orr.w	r2, r2, #32
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	f002 021f 	and.w	r2, r2, #31
 80069f8:	2101      	movs	r1, #1
 80069fa:	fa01 f202 	lsl.w	r2, r1, r2
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d13a      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0b2      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	fa93 f3a3 	rbit	r3, r3
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a16:	fab3 f383 	clz	r3, r3
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d102      	bne.n	8006a30 <HAL_RCC_ClockConfig+0x1a0>
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	e00d      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1bc>
 8006a30:	2302      	movs	r3, #2
 8006a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	fa93 f3a3 	rbit	r3, r3
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	623b      	str	r3, [r7, #32]
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	fa93 f3a3 	rbit	r3, r3
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	4b29      	ldr	r3, [pc, #164]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	61ba      	str	r2, [r7, #24]
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	fa92 f2a2 	rbit	r2, r2
 8006a56:	617a      	str	r2, [r7, #20]
  return result;
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	fab2 f282 	clz	r2, r2
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	f042 0220 	orr.w	r2, r2, #32
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	f002 021f 	and.w	r2, r2, #31
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e079      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f023 0203 	bic.w	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	491a      	ldr	r1, [pc, #104]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a8c:	f7fc fe7a 	bl	8003784 <HAL_GetTick>
 8006a90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fc fe76 	bl	8003784 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e061      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <HAL_RCC_ClockConfig+0x260>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006abc:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d214      	bcs.n	8006af4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b08      	ldr	r3, [pc, #32]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 0207 	bic.w	r2, r3, #7
 8006ad2:	4906      	ldr	r1, [pc, #24]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_RCC_ClockConfig+0x25c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e040      	b.n	8006b6e <HAL_RCC_ClockConfig+0x2de>
 8006aec:	40022000 	.word	0x40022000
 8006af0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <HAL_RCC_ClockConfig+0x2e8>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	491a      	ldr	r1, [pc, #104]	; (8006b78 <HAL_RCC_ClockConfig+0x2e8>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <HAL_RCC_ClockConfig+0x2e8>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4912      	ldr	r1, [pc, #72]	; (8006b78 <HAL_RCC_ClockConfig+0x2e8>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006b32:	f000 f829 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <HAL_RCC_ClockConfig+0x2e8>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b40:	22f0      	movs	r2, #240	; 0xf0
 8006b42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	fa92 f2a2 	rbit	r2, r2
 8006b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	fab2 f282 	clz	r2, r2
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	40d3      	lsrs	r3, r2
 8006b56:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <HAL_RCC_ClockConfig+0x2ec>)
 8006b58:	5cd3      	ldrb	r3, [r2, r3]
 8006b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b5e:	4a08      	ldr	r2, [pc, #32]	; (8006b80 <HAL_RCC_ClockConfig+0x2f0>)
 8006b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006b62:	4b08      	ldr	r3, [pc, #32]	; (8006b84 <HAL_RCC_ClockConfig+0x2f4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fc fdc8 	bl	80036fc <HAL_InitTick>
  
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3778      	adds	r7, #120	; 0x78
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	40021000 	.word	0x40021000
 8006b7c:	08010650 	.word	0x08010650
 8006b80:	20000074 	.word	0x20000074
 8006b84:	20000078 	.word	0x20000078

08006b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b08b      	sub	sp, #44	; 0x2c
 8006b8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
 8006b92:	2300      	movs	r3, #0
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	2300      	movs	r3, #0
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006ba2:	4b29      	ldr	r3, [pc, #164]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d002      	beq.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8006bb2:	2b08      	cmp	r3, #8
 8006bb4:	d003      	beq.n	8006bbe <HAL_RCC_GetSysClockFreq+0x36>
 8006bb6:	e03c      	b.n	8006c32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bb8:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006bba:	623b      	str	r3, [r7, #32]
      break;
 8006bbc:	e03c      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006bc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006bc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	fa92 f2a2 	rbit	r2, r2
 8006bd0:	607a      	str	r2, [r7, #4]
  return result;
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	fab2 f282 	clz	r2, r2
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	40d3      	lsrs	r3, r2
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006bde:	5cd3      	ldrb	r3, [r2, r3]
 8006be0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006be2:	4b19      	ldr	r3, [pc, #100]	; (8006c48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	220f      	movs	r2, #15
 8006bec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	fa92 f2a2 	rbit	r2, r2
 8006bf4:	60fa      	str	r2, [r7, #12]
  return result;
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	fab2 f282 	clz	r2, r2
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	40d3      	lsrs	r3, r2
 8006c00:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c02:	5cd3      	ldrb	r3, [r2, r3]
 8006c04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006c10:	4a0e      	ldr	r2, [pc, #56]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c20:	e004      	b.n	8006c2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	623b      	str	r3, [r7, #32]
      break;
 8006c30:	e002      	b.n	8006c38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006c34:	623b      	str	r3, [r7, #32]
      break;
 8006c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c38:	6a3b      	ldr	r3, [r7, #32]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	372c      	adds	r7, #44	; 0x2c
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	007a1200 	.word	0x007a1200
 8006c50:	08010668 	.word	0x08010668
 8006c54:	08010678 	.word	0x08010678
 8006c58:	003d0900 	.word	0x003d0900

08006c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c62:	681b      	ldr	r3, [r3, #0]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000074 	.word	0x20000074

08006c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006c7a:	f7ff ffef 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006c8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	fa92 f2a2 	rbit	r2, r2
 8006c94:	603a      	str	r2, [r7, #0]
  return result;
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	fab2 f282 	clz	r2, r2
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	40d3      	lsrs	r3, r2
 8006ca0:	4a04      	ldr	r2, [pc, #16]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006ca2:	5cd3      	ldrb	r3, [r2, r3]
 8006ca4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	08010660 	.word	0x08010660

08006cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006cbe:	f7ff ffcd 	bl	8006c5c <HAL_RCC_GetHCLKFreq>
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006ccc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006cd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	fa92 f2a2 	rbit	r2, r2
 8006cd8:	603a      	str	r2, [r7, #0]
  return result;
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	fab2 f282 	clz	r2, r2
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	40d3      	lsrs	r3, r2
 8006ce4:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006ce6:	5cd3      	ldrb	r3, [r2, r3]
 8006ce8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	08010660 	.word	0x08010660

08006cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b092      	sub	sp, #72	; 0x48
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80d4 	beq.w	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d20:	4b4e      	ldr	r3, [pc, #312]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10e      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d2c:	4b4b      	ldr	r3, [pc, #300]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4a4a      	ldr	r2, [pc, #296]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d36:	61d3      	str	r3, [r2, #28]
 8006d38:	4b48      	ldr	r3, [pc, #288]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4a:	4b45      	ldr	r3, [pc, #276]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d118      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d56:	4b42      	ldr	r3, [pc, #264]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a41      	ldr	r2, [pc, #260]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d62:	f7fc fd0f 	bl	8003784 <HAL_GetTick>
 8006d66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d68:	e008      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d6a:	f7fc fd0b 	bl	8003784 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b64      	cmp	r3, #100	; 0x64
 8006d76:	d901      	bls.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e169      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7c:	4b38      	ldr	r3, [pc, #224]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0f0      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d88:	4b34      	ldr	r3, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8084 	beq.w	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d07c      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006da8:	4b2c      	ldr	r3, [pc, #176]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	fa93 f3a3 	rbit	r3, r3
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dc2:	fab3 f383 	clz	r3, r3
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	fa93 f3a3 	rbit	r3, r3
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006de6:	fab3 f383 	clz	r3, r3
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	4b1d      	ldr	r3, [pc, #116]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	461a      	mov	r2, r3
 8006df6:	2300      	movs	r3, #0
 8006df8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dfa:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04b      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7fc fcbb 	bl	8003784 <HAL_GetTick>
 8006e0e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e10:	e00a      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e12:	f7fc fcb7 	bl	8003784 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e113      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	fa93 f3a3 	rbit	r3, r3
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	2302      	movs	r3, #2
 8006e36:	623b      	str	r3, [r7, #32]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	fa93 f3a3 	rbit	r3, r3
 8006e3e:	61fb      	str	r3, [r7, #28]
  return result;
 8006e40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e42:	fab3 f383 	clz	r3, r3
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d108      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006e56:	4b01      	ldr	r3, [pc, #4]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	e00d      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40007000 	.word	0x40007000
 8006e64:	10908100 	.word	0x10908100
 8006e68:	2302      	movs	r3, #2
 8006e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	fa93 f3a3 	rbit	r3, r3
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	4b78      	ldr	r3, [pc, #480]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2202      	movs	r2, #2
 8006e7a:	613a      	str	r2, [r7, #16]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	fa92 f2a2 	rbit	r2, r2
 8006e82:	60fa      	str	r2, [r7, #12]
  return result;
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	fab2 f282 	clz	r2, r2
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	f002 021f 	and.w	r2, r2, #31
 8006e96:	2101      	movs	r1, #1
 8006e98:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0b7      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006ea2:	4b6d      	ldr	r3, [pc, #436]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	496a      	ldr	r1, [pc, #424]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006eb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d105      	bne.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ebc:	4b66      	ldr	r3, [pc, #408]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	4a65      	ldr	r2, [pc, #404]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ed4:	4b60      	ldr	r3, [pc, #384]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	f023 0203 	bic.w	r2, r3, #3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	495d      	ldr	r1, [pc, #372]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ef2:	4b59      	ldr	r3, [pc, #356]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4956      	ldr	r1, [pc, #344]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d008      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f10:	4b51      	ldr	r3, [pc, #324]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	494e      	ldr	r1, [pc, #312]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	4947      	ldr	r1, [pc, #284]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d008      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006f4c:	4b42      	ldr	r3, [pc, #264]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	493f      	ldr	r1, [pc, #252]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	f023 0220 	bic.w	r2, r3, #32
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	4938      	ldr	r1, [pc, #224]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d008      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f88:	4b33      	ldr	r3, [pc, #204]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	4930      	ldr	r1, [pc, #192]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	4929      	ldr	r1, [pc, #164]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fc4:	4b24      	ldr	r3, [pc, #144]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4921      	ldr	r1, [pc, #132]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d008      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fe2:	4b1d      	ldr	r3, [pc, #116]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	491a      	ldr	r1, [pc, #104]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007000:	4b15      	ldr	r3, [pc, #84]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	4912      	ldr	r1, [pc, #72]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d008      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800701e:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	490b      	ldr	r1, [pc, #44]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	4903      	ldr	r1, [pc, #12]	; (8007058 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800704a:	4313      	orrs	r3, r2
 800704c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3748      	adds	r7, #72	; 0x48
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000

0800705c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e073      	b.n	800715a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	7f5b      	ldrb	r3, [r3, #29]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fb ff6e 	bl	8002f64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b10      	cmp	r3, #16
 800709a:	d055      	beq.n	8007148 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	22ca      	movs	r2, #202	; 0xca
 80070a2:	625a      	str	r2, [r3, #36]	; 0x24
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2253      	movs	r2, #83	; 0x53
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f977 	bl	80073a0 <RTC_EnterInitMode>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d12c      	bne.n	8007116 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6899      	ldr	r1, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68d2      	ldr	r2, [r2, #12]
 80070f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6919      	ldr	r1, [r3, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	041a      	lsls	r2, r3, #16
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f97e 	bl	800740e <RTC_ExitInitMode>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d110      	bne.n	800713e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	22ff      	movs	r2, #255	; 0xff
 8007144:	625a      	str	r2, [r3, #36]	; 0x24
 8007146:	e001      	b.n	800714c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007162:	b590      	push	{r4, r7, lr}
 8007164:	b087      	sub	sp, #28
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	7f1b      	ldrb	r3, [r3, #28]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_RTC_SetTime+0x1c>
 800717a:	2302      	movs	r3, #2
 800717c:	e087      	b.n	800728e <HAL_RTC_SetTime+0x12c>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2202      	movs	r2, #2
 8007188:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d126      	bne.n	80071de <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 f955 	bl	8007458 <RTC_ByteToBcd2>
 80071ae:	4603      	mov	r3, r0
 80071b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	785b      	ldrb	r3, [r3, #1]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f94e 	bl	8007458 <RTC_ByteToBcd2>
 80071bc:	4603      	mov	r3, r0
 80071be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	789b      	ldrb	r3, [r3, #2]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f946 	bl	8007458 <RTC_ByteToBcd2>
 80071cc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	78db      	ldrb	r3, [r3, #3]
 80071d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
 80071dc:	e018      	b.n	8007210 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2200      	movs	r2, #0
 80071f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80071fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007204:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	78db      	ldrb	r3, [r3, #3]
 800720a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800720c:	4313      	orrs	r3, r2
 800720e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	22ca      	movs	r2, #202	; 0xca
 8007216:	625a      	str	r2, [r3, #36]	; 0x24
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2253      	movs	r2, #83	; 0x53
 800721e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f8bd 	bl	80073a0 <RTC_EnterInitMode>
 8007226:	4603      	mov	r3, r0
 8007228:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800722a:	7cfb      	ldrb	r3, [r7, #19]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d120      	bne.n	8007272 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800723a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800723e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800724e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6899      	ldr	r1, [r3, #8]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	431a      	orrs	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f8d0 	bl	800740e <RTC_ExitInitMode>
 800726e:	4603      	mov	r3, r0
 8007270:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007272:	7cfb      	ldrb	r3, [r7, #19]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	22ff      	movs	r2, #255	; 0xff
 8007284:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	771a      	strb	r2, [r3, #28]

  return status;
 800728c:	7cfb      	ldrb	r3, [r7, #19]
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd90      	pop	{r4, r7, pc}

08007296 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80072c8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80072cc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	0a1b      	lsrs	r3, r3, #8
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	0d9b      	lsrs	r3, r3, #22
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	b2da      	uxtb	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11a      	bne.n	8007348 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f000 f8bc 	bl	8007494 <RTC_Bcd2ToByte>
 800731c:	4603      	mov	r3, r0
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f8b3 	bl	8007494 <RTC_Bcd2ToByte>
 800732e:	4603      	mov	r3, r0
 8007330:	461a      	mov	r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	789b      	ldrb	r3, [r3, #2]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f8aa 	bl	8007494 <RTC_Bcd2ToByte>
 8007340:	4603      	mov	r3, r0
 8007342:	461a      	mov	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a0d      	ldr	r2, [pc, #52]	; (800739c <HAL_RTC_WaitForSynchro+0x48>)
 8007366:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007368:	f7fc fa0c 	bl	8003784 <HAL_GetTick>
 800736c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800736e:	e009      	b.n	8007384 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007370:	f7fc fa08 	bl	8003784 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800737e:	d901      	bls.n	8007384 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e007      	b.n	8007394 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0ee      	beq.n	8007370 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	0001ff5f 	.word	0x0001ff5f

080073a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d122      	bne.n	8007404 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073ce:	f7fc f9d9 	bl	8003784 <HAL_GetTick>
 80073d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073d4:	e00c      	b.n	80073f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073d6:	f7fc f9d5 	bl	8003784 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073e4:	d904      	bls.n	80073f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2204      	movs	r2, #4
 80073ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <RTC_EnterInitMode+0x64>
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d1e8      	bne.n	80073d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007428:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff ff8b 	bl	8007354 <HAL_RTC_WaitForSynchro>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007466:	e005      	b.n	8007474 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800746e:	79fb      	ldrb	r3, [r7, #7]
 8007470:	3b0a      	subs	r3, #10
 8007472:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	2b09      	cmp	r3, #9
 8007478:	d8f6      	bhi.n	8007468 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	b2da      	uxtb	r2, r3
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	4313      	orrs	r3, r2
 8007486:	b2db      	uxtb	r3, r3
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	461a      	mov	r2, r3
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	f003 030f 	and.w	r3, r3, #15
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	b2db      	uxtb	r3, r3
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e09d      	b.n	800761e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d108      	bne.n	80074fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f2:	d009      	beq.n	8007508 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	61da      	str	r2, [r3, #28]
 80074fa:	e005      	b.n	8007508 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fd44 	bl	8002fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007548:	d902      	bls.n	8007550 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	e002      	b.n	8007556 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007554:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800755e:	d007      	beq.n	8007570 <HAL_SPI_Init+0xa0>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007568:	d002      	beq.n	8007570 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	ea42 0103 	orr.w	r1, r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	0c1b      	lsrs	r3, r3, #16
 80075cc:	f003 0204 	and.w	r2, r3, #4
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	f003 0308 	and.w	r3, r3, #8
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80075ec:	ea42 0103 	orr.w	r1, r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800760c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e049      	b.n	80076cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d106      	bne.n	8007652 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fb fcf1 	bl	8003034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f000 fd1d 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e04a      	b.n	8007782 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a21      	ldr	r2, [pc, #132]	; (8007790 <HAL_TIM_Base_Start_IT+0xbc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d018      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x6c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007716:	d013      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x6c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <HAL_TIM_Base_Start_IT+0xc0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00e      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x6c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <HAL_TIM_Base_Start_IT+0xc4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d009      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x6c>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a1a      	ldr	r2, [pc, #104]	; (800779c <HAL_TIM_Base_Start_IT+0xc8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d004      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x6c>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a19      	ldr	r2, [pc, #100]	; (80077a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d115      	bne.n	800776c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	4b17      	ldr	r3, [pc, #92]	; (80077a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007748:	4013      	ands	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b06      	cmp	r3, #6
 8007750:	d015      	beq.n	800777e <HAL_TIM_Base_Start_IT+0xaa>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007758:	d011      	beq.n	800777e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	e008      	b.n	800777e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0201 	orr.w	r2, r2, #1
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e000      	b.n	8007780 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800777e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40012c00 	.word	0x40012c00
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40013400 	.word	0x40013400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	00010007 	.word	0x00010007

080077a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e049      	b.n	800784e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fb fc98 	bl	8003104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f000 fc5c 	bl	80080a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_TIM_PWM_Start+0x24>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	bf14      	ite	ne
 8007874:	2301      	movne	r3, #1
 8007876:	2300      	moveq	r3, #0
 8007878:	b2db      	uxtb	r3, r3
 800787a:	e03c      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b04      	cmp	r3, #4
 8007880:	d109      	bne.n	8007896 <HAL_TIM_PWM_Start+0x3e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	e02f      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b08      	cmp	r3, #8
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x58>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e022      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b0c      	cmp	r3, #12
 80078b4:	d109      	bne.n	80078ca <HAL_TIM_PWM_Start+0x72>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b01      	cmp	r3, #1
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e015      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d109      	bne.n	80078e4 <HAL_TIM_PWM_Start+0x8c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e008      	b.n	80078f6 <HAL_TIM_PWM_Start+0x9e>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e097      	b.n	8007a2e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0xb6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800790c:	e023      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b04      	cmp	r3, #4
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0xc6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800791c:	e01b      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b08      	cmp	r3, #8
 8007922:	d104      	bne.n	800792e <HAL_TIM_PWM_Start+0xd6>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800792c:	e013      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d104      	bne.n	800793e <HAL_TIM_PWM_Start+0xe6>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800793c:	e00b      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b10      	cmp	r3, #16
 8007942:	d104      	bne.n	800794e <HAL_TIM_PWM_Start+0xf6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800794c:	e003      	b.n	8007956 <HAL_TIM_PWM_Start+0xfe>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2201      	movs	r2, #1
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ffa0 	bl	80088a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a33      	ldr	r2, [pc, #204]	; (8007a38 <HAL_TIM_PWM_Start+0x1e0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a32      	ldr	r2, [pc, #200]	; (8007a3c <HAL_TIM_PWM_Start+0x1e4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a30      	ldr	r2, [pc, #192]	; (8007a40 <HAL_TIM_PWM_Start+0x1e8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <HAL_TIM_PWM_Start+0x1ec>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_TIM_PWM_Start+0x13e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2d      	ldr	r2, [pc, #180]	; (8007a48 <HAL_TIM_PWM_Start+0x1f0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_TIM_PWM_Start+0x142>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_TIM_PWM_Start+0x144>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a20      	ldr	r2, [pc, #128]	; (8007a38 <HAL_TIM_PWM_Start+0x1e0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d018      	beq.n	80079ec <HAL_TIM_PWM_Start+0x194>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c2:	d013      	beq.n	80079ec <HAL_TIM_PWM_Start+0x194>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a20      	ldr	r2, [pc, #128]	; (8007a4c <HAL_TIM_PWM_Start+0x1f4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00e      	beq.n	80079ec <HAL_TIM_PWM_Start+0x194>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1f      	ldr	r2, [pc, #124]	; (8007a50 <HAL_TIM_PWM_Start+0x1f8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d009      	beq.n	80079ec <HAL_TIM_PWM_Start+0x194>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a17      	ldr	r2, [pc, #92]	; (8007a3c <HAL_TIM_PWM_Start+0x1e4>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d004      	beq.n	80079ec <HAL_TIM_PWM_Start+0x194>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a16      	ldr	r2, [pc, #88]	; (8007a40 <HAL_TIM_PWM_Start+0x1e8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d115      	bne.n	8007a18 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <HAL_TIM_PWM_Start+0x1fc>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b06      	cmp	r3, #6
 80079fc:	d015      	beq.n	8007a2a <HAL_TIM_PWM_Start+0x1d2>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a04:	d011      	beq.n	8007a2a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f042 0201 	orr.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a16:	e008      	b.n	8007a2a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	e000      	b.n	8007a2c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40013400 	.word	0x40013400
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40014400 	.word	0x40014400
 8007a48:	40014800 	.word	0x40014800
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	00010007 	.word	0x00010007

08007a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d122      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d11b      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f06f 0202 	mvn.w	r2, #2
 8007a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	f003 0303 	and.w	r3, r3, #3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fae3 	bl	8008066 <HAL_TIM_IC_CaptureCallback>
 8007aa0:	e005      	b.n	8007aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fad5 	bl	8008052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fae6 	bl	800807a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d122      	bne.n	8007b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d11b      	bne.n	8007b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f06f 0204 	mvn.w	r2, #4
 8007ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fab9 	bl	8008066 <HAL_TIM_IC_CaptureCallback>
 8007af4:	e005      	b.n	8007b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 faab 	bl	8008052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fabc 	bl	800807a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f003 0308 	and.w	r3, r3, #8
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d122      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f003 0308 	and.w	r3, r3, #8
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d11b      	bne.n	8007b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f06f 0208 	mvn.w	r2, #8
 8007b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2204      	movs	r2, #4
 8007b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa8f 	bl	8008066 <HAL_TIM_IC_CaptureCallback>
 8007b48:	e005      	b.n	8007b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa81 	bl	8008052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fa92 	bl	800807a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d122      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	d11b      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f06f 0210 	mvn.w	r2, #16
 8007b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2208      	movs	r2, #8
 8007b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69db      	ldr	r3, [r3, #28]
 8007b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa65 	bl	8008066 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e005      	b.n	8007baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa57 	bl	8008052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fa68 	bl	800807a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10e      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d107      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0201 	mvn.w	r2, #1
 8007bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7fa fd6e 	bl	80026b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b80      	cmp	r3, #128	; 0x80
 8007be8:	d10e      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf4:	2b80      	cmp	r3, #128	; 0x80
 8007bf6:	d107      	bne.n	8007c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 ff7c 	bl	8008b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c16:	d10e      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c22:	2b80      	cmp	r3, #128	; 0x80
 8007c24:	d107      	bne.n	8007c36 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 ff6f 	bl	8008b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d10e      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4e:	2b40      	cmp	r3, #64	; 0x40
 8007c50:	d107      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa16 	bl	800808e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d10e      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d107      	bne.n	8007c8e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f06f 0220 	mvn.w	r2, #32
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 ff2f 	bl	8008aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e0ff      	b.n	8007eb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b14      	cmp	r3, #20
 8007cc2:	f200 80f0 	bhi.w	8007ea6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007ea7 	.word	0x08007ea7
 8007cd4:	08007ea7 	.word	0x08007ea7
 8007cd8:	08007ea7 	.word	0x08007ea7
 8007cdc:	08007d61 	.word	0x08007d61
 8007ce0:	08007ea7 	.word	0x08007ea7
 8007ce4:	08007ea7 	.word	0x08007ea7
 8007ce8:	08007ea7 	.word	0x08007ea7
 8007cec:	08007da3 	.word	0x08007da3
 8007cf0:	08007ea7 	.word	0x08007ea7
 8007cf4:	08007ea7 	.word	0x08007ea7
 8007cf8:	08007ea7 	.word	0x08007ea7
 8007cfc:	08007de3 	.word	0x08007de3
 8007d00:	08007ea7 	.word	0x08007ea7
 8007d04:	08007ea7 	.word	0x08007ea7
 8007d08:	08007ea7 	.word	0x08007ea7
 8007d0c:	08007e25 	.word	0x08007e25
 8007d10:	08007ea7 	.word	0x08007ea7
 8007d14:	08007ea7 	.word	0x08007ea7
 8007d18:	08007ea7 	.word	0x08007ea7
 8007d1c:	08007e65 	.word	0x08007e65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fa4c 	bl	80081c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0208 	orr.w	r2, r2, #8
 8007d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0204 	bic.w	r2, r2, #4
 8007d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6999      	ldr	r1, [r3, #24]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	619a      	str	r2, [r3, #24]
      break;
 8007d5e:	e0a5      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fabc 	bl	80082e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	021a      	lsls	r2, r3, #8
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	619a      	str	r2, [r3, #24]
      break;
 8007da0:	e084      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fb25 	bl	80083f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0208 	orr.w	r2, r2, #8
 8007dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0204 	bic.w	r2, r2, #4
 8007dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	61da      	str	r2, [r3, #28]
      break;
 8007de0:	e064      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fb8d 	bl	8008508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69d9      	ldr	r1, [r3, #28]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	021a      	lsls	r2, r3, #8
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	61da      	str	r2, [r3, #28]
      break;
 8007e22:	e043      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 fbd6 	bl	80085dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0208 	orr.w	r2, r2, #8
 8007e3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0204 	bic.w	r2, r2, #4
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e62:	e023      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fc1a 	bl	80086a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	021a      	lsls	r2, r3, #8
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ea4:	e002      	b.n	8007eac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop

08007ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIM_ConfigClockSource+0x1c>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e0b6      	b.n	800804a <HAL_TIM_ConfigClockSource+0x18a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f18:	d03e      	beq.n	8007f98 <HAL_TIM_ConfigClockSource+0xd8>
 8007f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1e:	f200 8087 	bhi.w	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f26:	f000 8086 	beq.w	8008036 <HAL_TIM_ConfigClockSource+0x176>
 8007f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2e:	d87f      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f30:	2b70      	cmp	r3, #112	; 0x70
 8007f32:	d01a      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0xaa>
 8007f34:	2b70      	cmp	r3, #112	; 0x70
 8007f36:	d87b      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f38:	2b60      	cmp	r3, #96	; 0x60
 8007f3a:	d050      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x11e>
 8007f3c:	2b60      	cmp	r3, #96	; 0x60
 8007f3e:	d877      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f40:	2b50      	cmp	r3, #80	; 0x50
 8007f42:	d03c      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0xfe>
 8007f44:	2b50      	cmp	r3, #80	; 0x50
 8007f46:	d873      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f48:	2b40      	cmp	r3, #64	; 0x40
 8007f4a:	d058      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x13e>
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d86f      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f50:	2b30      	cmp	r3, #48	; 0x30
 8007f52:	d064      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x15e>
 8007f54:	2b30      	cmp	r3, #48	; 0x30
 8007f56:	d86b      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d060      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x15e>
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d867      	bhi.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d05c      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x15e>
 8007f64:	2b10      	cmp	r3, #16
 8007f66:	d05a      	beq.n	800801e <HAL_TIM_ConfigClockSource+0x15e>
 8007f68:	e062      	b.n	8008030 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6899      	ldr	r1, [r3, #8]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685a      	ldr	r2, [r3, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f000 fc73 	bl	8008864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	609a      	str	r2, [r3, #8]
      break;
 8007f96:	e04f      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	6899      	ldr	r1, [r3, #8]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f000 fc5c 	bl	8008864 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fba:	609a      	str	r2, [r3, #8]
      break;
 8007fbc:	e03c      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6859      	ldr	r1, [r3, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f000 fbd0 	bl	8008770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2150      	movs	r1, #80	; 0x50
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 fc29 	bl	800882e <TIM_ITRx_SetConfig>
      break;
 8007fdc:	e02c      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6859      	ldr	r1, [r3, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	461a      	mov	r2, r3
 8007fec:	f000 fbef 	bl	80087ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2160      	movs	r1, #96	; 0x60
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fc19 	bl	800882e <TIM_ITRx_SetConfig>
      break;
 8007ffc:	e01c      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6859      	ldr	r1, [r3, #4]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	461a      	mov	r2, r3
 800800c:	f000 fbb0 	bl	8008770 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2140      	movs	r1, #64	; 0x40
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fc09 	bl	800882e <TIM_ITRx_SetConfig>
      break;
 800801c:	e00c      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4619      	mov	r1, r3
 8008028:	4610      	mov	r0, r2
 800802a:	f000 fc00 	bl	800882e <TIM_ITRx_SetConfig>
      break;
 800802e:	e003      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
      break;
 8008034:	e000      	b.n	8008038 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
	...

080080a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a3c      	ldr	r2, [pc, #240]	; (80081a8 <TIM_Base_SetConfig+0x104>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00f      	beq.n	80080dc <TIM_Base_SetConfig+0x38>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080c2:	d00b      	beq.n	80080dc <TIM_Base_SetConfig+0x38>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a39      	ldr	r2, [pc, #228]	; (80081ac <TIM_Base_SetConfig+0x108>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d007      	beq.n	80080dc <TIM_Base_SetConfig+0x38>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a38      	ldr	r2, [pc, #224]	; (80081b0 <TIM_Base_SetConfig+0x10c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_Base_SetConfig+0x38>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a37      	ldr	r2, [pc, #220]	; (80081b4 <TIM_Base_SetConfig+0x110>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d108      	bne.n	80080ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a2d      	ldr	r2, [pc, #180]	; (80081a8 <TIM_Base_SetConfig+0x104>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01b      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fc:	d017      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a2a      	ldr	r2, [pc, #168]	; (80081ac <TIM_Base_SetConfig+0x108>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <TIM_Base_SetConfig+0x10c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00f      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a28      	ldr	r2, [pc, #160]	; (80081b4 <TIM_Base_SetConfig+0x110>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d00b      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a27      	ldr	r2, [pc, #156]	; (80081b8 <TIM_Base_SetConfig+0x114>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d007      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a26      	ldr	r2, [pc, #152]	; (80081bc <TIM_Base_SetConfig+0x118>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_Base_SetConfig+0x8a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a25      	ldr	r2, [pc, #148]	; (80081c0 <TIM_Base_SetConfig+0x11c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d108      	bne.n	8008140 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a10      	ldr	r2, [pc, #64]	; (80081a8 <TIM_Base_SetConfig+0x104>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d00f      	beq.n	800818c <TIM_Base_SetConfig+0xe8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <TIM_Base_SetConfig+0x110>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00b      	beq.n	800818c <TIM_Base_SetConfig+0xe8>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <TIM_Base_SetConfig+0x114>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d007      	beq.n	800818c <TIM_Base_SetConfig+0xe8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a0f      	ldr	r2, [pc, #60]	; (80081bc <TIM_Base_SetConfig+0x118>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d003      	beq.n	800818c <TIM_Base_SetConfig+0xe8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a0e      	ldr	r2, [pc, #56]	; (80081c0 <TIM_Base_SetConfig+0x11c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d103      	bne.n	8008194 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	615a      	str	r2, [r3, #20]
}
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40012c00 	.word	0x40012c00
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800
 80081b4:	40013400 	.word	0x40013400
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800

080081c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	f023 0201 	bic.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f023 0302 	bic.w	r3, r3, #2
 8008210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	4313      	orrs	r3, r2
 800821a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a2c      	ldr	r2, [pc, #176]	; (80082d0 <TIM_OC1_SetConfig+0x10c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00f      	beq.n	8008244 <TIM_OC1_SetConfig+0x80>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a2b      	ldr	r2, [pc, #172]	; (80082d4 <TIM_OC1_SetConfig+0x110>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00b      	beq.n	8008244 <TIM_OC1_SetConfig+0x80>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a2a      	ldr	r2, [pc, #168]	; (80082d8 <TIM_OC1_SetConfig+0x114>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d007      	beq.n	8008244 <TIM_OC1_SetConfig+0x80>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a29      	ldr	r2, [pc, #164]	; (80082dc <TIM_OC1_SetConfig+0x118>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d003      	beq.n	8008244 <TIM_OC1_SetConfig+0x80>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a28      	ldr	r2, [pc, #160]	; (80082e0 <TIM_OC1_SetConfig+0x11c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d10c      	bne.n	800825e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 0308 	bic.w	r3, r3, #8
 800824a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f023 0304 	bic.w	r3, r3, #4
 800825c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <TIM_OC1_SetConfig+0x10c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00f      	beq.n	8008286 <TIM_OC1_SetConfig+0xc2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <TIM_OC1_SetConfig+0x110>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00b      	beq.n	8008286 <TIM_OC1_SetConfig+0xc2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a19      	ldr	r2, [pc, #100]	; (80082d8 <TIM_OC1_SetConfig+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d007      	beq.n	8008286 <TIM_OC1_SetConfig+0xc2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a18      	ldr	r2, [pc, #96]	; (80082dc <TIM_OC1_SetConfig+0x118>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_OC1_SetConfig+0xc2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a17      	ldr	r2, [pc, #92]	; (80082e0 <TIM_OC1_SetConfig+0x11c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d111      	bne.n	80082aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800828c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	4313      	orrs	r3, r2
 800829e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	621a      	str	r2, [r3, #32]
}
 80082c4:	bf00      	nop
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40012c00 	.word	0x40012c00
 80082d4:	40013400 	.word	0x40013400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800

080082e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f023 0210 	bic.w	r2, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800831e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	021b      	lsls	r3, r3, #8
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0320 	bic.w	r3, r3, #32
 8008332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a28      	ldr	r2, [pc, #160]	; (80083e4 <TIM_OC2_SetConfig+0x100>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC2_SetConfig+0x6c>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a27      	ldr	r2, [pc, #156]	; (80083e8 <TIM_OC2_SetConfig+0x104>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1d      	ldr	r2, [pc, #116]	; (80083e4 <TIM_OC2_SetConfig+0x100>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00f      	beq.n	8008394 <TIM_OC2_SetConfig+0xb0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <TIM_OC2_SetConfig+0x104>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00b      	beq.n	8008394 <TIM_OC2_SetConfig+0xb0>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <TIM_OC2_SetConfig+0x108>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d007      	beq.n	8008394 <TIM_OC2_SetConfig+0xb0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1a      	ldr	r2, [pc, #104]	; (80083f0 <TIM_OC2_SetConfig+0x10c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_OC2_SetConfig+0xb0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <TIM_OC2_SetConfig+0x110>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d113      	bne.n	80083bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800839a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	621a      	str	r2, [r3, #32]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40012c00 	.word	0x40012c00
 80083e8:	40013400 	.word	0x40013400
 80083ec:	40014000 	.word	0x40014000
 80083f0:	40014400 	.word	0x40014400
 80083f4:	40014800 	.word	0x40014800

080083f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0303 	bic.w	r3, r3, #3
 8008432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	021b      	lsls	r3, r3, #8
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <TIM_OC3_SetConfig+0xfc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d003      	beq.n	8008462 <TIM_OC3_SetConfig+0x6a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <TIM_OC3_SetConfig+0x100>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d10d      	bne.n	800847e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800847c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a1c      	ldr	r2, [pc, #112]	; (80084f4 <TIM_OC3_SetConfig+0xfc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <TIM_OC3_SetConfig+0xae>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a1b      	ldr	r2, [pc, #108]	; (80084f8 <TIM_OC3_SetConfig+0x100>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00b      	beq.n	80084a6 <TIM_OC3_SetConfig+0xae>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a1a      	ldr	r2, [pc, #104]	; (80084fc <TIM_OC3_SetConfig+0x104>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_OC3_SetConfig+0xae>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a19      	ldr	r2, [pc, #100]	; (8008500 <TIM_OC3_SetConfig+0x108>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC3_SetConfig+0xae>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a18      	ldr	r2, [pc, #96]	; (8008504 <TIM_OC3_SetConfig+0x10c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d113      	bne.n	80084ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	621a      	str	r2, [r3, #32]
}
 80084e8:	bf00      	nop
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	40012c00 	.word	0x40012c00
 80084f8:	40013400 	.word	0x40013400
 80084fc:	40014000 	.word	0x40014000
 8008500:	40014400 	.word	0x40014400
 8008504:	40014800 	.word	0x40014800

08008508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008542:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	021b      	lsls	r3, r3, #8
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008556:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	031b      	lsls	r3, r3, #12
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <TIM_OC4_SetConfig+0xc0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00f      	beq.n	800858c <TIM_OC4_SetConfig+0x84>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a17      	ldr	r2, [pc, #92]	; (80085cc <TIM_OC4_SetConfig+0xc4>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d00b      	beq.n	800858c <TIM_OC4_SetConfig+0x84>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a16      	ldr	r2, [pc, #88]	; (80085d0 <TIM_OC4_SetConfig+0xc8>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d007      	beq.n	800858c <TIM_OC4_SetConfig+0x84>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a15      	ldr	r2, [pc, #84]	; (80085d4 <TIM_OC4_SetConfig+0xcc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC4_SetConfig+0x84>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a14      	ldr	r2, [pc, #80]	; (80085d8 <TIM_OC4_SetConfig+0xd0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d109      	bne.n	80085a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	019b      	lsls	r3, r3, #6
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	621a      	str	r2, [r3, #32]
}
 80085ba:	bf00      	nop
 80085bc:	371c      	adds	r7, #28
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40012c00 	.word	0x40012c00
 80085cc:	40013400 	.word	0x40013400
 80085d0:	40014000 	.word	0x40014000
 80085d4:	40014400 	.word	0x40014400
 80085d8:	40014800 	.word	0x40014800

080085dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800860a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a17      	ldr	r2, [pc, #92]	; (8008690 <TIM_OC5_SetConfig+0xb4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00f      	beq.n	8008656 <TIM_OC5_SetConfig+0x7a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a16      	ldr	r2, [pc, #88]	; (8008694 <TIM_OC5_SetConfig+0xb8>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00b      	beq.n	8008656 <TIM_OC5_SetConfig+0x7a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a15      	ldr	r2, [pc, #84]	; (8008698 <TIM_OC5_SetConfig+0xbc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d007      	beq.n	8008656 <TIM_OC5_SetConfig+0x7a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a14      	ldr	r2, [pc, #80]	; (800869c <TIM_OC5_SetConfig+0xc0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d003      	beq.n	8008656 <TIM_OC5_SetConfig+0x7a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <TIM_OC5_SetConfig+0xc4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d109      	bne.n	800866a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800865c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	40012c00 	.word	0x40012c00
 8008694:	40013400 	.word	0x40013400
 8008698:	40014000 	.word	0x40014000
 800869c:	40014400 	.word	0x40014400
 80086a0:	40014800 	.word	0x40014800

080086a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	051b      	lsls	r3, r3, #20
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a18      	ldr	r2, [pc, #96]	; (800875c <TIM_OC6_SetConfig+0xb8>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00f      	beq.n	8008720 <TIM_OC6_SetConfig+0x7c>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a17      	ldr	r2, [pc, #92]	; (8008760 <TIM_OC6_SetConfig+0xbc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00b      	beq.n	8008720 <TIM_OC6_SetConfig+0x7c>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a16      	ldr	r2, [pc, #88]	; (8008764 <TIM_OC6_SetConfig+0xc0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d007      	beq.n	8008720 <TIM_OC6_SetConfig+0x7c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a15      	ldr	r2, [pc, #84]	; (8008768 <TIM_OC6_SetConfig+0xc4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d003      	beq.n	8008720 <TIM_OC6_SetConfig+0x7c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a14      	ldr	r2, [pc, #80]	; (800876c <TIM_OC6_SetConfig+0xc8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d109      	bne.n	8008734 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	029b      	lsls	r3, r3, #10
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	621a      	str	r2, [r3, #32]
}
 800874e:	bf00      	nop
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40012c00 	.word	0x40012c00
 8008760:	40013400 	.word	0x40013400
 8008764:	40014000 	.word	0x40014000
 8008768:	40014400 	.word	0x40014400
 800876c:	40014800 	.word	0x40014800

08008770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f023 0201 	bic.w	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800879a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f023 030a 	bic.w	r3, r3, #10
 80087ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	693a      	ldr	r2, [r7, #16]
 80087ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b087      	sub	sp, #28
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0210 	bic.w	r2, r3, #16
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	031b      	lsls	r3, r3, #12
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4313      	orrs	r3, r2
 8008802:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800880a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	4313      	orrs	r3, r2
 8008814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800882e:	b480      	push	{r7}
 8008830:	b085      	sub	sp, #20
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	f043 0307 	orr.w	r3, r3, #7
 8008850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	609a      	str	r2, [r3, #8]
}
 8008858:	bf00      	nop
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008864:	b480      	push	{r7}
 8008866:	b087      	sub	sp, #28
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800887e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	021a      	lsls	r2, r3, #8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	431a      	orrs	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4313      	orrs	r3, r2
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	4313      	orrs	r3, r2
 8008890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	609a      	str	r2, [r3, #8]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	2201      	movs	r2, #1
 80088b8:	fa02 f303 	lsl.w	r3, r2, r3
 80088bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1a      	ldr	r2, [r3, #32]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	43db      	mvns	r3, r3
 80088c6:	401a      	ands	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1a      	ldr	r2, [r3, #32]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	431a      	orrs	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	621a      	str	r2, [r3, #32]
}
 80088e2:	bf00      	nop
 80088e4:	371c      	adds	r7, #28
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
	...

080088f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008904:	2302      	movs	r3, #2
 8008906:	e063      	b.n	80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a2b      	ldr	r2, [pc, #172]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2a      	ldr	r2, [pc, #168]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d108      	bne.n	800894e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008942:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1b      	ldr	r2, [pc, #108]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897a:	d013      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a12      	ldr	r2, [pc, #72]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a13      	ldr	r2, [pc, #76]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d10c      	bne.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40012c00 	.word	0x40012c00
 80089e0:	40013400 	.word	0x40013400
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40014000 	.word	0x40014000

080089f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d101      	bne.n	8008a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a08:	2302      	movs	r3, #2
 8008a0a:	e065      	b.n	8008ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	041b      	lsls	r3, r3, #16
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a16      	ldr	r2, [pc, #88]	; (8008ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a14      	ldr	r2, [pc, #80]	; (8008ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d115      	bne.n	8008ac6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	051b      	lsls	r3, r3, #20
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	40012c00 	.word	0x40012c00
 8008ae8:	40013400 	.word	0x40013400

08008aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e040      	b.n	8008bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fa fbbc 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2224      	movs	r2, #36	; 0x24
 8008b54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0201 	bic.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fc00 	bl	800936c <UART_SetConfig>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d101      	bne.n	8008b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e022      	b.n	8008bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fdc8 	bl	8009714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689a      	ldr	r2, [r3, #8]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0201 	orr.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fe4f 	bl	8009858 <UART_CheckIdleState>
 8008bba:	4603      	mov	r3, r0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08a      	sub	sp, #40	; 0x28
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	603b      	str	r3, [r7, #0]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd8:	2b20      	cmp	r3, #32
 8008bda:	d178      	bne.n	8008cce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <HAL_UART_Transmit+0x24>
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e071      	b.n	8008cd0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2221      	movs	r2, #33	; 0x21
 8008bf8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bfa:	f7fa fdc3 	bl	8003784 <HAL_GetTick>
 8008bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	88fa      	ldrh	r2, [r7, #6]
 8008c04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	88fa      	ldrh	r2, [r7, #6]
 8008c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c18:	d108      	bne.n	8008c2c <HAL_UART_Transmit+0x68>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e003      	b.n	8008c34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c34:	e030      	b.n	8008c98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 feb1 	bl	80099a8 <UART_WaitOnFlagUntilTimeout>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d004      	beq.n	8008c56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e03c      	b.n	8008cd0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10b      	bne.n	8008c74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	881a      	ldrh	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c68:	b292      	uxth	r2, r2
 8008c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	3302      	adds	r3, #2
 8008c70:	61bb      	str	r3, [r7, #24]
 8008c72:	e008      	b.n	8008c86 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	b292      	uxth	r2, r2
 8008c7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1c8      	bne.n	8008c36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2200      	movs	r2, #0
 8008cac:	2140      	movs	r1, #64	; 0x40
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f000 fe7a 	bl	80099a8 <UART_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e005      	b.n	8008cd0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e000      	b.n	8008cd0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008cce:	2302      	movs	r3, #2
  }
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d132      	bne.n	8008d56 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_UART_Receive_IT+0x24>
 8008cf6:	88fb      	ldrh	r3, [r7, #6]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e02b      	b.n	8008d58 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d018      	beq.n	8008d46 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	613b      	str	r3, [r7, #16]
   return(result);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d28:	627b      	str	r3, [r7, #36]	; 0x24
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	623b      	str	r3, [r7, #32]
 8008d34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d36:	69f9      	ldr	r1, [r7, #28]
 8008d38:	6a3a      	ldr	r2, [r7, #32]
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1e6      	bne.n	8008d14 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	68b9      	ldr	r1, [r7, #8]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 fe93 	bl	8009a78 <UART_Start_Receive_IT>
 8008d52:	4603      	mov	r3, r0
 8008d54:	e000      	b.n	8008d58 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3728      	adds	r7, #40	; 0x28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b0ba      	sub	sp, #232	; 0xe8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d8e:	4013      	ands	r3, r2
 8008d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d115      	bne.n	8008dc8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00f      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 82ab 	beq.w	8009314 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	4798      	blx	r3
      }
      return;
 8008dc6:	e2a5      	b.n	8009314 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 8117 	beq.w	8009000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d106      	bne.n	8008dec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008de2:	4b85      	ldr	r3, [pc, #532]	; (8008ff8 <HAL_UART_IRQHandler+0x298>)
 8008de4:	4013      	ands	r3, r2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 810a 	beq.w	8009000 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d011      	beq.n	8008e1c <HAL_UART_IRQHandler+0xbc>
 8008df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00b      	beq.n	8008e1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e12:	f043 0201 	orr.w	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e20:	f003 0302 	and.w	r3, r3, #2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d011      	beq.n	8008e4c <HAL_UART_IRQHandler+0xec>
 8008e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2202      	movs	r2, #2
 8008e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e42:	f043 0204 	orr.w	r2, r3, #4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d011      	beq.n	8008e7c <HAL_UART_IRQHandler+0x11c>
 8008e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e72:	f043 0202 	orr.w	r2, r3, #2
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d017      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eae:	f043 0208 	orr.w	r2, r3, #8
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d012      	beq.n	8008eea <HAL_UART_IRQHandler+0x18a>
 8008ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00c      	beq.n	8008eea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee0:	f043 0220 	orr.w	r2, r3, #32
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 8211 	beq.w	8009318 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00d      	beq.n	8008f1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d007      	beq.n	8008f1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d005      	beq.n	8008f42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d04f      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fe4c 	bl	8009be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d141      	bne.n	8008fda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f92:	e841 2300 	strex	r3, r2, [r1]
 8008f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1d9      	bne.n	8008f56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d013      	beq.n	8008fd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fae:	4a13      	ldr	r2, [pc, #76]	; (8008ffc <HAL_UART_IRQHandler+0x29c>)
 8008fb0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fc f832 	bl	8005020 <HAL_DMA_Abort_IT>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d017      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd0:	e00f      	b.n	8008ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9b4 	bl	8009340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd8:	e00b      	b.n	8008ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9b0 	bl	8009340 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe0:	e007      	b.n	8008ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f9ac 	bl	8009340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008ff0:	e192      	b.n	8009318 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff2:	bf00      	nop
    return;
 8008ff4:	e190      	b.n	8009318 <HAL_UART_IRQHandler+0x5b8>
 8008ff6:	bf00      	nop
 8008ff8:	04000120 	.word	0x04000120
 8008ffc:	08009ca9 	.word	0x08009ca9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009004:	2b01      	cmp	r3, #1
 8009006:	f040 814b 	bne.w	80092a0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8144 	beq.w	80092a0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 813d 	beq.w	80092a0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2210      	movs	r2, #16
 800902c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009038:	2b40      	cmp	r3, #64	; 0x40
 800903a:	f040 80b5 	bne.w	80091a8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800904a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8164 	beq.w	800931c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800905a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800905e:	429a      	cmp	r2, r3
 8009060:	f080 815c 	bcs.w	800931c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800906a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b20      	cmp	r3, #32
 8009076:	f000 8086 	beq.w	8009186 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800908e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009092:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1da      	bne.n	800907a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3308      	adds	r3, #8
 80090ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e1      	bne.n	80090c4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3308      	adds	r3, #8
 8009106:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009124:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800912a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800912c:	e841 2300 	strex	r3, r2, [r1]
 8009130:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1e3      	bne.n	8009100 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009156:	f023 0310 	bic.w	r3, r3, #16
 800915a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009168:	65bb      	str	r3, [r7, #88]	; 0x58
 800916a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800916e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e4      	bne.n	8009146 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009180:	4618      	mov	r0, r3
 8009182:	f7fb ff14 	bl	8004fae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2202      	movs	r2, #2
 800918a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009198:	b29b      	uxth	r3, r3
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	b29b      	uxth	r3, r3
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f8d7 	bl	8009354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091a6:	e0b9      	b.n	800931c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80ab 	beq.w	8009320 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80091ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 80a6 	beq.w	8009320 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091f6:	647b      	str	r3, [r7, #68]	; 0x44
 80091f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e4      	bne.n	80091d4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	623b      	str	r3, [r7, #32]
   return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800922e:	633a      	str	r2, [r7, #48]	; 0x30
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e3      	bne.n	800920a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	e853 3f00 	ldrex	r3, [r3]
 8009262:	60fb      	str	r3, [r7, #12]
   return(result);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0310 	bic.w	r3, r3, #16
 800926a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	69b9      	ldr	r1, [r7, #24]
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	617b      	str	r3, [r7, #20]
   return(result);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e4      	bne.n	8009256 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009296:	4619      	mov	r1, r3
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f85b 	bl	8009354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800929e:	e03f      	b.n	8009320 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00e      	beq.n	80092ca <HAL_UART_IRQHandler+0x56a>
 80092ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d008      	beq.n	80092ca <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fed8 	bl	800a078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092c8:	e02d      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00e      	beq.n	80092f4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80092d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d008      	beq.n	80092f4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01c      	beq.n	8009324 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
    }
    return;
 80092f2:	e017      	b.n	8009324 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d012      	beq.n	8009326 <HAL_UART_IRQHandler+0x5c6>
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fce1 	bl	8009cd4 <UART_EndTransmit_IT>
    return;
 8009312:	e008      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009314:	bf00      	nop
 8009316:	e006      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009318:	bf00      	nop
 800931a:	e004      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
      return;
 800931c:	bf00      	nop
 800931e:	e002      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009320:	bf00      	nop
 8009322:	e000      	b.n	8009326 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009324:	bf00      	nop
  }

}
 8009326:	37e8      	adds	r7, #232	; 0xe8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	460b      	mov	r3, r1
 800935e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	69db      	ldr	r3, [r3, #28]
 800938c:	4313      	orrs	r3, r2
 800938e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800939a:	f023 030c 	bic.w	r3, r3, #12
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4aa7      	ldr	r2, [pc, #668]	; (8009684 <UART_SetConfig+0x318>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d120      	bne.n	800942e <UART_SetConfig+0xc2>
 80093ec:	4ba6      	ldr	r3, [pc, #664]	; (8009688 <UART_SetConfig+0x31c>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d817      	bhi.n	8009428 <UART_SetConfig+0xbc>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <UART_SetConfig+0x94>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009411 	.word	0x08009411
 8009404:	0800941d 	.word	0x0800941d
 8009408:	08009423 	.word	0x08009423
 800940c:	08009417 	.word	0x08009417
 8009410:	2301      	movs	r3, #1
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e0b5      	b.n	8009582 <UART_SetConfig+0x216>
 8009416:	2302      	movs	r3, #2
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e0b2      	b.n	8009582 <UART_SetConfig+0x216>
 800941c:	2304      	movs	r3, #4
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e0af      	b.n	8009582 <UART_SetConfig+0x216>
 8009422:	2308      	movs	r3, #8
 8009424:	77fb      	strb	r3, [r7, #31]
 8009426:	e0ac      	b.n	8009582 <UART_SetConfig+0x216>
 8009428:	2310      	movs	r3, #16
 800942a:	77fb      	strb	r3, [r7, #31]
 800942c:	e0a9      	b.n	8009582 <UART_SetConfig+0x216>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a96      	ldr	r2, [pc, #600]	; (800968c <UART_SetConfig+0x320>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d124      	bne.n	8009482 <UART_SetConfig+0x116>
 8009438:	4b93      	ldr	r3, [pc, #588]	; (8009688 <UART_SetConfig+0x31c>)
 800943a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009440:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009444:	d011      	beq.n	800946a <UART_SetConfig+0xfe>
 8009446:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800944a:	d817      	bhi.n	800947c <UART_SetConfig+0x110>
 800944c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009450:	d011      	beq.n	8009476 <UART_SetConfig+0x10a>
 8009452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009456:	d811      	bhi.n	800947c <UART_SetConfig+0x110>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <UART_SetConfig+0xf8>
 800945c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009460:	d006      	beq.n	8009470 <UART_SetConfig+0x104>
 8009462:	e00b      	b.n	800947c <UART_SetConfig+0x110>
 8009464:	2300      	movs	r3, #0
 8009466:	77fb      	strb	r3, [r7, #31]
 8009468:	e08b      	b.n	8009582 <UART_SetConfig+0x216>
 800946a:	2302      	movs	r3, #2
 800946c:	77fb      	strb	r3, [r7, #31]
 800946e:	e088      	b.n	8009582 <UART_SetConfig+0x216>
 8009470:	2304      	movs	r3, #4
 8009472:	77fb      	strb	r3, [r7, #31]
 8009474:	e085      	b.n	8009582 <UART_SetConfig+0x216>
 8009476:	2308      	movs	r3, #8
 8009478:	77fb      	strb	r3, [r7, #31]
 800947a:	e082      	b.n	8009582 <UART_SetConfig+0x216>
 800947c:	2310      	movs	r3, #16
 800947e:	77fb      	strb	r3, [r7, #31]
 8009480:	e07f      	b.n	8009582 <UART_SetConfig+0x216>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a82      	ldr	r2, [pc, #520]	; (8009690 <UART_SetConfig+0x324>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d124      	bne.n	80094d6 <UART_SetConfig+0x16a>
 800948c:	4b7e      	ldr	r3, [pc, #504]	; (8009688 <UART_SetConfig+0x31c>)
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009494:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009498:	d011      	beq.n	80094be <UART_SetConfig+0x152>
 800949a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800949e:	d817      	bhi.n	80094d0 <UART_SetConfig+0x164>
 80094a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094a4:	d011      	beq.n	80094ca <UART_SetConfig+0x15e>
 80094a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094aa:	d811      	bhi.n	80094d0 <UART_SetConfig+0x164>
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d003      	beq.n	80094b8 <UART_SetConfig+0x14c>
 80094b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094b4:	d006      	beq.n	80094c4 <UART_SetConfig+0x158>
 80094b6:	e00b      	b.n	80094d0 <UART_SetConfig+0x164>
 80094b8:	2300      	movs	r3, #0
 80094ba:	77fb      	strb	r3, [r7, #31]
 80094bc:	e061      	b.n	8009582 <UART_SetConfig+0x216>
 80094be:	2302      	movs	r3, #2
 80094c0:	77fb      	strb	r3, [r7, #31]
 80094c2:	e05e      	b.n	8009582 <UART_SetConfig+0x216>
 80094c4:	2304      	movs	r3, #4
 80094c6:	77fb      	strb	r3, [r7, #31]
 80094c8:	e05b      	b.n	8009582 <UART_SetConfig+0x216>
 80094ca:	2308      	movs	r3, #8
 80094cc:	77fb      	strb	r3, [r7, #31]
 80094ce:	e058      	b.n	8009582 <UART_SetConfig+0x216>
 80094d0:	2310      	movs	r3, #16
 80094d2:	77fb      	strb	r3, [r7, #31]
 80094d4:	e055      	b.n	8009582 <UART_SetConfig+0x216>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a6e      	ldr	r2, [pc, #440]	; (8009694 <UART_SetConfig+0x328>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d124      	bne.n	800952a <UART_SetConfig+0x1be>
 80094e0:	4b69      	ldr	r3, [pc, #420]	; (8009688 <UART_SetConfig+0x31c>)
 80094e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80094e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094ec:	d011      	beq.n	8009512 <UART_SetConfig+0x1a6>
 80094ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80094f2:	d817      	bhi.n	8009524 <UART_SetConfig+0x1b8>
 80094f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094f8:	d011      	beq.n	800951e <UART_SetConfig+0x1b2>
 80094fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094fe:	d811      	bhi.n	8009524 <UART_SetConfig+0x1b8>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <UART_SetConfig+0x1a0>
 8009504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009508:	d006      	beq.n	8009518 <UART_SetConfig+0x1ac>
 800950a:	e00b      	b.n	8009524 <UART_SetConfig+0x1b8>
 800950c:	2300      	movs	r3, #0
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e037      	b.n	8009582 <UART_SetConfig+0x216>
 8009512:	2302      	movs	r3, #2
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e034      	b.n	8009582 <UART_SetConfig+0x216>
 8009518:	2304      	movs	r3, #4
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e031      	b.n	8009582 <UART_SetConfig+0x216>
 800951e:	2308      	movs	r3, #8
 8009520:	77fb      	strb	r3, [r7, #31]
 8009522:	e02e      	b.n	8009582 <UART_SetConfig+0x216>
 8009524:	2310      	movs	r3, #16
 8009526:	77fb      	strb	r3, [r7, #31]
 8009528:	e02b      	b.n	8009582 <UART_SetConfig+0x216>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a5a      	ldr	r2, [pc, #360]	; (8009698 <UART_SetConfig+0x32c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d124      	bne.n	800957e <UART_SetConfig+0x212>
 8009534:	4b54      	ldr	r3, [pc, #336]	; (8009688 <UART_SetConfig+0x31c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009538:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800953c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009540:	d011      	beq.n	8009566 <UART_SetConfig+0x1fa>
 8009542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009546:	d817      	bhi.n	8009578 <UART_SetConfig+0x20c>
 8009548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800954c:	d011      	beq.n	8009572 <UART_SetConfig+0x206>
 800954e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009552:	d811      	bhi.n	8009578 <UART_SetConfig+0x20c>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <UART_SetConfig+0x1f4>
 8009558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800955c:	d006      	beq.n	800956c <UART_SetConfig+0x200>
 800955e:	e00b      	b.n	8009578 <UART_SetConfig+0x20c>
 8009560:	2300      	movs	r3, #0
 8009562:	77fb      	strb	r3, [r7, #31]
 8009564:	e00d      	b.n	8009582 <UART_SetConfig+0x216>
 8009566:	2302      	movs	r3, #2
 8009568:	77fb      	strb	r3, [r7, #31]
 800956a:	e00a      	b.n	8009582 <UART_SetConfig+0x216>
 800956c:	2304      	movs	r3, #4
 800956e:	77fb      	strb	r3, [r7, #31]
 8009570:	e007      	b.n	8009582 <UART_SetConfig+0x216>
 8009572:	2308      	movs	r3, #8
 8009574:	77fb      	strb	r3, [r7, #31]
 8009576:	e004      	b.n	8009582 <UART_SetConfig+0x216>
 8009578:	2310      	movs	r3, #16
 800957a:	77fb      	strb	r3, [r7, #31]
 800957c:	e001      	b.n	8009582 <UART_SetConfig+0x216>
 800957e:	2310      	movs	r3, #16
 8009580:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800958a:	d15b      	bne.n	8009644 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800958c:	7ffb      	ldrb	r3, [r7, #31]
 800958e:	2b08      	cmp	r3, #8
 8009590:	d827      	bhi.n	80095e2 <UART_SetConfig+0x276>
 8009592:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <UART_SetConfig+0x22c>)
 8009594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009598:	080095bd 	.word	0x080095bd
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095cd 	.word	0x080095cd
 80095a4:	080095e3 	.word	0x080095e3
 80095a8:	080095d3 	.word	0x080095d3
 80095ac:	080095e3 	.word	0x080095e3
 80095b0:	080095e3 	.word	0x080095e3
 80095b4:	080095e3 	.word	0x080095e3
 80095b8:	080095db 	.word	0x080095db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095bc:	f7fd fb5a 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 80095c0:	61b8      	str	r0, [r7, #24]
        break;
 80095c2:	e013      	b.n	80095ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c4:	f7fd fb78 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
 80095c8:	61b8      	str	r0, [r7, #24]
        break;
 80095ca:	e00f      	b.n	80095ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095cc:	4b33      	ldr	r3, [pc, #204]	; (800969c <UART_SetConfig+0x330>)
 80095ce:	61bb      	str	r3, [r7, #24]
        break;
 80095d0:	e00c      	b.n	80095ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095d2:	f7fd fad9 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 80095d6:	61b8      	str	r0, [r7, #24]
        break;
 80095d8:	e008      	b.n	80095ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095de:	61bb      	str	r3, [r7, #24]
        break;
 80095e0:	e004      	b.n	80095ec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	77bb      	strb	r3, [r7, #30]
        break;
 80095ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8082 	beq.w	80096f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	005a      	lsls	r2, r3, #1
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	085b      	lsrs	r3, r3, #1
 80095fe:	441a      	add	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	fbb2 f3f3 	udiv	r3, r2, r3
 8009608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b0f      	cmp	r3, #15
 800960e:	d916      	bls.n	800963e <UART_SetConfig+0x2d2>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009616:	d212      	bcs.n	800963e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f023 030f 	bic.w	r3, r3, #15
 8009620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	b29b      	uxth	r3, r3
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	b29a      	uxth	r2, r3
 800962e:	89fb      	ldrh	r3, [r7, #14]
 8009630:	4313      	orrs	r3, r2
 8009632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	89fa      	ldrh	r2, [r7, #14]
 800963a:	60da      	str	r2, [r3, #12]
 800963c:	e05c      	b.n	80096f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	77bb      	strb	r3, [r7, #30]
 8009642:	e059      	b.n	80096f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009644:	7ffb      	ldrb	r3, [r7, #31]
 8009646:	2b08      	cmp	r3, #8
 8009648:	d835      	bhi.n	80096b6 <UART_SetConfig+0x34a>
 800964a:	a201      	add	r2, pc, #4	; (adr r2, 8009650 <UART_SetConfig+0x2e4>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	08009675 	.word	0x08009675
 8009654:	0800967d 	.word	0x0800967d
 8009658:	080096a1 	.word	0x080096a1
 800965c:	080096b7 	.word	0x080096b7
 8009660:	080096a7 	.word	0x080096a7
 8009664:	080096b7 	.word	0x080096b7
 8009668:	080096b7 	.word	0x080096b7
 800966c:	080096b7 	.word	0x080096b7
 8009670:	080096af 	.word	0x080096af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009674:	f7fd fafe 	bl	8006c74 <HAL_RCC_GetPCLK1Freq>
 8009678:	61b8      	str	r0, [r7, #24]
        break;
 800967a:	e021      	b.n	80096c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800967c:	f7fd fb1c 	bl	8006cb8 <HAL_RCC_GetPCLK2Freq>
 8009680:	61b8      	str	r0, [r7, #24]
        break;
 8009682:	e01d      	b.n	80096c0 <UART_SetConfig+0x354>
 8009684:	40013800 	.word	0x40013800
 8009688:	40021000 	.word	0x40021000
 800968c:	40004400 	.word	0x40004400
 8009690:	40004800 	.word	0x40004800
 8009694:	40004c00 	.word	0x40004c00
 8009698:	40005000 	.word	0x40005000
 800969c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <UART_SetConfig+0x3a4>)
 80096a2:	61bb      	str	r3, [r7, #24]
        break;
 80096a4:	e00c      	b.n	80096c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096a6:	f7fd fa6f 	bl	8006b88 <HAL_RCC_GetSysClockFreq>
 80096aa:	61b8      	str	r0, [r7, #24]
        break;
 80096ac:	e008      	b.n	80096c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096b2:	61bb      	str	r3, [r7, #24]
        break;
 80096b4:	e004      	b.n	80096c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	77bb      	strb	r3, [r7, #30]
        break;
 80096be:	bf00      	nop
    }

    if (pclk != 0U)
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d018      	beq.n	80096f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	085a      	lsrs	r2, r3, #1
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	441a      	add	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	2b0f      	cmp	r3, #15
 80096de:	d909      	bls.n	80096f4 <UART_SetConfig+0x388>
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e6:	d205      	bcs.n	80096f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60da      	str	r2, [r3, #12]
 80096f2:	e001      	b.n	80096f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009704:	7fbb      	ldrb	r3, [r7, #30]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3720      	adds	r7, #32
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	007a1200 	.word	0x007a1200

08009714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00a      	beq.n	800973e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	f003 0302 	and.w	r3, r3, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	f003 0304 	and.w	r3, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00a      	beq.n	8009782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	f003 0310 	and.w	r3, r3, #16
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00a      	beq.n	80097c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d01a      	beq.n	800982a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	430a      	orrs	r2, r1
 8009808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009812:	d10a      	bne.n	800982a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00a      	beq.n	800984c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	605a      	str	r2, [r3, #4]
  }
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b098      	sub	sp, #96	; 0x60
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009868:	f7f9 ff8c 	bl	8003784 <HAL_GetTick>
 800986c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0308 	and.w	r3, r3, #8
 8009878:	2b08      	cmp	r3, #8
 800987a:	d12e      	bne.n	80098da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800987c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009884:	2200      	movs	r2, #0
 8009886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f88c 	bl	80099a8 <UART_WaitOnFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d021      	beq.n	80098da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	e853 3f00 	ldrex	r3, [r3]
 80098a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098aa:	653b      	str	r3, [r7, #80]	; 0x50
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b4:	647b      	str	r3, [r7, #68]	; 0x44
 80098b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098bc:	e841 2300 	strex	r3, r2, [r1]
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d1e6      	bne.n	8009896 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d6:	2303      	movs	r3, #3
 80098d8:	e062      	b.n	80099a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b04      	cmp	r3, #4
 80098e6:	d149      	bne.n	800997c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f0:	2200      	movs	r2, #0
 80098f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f856 	bl	80099a8 <UART_WaitOnFlagUntilTimeout>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d03c      	beq.n	800997c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	623b      	str	r3, [r7, #32]
   return(result);
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009920:	633b      	str	r3, [r7, #48]	; 0x30
 8009922:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800992e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	60fb      	str	r3, [r7, #12]
   return(result);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0301 	bic.w	r3, r3, #1
 800994a:	64bb      	str	r3, [r7, #72]	; 0x48
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009954:	61fa      	str	r2, [r7, #28]
 8009956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	69b9      	ldr	r1, [r7, #24]
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	617b      	str	r3, [r7, #20]
   return(result);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e5      	bne.n	8009934 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e011      	b.n	80099a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3758      	adds	r7, #88	; 0x58
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	4613      	mov	r3, r2
 80099b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b8:	e049      	b.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c0:	d045      	beq.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c2:	f7f9 fedf 	bl	8003784 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d302      	bcc.n	80099d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e048      	b.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0304 	and.w	r3, r3, #4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d031      	beq.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d110      	bne.n	8009a1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2208      	movs	r2, #8
 80099fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f8ed 	bl	8009be0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2208      	movs	r2, #8
 8009a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e029      	b.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a28:	d111      	bne.n	8009a4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f8d3 	bl	8009be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e00f      	b.n	8009a6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69da      	ldr	r2, [r3, #28]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4013      	ands	r3, r2
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	bf0c      	ite	eq
 8009a5e:	2301      	moveq	r3, #1
 8009a60:	2300      	movne	r3, #0
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d0a6      	beq.n	80099ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b097      	sub	sp, #92	; 0x5c
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	68ba      	ldr	r2, [r7, #8]
 8009a8a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	88fa      	ldrh	r2, [r7, #6]
 8009a90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	88fa      	ldrh	r2, [r7, #6]
 8009a98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aaa:	d10e      	bne.n	8009aca <UART_Start_Receive_IT+0x52>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <UART_Start_Receive_IT+0x48>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009abe:	e01a      	b.n	8009af6 <UART_Start_Receive_IT+0x7e>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	22ff      	movs	r2, #255	; 0xff
 8009ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ac8:	e015      	b.n	8009af6 <UART_Start_Receive_IT+0x7e>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10d      	bne.n	8009aee <UART_Start_Receive_IT+0x76>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d104      	bne.n	8009ae4 <UART_Start_Receive_IT+0x6c>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	22ff      	movs	r2, #255	; 0xff
 8009ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ae2:	e008      	b.n	8009af6 <UART_Start_Receive_IT+0x7e>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	227f      	movs	r2, #127	; 0x7f
 8009ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009aec:	e003      	b.n	8009af6 <UART_Start_Receive_IT+0x7e>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2222      	movs	r2, #34	; 0x22
 8009b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	f043 0301 	orr.w	r3, r3, #1
 8009b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b26:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e5      	bne.n	8009b06 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b42:	d107      	bne.n	8009b54 <UART_Start_Receive_IT+0xdc>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d103      	bne.n	8009b54 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4a22      	ldr	r2, [pc, #136]	; (8009bd8 <UART_Start_Receive_IT+0x160>)
 8009b50:	669a      	str	r2, [r3, #104]	; 0x68
 8009b52:	e002      	b.n	8009b5a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4a21      	ldr	r2, [pc, #132]	; (8009bdc <UART_Start_Receive_IT+0x164>)
 8009b58:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d019      	beq.n	8009b96 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6a:	e853 3f00 	ldrex	r3, [r3]
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b80:	637b      	str	r3, [r7, #52]	; 0x34
 8009b82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b88:	e841 2300 	strex	r3, r2, [r1]
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1e6      	bne.n	8009b62 <UART_Start_Receive_IT+0xea>
 8009b94:	e018      	b.n	8009bc8 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f043 0320 	orr.w	r3, r3, #32
 8009baa:	653b      	str	r3, [r7, #80]	; 0x50
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb4:	623b      	str	r3, [r7, #32]
 8009bb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	69f9      	ldr	r1, [r7, #28]
 8009bba:	6a3a      	ldr	r2, [r7, #32]
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e6      	bne.n	8009b96 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	375c      	adds	r7, #92	; 0x5c
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	08009ed1 	.word	0x08009ed1
 8009bdc:	08009d29 	.word	0x08009d29

08009be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b095      	sub	sp, #84	; 0x54
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf0:	e853 3f00 	ldrex	r3, [r3]
 8009bf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	461a      	mov	r2, r3
 8009c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c06:	643b      	str	r3, [r7, #64]	; 0x40
 8009c08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1e6      	bne.n	8009be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	e853 3f00 	ldrex	r3, [r3]
 8009c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c42:	e841 2300 	strex	r3, r2, [r1]
 8009c46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1e5      	bne.n	8009c1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d118      	bne.n	8009c88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f023 0310 	bic.w	r3, r3, #16
 8009c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c74:	61bb      	str	r3, [r7, #24]
 8009c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	6979      	ldr	r1, [r7, #20]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	613b      	str	r3, [r7, #16]
   return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e6      	bne.n	8009c56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009c9c:	bf00      	nop
 8009c9e:	3754      	adds	r7, #84	; 0x54
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fb3a 	bl	8009340 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ccc:	bf00      	nop
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b088      	sub	sp, #32
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf0:	61fb      	str	r3, [r7, #28]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	61bb      	str	r3, [r7, #24]
 8009cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6979      	ldr	r1, [r7, #20]
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	613b      	str	r3, [r7, #16]
   return(result);
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e6      	bne.n	8009cdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2220      	movs	r2, #32
 8009d12:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff fb06 	bl	800932c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d20:	bf00      	nop
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b09c      	sub	sp, #112	; 0x70
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d36:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d40:	2b22      	cmp	r3, #34	; 0x22
 8009d42:	f040 80b9 	bne.w	8009eb8 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d54:	b2d9      	uxtb	r1, r3
 8009d56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	400a      	ands	r2, r1
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f040 809c 	bne.w	8009ec8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009da4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dae:	65bb      	str	r3, [r7, #88]	; 0x58
 8009db0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009db4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e6      	bne.n	8009d90 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3308      	adds	r3, #8
 8009dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009de2:	647a      	str	r2, [r7, #68]	; 0x44
 8009de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2220      	movs	r2, #32
 8009dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d018      	beq.n	8009e4a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	623b      	str	r3, [r7, #32]
   return(result);
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e36:	633b      	str	r3, [r7, #48]	; 0x30
 8009e38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d12e      	bne.n	8009eb0 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f023 0310 	bic.w	r3, r3, #16
 8009e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e76:	61fb      	str	r3, [r7, #28]
 8009e78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	69b9      	ldr	r1, [r7, #24]
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	617b      	str	r3, [r7, #20]
   return(result);
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e6      	bne.n	8009e58 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69db      	ldr	r3, [r3, #28]
 8009e90:	f003 0310 	and.w	r3, r3, #16
 8009e94:	2b10      	cmp	r3, #16
 8009e96:	d103      	bne.n	8009ea0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff fa53 	bl	8009354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eae:	e00b      	b.n	8009ec8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7f8 fd07 	bl	80028c4 <HAL_UART_RxCpltCallback>
}
 8009eb6:	e007      	b.n	8009ec8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699a      	ldr	r2, [r3, #24]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	619a      	str	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	3770      	adds	r7, #112	; 0x70
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b09c      	sub	sp, #112	; 0x70
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ede:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ee8:	2b22      	cmp	r3, #34	; 0x22
 8009eea:	f040 80b9 	bne.w	800a060 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ef4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009efc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009efe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f06:	4013      	ands	r3, r2
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f12:	1c9a      	adds	r2, r3, #2
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	3b01      	subs	r3, #1
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f040 809c 	bne.w	800a070 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f4c:	667b      	str	r3, [r7, #100]	; 0x64
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f56:	657b      	str	r3, [r7, #84]	; 0x54
 8009f58:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e6      	bne.n	8009f38 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	f023 0301 	bic.w	r3, r3, #1
 8009f80:	663b      	str	r3, [r7, #96]	; 0x60
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f8a:	643a      	str	r2, [r7, #64]	; 0x40
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e5      	bne.n	8009f6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2220      	movs	r2, #32
 8009fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d018      	beq.n	8009ff2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fe0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e6      	bne.n	8009fc0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d12e      	bne.n	800a058 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f023 0310 	bic.w	r3, r3, #16
 800a014:	65bb      	str	r3, [r7, #88]	; 0x58
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a01e:	61bb      	str	r3, [r7, #24]
 800a020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a022:	6979      	ldr	r1, [r7, #20]
 800a024:	69ba      	ldr	r2, [r7, #24]
 800a026:	e841 2300 	strex	r3, r2, [r1]
 800a02a:	613b      	str	r3, [r7, #16]
   return(result);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e6      	bne.n	800a000 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b10      	cmp	r3, #16
 800a03e:	d103      	bne.n	800a048 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2210      	movs	r2, #16
 800a046:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff f97f 	bl	8009354 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a056:	e00b      	b.n	800a070 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7f8 fc33 	bl	80028c4 <HAL_UART_RxCpltCallback>
}
 800a05e:	e007      	b.n	800a070 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f042 0208 	orr.w	r2, r2, #8
 800a06e:	619a      	str	r2, [r3, #24]
}
 800a070:	bf00      	nop
 800a072:	3770      	adds	r7, #112	; 0x70
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a094:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a098:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	43db      	mvns	r3, r3
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	f107 0014 	add.w	r0, r7, #20
 800a0d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	b004      	add	sp, #16
 800a102:	4770      	bx	lr

0800a104 <__errno>:
 800a104:	4b01      	ldr	r3, [pc, #4]	; (800a10c <__errno+0x8>)
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000080 	.word	0x20000080

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4d0d      	ldr	r5, [pc, #52]	; (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	; (800a14c <__libc_init_array+0x3c>)
 800a116:	1b64      	subs	r4, r4, r5
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2600      	movs	r6, #0
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4d0b      	ldr	r5, [pc, #44]	; (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	; (800a154 <__libc_init_array+0x44>)
 800a124:	f006 f916 	bl	8010354 <_init>
 800a128:	1b64      	subs	r4, r4, r5
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2600      	movs	r6, #0
 800a12e:	42a6      	cmp	r6, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f855 3b04 	ldr.w	r3, [r5], #4
 800a138:	4798      	blx	r3
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a142:	4798      	blx	r3
 800a144:	3601      	adds	r6, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	08010d20 	.word	0x08010d20
 800a14c:	08010d20 	.word	0x08010d20
 800a150:	08010d20 	.word	0x08010d20
 800a154:	08010d24 	.word	0x08010d24

0800a158 <memset>:
 800a158:	4402      	add	r2, r0
 800a15a:	4603      	mov	r3, r0
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d100      	bne.n	800a162 <memset+0xa>
 800a160:	4770      	bx	lr
 800a162:	f803 1b01 	strb.w	r1, [r3], #1
 800a166:	e7f9      	b.n	800a15c <memset+0x4>

0800a168 <__cvt>:
 800a168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a16c:	ec55 4b10 	vmov	r4, r5, d0
 800a170:	2d00      	cmp	r5, #0
 800a172:	460e      	mov	r6, r1
 800a174:	4619      	mov	r1, r3
 800a176:	462b      	mov	r3, r5
 800a178:	bfbb      	ittet	lt
 800a17a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a17e:	461d      	movlt	r5, r3
 800a180:	2300      	movge	r3, #0
 800a182:	232d      	movlt	r3, #45	; 0x2d
 800a184:	700b      	strb	r3, [r1, #0]
 800a186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a188:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a18c:	4691      	mov	r9, r2
 800a18e:	f023 0820 	bic.w	r8, r3, #32
 800a192:	bfbc      	itt	lt
 800a194:	4622      	movlt	r2, r4
 800a196:	4614      	movlt	r4, r2
 800a198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a19c:	d005      	beq.n	800a1aa <__cvt+0x42>
 800a19e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1a2:	d100      	bne.n	800a1a6 <__cvt+0x3e>
 800a1a4:	3601      	adds	r6, #1
 800a1a6:	2102      	movs	r1, #2
 800a1a8:	e000      	b.n	800a1ac <__cvt+0x44>
 800a1aa:	2103      	movs	r1, #3
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	ab02      	add	r3, sp, #8
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	ec45 4b10 	vmov	d0, r4, r5
 800a1b8:	4653      	mov	r3, sl
 800a1ba:	4632      	mov	r2, r6
 800a1bc:	f001 fe58 	bl	800be70 <_dtoa_r>
 800a1c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	d102      	bne.n	800a1ce <__cvt+0x66>
 800a1c8:	f019 0f01 	tst.w	r9, #1
 800a1cc:	d022      	beq.n	800a214 <__cvt+0xac>
 800a1ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1d2:	eb07 0906 	add.w	r9, r7, r6
 800a1d6:	d110      	bne.n	800a1fa <__cvt+0x92>
 800a1d8:	783b      	ldrb	r3, [r7, #0]
 800a1da:	2b30      	cmp	r3, #48	; 0x30
 800a1dc:	d10a      	bne.n	800a1f4 <__cvt+0x8c>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ea:	b918      	cbnz	r0, 800a1f4 <__cvt+0x8c>
 800a1ec:	f1c6 0601 	rsb	r6, r6, #1
 800a1f0:	f8ca 6000 	str.w	r6, [sl]
 800a1f4:	f8da 3000 	ldr.w	r3, [sl]
 800a1f8:	4499      	add	r9, r3
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4620      	mov	r0, r4
 800a200:	4629      	mov	r1, r5
 800a202:	f7f6 fc61 	bl	8000ac8 <__aeabi_dcmpeq>
 800a206:	b108      	cbz	r0, 800a20c <__cvt+0xa4>
 800a208:	f8cd 900c 	str.w	r9, [sp, #12]
 800a20c:	2230      	movs	r2, #48	; 0x30
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	454b      	cmp	r3, r9
 800a212:	d307      	bcc.n	800a224 <__cvt+0xbc>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a218:	1bdb      	subs	r3, r3, r7
 800a21a:	4638      	mov	r0, r7
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	b004      	add	sp, #16
 800a220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	9103      	str	r1, [sp, #12]
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	e7f0      	b.n	800a20e <__cvt+0xa6>

0800a22c <__exponent>:
 800a22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a22e:	4603      	mov	r3, r0
 800a230:	2900      	cmp	r1, #0
 800a232:	bfb8      	it	lt
 800a234:	4249      	neglt	r1, r1
 800a236:	f803 2b02 	strb.w	r2, [r3], #2
 800a23a:	bfb4      	ite	lt
 800a23c:	222d      	movlt	r2, #45	; 0x2d
 800a23e:	222b      	movge	r2, #43	; 0x2b
 800a240:	2909      	cmp	r1, #9
 800a242:	7042      	strb	r2, [r0, #1]
 800a244:	dd2a      	ble.n	800a29c <__exponent+0x70>
 800a246:	f10d 0407 	add.w	r4, sp, #7
 800a24a:	46a4      	mov	ip, r4
 800a24c:	270a      	movs	r7, #10
 800a24e:	46a6      	mov	lr, r4
 800a250:	460a      	mov	r2, r1
 800a252:	fb91 f6f7 	sdiv	r6, r1, r7
 800a256:	fb07 1516 	mls	r5, r7, r6, r1
 800a25a:	3530      	adds	r5, #48	; 0x30
 800a25c:	2a63      	cmp	r2, #99	; 0x63
 800a25e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a262:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a266:	4631      	mov	r1, r6
 800a268:	dcf1      	bgt.n	800a24e <__exponent+0x22>
 800a26a:	3130      	adds	r1, #48	; 0x30
 800a26c:	f1ae 0502 	sub.w	r5, lr, #2
 800a270:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a274:	1c44      	adds	r4, r0, #1
 800a276:	4629      	mov	r1, r5
 800a278:	4561      	cmp	r1, ip
 800a27a:	d30a      	bcc.n	800a292 <__exponent+0x66>
 800a27c:	f10d 0209 	add.w	r2, sp, #9
 800a280:	eba2 020e 	sub.w	r2, r2, lr
 800a284:	4565      	cmp	r5, ip
 800a286:	bf88      	it	hi
 800a288:	2200      	movhi	r2, #0
 800a28a:	4413      	add	r3, r2
 800a28c:	1a18      	subs	r0, r3, r0
 800a28e:	b003      	add	sp, #12
 800a290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a296:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a29a:	e7ed      	b.n	800a278 <__exponent+0x4c>
 800a29c:	2330      	movs	r3, #48	; 0x30
 800a29e:	3130      	adds	r1, #48	; 0x30
 800a2a0:	7083      	strb	r3, [r0, #2]
 800a2a2:	70c1      	strb	r1, [r0, #3]
 800a2a4:	1d03      	adds	r3, r0, #4
 800a2a6:	e7f1      	b.n	800a28c <__exponent+0x60>

0800a2a8 <_printf_float>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	ed2d 8b02 	vpush	{d8}
 800a2b0:	b08d      	sub	sp, #52	; 0x34
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	4605      	mov	r5, r0
 800a2be:	f002 ff35 	bl	800d12c <_localeconv_r>
 800a2c2:	f8d0 a000 	ldr.w	sl, [r0]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	f7f5 ff82 	bl	80001d0 <strlen>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a2d0:	6823      	ldr	r3, [r4, #0]
 800a2d2:	9305      	str	r3, [sp, #20]
 800a2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a2dc:	3307      	adds	r3, #7
 800a2de:	f023 0307 	bic.w	r3, r3, #7
 800a2e2:	f103 0208 	add.w	r2, r3, #8
 800a2e6:	f8c8 2000 	str.w	r2, [r8]
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a2f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a2fa:	9307      	str	r3, [sp, #28]
 800a2fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a300:	ee08 0a10 	vmov	s16, r0
 800a304:	4b9f      	ldr	r3, [pc, #636]	; (800a584 <_printf_float+0x2dc>)
 800a306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a30a:	f04f 32ff 	mov.w	r2, #4294967295
 800a30e:	f7f6 fc0d 	bl	8000b2c <__aeabi_dcmpun>
 800a312:	bb88      	cbnz	r0, 800a378 <_printf_float+0xd0>
 800a314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a318:	4b9a      	ldr	r3, [pc, #616]	; (800a584 <_printf_float+0x2dc>)
 800a31a:	f04f 32ff 	mov.w	r2, #4294967295
 800a31e:	f7f6 fbe7 	bl	8000af0 <__aeabi_dcmple>
 800a322:	bb48      	cbnz	r0, 800a378 <_printf_float+0xd0>
 800a324:	2200      	movs	r2, #0
 800a326:	2300      	movs	r3, #0
 800a328:	4640      	mov	r0, r8
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 fbd6 	bl	8000adc <__aeabi_dcmplt>
 800a330:	b110      	cbz	r0, 800a338 <_printf_float+0x90>
 800a332:	232d      	movs	r3, #45	; 0x2d
 800a334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a338:	4b93      	ldr	r3, [pc, #588]	; (800a588 <_printf_float+0x2e0>)
 800a33a:	4894      	ldr	r0, [pc, #592]	; (800a58c <_printf_float+0x2e4>)
 800a33c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a340:	bf94      	ite	ls
 800a342:	4698      	movls	r8, r3
 800a344:	4680      	movhi	r8, r0
 800a346:	2303      	movs	r3, #3
 800a348:	6123      	str	r3, [r4, #16]
 800a34a:	9b05      	ldr	r3, [sp, #20]
 800a34c:	f023 0204 	bic.w	r2, r3, #4
 800a350:	6022      	str	r2, [r4, #0]
 800a352:	f04f 0900 	mov.w	r9, #0
 800a356:	9700      	str	r7, [sp, #0]
 800a358:	4633      	mov	r3, r6
 800a35a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 f9d8 	bl	800a714 <_printf_common>
 800a364:	3001      	adds	r0, #1
 800a366:	f040 8090 	bne.w	800a48a <_printf_float+0x1e2>
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	b00d      	add	sp, #52	; 0x34
 800a370:	ecbd 8b02 	vpop	{d8}
 800a374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a378:	4642      	mov	r2, r8
 800a37a:	464b      	mov	r3, r9
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f6 fbd4 	bl	8000b2c <__aeabi_dcmpun>
 800a384:	b140      	cbz	r0, 800a398 <_printf_float+0xf0>
 800a386:	464b      	mov	r3, r9
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bfbc      	itt	lt
 800a38c:	232d      	movlt	r3, #45	; 0x2d
 800a38e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a392:	487f      	ldr	r0, [pc, #508]	; (800a590 <_printf_float+0x2e8>)
 800a394:	4b7f      	ldr	r3, [pc, #508]	; (800a594 <_printf_float+0x2ec>)
 800a396:	e7d1      	b.n	800a33c <_printf_float+0x94>
 800a398:	6863      	ldr	r3, [r4, #4]
 800a39a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a39e:	9206      	str	r2, [sp, #24]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	d13f      	bne.n	800a424 <_printf_float+0x17c>
 800a3a4:	2306      	movs	r3, #6
 800a3a6:	6063      	str	r3, [r4, #4]
 800a3a8:	9b05      	ldr	r3, [sp, #20]
 800a3aa:	6861      	ldr	r1, [r4, #4]
 800a3ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9303      	str	r3, [sp, #12]
 800a3b4:	ab0a      	add	r3, sp, #40	; 0x28
 800a3b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a3ba:	ab09      	add	r3, sp, #36	; 0x24
 800a3bc:	ec49 8b10 	vmov	d0, r8, r9
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	6022      	str	r2, [r4, #0]
 800a3c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7ff fecd 	bl	800a168 <__cvt>
 800a3ce:	9b06      	ldr	r3, [sp, #24]
 800a3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3d2:	2b47      	cmp	r3, #71	; 0x47
 800a3d4:	4680      	mov	r8, r0
 800a3d6:	d108      	bne.n	800a3ea <_printf_float+0x142>
 800a3d8:	1cc8      	adds	r0, r1, #3
 800a3da:	db02      	blt.n	800a3e2 <_printf_float+0x13a>
 800a3dc:	6863      	ldr	r3, [r4, #4]
 800a3de:	4299      	cmp	r1, r3
 800a3e0:	dd41      	ble.n	800a466 <_printf_float+0x1be>
 800a3e2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a3e6:	fa5f fb8b 	uxtb.w	fp, fp
 800a3ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3ee:	d820      	bhi.n	800a432 <_printf_float+0x18a>
 800a3f0:	3901      	subs	r1, #1
 800a3f2:	465a      	mov	r2, fp
 800a3f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3f8:	9109      	str	r1, [sp, #36]	; 0x24
 800a3fa:	f7ff ff17 	bl	800a22c <__exponent>
 800a3fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a400:	1813      	adds	r3, r2, r0
 800a402:	2a01      	cmp	r2, #1
 800a404:	4681      	mov	r9, r0
 800a406:	6123      	str	r3, [r4, #16]
 800a408:	dc02      	bgt.n	800a410 <_printf_float+0x168>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	07d2      	lsls	r2, r2, #31
 800a40e:	d501      	bpl.n	800a414 <_printf_float+0x16c>
 800a410:	3301      	adds	r3, #1
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d09c      	beq.n	800a356 <_printf_float+0xae>
 800a41c:	232d      	movs	r3, #45	; 0x2d
 800a41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a422:	e798      	b.n	800a356 <_printf_float+0xae>
 800a424:	9a06      	ldr	r2, [sp, #24]
 800a426:	2a47      	cmp	r2, #71	; 0x47
 800a428:	d1be      	bne.n	800a3a8 <_printf_float+0x100>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1bc      	bne.n	800a3a8 <_printf_float+0x100>
 800a42e:	2301      	movs	r3, #1
 800a430:	e7b9      	b.n	800a3a6 <_printf_float+0xfe>
 800a432:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a436:	d118      	bne.n	800a46a <_printf_float+0x1c2>
 800a438:	2900      	cmp	r1, #0
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	dd0b      	ble.n	800a456 <_printf_float+0x1ae>
 800a43e:	6121      	str	r1, [r4, #16]
 800a440:	b913      	cbnz	r3, 800a448 <_printf_float+0x1a0>
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	07d0      	lsls	r0, r2, #31
 800a446:	d502      	bpl.n	800a44e <_printf_float+0x1a6>
 800a448:	3301      	adds	r3, #1
 800a44a:	440b      	add	r3, r1
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a450:	f04f 0900 	mov.w	r9, #0
 800a454:	e7de      	b.n	800a414 <_printf_float+0x16c>
 800a456:	b913      	cbnz	r3, 800a45e <_printf_float+0x1b6>
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	07d2      	lsls	r2, r2, #31
 800a45c:	d501      	bpl.n	800a462 <_printf_float+0x1ba>
 800a45e:	3302      	adds	r3, #2
 800a460:	e7f4      	b.n	800a44c <_printf_float+0x1a4>
 800a462:	2301      	movs	r3, #1
 800a464:	e7f2      	b.n	800a44c <_printf_float+0x1a4>
 800a466:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46c:	4299      	cmp	r1, r3
 800a46e:	db05      	blt.n	800a47c <_printf_float+0x1d4>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	6121      	str	r1, [r4, #16]
 800a474:	07d8      	lsls	r0, r3, #31
 800a476:	d5ea      	bpl.n	800a44e <_printf_float+0x1a6>
 800a478:	1c4b      	adds	r3, r1, #1
 800a47a:	e7e7      	b.n	800a44c <_printf_float+0x1a4>
 800a47c:	2900      	cmp	r1, #0
 800a47e:	bfd4      	ite	le
 800a480:	f1c1 0202 	rsble	r2, r1, #2
 800a484:	2201      	movgt	r2, #1
 800a486:	4413      	add	r3, r2
 800a488:	e7e0      	b.n	800a44c <_printf_float+0x1a4>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	055a      	lsls	r2, r3, #21
 800a48e:	d407      	bmi.n	800a4a0 <_printf_float+0x1f8>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	4642      	mov	r2, r8
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	d12c      	bne.n	800a4f8 <_printf_float+0x250>
 800a49e:	e764      	b.n	800a36a <_printf_float+0xc2>
 800a4a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4a4:	f240 80e0 	bls.w	800a668 <_printf_float+0x3c0>
 800a4a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f7f6 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d034      	beq.n	800a522 <_printf_float+0x27a>
 800a4b8:	4a37      	ldr	r2, [pc, #220]	; (800a598 <_printf_float+0x2f0>)
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4628      	mov	r0, r5
 800a4c0:	47b8      	blx	r7
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	f43f af51 	beq.w	800a36a <_printf_float+0xc2>
 800a4c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	db02      	blt.n	800a4d6 <_printf_float+0x22e>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	07d8      	lsls	r0, r3, #31
 800a4d4:	d510      	bpl.n	800a4f8 <_printf_float+0x250>
 800a4d6:	ee18 3a10 	vmov	r3, s16
 800a4da:	4652      	mov	r2, sl
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4628      	mov	r0, r5
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f af41 	beq.w	800a36a <_printf_float+0xc2>
 800a4e8:	f04f 0800 	mov.w	r8, #0
 800a4ec:	f104 091a 	add.w	r9, r4, #26
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	4543      	cmp	r3, r8
 800a4f6:	dc09      	bgt.n	800a50c <_printf_float+0x264>
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	079b      	lsls	r3, r3, #30
 800a4fc:	f100 8105 	bmi.w	800a70a <_printf_float+0x462>
 800a500:	68e0      	ldr	r0, [r4, #12]
 800a502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a504:	4298      	cmp	r0, r3
 800a506:	bfb8      	it	lt
 800a508:	4618      	movlt	r0, r3
 800a50a:	e730      	b.n	800a36e <_printf_float+0xc6>
 800a50c:	2301      	movs	r3, #1
 800a50e:	464a      	mov	r2, r9
 800a510:	4631      	mov	r1, r6
 800a512:	4628      	mov	r0, r5
 800a514:	47b8      	blx	r7
 800a516:	3001      	adds	r0, #1
 800a518:	f43f af27 	beq.w	800a36a <_printf_float+0xc2>
 800a51c:	f108 0801 	add.w	r8, r8, #1
 800a520:	e7e6      	b.n	800a4f0 <_printf_float+0x248>
 800a522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	dc39      	bgt.n	800a59c <_printf_float+0x2f4>
 800a528:	4a1b      	ldr	r2, [pc, #108]	; (800a598 <_printf_float+0x2f0>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f af19 	beq.w	800a36a <_printf_float+0xc2>
 800a538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53c:	4313      	orrs	r3, r2
 800a53e:	d102      	bne.n	800a546 <_printf_float+0x29e>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07d9      	lsls	r1, r3, #31
 800a544:	d5d8      	bpl.n	800a4f8 <_printf_float+0x250>
 800a546:	ee18 3a10 	vmov	r3, s16
 800a54a:	4652      	mov	r2, sl
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af09 	beq.w	800a36a <_printf_float+0xc2>
 800a558:	f04f 0900 	mov.w	r9, #0
 800a55c:	f104 0a1a 	add.w	sl, r4, #26
 800a560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a562:	425b      	negs	r3, r3
 800a564:	454b      	cmp	r3, r9
 800a566:	dc01      	bgt.n	800a56c <_printf_float+0x2c4>
 800a568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a56a:	e792      	b.n	800a492 <_printf_float+0x1ea>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4652      	mov	r2, sl
 800a570:	4631      	mov	r1, r6
 800a572:	4628      	mov	r0, r5
 800a574:	47b8      	blx	r7
 800a576:	3001      	adds	r0, #1
 800a578:	f43f aef7 	beq.w	800a36a <_printf_float+0xc2>
 800a57c:	f109 0901 	add.w	r9, r9, #1
 800a580:	e7ee      	b.n	800a560 <_printf_float+0x2b8>
 800a582:	bf00      	nop
 800a584:	7fefffff 	.word	0x7fefffff
 800a588:	0801068c 	.word	0x0801068c
 800a58c:	08010690 	.word	0x08010690
 800a590:	08010698 	.word	0x08010698
 800a594:	08010694 	.word	0x08010694
 800a598:	08010a91 	.word	0x08010a91
 800a59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	bfa8      	it	ge
 800a5a4:	461a      	movge	r2, r3
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	4691      	mov	r9, r2
 800a5aa:	dc37      	bgt.n	800a61c <_printf_float+0x374>
 800a5ac:	f04f 0b00 	mov.w	fp, #0
 800a5b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5b4:	f104 021a 	add.w	r2, r4, #26
 800a5b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5ba:	9305      	str	r3, [sp, #20]
 800a5bc:	eba3 0309 	sub.w	r3, r3, r9
 800a5c0:	455b      	cmp	r3, fp
 800a5c2:	dc33      	bgt.n	800a62c <_printf_float+0x384>
 800a5c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	db3b      	blt.n	800a644 <_printf_float+0x39c>
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	07da      	lsls	r2, r3, #31
 800a5d0:	d438      	bmi.n	800a644 <_printf_float+0x39c>
 800a5d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d4:	9a05      	ldr	r2, [sp, #20]
 800a5d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5d8:	1a9a      	subs	r2, r3, r2
 800a5da:	eba3 0901 	sub.w	r9, r3, r1
 800a5de:	4591      	cmp	r9, r2
 800a5e0:	bfa8      	it	ge
 800a5e2:	4691      	movge	r9, r2
 800a5e4:	f1b9 0f00 	cmp.w	r9, #0
 800a5e8:	dc35      	bgt.n	800a656 <_printf_float+0x3ae>
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5f2:	f104 0a1a 	add.w	sl, r4, #26
 800a5f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	eba3 0309 	sub.w	r3, r3, r9
 800a600:	4543      	cmp	r3, r8
 800a602:	f77f af79 	ble.w	800a4f8 <_printf_float+0x250>
 800a606:	2301      	movs	r3, #1
 800a608:	4652      	mov	r2, sl
 800a60a:	4631      	mov	r1, r6
 800a60c:	4628      	mov	r0, r5
 800a60e:	47b8      	blx	r7
 800a610:	3001      	adds	r0, #1
 800a612:	f43f aeaa 	beq.w	800a36a <_printf_float+0xc2>
 800a616:	f108 0801 	add.w	r8, r8, #1
 800a61a:	e7ec      	b.n	800a5f6 <_printf_float+0x34e>
 800a61c:	4613      	mov	r3, r2
 800a61e:	4631      	mov	r1, r6
 800a620:	4642      	mov	r2, r8
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	d1c0      	bne.n	800a5ac <_printf_float+0x304>
 800a62a:	e69e      	b.n	800a36a <_printf_float+0xc2>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	9205      	str	r2, [sp, #20]
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f ae97 	beq.w	800a36a <_printf_float+0xc2>
 800a63c:	9a05      	ldr	r2, [sp, #20]
 800a63e:	f10b 0b01 	add.w	fp, fp, #1
 800a642:	e7b9      	b.n	800a5b8 <_printf_float+0x310>
 800a644:	ee18 3a10 	vmov	r3, s16
 800a648:	4652      	mov	r2, sl
 800a64a:	4631      	mov	r1, r6
 800a64c:	4628      	mov	r0, r5
 800a64e:	47b8      	blx	r7
 800a650:	3001      	adds	r0, #1
 800a652:	d1be      	bne.n	800a5d2 <_printf_float+0x32a>
 800a654:	e689      	b.n	800a36a <_printf_float+0xc2>
 800a656:	9a05      	ldr	r2, [sp, #20]
 800a658:	464b      	mov	r3, r9
 800a65a:	4442      	add	r2, r8
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	d1c1      	bne.n	800a5ea <_printf_float+0x342>
 800a666:	e680      	b.n	800a36a <_printf_float+0xc2>
 800a668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a66a:	2a01      	cmp	r2, #1
 800a66c:	dc01      	bgt.n	800a672 <_printf_float+0x3ca>
 800a66e:	07db      	lsls	r3, r3, #31
 800a670:	d538      	bpl.n	800a6e4 <_printf_float+0x43c>
 800a672:	2301      	movs	r3, #1
 800a674:	4642      	mov	r2, r8
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f ae74 	beq.w	800a36a <_printf_float+0xc2>
 800a682:	ee18 3a10 	vmov	r3, s16
 800a686:	4652      	mov	r2, sl
 800a688:	4631      	mov	r1, r6
 800a68a:	4628      	mov	r0, r5
 800a68c:	47b8      	blx	r7
 800a68e:	3001      	adds	r0, #1
 800a690:	f43f ae6b 	beq.w	800a36a <_printf_float+0xc2>
 800a694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a698:	2200      	movs	r2, #0
 800a69a:	2300      	movs	r3, #0
 800a69c:	f7f6 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6a0:	b9d8      	cbnz	r0, 800a6da <_printf_float+0x432>
 800a6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a4:	f108 0201 	add.w	r2, r8, #1
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d10e      	bne.n	800a6d2 <_printf_float+0x42a>
 800a6b4:	e659      	b.n	800a36a <_printf_float+0xc2>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	f43f ae52 	beq.w	800a36a <_printf_float+0xc2>
 800a6c6:	f108 0801 	add.w	r8, r8, #1
 800a6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	4543      	cmp	r3, r8
 800a6d0:	dcf1      	bgt.n	800a6b6 <_printf_float+0x40e>
 800a6d2:	464b      	mov	r3, r9
 800a6d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6d8:	e6dc      	b.n	800a494 <_printf_float+0x1ec>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	f104 0a1a 	add.w	sl, r4, #26
 800a6e2:	e7f2      	b.n	800a6ca <_printf_float+0x422>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	e7df      	b.n	800a6aa <_printf_float+0x402>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	464a      	mov	r2, r9
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f ae38 	beq.w	800a36a <_printf_float+0xc2>
 800a6fa:	f108 0801 	add.w	r8, r8, #1
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a702:	1a5b      	subs	r3, r3, r1
 800a704:	4543      	cmp	r3, r8
 800a706:	dcf0      	bgt.n	800a6ea <_printf_float+0x442>
 800a708:	e6fa      	b.n	800a500 <_printf_float+0x258>
 800a70a:	f04f 0800 	mov.w	r8, #0
 800a70e:	f104 0919 	add.w	r9, r4, #25
 800a712:	e7f4      	b.n	800a6fe <_printf_float+0x456>

0800a714 <_printf_common>:
 800a714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	4616      	mov	r6, r2
 800a71a:	4699      	mov	r9, r3
 800a71c:	688a      	ldr	r2, [r1, #8]
 800a71e:	690b      	ldr	r3, [r1, #16]
 800a720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a724:	4293      	cmp	r3, r2
 800a726:	bfb8      	it	lt
 800a728:	4613      	movlt	r3, r2
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a730:	4607      	mov	r7, r0
 800a732:	460c      	mov	r4, r1
 800a734:	b10a      	cbz	r2, 800a73a <_printf_common+0x26>
 800a736:	3301      	adds	r3, #1
 800a738:	6033      	str	r3, [r6, #0]
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	0699      	lsls	r1, r3, #26
 800a73e:	bf42      	ittt	mi
 800a740:	6833      	ldrmi	r3, [r6, #0]
 800a742:	3302      	addmi	r3, #2
 800a744:	6033      	strmi	r3, [r6, #0]
 800a746:	6825      	ldr	r5, [r4, #0]
 800a748:	f015 0506 	ands.w	r5, r5, #6
 800a74c:	d106      	bne.n	800a75c <_printf_common+0x48>
 800a74e:	f104 0a19 	add.w	sl, r4, #25
 800a752:	68e3      	ldr	r3, [r4, #12]
 800a754:	6832      	ldr	r2, [r6, #0]
 800a756:	1a9b      	subs	r3, r3, r2
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dc26      	bgt.n	800a7aa <_printf_common+0x96>
 800a75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a760:	1e13      	subs	r3, r2, #0
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	bf18      	it	ne
 800a766:	2301      	movne	r3, #1
 800a768:	0692      	lsls	r2, r2, #26
 800a76a:	d42b      	bmi.n	800a7c4 <_printf_common+0xb0>
 800a76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a770:	4649      	mov	r1, r9
 800a772:	4638      	mov	r0, r7
 800a774:	47c0      	blx	r8
 800a776:	3001      	adds	r0, #1
 800a778:	d01e      	beq.n	800a7b8 <_printf_common+0xa4>
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	68e5      	ldr	r5, [r4, #12]
 800a77e:	6832      	ldr	r2, [r6, #0]
 800a780:	f003 0306 	and.w	r3, r3, #6
 800a784:	2b04      	cmp	r3, #4
 800a786:	bf08      	it	eq
 800a788:	1aad      	subeq	r5, r5, r2
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	6922      	ldr	r2, [r4, #16]
 800a78e:	bf0c      	ite	eq
 800a790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a794:	2500      	movne	r5, #0
 800a796:	4293      	cmp	r3, r2
 800a798:	bfc4      	itt	gt
 800a79a:	1a9b      	subgt	r3, r3, r2
 800a79c:	18ed      	addgt	r5, r5, r3
 800a79e:	2600      	movs	r6, #0
 800a7a0:	341a      	adds	r4, #26
 800a7a2:	42b5      	cmp	r5, r6
 800a7a4:	d11a      	bne.n	800a7dc <_printf_common+0xc8>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e008      	b.n	800a7bc <_printf_common+0xa8>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4652      	mov	r2, sl
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	47c0      	blx	r8
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d103      	bne.n	800a7c0 <_printf_common+0xac>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c0:	3501      	adds	r5, #1
 800a7c2:	e7c6      	b.n	800a752 <_printf_common+0x3e>
 800a7c4:	18e1      	adds	r1, r4, r3
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	2030      	movs	r0, #48	; 0x30
 800a7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ce:	4422      	add	r2, r4
 800a7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7d8:	3302      	adds	r3, #2
 800a7da:	e7c7      	b.n	800a76c <_printf_common+0x58>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d0e6      	beq.n	800a7b8 <_printf_common+0xa4>
 800a7ea:	3601      	adds	r6, #1
 800a7ec:	e7d9      	b.n	800a7a2 <_printf_common+0x8e>
	...

0800a7f0 <_printf_i>:
 800a7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	7e0f      	ldrb	r7, [r1, #24]
 800a7f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7f8:	2f78      	cmp	r7, #120	; 0x78
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	469a      	mov	sl, r3
 800a802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a806:	d807      	bhi.n	800a818 <_printf_i+0x28>
 800a808:	2f62      	cmp	r7, #98	; 0x62
 800a80a:	d80a      	bhi.n	800a822 <_printf_i+0x32>
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	f000 80d8 	beq.w	800a9c2 <_printf_i+0x1d2>
 800a812:	2f58      	cmp	r7, #88	; 0x58
 800a814:	f000 80a3 	beq.w	800a95e <_printf_i+0x16e>
 800a818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a820:	e03a      	b.n	800a898 <_printf_i+0xa8>
 800a822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a826:	2b15      	cmp	r3, #21
 800a828:	d8f6      	bhi.n	800a818 <_printf_i+0x28>
 800a82a:	a101      	add	r1, pc, #4	; (adr r1, 800a830 <_printf_i+0x40>)
 800a82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a830:	0800a889 	.word	0x0800a889
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a819 	.word	0x0800a819
 800a83c:	0800a819 	.word	0x0800a819
 800a840:	0800a819 	.word	0x0800a819
 800a844:	0800a819 	.word	0x0800a819
 800a848:	0800a89d 	.word	0x0800a89d
 800a84c:	0800a819 	.word	0x0800a819
 800a850:	0800a819 	.word	0x0800a819
 800a854:	0800a819 	.word	0x0800a819
 800a858:	0800a819 	.word	0x0800a819
 800a85c:	0800a9a9 	.word	0x0800a9a9
 800a860:	0800a8cd 	.word	0x0800a8cd
 800a864:	0800a98b 	.word	0x0800a98b
 800a868:	0800a819 	.word	0x0800a819
 800a86c:	0800a819 	.word	0x0800a819
 800a870:	0800a9cb 	.word	0x0800a9cb
 800a874:	0800a819 	.word	0x0800a819
 800a878:	0800a8cd 	.word	0x0800a8cd
 800a87c:	0800a819 	.word	0x0800a819
 800a880:	0800a819 	.word	0x0800a819
 800a884:	0800a993 	.word	0x0800a993
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	1d1a      	adds	r2, r3, #4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	602a      	str	r2, [r5, #0]
 800a890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a898:	2301      	movs	r3, #1
 800a89a:	e0a3      	b.n	800a9e4 <_printf_i+0x1f4>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	6829      	ldr	r1, [r5, #0]
 800a8a0:	0606      	lsls	r6, r0, #24
 800a8a2:	f101 0304 	add.w	r3, r1, #4
 800a8a6:	d50a      	bpl.n	800a8be <_printf_i+0xce>
 800a8a8:	680e      	ldr	r6, [r1, #0]
 800a8aa:	602b      	str	r3, [r5, #0]
 800a8ac:	2e00      	cmp	r6, #0
 800a8ae:	da03      	bge.n	800a8b8 <_printf_i+0xc8>
 800a8b0:	232d      	movs	r3, #45	; 0x2d
 800a8b2:	4276      	negs	r6, r6
 800a8b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b8:	485e      	ldr	r0, [pc, #376]	; (800aa34 <_printf_i+0x244>)
 800a8ba:	230a      	movs	r3, #10
 800a8bc:	e019      	b.n	800a8f2 <_printf_i+0x102>
 800a8be:	680e      	ldr	r6, [r1, #0]
 800a8c0:	602b      	str	r3, [r5, #0]
 800a8c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8c6:	bf18      	it	ne
 800a8c8:	b236      	sxthne	r6, r6
 800a8ca:	e7ef      	b.n	800a8ac <_printf_i+0xbc>
 800a8cc:	682b      	ldr	r3, [r5, #0]
 800a8ce:	6820      	ldr	r0, [r4, #0]
 800a8d0:	1d19      	adds	r1, r3, #4
 800a8d2:	6029      	str	r1, [r5, #0]
 800a8d4:	0601      	lsls	r1, r0, #24
 800a8d6:	d501      	bpl.n	800a8dc <_printf_i+0xec>
 800a8d8:	681e      	ldr	r6, [r3, #0]
 800a8da:	e002      	b.n	800a8e2 <_printf_i+0xf2>
 800a8dc:	0646      	lsls	r6, r0, #25
 800a8de:	d5fb      	bpl.n	800a8d8 <_printf_i+0xe8>
 800a8e0:	881e      	ldrh	r6, [r3, #0]
 800a8e2:	4854      	ldr	r0, [pc, #336]	; (800aa34 <_printf_i+0x244>)
 800a8e4:	2f6f      	cmp	r7, #111	; 0x6f
 800a8e6:	bf0c      	ite	eq
 800a8e8:	2308      	moveq	r3, #8
 800a8ea:	230a      	movne	r3, #10
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8f2:	6865      	ldr	r5, [r4, #4]
 800a8f4:	60a5      	str	r5, [r4, #8]
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	bfa2      	ittt	ge
 800a8fa:	6821      	ldrge	r1, [r4, #0]
 800a8fc:	f021 0104 	bicge.w	r1, r1, #4
 800a900:	6021      	strge	r1, [r4, #0]
 800a902:	b90e      	cbnz	r6, 800a908 <_printf_i+0x118>
 800a904:	2d00      	cmp	r5, #0
 800a906:	d04d      	beq.n	800a9a4 <_printf_i+0x1b4>
 800a908:	4615      	mov	r5, r2
 800a90a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a90e:	fb03 6711 	mls	r7, r3, r1, r6
 800a912:	5dc7      	ldrb	r7, [r0, r7]
 800a914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a918:	4637      	mov	r7, r6
 800a91a:	42bb      	cmp	r3, r7
 800a91c:	460e      	mov	r6, r1
 800a91e:	d9f4      	bls.n	800a90a <_printf_i+0x11a>
 800a920:	2b08      	cmp	r3, #8
 800a922:	d10b      	bne.n	800a93c <_printf_i+0x14c>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	07de      	lsls	r6, r3, #31
 800a928:	d508      	bpl.n	800a93c <_printf_i+0x14c>
 800a92a:	6923      	ldr	r3, [r4, #16]
 800a92c:	6861      	ldr	r1, [r4, #4]
 800a92e:	4299      	cmp	r1, r3
 800a930:	bfde      	ittt	le
 800a932:	2330      	movle	r3, #48	; 0x30
 800a934:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a93c:	1b52      	subs	r2, r2, r5
 800a93e:	6122      	str	r2, [r4, #16]
 800a940:	f8cd a000 	str.w	sl, [sp]
 800a944:	464b      	mov	r3, r9
 800a946:	aa03      	add	r2, sp, #12
 800a948:	4621      	mov	r1, r4
 800a94a:	4640      	mov	r0, r8
 800a94c:	f7ff fee2 	bl	800a714 <_printf_common>
 800a950:	3001      	adds	r0, #1
 800a952:	d14c      	bne.n	800a9ee <_printf_i+0x1fe>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	b004      	add	sp, #16
 800a95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95e:	4835      	ldr	r0, [pc, #212]	; (800aa34 <_printf_i+0x244>)
 800a960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a964:	6829      	ldr	r1, [r5, #0]
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	f851 6b04 	ldr.w	r6, [r1], #4
 800a96c:	6029      	str	r1, [r5, #0]
 800a96e:	061d      	lsls	r5, r3, #24
 800a970:	d514      	bpl.n	800a99c <_printf_i+0x1ac>
 800a972:	07df      	lsls	r7, r3, #31
 800a974:	bf44      	itt	mi
 800a976:	f043 0320 	orrmi.w	r3, r3, #32
 800a97a:	6023      	strmi	r3, [r4, #0]
 800a97c:	b91e      	cbnz	r6, 800a986 <_printf_i+0x196>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	f023 0320 	bic.w	r3, r3, #32
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	2310      	movs	r3, #16
 800a988:	e7b0      	b.n	800a8ec <_printf_i+0xfc>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f043 0320 	orr.w	r3, r3, #32
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	2378      	movs	r3, #120	; 0x78
 800a994:	4828      	ldr	r0, [pc, #160]	; (800aa38 <_printf_i+0x248>)
 800a996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a99a:	e7e3      	b.n	800a964 <_printf_i+0x174>
 800a99c:	0659      	lsls	r1, r3, #25
 800a99e:	bf48      	it	mi
 800a9a0:	b2b6      	uxthmi	r6, r6
 800a9a2:	e7e6      	b.n	800a972 <_printf_i+0x182>
 800a9a4:	4615      	mov	r5, r2
 800a9a6:	e7bb      	b.n	800a920 <_printf_i+0x130>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	6826      	ldr	r6, [r4, #0]
 800a9ac:	6961      	ldr	r1, [r4, #20]
 800a9ae:	1d18      	adds	r0, r3, #4
 800a9b0:	6028      	str	r0, [r5, #0]
 800a9b2:	0635      	lsls	r5, r6, #24
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	d501      	bpl.n	800a9bc <_printf_i+0x1cc>
 800a9b8:	6019      	str	r1, [r3, #0]
 800a9ba:	e002      	b.n	800a9c2 <_printf_i+0x1d2>
 800a9bc:	0670      	lsls	r0, r6, #25
 800a9be:	d5fb      	bpl.n	800a9b8 <_printf_i+0x1c8>
 800a9c0:	8019      	strh	r1, [r3, #0]
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	4615      	mov	r5, r2
 800a9c8:	e7ba      	b.n	800a940 <_printf_i+0x150>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	1d1a      	adds	r2, r3, #4
 800a9ce:	602a      	str	r2, [r5, #0]
 800a9d0:	681d      	ldr	r5, [r3, #0]
 800a9d2:	6862      	ldr	r2, [r4, #4]
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f7f5 fc02 	bl	80001e0 <memchr>
 800a9dc:	b108      	cbz	r0, 800a9e2 <_printf_i+0x1f2>
 800a9de:	1b40      	subs	r0, r0, r5
 800a9e0:	6060      	str	r0, [r4, #4]
 800a9e2:	6863      	ldr	r3, [r4, #4]
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ec:	e7a8      	b.n	800a940 <_printf_i+0x150>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	462a      	mov	r2, r5
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	47d0      	blx	sl
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d0ab      	beq.n	800a954 <_printf_i+0x164>
 800a9fc:	6823      	ldr	r3, [r4, #0]
 800a9fe:	079b      	lsls	r3, r3, #30
 800aa00:	d413      	bmi.n	800aa2a <_printf_i+0x23a>
 800aa02:	68e0      	ldr	r0, [r4, #12]
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	4298      	cmp	r0, r3
 800aa08:	bfb8      	it	lt
 800aa0a:	4618      	movlt	r0, r3
 800aa0c:	e7a4      	b.n	800a958 <_printf_i+0x168>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	4632      	mov	r2, r6
 800aa12:	4649      	mov	r1, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	47d0      	blx	sl
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d09b      	beq.n	800a954 <_printf_i+0x164>
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	68e3      	ldr	r3, [r4, #12]
 800aa20:	9903      	ldr	r1, [sp, #12]
 800aa22:	1a5b      	subs	r3, r3, r1
 800aa24:	42ab      	cmp	r3, r5
 800aa26:	dcf2      	bgt.n	800aa0e <_printf_i+0x21e>
 800aa28:	e7eb      	b.n	800aa02 <_printf_i+0x212>
 800aa2a:	2500      	movs	r5, #0
 800aa2c:	f104 0619 	add.w	r6, r4, #25
 800aa30:	e7f5      	b.n	800aa1e <_printf_i+0x22e>
 800aa32:	bf00      	nop
 800aa34:	0801069c 	.word	0x0801069c
 800aa38:	080106ad 	.word	0x080106ad

0800aa3c <_scanf_float>:
 800aa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa40:	b087      	sub	sp, #28
 800aa42:	4617      	mov	r7, r2
 800aa44:	9303      	str	r3, [sp, #12]
 800aa46:	688b      	ldr	r3, [r1, #8]
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa4e:	bf83      	ittte	hi
 800aa50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa54:	195b      	addhi	r3, r3, r5
 800aa56:	9302      	strhi	r3, [sp, #8]
 800aa58:	2300      	movls	r3, #0
 800aa5a:	bf86      	itte	hi
 800aa5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa60:	608b      	strhi	r3, [r1, #8]
 800aa62:	9302      	strls	r3, [sp, #8]
 800aa64:	680b      	ldr	r3, [r1, #0]
 800aa66:	468b      	mov	fp, r1
 800aa68:	2500      	movs	r5, #0
 800aa6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa6e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa76:	4680      	mov	r8, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	465e      	mov	r6, fp
 800aa7c:	46aa      	mov	sl, r5
 800aa7e:	46a9      	mov	r9, r5
 800aa80:	9501      	str	r5, [sp, #4]
 800aa82:	68a2      	ldr	r2, [r4, #8]
 800aa84:	b152      	cbz	r2, 800aa9c <_scanf_float+0x60>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b4e      	cmp	r3, #78	; 0x4e
 800aa8c:	d864      	bhi.n	800ab58 <_scanf_float+0x11c>
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d83c      	bhi.n	800ab0c <_scanf_float+0xd0>
 800aa92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa96:	b2c8      	uxtb	r0, r1
 800aa98:	280e      	cmp	r0, #14
 800aa9a:	d93a      	bls.n	800ab12 <_scanf_float+0xd6>
 800aa9c:	f1b9 0f00 	cmp.w	r9, #0
 800aaa0:	d003      	beq.n	800aaaa <_scanf_float+0x6e>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaae:	f1ba 0f01 	cmp.w	sl, #1
 800aab2:	f200 8113 	bhi.w	800acdc <_scanf_float+0x2a0>
 800aab6:	455e      	cmp	r6, fp
 800aab8:	f200 8105 	bhi.w	800acc6 <_scanf_float+0x28a>
 800aabc:	2501      	movs	r5, #1
 800aabe:	4628      	mov	r0, r5
 800aac0:	b007      	add	sp, #28
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aaca:	2a0d      	cmp	r2, #13
 800aacc:	d8e6      	bhi.n	800aa9c <_scanf_float+0x60>
 800aace:	a101      	add	r1, pc, #4	; (adr r1, 800aad4 <_scanf_float+0x98>)
 800aad0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aad4:	0800ac13 	.word	0x0800ac13
 800aad8:	0800aa9d 	.word	0x0800aa9d
 800aadc:	0800aa9d 	.word	0x0800aa9d
 800aae0:	0800aa9d 	.word	0x0800aa9d
 800aae4:	0800ac73 	.word	0x0800ac73
 800aae8:	0800ac4b 	.word	0x0800ac4b
 800aaec:	0800aa9d 	.word	0x0800aa9d
 800aaf0:	0800aa9d 	.word	0x0800aa9d
 800aaf4:	0800ac21 	.word	0x0800ac21
 800aaf8:	0800aa9d 	.word	0x0800aa9d
 800aafc:	0800aa9d 	.word	0x0800aa9d
 800ab00:	0800aa9d 	.word	0x0800aa9d
 800ab04:	0800aa9d 	.word	0x0800aa9d
 800ab08:	0800abd9 	.word	0x0800abd9
 800ab0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ab10:	e7db      	b.n	800aaca <_scanf_float+0x8e>
 800ab12:	290e      	cmp	r1, #14
 800ab14:	d8c2      	bhi.n	800aa9c <_scanf_float+0x60>
 800ab16:	a001      	add	r0, pc, #4	; (adr r0, 800ab1c <_scanf_float+0xe0>)
 800ab18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab1c:	0800abcb 	.word	0x0800abcb
 800ab20:	0800aa9d 	.word	0x0800aa9d
 800ab24:	0800abcb 	.word	0x0800abcb
 800ab28:	0800ac5f 	.word	0x0800ac5f
 800ab2c:	0800aa9d 	.word	0x0800aa9d
 800ab30:	0800ab79 	.word	0x0800ab79
 800ab34:	0800abb5 	.word	0x0800abb5
 800ab38:	0800abb5 	.word	0x0800abb5
 800ab3c:	0800abb5 	.word	0x0800abb5
 800ab40:	0800abb5 	.word	0x0800abb5
 800ab44:	0800abb5 	.word	0x0800abb5
 800ab48:	0800abb5 	.word	0x0800abb5
 800ab4c:	0800abb5 	.word	0x0800abb5
 800ab50:	0800abb5 	.word	0x0800abb5
 800ab54:	0800abb5 	.word	0x0800abb5
 800ab58:	2b6e      	cmp	r3, #110	; 0x6e
 800ab5a:	d809      	bhi.n	800ab70 <_scanf_float+0x134>
 800ab5c:	2b60      	cmp	r3, #96	; 0x60
 800ab5e:	d8b2      	bhi.n	800aac6 <_scanf_float+0x8a>
 800ab60:	2b54      	cmp	r3, #84	; 0x54
 800ab62:	d077      	beq.n	800ac54 <_scanf_float+0x218>
 800ab64:	2b59      	cmp	r3, #89	; 0x59
 800ab66:	d199      	bne.n	800aa9c <_scanf_float+0x60>
 800ab68:	2d07      	cmp	r5, #7
 800ab6a:	d197      	bne.n	800aa9c <_scanf_float+0x60>
 800ab6c:	2508      	movs	r5, #8
 800ab6e:	e029      	b.n	800abc4 <_scanf_float+0x188>
 800ab70:	2b74      	cmp	r3, #116	; 0x74
 800ab72:	d06f      	beq.n	800ac54 <_scanf_float+0x218>
 800ab74:	2b79      	cmp	r3, #121	; 0x79
 800ab76:	e7f6      	b.n	800ab66 <_scanf_float+0x12a>
 800ab78:	6821      	ldr	r1, [r4, #0]
 800ab7a:	05c8      	lsls	r0, r1, #23
 800ab7c:	d51a      	bpl.n	800abb4 <_scanf_float+0x178>
 800ab7e:	9b02      	ldr	r3, [sp, #8]
 800ab80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab84:	6021      	str	r1, [r4, #0]
 800ab86:	f109 0901 	add.w	r9, r9, #1
 800ab8a:	b11b      	cbz	r3, 800ab94 <_scanf_float+0x158>
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	3201      	adds	r2, #1
 800ab90:	9302      	str	r3, [sp, #8]
 800ab92:	60a2      	str	r2, [r4, #8]
 800ab94:	68a3      	ldr	r3, [r4, #8]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	6923      	ldr	r3, [r4, #16]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	6123      	str	r3, [r4, #16]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3b01      	subs	r3, #1
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	607b      	str	r3, [r7, #4]
 800aba8:	f340 8084 	ble.w	800acb4 <_scanf_float+0x278>
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	3301      	adds	r3, #1
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	e766      	b.n	800aa82 <_scanf_float+0x46>
 800abb4:	eb1a 0f05 	cmn.w	sl, r5
 800abb8:	f47f af70 	bne.w	800aa9c <_scanf_float+0x60>
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800abc2:	6022      	str	r2, [r4, #0]
 800abc4:	f806 3b01 	strb.w	r3, [r6], #1
 800abc8:	e7e4      	b.n	800ab94 <_scanf_float+0x158>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	0610      	lsls	r0, r2, #24
 800abce:	f57f af65 	bpl.w	800aa9c <_scanf_float+0x60>
 800abd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abd6:	e7f4      	b.n	800abc2 <_scanf_float+0x186>
 800abd8:	f1ba 0f00 	cmp.w	sl, #0
 800abdc:	d10e      	bne.n	800abfc <_scanf_float+0x1c0>
 800abde:	f1b9 0f00 	cmp.w	r9, #0
 800abe2:	d10e      	bne.n	800ac02 <_scanf_float+0x1c6>
 800abe4:	6822      	ldr	r2, [r4, #0]
 800abe6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abee:	d108      	bne.n	800ac02 <_scanf_float+0x1c6>
 800abf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	f04f 0a01 	mov.w	sl, #1
 800abfa:	e7e3      	b.n	800abc4 <_scanf_float+0x188>
 800abfc:	f1ba 0f02 	cmp.w	sl, #2
 800ac00:	d055      	beq.n	800acae <_scanf_float+0x272>
 800ac02:	2d01      	cmp	r5, #1
 800ac04:	d002      	beq.n	800ac0c <_scanf_float+0x1d0>
 800ac06:	2d04      	cmp	r5, #4
 800ac08:	f47f af48 	bne.w	800aa9c <_scanf_float+0x60>
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	b2ed      	uxtb	r5, r5
 800ac10:	e7d8      	b.n	800abc4 <_scanf_float+0x188>
 800ac12:	f1ba 0f01 	cmp.w	sl, #1
 800ac16:	f47f af41 	bne.w	800aa9c <_scanf_float+0x60>
 800ac1a:	f04f 0a02 	mov.w	sl, #2
 800ac1e:	e7d1      	b.n	800abc4 <_scanf_float+0x188>
 800ac20:	b97d      	cbnz	r5, 800ac42 <_scanf_float+0x206>
 800ac22:	f1b9 0f00 	cmp.w	r9, #0
 800ac26:	f47f af3c 	bne.w	800aaa2 <_scanf_float+0x66>
 800ac2a:	6822      	ldr	r2, [r4, #0]
 800ac2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac34:	f47f af39 	bne.w	800aaaa <_scanf_float+0x6e>
 800ac38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac3c:	6022      	str	r2, [r4, #0]
 800ac3e:	2501      	movs	r5, #1
 800ac40:	e7c0      	b.n	800abc4 <_scanf_float+0x188>
 800ac42:	2d03      	cmp	r5, #3
 800ac44:	d0e2      	beq.n	800ac0c <_scanf_float+0x1d0>
 800ac46:	2d05      	cmp	r5, #5
 800ac48:	e7de      	b.n	800ac08 <_scanf_float+0x1cc>
 800ac4a:	2d02      	cmp	r5, #2
 800ac4c:	f47f af26 	bne.w	800aa9c <_scanf_float+0x60>
 800ac50:	2503      	movs	r5, #3
 800ac52:	e7b7      	b.n	800abc4 <_scanf_float+0x188>
 800ac54:	2d06      	cmp	r5, #6
 800ac56:	f47f af21 	bne.w	800aa9c <_scanf_float+0x60>
 800ac5a:	2507      	movs	r5, #7
 800ac5c:	e7b2      	b.n	800abc4 <_scanf_float+0x188>
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	0591      	lsls	r1, r2, #22
 800ac62:	f57f af1b 	bpl.w	800aa9c <_scanf_float+0x60>
 800ac66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac70:	e7a8      	b.n	800abc4 <_scanf_float+0x188>
 800ac72:	6822      	ldr	r2, [r4, #0]
 800ac74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac7c:	d006      	beq.n	800ac8c <_scanf_float+0x250>
 800ac7e:	0550      	lsls	r0, r2, #21
 800ac80:	f57f af0c 	bpl.w	800aa9c <_scanf_float+0x60>
 800ac84:	f1b9 0f00 	cmp.w	r9, #0
 800ac88:	f43f af0f 	beq.w	800aaaa <_scanf_float+0x6e>
 800ac8c:	0591      	lsls	r1, r2, #22
 800ac8e:	bf58      	it	pl
 800ac90:	9901      	ldrpl	r1, [sp, #4]
 800ac92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac96:	bf58      	it	pl
 800ac98:	eba9 0101 	subpl.w	r1, r9, r1
 800ac9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aca0:	bf58      	it	pl
 800aca2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aca6:	6022      	str	r2, [r4, #0]
 800aca8:	f04f 0900 	mov.w	r9, #0
 800acac:	e78a      	b.n	800abc4 <_scanf_float+0x188>
 800acae:	f04f 0a03 	mov.w	sl, #3
 800acb2:	e787      	b.n	800abc4 <_scanf_float+0x188>
 800acb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acb8:	4639      	mov	r1, r7
 800acba:	4640      	mov	r0, r8
 800acbc:	4798      	blx	r3
 800acbe:	2800      	cmp	r0, #0
 800acc0:	f43f aedf 	beq.w	800aa82 <_scanf_float+0x46>
 800acc4:	e6ea      	b.n	800aa9c <_scanf_float+0x60>
 800acc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acce:	463a      	mov	r2, r7
 800acd0:	4640      	mov	r0, r8
 800acd2:	4798      	blx	r3
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	e6ec      	b.n	800aab6 <_scanf_float+0x7a>
 800acdc:	1e6b      	subs	r3, r5, #1
 800acde:	2b06      	cmp	r3, #6
 800ace0:	d825      	bhi.n	800ad2e <_scanf_float+0x2f2>
 800ace2:	2d02      	cmp	r5, #2
 800ace4:	d836      	bhi.n	800ad54 <_scanf_float+0x318>
 800ace6:	455e      	cmp	r6, fp
 800ace8:	f67f aee8 	bls.w	800aabc <_scanf_float+0x80>
 800acec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acf0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acf4:	463a      	mov	r2, r7
 800acf6:	4640      	mov	r0, r8
 800acf8:	4798      	blx	r3
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	6123      	str	r3, [r4, #16]
 800ad00:	e7f1      	b.n	800ace6 <_scanf_float+0x2aa>
 800ad02:	9802      	ldr	r0, [sp, #8]
 800ad04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ad0c:	9002      	str	r0, [sp, #8]
 800ad0e:	463a      	mov	r2, r7
 800ad10:	4640      	mov	r0, r8
 800ad12:	4798      	blx	r3
 800ad14:	6923      	ldr	r3, [r4, #16]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad1e:	fa5f fa8a 	uxtb.w	sl, sl
 800ad22:	f1ba 0f02 	cmp.w	sl, #2
 800ad26:	d1ec      	bne.n	800ad02 <_scanf_float+0x2c6>
 800ad28:	3d03      	subs	r5, #3
 800ad2a:	b2ed      	uxtb	r5, r5
 800ad2c:	1b76      	subs	r6, r6, r5
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	05da      	lsls	r2, r3, #23
 800ad32:	d52f      	bpl.n	800ad94 <_scanf_float+0x358>
 800ad34:	055b      	lsls	r3, r3, #21
 800ad36:	d510      	bpl.n	800ad5a <_scanf_float+0x31e>
 800ad38:	455e      	cmp	r6, fp
 800ad3a:	f67f aebf 	bls.w	800aabc <_scanf_float+0x80>
 800ad3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad46:	463a      	mov	r2, r7
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4798      	blx	r3
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	6123      	str	r3, [r4, #16]
 800ad52:	e7f1      	b.n	800ad38 <_scanf_float+0x2fc>
 800ad54:	46aa      	mov	sl, r5
 800ad56:	9602      	str	r6, [sp, #8]
 800ad58:	e7df      	b.n	800ad1a <_scanf_float+0x2de>
 800ad5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	2965      	cmp	r1, #101	; 0x65
 800ad62:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad66:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	d00c      	beq.n	800ad88 <_scanf_float+0x34c>
 800ad6e:	2945      	cmp	r1, #69	; 0x45
 800ad70:	d00a      	beq.n	800ad88 <_scanf_float+0x34c>
 800ad72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad76:	463a      	mov	r2, r7
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4798      	blx	r3
 800ad7c:	6923      	ldr	r3, [r4, #16]
 800ad7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad82:	3b01      	subs	r3, #1
 800ad84:	1eb5      	subs	r5, r6, #2
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad8c:	463a      	mov	r2, r7
 800ad8e:	4640      	mov	r0, r8
 800ad90:	4798      	blx	r3
 800ad92:	462e      	mov	r6, r5
 800ad94:	6825      	ldr	r5, [r4, #0]
 800ad96:	f015 0510 	ands.w	r5, r5, #16
 800ad9a:	d159      	bne.n	800ae50 <_scanf_float+0x414>
 800ad9c:	7035      	strb	r5, [r6, #0]
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ada4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada8:	d11b      	bne.n	800ade2 <_scanf_float+0x3a6>
 800adaa:	9b01      	ldr	r3, [sp, #4]
 800adac:	454b      	cmp	r3, r9
 800adae:	eba3 0209 	sub.w	r2, r3, r9
 800adb2:	d123      	bne.n	800adfc <_scanf_float+0x3c0>
 800adb4:	2200      	movs	r2, #0
 800adb6:	4659      	mov	r1, fp
 800adb8:	4640      	mov	r0, r8
 800adba:	f000 ff1f 	bl	800bbfc <_strtod_r>
 800adbe:	6822      	ldr	r2, [r4, #0]
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	f012 0f02 	tst.w	r2, #2
 800adc6:	ec57 6b10 	vmov	r6, r7, d0
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	d021      	beq.n	800ae12 <_scanf_float+0x3d6>
 800adce:	9903      	ldr	r1, [sp, #12]
 800add0:	1d1a      	adds	r2, r3, #4
 800add2:	600a      	str	r2, [r1, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	e9c3 6700 	strd	r6, r7, [r3]
 800adda:	68e3      	ldr	r3, [r4, #12]
 800addc:	3301      	adds	r3, #1
 800adde:	60e3      	str	r3, [r4, #12]
 800ade0:	e66d      	b.n	800aabe <_scanf_float+0x82>
 800ade2:	9b04      	ldr	r3, [sp, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0e5      	beq.n	800adb4 <_scanf_float+0x378>
 800ade8:	9905      	ldr	r1, [sp, #20]
 800adea:	230a      	movs	r3, #10
 800adec:	462a      	mov	r2, r5
 800adee:	3101      	adds	r1, #1
 800adf0:	4640      	mov	r0, r8
 800adf2:	f000 ff8b 	bl	800bd0c <_strtol_r>
 800adf6:	9b04      	ldr	r3, [sp, #16]
 800adf8:	9e05      	ldr	r6, [sp, #20]
 800adfa:	1ac2      	subs	r2, r0, r3
 800adfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae00:	429e      	cmp	r6, r3
 800ae02:	bf28      	it	cs
 800ae04:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ae08:	4912      	ldr	r1, [pc, #72]	; (800ae54 <_scanf_float+0x418>)
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 f82c 	bl	800ae68 <siprintf>
 800ae10:	e7d0      	b.n	800adb4 <_scanf_float+0x378>
 800ae12:	9903      	ldr	r1, [sp, #12]
 800ae14:	f012 0f04 	tst.w	r2, #4
 800ae18:	f103 0204 	add.w	r2, r3, #4
 800ae1c:	600a      	str	r2, [r1, #0]
 800ae1e:	d1d9      	bne.n	800add4 <_scanf_float+0x398>
 800ae20:	f8d3 8000 	ldr.w	r8, [r3]
 800ae24:	ee10 2a10 	vmov	r2, s0
 800ae28:	ee10 0a10 	vmov	r0, s0
 800ae2c:	463b      	mov	r3, r7
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fe7c 	bl	8000b2c <__aeabi_dcmpun>
 800ae34:	b128      	cbz	r0, 800ae42 <_scanf_float+0x406>
 800ae36:	4808      	ldr	r0, [pc, #32]	; (800ae58 <_scanf_float+0x41c>)
 800ae38:	f000 f810 	bl	800ae5c <nanf>
 800ae3c:	ed88 0a00 	vstr	s0, [r8]
 800ae40:	e7cb      	b.n	800adda <_scanf_float+0x39e>
 800ae42:	4630      	mov	r0, r6
 800ae44:	4639      	mov	r1, r7
 800ae46:	f7f5 fecf 	bl	8000be8 <__aeabi_d2f>
 800ae4a:	f8c8 0000 	str.w	r0, [r8]
 800ae4e:	e7c4      	b.n	800adda <_scanf_float+0x39e>
 800ae50:	2500      	movs	r5, #0
 800ae52:	e634      	b.n	800aabe <_scanf_float+0x82>
 800ae54:	080106be 	.word	0x080106be
 800ae58:	08010ae3 	.word	0x08010ae3

0800ae5c <nanf>:
 800ae5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae64 <nanf+0x8>
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	7fc00000 	.word	0x7fc00000

0800ae68 <siprintf>:
 800ae68:	b40e      	push	{r1, r2, r3}
 800ae6a:	b500      	push	{lr}
 800ae6c:	b09c      	sub	sp, #112	; 0x70
 800ae6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae70:	9002      	str	r0, [sp, #8]
 800ae72:	9006      	str	r0, [sp, #24]
 800ae74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae78:	4809      	ldr	r0, [pc, #36]	; (800aea0 <siprintf+0x38>)
 800ae7a:	9107      	str	r1, [sp, #28]
 800ae7c:	9104      	str	r1, [sp, #16]
 800ae7e:	4909      	ldr	r1, [pc, #36]	; (800aea4 <siprintf+0x3c>)
 800ae80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae84:	9105      	str	r1, [sp, #20]
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	a902      	add	r1, sp, #8
 800ae8c:	f002 ffa0 	bl	800ddd0 <_svfiprintf_r>
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	b01c      	add	sp, #112	; 0x70
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	20000080 	.word	0x20000080
 800aea4:	ffff0208 	.word	0xffff0208

0800aea8 <siscanf>:
 800aea8:	b40e      	push	{r1, r2, r3}
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	b09f      	sub	sp, #124	; 0x7c
 800aeae:	ac21      	add	r4, sp, #132	; 0x84
 800aeb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800aeb4:	f854 2b04 	ldr.w	r2, [r4], #4
 800aeb8:	9201      	str	r2, [sp, #4]
 800aeba:	f8ad 101c 	strh.w	r1, [sp, #28]
 800aebe:	9004      	str	r0, [sp, #16]
 800aec0:	9008      	str	r0, [sp, #32]
 800aec2:	f7f5 f985 	bl	80001d0 <strlen>
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <siscanf+0x50>)
 800aec8:	9005      	str	r0, [sp, #20]
 800aeca:	9009      	str	r0, [sp, #36]	; 0x24
 800aecc:	930d      	str	r3, [sp, #52]	; 0x34
 800aece:	480b      	ldr	r0, [pc, #44]	; (800aefc <siscanf+0x54>)
 800aed0:	9a01      	ldr	r2, [sp, #4]
 800aed2:	6800      	ldr	r0, [r0, #0]
 800aed4:	9403      	str	r4, [sp, #12]
 800aed6:	2300      	movs	r3, #0
 800aed8:	9311      	str	r3, [sp, #68]	; 0x44
 800aeda:	9316      	str	r3, [sp, #88]	; 0x58
 800aedc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aee0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800aee4:	a904      	add	r1, sp, #16
 800aee6:	4623      	mov	r3, r4
 800aee8:	f003 f8cc 	bl	800e084 <__ssvfiscanf_r>
 800aeec:	b01f      	add	sp, #124	; 0x7c
 800aeee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef2:	b003      	add	sp, #12
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	0800af23 	.word	0x0800af23
 800aefc:	20000080 	.word	0x20000080

0800af00 <__sread>:
 800af00:	b510      	push	{r4, lr}
 800af02:	460c      	mov	r4, r1
 800af04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af08:	f003 fb86 	bl	800e618 <_read_r>
 800af0c:	2800      	cmp	r0, #0
 800af0e:	bfab      	itete	ge
 800af10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af12:	89a3      	ldrhlt	r3, [r4, #12]
 800af14:	181b      	addge	r3, r3, r0
 800af16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af1a:	bfac      	ite	ge
 800af1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af1e:	81a3      	strhlt	r3, [r4, #12]
 800af20:	bd10      	pop	{r4, pc}

0800af22 <__seofread>:
 800af22:	2000      	movs	r0, #0
 800af24:	4770      	bx	lr

0800af26 <__swrite>:
 800af26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	461f      	mov	r7, r3
 800af2c:	898b      	ldrh	r3, [r1, #12]
 800af2e:	05db      	lsls	r3, r3, #23
 800af30:	4605      	mov	r5, r0
 800af32:	460c      	mov	r4, r1
 800af34:	4616      	mov	r6, r2
 800af36:	d505      	bpl.n	800af44 <__swrite+0x1e>
 800af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3c:	2302      	movs	r3, #2
 800af3e:	2200      	movs	r2, #0
 800af40:	f002 f8f8 	bl	800d134 <_lseek_r>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	4632      	mov	r2, r6
 800af52:	463b      	mov	r3, r7
 800af54:	4628      	mov	r0, r5
 800af56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	f000 bed9 	b.w	800bd10 <_write_r>

0800af5e <__sseek>:
 800af5e:	b510      	push	{r4, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af66:	f002 f8e5 	bl	800d134 <_lseek_r>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	bf15      	itete	ne
 800af70:	6560      	strne	r0, [r4, #84]	; 0x54
 800af72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af7a:	81a3      	strheq	r3, [r4, #12]
 800af7c:	bf18      	it	ne
 800af7e:	81a3      	strhne	r3, [r4, #12]
 800af80:	bd10      	pop	{r4, pc}

0800af82 <__sclose>:
 800af82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af86:	f000 bed5 	b.w	800bd34 <_close_r>

0800af8a <strncmp>:
 800af8a:	b510      	push	{r4, lr}
 800af8c:	b17a      	cbz	r2, 800afae <strncmp+0x24>
 800af8e:	4603      	mov	r3, r0
 800af90:	3901      	subs	r1, #1
 800af92:	1884      	adds	r4, r0, r2
 800af94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af9c:	4290      	cmp	r0, r2
 800af9e:	d101      	bne.n	800afa4 <strncmp+0x1a>
 800afa0:	42a3      	cmp	r3, r4
 800afa2:	d101      	bne.n	800afa8 <strncmp+0x1e>
 800afa4:	1a80      	subs	r0, r0, r2
 800afa6:	bd10      	pop	{r4, pc}
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d1f3      	bne.n	800af94 <strncmp+0xa>
 800afac:	e7fa      	b.n	800afa4 <strncmp+0x1a>
 800afae:	4610      	mov	r0, r2
 800afb0:	e7f9      	b.n	800afa6 <strncmp+0x1c>

0800afb2 <sulp>:
 800afb2:	b570      	push	{r4, r5, r6, lr}
 800afb4:	4604      	mov	r4, r0
 800afb6:	460d      	mov	r5, r1
 800afb8:	ec45 4b10 	vmov	d0, r4, r5
 800afbc:	4616      	mov	r6, r2
 800afbe:	f002 fc65 	bl	800d88c <__ulp>
 800afc2:	ec51 0b10 	vmov	r0, r1, d0
 800afc6:	b17e      	cbz	r6, 800afe8 <sulp+0x36>
 800afc8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800afcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	dd09      	ble.n	800afe8 <sulp+0x36>
 800afd4:	051b      	lsls	r3, r3, #20
 800afd6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800afda:	2400      	movs	r4, #0
 800afdc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800afe0:	4622      	mov	r2, r4
 800afe2:	462b      	mov	r3, r5
 800afe4:	f7f5 fb08 	bl	80005f8 <__aeabi_dmul>
 800afe8:	bd70      	pop	{r4, r5, r6, pc}
 800afea:	0000      	movs	r0, r0
 800afec:	0000      	movs	r0, r0
	...

0800aff0 <_strtod_l>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	ed2d 8b02 	vpush	{d8}
 800aff8:	b09d      	sub	sp, #116	; 0x74
 800affa:	461f      	mov	r7, r3
 800affc:	2300      	movs	r3, #0
 800affe:	9318      	str	r3, [sp, #96]	; 0x60
 800b000:	4ba2      	ldr	r3, [pc, #648]	; (800b28c <_strtod_l+0x29c>)
 800b002:	9213      	str	r2, [sp, #76]	; 0x4c
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	9305      	str	r3, [sp, #20]
 800b008:	4604      	mov	r4, r0
 800b00a:	4618      	mov	r0, r3
 800b00c:	4688      	mov	r8, r1
 800b00e:	f7f5 f8df 	bl	80001d0 <strlen>
 800b012:	f04f 0a00 	mov.w	sl, #0
 800b016:	4605      	mov	r5, r0
 800b018:	f04f 0b00 	mov.w	fp, #0
 800b01c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b022:	781a      	ldrb	r2, [r3, #0]
 800b024:	2a2b      	cmp	r2, #43	; 0x2b
 800b026:	d04e      	beq.n	800b0c6 <_strtod_l+0xd6>
 800b028:	d83b      	bhi.n	800b0a2 <_strtod_l+0xb2>
 800b02a:	2a0d      	cmp	r2, #13
 800b02c:	d834      	bhi.n	800b098 <_strtod_l+0xa8>
 800b02e:	2a08      	cmp	r2, #8
 800b030:	d834      	bhi.n	800b09c <_strtod_l+0xac>
 800b032:	2a00      	cmp	r2, #0
 800b034:	d03e      	beq.n	800b0b4 <_strtod_l+0xc4>
 800b036:	2300      	movs	r3, #0
 800b038:	930a      	str	r3, [sp, #40]	; 0x28
 800b03a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b03c:	7833      	ldrb	r3, [r6, #0]
 800b03e:	2b30      	cmp	r3, #48	; 0x30
 800b040:	f040 80b0 	bne.w	800b1a4 <_strtod_l+0x1b4>
 800b044:	7873      	ldrb	r3, [r6, #1]
 800b046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b04a:	2b58      	cmp	r3, #88	; 0x58
 800b04c:	d168      	bne.n	800b120 <_strtod_l+0x130>
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	ab18      	add	r3, sp, #96	; 0x60
 800b054:	9702      	str	r7, [sp, #8]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4a8d      	ldr	r2, [pc, #564]	; (800b290 <_strtod_l+0x2a0>)
 800b05a:	ab19      	add	r3, sp, #100	; 0x64
 800b05c:	a917      	add	r1, sp, #92	; 0x5c
 800b05e:	4620      	mov	r0, r4
 800b060:	f001 fd5c 	bl	800cb1c <__gethex>
 800b064:	f010 0707 	ands.w	r7, r0, #7
 800b068:	4605      	mov	r5, r0
 800b06a:	d005      	beq.n	800b078 <_strtod_l+0x88>
 800b06c:	2f06      	cmp	r7, #6
 800b06e:	d12c      	bne.n	800b0ca <_strtod_l+0xda>
 800b070:	3601      	adds	r6, #1
 800b072:	2300      	movs	r3, #0
 800b074:	9617      	str	r6, [sp, #92]	; 0x5c
 800b076:	930a      	str	r3, [sp, #40]	; 0x28
 800b078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f040 8590 	bne.w	800bba0 <_strtod_l+0xbb0>
 800b080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b082:	b1eb      	cbz	r3, 800b0c0 <_strtod_l+0xd0>
 800b084:	4652      	mov	r2, sl
 800b086:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b08a:	ec43 2b10 	vmov	d0, r2, r3
 800b08e:	b01d      	add	sp, #116	; 0x74
 800b090:	ecbd 8b02 	vpop	{d8}
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	2a20      	cmp	r2, #32
 800b09a:	d1cc      	bne.n	800b036 <_strtod_l+0x46>
 800b09c:	3301      	adds	r3, #1
 800b09e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0a0:	e7be      	b.n	800b020 <_strtod_l+0x30>
 800b0a2:	2a2d      	cmp	r2, #45	; 0x2d
 800b0a4:	d1c7      	bne.n	800b036 <_strtod_l+0x46>
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0aa:	1c5a      	adds	r2, r3, #1
 800b0ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0ae:	785b      	ldrb	r3, [r3, #1]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1c2      	bne.n	800b03a <_strtod_l+0x4a>
 800b0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f040 856e 	bne.w	800bb9c <_strtod_l+0xbac>
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	465b      	mov	r3, fp
 800b0c4:	e7e1      	b.n	800b08a <_strtod_l+0x9a>
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	e7ee      	b.n	800b0a8 <_strtod_l+0xb8>
 800b0ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0cc:	b13a      	cbz	r2, 800b0de <_strtod_l+0xee>
 800b0ce:	2135      	movs	r1, #53	; 0x35
 800b0d0:	a81a      	add	r0, sp, #104	; 0x68
 800b0d2:	f002 fce6 	bl	800daa2 <__copybits>
 800b0d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f002 f8a5 	bl	800d228 <_Bfree>
 800b0de:	3f01      	subs	r7, #1
 800b0e0:	2f04      	cmp	r7, #4
 800b0e2:	d806      	bhi.n	800b0f2 <_strtod_l+0x102>
 800b0e4:	e8df f007 	tbb	[pc, r7]
 800b0e8:	1714030a 	.word	0x1714030a
 800b0ec:	0a          	.byte	0x0a
 800b0ed:	00          	.byte	0x00
 800b0ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b0f2:	0728      	lsls	r0, r5, #28
 800b0f4:	d5c0      	bpl.n	800b078 <_strtod_l+0x88>
 800b0f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b0fa:	e7bd      	b.n	800b078 <_strtod_l+0x88>
 800b0fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b100:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b102:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b106:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b10a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b10e:	e7f0      	b.n	800b0f2 <_strtod_l+0x102>
 800b110:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b294 <_strtod_l+0x2a4>
 800b114:	e7ed      	b.n	800b0f2 <_strtod_l+0x102>
 800b116:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b11a:	f04f 3aff 	mov.w	sl, #4294967295
 800b11e:	e7e8      	b.n	800b0f2 <_strtod_l+0x102>
 800b120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	9217      	str	r2, [sp, #92]	; 0x5c
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b30      	cmp	r3, #48	; 0x30
 800b12a:	d0f9      	beq.n	800b120 <_strtod_l+0x130>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d0a3      	beq.n	800b078 <_strtod_l+0x88>
 800b130:	2301      	movs	r3, #1
 800b132:	f04f 0900 	mov.w	r9, #0
 800b136:	9304      	str	r3, [sp, #16]
 800b138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b13a:	9308      	str	r3, [sp, #32]
 800b13c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b140:	464f      	mov	r7, r9
 800b142:	220a      	movs	r2, #10
 800b144:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b146:	7806      	ldrb	r6, [r0, #0]
 800b148:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b14c:	b2d9      	uxtb	r1, r3
 800b14e:	2909      	cmp	r1, #9
 800b150:	d92a      	bls.n	800b1a8 <_strtod_l+0x1b8>
 800b152:	9905      	ldr	r1, [sp, #20]
 800b154:	462a      	mov	r2, r5
 800b156:	f7ff ff18 	bl	800af8a <strncmp>
 800b15a:	b398      	cbz	r0, 800b1c4 <_strtod_l+0x1d4>
 800b15c:	2000      	movs	r0, #0
 800b15e:	4632      	mov	r2, r6
 800b160:	463d      	mov	r5, r7
 800b162:	9005      	str	r0, [sp, #20]
 800b164:	4603      	mov	r3, r0
 800b166:	2a65      	cmp	r2, #101	; 0x65
 800b168:	d001      	beq.n	800b16e <_strtod_l+0x17e>
 800b16a:	2a45      	cmp	r2, #69	; 0x45
 800b16c:	d118      	bne.n	800b1a0 <_strtod_l+0x1b0>
 800b16e:	b91d      	cbnz	r5, 800b178 <_strtod_l+0x188>
 800b170:	9a04      	ldr	r2, [sp, #16]
 800b172:	4302      	orrs	r2, r0
 800b174:	d09e      	beq.n	800b0b4 <_strtod_l+0xc4>
 800b176:	2500      	movs	r5, #0
 800b178:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b17c:	f108 0201 	add.w	r2, r8, #1
 800b180:	9217      	str	r2, [sp, #92]	; 0x5c
 800b182:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b186:	2a2b      	cmp	r2, #43	; 0x2b
 800b188:	d075      	beq.n	800b276 <_strtod_l+0x286>
 800b18a:	2a2d      	cmp	r2, #45	; 0x2d
 800b18c:	d07b      	beq.n	800b286 <_strtod_l+0x296>
 800b18e:	f04f 0c00 	mov.w	ip, #0
 800b192:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b196:	2909      	cmp	r1, #9
 800b198:	f240 8082 	bls.w	800b2a0 <_strtod_l+0x2b0>
 800b19c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b1a0:	2600      	movs	r6, #0
 800b1a2:	e09d      	b.n	800b2e0 <_strtod_l+0x2f0>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	e7c4      	b.n	800b132 <_strtod_l+0x142>
 800b1a8:	2f08      	cmp	r7, #8
 800b1aa:	bfd8      	it	le
 800b1ac:	9907      	ldrle	r1, [sp, #28]
 800b1ae:	f100 0001 	add.w	r0, r0, #1
 800b1b2:	bfda      	itte	le
 800b1b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1b8:	9307      	strle	r3, [sp, #28]
 800b1ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b1be:	3701      	adds	r7, #1
 800b1c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b1c2:	e7bf      	b.n	800b144 <_strtod_l+0x154>
 800b1c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1c6:	195a      	adds	r2, r3, r5
 800b1c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1ca:	5d5a      	ldrb	r2, [r3, r5]
 800b1cc:	2f00      	cmp	r7, #0
 800b1ce:	d037      	beq.n	800b240 <_strtod_l+0x250>
 800b1d0:	9005      	str	r0, [sp, #20]
 800b1d2:	463d      	mov	r5, r7
 800b1d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b1d8:	2b09      	cmp	r3, #9
 800b1da:	d912      	bls.n	800b202 <_strtod_l+0x212>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e7c2      	b.n	800b166 <_strtod_l+0x176>
 800b1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1e6:	785a      	ldrb	r2, [r3, #1]
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	2a30      	cmp	r2, #48	; 0x30
 800b1ec:	d0f8      	beq.n	800b1e0 <_strtod_l+0x1f0>
 800b1ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	f200 84d9 	bhi.w	800bbaa <_strtod_l+0xbba>
 800b1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1fa:	9005      	str	r0, [sp, #20]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	9308      	str	r3, [sp, #32]
 800b200:	4605      	mov	r5, r0
 800b202:	3a30      	subs	r2, #48	; 0x30
 800b204:	f100 0301 	add.w	r3, r0, #1
 800b208:	d014      	beq.n	800b234 <_strtod_l+0x244>
 800b20a:	9905      	ldr	r1, [sp, #20]
 800b20c:	4419      	add	r1, r3
 800b20e:	9105      	str	r1, [sp, #20]
 800b210:	462b      	mov	r3, r5
 800b212:	eb00 0e05 	add.w	lr, r0, r5
 800b216:	210a      	movs	r1, #10
 800b218:	4573      	cmp	r3, lr
 800b21a:	d113      	bne.n	800b244 <_strtod_l+0x254>
 800b21c:	182b      	adds	r3, r5, r0
 800b21e:	2b08      	cmp	r3, #8
 800b220:	f105 0501 	add.w	r5, r5, #1
 800b224:	4405      	add	r5, r0
 800b226:	dc1c      	bgt.n	800b262 <_strtod_l+0x272>
 800b228:	9907      	ldr	r1, [sp, #28]
 800b22a:	230a      	movs	r3, #10
 800b22c:	fb03 2301 	mla	r3, r3, r1, r2
 800b230:	9307      	str	r3, [sp, #28]
 800b232:	2300      	movs	r3, #0
 800b234:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b236:	1c51      	adds	r1, r2, #1
 800b238:	9117      	str	r1, [sp, #92]	; 0x5c
 800b23a:	7852      	ldrb	r2, [r2, #1]
 800b23c:	4618      	mov	r0, r3
 800b23e:	e7c9      	b.n	800b1d4 <_strtod_l+0x1e4>
 800b240:	4638      	mov	r0, r7
 800b242:	e7d2      	b.n	800b1ea <_strtod_l+0x1fa>
 800b244:	2b08      	cmp	r3, #8
 800b246:	dc04      	bgt.n	800b252 <_strtod_l+0x262>
 800b248:	9e07      	ldr	r6, [sp, #28]
 800b24a:	434e      	muls	r6, r1
 800b24c:	9607      	str	r6, [sp, #28]
 800b24e:	3301      	adds	r3, #1
 800b250:	e7e2      	b.n	800b218 <_strtod_l+0x228>
 800b252:	f103 0c01 	add.w	ip, r3, #1
 800b256:	f1bc 0f10 	cmp.w	ip, #16
 800b25a:	bfd8      	it	le
 800b25c:	fb01 f909 	mulle.w	r9, r1, r9
 800b260:	e7f5      	b.n	800b24e <_strtod_l+0x25e>
 800b262:	2d10      	cmp	r5, #16
 800b264:	bfdc      	itt	le
 800b266:	230a      	movle	r3, #10
 800b268:	fb03 2909 	mlale	r9, r3, r9, r2
 800b26c:	e7e1      	b.n	800b232 <_strtod_l+0x242>
 800b26e:	2300      	movs	r3, #0
 800b270:	9305      	str	r3, [sp, #20]
 800b272:	2301      	movs	r3, #1
 800b274:	e77c      	b.n	800b170 <_strtod_l+0x180>
 800b276:	f04f 0c00 	mov.w	ip, #0
 800b27a:	f108 0202 	add.w	r2, r8, #2
 800b27e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b280:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b284:	e785      	b.n	800b192 <_strtod_l+0x1a2>
 800b286:	f04f 0c01 	mov.w	ip, #1
 800b28a:	e7f6      	b.n	800b27a <_strtod_l+0x28a>
 800b28c:	08010910 	.word	0x08010910
 800b290:	080106c4 	.word	0x080106c4
 800b294:	7ff00000 	.word	0x7ff00000
 800b298:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b29a:	1c51      	adds	r1, r2, #1
 800b29c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b29e:	7852      	ldrb	r2, [r2, #1]
 800b2a0:	2a30      	cmp	r2, #48	; 0x30
 800b2a2:	d0f9      	beq.n	800b298 <_strtod_l+0x2a8>
 800b2a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b2a8:	2908      	cmp	r1, #8
 800b2aa:	f63f af79 	bhi.w	800b1a0 <_strtod_l+0x1b0>
 800b2ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b2b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2b4:	9206      	str	r2, [sp, #24]
 800b2b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2b8:	1c51      	adds	r1, r2, #1
 800b2ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2bc:	7852      	ldrb	r2, [r2, #1]
 800b2be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b2c2:	2e09      	cmp	r6, #9
 800b2c4:	d937      	bls.n	800b336 <_strtod_l+0x346>
 800b2c6:	9e06      	ldr	r6, [sp, #24]
 800b2c8:	1b89      	subs	r1, r1, r6
 800b2ca:	2908      	cmp	r1, #8
 800b2cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b2d0:	dc02      	bgt.n	800b2d8 <_strtod_l+0x2e8>
 800b2d2:	4576      	cmp	r6, lr
 800b2d4:	bfa8      	it	ge
 800b2d6:	4676      	movge	r6, lr
 800b2d8:	f1bc 0f00 	cmp.w	ip, #0
 800b2dc:	d000      	beq.n	800b2e0 <_strtod_l+0x2f0>
 800b2de:	4276      	negs	r6, r6
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	d14d      	bne.n	800b380 <_strtod_l+0x390>
 800b2e4:	9904      	ldr	r1, [sp, #16]
 800b2e6:	4301      	orrs	r1, r0
 800b2e8:	f47f aec6 	bne.w	800b078 <_strtod_l+0x88>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f47f aee1 	bne.w	800b0b4 <_strtod_l+0xc4>
 800b2f2:	2a69      	cmp	r2, #105	; 0x69
 800b2f4:	d027      	beq.n	800b346 <_strtod_l+0x356>
 800b2f6:	dc24      	bgt.n	800b342 <_strtod_l+0x352>
 800b2f8:	2a49      	cmp	r2, #73	; 0x49
 800b2fa:	d024      	beq.n	800b346 <_strtod_l+0x356>
 800b2fc:	2a4e      	cmp	r2, #78	; 0x4e
 800b2fe:	f47f aed9 	bne.w	800b0b4 <_strtod_l+0xc4>
 800b302:	499f      	ldr	r1, [pc, #636]	; (800b580 <_strtod_l+0x590>)
 800b304:	a817      	add	r0, sp, #92	; 0x5c
 800b306:	f001 fe61 	bl	800cfcc <__match>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	f43f aed2 	beq.w	800b0b4 <_strtod_l+0xc4>
 800b310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b28      	cmp	r3, #40	; 0x28
 800b316:	d12d      	bne.n	800b374 <_strtod_l+0x384>
 800b318:	499a      	ldr	r1, [pc, #616]	; (800b584 <_strtod_l+0x594>)
 800b31a:	aa1a      	add	r2, sp, #104	; 0x68
 800b31c:	a817      	add	r0, sp, #92	; 0x5c
 800b31e:	f001 fe69 	bl	800cff4 <__hexnan>
 800b322:	2805      	cmp	r0, #5
 800b324:	d126      	bne.n	800b374 <_strtod_l+0x384>
 800b326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b328:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b32c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b330:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b334:	e6a0      	b.n	800b078 <_strtod_l+0x88>
 800b336:	210a      	movs	r1, #10
 800b338:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b33c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b340:	e7b9      	b.n	800b2b6 <_strtod_l+0x2c6>
 800b342:	2a6e      	cmp	r2, #110	; 0x6e
 800b344:	e7db      	b.n	800b2fe <_strtod_l+0x30e>
 800b346:	4990      	ldr	r1, [pc, #576]	; (800b588 <_strtod_l+0x598>)
 800b348:	a817      	add	r0, sp, #92	; 0x5c
 800b34a:	f001 fe3f 	bl	800cfcc <__match>
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f aeb0 	beq.w	800b0b4 <_strtod_l+0xc4>
 800b354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b356:	498d      	ldr	r1, [pc, #564]	; (800b58c <_strtod_l+0x59c>)
 800b358:	3b01      	subs	r3, #1
 800b35a:	a817      	add	r0, sp, #92	; 0x5c
 800b35c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b35e:	f001 fe35 	bl	800cfcc <__match>
 800b362:	b910      	cbnz	r0, 800b36a <_strtod_l+0x37a>
 800b364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b366:	3301      	adds	r3, #1
 800b368:	9317      	str	r3, [sp, #92]	; 0x5c
 800b36a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b59c <_strtod_l+0x5ac>
 800b36e:	f04f 0a00 	mov.w	sl, #0
 800b372:	e681      	b.n	800b078 <_strtod_l+0x88>
 800b374:	4886      	ldr	r0, [pc, #536]	; (800b590 <_strtod_l+0x5a0>)
 800b376:	f003 f963 	bl	800e640 <nan>
 800b37a:	ec5b ab10 	vmov	sl, fp, d0
 800b37e:	e67b      	b.n	800b078 <_strtod_l+0x88>
 800b380:	9b05      	ldr	r3, [sp, #20]
 800b382:	9807      	ldr	r0, [sp, #28]
 800b384:	1af3      	subs	r3, r6, r3
 800b386:	2f00      	cmp	r7, #0
 800b388:	bf08      	it	eq
 800b38a:	462f      	moveq	r7, r5
 800b38c:	2d10      	cmp	r5, #16
 800b38e:	9306      	str	r3, [sp, #24]
 800b390:	46a8      	mov	r8, r5
 800b392:	bfa8      	it	ge
 800b394:	f04f 0810 	movge.w	r8, #16
 800b398:	f7f5 f8b4 	bl	8000504 <__aeabi_ui2d>
 800b39c:	2d09      	cmp	r5, #9
 800b39e:	4682      	mov	sl, r0
 800b3a0:	468b      	mov	fp, r1
 800b3a2:	dd13      	ble.n	800b3cc <_strtod_l+0x3dc>
 800b3a4:	4b7b      	ldr	r3, [pc, #492]	; (800b594 <_strtod_l+0x5a4>)
 800b3a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b3aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3ae:	f7f5 f923 	bl	80005f8 <__aeabi_dmul>
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	4648      	mov	r0, r9
 800b3b6:	468b      	mov	fp, r1
 800b3b8:	f7f5 f8a4 	bl	8000504 <__aeabi_ui2d>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	f7f4 ff62 	bl	800028c <__adddf3>
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	468b      	mov	fp, r1
 800b3cc:	2d0f      	cmp	r5, #15
 800b3ce:	dc38      	bgt.n	800b442 <_strtod_l+0x452>
 800b3d0:	9b06      	ldr	r3, [sp, #24]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f43f ae50 	beq.w	800b078 <_strtod_l+0x88>
 800b3d8:	dd24      	ble.n	800b424 <_strtod_l+0x434>
 800b3da:	2b16      	cmp	r3, #22
 800b3dc:	dc0b      	bgt.n	800b3f6 <_strtod_l+0x406>
 800b3de:	496d      	ldr	r1, [pc, #436]	; (800b594 <_strtod_l+0x5a4>)
 800b3e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e8:	4652      	mov	r2, sl
 800b3ea:	465b      	mov	r3, fp
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	468b      	mov	fp, r1
 800b3f4:	e640      	b.n	800b078 <_strtod_l+0x88>
 800b3f6:	9a06      	ldr	r2, [sp, #24]
 800b3f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	db20      	blt.n	800b442 <_strtod_l+0x452>
 800b400:	4c64      	ldr	r4, [pc, #400]	; (800b594 <_strtod_l+0x5a4>)
 800b402:	f1c5 050f 	rsb	r5, r5, #15
 800b406:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b40a:	4652      	mov	r2, sl
 800b40c:	465b      	mov	r3, fp
 800b40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b412:	f7f5 f8f1 	bl	80005f8 <__aeabi_dmul>
 800b416:	9b06      	ldr	r3, [sp, #24]
 800b418:	1b5d      	subs	r5, r3, r5
 800b41a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b41e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b422:	e7e3      	b.n	800b3ec <_strtod_l+0x3fc>
 800b424:	9b06      	ldr	r3, [sp, #24]
 800b426:	3316      	adds	r3, #22
 800b428:	db0b      	blt.n	800b442 <_strtod_l+0x452>
 800b42a:	9b05      	ldr	r3, [sp, #20]
 800b42c:	1b9e      	subs	r6, r3, r6
 800b42e:	4b59      	ldr	r3, [pc, #356]	; (800b594 <_strtod_l+0x5a4>)
 800b430:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b434:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b438:	4650      	mov	r0, sl
 800b43a:	4659      	mov	r1, fp
 800b43c:	f7f5 fa06 	bl	800084c <__aeabi_ddiv>
 800b440:	e7d6      	b.n	800b3f0 <_strtod_l+0x400>
 800b442:	9b06      	ldr	r3, [sp, #24]
 800b444:	eba5 0808 	sub.w	r8, r5, r8
 800b448:	4498      	add	r8, r3
 800b44a:	f1b8 0f00 	cmp.w	r8, #0
 800b44e:	dd74      	ble.n	800b53a <_strtod_l+0x54a>
 800b450:	f018 030f 	ands.w	r3, r8, #15
 800b454:	d00a      	beq.n	800b46c <_strtod_l+0x47c>
 800b456:	494f      	ldr	r1, [pc, #316]	; (800b594 <_strtod_l+0x5a4>)
 800b458:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b45c:	4652      	mov	r2, sl
 800b45e:	465b      	mov	r3, fp
 800b460:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	4682      	mov	sl, r0
 800b46a:	468b      	mov	fp, r1
 800b46c:	f038 080f 	bics.w	r8, r8, #15
 800b470:	d04f      	beq.n	800b512 <_strtod_l+0x522>
 800b472:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b476:	dd22      	ble.n	800b4be <_strtod_l+0x4ce>
 800b478:	2500      	movs	r5, #0
 800b47a:	462e      	mov	r6, r5
 800b47c:	9507      	str	r5, [sp, #28]
 800b47e:	9505      	str	r5, [sp, #20]
 800b480:	2322      	movs	r3, #34	; 0x22
 800b482:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b59c <_strtod_l+0x5ac>
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	f04f 0a00 	mov.w	sl, #0
 800b48c:	9b07      	ldr	r3, [sp, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f43f adf2 	beq.w	800b078 <_strtod_l+0x88>
 800b494:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b496:	4620      	mov	r0, r4
 800b498:	f001 fec6 	bl	800d228 <_Bfree>
 800b49c:	9905      	ldr	r1, [sp, #20]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f001 fec2 	bl	800d228 <_Bfree>
 800b4a4:	4631      	mov	r1, r6
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f001 febe 	bl	800d228 <_Bfree>
 800b4ac:	9907      	ldr	r1, [sp, #28]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f001 feba 	bl	800d228 <_Bfree>
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f001 feb6 	bl	800d228 <_Bfree>
 800b4bc:	e5dc      	b.n	800b078 <_strtod_l+0x88>
 800b4be:	4b36      	ldr	r3, [pc, #216]	; (800b598 <_strtod_l+0x5a8>)
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	4699      	mov	r9, r3
 800b4ce:	f1b8 0f01 	cmp.w	r8, #1
 800b4d2:	dc21      	bgt.n	800b518 <_strtod_l+0x528>
 800b4d4:	b10b      	cbz	r3, 800b4da <_strtod_l+0x4ea>
 800b4d6:	4682      	mov	sl, r0
 800b4d8:	468b      	mov	fp, r1
 800b4da:	4b2f      	ldr	r3, [pc, #188]	; (800b598 <_strtod_l+0x5a8>)
 800b4dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b4e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	465b      	mov	r3, fp
 800b4e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b4ec:	f7f5 f884 	bl	80005f8 <__aeabi_dmul>
 800b4f0:	4b2a      	ldr	r3, [pc, #168]	; (800b59c <_strtod_l+0x5ac>)
 800b4f2:	460a      	mov	r2, r1
 800b4f4:	400b      	ands	r3, r1
 800b4f6:	492a      	ldr	r1, [pc, #168]	; (800b5a0 <_strtod_l+0x5b0>)
 800b4f8:	428b      	cmp	r3, r1
 800b4fa:	4682      	mov	sl, r0
 800b4fc:	d8bc      	bhi.n	800b478 <_strtod_l+0x488>
 800b4fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b502:	428b      	cmp	r3, r1
 800b504:	bf86      	itte	hi
 800b506:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b5a4 <_strtod_l+0x5b4>
 800b50a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b50e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b512:	2300      	movs	r3, #0
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	e084      	b.n	800b622 <_strtod_l+0x632>
 800b518:	f018 0f01 	tst.w	r8, #1
 800b51c:	d005      	beq.n	800b52a <_strtod_l+0x53a>
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 f868 	bl	80005f8 <__aeabi_dmul>
 800b528:	2301      	movs	r3, #1
 800b52a:	9a04      	ldr	r2, [sp, #16]
 800b52c:	3208      	adds	r2, #8
 800b52e:	f109 0901 	add.w	r9, r9, #1
 800b532:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b536:	9204      	str	r2, [sp, #16]
 800b538:	e7c9      	b.n	800b4ce <_strtod_l+0x4de>
 800b53a:	d0ea      	beq.n	800b512 <_strtod_l+0x522>
 800b53c:	f1c8 0800 	rsb	r8, r8, #0
 800b540:	f018 020f 	ands.w	r2, r8, #15
 800b544:	d00a      	beq.n	800b55c <_strtod_l+0x56c>
 800b546:	4b13      	ldr	r3, [pc, #76]	; (800b594 <_strtod_l+0x5a4>)
 800b548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54c:	4650      	mov	r0, sl
 800b54e:	4659      	mov	r1, fp
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7f5 f97a 	bl	800084c <__aeabi_ddiv>
 800b558:	4682      	mov	sl, r0
 800b55a:	468b      	mov	fp, r1
 800b55c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b560:	d0d7      	beq.n	800b512 <_strtod_l+0x522>
 800b562:	f1b8 0f1f 	cmp.w	r8, #31
 800b566:	dd1f      	ble.n	800b5a8 <_strtod_l+0x5b8>
 800b568:	2500      	movs	r5, #0
 800b56a:	462e      	mov	r6, r5
 800b56c:	9507      	str	r5, [sp, #28]
 800b56e:	9505      	str	r5, [sp, #20]
 800b570:	2322      	movs	r3, #34	; 0x22
 800b572:	f04f 0a00 	mov.w	sl, #0
 800b576:	f04f 0b00 	mov.w	fp, #0
 800b57a:	6023      	str	r3, [r4, #0]
 800b57c:	e786      	b.n	800b48c <_strtod_l+0x49c>
 800b57e:	bf00      	nop
 800b580:	08010699 	.word	0x08010699
 800b584:	080106d8 	.word	0x080106d8
 800b588:	08010691 	.word	0x08010691
 800b58c:	0801081c 	.word	0x0801081c
 800b590:	08010ae3 	.word	0x08010ae3
 800b594:	080109a8 	.word	0x080109a8
 800b598:	08010980 	.word	0x08010980
 800b59c:	7ff00000 	.word	0x7ff00000
 800b5a0:	7ca00000 	.word	0x7ca00000
 800b5a4:	7fefffff 	.word	0x7fefffff
 800b5a8:	f018 0310 	ands.w	r3, r8, #16
 800b5ac:	bf18      	it	ne
 800b5ae:	236a      	movne	r3, #106	; 0x6a
 800b5b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b960 <_strtod_l+0x970>
 800b5b4:	9304      	str	r3, [sp, #16]
 800b5b6:	4650      	mov	r0, sl
 800b5b8:	4659      	mov	r1, fp
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f018 0f01 	tst.w	r8, #1
 800b5c0:	d004      	beq.n	800b5cc <_strtod_l+0x5dc>
 800b5c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b5d0:	f109 0908 	add.w	r9, r9, #8
 800b5d4:	d1f2      	bne.n	800b5bc <_strtod_l+0x5cc>
 800b5d6:	b10b      	cbz	r3, 800b5dc <_strtod_l+0x5ec>
 800b5d8:	4682      	mov	sl, r0
 800b5da:	468b      	mov	fp, r1
 800b5dc:	9b04      	ldr	r3, [sp, #16]
 800b5de:	b1c3      	cbz	r3, 800b612 <_strtod_l+0x622>
 800b5e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b5e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	4659      	mov	r1, fp
 800b5ec:	dd11      	ble.n	800b612 <_strtod_l+0x622>
 800b5ee:	2b1f      	cmp	r3, #31
 800b5f0:	f340 8124 	ble.w	800b83c <_strtod_l+0x84c>
 800b5f4:	2b34      	cmp	r3, #52	; 0x34
 800b5f6:	bfde      	ittt	le
 800b5f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b5fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b600:	fa03 f202 	lslle.w	r2, r3, r2
 800b604:	f04f 0a00 	mov.w	sl, #0
 800b608:	bfcc      	ite	gt
 800b60a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b60e:	ea02 0b01 	andle.w	fp, r2, r1
 800b612:	2200      	movs	r2, #0
 800b614:	2300      	movs	r3, #0
 800b616:	4650      	mov	r0, sl
 800b618:	4659      	mov	r1, fp
 800b61a:	f7f5 fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d1a2      	bne.n	800b568 <_strtod_l+0x578>
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	9908      	ldr	r1, [sp, #32]
 800b628:	462b      	mov	r3, r5
 800b62a:	463a      	mov	r2, r7
 800b62c:	4620      	mov	r0, r4
 800b62e:	f001 fe63 	bl	800d2f8 <__s2b>
 800b632:	9007      	str	r0, [sp, #28]
 800b634:	2800      	cmp	r0, #0
 800b636:	f43f af1f 	beq.w	800b478 <_strtod_l+0x488>
 800b63a:	9b05      	ldr	r3, [sp, #20]
 800b63c:	1b9e      	subs	r6, r3, r6
 800b63e:	9b06      	ldr	r3, [sp, #24]
 800b640:	2b00      	cmp	r3, #0
 800b642:	bfb4      	ite	lt
 800b644:	4633      	movlt	r3, r6
 800b646:	2300      	movge	r3, #0
 800b648:	930c      	str	r3, [sp, #48]	; 0x30
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	2500      	movs	r5, #0
 800b64e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b652:	9312      	str	r3, [sp, #72]	; 0x48
 800b654:	462e      	mov	r6, r5
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	4620      	mov	r0, r4
 800b65a:	6859      	ldr	r1, [r3, #4]
 800b65c:	f001 fda4 	bl	800d1a8 <_Balloc>
 800b660:	9005      	str	r0, [sp, #20]
 800b662:	2800      	cmp	r0, #0
 800b664:	f43f af0c 	beq.w	800b480 <_strtod_l+0x490>
 800b668:	9b07      	ldr	r3, [sp, #28]
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	3202      	adds	r2, #2
 800b66e:	f103 010c 	add.w	r1, r3, #12
 800b672:	0092      	lsls	r2, r2, #2
 800b674:	300c      	adds	r0, #12
 800b676:	f001 fd89 	bl	800d18c <memcpy>
 800b67a:	ec4b ab10 	vmov	d0, sl, fp
 800b67e:	aa1a      	add	r2, sp, #104	; 0x68
 800b680:	a919      	add	r1, sp, #100	; 0x64
 800b682:	4620      	mov	r0, r4
 800b684:	f002 f97e 	bl	800d984 <__d2b>
 800b688:	ec4b ab18 	vmov	d8, sl, fp
 800b68c:	9018      	str	r0, [sp, #96]	; 0x60
 800b68e:	2800      	cmp	r0, #0
 800b690:	f43f aef6 	beq.w	800b480 <_strtod_l+0x490>
 800b694:	2101      	movs	r1, #1
 800b696:	4620      	mov	r0, r4
 800b698:	f001 fec8 	bl	800d42c <__i2b>
 800b69c:	4606      	mov	r6, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f aeee 	beq.w	800b480 <_strtod_l+0x490>
 800b6a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6a6:	9904      	ldr	r1, [sp, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bfab      	itete	ge
 800b6ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b6ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b6b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b6b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b6b6:	bfac      	ite	ge
 800b6b8:	eb03 0902 	addge.w	r9, r3, r2
 800b6bc:	1ad7      	sublt	r7, r2, r3
 800b6be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6c0:	eba3 0801 	sub.w	r8, r3, r1
 800b6c4:	4490      	add	r8, r2
 800b6c6:	4ba1      	ldr	r3, [pc, #644]	; (800b94c <_strtod_l+0x95c>)
 800b6c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6cc:	4598      	cmp	r8, r3
 800b6ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6d2:	f280 80c7 	bge.w	800b864 <_strtod_l+0x874>
 800b6d6:	eba3 0308 	sub.w	r3, r3, r8
 800b6da:	2b1f      	cmp	r3, #31
 800b6dc:	eba2 0203 	sub.w	r2, r2, r3
 800b6e0:	f04f 0101 	mov.w	r1, #1
 800b6e4:	f300 80b1 	bgt.w	800b84a <_strtod_l+0x85a>
 800b6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9308      	str	r3, [sp, #32]
 800b6f2:	eb09 0802 	add.w	r8, r9, r2
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	45c1      	cmp	r9, r8
 800b6fa:	4417      	add	r7, r2
 800b6fc:	441f      	add	r7, r3
 800b6fe:	464b      	mov	r3, r9
 800b700:	bfa8      	it	ge
 800b702:	4643      	movge	r3, r8
 800b704:	42bb      	cmp	r3, r7
 800b706:	bfa8      	it	ge
 800b708:	463b      	movge	r3, r7
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bfc2      	ittt	gt
 800b70e:	eba8 0803 	subgt.w	r8, r8, r3
 800b712:	1aff      	subgt	r7, r7, r3
 800b714:	eba9 0903 	subgt.w	r9, r9, r3
 800b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd17      	ble.n	800b74e <_strtod_l+0x75e>
 800b71e:	4631      	mov	r1, r6
 800b720:	461a      	mov	r2, r3
 800b722:	4620      	mov	r0, r4
 800b724:	f001 ff42 	bl	800d5ac <__pow5mult>
 800b728:	4606      	mov	r6, r0
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f43f aea8 	beq.w	800b480 <_strtod_l+0x490>
 800b730:	4601      	mov	r1, r0
 800b732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b734:	4620      	mov	r0, r4
 800b736:	f001 fe8f 	bl	800d458 <__multiply>
 800b73a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f ae9f 	beq.w	800b480 <_strtod_l+0x490>
 800b742:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b744:	4620      	mov	r0, r4
 800b746:	f001 fd6f 	bl	800d228 <_Bfree>
 800b74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b74c:	9318      	str	r3, [sp, #96]	; 0x60
 800b74e:	f1b8 0f00 	cmp.w	r8, #0
 800b752:	f300 808c 	bgt.w	800b86e <_strtod_l+0x87e>
 800b756:	9b06      	ldr	r3, [sp, #24]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dd08      	ble.n	800b76e <_strtod_l+0x77e>
 800b75c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b75e:	9905      	ldr	r1, [sp, #20]
 800b760:	4620      	mov	r0, r4
 800b762:	f001 ff23 	bl	800d5ac <__pow5mult>
 800b766:	9005      	str	r0, [sp, #20]
 800b768:	2800      	cmp	r0, #0
 800b76a:	f43f ae89 	beq.w	800b480 <_strtod_l+0x490>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	dd08      	ble.n	800b784 <_strtod_l+0x794>
 800b772:	9905      	ldr	r1, [sp, #20]
 800b774:	463a      	mov	r2, r7
 800b776:	4620      	mov	r0, r4
 800b778:	f001 ff72 	bl	800d660 <__lshift>
 800b77c:	9005      	str	r0, [sp, #20]
 800b77e:	2800      	cmp	r0, #0
 800b780:	f43f ae7e 	beq.w	800b480 <_strtod_l+0x490>
 800b784:	f1b9 0f00 	cmp.w	r9, #0
 800b788:	dd08      	ble.n	800b79c <_strtod_l+0x7ac>
 800b78a:	4631      	mov	r1, r6
 800b78c:	464a      	mov	r2, r9
 800b78e:	4620      	mov	r0, r4
 800b790:	f001 ff66 	bl	800d660 <__lshift>
 800b794:	4606      	mov	r6, r0
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f ae72 	beq.w	800b480 <_strtod_l+0x490>
 800b79c:	9a05      	ldr	r2, [sp, #20]
 800b79e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 ffe9 	bl	800d778 <__mdiff>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f43f ae69 	beq.w	800b480 <_strtod_l+0x490>
 800b7ae:	68c3      	ldr	r3, [r0, #12]
 800b7b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60c3      	str	r3, [r0, #12]
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	f001 ffc2 	bl	800d740 <__mcmp>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	da60      	bge.n	800b882 <_strtod_l+0x892>
 800b7c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7c6:	f040 8082 	bne.w	800b8ce <_strtod_l+0x8de>
 800b7ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d17d      	bne.n	800b8ce <_strtod_l+0x8de>
 800b7d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7d6:	0d1b      	lsrs	r3, r3, #20
 800b7d8:	051b      	lsls	r3, r3, #20
 800b7da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b7de:	d976      	bls.n	800b8ce <_strtod_l+0x8de>
 800b7e0:	696b      	ldr	r3, [r5, #20]
 800b7e2:	b913      	cbnz	r3, 800b7ea <_strtod_l+0x7fa>
 800b7e4:	692b      	ldr	r3, [r5, #16]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	dd71      	ble.n	800b8ce <_strtod_l+0x8de>
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f001 ff36 	bl	800d660 <__lshift>
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	f001 ffa2 	bl	800d740 <__mcmp>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	dd66      	ble.n	800b8ce <_strtod_l+0x8de>
 800b800:	9904      	ldr	r1, [sp, #16]
 800b802:	4a53      	ldr	r2, [pc, #332]	; (800b950 <_strtod_l+0x960>)
 800b804:	465b      	mov	r3, fp
 800b806:	2900      	cmp	r1, #0
 800b808:	f000 8081 	beq.w	800b90e <_strtod_l+0x91e>
 800b80c:	ea02 010b 	and.w	r1, r2, fp
 800b810:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b814:	dc7b      	bgt.n	800b90e <_strtod_l+0x91e>
 800b816:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b81a:	f77f aea9 	ble.w	800b570 <_strtod_l+0x580>
 800b81e:	4b4d      	ldr	r3, [pc, #308]	; (800b954 <_strtod_l+0x964>)
 800b820:	4650      	mov	r0, sl
 800b822:	4659      	mov	r1, fp
 800b824:	2200      	movs	r2, #0
 800b826:	f7f4 fee7 	bl	80005f8 <__aeabi_dmul>
 800b82a:	460b      	mov	r3, r1
 800b82c:	4303      	orrs	r3, r0
 800b82e:	bf08      	it	eq
 800b830:	2322      	moveq	r3, #34	; 0x22
 800b832:	4682      	mov	sl, r0
 800b834:	468b      	mov	fp, r1
 800b836:	bf08      	it	eq
 800b838:	6023      	streq	r3, [r4, #0]
 800b83a:	e62b      	b.n	800b494 <_strtod_l+0x4a4>
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295
 800b840:	fa02 f303 	lsl.w	r3, r2, r3
 800b844:	ea03 0a0a 	and.w	sl, r3, sl
 800b848:	e6e3      	b.n	800b612 <_strtod_l+0x622>
 800b84a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b84e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b852:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b856:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b85a:	fa01 f308 	lsl.w	r3, r1, r8
 800b85e:	9308      	str	r3, [sp, #32]
 800b860:	910d      	str	r1, [sp, #52]	; 0x34
 800b862:	e746      	b.n	800b6f2 <_strtod_l+0x702>
 800b864:	2300      	movs	r3, #0
 800b866:	9308      	str	r3, [sp, #32]
 800b868:	2301      	movs	r3, #1
 800b86a:	930d      	str	r3, [sp, #52]	; 0x34
 800b86c:	e741      	b.n	800b6f2 <_strtod_l+0x702>
 800b86e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b870:	4642      	mov	r2, r8
 800b872:	4620      	mov	r0, r4
 800b874:	f001 fef4 	bl	800d660 <__lshift>
 800b878:	9018      	str	r0, [sp, #96]	; 0x60
 800b87a:	2800      	cmp	r0, #0
 800b87c:	f47f af6b 	bne.w	800b756 <_strtod_l+0x766>
 800b880:	e5fe      	b.n	800b480 <_strtod_l+0x490>
 800b882:	465f      	mov	r7, fp
 800b884:	d16e      	bne.n	800b964 <_strtod_l+0x974>
 800b886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b888:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b88c:	b342      	cbz	r2, 800b8e0 <_strtod_l+0x8f0>
 800b88e:	4a32      	ldr	r2, [pc, #200]	; (800b958 <_strtod_l+0x968>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d128      	bne.n	800b8e6 <_strtod_l+0x8f6>
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	4651      	mov	r1, sl
 800b898:	b1eb      	cbz	r3, 800b8d6 <_strtod_l+0x8e6>
 800b89a:	4b2d      	ldr	r3, [pc, #180]	; (800b950 <_strtod_l+0x960>)
 800b89c:	403b      	ands	r3, r7
 800b89e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a6:	d819      	bhi.n	800b8dc <_strtod_l+0x8ec>
 800b8a8:	0d1b      	lsrs	r3, r3, #20
 800b8aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	d117      	bne.n	800b8e6 <_strtod_l+0x8f6>
 800b8b6:	4b29      	ldr	r3, [pc, #164]	; (800b95c <_strtod_l+0x96c>)
 800b8b8:	429f      	cmp	r7, r3
 800b8ba:	d102      	bne.n	800b8c2 <_strtod_l+0x8d2>
 800b8bc:	3101      	adds	r1, #1
 800b8be:	f43f addf 	beq.w	800b480 <_strtod_l+0x490>
 800b8c2:	4b23      	ldr	r3, [pc, #140]	; (800b950 <_strtod_l+0x960>)
 800b8c4:	403b      	ands	r3, r7
 800b8c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b8ca:	f04f 0a00 	mov.w	sl, #0
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1a4      	bne.n	800b81e <_strtod_l+0x82e>
 800b8d4:	e5de      	b.n	800b494 <_strtod_l+0x4a4>
 800b8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8da:	e7ea      	b.n	800b8b2 <_strtod_l+0x8c2>
 800b8dc:	4613      	mov	r3, r2
 800b8de:	e7e8      	b.n	800b8b2 <_strtod_l+0x8c2>
 800b8e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b8e4:	d08c      	beq.n	800b800 <_strtod_l+0x810>
 800b8e6:	9b08      	ldr	r3, [sp, #32]
 800b8e8:	b1db      	cbz	r3, 800b922 <_strtod_l+0x932>
 800b8ea:	423b      	tst	r3, r7
 800b8ec:	d0ef      	beq.n	800b8ce <_strtod_l+0x8de>
 800b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f0:	9a04      	ldr	r2, [sp, #16]
 800b8f2:	4650      	mov	r0, sl
 800b8f4:	4659      	mov	r1, fp
 800b8f6:	b1c3      	cbz	r3, 800b92a <_strtod_l+0x93a>
 800b8f8:	f7ff fb5b 	bl	800afb2 <sulp>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	ec51 0b18 	vmov	r0, r1, d8
 800b904:	f7f4 fcc2 	bl	800028c <__adddf3>
 800b908:	4682      	mov	sl, r0
 800b90a:	468b      	mov	fp, r1
 800b90c:	e7df      	b.n	800b8ce <_strtod_l+0x8de>
 800b90e:	4013      	ands	r3, r2
 800b910:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b914:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b918:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b91c:	f04f 3aff 	mov.w	sl, #4294967295
 800b920:	e7d5      	b.n	800b8ce <_strtod_l+0x8de>
 800b922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b924:	ea13 0f0a 	tst.w	r3, sl
 800b928:	e7e0      	b.n	800b8ec <_strtod_l+0x8fc>
 800b92a:	f7ff fb42 	bl	800afb2 <sulp>
 800b92e:	4602      	mov	r2, r0
 800b930:	460b      	mov	r3, r1
 800b932:	ec51 0b18 	vmov	r0, r1, d8
 800b936:	f7f4 fca7 	bl	8000288 <__aeabi_dsub>
 800b93a:	2200      	movs	r2, #0
 800b93c:	2300      	movs	r3, #0
 800b93e:	4682      	mov	sl, r0
 800b940:	468b      	mov	fp, r1
 800b942:	f7f5 f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b946:	2800      	cmp	r0, #0
 800b948:	d0c1      	beq.n	800b8ce <_strtod_l+0x8de>
 800b94a:	e611      	b.n	800b570 <_strtod_l+0x580>
 800b94c:	fffffc02 	.word	0xfffffc02
 800b950:	7ff00000 	.word	0x7ff00000
 800b954:	39500000 	.word	0x39500000
 800b958:	000fffff 	.word	0x000fffff
 800b95c:	7fefffff 	.word	0x7fefffff
 800b960:	080106f0 	.word	0x080106f0
 800b964:	4631      	mov	r1, r6
 800b966:	4628      	mov	r0, r5
 800b968:	f002 f868 	bl	800da3c <__ratio>
 800b96c:	ec59 8b10 	vmov	r8, r9, d0
 800b970:	ee10 0a10 	vmov	r0, s0
 800b974:	2200      	movs	r2, #0
 800b976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b97a:	4649      	mov	r1, r9
 800b97c:	f7f5 f8b8 	bl	8000af0 <__aeabi_dcmple>
 800b980:	2800      	cmp	r0, #0
 800b982:	d07a      	beq.n	800ba7a <_strtod_l+0xa8a>
 800b984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d04a      	beq.n	800ba20 <_strtod_l+0xa30>
 800b98a:	4b95      	ldr	r3, [pc, #596]	; (800bbe0 <_strtod_l+0xbf0>)
 800b98c:	2200      	movs	r2, #0
 800b98e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b992:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bbe0 <_strtod_l+0xbf0>
 800b996:	f04f 0800 	mov.w	r8, #0
 800b99a:	4b92      	ldr	r3, [pc, #584]	; (800bbe4 <_strtod_l+0xbf4>)
 800b99c:	403b      	ands	r3, r7
 800b99e:	930d      	str	r3, [sp, #52]	; 0x34
 800b9a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9a2:	4b91      	ldr	r3, [pc, #580]	; (800bbe8 <_strtod_l+0xbf8>)
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	f040 80b0 	bne.w	800bb0a <_strtod_l+0xb1a>
 800b9aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b9b2:	ec4b ab10 	vmov	d0, sl, fp
 800b9b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9ba:	f001 ff67 	bl	800d88c <__ulp>
 800b9be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9c2:	ec53 2b10 	vmov	r2, r3, d0
 800b9c6:	f7f4 fe17 	bl	80005f8 <__aeabi_dmul>
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	f7f4 fc5d 	bl	800028c <__adddf3>
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4983      	ldr	r1, [pc, #524]	; (800bbe4 <_strtod_l+0xbf4>)
 800b9d6:	4a85      	ldr	r2, [pc, #532]	; (800bbec <_strtod_l+0xbfc>)
 800b9d8:	4019      	ands	r1, r3
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	4682      	mov	sl, r0
 800b9de:	d960      	bls.n	800baa2 <_strtod_l+0xab2>
 800b9e0:	ee18 3a90 	vmov	r3, s17
 800b9e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d104      	bne.n	800b9f6 <_strtod_l+0xa06>
 800b9ec:	ee18 3a10 	vmov	r3, s16
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	f43f ad45 	beq.w	800b480 <_strtod_l+0x490>
 800b9f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bbf8 <_strtod_l+0xc08>
 800b9fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b9fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba00:	4620      	mov	r0, r4
 800ba02:	f001 fc11 	bl	800d228 <_Bfree>
 800ba06:	9905      	ldr	r1, [sp, #20]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f001 fc0d 	bl	800d228 <_Bfree>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 fc09 	bl	800d228 <_Bfree>
 800ba16:	4629      	mov	r1, r5
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f001 fc05 	bl	800d228 <_Bfree>
 800ba1e:	e61a      	b.n	800b656 <_strtod_l+0x666>
 800ba20:	f1ba 0f00 	cmp.w	sl, #0
 800ba24:	d11b      	bne.n	800ba5e <_strtod_l+0xa6e>
 800ba26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba2a:	b9f3      	cbnz	r3, 800ba6a <_strtod_l+0xa7a>
 800ba2c:	4b6c      	ldr	r3, [pc, #432]	; (800bbe0 <_strtod_l+0xbf0>)
 800ba2e:	2200      	movs	r2, #0
 800ba30:	4640      	mov	r0, r8
 800ba32:	4649      	mov	r1, r9
 800ba34:	f7f5 f852 	bl	8000adc <__aeabi_dcmplt>
 800ba38:	b9d0      	cbnz	r0, 800ba70 <_strtod_l+0xa80>
 800ba3a:	4640      	mov	r0, r8
 800ba3c:	4649      	mov	r1, r9
 800ba3e:	4b6c      	ldr	r3, [pc, #432]	; (800bbf0 <_strtod_l+0xc00>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	f7f4 fdd9 	bl	80005f8 <__aeabi_dmul>
 800ba46:	4680      	mov	r8, r0
 800ba48:	4689      	mov	r9, r1
 800ba4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ba52:	9315      	str	r3, [sp, #84]	; 0x54
 800ba54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba5c:	e79d      	b.n	800b99a <_strtod_l+0x9aa>
 800ba5e:	f1ba 0f01 	cmp.w	sl, #1
 800ba62:	d102      	bne.n	800ba6a <_strtod_l+0xa7a>
 800ba64:	2f00      	cmp	r7, #0
 800ba66:	f43f ad83 	beq.w	800b570 <_strtod_l+0x580>
 800ba6a:	4b62      	ldr	r3, [pc, #392]	; (800bbf4 <_strtod_l+0xc04>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	e78e      	b.n	800b98e <_strtod_l+0x99e>
 800ba70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bbf0 <_strtod_l+0xc00>
 800ba74:	f04f 0800 	mov.w	r8, #0
 800ba78:	e7e7      	b.n	800ba4a <_strtod_l+0xa5a>
 800ba7a:	4b5d      	ldr	r3, [pc, #372]	; (800bbf0 <_strtod_l+0xc00>)
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	4649      	mov	r1, r9
 800ba80:	2200      	movs	r2, #0
 800ba82:	f7f4 fdb9 	bl	80005f8 <__aeabi_dmul>
 800ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba88:	4680      	mov	r8, r0
 800ba8a:	4689      	mov	r9, r1
 800ba8c:	b933      	cbnz	r3, 800ba9c <_strtod_l+0xaac>
 800ba8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba92:	900e      	str	r0, [sp, #56]	; 0x38
 800ba94:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ba9a:	e7dd      	b.n	800ba58 <_strtod_l+0xa68>
 800ba9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800baa0:	e7f9      	b.n	800ba96 <_strtod_l+0xaa6>
 800baa2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1a8      	bne.n	800b9fe <_strtod_l+0xa0e>
 800baac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bab2:	0d1b      	lsrs	r3, r3, #20
 800bab4:	051b      	lsls	r3, r3, #20
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d1a1      	bne.n	800b9fe <_strtod_l+0xa0e>
 800baba:	4640      	mov	r0, r8
 800babc:	4649      	mov	r1, r9
 800babe:	f7f5 f8e3 	bl	8000c88 <__aeabi_d2lz>
 800bac2:	f7f4 fd6b 	bl	800059c <__aeabi_l2d>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4640      	mov	r0, r8
 800bacc:	4649      	mov	r1, r9
 800bace:	f7f4 fbdb 	bl	8000288 <__aeabi_dsub>
 800bad2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bad8:	ea43 030a 	orr.w	r3, r3, sl
 800badc:	4313      	orrs	r3, r2
 800bade:	4680      	mov	r8, r0
 800bae0:	4689      	mov	r9, r1
 800bae2:	d055      	beq.n	800bb90 <_strtod_l+0xba0>
 800bae4:	a336      	add	r3, pc, #216	; (adr r3, 800bbc0 <_strtod_l+0xbd0>)
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f7f4 fff7 	bl	8000adc <__aeabi_dcmplt>
 800baee:	2800      	cmp	r0, #0
 800baf0:	f47f acd0 	bne.w	800b494 <_strtod_l+0x4a4>
 800baf4:	a334      	add	r3, pc, #208	; (adr r3, 800bbc8 <_strtod_l+0xbd8>)
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	f7f5 f80b 	bl	8000b18 <__aeabi_dcmpgt>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	f43f af7b 	beq.w	800b9fe <_strtod_l+0xa0e>
 800bb08:	e4c4      	b.n	800b494 <_strtod_l+0x4a4>
 800bb0a:	9b04      	ldr	r3, [sp, #16]
 800bb0c:	b333      	cbz	r3, 800bb5c <_strtod_l+0xb6c>
 800bb0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb14:	d822      	bhi.n	800bb5c <_strtod_l+0xb6c>
 800bb16:	a32e      	add	r3, pc, #184	; (adr r3, 800bbd0 <_strtod_l+0xbe0>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 ffe6 	bl	8000af0 <__aeabi_dcmple>
 800bb24:	b1a0      	cbz	r0, 800bb50 <_strtod_l+0xb60>
 800bb26:	4649      	mov	r1, r9
 800bb28:	4640      	mov	r0, r8
 800bb2a:	f7f5 f83d 	bl	8000ba8 <__aeabi_d2uiz>
 800bb2e:	2801      	cmp	r0, #1
 800bb30:	bf38      	it	cc
 800bb32:	2001      	movcc	r0, #1
 800bb34:	f7f4 fce6 	bl	8000504 <__aeabi_ui2d>
 800bb38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	4689      	mov	r9, r1
 800bb3e:	bb23      	cbnz	r3, 800bb8a <_strtod_l+0xb9a>
 800bb40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb44:	9010      	str	r0, [sp, #64]	; 0x40
 800bb46:	9311      	str	r3, [sp, #68]	; 0x44
 800bb48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb60:	eeb0 0a48 	vmov.f32	s0, s16
 800bb64:	eef0 0a68 	vmov.f32	s1, s17
 800bb68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb6c:	f001 fe8e 	bl	800d88c <__ulp>
 800bb70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb74:	ec53 2b10 	vmov	r2, r3, d0
 800bb78:	f7f4 fd3e 	bl	80005f8 <__aeabi_dmul>
 800bb7c:	ec53 2b18 	vmov	r2, r3, d8
 800bb80:	f7f4 fb84 	bl	800028c <__adddf3>
 800bb84:	4682      	mov	sl, r0
 800bb86:	468b      	mov	fp, r1
 800bb88:	e78d      	b.n	800baa6 <_strtod_l+0xab6>
 800bb8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bb8e:	e7db      	b.n	800bb48 <_strtod_l+0xb58>
 800bb90:	a311      	add	r3, pc, #68	; (adr r3, 800bbd8 <_strtod_l+0xbe8>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 ffa1 	bl	8000adc <__aeabi_dcmplt>
 800bb9a:	e7b2      	b.n	800bb02 <_strtod_l+0xb12>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	930a      	str	r3, [sp, #40]	; 0x28
 800bba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	f7ff ba6b 	b.w	800b080 <_strtod_l+0x90>
 800bbaa:	2a65      	cmp	r2, #101	; 0x65
 800bbac:	f43f ab5f 	beq.w	800b26e <_strtod_l+0x27e>
 800bbb0:	2a45      	cmp	r2, #69	; 0x45
 800bbb2:	f43f ab5c 	beq.w	800b26e <_strtod_l+0x27e>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	f7ff bb94 	b.w	800b2e4 <_strtod_l+0x2f4>
 800bbbc:	f3af 8000 	nop.w
 800bbc0:	94a03595 	.word	0x94a03595
 800bbc4:	3fdfffff 	.word	0x3fdfffff
 800bbc8:	35afe535 	.word	0x35afe535
 800bbcc:	3fe00000 	.word	0x3fe00000
 800bbd0:	ffc00000 	.word	0xffc00000
 800bbd4:	41dfffff 	.word	0x41dfffff
 800bbd8:	94a03595 	.word	0x94a03595
 800bbdc:	3fcfffff 	.word	0x3fcfffff
 800bbe0:	3ff00000 	.word	0x3ff00000
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	7fe00000 	.word	0x7fe00000
 800bbec:	7c9fffff 	.word	0x7c9fffff
 800bbf0:	3fe00000 	.word	0x3fe00000
 800bbf4:	bff00000 	.word	0xbff00000
 800bbf8:	7fefffff 	.word	0x7fefffff

0800bbfc <_strtod_r>:
 800bbfc:	4b01      	ldr	r3, [pc, #4]	; (800bc04 <_strtod_r+0x8>)
 800bbfe:	f7ff b9f7 	b.w	800aff0 <_strtod_l>
 800bc02:	bf00      	nop
 800bc04:	200000e8 	.word	0x200000e8

0800bc08 <_strtol_l.constprop.0>:
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0e:	d001      	beq.n	800bc14 <_strtol_l.constprop.0+0xc>
 800bc10:	2b24      	cmp	r3, #36	; 0x24
 800bc12:	d906      	bls.n	800bc22 <_strtol_l.constprop.0+0x1a>
 800bc14:	f7fe fa76 	bl	800a104 <__errno>
 800bc18:	2316      	movs	r3, #22
 800bc1a:	6003      	str	r3, [r0, #0]
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd08 <_strtol_l.constprop.0+0x100>
 800bc26:	460d      	mov	r5, r1
 800bc28:	462e      	mov	r6, r5
 800bc2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc2e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bc32:	f017 0708 	ands.w	r7, r7, #8
 800bc36:	d1f7      	bne.n	800bc28 <_strtol_l.constprop.0+0x20>
 800bc38:	2c2d      	cmp	r4, #45	; 0x2d
 800bc3a:	d132      	bne.n	800bca2 <_strtol_l.constprop.0+0x9a>
 800bc3c:	782c      	ldrb	r4, [r5, #0]
 800bc3e:	2701      	movs	r7, #1
 800bc40:	1cb5      	adds	r5, r6, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d05b      	beq.n	800bcfe <_strtol_l.constprop.0+0xf6>
 800bc46:	2b10      	cmp	r3, #16
 800bc48:	d109      	bne.n	800bc5e <_strtol_l.constprop.0+0x56>
 800bc4a:	2c30      	cmp	r4, #48	; 0x30
 800bc4c:	d107      	bne.n	800bc5e <_strtol_l.constprop.0+0x56>
 800bc4e:	782c      	ldrb	r4, [r5, #0]
 800bc50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bc54:	2c58      	cmp	r4, #88	; 0x58
 800bc56:	d14d      	bne.n	800bcf4 <_strtol_l.constprop.0+0xec>
 800bc58:	786c      	ldrb	r4, [r5, #1]
 800bc5a:	2310      	movs	r3, #16
 800bc5c:	3502      	adds	r5, #2
 800bc5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bc62:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc66:	f04f 0c00 	mov.w	ip, #0
 800bc6a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bc6e:	4666      	mov	r6, ip
 800bc70:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc74:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bc78:	f1be 0f09 	cmp.w	lr, #9
 800bc7c:	d816      	bhi.n	800bcac <_strtol_l.constprop.0+0xa4>
 800bc7e:	4674      	mov	r4, lr
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	dd24      	ble.n	800bcce <_strtol_l.constprop.0+0xc6>
 800bc84:	f1bc 0f00 	cmp.w	ip, #0
 800bc88:	db1e      	blt.n	800bcc8 <_strtol_l.constprop.0+0xc0>
 800bc8a:	45b1      	cmp	r9, r6
 800bc8c:	d31c      	bcc.n	800bcc8 <_strtol_l.constprop.0+0xc0>
 800bc8e:	d101      	bne.n	800bc94 <_strtol_l.constprop.0+0x8c>
 800bc90:	45a2      	cmp	sl, r4
 800bc92:	db19      	blt.n	800bcc8 <_strtol_l.constprop.0+0xc0>
 800bc94:	fb06 4603 	mla	r6, r6, r3, r4
 800bc98:	f04f 0c01 	mov.w	ip, #1
 800bc9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bca0:	e7e8      	b.n	800bc74 <_strtol_l.constprop.0+0x6c>
 800bca2:	2c2b      	cmp	r4, #43	; 0x2b
 800bca4:	bf04      	itt	eq
 800bca6:	782c      	ldrbeq	r4, [r5, #0]
 800bca8:	1cb5      	addeq	r5, r6, #2
 800bcaa:	e7ca      	b.n	800bc42 <_strtol_l.constprop.0+0x3a>
 800bcac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bcb0:	f1be 0f19 	cmp.w	lr, #25
 800bcb4:	d801      	bhi.n	800bcba <_strtol_l.constprop.0+0xb2>
 800bcb6:	3c37      	subs	r4, #55	; 0x37
 800bcb8:	e7e2      	b.n	800bc80 <_strtol_l.constprop.0+0x78>
 800bcba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bcbe:	f1be 0f19 	cmp.w	lr, #25
 800bcc2:	d804      	bhi.n	800bcce <_strtol_l.constprop.0+0xc6>
 800bcc4:	3c57      	subs	r4, #87	; 0x57
 800bcc6:	e7db      	b.n	800bc80 <_strtol_l.constprop.0+0x78>
 800bcc8:	f04f 3cff 	mov.w	ip, #4294967295
 800bccc:	e7e6      	b.n	800bc9c <_strtol_l.constprop.0+0x94>
 800bcce:	f1bc 0f00 	cmp.w	ip, #0
 800bcd2:	da05      	bge.n	800bce0 <_strtol_l.constprop.0+0xd8>
 800bcd4:	2322      	movs	r3, #34	; 0x22
 800bcd6:	6003      	str	r3, [r0, #0]
 800bcd8:	4646      	mov	r6, r8
 800bcda:	b942      	cbnz	r2, 800bcee <_strtol_l.constprop.0+0xe6>
 800bcdc:	4630      	mov	r0, r6
 800bcde:	e79e      	b.n	800bc1e <_strtol_l.constprop.0+0x16>
 800bce0:	b107      	cbz	r7, 800bce4 <_strtol_l.constprop.0+0xdc>
 800bce2:	4276      	negs	r6, r6
 800bce4:	2a00      	cmp	r2, #0
 800bce6:	d0f9      	beq.n	800bcdc <_strtol_l.constprop.0+0xd4>
 800bce8:	f1bc 0f00 	cmp.w	ip, #0
 800bcec:	d000      	beq.n	800bcf0 <_strtol_l.constprop.0+0xe8>
 800bcee:	1e69      	subs	r1, r5, #1
 800bcf0:	6011      	str	r1, [r2, #0]
 800bcf2:	e7f3      	b.n	800bcdc <_strtol_l.constprop.0+0xd4>
 800bcf4:	2430      	movs	r4, #48	; 0x30
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1b1      	bne.n	800bc5e <_strtol_l.constprop.0+0x56>
 800bcfa:	2308      	movs	r3, #8
 800bcfc:	e7af      	b.n	800bc5e <_strtol_l.constprop.0+0x56>
 800bcfe:	2c30      	cmp	r4, #48	; 0x30
 800bd00:	d0a5      	beq.n	800bc4e <_strtol_l.constprop.0+0x46>
 800bd02:	230a      	movs	r3, #10
 800bd04:	e7ab      	b.n	800bc5e <_strtol_l.constprop.0+0x56>
 800bd06:	bf00      	nop
 800bd08:	08010719 	.word	0x08010719

0800bd0c <_strtol_r>:
 800bd0c:	f7ff bf7c 	b.w	800bc08 <_strtol_l.constprop.0>

0800bd10 <_write_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	4d07      	ldr	r5, [pc, #28]	; (800bd30 <_write_r+0x20>)
 800bd14:	4604      	mov	r4, r0
 800bd16:	4608      	mov	r0, r1
 800bd18:	4611      	mov	r1, r2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	602a      	str	r2, [r5, #0]
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f7f7 fc13 	bl	800354a <_write>
 800bd24:	1c43      	adds	r3, r0, #1
 800bd26:	d102      	bne.n	800bd2e <_write_r+0x1e>
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	b103      	cbz	r3, 800bd2e <_write_r+0x1e>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	bd38      	pop	{r3, r4, r5, pc}
 800bd30:	200009e0 	.word	0x200009e0

0800bd34 <_close_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d06      	ldr	r5, [pc, #24]	; (800bd50 <_close_r+0x1c>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7f7 fc1f 	bl	8003582 <_close>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_close_r+0x1a>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_close_r+0x1a>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	200009e0 	.word	0x200009e0

0800bd54 <quorem>:
 800bd54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd58:	6903      	ldr	r3, [r0, #16]
 800bd5a:	690c      	ldr	r4, [r1, #16]
 800bd5c:	42a3      	cmp	r3, r4
 800bd5e:	4607      	mov	r7, r0
 800bd60:	f2c0 8081 	blt.w	800be66 <quorem+0x112>
 800bd64:	3c01      	subs	r4, #1
 800bd66:	f101 0814 	add.w	r8, r1, #20
 800bd6a:	f100 0514 	add.w	r5, r0, #20
 800bd6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd88:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd8c:	d331      	bcc.n	800bdf2 <quorem+0x9e>
 800bd8e:	f04f 0e00 	mov.w	lr, #0
 800bd92:	4640      	mov	r0, r8
 800bd94:	46ac      	mov	ip, r5
 800bd96:	46f2      	mov	sl, lr
 800bd98:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd9c:	b293      	uxth	r3, r2
 800bd9e:	fb06 e303 	mla	r3, r6, r3, lr
 800bda2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	ebaa 0303 	sub.w	r3, sl, r3
 800bdac:	f8dc a000 	ldr.w	sl, [ip]
 800bdb0:	0c12      	lsrs	r2, r2, #16
 800bdb2:	fa13 f38a 	uxtah	r3, r3, sl
 800bdb6:	fb06 e202 	mla	r2, r6, r2, lr
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	9b00      	ldr	r3, [sp, #0]
 800bdbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bdc2:	b292      	uxth	r2, r2
 800bdc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bdc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdcc:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdd0:	4581      	cmp	r9, r0
 800bdd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdd6:	f84c 3b04 	str.w	r3, [ip], #4
 800bdda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bdde:	d2db      	bcs.n	800bd98 <quorem+0x44>
 800bde0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bde4:	b92b      	cbnz	r3, 800bdf2 <quorem+0x9e>
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	3b04      	subs	r3, #4
 800bdea:	429d      	cmp	r5, r3
 800bdec:	461a      	mov	r2, r3
 800bdee:	d32e      	bcc.n	800be4e <quorem+0xfa>
 800bdf0:	613c      	str	r4, [r7, #16]
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	f001 fca4 	bl	800d740 <__mcmp>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	db24      	blt.n	800be46 <quorem+0xf2>
 800bdfc:	3601      	adds	r6, #1
 800bdfe:	4628      	mov	r0, r5
 800be00:	f04f 0c00 	mov.w	ip, #0
 800be04:	f858 2b04 	ldr.w	r2, [r8], #4
 800be08:	f8d0 e000 	ldr.w	lr, [r0]
 800be0c:	b293      	uxth	r3, r2
 800be0e:	ebac 0303 	sub.w	r3, ip, r3
 800be12:	0c12      	lsrs	r2, r2, #16
 800be14:	fa13 f38e 	uxtah	r3, r3, lr
 800be18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be20:	b29b      	uxth	r3, r3
 800be22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be26:	45c1      	cmp	r9, r8
 800be28:	f840 3b04 	str.w	r3, [r0], #4
 800be2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be30:	d2e8      	bcs.n	800be04 <quorem+0xb0>
 800be32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be3a:	b922      	cbnz	r2, 800be46 <quorem+0xf2>
 800be3c:	3b04      	subs	r3, #4
 800be3e:	429d      	cmp	r5, r3
 800be40:	461a      	mov	r2, r3
 800be42:	d30a      	bcc.n	800be5a <quorem+0x106>
 800be44:	613c      	str	r4, [r7, #16]
 800be46:	4630      	mov	r0, r6
 800be48:	b003      	add	sp, #12
 800be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	6812      	ldr	r2, [r2, #0]
 800be50:	3b04      	subs	r3, #4
 800be52:	2a00      	cmp	r2, #0
 800be54:	d1cc      	bne.n	800bdf0 <quorem+0x9c>
 800be56:	3c01      	subs	r4, #1
 800be58:	e7c7      	b.n	800bdea <quorem+0x96>
 800be5a:	6812      	ldr	r2, [r2, #0]
 800be5c:	3b04      	subs	r3, #4
 800be5e:	2a00      	cmp	r2, #0
 800be60:	d1f0      	bne.n	800be44 <quorem+0xf0>
 800be62:	3c01      	subs	r4, #1
 800be64:	e7eb      	b.n	800be3e <quorem+0xea>
 800be66:	2000      	movs	r0, #0
 800be68:	e7ee      	b.n	800be48 <quorem+0xf4>
 800be6a:	0000      	movs	r0, r0
 800be6c:	0000      	movs	r0, r0
	...

0800be70 <_dtoa_r>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	ed2d 8b04 	vpush	{d8-d9}
 800be78:	ec57 6b10 	vmov	r6, r7, d0
 800be7c:	b093      	sub	sp, #76	; 0x4c
 800be7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be84:	9106      	str	r1, [sp, #24]
 800be86:	ee10 aa10 	vmov	sl, s0
 800be8a:	4604      	mov	r4, r0
 800be8c:	9209      	str	r2, [sp, #36]	; 0x24
 800be8e:	930c      	str	r3, [sp, #48]	; 0x30
 800be90:	46bb      	mov	fp, r7
 800be92:	b975      	cbnz	r5, 800beb2 <_dtoa_r+0x42>
 800be94:	2010      	movs	r0, #16
 800be96:	f001 f95f 	bl	800d158 <malloc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6260      	str	r0, [r4, #36]	; 0x24
 800be9e:	b920      	cbnz	r0, 800beaa <_dtoa_r+0x3a>
 800bea0:	4ba7      	ldr	r3, [pc, #668]	; (800c140 <_dtoa_r+0x2d0>)
 800bea2:	21ea      	movs	r1, #234	; 0xea
 800bea4:	48a7      	ldr	r0, [pc, #668]	; (800c144 <_dtoa_r+0x2d4>)
 800bea6:	f002 fcd7 	bl	800e858 <__assert_func>
 800beaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800beae:	6005      	str	r5, [r0, #0]
 800beb0:	60c5      	str	r5, [r0, #12]
 800beb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beb4:	6819      	ldr	r1, [r3, #0]
 800beb6:	b151      	cbz	r1, 800bece <_dtoa_r+0x5e>
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	604a      	str	r2, [r1, #4]
 800bebc:	2301      	movs	r3, #1
 800bebe:	4093      	lsls	r3, r2
 800bec0:	608b      	str	r3, [r1, #8]
 800bec2:	4620      	mov	r0, r4
 800bec4:	f001 f9b0 	bl	800d228 <_Bfree>
 800bec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]
 800bece:	1e3b      	subs	r3, r7, #0
 800bed0:	bfaa      	itet	ge
 800bed2:	2300      	movge	r3, #0
 800bed4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bed8:	f8c8 3000 	strge.w	r3, [r8]
 800bedc:	4b9a      	ldr	r3, [pc, #616]	; (800c148 <_dtoa_r+0x2d8>)
 800bede:	bfbc      	itt	lt
 800bee0:	2201      	movlt	r2, #1
 800bee2:	f8c8 2000 	strlt.w	r2, [r8]
 800bee6:	ea33 030b 	bics.w	r3, r3, fp
 800beea:	d11b      	bne.n	800bf24 <_dtoa_r+0xb4>
 800beec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beee:	f242 730f 	movw	r3, #9999	; 0x270f
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bef8:	4333      	orrs	r3, r6
 800befa:	f000 8592 	beq.w	800ca22 <_dtoa_r+0xbb2>
 800befe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf00:	b963      	cbnz	r3, 800bf1c <_dtoa_r+0xac>
 800bf02:	4b92      	ldr	r3, [pc, #584]	; (800c14c <_dtoa_r+0x2dc>)
 800bf04:	e022      	b.n	800bf4c <_dtoa_r+0xdc>
 800bf06:	4b92      	ldr	r3, [pc, #584]	; (800c150 <_dtoa_r+0x2e0>)
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf0e:	6013      	str	r3, [r2, #0]
 800bf10:	9801      	ldr	r0, [sp, #4]
 800bf12:	b013      	add	sp, #76	; 0x4c
 800bf14:	ecbd 8b04 	vpop	{d8-d9}
 800bf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1c:	4b8b      	ldr	r3, [pc, #556]	; (800c14c <_dtoa_r+0x2dc>)
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	3303      	adds	r3, #3
 800bf22:	e7f3      	b.n	800bf0c <_dtoa_r+0x9c>
 800bf24:	2200      	movs	r2, #0
 800bf26:	2300      	movs	r3, #0
 800bf28:	4650      	mov	r0, sl
 800bf2a:	4659      	mov	r1, fp
 800bf2c:	f7f4 fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf30:	ec4b ab19 	vmov	d9, sl, fp
 800bf34:	4680      	mov	r8, r0
 800bf36:	b158      	cbz	r0, 800bf50 <_dtoa_r+0xe0>
 800bf38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	6013      	str	r3, [r2, #0]
 800bf3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 856b 	beq.w	800ca1c <_dtoa_r+0xbac>
 800bf46:	4883      	ldr	r0, [pc, #524]	; (800c154 <_dtoa_r+0x2e4>)
 800bf48:	6018      	str	r0, [r3, #0]
 800bf4a:	1e43      	subs	r3, r0, #1
 800bf4c:	9301      	str	r3, [sp, #4]
 800bf4e:	e7df      	b.n	800bf10 <_dtoa_r+0xa0>
 800bf50:	ec4b ab10 	vmov	d0, sl, fp
 800bf54:	aa10      	add	r2, sp, #64	; 0x40
 800bf56:	a911      	add	r1, sp, #68	; 0x44
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f001 fd13 	bl	800d984 <__d2b>
 800bf5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bf62:	ee08 0a10 	vmov	s16, r0
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	f000 8084 	beq.w	800c074 <_dtoa_r+0x204>
 800bf6c:	ee19 3a90 	vmov	r3, s19
 800bf70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf78:	4656      	mov	r6, sl
 800bf7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bf86:	4b74      	ldr	r3, [pc, #464]	; (800c158 <_dtoa_r+0x2e8>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 f97b 	bl	8000288 <__aeabi_dsub>
 800bf92:	a365      	add	r3, pc, #404	; (adr r3, 800c128 <_dtoa_r+0x2b8>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f7f4 fb2e 	bl	80005f8 <__aeabi_dmul>
 800bf9c:	a364      	add	r3, pc, #400	; (adr r3, 800c130 <_dtoa_r+0x2c0>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f973 	bl	800028c <__adddf3>
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	460f      	mov	r7, r1
 800bfac:	f7f4 faba 	bl	8000524 <__aeabi_i2d>
 800bfb0:	a361      	add	r3, pc, #388	; (adr r3, 800c138 <_dtoa_r+0x2c8>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 fb1f 	bl	80005f8 <__aeabi_dmul>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	f7f4 f963 	bl	800028c <__adddf3>
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	460f      	mov	r7, r1
 800bfca:	f7f4 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	9000      	str	r0, [sp, #0]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 fd80 	bl	8000adc <__aeabi_dcmplt>
 800bfdc:	b150      	cbz	r0, 800bff4 <_dtoa_r+0x184>
 800bfde:	9800      	ldr	r0, [sp, #0]
 800bfe0:	f7f4 faa0 	bl	8000524 <__aeabi_i2d>
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	463b      	mov	r3, r7
 800bfe8:	f7f4 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfec:	b910      	cbnz	r0, 800bff4 <_dtoa_r+0x184>
 800bfee:	9b00      	ldr	r3, [sp, #0]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	9b00      	ldr	r3, [sp, #0]
 800bff6:	2b16      	cmp	r3, #22
 800bff8:	d85a      	bhi.n	800c0b0 <_dtoa_r+0x240>
 800bffa:	9a00      	ldr	r2, [sp, #0]
 800bffc:	4b57      	ldr	r3, [pc, #348]	; (800c15c <_dtoa_r+0x2ec>)
 800bffe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	ec51 0b19 	vmov	r0, r1, d9
 800c00a:	f7f4 fd67 	bl	8000adc <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d050      	beq.n	800c0b4 <_dtoa_r+0x244>
 800c012:	9b00      	ldr	r3, [sp, #0]
 800c014:	3b01      	subs	r3, #1
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	2300      	movs	r3, #0
 800c01a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01e:	1b5d      	subs	r5, r3, r5
 800c020:	1e6b      	subs	r3, r5, #1
 800c022:	9305      	str	r3, [sp, #20]
 800c024:	bf45      	ittet	mi
 800c026:	f1c5 0301 	rsbmi	r3, r5, #1
 800c02a:	9304      	strmi	r3, [sp, #16]
 800c02c:	2300      	movpl	r3, #0
 800c02e:	2300      	movmi	r3, #0
 800c030:	bf4c      	ite	mi
 800c032:	9305      	strmi	r3, [sp, #20]
 800c034:	9304      	strpl	r3, [sp, #16]
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	db3d      	blt.n	800c0b8 <_dtoa_r+0x248>
 800c03c:	9b05      	ldr	r3, [sp, #20]
 800c03e:	9a00      	ldr	r2, [sp, #0]
 800c040:	920a      	str	r2, [sp, #40]	; 0x28
 800c042:	4413      	add	r3, r2
 800c044:	9305      	str	r3, [sp, #20]
 800c046:	2300      	movs	r3, #0
 800c048:	9307      	str	r3, [sp, #28]
 800c04a:	9b06      	ldr	r3, [sp, #24]
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	f200 8089 	bhi.w	800c164 <_dtoa_r+0x2f4>
 800c052:	2b05      	cmp	r3, #5
 800c054:	bfc4      	itt	gt
 800c056:	3b04      	subgt	r3, #4
 800c058:	9306      	strgt	r3, [sp, #24]
 800c05a:	9b06      	ldr	r3, [sp, #24]
 800c05c:	f1a3 0302 	sub.w	r3, r3, #2
 800c060:	bfcc      	ite	gt
 800c062:	2500      	movgt	r5, #0
 800c064:	2501      	movle	r5, #1
 800c066:	2b03      	cmp	r3, #3
 800c068:	f200 8087 	bhi.w	800c17a <_dtoa_r+0x30a>
 800c06c:	e8df f003 	tbb	[pc, r3]
 800c070:	59383a2d 	.word	0x59383a2d
 800c074:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c078:	441d      	add	r5, r3
 800c07a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c07e:	2b20      	cmp	r3, #32
 800c080:	bfc1      	itttt	gt
 800c082:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c086:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c08a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c08e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c092:	bfda      	itte	le
 800c094:	f1c3 0320 	rsble	r3, r3, #32
 800c098:	fa06 f003 	lslle.w	r0, r6, r3
 800c09c:	4318      	orrgt	r0, r3
 800c09e:	f7f4 fa31 	bl	8000504 <__aeabi_ui2d>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c0aa:	3d01      	subs	r5, #1
 800c0ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c0ae:	e76a      	b.n	800bf86 <_dtoa_r+0x116>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e7b2      	b.n	800c01a <_dtoa_r+0x1aa>
 800c0b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800c0b6:	e7b1      	b.n	800c01c <_dtoa_r+0x1ac>
 800c0b8:	9b04      	ldr	r3, [sp, #16]
 800c0ba:	9a00      	ldr	r2, [sp, #0]
 800c0bc:	1a9b      	subs	r3, r3, r2
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	4253      	negs	r3, r2
 800c0c2:	9307      	str	r3, [sp, #28]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c0c8:	e7bf      	b.n	800c04a <_dtoa_r+0x1da>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9308      	str	r3, [sp, #32]
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dc55      	bgt.n	800c180 <_dtoa_r+0x310>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0de:	e00c      	b.n	800c0fa <_dtoa_r+0x28a>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e7f3      	b.n	800c0cc <_dtoa_r+0x25c>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0e8:	9308      	str	r3, [sp, #32]
 800c0ea:	9b00      	ldr	r3, [sp, #0]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	9302      	str	r3, [sp, #8]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	bfb8      	it	lt
 800c0f8:	2301      	movlt	r3, #1
 800c0fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	6042      	str	r2, [r0, #4]
 800c100:	2204      	movs	r2, #4
 800c102:	f102 0614 	add.w	r6, r2, #20
 800c106:	429e      	cmp	r6, r3
 800c108:	6841      	ldr	r1, [r0, #4]
 800c10a:	d93d      	bls.n	800c188 <_dtoa_r+0x318>
 800c10c:	4620      	mov	r0, r4
 800c10e:	f001 f84b 	bl	800d1a8 <_Balloc>
 800c112:	9001      	str	r0, [sp, #4]
 800c114:	2800      	cmp	r0, #0
 800c116:	d13b      	bne.n	800c190 <_dtoa_r+0x320>
 800c118:	4b11      	ldr	r3, [pc, #68]	; (800c160 <_dtoa_r+0x2f0>)
 800c11a:	4602      	mov	r2, r0
 800c11c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c120:	e6c0      	b.n	800bea4 <_dtoa_r+0x34>
 800c122:	2301      	movs	r3, #1
 800c124:	e7df      	b.n	800c0e6 <_dtoa_r+0x276>
 800c126:	bf00      	nop
 800c128:	636f4361 	.word	0x636f4361
 800c12c:	3fd287a7 	.word	0x3fd287a7
 800c130:	8b60c8b3 	.word	0x8b60c8b3
 800c134:	3fc68a28 	.word	0x3fc68a28
 800c138:	509f79fb 	.word	0x509f79fb
 800c13c:	3fd34413 	.word	0x3fd34413
 800c140:	08010826 	.word	0x08010826
 800c144:	0801083d 	.word	0x0801083d
 800c148:	7ff00000 	.word	0x7ff00000
 800c14c:	08010822 	.word	0x08010822
 800c150:	08010819 	.word	0x08010819
 800c154:	08010a92 	.word	0x08010a92
 800c158:	3ff80000 	.word	0x3ff80000
 800c15c:	080109a8 	.word	0x080109a8
 800c160:	08010898 	.word	0x08010898
 800c164:	2501      	movs	r5, #1
 800c166:	2300      	movs	r3, #0
 800c168:	9306      	str	r3, [sp, #24]
 800c16a:	9508      	str	r5, [sp, #32]
 800c16c:	f04f 33ff 	mov.w	r3, #4294967295
 800c170:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c174:	2200      	movs	r2, #0
 800c176:	2312      	movs	r3, #18
 800c178:	e7b0      	b.n	800c0dc <_dtoa_r+0x26c>
 800c17a:	2301      	movs	r3, #1
 800c17c:	9308      	str	r3, [sp, #32]
 800c17e:	e7f5      	b.n	800c16c <_dtoa_r+0x2fc>
 800c180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c182:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c186:	e7b8      	b.n	800c0fa <_dtoa_r+0x28a>
 800c188:	3101      	adds	r1, #1
 800c18a:	6041      	str	r1, [r0, #4]
 800c18c:	0052      	lsls	r2, r2, #1
 800c18e:	e7b8      	b.n	800c102 <_dtoa_r+0x292>
 800c190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c192:	9a01      	ldr	r2, [sp, #4]
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	9b03      	ldr	r3, [sp, #12]
 800c198:	2b0e      	cmp	r3, #14
 800c19a:	f200 809d 	bhi.w	800c2d8 <_dtoa_r+0x468>
 800c19e:	2d00      	cmp	r5, #0
 800c1a0:	f000 809a 	beq.w	800c2d8 <_dtoa_r+0x468>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd32      	ble.n	800c210 <_dtoa_r+0x3a0>
 800c1aa:	4ab7      	ldr	r2, [pc, #732]	; (800c488 <_dtoa_r+0x618>)
 800c1ac:	f003 030f 	and.w	r3, r3, #15
 800c1b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1b8:	9b00      	ldr	r3, [sp, #0]
 800c1ba:	05d8      	lsls	r0, r3, #23
 800c1bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c1c0:	d516      	bpl.n	800c1f0 <_dtoa_r+0x380>
 800c1c2:	4bb2      	ldr	r3, [pc, #712]	; (800c48c <_dtoa_r+0x61c>)
 800c1c4:	ec51 0b19 	vmov	r0, r1, d9
 800c1c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1cc:	f7f4 fb3e 	bl	800084c <__aeabi_ddiv>
 800c1d0:	f007 070f 	and.w	r7, r7, #15
 800c1d4:	4682      	mov	sl, r0
 800c1d6:	468b      	mov	fp, r1
 800c1d8:	2503      	movs	r5, #3
 800c1da:	4eac      	ldr	r6, [pc, #688]	; (800c48c <_dtoa_r+0x61c>)
 800c1dc:	b957      	cbnz	r7, 800c1f4 <_dtoa_r+0x384>
 800c1de:	4642      	mov	r2, r8
 800c1e0:	464b      	mov	r3, r9
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	4659      	mov	r1, fp
 800c1e6:	f7f4 fb31 	bl	800084c <__aeabi_ddiv>
 800c1ea:	4682      	mov	sl, r0
 800c1ec:	468b      	mov	fp, r1
 800c1ee:	e028      	b.n	800c242 <_dtoa_r+0x3d2>
 800c1f0:	2502      	movs	r5, #2
 800c1f2:	e7f2      	b.n	800c1da <_dtoa_r+0x36a>
 800c1f4:	07f9      	lsls	r1, r7, #31
 800c1f6:	d508      	bpl.n	800c20a <_dtoa_r+0x39a>
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	3501      	adds	r5, #1
 800c206:	4680      	mov	r8, r0
 800c208:	4689      	mov	r9, r1
 800c20a:	107f      	asrs	r7, r7, #1
 800c20c:	3608      	adds	r6, #8
 800c20e:	e7e5      	b.n	800c1dc <_dtoa_r+0x36c>
 800c210:	f000 809b 	beq.w	800c34a <_dtoa_r+0x4da>
 800c214:	9b00      	ldr	r3, [sp, #0]
 800c216:	4f9d      	ldr	r7, [pc, #628]	; (800c48c <_dtoa_r+0x61c>)
 800c218:	425e      	negs	r6, r3
 800c21a:	4b9b      	ldr	r3, [pc, #620]	; (800c488 <_dtoa_r+0x618>)
 800c21c:	f006 020f 	and.w	r2, r6, #15
 800c220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	ec51 0b19 	vmov	r0, r1, d9
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	1136      	asrs	r6, r6, #4
 800c232:	4682      	mov	sl, r0
 800c234:	468b      	mov	fp, r1
 800c236:	2300      	movs	r3, #0
 800c238:	2502      	movs	r5, #2
 800c23a:	2e00      	cmp	r6, #0
 800c23c:	d17a      	bne.n	800c334 <_dtoa_r+0x4c4>
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1d3      	bne.n	800c1ea <_dtoa_r+0x37a>
 800c242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 8082 	beq.w	800c34e <_dtoa_r+0x4de>
 800c24a:	4b91      	ldr	r3, [pc, #580]	; (800c490 <_dtoa_r+0x620>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	4650      	mov	r0, sl
 800c250:	4659      	mov	r1, fp
 800c252:	f7f4 fc43 	bl	8000adc <__aeabi_dcmplt>
 800c256:	2800      	cmp	r0, #0
 800c258:	d079      	beq.n	800c34e <_dtoa_r+0x4de>
 800c25a:	9b03      	ldr	r3, [sp, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d076      	beq.n	800c34e <_dtoa_r+0x4de>
 800c260:	9b02      	ldr	r3, [sp, #8]
 800c262:	2b00      	cmp	r3, #0
 800c264:	dd36      	ble.n	800c2d4 <_dtoa_r+0x464>
 800c266:	9b00      	ldr	r3, [sp, #0]
 800c268:	4650      	mov	r0, sl
 800c26a:	4659      	mov	r1, fp
 800c26c:	1e5f      	subs	r7, r3, #1
 800c26e:	2200      	movs	r2, #0
 800c270:	4b88      	ldr	r3, [pc, #544]	; (800c494 <_dtoa_r+0x624>)
 800c272:	f7f4 f9c1 	bl	80005f8 <__aeabi_dmul>
 800c276:	9e02      	ldr	r6, [sp, #8]
 800c278:	4682      	mov	sl, r0
 800c27a:	468b      	mov	fp, r1
 800c27c:	3501      	adds	r5, #1
 800c27e:	4628      	mov	r0, r5
 800c280:	f7f4 f950 	bl	8000524 <__aeabi_i2d>
 800c284:	4652      	mov	r2, sl
 800c286:	465b      	mov	r3, fp
 800c288:	f7f4 f9b6 	bl	80005f8 <__aeabi_dmul>
 800c28c:	4b82      	ldr	r3, [pc, #520]	; (800c498 <_dtoa_r+0x628>)
 800c28e:	2200      	movs	r2, #0
 800c290:	f7f3 fffc 	bl	800028c <__adddf3>
 800c294:	46d0      	mov	r8, sl
 800c296:	46d9      	mov	r9, fp
 800c298:	4682      	mov	sl, r0
 800c29a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	d158      	bne.n	800c354 <_dtoa_r+0x4e4>
 800c2a2:	4b7e      	ldr	r3, [pc, #504]	; (800c49c <_dtoa_r+0x62c>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	f7f3 ffed 	bl	8000288 <__aeabi_dsub>
 800c2ae:	4652      	mov	r2, sl
 800c2b0:	465b      	mov	r3, fp
 800c2b2:	4680      	mov	r8, r0
 800c2b4:	4689      	mov	r9, r1
 800c2b6:	f7f4 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	f040 8295 	bne.w	800c7ea <_dtoa_r+0x97a>
 800c2c0:	4652      	mov	r2, sl
 800c2c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	f7f4 fc07 	bl	8000adc <__aeabi_dcmplt>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f040 8289 	bne.w	800c7e6 <_dtoa_r+0x976>
 800c2d4:	ec5b ab19 	vmov	sl, fp, d9
 800c2d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f2c0 8148 	blt.w	800c570 <_dtoa_r+0x700>
 800c2e0:	9a00      	ldr	r2, [sp, #0]
 800c2e2:	2a0e      	cmp	r2, #14
 800c2e4:	f300 8144 	bgt.w	800c570 <_dtoa_r+0x700>
 800c2e8:	4b67      	ldr	r3, [pc, #412]	; (800c488 <_dtoa_r+0x618>)
 800c2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f280 80d5 	bge.w	800c4a4 <_dtoa_r+0x634>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f300 80d1 	bgt.w	800c4a4 <_dtoa_r+0x634>
 800c302:	f040 826f 	bne.w	800c7e4 <_dtoa_r+0x974>
 800c306:	4b65      	ldr	r3, [pc, #404]	; (800c49c <_dtoa_r+0x62c>)
 800c308:	2200      	movs	r2, #0
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	f7f4 f973 	bl	80005f8 <__aeabi_dmul>
 800c312:	4652      	mov	r2, sl
 800c314:	465b      	mov	r3, fp
 800c316:	f7f4 fbf5 	bl	8000b04 <__aeabi_dcmpge>
 800c31a:	9e03      	ldr	r6, [sp, #12]
 800c31c:	4637      	mov	r7, r6
 800c31e:	2800      	cmp	r0, #0
 800c320:	f040 8245 	bne.w	800c7ae <_dtoa_r+0x93e>
 800c324:	9d01      	ldr	r5, [sp, #4]
 800c326:	2331      	movs	r3, #49	; 0x31
 800c328:	f805 3b01 	strb.w	r3, [r5], #1
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	3301      	adds	r3, #1
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	e240      	b.n	800c7b6 <_dtoa_r+0x946>
 800c334:	07f2      	lsls	r2, r6, #31
 800c336:	d505      	bpl.n	800c344 <_dtoa_r+0x4d4>
 800c338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c33c:	f7f4 f95c 	bl	80005f8 <__aeabi_dmul>
 800c340:	3501      	adds	r5, #1
 800c342:	2301      	movs	r3, #1
 800c344:	1076      	asrs	r6, r6, #1
 800c346:	3708      	adds	r7, #8
 800c348:	e777      	b.n	800c23a <_dtoa_r+0x3ca>
 800c34a:	2502      	movs	r5, #2
 800c34c:	e779      	b.n	800c242 <_dtoa_r+0x3d2>
 800c34e:	9f00      	ldr	r7, [sp, #0]
 800c350:	9e03      	ldr	r6, [sp, #12]
 800c352:	e794      	b.n	800c27e <_dtoa_r+0x40e>
 800c354:	9901      	ldr	r1, [sp, #4]
 800c356:	4b4c      	ldr	r3, [pc, #304]	; (800c488 <_dtoa_r+0x618>)
 800c358:	4431      	add	r1, r6
 800c35a:	910d      	str	r1, [sp, #52]	; 0x34
 800c35c:	9908      	ldr	r1, [sp, #32]
 800c35e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c362:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c366:	2900      	cmp	r1, #0
 800c368:	d043      	beq.n	800c3f2 <_dtoa_r+0x582>
 800c36a:	494d      	ldr	r1, [pc, #308]	; (800c4a0 <_dtoa_r+0x630>)
 800c36c:	2000      	movs	r0, #0
 800c36e:	f7f4 fa6d 	bl	800084c <__aeabi_ddiv>
 800c372:	4652      	mov	r2, sl
 800c374:	465b      	mov	r3, fp
 800c376:	f7f3 ff87 	bl	8000288 <__aeabi_dsub>
 800c37a:	9d01      	ldr	r5, [sp, #4]
 800c37c:	4682      	mov	sl, r0
 800c37e:	468b      	mov	fp, r1
 800c380:	4649      	mov	r1, r9
 800c382:	4640      	mov	r0, r8
 800c384:	f7f4 fbe8 	bl	8000b58 <__aeabi_d2iz>
 800c388:	4606      	mov	r6, r0
 800c38a:	f7f4 f8cb 	bl	8000524 <__aeabi_i2d>
 800c38e:	4602      	mov	r2, r0
 800c390:	460b      	mov	r3, r1
 800c392:	4640      	mov	r0, r8
 800c394:	4649      	mov	r1, r9
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	3630      	adds	r6, #48	; 0x30
 800c39c:	f805 6b01 	strb.w	r6, [r5], #1
 800c3a0:	4652      	mov	r2, sl
 800c3a2:	465b      	mov	r3, fp
 800c3a4:	4680      	mov	r8, r0
 800c3a6:	4689      	mov	r9, r1
 800c3a8:	f7f4 fb98 	bl	8000adc <__aeabi_dcmplt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	d163      	bne.n	800c478 <_dtoa_r+0x608>
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	464b      	mov	r3, r9
 800c3b4:	4936      	ldr	r1, [pc, #216]	; (800c490 <_dtoa_r+0x620>)
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	f7f3 ff66 	bl	8000288 <__aeabi_dsub>
 800c3bc:	4652      	mov	r2, sl
 800c3be:	465b      	mov	r3, fp
 800c3c0:	f7f4 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	f040 80b5 	bne.w	800c534 <_dtoa_r+0x6c4>
 800c3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	d081      	beq.n	800c2d4 <_dtoa_r+0x464>
 800c3d0:	4b30      	ldr	r3, [pc, #192]	; (800c494 <_dtoa_r+0x624>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	f7f4 f90e 	bl	80005f8 <__aeabi_dmul>
 800c3dc:	4b2d      	ldr	r3, [pc, #180]	; (800c494 <_dtoa_r+0x624>)
 800c3de:	4682      	mov	sl, r0
 800c3e0:	468b      	mov	fp, r1
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f7f4 f906 	bl	80005f8 <__aeabi_dmul>
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4689      	mov	r9, r1
 800c3f0:	e7c6      	b.n	800c380 <_dtoa_r+0x510>
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	4659      	mov	r1, fp
 800c3f6:	f7f4 f8ff 	bl	80005f8 <__aeabi_dmul>
 800c3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3fc:	9d01      	ldr	r5, [sp, #4]
 800c3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c400:	4682      	mov	sl, r0
 800c402:	468b      	mov	fp, r1
 800c404:	4649      	mov	r1, r9
 800c406:	4640      	mov	r0, r8
 800c408:	f7f4 fba6 	bl	8000b58 <__aeabi_d2iz>
 800c40c:	4606      	mov	r6, r0
 800c40e:	f7f4 f889 	bl	8000524 <__aeabi_i2d>
 800c412:	3630      	adds	r6, #48	; 0x30
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f3 ff34 	bl	8000288 <__aeabi_dsub>
 800c420:	f805 6b01 	strb.w	r6, [r5], #1
 800c424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c426:	429d      	cmp	r5, r3
 800c428:	4680      	mov	r8, r0
 800c42a:	4689      	mov	r9, r1
 800c42c:	f04f 0200 	mov.w	r2, #0
 800c430:	d124      	bne.n	800c47c <_dtoa_r+0x60c>
 800c432:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <_dtoa_r+0x630>)
 800c434:	4650      	mov	r0, sl
 800c436:	4659      	mov	r1, fp
 800c438:	f7f3 ff28 	bl	800028c <__adddf3>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	4640      	mov	r0, r8
 800c442:	4649      	mov	r1, r9
 800c444:	f7f4 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d173      	bne.n	800c534 <_dtoa_r+0x6c4>
 800c44c:	4652      	mov	r2, sl
 800c44e:	465b      	mov	r3, fp
 800c450:	4913      	ldr	r1, [pc, #76]	; (800c4a0 <_dtoa_r+0x630>)
 800c452:	2000      	movs	r0, #0
 800c454:	f7f3 ff18 	bl	8000288 <__aeabi_dsub>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4640      	mov	r0, r8
 800c45e:	4649      	mov	r1, r9
 800c460:	f7f4 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800c464:	2800      	cmp	r0, #0
 800c466:	f43f af35 	beq.w	800c2d4 <_dtoa_r+0x464>
 800c46a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c46c:	1e6b      	subs	r3, r5, #1
 800c46e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c470:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c474:	2b30      	cmp	r3, #48	; 0x30
 800c476:	d0f8      	beq.n	800c46a <_dtoa_r+0x5fa>
 800c478:	9700      	str	r7, [sp, #0]
 800c47a:	e049      	b.n	800c510 <_dtoa_r+0x6a0>
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <_dtoa_r+0x624>)
 800c47e:	f7f4 f8bb 	bl	80005f8 <__aeabi_dmul>
 800c482:	4680      	mov	r8, r0
 800c484:	4689      	mov	r9, r1
 800c486:	e7bd      	b.n	800c404 <_dtoa_r+0x594>
 800c488:	080109a8 	.word	0x080109a8
 800c48c:	08010980 	.word	0x08010980
 800c490:	3ff00000 	.word	0x3ff00000
 800c494:	40240000 	.word	0x40240000
 800c498:	401c0000 	.word	0x401c0000
 800c49c:	40140000 	.word	0x40140000
 800c4a0:	3fe00000 	.word	0x3fe00000
 800c4a4:	9d01      	ldr	r5, [sp, #4]
 800c4a6:	4656      	mov	r6, sl
 800c4a8:	465f      	mov	r7, fp
 800c4aa:	4642      	mov	r2, r8
 800c4ac:	464b      	mov	r3, r9
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	4639      	mov	r1, r7
 800c4b2:	f7f4 f9cb 	bl	800084c <__aeabi_ddiv>
 800c4b6:	f7f4 fb4f 	bl	8000b58 <__aeabi_d2iz>
 800c4ba:	4682      	mov	sl, r0
 800c4bc:	f7f4 f832 	bl	8000524 <__aeabi_i2d>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	f7f4 f898 	bl	80005f8 <__aeabi_dmul>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c4d4:	f7f3 fed8 	bl	8000288 <__aeabi_dsub>
 800c4d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c4dc:	9e01      	ldr	r6, [sp, #4]
 800c4de:	9f03      	ldr	r7, [sp, #12]
 800c4e0:	1bae      	subs	r6, r5, r6
 800c4e2:	42b7      	cmp	r7, r6
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	d135      	bne.n	800c556 <_dtoa_r+0x6e6>
 800c4ea:	f7f3 fecf 	bl	800028c <__adddf3>
 800c4ee:	4642      	mov	r2, r8
 800c4f0:	464b      	mov	r3, r9
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	f7f4 fb0f 	bl	8000b18 <__aeabi_dcmpgt>
 800c4fa:	b9d0      	cbnz	r0, 800c532 <_dtoa_r+0x6c2>
 800c4fc:	4642      	mov	r2, r8
 800c4fe:	464b      	mov	r3, r9
 800c500:	4630      	mov	r0, r6
 800c502:	4639      	mov	r1, r7
 800c504:	f7f4 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c508:	b110      	cbz	r0, 800c510 <_dtoa_r+0x6a0>
 800c50a:	f01a 0f01 	tst.w	sl, #1
 800c50e:	d110      	bne.n	800c532 <_dtoa_r+0x6c2>
 800c510:	4620      	mov	r0, r4
 800c512:	ee18 1a10 	vmov	r1, s16
 800c516:	f000 fe87 	bl	800d228 <_Bfree>
 800c51a:	2300      	movs	r3, #0
 800c51c:	9800      	ldr	r0, [sp, #0]
 800c51e:	702b      	strb	r3, [r5, #0]
 800c520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c522:	3001      	adds	r0, #1
 800c524:	6018      	str	r0, [r3, #0]
 800c526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f43f acf1 	beq.w	800bf10 <_dtoa_r+0xa0>
 800c52e:	601d      	str	r5, [r3, #0]
 800c530:	e4ee      	b.n	800bf10 <_dtoa_r+0xa0>
 800c532:	9f00      	ldr	r7, [sp, #0]
 800c534:	462b      	mov	r3, r5
 800c536:	461d      	mov	r5, r3
 800c538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c53c:	2a39      	cmp	r2, #57	; 0x39
 800c53e:	d106      	bne.n	800c54e <_dtoa_r+0x6de>
 800c540:	9a01      	ldr	r2, [sp, #4]
 800c542:	429a      	cmp	r2, r3
 800c544:	d1f7      	bne.n	800c536 <_dtoa_r+0x6c6>
 800c546:	9901      	ldr	r1, [sp, #4]
 800c548:	2230      	movs	r2, #48	; 0x30
 800c54a:	3701      	adds	r7, #1
 800c54c:	700a      	strb	r2, [r1, #0]
 800c54e:	781a      	ldrb	r2, [r3, #0]
 800c550:	3201      	adds	r2, #1
 800c552:	701a      	strb	r2, [r3, #0]
 800c554:	e790      	b.n	800c478 <_dtoa_r+0x608>
 800c556:	4ba6      	ldr	r3, [pc, #664]	; (800c7f0 <_dtoa_r+0x980>)
 800c558:	2200      	movs	r2, #0
 800c55a:	f7f4 f84d 	bl	80005f8 <__aeabi_dmul>
 800c55e:	2200      	movs	r2, #0
 800c560:	2300      	movs	r3, #0
 800c562:	4606      	mov	r6, r0
 800c564:	460f      	mov	r7, r1
 800c566:	f7f4 faaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d09d      	beq.n	800c4aa <_dtoa_r+0x63a>
 800c56e:	e7cf      	b.n	800c510 <_dtoa_r+0x6a0>
 800c570:	9a08      	ldr	r2, [sp, #32]
 800c572:	2a00      	cmp	r2, #0
 800c574:	f000 80d7 	beq.w	800c726 <_dtoa_r+0x8b6>
 800c578:	9a06      	ldr	r2, [sp, #24]
 800c57a:	2a01      	cmp	r2, #1
 800c57c:	f300 80ba 	bgt.w	800c6f4 <_dtoa_r+0x884>
 800c580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c582:	2a00      	cmp	r2, #0
 800c584:	f000 80b2 	beq.w	800c6ec <_dtoa_r+0x87c>
 800c588:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c58c:	9e07      	ldr	r6, [sp, #28]
 800c58e:	9d04      	ldr	r5, [sp, #16]
 800c590:	9a04      	ldr	r2, [sp, #16]
 800c592:	441a      	add	r2, r3
 800c594:	9204      	str	r2, [sp, #16]
 800c596:	9a05      	ldr	r2, [sp, #20]
 800c598:	2101      	movs	r1, #1
 800c59a:	441a      	add	r2, r3
 800c59c:	4620      	mov	r0, r4
 800c59e:	9205      	str	r2, [sp, #20]
 800c5a0:	f000 ff44 	bl	800d42c <__i2b>
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	2d00      	cmp	r5, #0
 800c5a8:	dd0c      	ble.n	800c5c4 <_dtoa_r+0x754>
 800c5aa:	9b05      	ldr	r3, [sp, #20]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	dd09      	ble.n	800c5c4 <_dtoa_r+0x754>
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	9a04      	ldr	r2, [sp, #16]
 800c5b4:	bfa8      	it	ge
 800c5b6:	462b      	movge	r3, r5
 800c5b8:	1ad2      	subs	r2, r2, r3
 800c5ba:	9204      	str	r2, [sp, #16]
 800c5bc:	9a05      	ldr	r2, [sp, #20]
 800c5be:	1aed      	subs	r5, r5, r3
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	9b07      	ldr	r3, [sp, #28]
 800c5c6:	b31b      	cbz	r3, 800c610 <_dtoa_r+0x7a0>
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 80af 	beq.w	800c72e <_dtoa_r+0x8be>
 800c5d0:	2e00      	cmp	r6, #0
 800c5d2:	dd13      	ble.n	800c5fc <_dtoa_r+0x78c>
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	4620      	mov	r0, r4
 800c5da:	f000 ffe7 	bl	800d5ac <__pow5mult>
 800c5de:	ee18 2a10 	vmov	r2, s16
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	4607      	mov	r7, r0
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 ff36 	bl	800d458 <__multiply>
 800c5ec:	ee18 1a10 	vmov	r1, s16
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fe18 	bl	800d228 <_Bfree>
 800c5f8:	ee08 8a10 	vmov	s16, r8
 800c5fc:	9b07      	ldr	r3, [sp, #28]
 800c5fe:	1b9a      	subs	r2, r3, r6
 800c600:	d006      	beq.n	800c610 <_dtoa_r+0x7a0>
 800c602:	ee18 1a10 	vmov	r1, s16
 800c606:	4620      	mov	r0, r4
 800c608:	f000 ffd0 	bl	800d5ac <__pow5mult>
 800c60c:	ee08 0a10 	vmov	s16, r0
 800c610:	2101      	movs	r1, #1
 800c612:	4620      	mov	r0, r4
 800c614:	f000 ff0a 	bl	800d42c <__i2b>
 800c618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	4606      	mov	r6, r0
 800c61e:	f340 8088 	ble.w	800c732 <_dtoa_r+0x8c2>
 800c622:	461a      	mov	r2, r3
 800c624:	4601      	mov	r1, r0
 800c626:	4620      	mov	r0, r4
 800c628:	f000 ffc0 	bl	800d5ac <__pow5mult>
 800c62c:	9b06      	ldr	r3, [sp, #24]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	4606      	mov	r6, r0
 800c632:	f340 8081 	ble.w	800c738 <_dtoa_r+0x8c8>
 800c636:	f04f 0800 	mov.w	r8, #0
 800c63a:	6933      	ldr	r3, [r6, #16]
 800c63c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c640:	6918      	ldr	r0, [r3, #16]
 800c642:	f000 fea3 	bl	800d38c <__hi0bits>
 800c646:	f1c0 0020 	rsb	r0, r0, #32
 800c64a:	9b05      	ldr	r3, [sp, #20]
 800c64c:	4418      	add	r0, r3
 800c64e:	f010 001f 	ands.w	r0, r0, #31
 800c652:	f000 8092 	beq.w	800c77a <_dtoa_r+0x90a>
 800c656:	f1c0 0320 	rsb	r3, r0, #32
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	f340 808a 	ble.w	800c774 <_dtoa_r+0x904>
 800c660:	f1c0 001c 	rsb	r0, r0, #28
 800c664:	9b04      	ldr	r3, [sp, #16]
 800c666:	4403      	add	r3, r0
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	9b05      	ldr	r3, [sp, #20]
 800c66c:	4403      	add	r3, r0
 800c66e:	4405      	add	r5, r0
 800c670:	9305      	str	r3, [sp, #20]
 800c672:	9b04      	ldr	r3, [sp, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	dd07      	ble.n	800c688 <_dtoa_r+0x818>
 800c678:	ee18 1a10 	vmov	r1, s16
 800c67c:	461a      	mov	r2, r3
 800c67e:	4620      	mov	r0, r4
 800c680:	f000 ffee 	bl	800d660 <__lshift>
 800c684:	ee08 0a10 	vmov	s16, r0
 800c688:	9b05      	ldr	r3, [sp, #20]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	dd05      	ble.n	800c69a <_dtoa_r+0x82a>
 800c68e:	4631      	mov	r1, r6
 800c690:	461a      	mov	r2, r3
 800c692:	4620      	mov	r0, r4
 800c694:	f000 ffe4 	bl	800d660 <__lshift>
 800c698:	4606      	mov	r6, r0
 800c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d06e      	beq.n	800c77e <_dtoa_r+0x90e>
 800c6a0:	ee18 0a10 	vmov	r0, s16
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	f001 f84b 	bl	800d740 <__mcmp>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	da67      	bge.n	800c77e <_dtoa_r+0x90e>
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	ee18 1a10 	vmov	r1, s16
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	220a      	movs	r2, #10
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fdd5 	bl	800d26c <__multadd>
 800c6c2:	9b08      	ldr	r3, [sp, #32]
 800c6c4:	ee08 0a10 	vmov	s16, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 81b1 	beq.w	800ca30 <_dtoa_r+0xbc0>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fdc9 	bl	800d26c <__multadd>
 800c6da:	9b02      	ldr	r3, [sp, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	4607      	mov	r7, r0
 800c6e0:	f300 808e 	bgt.w	800c800 <_dtoa_r+0x990>
 800c6e4:	9b06      	ldr	r3, [sp, #24]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	dc51      	bgt.n	800c78e <_dtoa_r+0x91e>
 800c6ea:	e089      	b.n	800c800 <_dtoa_r+0x990>
 800c6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6f2:	e74b      	b.n	800c58c <_dtoa_r+0x71c>
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	1e5e      	subs	r6, r3, #1
 800c6f8:	9b07      	ldr	r3, [sp, #28]
 800c6fa:	42b3      	cmp	r3, r6
 800c6fc:	bfbf      	itttt	lt
 800c6fe:	9b07      	ldrlt	r3, [sp, #28]
 800c700:	9607      	strlt	r6, [sp, #28]
 800c702:	1af2      	sublt	r2, r6, r3
 800c704:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c706:	bfb6      	itet	lt
 800c708:	189b      	addlt	r3, r3, r2
 800c70a:	1b9e      	subge	r6, r3, r6
 800c70c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	bfb8      	it	lt
 800c712:	2600      	movlt	r6, #0
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfb7      	itett	lt
 800c718:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c71c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c720:	1a9d      	sublt	r5, r3, r2
 800c722:	2300      	movlt	r3, #0
 800c724:	e734      	b.n	800c590 <_dtoa_r+0x720>
 800c726:	9e07      	ldr	r6, [sp, #28]
 800c728:	9d04      	ldr	r5, [sp, #16]
 800c72a:	9f08      	ldr	r7, [sp, #32]
 800c72c:	e73b      	b.n	800c5a6 <_dtoa_r+0x736>
 800c72e:	9a07      	ldr	r2, [sp, #28]
 800c730:	e767      	b.n	800c602 <_dtoa_r+0x792>
 800c732:	9b06      	ldr	r3, [sp, #24]
 800c734:	2b01      	cmp	r3, #1
 800c736:	dc18      	bgt.n	800c76a <_dtoa_r+0x8fa>
 800c738:	f1ba 0f00 	cmp.w	sl, #0
 800c73c:	d115      	bne.n	800c76a <_dtoa_r+0x8fa>
 800c73e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c742:	b993      	cbnz	r3, 800c76a <_dtoa_r+0x8fa>
 800c744:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c748:	0d1b      	lsrs	r3, r3, #20
 800c74a:	051b      	lsls	r3, r3, #20
 800c74c:	b183      	cbz	r3, 800c770 <_dtoa_r+0x900>
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	3301      	adds	r3, #1
 800c752:	9304      	str	r3, [sp, #16]
 800c754:	9b05      	ldr	r3, [sp, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	9305      	str	r3, [sp, #20]
 800c75a:	f04f 0801 	mov.w	r8, #1
 800c75e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c760:	2b00      	cmp	r3, #0
 800c762:	f47f af6a 	bne.w	800c63a <_dtoa_r+0x7ca>
 800c766:	2001      	movs	r0, #1
 800c768:	e76f      	b.n	800c64a <_dtoa_r+0x7da>
 800c76a:	f04f 0800 	mov.w	r8, #0
 800c76e:	e7f6      	b.n	800c75e <_dtoa_r+0x8ee>
 800c770:	4698      	mov	r8, r3
 800c772:	e7f4      	b.n	800c75e <_dtoa_r+0x8ee>
 800c774:	f43f af7d 	beq.w	800c672 <_dtoa_r+0x802>
 800c778:	4618      	mov	r0, r3
 800c77a:	301c      	adds	r0, #28
 800c77c:	e772      	b.n	800c664 <_dtoa_r+0x7f4>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	2b00      	cmp	r3, #0
 800c782:	dc37      	bgt.n	800c7f4 <_dtoa_r+0x984>
 800c784:	9b06      	ldr	r3, [sp, #24]
 800c786:	2b02      	cmp	r3, #2
 800c788:	dd34      	ble.n	800c7f4 <_dtoa_r+0x984>
 800c78a:	9b03      	ldr	r3, [sp, #12]
 800c78c:	9302      	str	r3, [sp, #8]
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	b96b      	cbnz	r3, 800c7ae <_dtoa_r+0x93e>
 800c792:	4631      	mov	r1, r6
 800c794:	2205      	movs	r2, #5
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fd68 	bl	800d26c <__multadd>
 800c79c:	4601      	mov	r1, r0
 800c79e:	4606      	mov	r6, r0
 800c7a0:	ee18 0a10 	vmov	r0, s16
 800c7a4:	f000 ffcc 	bl	800d740 <__mcmp>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	f73f adbb 	bgt.w	800c324 <_dtoa_r+0x4b4>
 800c7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b0:	9d01      	ldr	r5, [sp, #4]
 800c7b2:	43db      	mvns	r3, r3
 800c7b4:	9300      	str	r3, [sp, #0]
 800c7b6:	f04f 0800 	mov.w	r8, #0
 800c7ba:	4631      	mov	r1, r6
 800c7bc:	4620      	mov	r0, r4
 800c7be:	f000 fd33 	bl	800d228 <_Bfree>
 800c7c2:	2f00      	cmp	r7, #0
 800c7c4:	f43f aea4 	beq.w	800c510 <_dtoa_r+0x6a0>
 800c7c8:	f1b8 0f00 	cmp.w	r8, #0
 800c7cc:	d005      	beq.n	800c7da <_dtoa_r+0x96a>
 800c7ce:	45b8      	cmp	r8, r7
 800c7d0:	d003      	beq.n	800c7da <_dtoa_r+0x96a>
 800c7d2:	4641      	mov	r1, r8
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f000 fd27 	bl	800d228 <_Bfree>
 800c7da:	4639      	mov	r1, r7
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f000 fd23 	bl	800d228 <_Bfree>
 800c7e2:	e695      	b.n	800c510 <_dtoa_r+0x6a0>
 800c7e4:	2600      	movs	r6, #0
 800c7e6:	4637      	mov	r7, r6
 800c7e8:	e7e1      	b.n	800c7ae <_dtoa_r+0x93e>
 800c7ea:	9700      	str	r7, [sp, #0]
 800c7ec:	4637      	mov	r7, r6
 800c7ee:	e599      	b.n	800c324 <_dtoa_r+0x4b4>
 800c7f0:	40240000 	.word	0x40240000
 800c7f4:	9b08      	ldr	r3, [sp, #32]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 80ca 	beq.w	800c990 <_dtoa_r+0xb20>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	9302      	str	r3, [sp, #8]
 800c800:	2d00      	cmp	r5, #0
 800c802:	dd05      	ble.n	800c810 <_dtoa_r+0x9a0>
 800c804:	4639      	mov	r1, r7
 800c806:	462a      	mov	r2, r5
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 ff29 	bl	800d660 <__lshift>
 800c80e:	4607      	mov	r7, r0
 800c810:	f1b8 0f00 	cmp.w	r8, #0
 800c814:	d05b      	beq.n	800c8ce <_dtoa_r+0xa5e>
 800c816:	6879      	ldr	r1, [r7, #4]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fcc5 	bl	800d1a8 <_Balloc>
 800c81e:	4605      	mov	r5, r0
 800c820:	b928      	cbnz	r0, 800c82e <_dtoa_r+0x9be>
 800c822:	4b87      	ldr	r3, [pc, #540]	; (800ca40 <_dtoa_r+0xbd0>)
 800c824:	4602      	mov	r2, r0
 800c826:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c82a:	f7ff bb3b 	b.w	800bea4 <_dtoa_r+0x34>
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	3202      	adds	r2, #2
 800c832:	0092      	lsls	r2, r2, #2
 800c834:	f107 010c 	add.w	r1, r7, #12
 800c838:	300c      	adds	r0, #12
 800c83a:	f000 fca7 	bl	800d18c <memcpy>
 800c83e:	2201      	movs	r2, #1
 800c840:	4629      	mov	r1, r5
 800c842:	4620      	mov	r0, r4
 800c844:	f000 ff0c 	bl	800d660 <__lshift>
 800c848:	9b01      	ldr	r3, [sp, #4]
 800c84a:	f103 0901 	add.w	r9, r3, #1
 800c84e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c852:	4413      	add	r3, r2
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	f00a 0301 	and.w	r3, sl, #1
 800c85a:	46b8      	mov	r8, r7
 800c85c:	9304      	str	r3, [sp, #16]
 800c85e:	4607      	mov	r7, r0
 800c860:	4631      	mov	r1, r6
 800c862:	ee18 0a10 	vmov	r0, s16
 800c866:	f7ff fa75 	bl	800bd54 <quorem>
 800c86a:	4641      	mov	r1, r8
 800c86c:	9002      	str	r0, [sp, #8]
 800c86e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c872:	ee18 0a10 	vmov	r0, s16
 800c876:	f000 ff63 	bl	800d740 <__mcmp>
 800c87a:	463a      	mov	r2, r7
 800c87c:	9003      	str	r0, [sp, #12]
 800c87e:	4631      	mov	r1, r6
 800c880:	4620      	mov	r0, r4
 800c882:	f000 ff79 	bl	800d778 <__mdiff>
 800c886:	68c2      	ldr	r2, [r0, #12]
 800c888:	f109 3bff 	add.w	fp, r9, #4294967295
 800c88c:	4605      	mov	r5, r0
 800c88e:	bb02      	cbnz	r2, 800c8d2 <_dtoa_r+0xa62>
 800c890:	4601      	mov	r1, r0
 800c892:	ee18 0a10 	vmov	r0, s16
 800c896:	f000 ff53 	bl	800d740 <__mcmp>
 800c89a:	4602      	mov	r2, r0
 800c89c:	4629      	mov	r1, r5
 800c89e:	4620      	mov	r0, r4
 800c8a0:	9207      	str	r2, [sp, #28]
 800c8a2:	f000 fcc1 	bl	800d228 <_Bfree>
 800c8a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c8aa:	ea43 0102 	orr.w	r1, r3, r2
 800c8ae:	9b04      	ldr	r3, [sp, #16]
 800c8b0:	430b      	orrs	r3, r1
 800c8b2:	464d      	mov	r5, r9
 800c8b4:	d10f      	bne.n	800c8d6 <_dtoa_r+0xa66>
 800c8b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8ba:	d02a      	beq.n	800c912 <_dtoa_r+0xaa2>
 800c8bc:	9b03      	ldr	r3, [sp, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	dd02      	ble.n	800c8c8 <_dtoa_r+0xa58>
 800c8c2:	9b02      	ldr	r3, [sp, #8]
 800c8c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c8c8:	f88b a000 	strb.w	sl, [fp]
 800c8cc:	e775      	b.n	800c7ba <_dtoa_r+0x94a>
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	e7ba      	b.n	800c848 <_dtoa_r+0x9d8>
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	e7e2      	b.n	800c89c <_dtoa_r+0xa2c>
 800c8d6:	9b03      	ldr	r3, [sp, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	db04      	blt.n	800c8e6 <_dtoa_r+0xa76>
 800c8dc:	9906      	ldr	r1, [sp, #24]
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	9904      	ldr	r1, [sp, #16]
 800c8e2:	430b      	orrs	r3, r1
 800c8e4:	d122      	bne.n	800c92c <_dtoa_r+0xabc>
 800c8e6:	2a00      	cmp	r2, #0
 800c8e8:	ddee      	ble.n	800c8c8 <_dtoa_r+0xa58>
 800c8ea:	ee18 1a10 	vmov	r1, s16
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f000 feb5 	bl	800d660 <__lshift>
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	ee08 0a10 	vmov	s16, r0
 800c8fc:	f000 ff20 	bl	800d740 <__mcmp>
 800c900:	2800      	cmp	r0, #0
 800c902:	dc03      	bgt.n	800c90c <_dtoa_r+0xa9c>
 800c904:	d1e0      	bne.n	800c8c8 <_dtoa_r+0xa58>
 800c906:	f01a 0f01 	tst.w	sl, #1
 800c90a:	d0dd      	beq.n	800c8c8 <_dtoa_r+0xa58>
 800c90c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c910:	d1d7      	bne.n	800c8c2 <_dtoa_r+0xa52>
 800c912:	2339      	movs	r3, #57	; 0x39
 800c914:	f88b 3000 	strb.w	r3, [fp]
 800c918:	462b      	mov	r3, r5
 800c91a:	461d      	mov	r5, r3
 800c91c:	3b01      	subs	r3, #1
 800c91e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c922:	2a39      	cmp	r2, #57	; 0x39
 800c924:	d071      	beq.n	800ca0a <_dtoa_r+0xb9a>
 800c926:	3201      	adds	r2, #1
 800c928:	701a      	strb	r2, [r3, #0]
 800c92a:	e746      	b.n	800c7ba <_dtoa_r+0x94a>
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	dd07      	ble.n	800c940 <_dtoa_r+0xad0>
 800c930:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c934:	d0ed      	beq.n	800c912 <_dtoa_r+0xaa2>
 800c936:	f10a 0301 	add.w	r3, sl, #1
 800c93a:	f88b 3000 	strb.w	r3, [fp]
 800c93e:	e73c      	b.n	800c7ba <_dtoa_r+0x94a>
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c946:	4599      	cmp	r9, r3
 800c948:	d047      	beq.n	800c9da <_dtoa_r+0xb6a>
 800c94a:	ee18 1a10 	vmov	r1, s16
 800c94e:	2300      	movs	r3, #0
 800c950:	220a      	movs	r2, #10
 800c952:	4620      	mov	r0, r4
 800c954:	f000 fc8a 	bl	800d26c <__multadd>
 800c958:	45b8      	cmp	r8, r7
 800c95a:	ee08 0a10 	vmov	s16, r0
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	f04f 020a 	mov.w	r2, #10
 800c966:	4641      	mov	r1, r8
 800c968:	4620      	mov	r0, r4
 800c96a:	d106      	bne.n	800c97a <_dtoa_r+0xb0a>
 800c96c:	f000 fc7e 	bl	800d26c <__multadd>
 800c970:	4680      	mov	r8, r0
 800c972:	4607      	mov	r7, r0
 800c974:	f109 0901 	add.w	r9, r9, #1
 800c978:	e772      	b.n	800c860 <_dtoa_r+0x9f0>
 800c97a:	f000 fc77 	bl	800d26c <__multadd>
 800c97e:	4639      	mov	r1, r7
 800c980:	4680      	mov	r8, r0
 800c982:	2300      	movs	r3, #0
 800c984:	220a      	movs	r2, #10
 800c986:	4620      	mov	r0, r4
 800c988:	f000 fc70 	bl	800d26c <__multadd>
 800c98c:	4607      	mov	r7, r0
 800c98e:	e7f1      	b.n	800c974 <_dtoa_r+0xb04>
 800c990:	9b03      	ldr	r3, [sp, #12]
 800c992:	9302      	str	r3, [sp, #8]
 800c994:	9d01      	ldr	r5, [sp, #4]
 800c996:	ee18 0a10 	vmov	r0, s16
 800c99a:	4631      	mov	r1, r6
 800c99c:	f7ff f9da 	bl	800bd54 <quorem>
 800c9a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	f805 ab01 	strb.w	sl, [r5], #1
 800c9aa:	1aea      	subs	r2, r5, r3
 800c9ac:	9b02      	ldr	r3, [sp, #8]
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	dd09      	ble.n	800c9c6 <_dtoa_r+0xb56>
 800c9b2:	ee18 1a10 	vmov	r1, s16
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 fc56 	bl	800d26c <__multadd>
 800c9c0:	ee08 0a10 	vmov	s16, r0
 800c9c4:	e7e7      	b.n	800c996 <_dtoa_r+0xb26>
 800c9c6:	9b02      	ldr	r3, [sp, #8]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	bfc8      	it	gt
 800c9cc:	461d      	movgt	r5, r3
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	bfd8      	it	le
 800c9d2:	2501      	movle	r5, #1
 800c9d4:	441d      	add	r5, r3
 800c9d6:	f04f 0800 	mov.w	r8, #0
 800c9da:	ee18 1a10 	vmov	r1, s16
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 fe3d 	bl	800d660 <__lshift>
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	ee08 0a10 	vmov	s16, r0
 800c9ec:	f000 fea8 	bl	800d740 <__mcmp>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	dc91      	bgt.n	800c918 <_dtoa_r+0xaa8>
 800c9f4:	d102      	bne.n	800c9fc <_dtoa_r+0xb8c>
 800c9f6:	f01a 0f01 	tst.w	sl, #1
 800c9fa:	d18d      	bne.n	800c918 <_dtoa_r+0xaa8>
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	461d      	mov	r5, r3
 800ca00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca04:	2a30      	cmp	r2, #48	; 0x30
 800ca06:	d0fa      	beq.n	800c9fe <_dtoa_r+0xb8e>
 800ca08:	e6d7      	b.n	800c7ba <_dtoa_r+0x94a>
 800ca0a:	9a01      	ldr	r2, [sp, #4]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d184      	bne.n	800c91a <_dtoa_r+0xaaa>
 800ca10:	9b00      	ldr	r3, [sp, #0]
 800ca12:	3301      	adds	r3, #1
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2331      	movs	r3, #49	; 0x31
 800ca18:	7013      	strb	r3, [r2, #0]
 800ca1a:	e6ce      	b.n	800c7ba <_dtoa_r+0x94a>
 800ca1c:	4b09      	ldr	r3, [pc, #36]	; (800ca44 <_dtoa_r+0xbd4>)
 800ca1e:	f7ff ba95 	b.w	800bf4c <_dtoa_r+0xdc>
 800ca22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f47f aa6e 	bne.w	800bf06 <_dtoa_r+0x96>
 800ca2a:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <_dtoa_r+0xbd8>)
 800ca2c:	f7ff ba8e 	b.w	800bf4c <_dtoa_r+0xdc>
 800ca30:	9b02      	ldr	r3, [sp, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	dcae      	bgt.n	800c994 <_dtoa_r+0xb24>
 800ca36:	9b06      	ldr	r3, [sp, #24]
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	f73f aea8 	bgt.w	800c78e <_dtoa_r+0x91e>
 800ca3e:	e7a9      	b.n	800c994 <_dtoa_r+0xb24>
 800ca40:	08010898 	.word	0x08010898
 800ca44:	08010a91 	.word	0x08010a91
 800ca48:	08010819 	.word	0x08010819

0800ca4c <rshift>:
 800ca4c:	6903      	ldr	r3, [r0, #16]
 800ca4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca56:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca5a:	f100 0414 	add.w	r4, r0, #20
 800ca5e:	dd45      	ble.n	800caec <rshift+0xa0>
 800ca60:	f011 011f 	ands.w	r1, r1, #31
 800ca64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca6c:	d10c      	bne.n	800ca88 <rshift+0x3c>
 800ca6e:	f100 0710 	add.w	r7, r0, #16
 800ca72:	4629      	mov	r1, r5
 800ca74:	42b1      	cmp	r1, r6
 800ca76:	d334      	bcc.n	800cae2 <rshift+0x96>
 800ca78:	1a9b      	subs	r3, r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	1eea      	subs	r2, r5, #3
 800ca7e:	4296      	cmp	r6, r2
 800ca80:	bf38      	it	cc
 800ca82:	2300      	movcc	r3, #0
 800ca84:	4423      	add	r3, r4
 800ca86:	e015      	b.n	800cab4 <rshift+0x68>
 800ca88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca8c:	f1c1 0820 	rsb	r8, r1, #32
 800ca90:	40cf      	lsrs	r7, r1
 800ca92:	f105 0e04 	add.w	lr, r5, #4
 800ca96:	46a1      	mov	r9, r4
 800ca98:	4576      	cmp	r6, lr
 800ca9a:	46f4      	mov	ip, lr
 800ca9c:	d815      	bhi.n	800caca <rshift+0x7e>
 800ca9e:	1a9a      	subs	r2, r3, r2
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	3a04      	subs	r2, #4
 800caa4:	3501      	adds	r5, #1
 800caa6:	42ae      	cmp	r6, r5
 800caa8:	bf38      	it	cc
 800caaa:	2200      	movcc	r2, #0
 800caac:	18a3      	adds	r3, r4, r2
 800caae:	50a7      	str	r7, [r4, r2]
 800cab0:	b107      	cbz	r7, 800cab4 <rshift+0x68>
 800cab2:	3304      	adds	r3, #4
 800cab4:	1b1a      	subs	r2, r3, r4
 800cab6:	42a3      	cmp	r3, r4
 800cab8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cabc:	bf08      	it	eq
 800cabe:	2300      	moveq	r3, #0
 800cac0:	6102      	str	r2, [r0, #16]
 800cac2:	bf08      	it	eq
 800cac4:	6143      	streq	r3, [r0, #20]
 800cac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caca:	f8dc c000 	ldr.w	ip, [ip]
 800cace:	fa0c fc08 	lsl.w	ip, ip, r8
 800cad2:	ea4c 0707 	orr.w	r7, ip, r7
 800cad6:	f849 7b04 	str.w	r7, [r9], #4
 800cada:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cade:	40cf      	lsrs	r7, r1
 800cae0:	e7da      	b.n	800ca98 <rshift+0x4c>
 800cae2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cae6:	f847 cf04 	str.w	ip, [r7, #4]!
 800caea:	e7c3      	b.n	800ca74 <rshift+0x28>
 800caec:	4623      	mov	r3, r4
 800caee:	e7e1      	b.n	800cab4 <rshift+0x68>

0800caf0 <__hexdig_fun>:
 800caf0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d802      	bhi.n	800cafe <__hexdig_fun+0xe>
 800caf8:	3820      	subs	r0, #32
 800cafa:	b2c0      	uxtb	r0, r0
 800cafc:	4770      	bx	lr
 800cafe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d801      	bhi.n	800cb0a <__hexdig_fun+0x1a>
 800cb06:	3847      	subs	r0, #71	; 0x47
 800cb08:	e7f7      	b.n	800cafa <__hexdig_fun+0xa>
 800cb0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb0e:	2b05      	cmp	r3, #5
 800cb10:	d801      	bhi.n	800cb16 <__hexdig_fun+0x26>
 800cb12:	3827      	subs	r0, #39	; 0x27
 800cb14:	e7f1      	b.n	800cafa <__hexdig_fun+0xa>
 800cb16:	2000      	movs	r0, #0
 800cb18:	4770      	bx	lr
	...

0800cb1c <__gethex>:
 800cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb20:	ed2d 8b02 	vpush	{d8}
 800cb24:	b089      	sub	sp, #36	; 0x24
 800cb26:	ee08 0a10 	vmov	s16, r0
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	4bb4      	ldr	r3, [pc, #720]	; (800ce00 <__gethex+0x2e4>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	9301      	str	r3, [sp, #4]
 800cb32:	4618      	mov	r0, r3
 800cb34:	468b      	mov	fp, r1
 800cb36:	4690      	mov	r8, r2
 800cb38:	f7f3 fb4a 	bl	80001d0 <strlen>
 800cb3c:	9b01      	ldr	r3, [sp, #4]
 800cb3e:	f8db 2000 	ldr.w	r2, [fp]
 800cb42:	4403      	add	r3, r0
 800cb44:	4682      	mov	sl, r0
 800cb46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cb4a:	9305      	str	r3, [sp, #20]
 800cb4c:	1c93      	adds	r3, r2, #2
 800cb4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cb52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cb56:	32fe      	adds	r2, #254	; 0xfe
 800cb58:	18d1      	adds	r1, r2, r3
 800cb5a:	461f      	mov	r7, r3
 800cb5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb60:	9100      	str	r1, [sp, #0]
 800cb62:	2830      	cmp	r0, #48	; 0x30
 800cb64:	d0f8      	beq.n	800cb58 <__gethex+0x3c>
 800cb66:	f7ff ffc3 	bl	800caf0 <__hexdig_fun>
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d13a      	bne.n	800cbe6 <__gethex+0xca>
 800cb70:	9901      	ldr	r1, [sp, #4]
 800cb72:	4652      	mov	r2, sl
 800cb74:	4638      	mov	r0, r7
 800cb76:	f7fe fa08 	bl	800af8a <strncmp>
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d168      	bne.n	800cc52 <__gethex+0x136>
 800cb80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cb84:	eb07 060a 	add.w	r6, r7, sl
 800cb88:	f7ff ffb2 	bl	800caf0 <__hexdig_fun>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d062      	beq.n	800cc56 <__gethex+0x13a>
 800cb90:	4633      	mov	r3, r6
 800cb92:	7818      	ldrb	r0, [r3, #0]
 800cb94:	2830      	cmp	r0, #48	; 0x30
 800cb96:	461f      	mov	r7, r3
 800cb98:	f103 0301 	add.w	r3, r3, #1
 800cb9c:	d0f9      	beq.n	800cb92 <__gethex+0x76>
 800cb9e:	f7ff ffa7 	bl	800caf0 <__hexdig_fun>
 800cba2:	2301      	movs	r3, #1
 800cba4:	fab0 f480 	clz	r4, r0
 800cba8:	0964      	lsrs	r4, r4, #5
 800cbaa:	4635      	mov	r5, r6
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	463a      	mov	r2, r7
 800cbb0:	4616      	mov	r6, r2
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	7830      	ldrb	r0, [r6, #0]
 800cbb6:	f7ff ff9b 	bl	800caf0 <__hexdig_fun>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	d1f8      	bne.n	800cbb0 <__gethex+0x94>
 800cbbe:	9901      	ldr	r1, [sp, #4]
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f7fe f9e1 	bl	800af8a <strncmp>
 800cbc8:	b980      	cbnz	r0, 800cbec <__gethex+0xd0>
 800cbca:	b94d      	cbnz	r5, 800cbe0 <__gethex+0xc4>
 800cbcc:	eb06 050a 	add.w	r5, r6, sl
 800cbd0:	462a      	mov	r2, r5
 800cbd2:	4616      	mov	r6, r2
 800cbd4:	3201      	adds	r2, #1
 800cbd6:	7830      	ldrb	r0, [r6, #0]
 800cbd8:	f7ff ff8a 	bl	800caf0 <__hexdig_fun>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d1f8      	bne.n	800cbd2 <__gethex+0xb6>
 800cbe0:	1bad      	subs	r5, r5, r6
 800cbe2:	00ad      	lsls	r5, r5, #2
 800cbe4:	e004      	b.n	800cbf0 <__gethex+0xd4>
 800cbe6:	2400      	movs	r4, #0
 800cbe8:	4625      	mov	r5, r4
 800cbea:	e7e0      	b.n	800cbae <__gethex+0x92>
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	d1f7      	bne.n	800cbe0 <__gethex+0xc4>
 800cbf0:	7833      	ldrb	r3, [r6, #0]
 800cbf2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbf6:	2b50      	cmp	r3, #80	; 0x50
 800cbf8:	d13b      	bne.n	800cc72 <__gethex+0x156>
 800cbfa:	7873      	ldrb	r3, [r6, #1]
 800cbfc:	2b2b      	cmp	r3, #43	; 0x2b
 800cbfe:	d02c      	beq.n	800cc5a <__gethex+0x13e>
 800cc00:	2b2d      	cmp	r3, #45	; 0x2d
 800cc02:	d02e      	beq.n	800cc62 <__gethex+0x146>
 800cc04:	1c71      	adds	r1, r6, #1
 800cc06:	f04f 0900 	mov.w	r9, #0
 800cc0a:	7808      	ldrb	r0, [r1, #0]
 800cc0c:	f7ff ff70 	bl	800caf0 <__hexdig_fun>
 800cc10:	1e43      	subs	r3, r0, #1
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	2b18      	cmp	r3, #24
 800cc16:	d82c      	bhi.n	800cc72 <__gethex+0x156>
 800cc18:	f1a0 0210 	sub.w	r2, r0, #16
 800cc1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc20:	f7ff ff66 	bl	800caf0 <__hexdig_fun>
 800cc24:	1e43      	subs	r3, r0, #1
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b18      	cmp	r3, #24
 800cc2a:	d91d      	bls.n	800cc68 <__gethex+0x14c>
 800cc2c:	f1b9 0f00 	cmp.w	r9, #0
 800cc30:	d000      	beq.n	800cc34 <__gethex+0x118>
 800cc32:	4252      	negs	r2, r2
 800cc34:	4415      	add	r5, r2
 800cc36:	f8cb 1000 	str.w	r1, [fp]
 800cc3a:	b1e4      	cbz	r4, 800cc76 <__gethex+0x15a>
 800cc3c:	9b00      	ldr	r3, [sp, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bf14      	ite	ne
 800cc42:	2700      	movne	r7, #0
 800cc44:	2706      	moveq	r7, #6
 800cc46:	4638      	mov	r0, r7
 800cc48:	b009      	add	sp, #36	; 0x24
 800cc4a:	ecbd 8b02 	vpop	{d8}
 800cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc52:	463e      	mov	r6, r7
 800cc54:	4625      	mov	r5, r4
 800cc56:	2401      	movs	r4, #1
 800cc58:	e7ca      	b.n	800cbf0 <__gethex+0xd4>
 800cc5a:	f04f 0900 	mov.w	r9, #0
 800cc5e:	1cb1      	adds	r1, r6, #2
 800cc60:	e7d3      	b.n	800cc0a <__gethex+0xee>
 800cc62:	f04f 0901 	mov.w	r9, #1
 800cc66:	e7fa      	b.n	800cc5e <__gethex+0x142>
 800cc68:	230a      	movs	r3, #10
 800cc6a:	fb03 0202 	mla	r2, r3, r2, r0
 800cc6e:	3a10      	subs	r2, #16
 800cc70:	e7d4      	b.n	800cc1c <__gethex+0x100>
 800cc72:	4631      	mov	r1, r6
 800cc74:	e7df      	b.n	800cc36 <__gethex+0x11a>
 800cc76:	1bf3      	subs	r3, r6, r7
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	4621      	mov	r1, r4
 800cc7c:	2b07      	cmp	r3, #7
 800cc7e:	dc0b      	bgt.n	800cc98 <__gethex+0x17c>
 800cc80:	ee18 0a10 	vmov	r0, s16
 800cc84:	f000 fa90 	bl	800d1a8 <_Balloc>
 800cc88:	4604      	mov	r4, r0
 800cc8a:	b940      	cbnz	r0, 800cc9e <__gethex+0x182>
 800cc8c:	4b5d      	ldr	r3, [pc, #372]	; (800ce04 <__gethex+0x2e8>)
 800cc8e:	4602      	mov	r2, r0
 800cc90:	21de      	movs	r1, #222	; 0xde
 800cc92:	485d      	ldr	r0, [pc, #372]	; (800ce08 <__gethex+0x2ec>)
 800cc94:	f001 fde0 	bl	800e858 <__assert_func>
 800cc98:	3101      	adds	r1, #1
 800cc9a:	105b      	asrs	r3, r3, #1
 800cc9c:	e7ee      	b.n	800cc7c <__gethex+0x160>
 800cc9e:	f100 0914 	add.w	r9, r0, #20
 800cca2:	f04f 0b00 	mov.w	fp, #0
 800cca6:	f1ca 0301 	rsb	r3, sl, #1
 800ccaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800ccae:	f8cd b000 	str.w	fp, [sp]
 800ccb2:	9306      	str	r3, [sp, #24]
 800ccb4:	42b7      	cmp	r7, r6
 800ccb6:	d340      	bcc.n	800cd3a <__gethex+0x21e>
 800ccb8:	9802      	ldr	r0, [sp, #8]
 800ccba:	9b00      	ldr	r3, [sp, #0]
 800ccbc:	f840 3b04 	str.w	r3, [r0], #4
 800ccc0:	eba0 0009 	sub.w	r0, r0, r9
 800ccc4:	1080      	asrs	r0, r0, #2
 800ccc6:	0146      	lsls	r6, r0, #5
 800ccc8:	6120      	str	r0, [r4, #16]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 fb5e 	bl	800d38c <__hi0bits>
 800ccd0:	1a30      	subs	r0, r6, r0
 800ccd2:	f8d8 6000 	ldr.w	r6, [r8]
 800ccd6:	42b0      	cmp	r0, r6
 800ccd8:	dd63      	ble.n	800cda2 <__gethex+0x286>
 800ccda:	1b87      	subs	r7, r0, r6
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 ff02 	bl	800dae8 <__any_on>
 800cce4:	4682      	mov	sl, r0
 800cce6:	b1a8      	cbz	r0, 800cd14 <__gethex+0x1f8>
 800cce8:	1e7b      	subs	r3, r7, #1
 800ccea:	1159      	asrs	r1, r3, #5
 800ccec:	f003 021f 	and.w	r2, r3, #31
 800ccf0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ccf4:	f04f 0a01 	mov.w	sl, #1
 800ccf8:	fa0a f202 	lsl.w	r2, sl, r2
 800ccfc:	420a      	tst	r2, r1
 800ccfe:	d009      	beq.n	800cd14 <__gethex+0x1f8>
 800cd00:	4553      	cmp	r3, sl
 800cd02:	dd05      	ble.n	800cd10 <__gethex+0x1f4>
 800cd04:	1eb9      	subs	r1, r7, #2
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 feee 	bl	800dae8 <__any_on>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d145      	bne.n	800cd9c <__gethex+0x280>
 800cd10:	f04f 0a02 	mov.w	sl, #2
 800cd14:	4639      	mov	r1, r7
 800cd16:	4620      	mov	r0, r4
 800cd18:	f7ff fe98 	bl	800ca4c <rshift>
 800cd1c:	443d      	add	r5, r7
 800cd1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd22:	42ab      	cmp	r3, r5
 800cd24:	da4c      	bge.n	800cdc0 <__gethex+0x2a4>
 800cd26:	ee18 0a10 	vmov	r0, s16
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	f000 fa7c 	bl	800d228 <_Bfree>
 800cd30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd32:	2300      	movs	r3, #0
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	27a3      	movs	r7, #163	; 0xa3
 800cd38:	e785      	b.n	800cc46 <__gethex+0x12a>
 800cd3a:	1e73      	subs	r3, r6, #1
 800cd3c:	9a05      	ldr	r2, [sp, #20]
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d019      	beq.n	800cd7c <__gethex+0x260>
 800cd48:	f1bb 0f20 	cmp.w	fp, #32
 800cd4c:	d107      	bne.n	800cd5e <__gethex+0x242>
 800cd4e:	9b02      	ldr	r3, [sp, #8]
 800cd50:	9a00      	ldr	r2, [sp, #0]
 800cd52:	f843 2b04 	str.w	r2, [r3], #4
 800cd56:	9302      	str	r3, [sp, #8]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	469b      	mov	fp, r3
 800cd5e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cd62:	f7ff fec5 	bl	800caf0 <__hexdig_fun>
 800cd66:	9b00      	ldr	r3, [sp, #0]
 800cd68:	f000 000f 	and.w	r0, r0, #15
 800cd6c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cd70:	4303      	orrs	r3, r0
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	f10b 0b04 	add.w	fp, fp, #4
 800cd78:	9b03      	ldr	r3, [sp, #12]
 800cd7a:	e00d      	b.n	800cd98 <__gethex+0x27c>
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	9a06      	ldr	r2, [sp, #24]
 800cd80:	4413      	add	r3, r2
 800cd82:	42bb      	cmp	r3, r7
 800cd84:	d3e0      	bcc.n	800cd48 <__gethex+0x22c>
 800cd86:	4618      	mov	r0, r3
 800cd88:	9901      	ldr	r1, [sp, #4]
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	4652      	mov	r2, sl
 800cd8e:	f7fe f8fc 	bl	800af8a <strncmp>
 800cd92:	9b07      	ldr	r3, [sp, #28]
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1d7      	bne.n	800cd48 <__gethex+0x22c>
 800cd98:	461e      	mov	r6, r3
 800cd9a:	e78b      	b.n	800ccb4 <__gethex+0x198>
 800cd9c:	f04f 0a03 	mov.w	sl, #3
 800cda0:	e7b8      	b.n	800cd14 <__gethex+0x1f8>
 800cda2:	da0a      	bge.n	800cdba <__gethex+0x29e>
 800cda4:	1a37      	subs	r7, r6, r0
 800cda6:	4621      	mov	r1, r4
 800cda8:	ee18 0a10 	vmov	r0, s16
 800cdac:	463a      	mov	r2, r7
 800cdae:	f000 fc57 	bl	800d660 <__lshift>
 800cdb2:	1bed      	subs	r5, r5, r7
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	f100 0914 	add.w	r9, r0, #20
 800cdba:	f04f 0a00 	mov.w	sl, #0
 800cdbe:	e7ae      	b.n	800cd1e <__gethex+0x202>
 800cdc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cdc4:	42a8      	cmp	r0, r5
 800cdc6:	dd72      	ble.n	800ceae <__gethex+0x392>
 800cdc8:	1b45      	subs	r5, r0, r5
 800cdca:	42ae      	cmp	r6, r5
 800cdcc:	dc36      	bgt.n	800ce3c <__gethex+0x320>
 800cdce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d02a      	beq.n	800ce2c <__gethex+0x310>
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d02c      	beq.n	800ce34 <__gethex+0x318>
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d11c      	bne.n	800ce18 <__gethex+0x2fc>
 800cdde:	42ae      	cmp	r6, r5
 800cde0:	d11a      	bne.n	800ce18 <__gethex+0x2fc>
 800cde2:	2e01      	cmp	r6, #1
 800cde4:	d112      	bne.n	800ce0c <__gethex+0x2f0>
 800cde6:	9a04      	ldr	r2, [sp, #16]
 800cde8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cdec:	6013      	str	r3, [r2, #0]
 800cdee:	2301      	movs	r3, #1
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	f8c9 3000 	str.w	r3, [r9]
 800cdf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdf8:	2762      	movs	r7, #98	; 0x62
 800cdfa:	601c      	str	r4, [r3, #0]
 800cdfc:	e723      	b.n	800cc46 <__gethex+0x12a>
 800cdfe:	bf00      	nop
 800ce00:	08010910 	.word	0x08010910
 800ce04:	08010898 	.word	0x08010898
 800ce08:	080108a9 	.word	0x080108a9
 800ce0c:	1e71      	subs	r1, r6, #1
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 fe6a 	bl	800dae8 <__any_on>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1e6      	bne.n	800cde6 <__gethex+0x2ca>
 800ce18:	ee18 0a10 	vmov	r0, s16
 800ce1c:	4621      	mov	r1, r4
 800ce1e:	f000 fa03 	bl	800d228 <_Bfree>
 800ce22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce24:	2300      	movs	r3, #0
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	2750      	movs	r7, #80	; 0x50
 800ce2a:	e70c      	b.n	800cc46 <__gethex+0x12a>
 800ce2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1f2      	bne.n	800ce18 <__gethex+0x2fc>
 800ce32:	e7d8      	b.n	800cde6 <__gethex+0x2ca>
 800ce34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1d5      	bne.n	800cde6 <__gethex+0x2ca>
 800ce3a:	e7ed      	b.n	800ce18 <__gethex+0x2fc>
 800ce3c:	1e6f      	subs	r7, r5, #1
 800ce3e:	f1ba 0f00 	cmp.w	sl, #0
 800ce42:	d131      	bne.n	800cea8 <__gethex+0x38c>
 800ce44:	b127      	cbz	r7, 800ce50 <__gethex+0x334>
 800ce46:	4639      	mov	r1, r7
 800ce48:	4620      	mov	r0, r4
 800ce4a:	f000 fe4d 	bl	800dae8 <__any_on>
 800ce4e:	4682      	mov	sl, r0
 800ce50:	117b      	asrs	r3, r7, #5
 800ce52:	2101      	movs	r1, #1
 800ce54:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ce58:	f007 071f 	and.w	r7, r7, #31
 800ce5c:	fa01 f707 	lsl.w	r7, r1, r7
 800ce60:	421f      	tst	r7, r3
 800ce62:	4629      	mov	r1, r5
 800ce64:	4620      	mov	r0, r4
 800ce66:	bf18      	it	ne
 800ce68:	f04a 0a02 	orrne.w	sl, sl, #2
 800ce6c:	1b76      	subs	r6, r6, r5
 800ce6e:	f7ff fded 	bl	800ca4c <rshift>
 800ce72:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce76:	2702      	movs	r7, #2
 800ce78:	f1ba 0f00 	cmp.w	sl, #0
 800ce7c:	d048      	beq.n	800cf10 <__gethex+0x3f4>
 800ce7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d015      	beq.n	800ceb2 <__gethex+0x396>
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d017      	beq.n	800ceba <__gethex+0x39e>
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d109      	bne.n	800cea2 <__gethex+0x386>
 800ce8e:	f01a 0f02 	tst.w	sl, #2
 800ce92:	d006      	beq.n	800cea2 <__gethex+0x386>
 800ce94:	f8d9 0000 	ldr.w	r0, [r9]
 800ce98:	ea4a 0a00 	orr.w	sl, sl, r0
 800ce9c:	f01a 0f01 	tst.w	sl, #1
 800cea0:	d10e      	bne.n	800cec0 <__gethex+0x3a4>
 800cea2:	f047 0710 	orr.w	r7, r7, #16
 800cea6:	e033      	b.n	800cf10 <__gethex+0x3f4>
 800cea8:	f04f 0a01 	mov.w	sl, #1
 800ceac:	e7d0      	b.n	800ce50 <__gethex+0x334>
 800ceae:	2701      	movs	r7, #1
 800ceb0:	e7e2      	b.n	800ce78 <__gethex+0x35c>
 800ceb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ceb4:	f1c3 0301 	rsb	r3, r3, #1
 800ceb8:	9315      	str	r3, [sp, #84]	; 0x54
 800ceba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0f0      	beq.n	800cea2 <__gethex+0x386>
 800cec0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cec4:	f104 0314 	add.w	r3, r4, #20
 800cec8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cecc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ced0:	f04f 0c00 	mov.w	ip, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceda:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cede:	d01c      	beq.n	800cf1a <__gethex+0x3fe>
 800cee0:	3201      	adds	r2, #1
 800cee2:	6002      	str	r2, [r0, #0]
 800cee4:	2f02      	cmp	r7, #2
 800cee6:	f104 0314 	add.w	r3, r4, #20
 800ceea:	d13f      	bne.n	800cf6c <__gethex+0x450>
 800ceec:	f8d8 2000 	ldr.w	r2, [r8]
 800cef0:	3a01      	subs	r2, #1
 800cef2:	42b2      	cmp	r2, r6
 800cef4:	d10a      	bne.n	800cf0c <__gethex+0x3f0>
 800cef6:	1171      	asrs	r1, r6, #5
 800cef8:	2201      	movs	r2, #1
 800cefa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cefe:	f006 061f 	and.w	r6, r6, #31
 800cf02:	fa02 f606 	lsl.w	r6, r2, r6
 800cf06:	421e      	tst	r6, r3
 800cf08:	bf18      	it	ne
 800cf0a:	4617      	movne	r7, r2
 800cf0c:	f047 0720 	orr.w	r7, r7, #32
 800cf10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf12:	601c      	str	r4, [r3, #0]
 800cf14:	9b04      	ldr	r3, [sp, #16]
 800cf16:	601d      	str	r5, [r3, #0]
 800cf18:	e695      	b.n	800cc46 <__gethex+0x12a>
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf20:	d8d8      	bhi.n	800ced4 <__gethex+0x3b8>
 800cf22:	68a3      	ldr	r3, [r4, #8]
 800cf24:	459b      	cmp	fp, r3
 800cf26:	db19      	blt.n	800cf5c <__gethex+0x440>
 800cf28:	6861      	ldr	r1, [r4, #4]
 800cf2a:	ee18 0a10 	vmov	r0, s16
 800cf2e:	3101      	adds	r1, #1
 800cf30:	f000 f93a 	bl	800d1a8 <_Balloc>
 800cf34:	4681      	mov	r9, r0
 800cf36:	b918      	cbnz	r0, 800cf40 <__gethex+0x424>
 800cf38:	4b1a      	ldr	r3, [pc, #104]	; (800cfa4 <__gethex+0x488>)
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	2184      	movs	r1, #132	; 0x84
 800cf3e:	e6a8      	b.n	800cc92 <__gethex+0x176>
 800cf40:	6922      	ldr	r2, [r4, #16]
 800cf42:	3202      	adds	r2, #2
 800cf44:	f104 010c 	add.w	r1, r4, #12
 800cf48:	0092      	lsls	r2, r2, #2
 800cf4a:	300c      	adds	r0, #12
 800cf4c:	f000 f91e 	bl	800d18c <memcpy>
 800cf50:	4621      	mov	r1, r4
 800cf52:	ee18 0a10 	vmov	r0, s16
 800cf56:	f000 f967 	bl	800d228 <_Bfree>
 800cf5a:	464c      	mov	r4, r9
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf64:	6122      	str	r2, [r4, #16]
 800cf66:	2201      	movs	r2, #1
 800cf68:	615a      	str	r2, [r3, #20]
 800cf6a:	e7bb      	b.n	800cee4 <__gethex+0x3c8>
 800cf6c:	6922      	ldr	r2, [r4, #16]
 800cf6e:	455a      	cmp	r2, fp
 800cf70:	dd0b      	ble.n	800cf8a <__gethex+0x46e>
 800cf72:	2101      	movs	r1, #1
 800cf74:	4620      	mov	r0, r4
 800cf76:	f7ff fd69 	bl	800ca4c <rshift>
 800cf7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf7e:	3501      	adds	r5, #1
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	f6ff aed0 	blt.w	800cd26 <__gethex+0x20a>
 800cf86:	2701      	movs	r7, #1
 800cf88:	e7c0      	b.n	800cf0c <__gethex+0x3f0>
 800cf8a:	f016 061f 	ands.w	r6, r6, #31
 800cf8e:	d0fa      	beq.n	800cf86 <__gethex+0x46a>
 800cf90:	4453      	add	r3, sl
 800cf92:	f1c6 0620 	rsb	r6, r6, #32
 800cf96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cf9a:	f000 f9f7 	bl	800d38c <__hi0bits>
 800cf9e:	42b0      	cmp	r0, r6
 800cfa0:	dbe7      	blt.n	800cf72 <__gethex+0x456>
 800cfa2:	e7f0      	b.n	800cf86 <__gethex+0x46a>
 800cfa4:	08010898 	.word	0x08010898

0800cfa8 <L_shift>:
 800cfa8:	f1c2 0208 	rsb	r2, r2, #8
 800cfac:	0092      	lsls	r2, r2, #2
 800cfae:	b570      	push	{r4, r5, r6, lr}
 800cfb0:	f1c2 0620 	rsb	r6, r2, #32
 800cfb4:	6843      	ldr	r3, [r0, #4]
 800cfb6:	6804      	ldr	r4, [r0, #0]
 800cfb8:	fa03 f506 	lsl.w	r5, r3, r6
 800cfbc:	432c      	orrs	r4, r5
 800cfbe:	40d3      	lsrs	r3, r2
 800cfc0:	6004      	str	r4, [r0, #0]
 800cfc2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfc6:	4288      	cmp	r0, r1
 800cfc8:	d3f4      	bcc.n	800cfb4 <L_shift+0xc>
 800cfca:	bd70      	pop	{r4, r5, r6, pc}

0800cfcc <__match>:
 800cfcc:	b530      	push	{r4, r5, lr}
 800cfce:	6803      	ldr	r3, [r0, #0]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfd6:	b914      	cbnz	r4, 800cfde <__match+0x12>
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	2001      	movs	r0, #1
 800cfdc:	bd30      	pop	{r4, r5, pc}
 800cfde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfe2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cfe6:	2d19      	cmp	r5, #25
 800cfe8:	bf98      	it	ls
 800cfea:	3220      	addls	r2, #32
 800cfec:	42a2      	cmp	r2, r4
 800cfee:	d0f0      	beq.n	800cfd2 <__match+0x6>
 800cff0:	2000      	movs	r0, #0
 800cff2:	e7f3      	b.n	800cfdc <__match+0x10>

0800cff4 <__hexnan>:
 800cff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff8:	680b      	ldr	r3, [r1, #0]
 800cffa:	115e      	asrs	r6, r3, #5
 800cffc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d000:	f013 031f 	ands.w	r3, r3, #31
 800d004:	b087      	sub	sp, #28
 800d006:	bf18      	it	ne
 800d008:	3604      	addne	r6, #4
 800d00a:	2500      	movs	r5, #0
 800d00c:	1f37      	subs	r7, r6, #4
 800d00e:	4690      	mov	r8, r2
 800d010:	6802      	ldr	r2, [r0, #0]
 800d012:	9301      	str	r3, [sp, #4]
 800d014:	4682      	mov	sl, r0
 800d016:	f846 5c04 	str.w	r5, [r6, #-4]
 800d01a:	46b9      	mov	r9, r7
 800d01c:	463c      	mov	r4, r7
 800d01e:	9502      	str	r5, [sp, #8]
 800d020:	46ab      	mov	fp, r5
 800d022:	7851      	ldrb	r1, [r2, #1]
 800d024:	1c53      	adds	r3, r2, #1
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	b341      	cbz	r1, 800d07c <__hexnan+0x88>
 800d02a:	4608      	mov	r0, r1
 800d02c:	9205      	str	r2, [sp, #20]
 800d02e:	9104      	str	r1, [sp, #16]
 800d030:	f7ff fd5e 	bl	800caf0 <__hexdig_fun>
 800d034:	2800      	cmp	r0, #0
 800d036:	d14f      	bne.n	800d0d8 <__hexnan+0xe4>
 800d038:	9904      	ldr	r1, [sp, #16]
 800d03a:	9a05      	ldr	r2, [sp, #20]
 800d03c:	2920      	cmp	r1, #32
 800d03e:	d818      	bhi.n	800d072 <__hexnan+0x7e>
 800d040:	9b02      	ldr	r3, [sp, #8]
 800d042:	459b      	cmp	fp, r3
 800d044:	dd13      	ble.n	800d06e <__hexnan+0x7a>
 800d046:	454c      	cmp	r4, r9
 800d048:	d206      	bcs.n	800d058 <__hexnan+0x64>
 800d04a:	2d07      	cmp	r5, #7
 800d04c:	dc04      	bgt.n	800d058 <__hexnan+0x64>
 800d04e:	462a      	mov	r2, r5
 800d050:	4649      	mov	r1, r9
 800d052:	4620      	mov	r0, r4
 800d054:	f7ff ffa8 	bl	800cfa8 <L_shift>
 800d058:	4544      	cmp	r4, r8
 800d05a:	d950      	bls.n	800d0fe <__hexnan+0x10a>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f1a4 0904 	sub.w	r9, r4, #4
 800d062:	f844 3c04 	str.w	r3, [r4, #-4]
 800d066:	f8cd b008 	str.w	fp, [sp, #8]
 800d06a:	464c      	mov	r4, r9
 800d06c:	461d      	mov	r5, r3
 800d06e:	9a03      	ldr	r2, [sp, #12]
 800d070:	e7d7      	b.n	800d022 <__hexnan+0x2e>
 800d072:	2929      	cmp	r1, #41	; 0x29
 800d074:	d156      	bne.n	800d124 <__hexnan+0x130>
 800d076:	3202      	adds	r2, #2
 800d078:	f8ca 2000 	str.w	r2, [sl]
 800d07c:	f1bb 0f00 	cmp.w	fp, #0
 800d080:	d050      	beq.n	800d124 <__hexnan+0x130>
 800d082:	454c      	cmp	r4, r9
 800d084:	d206      	bcs.n	800d094 <__hexnan+0xa0>
 800d086:	2d07      	cmp	r5, #7
 800d088:	dc04      	bgt.n	800d094 <__hexnan+0xa0>
 800d08a:	462a      	mov	r2, r5
 800d08c:	4649      	mov	r1, r9
 800d08e:	4620      	mov	r0, r4
 800d090:	f7ff ff8a 	bl	800cfa8 <L_shift>
 800d094:	4544      	cmp	r4, r8
 800d096:	d934      	bls.n	800d102 <__hexnan+0x10e>
 800d098:	f1a8 0204 	sub.w	r2, r8, #4
 800d09c:	4623      	mov	r3, r4
 800d09e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d0a6:	429f      	cmp	r7, r3
 800d0a8:	d2f9      	bcs.n	800d09e <__hexnan+0xaa>
 800d0aa:	1b3b      	subs	r3, r7, r4
 800d0ac:	f023 0303 	bic.w	r3, r3, #3
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	3401      	adds	r4, #1
 800d0b4:	3e03      	subs	r6, #3
 800d0b6:	42b4      	cmp	r4, r6
 800d0b8:	bf88      	it	hi
 800d0ba:	2304      	movhi	r3, #4
 800d0bc:	4443      	add	r3, r8
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f843 2b04 	str.w	r2, [r3], #4
 800d0c4:	429f      	cmp	r7, r3
 800d0c6:	d2fb      	bcs.n	800d0c0 <__hexnan+0xcc>
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	b91b      	cbnz	r3, 800d0d4 <__hexnan+0xe0>
 800d0cc:	4547      	cmp	r7, r8
 800d0ce:	d127      	bne.n	800d120 <__hexnan+0x12c>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	2005      	movs	r0, #5
 800d0d6:	e026      	b.n	800d126 <__hexnan+0x132>
 800d0d8:	3501      	adds	r5, #1
 800d0da:	2d08      	cmp	r5, #8
 800d0dc:	f10b 0b01 	add.w	fp, fp, #1
 800d0e0:	dd06      	ble.n	800d0f0 <__hexnan+0xfc>
 800d0e2:	4544      	cmp	r4, r8
 800d0e4:	d9c3      	bls.n	800d06e <__hexnan+0x7a>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ec:	2501      	movs	r5, #1
 800d0ee:	3c04      	subs	r4, #4
 800d0f0:	6822      	ldr	r2, [r4, #0]
 800d0f2:	f000 000f 	and.w	r0, r0, #15
 800d0f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d0fa:	6022      	str	r2, [r4, #0]
 800d0fc:	e7b7      	b.n	800d06e <__hexnan+0x7a>
 800d0fe:	2508      	movs	r5, #8
 800d100:	e7b5      	b.n	800d06e <__hexnan+0x7a>
 800d102:	9b01      	ldr	r3, [sp, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d0df      	beq.n	800d0c8 <__hexnan+0xd4>
 800d108:	f04f 32ff 	mov.w	r2, #4294967295
 800d10c:	f1c3 0320 	rsb	r3, r3, #32
 800d110:	fa22 f303 	lsr.w	r3, r2, r3
 800d114:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d118:	401a      	ands	r2, r3
 800d11a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d11e:	e7d3      	b.n	800d0c8 <__hexnan+0xd4>
 800d120:	3f04      	subs	r7, #4
 800d122:	e7d1      	b.n	800d0c8 <__hexnan+0xd4>
 800d124:	2004      	movs	r0, #4
 800d126:	b007      	add	sp, #28
 800d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d12c <_localeconv_r>:
 800d12c:	4800      	ldr	r0, [pc, #0]	; (800d130 <_localeconv_r+0x4>)
 800d12e:	4770      	bx	lr
 800d130:	200001d8 	.word	0x200001d8

0800d134 <_lseek_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d07      	ldr	r5, [pc, #28]	; (800d154 <_lseek_r+0x20>)
 800d138:	4604      	mov	r4, r0
 800d13a:	4608      	mov	r0, r1
 800d13c:	4611      	mov	r1, r2
 800d13e:	2200      	movs	r2, #0
 800d140:	602a      	str	r2, [r5, #0]
 800d142:	461a      	mov	r2, r3
 800d144:	f7f6 fa44 	bl	80035d0 <_lseek>
 800d148:	1c43      	adds	r3, r0, #1
 800d14a:	d102      	bne.n	800d152 <_lseek_r+0x1e>
 800d14c:	682b      	ldr	r3, [r5, #0]
 800d14e:	b103      	cbz	r3, 800d152 <_lseek_r+0x1e>
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	bd38      	pop	{r3, r4, r5, pc}
 800d154:	200009e0 	.word	0x200009e0

0800d158 <malloc>:
 800d158:	4b02      	ldr	r3, [pc, #8]	; (800d164 <malloc+0xc>)
 800d15a:	4601      	mov	r1, r0
 800d15c:	6818      	ldr	r0, [r3, #0]
 800d15e:	f000 bd67 	b.w	800dc30 <_malloc_r>
 800d162:	bf00      	nop
 800d164:	20000080 	.word	0x20000080

0800d168 <__ascii_mbtowc>:
 800d168:	b082      	sub	sp, #8
 800d16a:	b901      	cbnz	r1, 800d16e <__ascii_mbtowc+0x6>
 800d16c:	a901      	add	r1, sp, #4
 800d16e:	b142      	cbz	r2, 800d182 <__ascii_mbtowc+0x1a>
 800d170:	b14b      	cbz	r3, 800d186 <__ascii_mbtowc+0x1e>
 800d172:	7813      	ldrb	r3, [r2, #0]
 800d174:	600b      	str	r3, [r1, #0]
 800d176:	7812      	ldrb	r2, [r2, #0]
 800d178:	1e10      	subs	r0, r2, #0
 800d17a:	bf18      	it	ne
 800d17c:	2001      	movne	r0, #1
 800d17e:	b002      	add	sp, #8
 800d180:	4770      	bx	lr
 800d182:	4610      	mov	r0, r2
 800d184:	e7fb      	b.n	800d17e <__ascii_mbtowc+0x16>
 800d186:	f06f 0001 	mvn.w	r0, #1
 800d18a:	e7f8      	b.n	800d17e <__ascii_mbtowc+0x16>

0800d18c <memcpy>:
 800d18c:	440a      	add	r2, r1
 800d18e:	4291      	cmp	r1, r2
 800d190:	f100 33ff 	add.w	r3, r0, #4294967295
 800d194:	d100      	bne.n	800d198 <memcpy+0xc>
 800d196:	4770      	bx	lr
 800d198:	b510      	push	{r4, lr}
 800d19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1a2:	4291      	cmp	r1, r2
 800d1a4:	d1f9      	bne.n	800d19a <memcpy+0xe>
 800d1a6:	bd10      	pop	{r4, pc}

0800d1a8 <_Balloc>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	b976      	cbnz	r6, 800d1d0 <_Balloc+0x28>
 800d1b2:	2010      	movs	r0, #16
 800d1b4:	f7ff ffd0 	bl	800d158 <malloc>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	6260      	str	r0, [r4, #36]	; 0x24
 800d1bc:	b920      	cbnz	r0, 800d1c8 <_Balloc+0x20>
 800d1be:	4b18      	ldr	r3, [pc, #96]	; (800d220 <_Balloc+0x78>)
 800d1c0:	4818      	ldr	r0, [pc, #96]	; (800d224 <_Balloc+0x7c>)
 800d1c2:	2166      	movs	r1, #102	; 0x66
 800d1c4:	f001 fb48 	bl	800e858 <__assert_func>
 800d1c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1cc:	6006      	str	r6, [r0, #0]
 800d1ce:	60c6      	str	r6, [r0, #12]
 800d1d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1d2:	68f3      	ldr	r3, [r6, #12]
 800d1d4:	b183      	cbz	r3, 800d1f8 <_Balloc+0x50>
 800d1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1de:	b9b8      	cbnz	r0, 800d210 <_Balloc+0x68>
 800d1e0:	2101      	movs	r1, #1
 800d1e2:	fa01 f605 	lsl.w	r6, r1, r5
 800d1e6:	1d72      	adds	r2, r6, #5
 800d1e8:	0092      	lsls	r2, r2, #2
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fc9d 	bl	800db2a <_calloc_r>
 800d1f0:	b160      	cbz	r0, 800d20c <_Balloc+0x64>
 800d1f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1f6:	e00e      	b.n	800d216 <_Balloc+0x6e>
 800d1f8:	2221      	movs	r2, #33	; 0x21
 800d1fa:	2104      	movs	r1, #4
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fc94 	bl	800db2a <_calloc_r>
 800d202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d204:	60f0      	str	r0, [r6, #12]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d1e4      	bne.n	800d1d6 <_Balloc+0x2e>
 800d20c:	2000      	movs	r0, #0
 800d20e:	bd70      	pop	{r4, r5, r6, pc}
 800d210:	6802      	ldr	r2, [r0, #0]
 800d212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d216:	2300      	movs	r3, #0
 800d218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d21c:	e7f7      	b.n	800d20e <_Balloc+0x66>
 800d21e:	bf00      	nop
 800d220:	08010826 	.word	0x08010826
 800d224:	08010924 	.word	0x08010924

0800d228 <_Bfree>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d22c:	4605      	mov	r5, r0
 800d22e:	460c      	mov	r4, r1
 800d230:	b976      	cbnz	r6, 800d250 <_Bfree+0x28>
 800d232:	2010      	movs	r0, #16
 800d234:	f7ff ff90 	bl	800d158 <malloc>
 800d238:	4602      	mov	r2, r0
 800d23a:	6268      	str	r0, [r5, #36]	; 0x24
 800d23c:	b920      	cbnz	r0, 800d248 <_Bfree+0x20>
 800d23e:	4b09      	ldr	r3, [pc, #36]	; (800d264 <_Bfree+0x3c>)
 800d240:	4809      	ldr	r0, [pc, #36]	; (800d268 <_Bfree+0x40>)
 800d242:	218a      	movs	r1, #138	; 0x8a
 800d244:	f001 fb08 	bl	800e858 <__assert_func>
 800d248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d24c:	6006      	str	r6, [r0, #0]
 800d24e:	60c6      	str	r6, [r0, #12]
 800d250:	b13c      	cbz	r4, 800d262 <_Bfree+0x3a>
 800d252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d254:	6862      	ldr	r2, [r4, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d25c:	6021      	str	r1, [r4, #0]
 800d25e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	08010826 	.word	0x08010826
 800d268:	08010924 	.word	0x08010924

0800d26c <__multadd>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	690d      	ldr	r5, [r1, #16]
 800d272:	4607      	mov	r7, r0
 800d274:	460c      	mov	r4, r1
 800d276:	461e      	mov	r6, r3
 800d278:	f101 0c14 	add.w	ip, r1, #20
 800d27c:	2000      	movs	r0, #0
 800d27e:	f8dc 3000 	ldr.w	r3, [ip]
 800d282:	b299      	uxth	r1, r3
 800d284:	fb02 6101 	mla	r1, r2, r1, r6
 800d288:	0c1e      	lsrs	r6, r3, #16
 800d28a:	0c0b      	lsrs	r3, r1, #16
 800d28c:	fb02 3306 	mla	r3, r2, r6, r3
 800d290:	b289      	uxth	r1, r1
 800d292:	3001      	adds	r0, #1
 800d294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d298:	4285      	cmp	r5, r0
 800d29a:	f84c 1b04 	str.w	r1, [ip], #4
 800d29e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2a2:	dcec      	bgt.n	800d27e <__multadd+0x12>
 800d2a4:	b30e      	cbz	r6, 800d2ea <__multadd+0x7e>
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	42ab      	cmp	r3, r5
 800d2aa:	dc19      	bgt.n	800d2e0 <__multadd+0x74>
 800d2ac:	6861      	ldr	r1, [r4, #4]
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	3101      	adds	r1, #1
 800d2b2:	f7ff ff79 	bl	800d1a8 <_Balloc>
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	b928      	cbnz	r0, 800d2c6 <__multadd+0x5a>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <__multadd+0x84>)
 800d2be:	480d      	ldr	r0, [pc, #52]	; (800d2f4 <__multadd+0x88>)
 800d2c0:	21b5      	movs	r1, #181	; 0xb5
 800d2c2:	f001 fac9 	bl	800e858 <__assert_func>
 800d2c6:	6922      	ldr	r2, [r4, #16]
 800d2c8:	3202      	adds	r2, #2
 800d2ca:	f104 010c 	add.w	r1, r4, #12
 800d2ce:	0092      	lsls	r2, r2, #2
 800d2d0:	300c      	adds	r0, #12
 800d2d2:	f7ff ff5b 	bl	800d18c <memcpy>
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f7ff ffa5 	bl	800d228 <_Bfree>
 800d2de:	4644      	mov	r4, r8
 800d2e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2e4:	3501      	adds	r5, #1
 800d2e6:	615e      	str	r6, [r3, #20]
 800d2e8:	6125      	str	r5, [r4, #16]
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f0:	08010898 	.word	0x08010898
 800d2f4:	08010924 	.word	0x08010924

0800d2f8 <__s2b>:
 800d2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	4615      	mov	r5, r2
 800d300:	461f      	mov	r7, r3
 800d302:	2209      	movs	r2, #9
 800d304:	3308      	adds	r3, #8
 800d306:	4606      	mov	r6, r0
 800d308:	fb93 f3f2 	sdiv	r3, r3, r2
 800d30c:	2100      	movs	r1, #0
 800d30e:	2201      	movs	r2, #1
 800d310:	429a      	cmp	r2, r3
 800d312:	db09      	blt.n	800d328 <__s2b+0x30>
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff ff47 	bl	800d1a8 <_Balloc>
 800d31a:	b940      	cbnz	r0, 800d32e <__s2b+0x36>
 800d31c:	4602      	mov	r2, r0
 800d31e:	4b19      	ldr	r3, [pc, #100]	; (800d384 <__s2b+0x8c>)
 800d320:	4819      	ldr	r0, [pc, #100]	; (800d388 <__s2b+0x90>)
 800d322:	21ce      	movs	r1, #206	; 0xce
 800d324:	f001 fa98 	bl	800e858 <__assert_func>
 800d328:	0052      	lsls	r2, r2, #1
 800d32a:	3101      	adds	r1, #1
 800d32c:	e7f0      	b.n	800d310 <__s2b+0x18>
 800d32e:	9b08      	ldr	r3, [sp, #32]
 800d330:	6143      	str	r3, [r0, #20]
 800d332:	2d09      	cmp	r5, #9
 800d334:	f04f 0301 	mov.w	r3, #1
 800d338:	6103      	str	r3, [r0, #16]
 800d33a:	dd16      	ble.n	800d36a <__s2b+0x72>
 800d33c:	f104 0909 	add.w	r9, r4, #9
 800d340:	46c8      	mov	r8, r9
 800d342:	442c      	add	r4, r5
 800d344:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d348:	4601      	mov	r1, r0
 800d34a:	3b30      	subs	r3, #48	; 0x30
 800d34c:	220a      	movs	r2, #10
 800d34e:	4630      	mov	r0, r6
 800d350:	f7ff ff8c 	bl	800d26c <__multadd>
 800d354:	45a0      	cmp	r8, r4
 800d356:	d1f5      	bne.n	800d344 <__s2b+0x4c>
 800d358:	f1a5 0408 	sub.w	r4, r5, #8
 800d35c:	444c      	add	r4, r9
 800d35e:	1b2d      	subs	r5, r5, r4
 800d360:	1963      	adds	r3, r4, r5
 800d362:	42bb      	cmp	r3, r7
 800d364:	db04      	blt.n	800d370 <__s2b+0x78>
 800d366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d36a:	340a      	adds	r4, #10
 800d36c:	2509      	movs	r5, #9
 800d36e:	e7f6      	b.n	800d35e <__s2b+0x66>
 800d370:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d374:	4601      	mov	r1, r0
 800d376:	3b30      	subs	r3, #48	; 0x30
 800d378:	220a      	movs	r2, #10
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7ff ff76 	bl	800d26c <__multadd>
 800d380:	e7ee      	b.n	800d360 <__s2b+0x68>
 800d382:	bf00      	nop
 800d384:	08010898 	.word	0x08010898
 800d388:	08010924 	.word	0x08010924

0800d38c <__hi0bits>:
 800d38c:	0c03      	lsrs	r3, r0, #16
 800d38e:	041b      	lsls	r3, r3, #16
 800d390:	b9d3      	cbnz	r3, 800d3c8 <__hi0bits+0x3c>
 800d392:	0400      	lsls	r0, r0, #16
 800d394:	2310      	movs	r3, #16
 800d396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d39a:	bf04      	itt	eq
 800d39c:	0200      	lsleq	r0, r0, #8
 800d39e:	3308      	addeq	r3, #8
 800d3a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3a4:	bf04      	itt	eq
 800d3a6:	0100      	lsleq	r0, r0, #4
 800d3a8:	3304      	addeq	r3, #4
 800d3aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3ae:	bf04      	itt	eq
 800d3b0:	0080      	lsleq	r0, r0, #2
 800d3b2:	3302      	addeq	r3, #2
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	db05      	blt.n	800d3c4 <__hi0bits+0x38>
 800d3b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d3bc:	f103 0301 	add.w	r3, r3, #1
 800d3c0:	bf08      	it	eq
 800d3c2:	2320      	moveq	r3, #32
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	4770      	bx	lr
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	e7e4      	b.n	800d396 <__hi0bits+0xa>

0800d3cc <__lo0bits>:
 800d3cc:	6803      	ldr	r3, [r0, #0]
 800d3ce:	f013 0207 	ands.w	r2, r3, #7
 800d3d2:	4601      	mov	r1, r0
 800d3d4:	d00b      	beq.n	800d3ee <__lo0bits+0x22>
 800d3d6:	07da      	lsls	r2, r3, #31
 800d3d8:	d423      	bmi.n	800d422 <__lo0bits+0x56>
 800d3da:	0798      	lsls	r0, r3, #30
 800d3dc:	bf49      	itett	mi
 800d3de:	085b      	lsrmi	r3, r3, #1
 800d3e0:	089b      	lsrpl	r3, r3, #2
 800d3e2:	2001      	movmi	r0, #1
 800d3e4:	600b      	strmi	r3, [r1, #0]
 800d3e6:	bf5c      	itt	pl
 800d3e8:	600b      	strpl	r3, [r1, #0]
 800d3ea:	2002      	movpl	r0, #2
 800d3ec:	4770      	bx	lr
 800d3ee:	b298      	uxth	r0, r3
 800d3f0:	b9a8      	cbnz	r0, 800d41e <__lo0bits+0x52>
 800d3f2:	0c1b      	lsrs	r3, r3, #16
 800d3f4:	2010      	movs	r0, #16
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	b90a      	cbnz	r2, 800d3fe <__lo0bits+0x32>
 800d3fa:	3008      	adds	r0, #8
 800d3fc:	0a1b      	lsrs	r3, r3, #8
 800d3fe:	071a      	lsls	r2, r3, #28
 800d400:	bf04      	itt	eq
 800d402:	091b      	lsreq	r3, r3, #4
 800d404:	3004      	addeq	r0, #4
 800d406:	079a      	lsls	r2, r3, #30
 800d408:	bf04      	itt	eq
 800d40a:	089b      	lsreq	r3, r3, #2
 800d40c:	3002      	addeq	r0, #2
 800d40e:	07da      	lsls	r2, r3, #31
 800d410:	d403      	bmi.n	800d41a <__lo0bits+0x4e>
 800d412:	085b      	lsrs	r3, r3, #1
 800d414:	f100 0001 	add.w	r0, r0, #1
 800d418:	d005      	beq.n	800d426 <__lo0bits+0x5a>
 800d41a:	600b      	str	r3, [r1, #0]
 800d41c:	4770      	bx	lr
 800d41e:	4610      	mov	r0, r2
 800d420:	e7e9      	b.n	800d3f6 <__lo0bits+0x2a>
 800d422:	2000      	movs	r0, #0
 800d424:	4770      	bx	lr
 800d426:	2020      	movs	r0, #32
 800d428:	4770      	bx	lr
	...

0800d42c <__i2b>:
 800d42c:	b510      	push	{r4, lr}
 800d42e:	460c      	mov	r4, r1
 800d430:	2101      	movs	r1, #1
 800d432:	f7ff feb9 	bl	800d1a8 <_Balloc>
 800d436:	4602      	mov	r2, r0
 800d438:	b928      	cbnz	r0, 800d446 <__i2b+0x1a>
 800d43a:	4b05      	ldr	r3, [pc, #20]	; (800d450 <__i2b+0x24>)
 800d43c:	4805      	ldr	r0, [pc, #20]	; (800d454 <__i2b+0x28>)
 800d43e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d442:	f001 fa09 	bl	800e858 <__assert_func>
 800d446:	2301      	movs	r3, #1
 800d448:	6144      	str	r4, [r0, #20]
 800d44a:	6103      	str	r3, [r0, #16]
 800d44c:	bd10      	pop	{r4, pc}
 800d44e:	bf00      	nop
 800d450:	08010898 	.word	0x08010898
 800d454:	08010924 	.word	0x08010924

0800d458 <__multiply>:
 800d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	4691      	mov	r9, r2
 800d45e:	690a      	ldr	r2, [r1, #16]
 800d460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d464:	429a      	cmp	r2, r3
 800d466:	bfb8      	it	lt
 800d468:	460b      	movlt	r3, r1
 800d46a:	460c      	mov	r4, r1
 800d46c:	bfbc      	itt	lt
 800d46e:	464c      	movlt	r4, r9
 800d470:	4699      	movlt	r9, r3
 800d472:	6927      	ldr	r7, [r4, #16]
 800d474:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d478:	68a3      	ldr	r3, [r4, #8]
 800d47a:	6861      	ldr	r1, [r4, #4]
 800d47c:	eb07 060a 	add.w	r6, r7, sl
 800d480:	42b3      	cmp	r3, r6
 800d482:	b085      	sub	sp, #20
 800d484:	bfb8      	it	lt
 800d486:	3101      	addlt	r1, #1
 800d488:	f7ff fe8e 	bl	800d1a8 <_Balloc>
 800d48c:	b930      	cbnz	r0, 800d49c <__multiply+0x44>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b44      	ldr	r3, [pc, #272]	; (800d5a4 <__multiply+0x14c>)
 800d492:	4845      	ldr	r0, [pc, #276]	; (800d5a8 <__multiply+0x150>)
 800d494:	f240 115d 	movw	r1, #349	; 0x15d
 800d498:	f001 f9de 	bl	800e858 <__assert_func>
 800d49c:	f100 0514 	add.w	r5, r0, #20
 800d4a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4543      	cmp	r3, r8
 800d4aa:	d321      	bcc.n	800d4f0 <__multiply+0x98>
 800d4ac:	f104 0314 	add.w	r3, r4, #20
 800d4b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4b4:	f109 0314 	add.w	r3, r9, #20
 800d4b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4bc:	9202      	str	r2, [sp, #8]
 800d4be:	1b3a      	subs	r2, r7, r4
 800d4c0:	3a15      	subs	r2, #21
 800d4c2:	f022 0203 	bic.w	r2, r2, #3
 800d4c6:	3204      	adds	r2, #4
 800d4c8:	f104 0115 	add.w	r1, r4, #21
 800d4cc:	428f      	cmp	r7, r1
 800d4ce:	bf38      	it	cc
 800d4d0:	2204      	movcc	r2, #4
 800d4d2:	9201      	str	r2, [sp, #4]
 800d4d4:	9a02      	ldr	r2, [sp, #8]
 800d4d6:	9303      	str	r3, [sp, #12]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d80c      	bhi.n	800d4f6 <__multiply+0x9e>
 800d4dc:	2e00      	cmp	r6, #0
 800d4de:	dd03      	ble.n	800d4e8 <__multiply+0x90>
 800d4e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d05a      	beq.n	800d59e <__multiply+0x146>
 800d4e8:	6106      	str	r6, [r0, #16]
 800d4ea:	b005      	add	sp, #20
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	f843 2b04 	str.w	r2, [r3], #4
 800d4f4:	e7d8      	b.n	800d4a8 <__multiply+0x50>
 800d4f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d4fa:	f1ba 0f00 	cmp.w	sl, #0
 800d4fe:	d024      	beq.n	800d54a <__multiply+0xf2>
 800d500:	f104 0e14 	add.w	lr, r4, #20
 800d504:	46a9      	mov	r9, r5
 800d506:	f04f 0c00 	mov.w	ip, #0
 800d50a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d50e:	f8d9 1000 	ldr.w	r1, [r9]
 800d512:	fa1f fb82 	uxth.w	fp, r2
 800d516:	b289      	uxth	r1, r1
 800d518:	fb0a 110b 	mla	r1, sl, fp, r1
 800d51c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d520:	f8d9 2000 	ldr.w	r2, [r9]
 800d524:	4461      	add	r1, ip
 800d526:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d52a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d52e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d532:	b289      	uxth	r1, r1
 800d534:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d538:	4577      	cmp	r7, lr
 800d53a:	f849 1b04 	str.w	r1, [r9], #4
 800d53e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d542:	d8e2      	bhi.n	800d50a <__multiply+0xb2>
 800d544:	9a01      	ldr	r2, [sp, #4]
 800d546:	f845 c002 	str.w	ip, [r5, r2]
 800d54a:	9a03      	ldr	r2, [sp, #12]
 800d54c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d550:	3304      	adds	r3, #4
 800d552:	f1b9 0f00 	cmp.w	r9, #0
 800d556:	d020      	beq.n	800d59a <__multiply+0x142>
 800d558:	6829      	ldr	r1, [r5, #0]
 800d55a:	f104 0c14 	add.w	ip, r4, #20
 800d55e:	46ae      	mov	lr, r5
 800d560:	f04f 0a00 	mov.w	sl, #0
 800d564:	f8bc b000 	ldrh.w	fp, [ip]
 800d568:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d56c:	fb09 220b 	mla	r2, r9, fp, r2
 800d570:	4492      	add	sl, r2
 800d572:	b289      	uxth	r1, r1
 800d574:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d578:	f84e 1b04 	str.w	r1, [lr], #4
 800d57c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d580:	f8be 1000 	ldrh.w	r1, [lr]
 800d584:	0c12      	lsrs	r2, r2, #16
 800d586:	fb09 1102 	mla	r1, r9, r2, r1
 800d58a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d58e:	4567      	cmp	r7, ip
 800d590:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d594:	d8e6      	bhi.n	800d564 <__multiply+0x10c>
 800d596:	9a01      	ldr	r2, [sp, #4]
 800d598:	50a9      	str	r1, [r5, r2]
 800d59a:	3504      	adds	r5, #4
 800d59c:	e79a      	b.n	800d4d4 <__multiply+0x7c>
 800d59e:	3e01      	subs	r6, #1
 800d5a0:	e79c      	b.n	800d4dc <__multiply+0x84>
 800d5a2:	bf00      	nop
 800d5a4:	08010898 	.word	0x08010898
 800d5a8:	08010924 	.word	0x08010924

0800d5ac <__pow5mult>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	4615      	mov	r5, r2
 800d5b2:	f012 0203 	ands.w	r2, r2, #3
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460f      	mov	r7, r1
 800d5ba:	d007      	beq.n	800d5cc <__pow5mult+0x20>
 800d5bc:	4c25      	ldr	r4, [pc, #148]	; (800d654 <__pow5mult+0xa8>)
 800d5be:	3a01      	subs	r2, #1
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5c6:	f7ff fe51 	bl	800d26c <__multadd>
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	10ad      	asrs	r5, r5, #2
 800d5ce:	d03d      	beq.n	800d64c <__pow5mult+0xa0>
 800d5d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5d2:	b97c      	cbnz	r4, 800d5f4 <__pow5mult+0x48>
 800d5d4:	2010      	movs	r0, #16
 800d5d6:	f7ff fdbf 	bl	800d158 <malloc>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	6270      	str	r0, [r6, #36]	; 0x24
 800d5de:	b928      	cbnz	r0, 800d5ec <__pow5mult+0x40>
 800d5e0:	4b1d      	ldr	r3, [pc, #116]	; (800d658 <__pow5mult+0xac>)
 800d5e2:	481e      	ldr	r0, [pc, #120]	; (800d65c <__pow5mult+0xb0>)
 800d5e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d5e8:	f001 f936 	bl	800e858 <__assert_func>
 800d5ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5f0:	6004      	str	r4, [r0, #0]
 800d5f2:	60c4      	str	r4, [r0, #12]
 800d5f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d5f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5fc:	b94c      	cbnz	r4, 800d612 <__pow5mult+0x66>
 800d5fe:	f240 2171 	movw	r1, #625	; 0x271
 800d602:	4630      	mov	r0, r6
 800d604:	f7ff ff12 	bl	800d42c <__i2b>
 800d608:	2300      	movs	r3, #0
 800d60a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d60e:	4604      	mov	r4, r0
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	f04f 0900 	mov.w	r9, #0
 800d616:	07eb      	lsls	r3, r5, #31
 800d618:	d50a      	bpl.n	800d630 <__pow5mult+0x84>
 800d61a:	4639      	mov	r1, r7
 800d61c:	4622      	mov	r2, r4
 800d61e:	4630      	mov	r0, r6
 800d620:	f7ff ff1a 	bl	800d458 <__multiply>
 800d624:	4639      	mov	r1, r7
 800d626:	4680      	mov	r8, r0
 800d628:	4630      	mov	r0, r6
 800d62a:	f7ff fdfd 	bl	800d228 <_Bfree>
 800d62e:	4647      	mov	r7, r8
 800d630:	106d      	asrs	r5, r5, #1
 800d632:	d00b      	beq.n	800d64c <__pow5mult+0xa0>
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	b938      	cbnz	r0, 800d648 <__pow5mult+0x9c>
 800d638:	4622      	mov	r2, r4
 800d63a:	4621      	mov	r1, r4
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff ff0b 	bl	800d458 <__multiply>
 800d642:	6020      	str	r0, [r4, #0]
 800d644:	f8c0 9000 	str.w	r9, [r0]
 800d648:	4604      	mov	r4, r0
 800d64a:	e7e4      	b.n	800d616 <__pow5mult+0x6a>
 800d64c:	4638      	mov	r0, r7
 800d64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d652:	bf00      	nop
 800d654:	08010a70 	.word	0x08010a70
 800d658:	08010826 	.word	0x08010826
 800d65c:	08010924 	.word	0x08010924

0800d660 <__lshift>:
 800d660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d664:	460c      	mov	r4, r1
 800d666:	6849      	ldr	r1, [r1, #4]
 800d668:	6923      	ldr	r3, [r4, #16]
 800d66a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	4607      	mov	r7, r0
 800d672:	4691      	mov	r9, r2
 800d674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d678:	f108 0601 	add.w	r6, r8, #1
 800d67c:	42b3      	cmp	r3, r6
 800d67e:	db0b      	blt.n	800d698 <__lshift+0x38>
 800d680:	4638      	mov	r0, r7
 800d682:	f7ff fd91 	bl	800d1a8 <_Balloc>
 800d686:	4605      	mov	r5, r0
 800d688:	b948      	cbnz	r0, 800d69e <__lshift+0x3e>
 800d68a:	4602      	mov	r2, r0
 800d68c:	4b2a      	ldr	r3, [pc, #168]	; (800d738 <__lshift+0xd8>)
 800d68e:	482b      	ldr	r0, [pc, #172]	; (800d73c <__lshift+0xdc>)
 800d690:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d694:	f001 f8e0 	bl	800e858 <__assert_func>
 800d698:	3101      	adds	r1, #1
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	e7ee      	b.n	800d67c <__lshift+0x1c>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f100 0114 	add.w	r1, r0, #20
 800d6a4:	f100 0210 	add.w	r2, r0, #16
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	4553      	cmp	r3, sl
 800d6ac:	db37      	blt.n	800d71e <__lshift+0xbe>
 800d6ae:	6920      	ldr	r0, [r4, #16]
 800d6b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6b4:	f104 0314 	add.w	r3, r4, #20
 800d6b8:	f019 091f 	ands.w	r9, r9, #31
 800d6bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6c4:	d02f      	beq.n	800d726 <__lshift+0xc6>
 800d6c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d6ca:	468a      	mov	sl, r1
 800d6cc:	f04f 0c00 	mov.w	ip, #0
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	fa02 f209 	lsl.w	r2, r2, r9
 800d6d6:	ea42 020c 	orr.w	r2, r2, ip
 800d6da:	f84a 2b04 	str.w	r2, [sl], #4
 800d6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e2:	4298      	cmp	r0, r3
 800d6e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d6e8:	d8f2      	bhi.n	800d6d0 <__lshift+0x70>
 800d6ea:	1b03      	subs	r3, r0, r4
 800d6ec:	3b15      	subs	r3, #21
 800d6ee:	f023 0303 	bic.w	r3, r3, #3
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	f104 0215 	add.w	r2, r4, #21
 800d6f8:	4290      	cmp	r0, r2
 800d6fa:	bf38      	it	cc
 800d6fc:	2304      	movcc	r3, #4
 800d6fe:	f841 c003 	str.w	ip, [r1, r3]
 800d702:	f1bc 0f00 	cmp.w	ip, #0
 800d706:	d001      	beq.n	800d70c <__lshift+0xac>
 800d708:	f108 0602 	add.w	r6, r8, #2
 800d70c:	3e01      	subs	r6, #1
 800d70e:	4638      	mov	r0, r7
 800d710:	612e      	str	r6, [r5, #16]
 800d712:	4621      	mov	r1, r4
 800d714:	f7ff fd88 	bl	800d228 <_Bfree>
 800d718:	4628      	mov	r0, r5
 800d71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d722:	3301      	adds	r3, #1
 800d724:	e7c1      	b.n	800d6aa <__lshift+0x4a>
 800d726:	3904      	subs	r1, #4
 800d728:	f853 2b04 	ldr.w	r2, [r3], #4
 800d72c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d730:	4298      	cmp	r0, r3
 800d732:	d8f9      	bhi.n	800d728 <__lshift+0xc8>
 800d734:	e7ea      	b.n	800d70c <__lshift+0xac>
 800d736:	bf00      	nop
 800d738:	08010898 	.word	0x08010898
 800d73c:	08010924 	.word	0x08010924

0800d740 <__mcmp>:
 800d740:	b530      	push	{r4, r5, lr}
 800d742:	6902      	ldr	r2, [r0, #16]
 800d744:	690c      	ldr	r4, [r1, #16]
 800d746:	1b12      	subs	r2, r2, r4
 800d748:	d10e      	bne.n	800d768 <__mcmp+0x28>
 800d74a:	f100 0314 	add.w	r3, r0, #20
 800d74e:	3114      	adds	r1, #20
 800d750:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d754:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d758:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d75c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d760:	42a5      	cmp	r5, r4
 800d762:	d003      	beq.n	800d76c <__mcmp+0x2c>
 800d764:	d305      	bcc.n	800d772 <__mcmp+0x32>
 800d766:	2201      	movs	r2, #1
 800d768:	4610      	mov	r0, r2
 800d76a:	bd30      	pop	{r4, r5, pc}
 800d76c:	4283      	cmp	r3, r0
 800d76e:	d3f3      	bcc.n	800d758 <__mcmp+0x18>
 800d770:	e7fa      	b.n	800d768 <__mcmp+0x28>
 800d772:	f04f 32ff 	mov.w	r2, #4294967295
 800d776:	e7f7      	b.n	800d768 <__mcmp+0x28>

0800d778 <__mdiff>:
 800d778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	460c      	mov	r4, r1
 800d77e:	4606      	mov	r6, r0
 800d780:	4611      	mov	r1, r2
 800d782:	4620      	mov	r0, r4
 800d784:	4690      	mov	r8, r2
 800d786:	f7ff ffdb 	bl	800d740 <__mcmp>
 800d78a:	1e05      	subs	r5, r0, #0
 800d78c:	d110      	bne.n	800d7b0 <__mdiff+0x38>
 800d78e:	4629      	mov	r1, r5
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff fd09 	bl	800d1a8 <_Balloc>
 800d796:	b930      	cbnz	r0, 800d7a6 <__mdiff+0x2e>
 800d798:	4b3a      	ldr	r3, [pc, #232]	; (800d884 <__mdiff+0x10c>)
 800d79a:	4602      	mov	r2, r0
 800d79c:	f240 2132 	movw	r1, #562	; 0x232
 800d7a0:	4839      	ldr	r0, [pc, #228]	; (800d888 <__mdiff+0x110>)
 800d7a2:	f001 f859 	bl	800e858 <__assert_func>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b0:	bfa4      	itt	ge
 800d7b2:	4643      	movge	r3, r8
 800d7b4:	46a0      	movge	r8, r4
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d7bc:	bfa6      	itte	ge
 800d7be:	461c      	movge	r4, r3
 800d7c0:	2500      	movge	r5, #0
 800d7c2:	2501      	movlt	r5, #1
 800d7c4:	f7ff fcf0 	bl	800d1a8 <_Balloc>
 800d7c8:	b920      	cbnz	r0, 800d7d4 <__mdiff+0x5c>
 800d7ca:	4b2e      	ldr	r3, [pc, #184]	; (800d884 <__mdiff+0x10c>)
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d7d2:	e7e5      	b.n	800d7a0 <__mdiff+0x28>
 800d7d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d7d8:	6926      	ldr	r6, [r4, #16]
 800d7da:	60c5      	str	r5, [r0, #12]
 800d7dc:	f104 0914 	add.w	r9, r4, #20
 800d7e0:	f108 0514 	add.w	r5, r8, #20
 800d7e4:	f100 0e14 	add.w	lr, r0, #20
 800d7e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7f0:	f108 0210 	add.w	r2, r8, #16
 800d7f4:	46f2      	mov	sl, lr
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d7fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d800:	fa1f f883 	uxth.w	r8, r3
 800d804:	fa11 f18b 	uxtah	r1, r1, fp
 800d808:	0c1b      	lsrs	r3, r3, #16
 800d80a:	eba1 0808 	sub.w	r8, r1, r8
 800d80e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d812:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d816:	fa1f f888 	uxth.w	r8, r8
 800d81a:	1419      	asrs	r1, r3, #16
 800d81c:	454e      	cmp	r6, r9
 800d81e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d822:	f84a 3b04 	str.w	r3, [sl], #4
 800d826:	d8e7      	bhi.n	800d7f8 <__mdiff+0x80>
 800d828:	1b33      	subs	r3, r6, r4
 800d82a:	3b15      	subs	r3, #21
 800d82c:	f023 0303 	bic.w	r3, r3, #3
 800d830:	3304      	adds	r3, #4
 800d832:	3415      	adds	r4, #21
 800d834:	42a6      	cmp	r6, r4
 800d836:	bf38      	it	cc
 800d838:	2304      	movcc	r3, #4
 800d83a:	441d      	add	r5, r3
 800d83c:	4473      	add	r3, lr
 800d83e:	469e      	mov	lr, r3
 800d840:	462e      	mov	r6, r5
 800d842:	4566      	cmp	r6, ip
 800d844:	d30e      	bcc.n	800d864 <__mdiff+0xec>
 800d846:	f10c 0203 	add.w	r2, ip, #3
 800d84a:	1b52      	subs	r2, r2, r5
 800d84c:	f022 0203 	bic.w	r2, r2, #3
 800d850:	3d03      	subs	r5, #3
 800d852:	45ac      	cmp	ip, r5
 800d854:	bf38      	it	cc
 800d856:	2200      	movcc	r2, #0
 800d858:	441a      	add	r2, r3
 800d85a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d85e:	b17b      	cbz	r3, 800d880 <__mdiff+0x108>
 800d860:	6107      	str	r7, [r0, #16]
 800d862:	e7a3      	b.n	800d7ac <__mdiff+0x34>
 800d864:	f856 8b04 	ldr.w	r8, [r6], #4
 800d868:	fa11 f288 	uxtah	r2, r1, r8
 800d86c:	1414      	asrs	r4, r2, #16
 800d86e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d872:	b292      	uxth	r2, r2
 800d874:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d878:	f84e 2b04 	str.w	r2, [lr], #4
 800d87c:	1421      	asrs	r1, r4, #16
 800d87e:	e7e0      	b.n	800d842 <__mdiff+0xca>
 800d880:	3f01      	subs	r7, #1
 800d882:	e7ea      	b.n	800d85a <__mdiff+0xe2>
 800d884:	08010898 	.word	0x08010898
 800d888:	08010924 	.word	0x08010924

0800d88c <__ulp>:
 800d88c:	b082      	sub	sp, #8
 800d88e:	ed8d 0b00 	vstr	d0, [sp]
 800d892:	9b01      	ldr	r3, [sp, #4]
 800d894:	4912      	ldr	r1, [pc, #72]	; (800d8e0 <__ulp+0x54>)
 800d896:	4019      	ands	r1, r3
 800d898:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d89c:	2900      	cmp	r1, #0
 800d89e:	dd05      	ble.n	800d8ac <__ulp+0x20>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	ec43 2b10 	vmov	d0, r2, r3
 800d8a8:	b002      	add	sp, #8
 800d8aa:	4770      	bx	lr
 800d8ac:	4249      	negs	r1, r1
 800d8ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d8b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d8b6:	f04f 0200 	mov.w	r2, #0
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	da04      	bge.n	800d8ca <__ulp+0x3e>
 800d8c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d8c4:	fa41 f300 	asr.w	r3, r1, r0
 800d8c8:	e7ec      	b.n	800d8a4 <__ulp+0x18>
 800d8ca:	f1a0 0114 	sub.w	r1, r0, #20
 800d8ce:	291e      	cmp	r1, #30
 800d8d0:	bfda      	itte	le
 800d8d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d8d6:	fa20 f101 	lsrle.w	r1, r0, r1
 800d8da:	2101      	movgt	r1, #1
 800d8dc:	460a      	mov	r2, r1
 800d8de:	e7e1      	b.n	800d8a4 <__ulp+0x18>
 800d8e0:	7ff00000 	.word	0x7ff00000

0800d8e4 <__b2d>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	6905      	ldr	r5, [r0, #16]
 800d8e8:	f100 0714 	add.w	r7, r0, #20
 800d8ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d8f0:	1f2e      	subs	r6, r5, #4
 800d8f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f7ff fd48 	bl	800d38c <__hi0bits>
 800d8fc:	f1c0 0320 	rsb	r3, r0, #32
 800d900:	280a      	cmp	r0, #10
 800d902:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d980 <__b2d+0x9c>
 800d906:	600b      	str	r3, [r1, #0]
 800d908:	dc14      	bgt.n	800d934 <__b2d+0x50>
 800d90a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d90e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d912:	42b7      	cmp	r7, r6
 800d914:	ea41 030c 	orr.w	r3, r1, ip
 800d918:	bf34      	ite	cc
 800d91a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d91e:	2100      	movcs	r1, #0
 800d920:	3015      	adds	r0, #21
 800d922:	fa04 f000 	lsl.w	r0, r4, r0
 800d926:	fa21 f10e 	lsr.w	r1, r1, lr
 800d92a:	ea40 0201 	orr.w	r2, r0, r1
 800d92e:	ec43 2b10 	vmov	d0, r2, r3
 800d932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d934:	42b7      	cmp	r7, r6
 800d936:	bf3a      	itte	cc
 800d938:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d93c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d940:	2100      	movcs	r1, #0
 800d942:	380b      	subs	r0, #11
 800d944:	d017      	beq.n	800d976 <__b2d+0x92>
 800d946:	f1c0 0c20 	rsb	ip, r0, #32
 800d94a:	fa04 f500 	lsl.w	r5, r4, r0
 800d94e:	42be      	cmp	r6, r7
 800d950:	fa21 f40c 	lsr.w	r4, r1, ip
 800d954:	ea45 0504 	orr.w	r5, r5, r4
 800d958:	bf8c      	ite	hi
 800d95a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d95e:	2400      	movls	r4, #0
 800d960:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d964:	fa01 f000 	lsl.w	r0, r1, r0
 800d968:	fa24 f40c 	lsr.w	r4, r4, ip
 800d96c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d970:	ea40 0204 	orr.w	r2, r0, r4
 800d974:	e7db      	b.n	800d92e <__b2d+0x4a>
 800d976:	ea44 030c 	orr.w	r3, r4, ip
 800d97a:	460a      	mov	r2, r1
 800d97c:	e7d7      	b.n	800d92e <__b2d+0x4a>
 800d97e:	bf00      	nop
 800d980:	3ff00000 	.word	0x3ff00000

0800d984 <__d2b>:
 800d984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d988:	4689      	mov	r9, r1
 800d98a:	2101      	movs	r1, #1
 800d98c:	ec57 6b10 	vmov	r6, r7, d0
 800d990:	4690      	mov	r8, r2
 800d992:	f7ff fc09 	bl	800d1a8 <_Balloc>
 800d996:	4604      	mov	r4, r0
 800d998:	b930      	cbnz	r0, 800d9a8 <__d2b+0x24>
 800d99a:	4602      	mov	r2, r0
 800d99c:	4b25      	ldr	r3, [pc, #148]	; (800da34 <__d2b+0xb0>)
 800d99e:	4826      	ldr	r0, [pc, #152]	; (800da38 <__d2b+0xb4>)
 800d9a0:	f240 310a 	movw	r1, #778	; 0x30a
 800d9a4:	f000 ff58 	bl	800e858 <__assert_func>
 800d9a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d9ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d9b0:	bb35      	cbnz	r5, 800da00 <__d2b+0x7c>
 800d9b2:	2e00      	cmp	r6, #0
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	d028      	beq.n	800da0a <__d2b+0x86>
 800d9b8:	4668      	mov	r0, sp
 800d9ba:	9600      	str	r6, [sp, #0]
 800d9bc:	f7ff fd06 	bl	800d3cc <__lo0bits>
 800d9c0:	9900      	ldr	r1, [sp, #0]
 800d9c2:	b300      	cbz	r0, 800da06 <__d2b+0x82>
 800d9c4:	9a01      	ldr	r2, [sp, #4]
 800d9c6:	f1c0 0320 	rsb	r3, r0, #32
 800d9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ce:	430b      	orrs	r3, r1
 800d9d0:	40c2      	lsrs	r2, r0
 800d9d2:	6163      	str	r3, [r4, #20]
 800d9d4:	9201      	str	r2, [sp, #4]
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	61a3      	str	r3, [r4, #24]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	bf14      	ite	ne
 800d9de:	2202      	movne	r2, #2
 800d9e0:	2201      	moveq	r2, #1
 800d9e2:	6122      	str	r2, [r4, #16]
 800d9e4:	b1d5      	cbz	r5, 800da1c <__d2b+0x98>
 800d9e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9ea:	4405      	add	r5, r0
 800d9ec:	f8c9 5000 	str.w	r5, [r9]
 800d9f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9f4:	f8c8 0000 	str.w	r0, [r8]
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	b003      	add	sp, #12
 800d9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da04:	e7d5      	b.n	800d9b2 <__d2b+0x2e>
 800da06:	6161      	str	r1, [r4, #20]
 800da08:	e7e5      	b.n	800d9d6 <__d2b+0x52>
 800da0a:	a801      	add	r0, sp, #4
 800da0c:	f7ff fcde 	bl	800d3cc <__lo0bits>
 800da10:	9b01      	ldr	r3, [sp, #4]
 800da12:	6163      	str	r3, [r4, #20]
 800da14:	2201      	movs	r2, #1
 800da16:	6122      	str	r2, [r4, #16]
 800da18:	3020      	adds	r0, #32
 800da1a:	e7e3      	b.n	800d9e4 <__d2b+0x60>
 800da1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da24:	f8c9 0000 	str.w	r0, [r9]
 800da28:	6918      	ldr	r0, [r3, #16]
 800da2a:	f7ff fcaf 	bl	800d38c <__hi0bits>
 800da2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da32:	e7df      	b.n	800d9f4 <__d2b+0x70>
 800da34:	08010898 	.word	0x08010898
 800da38:	08010924 	.word	0x08010924

0800da3c <__ratio>:
 800da3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da40:	4688      	mov	r8, r1
 800da42:	4669      	mov	r1, sp
 800da44:	4681      	mov	r9, r0
 800da46:	f7ff ff4d 	bl	800d8e4 <__b2d>
 800da4a:	a901      	add	r1, sp, #4
 800da4c:	4640      	mov	r0, r8
 800da4e:	ec55 4b10 	vmov	r4, r5, d0
 800da52:	f7ff ff47 	bl	800d8e4 <__b2d>
 800da56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da5e:	eba3 0c02 	sub.w	ip, r3, r2
 800da62:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da66:	1a9b      	subs	r3, r3, r2
 800da68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da6c:	ec51 0b10 	vmov	r0, r1, d0
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfd6      	itet	le
 800da74:	460a      	movle	r2, r1
 800da76:	462a      	movgt	r2, r5
 800da78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da7c:	468b      	mov	fp, r1
 800da7e:	462f      	mov	r7, r5
 800da80:	bfd4      	ite	le
 800da82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da8a:	4620      	mov	r0, r4
 800da8c:	ee10 2a10 	vmov	r2, s0
 800da90:	465b      	mov	r3, fp
 800da92:	4639      	mov	r1, r7
 800da94:	f7f2 feda 	bl	800084c <__aeabi_ddiv>
 800da98:	ec41 0b10 	vmov	d0, r0, r1
 800da9c:	b003      	add	sp, #12
 800da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800daa2 <__copybits>:
 800daa2:	3901      	subs	r1, #1
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	1149      	asrs	r1, r1, #5
 800daa8:	6914      	ldr	r4, [r2, #16]
 800daaa:	3101      	adds	r1, #1
 800daac:	f102 0314 	add.w	r3, r2, #20
 800dab0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dab4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dab8:	1f05      	subs	r5, r0, #4
 800daba:	42a3      	cmp	r3, r4
 800dabc:	d30c      	bcc.n	800dad8 <__copybits+0x36>
 800dabe:	1aa3      	subs	r3, r4, r2
 800dac0:	3b11      	subs	r3, #17
 800dac2:	f023 0303 	bic.w	r3, r3, #3
 800dac6:	3211      	adds	r2, #17
 800dac8:	42a2      	cmp	r2, r4
 800daca:	bf88      	it	hi
 800dacc:	2300      	movhi	r3, #0
 800dace:	4418      	add	r0, r3
 800dad0:	2300      	movs	r3, #0
 800dad2:	4288      	cmp	r0, r1
 800dad4:	d305      	bcc.n	800dae2 <__copybits+0x40>
 800dad6:	bd70      	pop	{r4, r5, r6, pc}
 800dad8:	f853 6b04 	ldr.w	r6, [r3], #4
 800dadc:	f845 6f04 	str.w	r6, [r5, #4]!
 800dae0:	e7eb      	b.n	800daba <__copybits+0x18>
 800dae2:	f840 3b04 	str.w	r3, [r0], #4
 800dae6:	e7f4      	b.n	800dad2 <__copybits+0x30>

0800dae8 <__any_on>:
 800dae8:	f100 0214 	add.w	r2, r0, #20
 800daec:	6900      	ldr	r0, [r0, #16]
 800daee:	114b      	asrs	r3, r1, #5
 800daf0:	4298      	cmp	r0, r3
 800daf2:	b510      	push	{r4, lr}
 800daf4:	db11      	blt.n	800db1a <__any_on+0x32>
 800daf6:	dd0a      	ble.n	800db0e <__any_on+0x26>
 800daf8:	f011 011f 	ands.w	r1, r1, #31
 800dafc:	d007      	beq.n	800db0e <__any_on+0x26>
 800dafe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db02:	fa24 f001 	lsr.w	r0, r4, r1
 800db06:	fa00 f101 	lsl.w	r1, r0, r1
 800db0a:	428c      	cmp	r4, r1
 800db0c:	d10b      	bne.n	800db26 <__any_on+0x3e>
 800db0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db12:	4293      	cmp	r3, r2
 800db14:	d803      	bhi.n	800db1e <__any_on+0x36>
 800db16:	2000      	movs	r0, #0
 800db18:	bd10      	pop	{r4, pc}
 800db1a:	4603      	mov	r3, r0
 800db1c:	e7f7      	b.n	800db0e <__any_on+0x26>
 800db1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db22:	2900      	cmp	r1, #0
 800db24:	d0f5      	beq.n	800db12 <__any_on+0x2a>
 800db26:	2001      	movs	r0, #1
 800db28:	e7f6      	b.n	800db18 <__any_on+0x30>

0800db2a <_calloc_r>:
 800db2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db2c:	fba1 2402 	umull	r2, r4, r1, r2
 800db30:	b94c      	cbnz	r4, 800db46 <_calloc_r+0x1c>
 800db32:	4611      	mov	r1, r2
 800db34:	9201      	str	r2, [sp, #4]
 800db36:	f000 f87b 	bl	800dc30 <_malloc_r>
 800db3a:	9a01      	ldr	r2, [sp, #4]
 800db3c:	4605      	mov	r5, r0
 800db3e:	b930      	cbnz	r0, 800db4e <_calloc_r+0x24>
 800db40:	4628      	mov	r0, r5
 800db42:	b003      	add	sp, #12
 800db44:	bd30      	pop	{r4, r5, pc}
 800db46:	220c      	movs	r2, #12
 800db48:	6002      	str	r2, [r0, #0]
 800db4a:	2500      	movs	r5, #0
 800db4c:	e7f8      	b.n	800db40 <_calloc_r+0x16>
 800db4e:	4621      	mov	r1, r4
 800db50:	f7fc fb02 	bl	800a158 <memset>
 800db54:	e7f4      	b.n	800db40 <_calloc_r+0x16>
	...

0800db58 <_free_r>:
 800db58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db5a:	2900      	cmp	r1, #0
 800db5c:	d044      	beq.n	800dbe8 <_free_r+0x90>
 800db5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db62:	9001      	str	r0, [sp, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	f1a1 0404 	sub.w	r4, r1, #4
 800db6a:	bfb8      	it	lt
 800db6c:	18e4      	addlt	r4, r4, r3
 800db6e:	f001 f877 	bl	800ec60 <__malloc_lock>
 800db72:	4a1e      	ldr	r2, [pc, #120]	; (800dbec <_free_r+0x94>)
 800db74:	9801      	ldr	r0, [sp, #4]
 800db76:	6813      	ldr	r3, [r2, #0]
 800db78:	b933      	cbnz	r3, 800db88 <_free_r+0x30>
 800db7a:	6063      	str	r3, [r4, #4]
 800db7c:	6014      	str	r4, [r2, #0]
 800db7e:	b003      	add	sp, #12
 800db80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db84:	f001 b872 	b.w	800ec6c <__malloc_unlock>
 800db88:	42a3      	cmp	r3, r4
 800db8a:	d908      	bls.n	800db9e <_free_r+0x46>
 800db8c:	6825      	ldr	r5, [r4, #0]
 800db8e:	1961      	adds	r1, r4, r5
 800db90:	428b      	cmp	r3, r1
 800db92:	bf01      	itttt	eq
 800db94:	6819      	ldreq	r1, [r3, #0]
 800db96:	685b      	ldreq	r3, [r3, #4]
 800db98:	1949      	addeq	r1, r1, r5
 800db9a:	6021      	streq	r1, [r4, #0]
 800db9c:	e7ed      	b.n	800db7a <_free_r+0x22>
 800db9e:	461a      	mov	r2, r3
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	b10b      	cbz	r3, 800dba8 <_free_r+0x50>
 800dba4:	42a3      	cmp	r3, r4
 800dba6:	d9fa      	bls.n	800db9e <_free_r+0x46>
 800dba8:	6811      	ldr	r1, [r2, #0]
 800dbaa:	1855      	adds	r5, r2, r1
 800dbac:	42a5      	cmp	r5, r4
 800dbae:	d10b      	bne.n	800dbc8 <_free_r+0x70>
 800dbb0:	6824      	ldr	r4, [r4, #0]
 800dbb2:	4421      	add	r1, r4
 800dbb4:	1854      	adds	r4, r2, r1
 800dbb6:	42a3      	cmp	r3, r4
 800dbb8:	6011      	str	r1, [r2, #0]
 800dbba:	d1e0      	bne.n	800db7e <_free_r+0x26>
 800dbbc:	681c      	ldr	r4, [r3, #0]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	6053      	str	r3, [r2, #4]
 800dbc2:	4421      	add	r1, r4
 800dbc4:	6011      	str	r1, [r2, #0]
 800dbc6:	e7da      	b.n	800db7e <_free_r+0x26>
 800dbc8:	d902      	bls.n	800dbd0 <_free_r+0x78>
 800dbca:	230c      	movs	r3, #12
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	e7d6      	b.n	800db7e <_free_r+0x26>
 800dbd0:	6825      	ldr	r5, [r4, #0]
 800dbd2:	1961      	adds	r1, r4, r5
 800dbd4:	428b      	cmp	r3, r1
 800dbd6:	bf04      	itt	eq
 800dbd8:	6819      	ldreq	r1, [r3, #0]
 800dbda:	685b      	ldreq	r3, [r3, #4]
 800dbdc:	6063      	str	r3, [r4, #4]
 800dbde:	bf04      	itt	eq
 800dbe0:	1949      	addeq	r1, r1, r5
 800dbe2:	6021      	streq	r1, [r4, #0]
 800dbe4:	6054      	str	r4, [r2, #4]
 800dbe6:	e7ca      	b.n	800db7e <_free_r+0x26>
 800dbe8:	b003      	add	sp, #12
 800dbea:	bd30      	pop	{r4, r5, pc}
 800dbec:	200009d8 	.word	0x200009d8

0800dbf0 <sbrk_aligned>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	4e0e      	ldr	r6, [pc, #56]	; (800dc2c <sbrk_aligned+0x3c>)
 800dbf4:	460c      	mov	r4, r1
 800dbf6:	6831      	ldr	r1, [r6, #0]
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	b911      	cbnz	r1, 800dc02 <sbrk_aligned+0x12>
 800dbfc:	f000 fd28 	bl	800e650 <_sbrk_r>
 800dc00:	6030      	str	r0, [r6, #0]
 800dc02:	4621      	mov	r1, r4
 800dc04:	4628      	mov	r0, r5
 800dc06:	f000 fd23 	bl	800e650 <_sbrk_r>
 800dc0a:	1c43      	adds	r3, r0, #1
 800dc0c:	d00a      	beq.n	800dc24 <sbrk_aligned+0x34>
 800dc0e:	1cc4      	adds	r4, r0, #3
 800dc10:	f024 0403 	bic.w	r4, r4, #3
 800dc14:	42a0      	cmp	r0, r4
 800dc16:	d007      	beq.n	800dc28 <sbrk_aligned+0x38>
 800dc18:	1a21      	subs	r1, r4, r0
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f000 fd18 	bl	800e650 <_sbrk_r>
 800dc20:	3001      	adds	r0, #1
 800dc22:	d101      	bne.n	800dc28 <sbrk_aligned+0x38>
 800dc24:	f04f 34ff 	mov.w	r4, #4294967295
 800dc28:	4620      	mov	r0, r4
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
 800dc2c:	200009dc 	.word	0x200009dc

0800dc30 <_malloc_r>:
 800dc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc34:	1ccd      	adds	r5, r1, #3
 800dc36:	f025 0503 	bic.w	r5, r5, #3
 800dc3a:	3508      	adds	r5, #8
 800dc3c:	2d0c      	cmp	r5, #12
 800dc3e:	bf38      	it	cc
 800dc40:	250c      	movcc	r5, #12
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	4607      	mov	r7, r0
 800dc46:	db01      	blt.n	800dc4c <_malloc_r+0x1c>
 800dc48:	42a9      	cmp	r1, r5
 800dc4a:	d905      	bls.n	800dc58 <_malloc_r+0x28>
 800dc4c:	230c      	movs	r3, #12
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	2600      	movs	r6, #0
 800dc52:	4630      	mov	r0, r6
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc58:	4e2e      	ldr	r6, [pc, #184]	; (800dd14 <_malloc_r+0xe4>)
 800dc5a:	f001 f801 	bl	800ec60 <__malloc_lock>
 800dc5e:	6833      	ldr	r3, [r6, #0]
 800dc60:	461c      	mov	r4, r3
 800dc62:	bb34      	cbnz	r4, 800dcb2 <_malloc_r+0x82>
 800dc64:	4629      	mov	r1, r5
 800dc66:	4638      	mov	r0, r7
 800dc68:	f7ff ffc2 	bl	800dbf0 <sbrk_aligned>
 800dc6c:	1c43      	adds	r3, r0, #1
 800dc6e:	4604      	mov	r4, r0
 800dc70:	d14d      	bne.n	800dd0e <_malloc_r+0xde>
 800dc72:	6834      	ldr	r4, [r6, #0]
 800dc74:	4626      	mov	r6, r4
 800dc76:	2e00      	cmp	r6, #0
 800dc78:	d140      	bne.n	800dcfc <_malloc_r+0xcc>
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4638      	mov	r0, r7
 800dc80:	eb04 0803 	add.w	r8, r4, r3
 800dc84:	f000 fce4 	bl	800e650 <_sbrk_r>
 800dc88:	4580      	cmp	r8, r0
 800dc8a:	d13a      	bne.n	800dd02 <_malloc_r+0xd2>
 800dc8c:	6821      	ldr	r1, [r4, #0]
 800dc8e:	3503      	adds	r5, #3
 800dc90:	1a6d      	subs	r5, r5, r1
 800dc92:	f025 0503 	bic.w	r5, r5, #3
 800dc96:	3508      	adds	r5, #8
 800dc98:	2d0c      	cmp	r5, #12
 800dc9a:	bf38      	it	cc
 800dc9c:	250c      	movcc	r5, #12
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4638      	mov	r0, r7
 800dca2:	f7ff ffa5 	bl	800dbf0 <sbrk_aligned>
 800dca6:	3001      	adds	r0, #1
 800dca8:	d02b      	beq.n	800dd02 <_malloc_r+0xd2>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	442b      	add	r3, r5
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	e00e      	b.n	800dcd0 <_malloc_r+0xa0>
 800dcb2:	6822      	ldr	r2, [r4, #0]
 800dcb4:	1b52      	subs	r2, r2, r5
 800dcb6:	d41e      	bmi.n	800dcf6 <_malloc_r+0xc6>
 800dcb8:	2a0b      	cmp	r2, #11
 800dcba:	d916      	bls.n	800dcea <_malloc_r+0xba>
 800dcbc:	1961      	adds	r1, r4, r5
 800dcbe:	42a3      	cmp	r3, r4
 800dcc0:	6025      	str	r5, [r4, #0]
 800dcc2:	bf18      	it	ne
 800dcc4:	6059      	strne	r1, [r3, #4]
 800dcc6:	6863      	ldr	r3, [r4, #4]
 800dcc8:	bf08      	it	eq
 800dcca:	6031      	streq	r1, [r6, #0]
 800dccc:	5162      	str	r2, [r4, r5]
 800dcce:	604b      	str	r3, [r1, #4]
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f104 060b 	add.w	r6, r4, #11
 800dcd6:	f000 ffc9 	bl	800ec6c <__malloc_unlock>
 800dcda:	f026 0607 	bic.w	r6, r6, #7
 800dcde:	1d23      	adds	r3, r4, #4
 800dce0:	1af2      	subs	r2, r6, r3
 800dce2:	d0b6      	beq.n	800dc52 <_malloc_r+0x22>
 800dce4:	1b9b      	subs	r3, r3, r6
 800dce6:	50a3      	str	r3, [r4, r2]
 800dce8:	e7b3      	b.n	800dc52 <_malloc_r+0x22>
 800dcea:	6862      	ldr	r2, [r4, #4]
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	bf0c      	ite	eq
 800dcf0:	6032      	streq	r2, [r6, #0]
 800dcf2:	605a      	strne	r2, [r3, #4]
 800dcf4:	e7ec      	b.n	800dcd0 <_malloc_r+0xa0>
 800dcf6:	4623      	mov	r3, r4
 800dcf8:	6864      	ldr	r4, [r4, #4]
 800dcfa:	e7b2      	b.n	800dc62 <_malloc_r+0x32>
 800dcfc:	4634      	mov	r4, r6
 800dcfe:	6876      	ldr	r6, [r6, #4]
 800dd00:	e7b9      	b.n	800dc76 <_malloc_r+0x46>
 800dd02:	230c      	movs	r3, #12
 800dd04:	603b      	str	r3, [r7, #0]
 800dd06:	4638      	mov	r0, r7
 800dd08:	f000 ffb0 	bl	800ec6c <__malloc_unlock>
 800dd0c:	e7a1      	b.n	800dc52 <_malloc_r+0x22>
 800dd0e:	6025      	str	r5, [r4, #0]
 800dd10:	e7de      	b.n	800dcd0 <_malloc_r+0xa0>
 800dd12:	bf00      	nop
 800dd14:	200009d8 	.word	0x200009d8

0800dd18 <__ssputs_r>:
 800dd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd1c:	688e      	ldr	r6, [r1, #8]
 800dd1e:	429e      	cmp	r6, r3
 800dd20:	4682      	mov	sl, r0
 800dd22:	460c      	mov	r4, r1
 800dd24:	4690      	mov	r8, r2
 800dd26:	461f      	mov	r7, r3
 800dd28:	d838      	bhi.n	800dd9c <__ssputs_r+0x84>
 800dd2a:	898a      	ldrh	r2, [r1, #12]
 800dd2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd30:	d032      	beq.n	800dd98 <__ssputs_r+0x80>
 800dd32:	6825      	ldr	r5, [r4, #0]
 800dd34:	6909      	ldr	r1, [r1, #16]
 800dd36:	eba5 0901 	sub.w	r9, r5, r1
 800dd3a:	6965      	ldr	r5, [r4, #20]
 800dd3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd44:	3301      	adds	r3, #1
 800dd46:	444b      	add	r3, r9
 800dd48:	106d      	asrs	r5, r5, #1
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	bf38      	it	cc
 800dd4e:	461d      	movcc	r5, r3
 800dd50:	0553      	lsls	r3, r2, #21
 800dd52:	d531      	bpl.n	800ddb8 <__ssputs_r+0xa0>
 800dd54:	4629      	mov	r1, r5
 800dd56:	f7ff ff6b 	bl	800dc30 <_malloc_r>
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	b950      	cbnz	r0, 800dd74 <__ssputs_r+0x5c>
 800dd5e:	230c      	movs	r3, #12
 800dd60:	f8ca 3000 	str.w	r3, [sl]
 800dd64:	89a3      	ldrh	r3, [r4, #12]
 800dd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd74:	6921      	ldr	r1, [r4, #16]
 800dd76:	464a      	mov	r2, r9
 800dd78:	f7ff fa08 	bl	800d18c <memcpy>
 800dd7c:	89a3      	ldrh	r3, [r4, #12]
 800dd7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd86:	81a3      	strh	r3, [r4, #12]
 800dd88:	6126      	str	r6, [r4, #16]
 800dd8a:	6165      	str	r5, [r4, #20]
 800dd8c:	444e      	add	r6, r9
 800dd8e:	eba5 0509 	sub.w	r5, r5, r9
 800dd92:	6026      	str	r6, [r4, #0]
 800dd94:	60a5      	str	r5, [r4, #8]
 800dd96:	463e      	mov	r6, r7
 800dd98:	42be      	cmp	r6, r7
 800dd9a:	d900      	bls.n	800dd9e <__ssputs_r+0x86>
 800dd9c:	463e      	mov	r6, r7
 800dd9e:	6820      	ldr	r0, [r4, #0]
 800dda0:	4632      	mov	r2, r6
 800dda2:	4641      	mov	r1, r8
 800dda4:	f000 ff42 	bl	800ec2c <memmove>
 800dda8:	68a3      	ldr	r3, [r4, #8]
 800ddaa:	1b9b      	subs	r3, r3, r6
 800ddac:	60a3      	str	r3, [r4, #8]
 800ddae:	6823      	ldr	r3, [r4, #0]
 800ddb0:	4433      	add	r3, r6
 800ddb2:	6023      	str	r3, [r4, #0]
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	e7db      	b.n	800dd70 <__ssputs_r+0x58>
 800ddb8:	462a      	mov	r2, r5
 800ddba:	f000 ff5d 	bl	800ec78 <_realloc_r>
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	d1e1      	bne.n	800dd88 <__ssputs_r+0x70>
 800ddc4:	6921      	ldr	r1, [r4, #16]
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	f7ff fec6 	bl	800db58 <_free_r>
 800ddcc:	e7c7      	b.n	800dd5e <__ssputs_r+0x46>
	...

0800ddd0 <_svfiprintf_r>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	4698      	mov	r8, r3
 800ddd6:	898b      	ldrh	r3, [r1, #12]
 800ddd8:	061b      	lsls	r3, r3, #24
 800ddda:	b09d      	sub	sp, #116	; 0x74
 800dddc:	4607      	mov	r7, r0
 800ddde:	460d      	mov	r5, r1
 800dde0:	4614      	mov	r4, r2
 800dde2:	d50e      	bpl.n	800de02 <_svfiprintf_r+0x32>
 800dde4:	690b      	ldr	r3, [r1, #16]
 800dde6:	b963      	cbnz	r3, 800de02 <_svfiprintf_r+0x32>
 800dde8:	2140      	movs	r1, #64	; 0x40
 800ddea:	f7ff ff21 	bl	800dc30 <_malloc_r>
 800ddee:	6028      	str	r0, [r5, #0]
 800ddf0:	6128      	str	r0, [r5, #16]
 800ddf2:	b920      	cbnz	r0, 800ddfe <_svfiprintf_r+0x2e>
 800ddf4:	230c      	movs	r3, #12
 800ddf6:	603b      	str	r3, [r7, #0]
 800ddf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfc:	e0d1      	b.n	800dfa2 <_svfiprintf_r+0x1d2>
 800ddfe:	2340      	movs	r3, #64	; 0x40
 800de00:	616b      	str	r3, [r5, #20]
 800de02:	2300      	movs	r3, #0
 800de04:	9309      	str	r3, [sp, #36]	; 0x24
 800de06:	2320      	movs	r3, #32
 800de08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800de10:	2330      	movs	r3, #48	; 0x30
 800de12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dfbc <_svfiprintf_r+0x1ec>
 800de16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de1a:	f04f 0901 	mov.w	r9, #1
 800de1e:	4623      	mov	r3, r4
 800de20:	469a      	mov	sl, r3
 800de22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de26:	b10a      	cbz	r2, 800de2c <_svfiprintf_r+0x5c>
 800de28:	2a25      	cmp	r2, #37	; 0x25
 800de2a:	d1f9      	bne.n	800de20 <_svfiprintf_r+0x50>
 800de2c:	ebba 0b04 	subs.w	fp, sl, r4
 800de30:	d00b      	beq.n	800de4a <_svfiprintf_r+0x7a>
 800de32:	465b      	mov	r3, fp
 800de34:	4622      	mov	r2, r4
 800de36:	4629      	mov	r1, r5
 800de38:	4638      	mov	r0, r7
 800de3a:	f7ff ff6d 	bl	800dd18 <__ssputs_r>
 800de3e:	3001      	adds	r0, #1
 800de40:	f000 80aa 	beq.w	800df98 <_svfiprintf_r+0x1c8>
 800de44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de46:	445a      	add	r2, fp
 800de48:	9209      	str	r2, [sp, #36]	; 0x24
 800de4a:	f89a 3000 	ldrb.w	r3, [sl]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 80a2 	beq.w	800df98 <_svfiprintf_r+0x1c8>
 800de54:	2300      	movs	r3, #0
 800de56:	f04f 32ff 	mov.w	r2, #4294967295
 800de5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de5e:	f10a 0a01 	add.w	sl, sl, #1
 800de62:	9304      	str	r3, [sp, #16]
 800de64:	9307      	str	r3, [sp, #28]
 800de66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de6a:	931a      	str	r3, [sp, #104]	; 0x68
 800de6c:	4654      	mov	r4, sl
 800de6e:	2205      	movs	r2, #5
 800de70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de74:	4851      	ldr	r0, [pc, #324]	; (800dfbc <_svfiprintf_r+0x1ec>)
 800de76:	f7f2 f9b3 	bl	80001e0 <memchr>
 800de7a:	9a04      	ldr	r2, [sp, #16]
 800de7c:	b9d8      	cbnz	r0, 800deb6 <_svfiprintf_r+0xe6>
 800de7e:	06d0      	lsls	r0, r2, #27
 800de80:	bf44      	itt	mi
 800de82:	2320      	movmi	r3, #32
 800de84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de88:	0711      	lsls	r1, r2, #28
 800de8a:	bf44      	itt	mi
 800de8c:	232b      	movmi	r3, #43	; 0x2b
 800de8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de92:	f89a 3000 	ldrb.w	r3, [sl]
 800de96:	2b2a      	cmp	r3, #42	; 0x2a
 800de98:	d015      	beq.n	800dec6 <_svfiprintf_r+0xf6>
 800de9a:	9a07      	ldr	r2, [sp, #28]
 800de9c:	4654      	mov	r4, sl
 800de9e:	2000      	movs	r0, #0
 800dea0:	f04f 0c0a 	mov.w	ip, #10
 800dea4:	4621      	mov	r1, r4
 800dea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deaa:	3b30      	subs	r3, #48	; 0x30
 800deac:	2b09      	cmp	r3, #9
 800deae:	d94e      	bls.n	800df4e <_svfiprintf_r+0x17e>
 800deb0:	b1b0      	cbz	r0, 800dee0 <_svfiprintf_r+0x110>
 800deb2:	9207      	str	r2, [sp, #28]
 800deb4:	e014      	b.n	800dee0 <_svfiprintf_r+0x110>
 800deb6:	eba0 0308 	sub.w	r3, r0, r8
 800deba:	fa09 f303 	lsl.w	r3, r9, r3
 800debe:	4313      	orrs	r3, r2
 800dec0:	9304      	str	r3, [sp, #16]
 800dec2:	46a2      	mov	sl, r4
 800dec4:	e7d2      	b.n	800de6c <_svfiprintf_r+0x9c>
 800dec6:	9b03      	ldr	r3, [sp, #12]
 800dec8:	1d19      	adds	r1, r3, #4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	9103      	str	r1, [sp, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	bfbb      	ittet	lt
 800ded2:	425b      	neglt	r3, r3
 800ded4:	f042 0202 	orrlt.w	r2, r2, #2
 800ded8:	9307      	strge	r3, [sp, #28]
 800deda:	9307      	strlt	r3, [sp, #28]
 800dedc:	bfb8      	it	lt
 800dede:	9204      	strlt	r2, [sp, #16]
 800dee0:	7823      	ldrb	r3, [r4, #0]
 800dee2:	2b2e      	cmp	r3, #46	; 0x2e
 800dee4:	d10c      	bne.n	800df00 <_svfiprintf_r+0x130>
 800dee6:	7863      	ldrb	r3, [r4, #1]
 800dee8:	2b2a      	cmp	r3, #42	; 0x2a
 800deea:	d135      	bne.n	800df58 <_svfiprintf_r+0x188>
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	1d1a      	adds	r2, r3, #4
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	9203      	str	r2, [sp, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	bfb8      	it	lt
 800def8:	f04f 33ff 	movlt.w	r3, #4294967295
 800defc:	3402      	adds	r4, #2
 800defe:	9305      	str	r3, [sp, #20]
 800df00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dfcc <_svfiprintf_r+0x1fc>
 800df04:	7821      	ldrb	r1, [r4, #0]
 800df06:	2203      	movs	r2, #3
 800df08:	4650      	mov	r0, sl
 800df0a:	f7f2 f969 	bl	80001e0 <memchr>
 800df0e:	b140      	cbz	r0, 800df22 <_svfiprintf_r+0x152>
 800df10:	2340      	movs	r3, #64	; 0x40
 800df12:	eba0 000a 	sub.w	r0, r0, sl
 800df16:	fa03 f000 	lsl.w	r0, r3, r0
 800df1a:	9b04      	ldr	r3, [sp, #16]
 800df1c:	4303      	orrs	r3, r0
 800df1e:	3401      	adds	r4, #1
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df26:	4826      	ldr	r0, [pc, #152]	; (800dfc0 <_svfiprintf_r+0x1f0>)
 800df28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df2c:	2206      	movs	r2, #6
 800df2e:	f7f2 f957 	bl	80001e0 <memchr>
 800df32:	2800      	cmp	r0, #0
 800df34:	d038      	beq.n	800dfa8 <_svfiprintf_r+0x1d8>
 800df36:	4b23      	ldr	r3, [pc, #140]	; (800dfc4 <_svfiprintf_r+0x1f4>)
 800df38:	bb1b      	cbnz	r3, 800df82 <_svfiprintf_r+0x1b2>
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	3307      	adds	r3, #7
 800df3e:	f023 0307 	bic.w	r3, r3, #7
 800df42:	3308      	adds	r3, #8
 800df44:	9303      	str	r3, [sp, #12]
 800df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df48:	4433      	add	r3, r6
 800df4a:	9309      	str	r3, [sp, #36]	; 0x24
 800df4c:	e767      	b.n	800de1e <_svfiprintf_r+0x4e>
 800df4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df52:	460c      	mov	r4, r1
 800df54:	2001      	movs	r0, #1
 800df56:	e7a5      	b.n	800dea4 <_svfiprintf_r+0xd4>
 800df58:	2300      	movs	r3, #0
 800df5a:	3401      	adds	r4, #1
 800df5c:	9305      	str	r3, [sp, #20]
 800df5e:	4619      	mov	r1, r3
 800df60:	f04f 0c0a 	mov.w	ip, #10
 800df64:	4620      	mov	r0, r4
 800df66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df6a:	3a30      	subs	r2, #48	; 0x30
 800df6c:	2a09      	cmp	r2, #9
 800df6e:	d903      	bls.n	800df78 <_svfiprintf_r+0x1a8>
 800df70:	2b00      	cmp	r3, #0
 800df72:	d0c5      	beq.n	800df00 <_svfiprintf_r+0x130>
 800df74:	9105      	str	r1, [sp, #20]
 800df76:	e7c3      	b.n	800df00 <_svfiprintf_r+0x130>
 800df78:	fb0c 2101 	mla	r1, ip, r1, r2
 800df7c:	4604      	mov	r4, r0
 800df7e:	2301      	movs	r3, #1
 800df80:	e7f0      	b.n	800df64 <_svfiprintf_r+0x194>
 800df82:	ab03      	add	r3, sp, #12
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	462a      	mov	r2, r5
 800df88:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <_svfiprintf_r+0x1f8>)
 800df8a:	a904      	add	r1, sp, #16
 800df8c:	4638      	mov	r0, r7
 800df8e:	f7fc f98b 	bl	800a2a8 <_printf_float>
 800df92:	1c42      	adds	r2, r0, #1
 800df94:	4606      	mov	r6, r0
 800df96:	d1d6      	bne.n	800df46 <_svfiprintf_r+0x176>
 800df98:	89ab      	ldrh	r3, [r5, #12]
 800df9a:	065b      	lsls	r3, r3, #25
 800df9c:	f53f af2c 	bmi.w	800ddf8 <_svfiprintf_r+0x28>
 800dfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfa2:	b01d      	add	sp, #116	; 0x74
 800dfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa8:	ab03      	add	r3, sp, #12
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	462a      	mov	r2, r5
 800dfae:	4b06      	ldr	r3, [pc, #24]	; (800dfc8 <_svfiprintf_r+0x1f8>)
 800dfb0:	a904      	add	r1, sp, #16
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	f7fc fc1c 	bl	800a7f0 <_printf_i>
 800dfb8:	e7eb      	b.n	800df92 <_svfiprintf_r+0x1c2>
 800dfba:	bf00      	nop
 800dfbc:	08010a7c 	.word	0x08010a7c
 800dfc0:	08010a86 	.word	0x08010a86
 800dfc4:	0800a2a9 	.word	0x0800a2a9
 800dfc8:	0800dd19 	.word	0x0800dd19
 800dfcc:	08010a82 	.word	0x08010a82

0800dfd0 <_sungetc_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	1c4b      	adds	r3, r1, #1
 800dfd4:	4614      	mov	r4, r2
 800dfd6:	d103      	bne.n	800dfe0 <_sungetc_r+0x10>
 800dfd8:	f04f 35ff 	mov.w	r5, #4294967295
 800dfdc:	4628      	mov	r0, r5
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	8993      	ldrh	r3, [r2, #12]
 800dfe2:	f023 0320 	bic.w	r3, r3, #32
 800dfe6:	8193      	strh	r3, [r2, #12]
 800dfe8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dfea:	6852      	ldr	r2, [r2, #4]
 800dfec:	b2cd      	uxtb	r5, r1
 800dfee:	b18b      	cbz	r3, 800e014 <_sungetc_r+0x44>
 800dff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dff2:	4293      	cmp	r3, r2
 800dff4:	dd08      	ble.n	800e008 <_sungetc_r+0x38>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	1e5a      	subs	r2, r3, #1
 800dffa:	6022      	str	r2, [r4, #0]
 800dffc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e000:	6863      	ldr	r3, [r4, #4]
 800e002:	3301      	adds	r3, #1
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	e7e9      	b.n	800dfdc <_sungetc_r+0xc>
 800e008:	4621      	mov	r1, r4
 800e00a:	f000 fbdd 	bl	800e7c8 <__submore>
 800e00e:	2800      	cmp	r0, #0
 800e010:	d0f1      	beq.n	800dff6 <_sungetc_r+0x26>
 800e012:	e7e1      	b.n	800dfd8 <_sungetc_r+0x8>
 800e014:	6921      	ldr	r1, [r4, #16]
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	b151      	cbz	r1, 800e030 <_sungetc_r+0x60>
 800e01a:	4299      	cmp	r1, r3
 800e01c:	d208      	bcs.n	800e030 <_sungetc_r+0x60>
 800e01e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e022:	42a9      	cmp	r1, r5
 800e024:	d104      	bne.n	800e030 <_sungetc_r+0x60>
 800e026:	3b01      	subs	r3, #1
 800e028:	3201      	adds	r2, #1
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	6062      	str	r2, [r4, #4]
 800e02e:	e7d5      	b.n	800dfdc <_sungetc_r+0xc>
 800e030:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e038:	6363      	str	r3, [r4, #52]	; 0x34
 800e03a:	2303      	movs	r3, #3
 800e03c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e03e:	4623      	mov	r3, r4
 800e040:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	2301      	movs	r3, #1
 800e048:	e7dc      	b.n	800e004 <_sungetc_r+0x34>

0800e04a <__ssrefill_r>:
 800e04a:	b510      	push	{r4, lr}
 800e04c:	460c      	mov	r4, r1
 800e04e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e050:	b169      	cbz	r1, 800e06e <__ssrefill_r+0x24>
 800e052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e056:	4299      	cmp	r1, r3
 800e058:	d001      	beq.n	800e05e <__ssrefill_r+0x14>
 800e05a:	f7ff fd7d 	bl	800db58 <_free_r>
 800e05e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e060:	6063      	str	r3, [r4, #4]
 800e062:	2000      	movs	r0, #0
 800e064:	6360      	str	r0, [r4, #52]	; 0x34
 800e066:	b113      	cbz	r3, 800e06e <__ssrefill_r+0x24>
 800e068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e06a:	6023      	str	r3, [r4, #0]
 800e06c:	bd10      	pop	{r4, pc}
 800e06e:	6923      	ldr	r3, [r4, #16]
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	2300      	movs	r3, #0
 800e074:	6063      	str	r3, [r4, #4]
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	f043 0320 	orr.w	r3, r3, #32
 800e07c:	81a3      	strh	r3, [r4, #12]
 800e07e:	f04f 30ff 	mov.w	r0, #4294967295
 800e082:	e7f3      	b.n	800e06c <__ssrefill_r+0x22>

0800e084 <__ssvfiscanf_r>:
 800e084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	460c      	mov	r4, r1
 800e08a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e08e:	2100      	movs	r1, #0
 800e090:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e094:	49a6      	ldr	r1, [pc, #664]	; (800e330 <__ssvfiscanf_r+0x2ac>)
 800e096:	91a0      	str	r1, [sp, #640]	; 0x280
 800e098:	f10d 0804 	add.w	r8, sp, #4
 800e09c:	49a5      	ldr	r1, [pc, #660]	; (800e334 <__ssvfiscanf_r+0x2b0>)
 800e09e:	4fa6      	ldr	r7, [pc, #664]	; (800e338 <__ssvfiscanf_r+0x2b4>)
 800e0a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e33c <__ssvfiscanf_r+0x2b8>
 800e0a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e0a8:	4606      	mov	r6, r0
 800e0aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	7813      	ldrb	r3, [r2, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 815a 	beq.w	800e36a <__ssvfiscanf_r+0x2e6>
 800e0b6:	5dd9      	ldrb	r1, [r3, r7]
 800e0b8:	f011 0108 	ands.w	r1, r1, #8
 800e0bc:	f102 0501 	add.w	r5, r2, #1
 800e0c0:	d019      	beq.n	800e0f6 <__ssvfiscanf_r+0x72>
 800e0c2:	6863      	ldr	r3, [r4, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	dd0f      	ble.n	800e0e8 <__ssvfiscanf_r+0x64>
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	5cba      	ldrb	r2, [r7, r2]
 800e0ce:	0712      	lsls	r2, r2, #28
 800e0d0:	d401      	bmi.n	800e0d6 <__ssvfiscanf_r+0x52>
 800e0d2:	462a      	mov	r2, r5
 800e0d4:	e7eb      	b.n	800e0ae <__ssvfiscanf_r+0x2a>
 800e0d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e0d8:	3201      	adds	r2, #1
 800e0da:	9245      	str	r2, [sp, #276]	; 0x114
 800e0dc:	6862      	ldr	r2, [r4, #4]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	3a01      	subs	r2, #1
 800e0e2:	6062      	str	r2, [r4, #4]
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	e7ec      	b.n	800e0c2 <__ssvfiscanf_r+0x3e>
 800e0e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e0ea:	4621      	mov	r1, r4
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	4798      	blx	r3
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d0e9      	beq.n	800e0c8 <__ssvfiscanf_r+0x44>
 800e0f4:	e7ed      	b.n	800e0d2 <__ssvfiscanf_r+0x4e>
 800e0f6:	2b25      	cmp	r3, #37	; 0x25
 800e0f8:	d012      	beq.n	800e120 <__ssvfiscanf_r+0x9c>
 800e0fa:	469a      	mov	sl, r3
 800e0fc:	6863      	ldr	r3, [r4, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f340 8091 	ble.w	800e226 <__ssvfiscanf_r+0x1a2>
 800e104:	6822      	ldr	r2, [r4, #0]
 800e106:	7813      	ldrb	r3, [r2, #0]
 800e108:	4553      	cmp	r3, sl
 800e10a:	f040 812e 	bne.w	800e36a <__ssvfiscanf_r+0x2e6>
 800e10e:	6863      	ldr	r3, [r4, #4]
 800e110:	3b01      	subs	r3, #1
 800e112:	6063      	str	r3, [r4, #4]
 800e114:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e116:	3201      	adds	r2, #1
 800e118:	3301      	adds	r3, #1
 800e11a:	6022      	str	r2, [r4, #0]
 800e11c:	9345      	str	r3, [sp, #276]	; 0x114
 800e11e:	e7d8      	b.n	800e0d2 <__ssvfiscanf_r+0x4e>
 800e120:	9141      	str	r1, [sp, #260]	; 0x104
 800e122:	9143      	str	r1, [sp, #268]	; 0x10c
 800e124:	7853      	ldrb	r3, [r2, #1]
 800e126:	2b2a      	cmp	r3, #42	; 0x2a
 800e128:	bf02      	ittt	eq
 800e12a:	2310      	moveq	r3, #16
 800e12c:	1c95      	addeq	r5, r2, #2
 800e12e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e130:	220a      	movs	r2, #10
 800e132:	46aa      	mov	sl, r5
 800e134:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e138:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e13c:	2b09      	cmp	r3, #9
 800e13e:	d91d      	bls.n	800e17c <__ssvfiscanf_r+0xf8>
 800e140:	487e      	ldr	r0, [pc, #504]	; (800e33c <__ssvfiscanf_r+0x2b8>)
 800e142:	2203      	movs	r2, #3
 800e144:	f7f2 f84c 	bl	80001e0 <memchr>
 800e148:	b140      	cbz	r0, 800e15c <__ssvfiscanf_r+0xd8>
 800e14a:	2301      	movs	r3, #1
 800e14c:	eba0 0009 	sub.w	r0, r0, r9
 800e150:	fa03 f000 	lsl.w	r0, r3, r0
 800e154:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e156:	4318      	orrs	r0, r3
 800e158:	9041      	str	r0, [sp, #260]	; 0x104
 800e15a:	4655      	mov	r5, sl
 800e15c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e160:	2b78      	cmp	r3, #120	; 0x78
 800e162:	d806      	bhi.n	800e172 <__ssvfiscanf_r+0xee>
 800e164:	2b57      	cmp	r3, #87	; 0x57
 800e166:	d810      	bhi.n	800e18a <__ssvfiscanf_r+0x106>
 800e168:	2b25      	cmp	r3, #37	; 0x25
 800e16a:	d0c6      	beq.n	800e0fa <__ssvfiscanf_r+0x76>
 800e16c:	d856      	bhi.n	800e21c <__ssvfiscanf_r+0x198>
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d064      	beq.n	800e23c <__ssvfiscanf_r+0x1b8>
 800e172:	2303      	movs	r3, #3
 800e174:	9347      	str	r3, [sp, #284]	; 0x11c
 800e176:	230a      	movs	r3, #10
 800e178:	9342      	str	r3, [sp, #264]	; 0x108
 800e17a:	e071      	b.n	800e260 <__ssvfiscanf_r+0x1dc>
 800e17c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e17e:	fb02 1103 	mla	r1, r2, r3, r1
 800e182:	3930      	subs	r1, #48	; 0x30
 800e184:	9143      	str	r1, [sp, #268]	; 0x10c
 800e186:	4655      	mov	r5, sl
 800e188:	e7d3      	b.n	800e132 <__ssvfiscanf_r+0xae>
 800e18a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e18e:	2a20      	cmp	r2, #32
 800e190:	d8ef      	bhi.n	800e172 <__ssvfiscanf_r+0xee>
 800e192:	a101      	add	r1, pc, #4	; (adr r1, 800e198 <__ssvfiscanf_r+0x114>)
 800e194:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e198:	0800e24b 	.word	0x0800e24b
 800e19c:	0800e173 	.word	0x0800e173
 800e1a0:	0800e173 	.word	0x0800e173
 800e1a4:	0800e2a9 	.word	0x0800e2a9
 800e1a8:	0800e173 	.word	0x0800e173
 800e1ac:	0800e173 	.word	0x0800e173
 800e1b0:	0800e173 	.word	0x0800e173
 800e1b4:	0800e173 	.word	0x0800e173
 800e1b8:	0800e173 	.word	0x0800e173
 800e1bc:	0800e173 	.word	0x0800e173
 800e1c0:	0800e173 	.word	0x0800e173
 800e1c4:	0800e2bf 	.word	0x0800e2bf
 800e1c8:	0800e295 	.word	0x0800e295
 800e1cc:	0800e223 	.word	0x0800e223
 800e1d0:	0800e223 	.word	0x0800e223
 800e1d4:	0800e223 	.word	0x0800e223
 800e1d8:	0800e173 	.word	0x0800e173
 800e1dc:	0800e299 	.word	0x0800e299
 800e1e0:	0800e173 	.word	0x0800e173
 800e1e4:	0800e173 	.word	0x0800e173
 800e1e8:	0800e173 	.word	0x0800e173
 800e1ec:	0800e173 	.word	0x0800e173
 800e1f0:	0800e2cf 	.word	0x0800e2cf
 800e1f4:	0800e2a1 	.word	0x0800e2a1
 800e1f8:	0800e243 	.word	0x0800e243
 800e1fc:	0800e173 	.word	0x0800e173
 800e200:	0800e173 	.word	0x0800e173
 800e204:	0800e2cb 	.word	0x0800e2cb
 800e208:	0800e173 	.word	0x0800e173
 800e20c:	0800e295 	.word	0x0800e295
 800e210:	0800e173 	.word	0x0800e173
 800e214:	0800e173 	.word	0x0800e173
 800e218:	0800e24b 	.word	0x0800e24b
 800e21c:	3b45      	subs	r3, #69	; 0x45
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d8a7      	bhi.n	800e172 <__ssvfiscanf_r+0xee>
 800e222:	2305      	movs	r3, #5
 800e224:	e01b      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e226:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e228:	4621      	mov	r1, r4
 800e22a:	4630      	mov	r0, r6
 800e22c:	4798      	blx	r3
 800e22e:	2800      	cmp	r0, #0
 800e230:	f43f af68 	beq.w	800e104 <__ssvfiscanf_r+0x80>
 800e234:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e236:	2800      	cmp	r0, #0
 800e238:	f040 808d 	bne.w	800e356 <__ssvfiscanf_r+0x2d2>
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295
 800e240:	e08f      	b.n	800e362 <__ssvfiscanf_r+0x2de>
 800e242:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e244:	f042 0220 	orr.w	r2, r2, #32
 800e248:	9241      	str	r2, [sp, #260]	; 0x104
 800e24a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e250:	9241      	str	r2, [sp, #260]	; 0x104
 800e252:	2210      	movs	r2, #16
 800e254:	2b6f      	cmp	r3, #111	; 0x6f
 800e256:	9242      	str	r2, [sp, #264]	; 0x108
 800e258:	bf34      	ite	cc
 800e25a:	2303      	movcc	r3, #3
 800e25c:	2304      	movcs	r3, #4
 800e25e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e260:	6863      	ldr	r3, [r4, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	dd42      	ble.n	800e2ec <__ssvfiscanf_r+0x268>
 800e266:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e268:	0659      	lsls	r1, r3, #25
 800e26a:	d404      	bmi.n	800e276 <__ssvfiscanf_r+0x1f2>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	781a      	ldrb	r2, [r3, #0]
 800e270:	5cba      	ldrb	r2, [r7, r2]
 800e272:	0712      	lsls	r2, r2, #28
 800e274:	d441      	bmi.n	800e2fa <__ssvfiscanf_r+0x276>
 800e276:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e278:	2b02      	cmp	r3, #2
 800e27a:	dc50      	bgt.n	800e31e <__ssvfiscanf_r+0x29a>
 800e27c:	466b      	mov	r3, sp
 800e27e:	4622      	mov	r2, r4
 800e280:	a941      	add	r1, sp, #260	; 0x104
 800e282:	4630      	mov	r0, r6
 800e284:	f000 f876 	bl	800e374 <_scanf_chars>
 800e288:	2801      	cmp	r0, #1
 800e28a:	d06e      	beq.n	800e36a <__ssvfiscanf_r+0x2e6>
 800e28c:	2802      	cmp	r0, #2
 800e28e:	f47f af20 	bne.w	800e0d2 <__ssvfiscanf_r+0x4e>
 800e292:	e7cf      	b.n	800e234 <__ssvfiscanf_r+0x1b0>
 800e294:	220a      	movs	r2, #10
 800e296:	e7dd      	b.n	800e254 <__ssvfiscanf_r+0x1d0>
 800e298:	2300      	movs	r3, #0
 800e29a:	9342      	str	r3, [sp, #264]	; 0x108
 800e29c:	2303      	movs	r3, #3
 800e29e:	e7de      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e2a0:	2308      	movs	r3, #8
 800e2a2:	9342      	str	r3, [sp, #264]	; 0x108
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	e7da      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	f000 f9e0 	bl	800e670 <__sccl>
 800e2b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2b6:	9341      	str	r3, [sp, #260]	; 0x104
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e7cf      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e2be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c4:	9341      	str	r3, [sp, #260]	; 0x104
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e7c9      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e7c7      	b.n	800e25e <__ssvfiscanf_r+0x1da>
 800e2ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e2d0:	06c3      	lsls	r3, r0, #27
 800e2d2:	f53f aefe 	bmi.w	800e0d2 <__ssvfiscanf_r+0x4e>
 800e2d6:	9b00      	ldr	r3, [sp, #0]
 800e2d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e2da:	1d19      	adds	r1, r3, #4
 800e2dc:	9100      	str	r1, [sp, #0]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f010 0f01 	tst.w	r0, #1
 800e2e4:	bf14      	ite	ne
 800e2e6:	801a      	strhne	r2, [r3, #0]
 800e2e8:	601a      	streq	r2, [r3, #0]
 800e2ea:	e6f2      	b.n	800e0d2 <__ssvfiscanf_r+0x4e>
 800e2ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	4798      	blx	r3
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d0b6      	beq.n	800e266 <__ssvfiscanf_r+0x1e2>
 800e2f8:	e79c      	b.n	800e234 <__ssvfiscanf_r+0x1b0>
 800e2fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	9245      	str	r2, [sp, #276]	; 0x114
 800e300:	6862      	ldr	r2, [r4, #4]
 800e302:	3a01      	subs	r2, #1
 800e304:	2a00      	cmp	r2, #0
 800e306:	6062      	str	r2, [r4, #4]
 800e308:	dd02      	ble.n	800e310 <__ssvfiscanf_r+0x28c>
 800e30a:	3301      	adds	r3, #1
 800e30c:	6023      	str	r3, [r4, #0]
 800e30e:	e7ad      	b.n	800e26c <__ssvfiscanf_r+0x1e8>
 800e310:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e312:	4621      	mov	r1, r4
 800e314:	4630      	mov	r0, r6
 800e316:	4798      	blx	r3
 800e318:	2800      	cmp	r0, #0
 800e31a:	d0a7      	beq.n	800e26c <__ssvfiscanf_r+0x1e8>
 800e31c:	e78a      	b.n	800e234 <__ssvfiscanf_r+0x1b0>
 800e31e:	2b04      	cmp	r3, #4
 800e320:	dc0e      	bgt.n	800e340 <__ssvfiscanf_r+0x2bc>
 800e322:	466b      	mov	r3, sp
 800e324:	4622      	mov	r2, r4
 800e326:	a941      	add	r1, sp, #260	; 0x104
 800e328:	4630      	mov	r0, r6
 800e32a:	f000 f87d 	bl	800e428 <_scanf_i>
 800e32e:	e7ab      	b.n	800e288 <__ssvfiscanf_r+0x204>
 800e330:	0800dfd1 	.word	0x0800dfd1
 800e334:	0800e04b 	.word	0x0800e04b
 800e338:	08010719 	.word	0x08010719
 800e33c:	08010a82 	.word	0x08010a82
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <__ssvfiscanf_r+0x2ec>)
 800e342:	2b00      	cmp	r3, #0
 800e344:	f43f aec5 	beq.w	800e0d2 <__ssvfiscanf_r+0x4e>
 800e348:	466b      	mov	r3, sp
 800e34a:	4622      	mov	r2, r4
 800e34c:	a941      	add	r1, sp, #260	; 0x104
 800e34e:	4630      	mov	r0, r6
 800e350:	f7fc fb74 	bl	800aa3c <_scanf_float>
 800e354:	e798      	b.n	800e288 <__ssvfiscanf_r+0x204>
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e35c:	bf18      	it	ne
 800e35e:	f04f 30ff 	movne.w	r0, #4294967295
 800e362:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e36a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e36c:	e7f9      	b.n	800e362 <__ssvfiscanf_r+0x2de>
 800e36e:	bf00      	nop
 800e370:	0800aa3d 	.word	0x0800aa3d

0800e374 <_scanf_chars>:
 800e374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e378:	4615      	mov	r5, r2
 800e37a:	688a      	ldr	r2, [r1, #8]
 800e37c:	4680      	mov	r8, r0
 800e37e:	460c      	mov	r4, r1
 800e380:	b932      	cbnz	r2, 800e390 <_scanf_chars+0x1c>
 800e382:	698a      	ldr	r2, [r1, #24]
 800e384:	2a00      	cmp	r2, #0
 800e386:	bf0c      	ite	eq
 800e388:	2201      	moveq	r2, #1
 800e38a:	f04f 32ff 	movne.w	r2, #4294967295
 800e38e:	608a      	str	r2, [r1, #8]
 800e390:	6822      	ldr	r2, [r4, #0]
 800e392:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e424 <_scanf_chars+0xb0>
 800e396:	06d1      	lsls	r1, r2, #27
 800e398:	bf5f      	itttt	pl
 800e39a:	681a      	ldrpl	r2, [r3, #0]
 800e39c:	1d11      	addpl	r1, r2, #4
 800e39e:	6019      	strpl	r1, [r3, #0]
 800e3a0:	6816      	ldrpl	r6, [r2, #0]
 800e3a2:	2700      	movs	r7, #0
 800e3a4:	69a0      	ldr	r0, [r4, #24]
 800e3a6:	b188      	cbz	r0, 800e3cc <_scanf_chars+0x58>
 800e3a8:	2801      	cmp	r0, #1
 800e3aa:	d107      	bne.n	800e3bc <_scanf_chars+0x48>
 800e3ac:	682a      	ldr	r2, [r5, #0]
 800e3ae:	7811      	ldrb	r1, [r2, #0]
 800e3b0:	6962      	ldr	r2, [r4, #20]
 800e3b2:	5c52      	ldrb	r2, [r2, r1]
 800e3b4:	b952      	cbnz	r2, 800e3cc <_scanf_chars+0x58>
 800e3b6:	2f00      	cmp	r7, #0
 800e3b8:	d031      	beq.n	800e41e <_scanf_chars+0xaa>
 800e3ba:	e022      	b.n	800e402 <_scanf_chars+0x8e>
 800e3bc:	2802      	cmp	r0, #2
 800e3be:	d120      	bne.n	800e402 <_scanf_chars+0x8e>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e3c8:	071b      	lsls	r3, r3, #28
 800e3ca:	d41a      	bmi.n	800e402 <_scanf_chars+0x8e>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	06da      	lsls	r2, r3, #27
 800e3d0:	bf5e      	ittt	pl
 800e3d2:	682b      	ldrpl	r3, [r5, #0]
 800e3d4:	781b      	ldrbpl	r3, [r3, #0]
 800e3d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e3da:	682a      	ldr	r2, [r5, #0]
 800e3dc:	686b      	ldr	r3, [r5, #4]
 800e3de:	3201      	adds	r2, #1
 800e3e0:	602a      	str	r2, [r5, #0]
 800e3e2:	68a2      	ldr	r2, [r4, #8]
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	3a01      	subs	r2, #1
 800e3e8:	606b      	str	r3, [r5, #4]
 800e3ea:	3701      	adds	r7, #1
 800e3ec:	60a2      	str	r2, [r4, #8]
 800e3ee:	b142      	cbz	r2, 800e402 <_scanf_chars+0x8e>
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	dcd7      	bgt.n	800e3a4 <_scanf_chars+0x30>
 800e3f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4640      	mov	r0, r8
 800e3fc:	4798      	blx	r3
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d0d0      	beq.n	800e3a4 <_scanf_chars+0x30>
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	f013 0310 	ands.w	r3, r3, #16
 800e408:	d105      	bne.n	800e416 <_scanf_chars+0xa2>
 800e40a:	68e2      	ldr	r2, [r4, #12]
 800e40c:	3201      	adds	r2, #1
 800e40e:	60e2      	str	r2, [r4, #12]
 800e410:	69a2      	ldr	r2, [r4, #24]
 800e412:	b102      	cbz	r2, 800e416 <_scanf_chars+0xa2>
 800e414:	7033      	strb	r3, [r6, #0]
 800e416:	6923      	ldr	r3, [r4, #16]
 800e418:	443b      	add	r3, r7
 800e41a:	6123      	str	r3, [r4, #16]
 800e41c:	2000      	movs	r0, #0
 800e41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e422:	bf00      	nop
 800e424:	08010719 	.word	0x08010719

0800e428 <_scanf_i>:
 800e428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	4698      	mov	r8, r3
 800e42e:	4b76      	ldr	r3, [pc, #472]	; (800e608 <_scanf_i+0x1e0>)
 800e430:	460c      	mov	r4, r1
 800e432:	4682      	mov	sl, r0
 800e434:	4616      	mov	r6, r2
 800e436:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e43a:	b087      	sub	sp, #28
 800e43c:	ab03      	add	r3, sp, #12
 800e43e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e442:	4b72      	ldr	r3, [pc, #456]	; (800e60c <_scanf_i+0x1e4>)
 800e444:	69a1      	ldr	r1, [r4, #24]
 800e446:	4a72      	ldr	r2, [pc, #456]	; (800e610 <_scanf_i+0x1e8>)
 800e448:	2903      	cmp	r1, #3
 800e44a:	bf18      	it	ne
 800e44c:	461a      	movne	r2, r3
 800e44e:	68a3      	ldr	r3, [r4, #8]
 800e450:	9201      	str	r2, [sp, #4]
 800e452:	1e5a      	subs	r2, r3, #1
 800e454:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e458:	bf88      	it	hi
 800e45a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e45e:	4627      	mov	r7, r4
 800e460:	bf82      	ittt	hi
 800e462:	eb03 0905 	addhi.w	r9, r3, r5
 800e466:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e46a:	60a3      	strhi	r3, [r4, #8]
 800e46c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e470:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e474:	bf98      	it	ls
 800e476:	f04f 0900 	movls.w	r9, #0
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	463d      	mov	r5, r7
 800e47e:	f04f 0b00 	mov.w	fp, #0
 800e482:	6831      	ldr	r1, [r6, #0]
 800e484:	ab03      	add	r3, sp, #12
 800e486:	7809      	ldrb	r1, [r1, #0]
 800e488:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e48c:	2202      	movs	r2, #2
 800e48e:	f7f1 fea7 	bl	80001e0 <memchr>
 800e492:	b328      	cbz	r0, 800e4e0 <_scanf_i+0xb8>
 800e494:	f1bb 0f01 	cmp.w	fp, #1
 800e498:	d159      	bne.n	800e54e <_scanf_i+0x126>
 800e49a:	6862      	ldr	r2, [r4, #4]
 800e49c:	b92a      	cbnz	r2, 800e4aa <_scanf_i+0x82>
 800e49e:	6822      	ldr	r2, [r4, #0]
 800e4a0:	2308      	movs	r3, #8
 800e4a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e4a6:	6063      	str	r3, [r4, #4]
 800e4a8:	6022      	str	r2, [r4, #0]
 800e4aa:	6822      	ldr	r2, [r4, #0]
 800e4ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e4b0:	6022      	str	r2, [r4, #0]
 800e4b2:	68a2      	ldr	r2, [r4, #8]
 800e4b4:	1e51      	subs	r1, r2, #1
 800e4b6:	60a1      	str	r1, [r4, #8]
 800e4b8:	b192      	cbz	r2, 800e4e0 <_scanf_i+0xb8>
 800e4ba:	6832      	ldr	r2, [r6, #0]
 800e4bc:	1c51      	adds	r1, r2, #1
 800e4be:	6031      	str	r1, [r6, #0]
 800e4c0:	7812      	ldrb	r2, [r2, #0]
 800e4c2:	f805 2b01 	strb.w	r2, [r5], #1
 800e4c6:	6872      	ldr	r2, [r6, #4]
 800e4c8:	3a01      	subs	r2, #1
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	6072      	str	r2, [r6, #4]
 800e4ce:	dc07      	bgt.n	800e4e0 <_scanf_i+0xb8>
 800e4d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4650      	mov	r0, sl
 800e4d8:	4790      	blx	r2
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	f040 8085 	bne.w	800e5ea <_scanf_i+0x1c2>
 800e4e0:	f10b 0b01 	add.w	fp, fp, #1
 800e4e4:	f1bb 0f03 	cmp.w	fp, #3
 800e4e8:	d1cb      	bne.n	800e482 <_scanf_i+0x5a>
 800e4ea:	6863      	ldr	r3, [r4, #4]
 800e4ec:	b90b      	cbnz	r3, 800e4f2 <_scanf_i+0xca>
 800e4ee:	230a      	movs	r3, #10
 800e4f0:	6063      	str	r3, [r4, #4]
 800e4f2:	6863      	ldr	r3, [r4, #4]
 800e4f4:	4947      	ldr	r1, [pc, #284]	; (800e614 <_scanf_i+0x1ec>)
 800e4f6:	6960      	ldr	r0, [r4, #20]
 800e4f8:	1ac9      	subs	r1, r1, r3
 800e4fa:	f000 f8b9 	bl	800e670 <__sccl>
 800e4fe:	f04f 0b00 	mov.w	fp, #0
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	6822      	ldr	r2, [r4, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d03d      	beq.n	800e586 <_scanf_i+0x15e>
 800e50a:	6831      	ldr	r1, [r6, #0]
 800e50c:	6960      	ldr	r0, [r4, #20]
 800e50e:	f891 c000 	ldrb.w	ip, [r1]
 800e512:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e516:	2800      	cmp	r0, #0
 800e518:	d035      	beq.n	800e586 <_scanf_i+0x15e>
 800e51a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e51e:	d124      	bne.n	800e56a <_scanf_i+0x142>
 800e520:	0510      	lsls	r0, r2, #20
 800e522:	d522      	bpl.n	800e56a <_scanf_i+0x142>
 800e524:	f10b 0b01 	add.w	fp, fp, #1
 800e528:	f1b9 0f00 	cmp.w	r9, #0
 800e52c:	d003      	beq.n	800e536 <_scanf_i+0x10e>
 800e52e:	3301      	adds	r3, #1
 800e530:	f109 39ff 	add.w	r9, r9, #4294967295
 800e534:	60a3      	str	r3, [r4, #8]
 800e536:	6873      	ldr	r3, [r6, #4]
 800e538:	3b01      	subs	r3, #1
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	6073      	str	r3, [r6, #4]
 800e53e:	dd1b      	ble.n	800e578 <_scanf_i+0x150>
 800e540:	6833      	ldr	r3, [r6, #0]
 800e542:	3301      	adds	r3, #1
 800e544:	6033      	str	r3, [r6, #0]
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	3b01      	subs	r3, #1
 800e54a:	60a3      	str	r3, [r4, #8]
 800e54c:	e7d9      	b.n	800e502 <_scanf_i+0xda>
 800e54e:	f1bb 0f02 	cmp.w	fp, #2
 800e552:	d1ae      	bne.n	800e4b2 <_scanf_i+0x8a>
 800e554:	6822      	ldr	r2, [r4, #0]
 800e556:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e55a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e55e:	d1bf      	bne.n	800e4e0 <_scanf_i+0xb8>
 800e560:	2310      	movs	r3, #16
 800e562:	6063      	str	r3, [r4, #4]
 800e564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e568:	e7a2      	b.n	800e4b0 <_scanf_i+0x88>
 800e56a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e56e:	6022      	str	r2, [r4, #0]
 800e570:	780b      	ldrb	r3, [r1, #0]
 800e572:	f805 3b01 	strb.w	r3, [r5], #1
 800e576:	e7de      	b.n	800e536 <_scanf_i+0x10e>
 800e578:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e57c:	4631      	mov	r1, r6
 800e57e:	4650      	mov	r0, sl
 800e580:	4798      	blx	r3
 800e582:	2800      	cmp	r0, #0
 800e584:	d0df      	beq.n	800e546 <_scanf_i+0x11e>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	05db      	lsls	r3, r3, #23
 800e58a:	d50d      	bpl.n	800e5a8 <_scanf_i+0x180>
 800e58c:	42bd      	cmp	r5, r7
 800e58e:	d909      	bls.n	800e5a4 <_scanf_i+0x17c>
 800e590:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e594:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e598:	4632      	mov	r2, r6
 800e59a:	4650      	mov	r0, sl
 800e59c:	4798      	blx	r3
 800e59e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e5a2:	464d      	mov	r5, r9
 800e5a4:	42bd      	cmp	r5, r7
 800e5a6:	d02d      	beq.n	800e604 <_scanf_i+0x1dc>
 800e5a8:	6822      	ldr	r2, [r4, #0]
 800e5aa:	f012 0210 	ands.w	r2, r2, #16
 800e5ae:	d113      	bne.n	800e5d8 <_scanf_i+0x1b0>
 800e5b0:	702a      	strb	r2, [r5, #0]
 800e5b2:	6863      	ldr	r3, [r4, #4]
 800e5b4:	9e01      	ldr	r6, [sp, #4]
 800e5b6:	4639      	mov	r1, r7
 800e5b8:	4650      	mov	r0, sl
 800e5ba:	47b0      	blx	r6
 800e5bc:	6821      	ldr	r1, [r4, #0]
 800e5be:	f8d8 3000 	ldr.w	r3, [r8]
 800e5c2:	f011 0f20 	tst.w	r1, #32
 800e5c6:	d013      	beq.n	800e5f0 <_scanf_i+0x1c8>
 800e5c8:	1d1a      	adds	r2, r3, #4
 800e5ca:	f8c8 2000 	str.w	r2, [r8]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	6018      	str	r0, [r3, #0]
 800e5d2:	68e3      	ldr	r3, [r4, #12]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	60e3      	str	r3, [r4, #12]
 800e5d8:	1bed      	subs	r5, r5, r7
 800e5da:	44ab      	add	fp, r5
 800e5dc:	6925      	ldr	r5, [r4, #16]
 800e5de:	445d      	add	r5, fp
 800e5e0:	6125      	str	r5, [r4, #16]
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	b007      	add	sp, #28
 800e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ea:	f04f 0b00 	mov.w	fp, #0
 800e5ee:	e7ca      	b.n	800e586 <_scanf_i+0x15e>
 800e5f0:	1d1a      	adds	r2, r3, #4
 800e5f2:	f8c8 2000 	str.w	r2, [r8]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f011 0f01 	tst.w	r1, #1
 800e5fc:	bf14      	ite	ne
 800e5fe:	8018      	strhne	r0, [r3, #0]
 800e600:	6018      	streq	r0, [r3, #0]
 800e602:	e7e6      	b.n	800e5d2 <_scanf_i+0x1aa>
 800e604:	2001      	movs	r0, #1
 800e606:	e7ed      	b.n	800e5e4 <_scanf_i+0x1bc>
 800e608:	08010644 	.word	0x08010644
 800e60c:	0800e7c5 	.word	0x0800e7c5
 800e610:	0800bd0d 	.word	0x0800bd0d
 800e614:	08010aa6 	.word	0x08010aa6

0800e618 <_read_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4d07      	ldr	r5, [pc, #28]	; (800e638 <_read_r+0x20>)
 800e61c:	4604      	mov	r4, r0
 800e61e:	4608      	mov	r0, r1
 800e620:	4611      	mov	r1, r2
 800e622:	2200      	movs	r2, #0
 800e624:	602a      	str	r2, [r5, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	f7f4 ff72 	bl	8003510 <_read>
 800e62c:	1c43      	adds	r3, r0, #1
 800e62e:	d102      	bne.n	800e636 <_read_r+0x1e>
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	b103      	cbz	r3, 800e636 <_read_r+0x1e>
 800e634:	6023      	str	r3, [r4, #0]
 800e636:	bd38      	pop	{r3, r4, r5, pc}
 800e638:	200009e0 	.word	0x200009e0
 800e63c:	00000000 	.word	0x00000000

0800e640 <nan>:
 800e640:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e648 <nan+0x8>
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	00000000 	.word	0x00000000
 800e64c:	7ff80000 	.word	0x7ff80000

0800e650 <_sbrk_r>:
 800e650:	b538      	push	{r3, r4, r5, lr}
 800e652:	4d06      	ldr	r5, [pc, #24]	; (800e66c <_sbrk_r+0x1c>)
 800e654:	2300      	movs	r3, #0
 800e656:	4604      	mov	r4, r0
 800e658:	4608      	mov	r0, r1
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	f7f4 ffc6 	bl	80035ec <_sbrk>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d102      	bne.n	800e66a <_sbrk_r+0x1a>
 800e664:	682b      	ldr	r3, [r5, #0]
 800e666:	b103      	cbz	r3, 800e66a <_sbrk_r+0x1a>
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	bd38      	pop	{r3, r4, r5, pc}
 800e66c:	200009e0 	.word	0x200009e0

0800e670 <__sccl>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	780b      	ldrb	r3, [r1, #0]
 800e674:	4604      	mov	r4, r0
 800e676:	2b5e      	cmp	r3, #94	; 0x5e
 800e678:	bf0b      	itete	eq
 800e67a:	784b      	ldrbeq	r3, [r1, #1]
 800e67c:	1c48      	addne	r0, r1, #1
 800e67e:	1c88      	addeq	r0, r1, #2
 800e680:	2200      	movne	r2, #0
 800e682:	bf08      	it	eq
 800e684:	2201      	moveq	r2, #1
 800e686:	1e61      	subs	r1, r4, #1
 800e688:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e68c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e690:	42a9      	cmp	r1, r5
 800e692:	d1fb      	bne.n	800e68c <__sccl+0x1c>
 800e694:	b90b      	cbnz	r3, 800e69a <__sccl+0x2a>
 800e696:	3801      	subs	r0, #1
 800e698:	bd70      	pop	{r4, r5, r6, pc}
 800e69a:	f082 0201 	eor.w	r2, r2, #1
 800e69e:	54e2      	strb	r2, [r4, r3]
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e6a8:	292d      	cmp	r1, #45	; 0x2d
 800e6aa:	d006      	beq.n	800e6ba <__sccl+0x4a>
 800e6ac:	295d      	cmp	r1, #93	; 0x5d
 800e6ae:	d0f3      	beq.n	800e698 <__sccl+0x28>
 800e6b0:	b909      	cbnz	r1, 800e6b6 <__sccl+0x46>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	e7f0      	b.n	800e698 <__sccl+0x28>
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	e7f1      	b.n	800e69e <__sccl+0x2e>
 800e6ba:	786e      	ldrb	r6, [r5, #1]
 800e6bc:	2e5d      	cmp	r6, #93	; 0x5d
 800e6be:	d0fa      	beq.n	800e6b6 <__sccl+0x46>
 800e6c0:	42b3      	cmp	r3, r6
 800e6c2:	dcf8      	bgt.n	800e6b6 <__sccl+0x46>
 800e6c4:	3502      	adds	r5, #2
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	3101      	adds	r1, #1
 800e6ca:	428e      	cmp	r6, r1
 800e6cc:	5462      	strb	r2, [r4, r1]
 800e6ce:	dcfb      	bgt.n	800e6c8 <__sccl+0x58>
 800e6d0:	1af1      	subs	r1, r6, r3
 800e6d2:	3901      	subs	r1, #1
 800e6d4:	1c58      	adds	r0, r3, #1
 800e6d6:	42b3      	cmp	r3, r6
 800e6d8:	bfa8      	it	ge
 800e6da:	2100      	movge	r1, #0
 800e6dc:	1843      	adds	r3, r0, r1
 800e6de:	e7e0      	b.n	800e6a2 <__sccl+0x32>

0800e6e0 <_strtoul_l.constprop.0>:
 800e6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6e4:	4f36      	ldr	r7, [pc, #216]	; (800e7c0 <_strtoul_l.constprop.0+0xe0>)
 800e6e6:	4686      	mov	lr, r0
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6f0:	5de6      	ldrb	r6, [r4, r7]
 800e6f2:	f016 0608 	ands.w	r6, r6, #8
 800e6f6:	d1f8      	bne.n	800e6ea <_strtoul_l.constprop.0+0xa>
 800e6f8:	2c2d      	cmp	r4, #45	; 0x2d
 800e6fa:	d12f      	bne.n	800e75c <_strtoul_l.constprop.0+0x7c>
 800e6fc:	782c      	ldrb	r4, [r5, #0]
 800e6fe:	2601      	movs	r6, #1
 800e700:	1c85      	adds	r5, r0, #2
 800e702:	2b00      	cmp	r3, #0
 800e704:	d057      	beq.n	800e7b6 <_strtoul_l.constprop.0+0xd6>
 800e706:	2b10      	cmp	r3, #16
 800e708:	d109      	bne.n	800e71e <_strtoul_l.constprop.0+0x3e>
 800e70a:	2c30      	cmp	r4, #48	; 0x30
 800e70c:	d107      	bne.n	800e71e <_strtoul_l.constprop.0+0x3e>
 800e70e:	7828      	ldrb	r0, [r5, #0]
 800e710:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e714:	2858      	cmp	r0, #88	; 0x58
 800e716:	d149      	bne.n	800e7ac <_strtoul_l.constprop.0+0xcc>
 800e718:	786c      	ldrb	r4, [r5, #1]
 800e71a:	2310      	movs	r3, #16
 800e71c:	3502      	adds	r5, #2
 800e71e:	f04f 38ff 	mov.w	r8, #4294967295
 800e722:	2700      	movs	r7, #0
 800e724:	fbb8 f8f3 	udiv	r8, r8, r3
 800e728:	fb03 f908 	mul.w	r9, r3, r8
 800e72c:	ea6f 0909 	mvn.w	r9, r9
 800e730:	4638      	mov	r0, r7
 800e732:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e736:	f1bc 0f09 	cmp.w	ip, #9
 800e73a:	d814      	bhi.n	800e766 <_strtoul_l.constprop.0+0x86>
 800e73c:	4664      	mov	r4, ip
 800e73e:	42a3      	cmp	r3, r4
 800e740:	dd22      	ble.n	800e788 <_strtoul_l.constprop.0+0xa8>
 800e742:	2f00      	cmp	r7, #0
 800e744:	db1d      	blt.n	800e782 <_strtoul_l.constprop.0+0xa2>
 800e746:	4580      	cmp	r8, r0
 800e748:	d31b      	bcc.n	800e782 <_strtoul_l.constprop.0+0xa2>
 800e74a:	d101      	bne.n	800e750 <_strtoul_l.constprop.0+0x70>
 800e74c:	45a1      	cmp	r9, r4
 800e74e:	db18      	blt.n	800e782 <_strtoul_l.constprop.0+0xa2>
 800e750:	fb00 4003 	mla	r0, r0, r3, r4
 800e754:	2701      	movs	r7, #1
 800e756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e75a:	e7ea      	b.n	800e732 <_strtoul_l.constprop.0+0x52>
 800e75c:	2c2b      	cmp	r4, #43	; 0x2b
 800e75e:	bf04      	itt	eq
 800e760:	782c      	ldrbeq	r4, [r5, #0]
 800e762:	1c85      	addeq	r5, r0, #2
 800e764:	e7cd      	b.n	800e702 <_strtoul_l.constprop.0+0x22>
 800e766:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e76a:	f1bc 0f19 	cmp.w	ip, #25
 800e76e:	d801      	bhi.n	800e774 <_strtoul_l.constprop.0+0x94>
 800e770:	3c37      	subs	r4, #55	; 0x37
 800e772:	e7e4      	b.n	800e73e <_strtoul_l.constprop.0+0x5e>
 800e774:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e778:	f1bc 0f19 	cmp.w	ip, #25
 800e77c:	d804      	bhi.n	800e788 <_strtoul_l.constprop.0+0xa8>
 800e77e:	3c57      	subs	r4, #87	; 0x57
 800e780:	e7dd      	b.n	800e73e <_strtoul_l.constprop.0+0x5e>
 800e782:	f04f 37ff 	mov.w	r7, #4294967295
 800e786:	e7e6      	b.n	800e756 <_strtoul_l.constprop.0+0x76>
 800e788:	2f00      	cmp	r7, #0
 800e78a:	da07      	bge.n	800e79c <_strtoul_l.constprop.0+0xbc>
 800e78c:	2322      	movs	r3, #34	; 0x22
 800e78e:	f8ce 3000 	str.w	r3, [lr]
 800e792:	f04f 30ff 	mov.w	r0, #4294967295
 800e796:	b932      	cbnz	r2, 800e7a6 <_strtoul_l.constprop.0+0xc6>
 800e798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e79c:	b106      	cbz	r6, 800e7a0 <_strtoul_l.constprop.0+0xc0>
 800e79e:	4240      	negs	r0, r0
 800e7a0:	2a00      	cmp	r2, #0
 800e7a2:	d0f9      	beq.n	800e798 <_strtoul_l.constprop.0+0xb8>
 800e7a4:	b107      	cbz	r7, 800e7a8 <_strtoul_l.constprop.0+0xc8>
 800e7a6:	1e69      	subs	r1, r5, #1
 800e7a8:	6011      	str	r1, [r2, #0]
 800e7aa:	e7f5      	b.n	800e798 <_strtoul_l.constprop.0+0xb8>
 800e7ac:	2430      	movs	r4, #48	; 0x30
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1b5      	bne.n	800e71e <_strtoul_l.constprop.0+0x3e>
 800e7b2:	2308      	movs	r3, #8
 800e7b4:	e7b3      	b.n	800e71e <_strtoul_l.constprop.0+0x3e>
 800e7b6:	2c30      	cmp	r4, #48	; 0x30
 800e7b8:	d0a9      	beq.n	800e70e <_strtoul_l.constprop.0+0x2e>
 800e7ba:	230a      	movs	r3, #10
 800e7bc:	e7af      	b.n	800e71e <_strtoul_l.constprop.0+0x3e>
 800e7be:	bf00      	nop
 800e7c0:	08010719 	.word	0x08010719

0800e7c4 <_strtoul_r>:
 800e7c4:	f7ff bf8c 	b.w	800e6e0 <_strtoul_l.constprop.0>

0800e7c8 <__submore>:
 800e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	460c      	mov	r4, r1
 800e7ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d4:	4299      	cmp	r1, r3
 800e7d6:	d11d      	bne.n	800e814 <__submore+0x4c>
 800e7d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e7dc:	f7ff fa28 	bl	800dc30 <_malloc_r>
 800e7e0:	b918      	cbnz	r0, 800e7ea <__submore+0x22>
 800e7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ee:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800e7f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e7fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e7fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e806:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e80a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e80e:	6020      	str	r0, [r4, #0]
 800e810:	2000      	movs	r0, #0
 800e812:	e7e8      	b.n	800e7e6 <__submore+0x1e>
 800e814:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e816:	0077      	lsls	r7, r6, #1
 800e818:	463a      	mov	r2, r7
 800e81a:	f000 fa2d 	bl	800ec78 <_realloc_r>
 800e81e:	4605      	mov	r5, r0
 800e820:	2800      	cmp	r0, #0
 800e822:	d0de      	beq.n	800e7e2 <__submore+0x1a>
 800e824:	eb00 0806 	add.w	r8, r0, r6
 800e828:	4601      	mov	r1, r0
 800e82a:	4632      	mov	r2, r6
 800e82c:	4640      	mov	r0, r8
 800e82e:	f7fe fcad 	bl	800d18c <memcpy>
 800e832:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e836:	f8c4 8000 	str.w	r8, [r4]
 800e83a:	e7e9      	b.n	800e810 <__submore+0x48>

0800e83c <__ascii_wctomb>:
 800e83c:	b149      	cbz	r1, 800e852 <__ascii_wctomb+0x16>
 800e83e:	2aff      	cmp	r2, #255	; 0xff
 800e840:	bf85      	ittet	hi
 800e842:	238a      	movhi	r3, #138	; 0x8a
 800e844:	6003      	strhi	r3, [r0, #0]
 800e846:	700a      	strbls	r2, [r1, #0]
 800e848:	f04f 30ff 	movhi.w	r0, #4294967295
 800e84c:	bf98      	it	ls
 800e84e:	2001      	movls	r0, #1
 800e850:	4770      	bx	lr
 800e852:	4608      	mov	r0, r1
 800e854:	4770      	bx	lr
	...

0800e858 <__assert_func>:
 800e858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e85a:	4614      	mov	r4, r2
 800e85c:	461a      	mov	r2, r3
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <__assert_func+0x2c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4605      	mov	r5, r0
 800e864:	68d8      	ldr	r0, [r3, #12]
 800e866:	b14c      	cbz	r4, 800e87c <__assert_func+0x24>
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <__assert_func+0x30>)
 800e86a:	9100      	str	r1, [sp, #0]
 800e86c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e870:	4906      	ldr	r1, [pc, #24]	; (800e88c <__assert_func+0x34>)
 800e872:	462b      	mov	r3, r5
 800e874:	f000 f9a6 	bl	800ebc4 <fiprintf>
 800e878:	f000 fc46 	bl	800f108 <abort>
 800e87c:	4b04      	ldr	r3, [pc, #16]	; (800e890 <__assert_func+0x38>)
 800e87e:	461c      	mov	r4, r3
 800e880:	e7f3      	b.n	800e86a <__assert_func+0x12>
 800e882:	bf00      	nop
 800e884:	20000080 	.word	0x20000080
 800e888:	08010aa8 	.word	0x08010aa8
 800e88c:	08010ab5 	.word	0x08010ab5
 800e890:	08010ae3 	.word	0x08010ae3

0800e894 <__sflush_r>:
 800e894:	898a      	ldrh	r2, [r1, #12]
 800e896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89a:	4605      	mov	r5, r0
 800e89c:	0710      	lsls	r0, r2, #28
 800e89e:	460c      	mov	r4, r1
 800e8a0:	d458      	bmi.n	800e954 <__sflush_r+0xc0>
 800e8a2:	684b      	ldr	r3, [r1, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	dc05      	bgt.n	800e8b4 <__sflush_r+0x20>
 800e8a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	dc02      	bgt.n	800e8b4 <__sflush_r+0x20>
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8b6:	2e00      	cmp	r6, #0
 800e8b8:	d0f9      	beq.n	800e8ae <__sflush_r+0x1a>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8c0:	682f      	ldr	r7, [r5, #0]
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	d032      	beq.n	800e92c <__sflush_r+0x98>
 800e8c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	075a      	lsls	r2, r3, #29
 800e8cc:	d505      	bpl.n	800e8da <__sflush_r+0x46>
 800e8ce:	6863      	ldr	r3, [r4, #4]
 800e8d0:	1ac0      	subs	r0, r0, r3
 800e8d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8d4:	b10b      	cbz	r3, 800e8da <__sflush_r+0x46>
 800e8d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8d8:	1ac0      	subs	r0, r0, r3
 800e8da:	2300      	movs	r3, #0
 800e8dc:	4602      	mov	r2, r0
 800e8de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8e0:	6a21      	ldr	r1, [r4, #32]
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	47b0      	blx	r6
 800e8e6:	1c43      	adds	r3, r0, #1
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	d106      	bne.n	800e8fa <__sflush_r+0x66>
 800e8ec:	6829      	ldr	r1, [r5, #0]
 800e8ee:	291d      	cmp	r1, #29
 800e8f0:	d82c      	bhi.n	800e94c <__sflush_r+0xb8>
 800e8f2:	4a2a      	ldr	r2, [pc, #168]	; (800e99c <__sflush_r+0x108>)
 800e8f4:	40ca      	lsrs	r2, r1
 800e8f6:	07d6      	lsls	r6, r2, #31
 800e8f8:	d528      	bpl.n	800e94c <__sflush_r+0xb8>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	6062      	str	r2, [r4, #4]
 800e8fe:	04d9      	lsls	r1, r3, #19
 800e900:	6922      	ldr	r2, [r4, #16]
 800e902:	6022      	str	r2, [r4, #0]
 800e904:	d504      	bpl.n	800e910 <__sflush_r+0x7c>
 800e906:	1c42      	adds	r2, r0, #1
 800e908:	d101      	bne.n	800e90e <__sflush_r+0x7a>
 800e90a:	682b      	ldr	r3, [r5, #0]
 800e90c:	b903      	cbnz	r3, 800e910 <__sflush_r+0x7c>
 800e90e:	6560      	str	r0, [r4, #84]	; 0x54
 800e910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e912:	602f      	str	r7, [r5, #0]
 800e914:	2900      	cmp	r1, #0
 800e916:	d0ca      	beq.n	800e8ae <__sflush_r+0x1a>
 800e918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e91c:	4299      	cmp	r1, r3
 800e91e:	d002      	beq.n	800e926 <__sflush_r+0x92>
 800e920:	4628      	mov	r0, r5
 800e922:	f7ff f919 	bl	800db58 <_free_r>
 800e926:	2000      	movs	r0, #0
 800e928:	6360      	str	r0, [r4, #52]	; 0x34
 800e92a:	e7c1      	b.n	800e8b0 <__sflush_r+0x1c>
 800e92c:	6a21      	ldr	r1, [r4, #32]
 800e92e:	2301      	movs	r3, #1
 800e930:	4628      	mov	r0, r5
 800e932:	47b0      	blx	r6
 800e934:	1c41      	adds	r1, r0, #1
 800e936:	d1c7      	bne.n	800e8c8 <__sflush_r+0x34>
 800e938:	682b      	ldr	r3, [r5, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d0c4      	beq.n	800e8c8 <__sflush_r+0x34>
 800e93e:	2b1d      	cmp	r3, #29
 800e940:	d001      	beq.n	800e946 <__sflush_r+0xb2>
 800e942:	2b16      	cmp	r3, #22
 800e944:	d101      	bne.n	800e94a <__sflush_r+0xb6>
 800e946:	602f      	str	r7, [r5, #0]
 800e948:	e7b1      	b.n	800e8ae <__sflush_r+0x1a>
 800e94a:	89a3      	ldrh	r3, [r4, #12]
 800e94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e950:	81a3      	strh	r3, [r4, #12]
 800e952:	e7ad      	b.n	800e8b0 <__sflush_r+0x1c>
 800e954:	690f      	ldr	r7, [r1, #16]
 800e956:	2f00      	cmp	r7, #0
 800e958:	d0a9      	beq.n	800e8ae <__sflush_r+0x1a>
 800e95a:	0793      	lsls	r3, r2, #30
 800e95c:	680e      	ldr	r6, [r1, #0]
 800e95e:	bf08      	it	eq
 800e960:	694b      	ldreq	r3, [r1, #20]
 800e962:	600f      	str	r7, [r1, #0]
 800e964:	bf18      	it	ne
 800e966:	2300      	movne	r3, #0
 800e968:	eba6 0807 	sub.w	r8, r6, r7
 800e96c:	608b      	str	r3, [r1, #8]
 800e96e:	f1b8 0f00 	cmp.w	r8, #0
 800e972:	dd9c      	ble.n	800e8ae <__sflush_r+0x1a>
 800e974:	6a21      	ldr	r1, [r4, #32]
 800e976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e978:	4643      	mov	r3, r8
 800e97a:	463a      	mov	r2, r7
 800e97c:	4628      	mov	r0, r5
 800e97e:	47b0      	blx	r6
 800e980:	2800      	cmp	r0, #0
 800e982:	dc06      	bgt.n	800e992 <__sflush_r+0xfe>
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	e78e      	b.n	800e8b0 <__sflush_r+0x1c>
 800e992:	4407      	add	r7, r0
 800e994:	eba8 0800 	sub.w	r8, r8, r0
 800e998:	e7e9      	b.n	800e96e <__sflush_r+0xda>
 800e99a:	bf00      	nop
 800e99c:	20400001 	.word	0x20400001

0800e9a0 <_fflush_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	690b      	ldr	r3, [r1, #16]
 800e9a4:	4605      	mov	r5, r0
 800e9a6:	460c      	mov	r4, r1
 800e9a8:	b913      	cbnz	r3, 800e9b0 <_fflush_r+0x10>
 800e9aa:	2500      	movs	r5, #0
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	bd38      	pop	{r3, r4, r5, pc}
 800e9b0:	b118      	cbz	r0, 800e9ba <_fflush_r+0x1a>
 800e9b2:	6983      	ldr	r3, [r0, #24]
 800e9b4:	b90b      	cbnz	r3, 800e9ba <_fflush_r+0x1a>
 800e9b6:	f000 f887 	bl	800eac8 <__sinit>
 800e9ba:	4b14      	ldr	r3, [pc, #80]	; (800ea0c <_fflush_r+0x6c>)
 800e9bc:	429c      	cmp	r4, r3
 800e9be:	d11b      	bne.n	800e9f8 <_fflush_r+0x58>
 800e9c0:	686c      	ldr	r4, [r5, #4]
 800e9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d0ef      	beq.n	800e9aa <_fflush_r+0xa>
 800e9ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9cc:	07d0      	lsls	r0, r2, #31
 800e9ce:	d404      	bmi.n	800e9da <_fflush_r+0x3a>
 800e9d0:	0599      	lsls	r1, r3, #22
 800e9d2:	d402      	bmi.n	800e9da <_fflush_r+0x3a>
 800e9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9d6:	f000 f927 	bl	800ec28 <__retarget_lock_acquire_recursive>
 800e9da:	4628      	mov	r0, r5
 800e9dc:	4621      	mov	r1, r4
 800e9de:	f7ff ff59 	bl	800e894 <__sflush_r>
 800e9e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9e4:	07da      	lsls	r2, r3, #31
 800e9e6:	4605      	mov	r5, r0
 800e9e8:	d4e0      	bmi.n	800e9ac <_fflush_r+0xc>
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	059b      	lsls	r3, r3, #22
 800e9ee:	d4dd      	bmi.n	800e9ac <_fflush_r+0xc>
 800e9f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9f2:	f000 f91a 	bl	800ec2a <__retarget_lock_release_recursive>
 800e9f6:	e7d9      	b.n	800e9ac <_fflush_r+0xc>
 800e9f8:	4b05      	ldr	r3, [pc, #20]	; (800ea10 <_fflush_r+0x70>)
 800e9fa:	429c      	cmp	r4, r3
 800e9fc:	d101      	bne.n	800ea02 <_fflush_r+0x62>
 800e9fe:	68ac      	ldr	r4, [r5, #8]
 800ea00:	e7df      	b.n	800e9c2 <_fflush_r+0x22>
 800ea02:	4b04      	ldr	r3, [pc, #16]	; (800ea14 <_fflush_r+0x74>)
 800ea04:	429c      	cmp	r4, r3
 800ea06:	bf08      	it	eq
 800ea08:	68ec      	ldreq	r4, [r5, #12]
 800ea0a:	e7da      	b.n	800e9c2 <_fflush_r+0x22>
 800ea0c:	08010b04 	.word	0x08010b04
 800ea10:	08010b24 	.word	0x08010b24
 800ea14:	08010ae4 	.word	0x08010ae4

0800ea18 <std>:
 800ea18:	2300      	movs	r3, #0
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ea22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea26:	6083      	str	r3, [r0, #8]
 800ea28:	8181      	strh	r1, [r0, #12]
 800ea2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ea2c:	81c2      	strh	r2, [r0, #14]
 800ea2e:	6183      	str	r3, [r0, #24]
 800ea30:	4619      	mov	r1, r3
 800ea32:	2208      	movs	r2, #8
 800ea34:	305c      	adds	r0, #92	; 0x5c
 800ea36:	f7fb fb8f 	bl	800a158 <memset>
 800ea3a:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <std+0x38>)
 800ea3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ea3e:	4b05      	ldr	r3, [pc, #20]	; (800ea54 <std+0x3c>)
 800ea40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ea42:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <std+0x40>)
 800ea44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ea46:	4b05      	ldr	r3, [pc, #20]	; (800ea5c <std+0x44>)
 800ea48:	6224      	str	r4, [r4, #32]
 800ea4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ea4c:	bd10      	pop	{r4, pc}
 800ea4e:	bf00      	nop
 800ea50:	0800af01 	.word	0x0800af01
 800ea54:	0800af27 	.word	0x0800af27
 800ea58:	0800af5f 	.word	0x0800af5f
 800ea5c:	0800af83 	.word	0x0800af83

0800ea60 <_cleanup_r>:
 800ea60:	4901      	ldr	r1, [pc, #4]	; (800ea68 <_cleanup_r+0x8>)
 800ea62:	f000 b8c1 	b.w	800ebe8 <_fwalk_reent>
 800ea66:	bf00      	nop
 800ea68:	0800e9a1 	.word	0x0800e9a1

0800ea6c <__sfmoreglue>:
 800ea6c:	b570      	push	{r4, r5, r6, lr}
 800ea6e:	2268      	movs	r2, #104	; 0x68
 800ea70:	1e4d      	subs	r5, r1, #1
 800ea72:	4355      	muls	r5, r2
 800ea74:	460e      	mov	r6, r1
 800ea76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea7a:	f7ff f8d9 	bl	800dc30 <_malloc_r>
 800ea7e:	4604      	mov	r4, r0
 800ea80:	b140      	cbz	r0, 800ea94 <__sfmoreglue+0x28>
 800ea82:	2100      	movs	r1, #0
 800ea84:	e9c0 1600 	strd	r1, r6, [r0]
 800ea88:	300c      	adds	r0, #12
 800ea8a:	60a0      	str	r0, [r4, #8]
 800ea8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea90:	f7fb fb62 	bl	800a158 <memset>
 800ea94:	4620      	mov	r0, r4
 800ea96:	bd70      	pop	{r4, r5, r6, pc}

0800ea98 <__sfp_lock_acquire>:
 800ea98:	4801      	ldr	r0, [pc, #4]	; (800eaa0 <__sfp_lock_acquire+0x8>)
 800ea9a:	f000 b8c5 	b.w	800ec28 <__retarget_lock_acquire_recursive>
 800ea9e:	bf00      	nop
 800eaa0:	200009e5 	.word	0x200009e5

0800eaa4 <__sfp_lock_release>:
 800eaa4:	4801      	ldr	r0, [pc, #4]	; (800eaac <__sfp_lock_release+0x8>)
 800eaa6:	f000 b8c0 	b.w	800ec2a <__retarget_lock_release_recursive>
 800eaaa:	bf00      	nop
 800eaac:	200009e5 	.word	0x200009e5

0800eab0 <__sinit_lock_acquire>:
 800eab0:	4801      	ldr	r0, [pc, #4]	; (800eab8 <__sinit_lock_acquire+0x8>)
 800eab2:	f000 b8b9 	b.w	800ec28 <__retarget_lock_acquire_recursive>
 800eab6:	bf00      	nop
 800eab8:	200009e6 	.word	0x200009e6

0800eabc <__sinit_lock_release>:
 800eabc:	4801      	ldr	r0, [pc, #4]	; (800eac4 <__sinit_lock_release+0x8>)
 800eabe:	f000 b8b4 	b.w	800ec2a <__retarget_lock_release_recursive>
 800eac2:	bf00      	nop
 800eac4:	200009e6 	.word	0x200009e6

0800eac8 <__sinit>:
 800eac8:	b510      	push	{r4, lr}
 800eaca:	4604      	mov	r4, r0
 800eacc:	f7ff fff0 	bl	800eab0 <__sinit_lock_acquire>
 800ead0:	69a3      	ldr	r3, [r4, #24]
 800ead2:	b11b      	cbz	r3, 800eadc <__sinit+0x14>
 800ead4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead8:	f7ff bff0 	b.w	800eabc <__sinit_lock_release>
 800eadc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eae0:	6523      	str	r3, [r4, #80]	; 0x50
 800eae2:	4b13      	ldr	r3, [pc, #76]	; (800eb30 <__sinit+0x68>)
 800eae4:	4a13      	ldr	r2, [pc, #76]	; (800eb34 <__sinit+0x6c>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eaea:	42a3      	cmp	r3, r4
 800eaec:	bf04      	itt	eq
 800eaee:	2301      	moveq	r3, #1
 800eaf0:	61a3      	streq	r3, [r4, #24]
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 f820 	bl	800eb38 <__sfp>
 800eaf8:	6060      	str	r0, [r4, #4]
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 f81c 	bl	800eb38 <__sfp>
 800eb00:	60a0      	str	r0, [r4, #8]
 800eb02:	4620      	mov	r0, r4
 800eb04:	f000 f818 	bl	800eb38 <__sfp>
 800eb08:	2200      	movs	r2, #0
 800eb0a:	60e0      	str	r0, [r4, #12]
 800eb0c:	2104      	movs	r1, #4
 800eb0e:	6860      	ldr	r0, [r4, #4]
 800eb10:	f7ff ff82 	bl	800ea18 <std>
 800eb14:	68a0      	ldr	r0, [r4, #8]
 800eb16:	2201      	movs	r2, #1
 800eb18:	2109      	movs	r1, #9
 800eb1a:	f7ff ff7d 	bl	800ea18 <std>
 800eb1e:	68e0      	ldr	r0, [r4, #12]
 800eb20:	2202      	movs	r2, #2
 800eb22:	2112      	movs	r1, #18
 800eb24:	f7ff ff78 	bl	800ea18 <std>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	61a3      	str	r3, [r4, #24]
 800eb2c:	e7d2      	b.n	800ead4 <__sinit+0xc>
 800eb2e:	bf00      	nop
 800eb30:	08010688 	.word	0x08010688
 800eb34:	0800ea61 	.word	0x0800ea61

0800eb38 <__sfp>:
 800eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb3a:	4607      	mov	r7, r0
 800eb3c:	f7ff ffac 	bl	800ea98 <__sfp_lock_acquire>
 800eb40:	4b1e      	ldr	r3, [pc, #120]	; (800ebbc <__sfp+0x84>)
 800eb42:	681e      	ldr	r6, [r3, #0]
 800eb44:	69b3      	ldr	r3, [r6, #24]
 800eb46:	b913      	cbnz	r3, 800eb4e <__sfp+0x16>
 800eb48:	4630      	mov	r0, r6
 800eb4a:	f7ff ffbd 	bl	800eac8 <__sinit>
 800eb4e:	3648      	adds	r6, #72	; 0x48
 800eb50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	d503      	bpl.n	800eb60 <__sfp+0x28>
 800eb58:	6833      	ldr	r3, [r6, #0]
 800eb5a:	b30b      	cbz	r3, 800eba0 <__sfp+0x68>
 800eb5c:	6836      	ldr	r6, [r6, #0]
 800eb5e:	e7f7      	b.n	800eb50 <__sfp+0x18>
 800eb60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb64:	b9d5      	cbnz	r5, 800eb9c <__sfp+0x64>
 800eb66:	4b16      	ldr	r3, [pc, #88]	; (800ebc0 <__sfp+0x88>)
 800eb68:	60e3      	str	r3, [r4, #12]
 800eb6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb6e:	6665      	str	r5, [r4, #100]	; 0x64
 800eb70:	f000 f859 	bl	800ec26 <__retarget_lock_init_recursive>
 800eb74:	f7ff ff96 	bl	800eaa4 <__sfp_lock_release>
 800eb78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb80:	6025      	str	r5, [r4, #0]
 800eb82:	61a5      	str	r5, [r4, #24]
 800eb84:	2208      	movs	r2, #8
 800eb86:	4629      	mov	r1, r5
 800eb88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb8c:	f7fb fae4 	bl	800a158 <memset>
 800eb90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb98:	4620      	mov	r0, r4
 800eb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb9c:	3468      	adds	r4, #104	; 0x68
 800eb9e:	e7d9      	b.n	800eb54 <__sfp+0x1c>
 800eba0:	2104      	movs	r1, #4
 800eba2:	4638      	mov	r0, r7
 800eba4:	f7ff ff62 	bl	800ea6c <__sfmoreglue>
 800eba8:	4604      	mov	r4, r0
 800ebaa:	6030      	str	r0, [r6, #0]
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d1d5      	bne.n	800eb5c <__sfp+0x24>
 800ebb0:	f7ff ff78 	bl	800eaa4 <__sfp_lock_release>
 800ebb4:	230c      	movs	r3, #12
 800ebb6:	603b      	str	r3, [r7, #0]
 800ebb8:	e7ee      	b.n	800eb98 <__sfp+0x60>
 800ebba:	bf00      	nop
 800ebbc:	08010688 	.word	0x08010688
 800ebc0:	ffff0001 	.word	0xffff0001

0800ebc4 <fiprintf>:
 800ebc4:	b40e      	push	{r1, r2, r3}
 800ebc6:	b503      	push	{r0, r1, lr}
 800ebc8:	4601      	mov	r1, r0
 800ebca:	ab03      	add	r3, sp, #12
 800ebcc:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <fiprintf+0x20>)
 800ebce:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd2:	6800      	ldr	r0, [r0, #0]
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	f000 f8a7 	bl	800ed28 <_vfiprintf_r>
 800ebda:	b002      	add	sp, #8
 800ebdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe0:	b003      	add	sp, #12
 800ebe2:	4770      	bx	lr
 800ebe4:	20000080 	.word	0x20000080

0800ebe8 <_fwalk_reent>:
 800ebe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebec:	4606      	mov	r6, r0
 800ebee:	4688      	mov	r8, r1
 800ebf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ebf4:	2700      	movs	r7, #0
 800ebf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ebfa:	f1b9 0901 	subs.w	r9, r9, #1
 800ebfe:	d505      	bpl.n	800ec0c <_fwalk_reent+0x24>
 800ec00:	6824      	ldr	r4, [r4, #0]
 800ec02:	2c00      	cmp	r4, #0
 800ec04:	d1f7      	bne.n	800ebf6 <_fwalk_reent+0xe>
 800ec06:	4638      	mov	r0, r7
 800ec08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec0c:	89ab      	ldrh	r3, [r5, #12]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d907      	bls.n	800ec22 <_fwalk_reent+0x3a>
 800ec12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec16:	3301      	adds	r3, #1
 800ec18:	d003      	beq.n	800ec22 <_fwalk_reent+0x3a>
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4630      	mov	r0, r6
 800ec1e:	47c0      	blx	r8
 800ec20:	4307      	orrs	r7, r0
 800ec22:	3568      	adds	r5, #104	; 0x68
 800ec24:	e7e9      	b.n	800ebfa <_fwalk_reent+0x12>

0800ec26 <__retarget_lock_init_recursive>:
 800ec26:	4770      	bx	lr

0800ec28 <__retarget_lock_acquire_recursive>:
 800ec28:	4770      	bx	lr

0800ec2a <__retarget_lock_release_recursive>:
 800ec2a:	4770      	bx	lr

0800ec2c <memmove>:
 800ec2c:	4288      	cmp	r0, r1
 800ec2e:	b510      	push	{r4, lr}
 800ec30:	eb01 0402 	add.w	r4, r1, r2
 800ec34:	d902      	bls.n	800ec3c <memmove+0x10>
 800ec36:	4284      	cmp	r4, r0
 800ec38:	4623      	mov	r3, r4
 800ec3a:	d807      	bhi.n	800ec4c <memmove+0x20>
 800ec3c:	1e43      	subs	r3, r0, #1
 800ec3e:	42a1      	cmp	r1, r4
 800ec40:	d008      	beq.n	800ec54 <memmove+0x28>
 800ec42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec4a:	e7f8      	b.n	800ec3e <memmove+0x12>
 800ec4c:	4402      	add	r2, r0
 800ec4e:	4601      	mov	r1, r0
 800ec50:	428a      	cmp	r2, r1
 800ec52:	d100      	bne.n	800ec56 <memmove+0x2a>
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec5e:	e7f7      	b.n	800ec50 <memmove+0x24>

0800ec60 <__malloc_lock>:
 800ec60:	4801      	ldr	r0, [pc, #4]	; (800ec68 <__malloc_lock+0x8>)
 800ec62:	f7ff bfe1 	b.w	800ec28 <__retarget_lock_acquire_recursive>
 800ec66:	bf00      	nop
 800ec68:	200009e4 	.word	0x200009e4

0800ec6c <__malloc_unlock>:
 800ec6c:	4801      	ldr	r0, [pc, #4]	; (800ec74 <__malloc_unlock+0x8>)
 800ec6e:	f7ff bfdc 	b.w	800ec2a <__retarget_lock_release_recursive>
 800ec72:	bf00      	nop
 800ec74:	200009e4 	.word	0x200009e4

0800ec78 <_realloc_r>:
 800ec78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	4614      	mov	r4, r2
 800ec80:	460e      	mov	r6, r1
 800ec82:	b921      	cbnz	r1, 800ec8e <_realloc_r+0x16>
 800ec84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec88:	4611      	mov	r1, r2
 800ec8a:	f7fe bfd1 	b.w	800dc30 <_malloc_r>
 800ec8e:	b92a      	cbnz	r2, 800ec9c <_realloc_r+0x24>
 800ec90:	f7fe ff62 	bl	800db58 <_free_r>
 800ec94:	4625      	mov	r5, r4
 800ec96:	4628      	mov	r0, r5
 800ec98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec9c:	f000 faa0 	bl	800f1e0 <_malloc_usable_size_r>
 800eca0:	4284      	cmp	r4, r0
 800eca2:	4607      	mov	r7, r0
 800eca4:	d802      	bhi.n	800ecac <_realloc_r+0x34>
 800eca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ecaa:	d812      	bhi.n	800ecd2 <_realloc_r+0x5a>
 800ecac:	4621      	mov	r1, r4
 800ecae:	4640      	mov	r0, r8
 800ecb0:	f7fe ffbe 	bl	800dc30 <_malloc_r>
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d0ed      	beq.n	800ec96 <_realloc_r+0x1e>
 800ecba:	42bc      	cmp	r4, r7
 800ecbc:	4622      	mov	r2, r4
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	bf28      	it	cs
 800ecc2:	463a      	movcs	r2, r7
 800ecc4:	f7fe fa62 	bl	800d18c <memcpy>
 800ecc8:	4631      	mov	r1, r6
 800ecca:	4640      	mov	r0, r8
 800eccc:	f7fe ff44 	bl	800db58 <_free_r>
 800ecd0:	e7e1      	b.n	800ec96 <_realloc_r+0x1e>
 800ecd2:	4635      	mov	r5, r6
 800ecd4:	e7df      	b.n	800ec96 <_realloc_r+0x1e>

0800ecd6 <__sfputc_r>:
 800ecd6:	6893      	ldr	r3, [r2, #8]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	b410      	push	{r4}
 800ecde:	6093      	str	r3, [r2, #8]
 800ece0:	da08      	bge.n	800ecf4 <__sfputc_r+0x1e>
 800ece2:	6994      	ldr	r4, [r2, #24]
 800ece4:	42a3      	cmp	r3, r4
 800ece6:	db01      	blt.n	800ecec <__sfputc_r+0x16>
 800ece8:	290a      	cmp	r1, #10
 800ecea:	d103      	bne.n	800ecf4 <__sfputc_r+0x1e>
 800ecec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf0:	f000 b94a 	b.w	800ef88 <__swbuf_r>
 800ecf4:	6813      	ldr	r3, [r2, #0]
 800ecf6:	1c58      	adds	r0, r3, #1
 800ecf8:	6010      	str	r0, [r2, #0]
 800ecfa:	7019      	strb	r1, [r3, #0]
 800ecfc:	4608      	mov	r0, r1
 800ecfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <__sfputs_r>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	4606      	mov	r6, r0
 800ed08:	460f      	mov	r7, r1
 800ed0a:	4614      	mov	r4, r2
 800ed0c:	18d5      	adds	r5, r2, r3
 800ed0e:	42ac      	cmp	r4, r5
 800ed10:	d101      	bne.n	800ed16 <__sfputs_r+0x12>
 800ed12:	2000      	movs	r0, #0
 800ed14:	e007      	b.n	800ed26 <__sfputs_r+0x22>
 800ed16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed1a:	463a      	mov	r2, r7
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7ff ffda 	bl	800ecd6 <__sfputc_r>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d1f3      	bne.n	800ed0e <__sfputs_r+0xa>
 800ed26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed28 <_vfiprintf_r>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	460d      	mov	r5, r1
 800ed2e:	b09d      	sub	sp, #116	; 0x74
 800ed30:	4614      	mov	r4, r2
 800ed32:	4698      	mov	r8, r3
 800ed34:	4606      	mov	r6, r0
 800ed36:	b118      	cbz	r0, 800ed40 <_vfiprintf_r+0x18>
 800ed38:	6983      	ldr	r3, [r0, #24]
 800ed3a:	b90b      	cbnz	r3, 800ed40 <_vfiprintf_r+0x18>
 800ed3c:	f7ff fec4 	bl	800eac8 <__sinit>
 800ed40:	4b89      	ldr	r3, [pc, #548]	; (800ef68 <_vfiprintf_r+0x240>)
 800ed42:	429d      	cmp	r5, r3
 800ed44:	d11b      	bne.n	800ed7e <_vfiprintf_r+0x56>
 800ed46:	6875      	ldr	r5, [r6, #4]
 800ed48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed4a:	07d9      	lsls	r1, r3, #31
 800ed4c:	d405      	bmi.n	800ed5a <_vfiprintf_r+0x32>
 800ed4e:	89ab      	ldrh	r3, [r5, #12]
 800ed50:	059a      	lsls	r2, r3, #22
 800ed52:	d402      	bmi.n	800ed5a <_vfiprintf_r+0x32>
 800ed54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed56:	f7ff ff67 	bl	800ec28 <__retarget_lock_acquire_recursive>
 800ed5a:	89ab      	ldrh	r3, [r5, #12]
 800ed5c:	071b      	lsls	r3, r3, #28
 800ed5e:	d501      	bpl.n	800ed64 <_vfiprintf_r+0x3c>
 800ed60:	692b      	ldr	r3, [r5, #16]
 800ed62:	b9eb      	cbnz	r3, 800eda0 <_vfiprintf_r+0x78>
 800ed64:	4629      	mov	r1, r5
 800ed66:	4630      	mov	r0, r6
 800ed68:	f000 f960 	bl	800f02c <__swsetup_r>
 800ed6c:	b1c0      	cbz	r0, 800eda0 <_vfiprintf_r+0x78>
 800ed6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed70:	07dc      	lsls	r4, r3, #31
 800ed72:	d50e      	bpl.n	800ed92 <_vfiprintf_r+0x6a>
 800ed74:	f04f 30ff 	mov.w	r0, #4294967295
 800ed78:	b01d      	add	sp, #116	; 0x74
 800ed7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7e:	4b7b      	ldr	r3, [pc, #492]	; (800ef6c <_vfiprintf_r+0x244>)
 800ed80:	429d      	cmp	r5, r3
 800ed82:	d101      	bne.n	800ed88 <_vfiprintf_r+0x60>
 800ed84:	68b5      	ldr	r5, [r6, #8]
 800ed86:	e7df      	b.n	800ed48 <_vfiprintf_r+0x20>
 800ed88:	4b79      	ldr	r3, [pc, #484]	; (800ef70 <_vfiprintf_r+0x248>)
 800ed8a:	429d      	cmp	r5, r3
 800ed8c:	bf08      	it	eq
 800ed8e:	68f5      	ldreq	r5, [r6, #12]
 800ed90:	e7da      	b.n	800ed48 <_vfiprintf_r+0x20>
 800ed92:	89ab      	ldrh	r3, [r5, #12]
 800ed94:	0598      	lsls	r0, r3, #22
 800ed96:	d4ed      	bmi.n	800ed74 <_vfiprintf_r+0x4c>
 800ed98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed9a:	f7ff ff46 	bl	800ec2a <__retarget_lock_release_recursive>
 800ed9e:	e7e9      	b.n	800ed74 <_vfiprintf_r+0x4c>
 800eda0:	2300      	movs	r3, #0
 800eda2:	9309      	str	r3, [sp, #36]	; 0x24
 800eda4:	2320      	movs	r3, #32
 800eda6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800edae:	2330      	movs	r3, #48	; 0x30
 800edb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef74 <_vfiprintf_r+0x24c>
 800edb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edb8:	f04f 0901 	mov.w	r9, #1
 800edbc:	4623      	mov	r3, r4
 800edbe:	469a      	mov	sl, r3
 800edc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edc4:	b10a      	cbz	r2, 800edca <_vfiprintf_r+0xa2>
 800edc6:	2a25      	cmp	r2, #37	; 0x25
 800edc8:	d1f9      	bne.n	800edbe <_vfiprintf_r+0x96>
 800edca:	ebba 0b04 	subs.w	fp, sl, r4
 800edce:	d00b      	beq.n	800ede8 <_vfiprintf_r+0xc0>
 800edd0:	465b      	mov	r3, fp
 800edd2:	4622      	mov	r2, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff ff94 	bl	800ed04 <__sfputs_r>
 800eddc:	3001      	adds	r0, #1
 800edde:	f000 80aa 	beq.w	800ef36 <_vfiprintf_r+0x20e>
 800ede2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ede4:	445a      	add	r2, fp
 800ede6:	9209      	str	r2, [sp, #36]	; 0x24
 800ede8:	f89a 3000 	ldrb.w	r3, [sl]
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 80a2 	beq.w	800ef36 <_vfiprintf_r+0x20e>
 800edf2:	2300      	movs	r3, #0
 800edf4:	f04f 32ff 	mov.w	r2, #4294967295
 800edf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edfc:	f10a 0a01 	add.w	sl, sl, #1
 800ee00:	9304      	str	r3, [sp, #16]
 800ee02:	9307      	str	r3, [sp, #28]
 800ee04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee08:	931a      	str	r3, [sp, #104]	; 0x68
 800ee0a:	4654      	mov	r4, sl
 800ee0c:	2205      	movs	r2, #5
 800ee0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee12:	4858      	ldr	r0, [pc, #352]	; (800ef74 <_vfiprintf_r+0x24c>)
 800ee14:	f7f1 f9e4 	bl	80001e0 <memchr>
 800ee18:	9a04      	ldr	r2, [sp, #16]
 800ee1a:	b9d8      	cbnz	r0, 800ee54 <_vfiprintf_r+0x12c>
 800ee1c:	06d1      	lsls	r1, r2, #27
 800ee1e:	bf44      	itt	mi
 800ee20:	2320      	movmi	r3, #32
 800ee22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee26:	0713      	lsls	r3, r2, #28
 800ee28:	bf44      	itt	mi
 800ee2a:	232b      	movmi	r3, #43	; 0x2b
 800ee2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee30:	f89a 3000 	ldrb.w	r3, [sl]
 800ee34:	2b2a      	cmp	r3, #42	; 0x2a
 800ee36:	d015      	beq.n	800ee64 <_vfiprintf_r+0x13c>
 800ee38:	9a07      	ldr	r2, [sp, #28]
 800ee3a:	4654      	mov	r4, sl
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f04f 0c0a 	mov.w	ip, #10
 800ee42:	4621      	mov	r1, r4
 800ee44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee48:	3b30      	subs	r3, #48	; 0x30
 800ee4a:	2b09      	cmp	r3, #9
 800ee4c:	d94e      	bls.n	800eeec <_vfiprintf_r+0x1c4>
 800ee4e:	b1b0      	cbz	r0, 800ee7e <_vfiprintf_r+0x156>
 800ee50:	9207      	str	r2, [sp, #28]
 800ee52:	e014      	b.n	800ee7e <_vfiprintf_r+0x156>
 800ee54:	eba0 0308 	sub.w	r3, r0, r8
 800ee58:	fa09 f303 	lsl.w	r3, r9, r3
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	9304      	str	r3, [sp, #16]
 800ee60:	46a2      	mov	sl, r4
 800ee62:	e7d2      	b.n	800ee0a <_vfiprintf_r+0xe2>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	1d19      	adds	r1, r3, #4
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	9103      	str	r1, [sp, #12]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfbb      	ittet	lt
 800ee70:	425b      	neglt	r3, r3
 800ee72:	f042 0202 	orrlt.w	r2, r2, #2
 800ee76:	9307      	strge	r3, [sp, #28]
 800ee78:	9307      	strlt	r3, [sp, #28]
 800ee7a:	bfb8      	it	lt
 800ee7c:	9204      	strlt	r2, [sp, #16]
 800ee7e:	7823      	ldrb	r3, [r4, #0]
 800ee80:	2b2e      	cmp	r3, #46	; 0x2e
 800ee82:	d10c      	bne.n	800ee9e <_vfiprintf_r+0x176>
 800ee84:	7863      	ldrb	r3, [r4, #1]
 800ee86:	2b2a      	cmp	r3, #42	; 0x2a
 800ee88:	d135      	bne.n	800eef6 <_vfiprintf_r+0x1ce>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	1d1a      	adds	r2, r3, #4
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	9203      	str	r2, [sp, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bfb8      	it	lt
 800ee96:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee9a:	3402      	adds	r4, #2
 800ee9c:	9305      	str	r3, [sp, #20]
 800ee9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef84 <_vfiprintf_r+0x25c>
 800eea2:	7821      	ldrb	r1, [r4, #0]
 800eea4:	2203      	movs	r2, #3
 800eea6:	4650      	mov	r0, sl
 800eea8:	f7f1 f99a 	bl	80001e0 <memchr>
 800eeac:	b140      	cbz	r0, 800eec0 <_vfiprintf_r+0x198>
 800eeae:	2340      	movs	r3, #64	; 0x40
 800eeb0:	eba0 000a 	sub.w	r0, r0, sl
 800eeb4:	fa03 f000 	lsl.w	r0, r3, r0
 800eeb8:	9b04      	ldr	r3, [sp, #16]
 800eeba:	4303      	orrs	r3, r0
 800eebc:	3401      	adds	r4, #1
 800eebe:	9304      	str	r3, [sp, #16]
 800eec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eec4:	482c      	ldr	r0, [pc, #176]	; (800ef78 <_vfiprintf_r+0x250>)
 800eec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eeca:	2206      	movs	r2, #6
 800eecc:	f7f1 f988 	bl	80001e0 <memchr>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d03f      	beq.n	800ef54 <_vfiprintf_r+0x22c>
 800eed4:	4b29      	ldr	r3, [pc, #164]	; (800ef7c <_vfiprintf_r+0x254>)
 800eed6:	bb1b      	cbnz	r3, 800ef20 <_vfiprintf_r+0x1f8>
 800eed8:	9b03      	ldr	r3, [sp, #12]
 800eeda:	3307      	adds	r3, #7
 800eedc:	f023 0307 	bic.w	r3, r3, #7
 800eee0:	3308      	adds	r3, #8
 800eee2:	9303      	str	r3, [sp, #12]
 800eee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eee6:	443b      	add	r3, r7
 800eee8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeea:	e767      	b.n	800edbc <_vfiprintf_r+0x94>
 800eeec:	fb0c 3202 	mla	r2, ip, r2, r3
 800eef0:	460c      	mov	r4, r1
 800eef2:	2001      	movs	r0, #1
 800eef4:	e7a5      	b.n	800ee42 <_vfiprintf_r+0x11a>
 800eef6:	2300      	movs	r3, #0
 800eef8:	3401      	adds	r4, #1
 800eefa:	9305      	str	r3, [sp, #20]
 800eefc:	4619      	mov	r1, r3
 800eefe:	f04f 0c0a 	mov.w	ip, #10
 800ef02:	4620      	mov	r0, r4
 800ef04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef08:	3a30      	subs	r2, #48	; 0x30
 800ef0a:	2a09      	cmp	r2, #9
 800ef0c:	d903      	bls.n	800ef16 <_vfiprintf_r+0x1ee>
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0c5      	beq.n	800ee9e <_vfiprintf_r+0x176>
 800ef12:	9105      	str	r1, [sp, #20]
 800ef14:	e7c3      	b.n	800ee9e <_vfiprintf_r+0x176>
 800ef16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e7f0      	b.n	800ef02 <_vfiprintf_r+0x1da>
 800ef20:	ab03      	add	r3, sp, #12
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	462a      	mov	r2, r5
 800ef26:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <_vfiprintf_r+0x258>)
 800ef28:	a904      	add	r1, sp, #16
 800ef2a:	4630      	mov	r0, r6
 800ef2c:	f7fb f9bc 	bl	800a2a8 <_printf_float>
 800ef30:	4607      	mov	r7, r0
 800ef32:	1c78      	adds	r0, r7, #1
 800ef34:	d1d6      	bne.n	800eee4 <_vfiprintf_r+0x1bc>
 800ef36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef38:	07d9      	lsls	r1, r3, #31
 800ef3a:	d405      	bmi.n	800ef48 <_vfiprintf_r+0x220>
 800ef3c:	89ab      	ldrh	r3, [r5, #12]
 800ef3e:	059a      	lsls	r2, r3, #22
 800ef40:	d402      	bmi.n	800ef48 <_vfiprintf_r+0x220>
 800ef42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef44:	f7ff fe71 	bl	800ec2a <__retarget_lock_release_recursive>
 800ef48:	89ab      	ldrh	r3, [r5, #12]
 800ef4a:	065b      	lsls	r3, r3, #25
 800ef4c:	f53f af12 	bmi.w	800ed74 <_vfiprintf_r+0x4c>
 800ef50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef52:	e711      	b.n	800ed78 <_vfiprintf_r+0x50>
 800ef54:	ab03      	add	r3, sp, #12
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	462a      	mov	r2, r5
 800ef5a:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <_vfiprintf_r+0x258>)
 800ef5c:	a904      	add	r1, sp, #16
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7fb fc46 	bl	800a7f0 <_printf_i>
 800ef64:	e7e4      	b.n	800ef30 <_vfiprintf_r+0x208>
 800ef66:	bf00      	nop
 800ef68:	08010b04 	.word	0x08010b04
 800ef6c:	08010b24 	.word	0x08010b24
 800ef70:	08010ae4 	.word	0x08010ae4
 800ef74:	08010a7c 	.word	0x08010a7c
 800ef78:	08010a86 	.word	0x08010a86
 800ef7c:	0800a2a9 	.word	0x0800a2a9
 800ef80:	0800ed05 	.word	0x0800ed05
 800ef84:	08010a82 	.word	0x08010a82

0800ef88 <__swbuf_r>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	460e      	mov	r6, r1
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	4605      	mov	r5, r0
 800ef90:	b118      	cbz	r0, 800ef9a <__swbuf_r+0x12>
 800ef92:	6983      	ldr	r3, [r0, #24]
 800ef94:	b90b      	cbnz	r3, 800ef9a <__swbuf_r+0x12>
 800ef96:	f7ff fd97 	bl	800eac8 <__sinit>
 800ef9a:	4b21      	ldr	r3, [pc, #132]	; (800f020 <__swbuf_r+0x98>)
 800ef9c:	429c      	cmp	r4, r3
 800ef9e:	d12b      	bne.n	800eff8 <__swbuf_r+0x70>
 800efa0:	686c      	ldr	r4, [r5, #4]
 800efa2:	69a3      	ldr	r3, [r4, #24]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	89a3      	ldrh	r3, [r4, #12]
 800efa8:	071a      	lsls	r2, r3, #28
 800efaa:	d52f      	bpl.n	800f00c <__swbuf_r+0x84>
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	b36b      	cbz	r3, 800f00c <__swbuf_r+0x84>
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	6820      	ldr	r0, [r4, #0]
 800efb4:	1ac0      	subs	r0, r0, r3
 800efb6:	6963      	ldr	r3, [r4, #20]
 800efb8:	b2f6      	uxtb	r6, r6
 800efba:	4283      	cmp	r3, r0
 800efbc:	4637      	mov	r7, r6
 800efbe:	dc04      	bgt.n	800efca <__swbuf_r+0x42>
 800efc0:	4621      	mov	r1, r4
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7ff fcec 	bl	800e9a0 <_fflush_r>
 800efc8:	bb30      	cbnz	r0, 800f018 <__swbuf_r+0x90>
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	3b01      	subs	r3, #1
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	6022      	str	r2, [r4, #0]
 800efd6:	701e      	strb	r6, [r3, #0]
 800efd8:	6963      	ldr	r3, [r4, #20]
 800efda:	3001      	adds	r0, #1
 800efdc:	4283      	cmp	r3, r0
 800efde:	d004      	beq.n	800efea <__swbuf_r+0x62>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	07db      	lsls	r3, r3, #31
 800efe4:	d506      	bpl.n	800eff4 <__swbuf_r+0x6c>
 800efe6:	2e0a      	cmp	r6, #10
 800efe8:	d104      	bne.n	800eff4 <__swbuf_r+0x6c>
 800efea:	4621      	mov	r1, r4
 800efec:	4628      	mov	r0, r5
 800efee:	f7ff fcd7 	bl	800e9a0 <_fflush_r>
 800eff2:	b988      	cbnz	r0, 800f018 <__swbuf_r+0x90>
 800eff4:	4638      	mov	r0, r7
 800eff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff8:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <__swbuf_r+0x9c>)
 800effa:	429c      	cmp	r4, r3
 800effc:	d101      	bne.n	800f002 <__swbuf_r+0x7a>
 800effe:	68ac      	ldr	r4, [r5, #8]
 800f000:	e7cf      	b.n	800efa2 <__swbuf_r+0x1a>
 800f002:	4b09      	ldr	r3, [pc, #36]	; (800f028 <__swbuf_r+0xa0>)
 800f004:	429c      	cmp	r4, r3
 800f006:	bf08      	it	eq
 800f008:	68ec      	ldreq	r4, [r5, #12]
 800f00a:	e7ca      	b.n	800efa2 <__swbuf_r+0x1a>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 f80c 	bl	800f02c <__swsetup_r>
 800f014:	2800      	cmp	r0, #0
 800f016:	d0cb      	beq.n	800efb0 <__swbuf_r+0x28>
 800f018:	f04f 37ff 	mov.w	r7, #4294967295
 800f01c:	e7ea      	b.n	800eff4 <__swbuf_r+0x6c>
 800f01e:	bf00      	nop
 800f020:	08010b04 	.word	0x08010b04
 800f024:	08010b24 	.word	0x08010b24
 800f028:	08010ae4 	.word	0x08010ae4

0800f02c <__swsetup_r>:
 800f02c:	4b32      	ldr	r3, [pc, #200]	; (800f0f8 <__swsetup_r+0xcc>)
 800f02e:	b570      	push	{r4, r5, r6, lr}
 800f030:	681d      	ldr	r5, [r3, #0]
 800f032:	4606      	mov	r6, r0
 800f034:	460c      	mov	r4, r1
 800f036:	b125      	cbz	r5, 800f042 <__swsetup_r+0x16>
 800f038:	69ab      	ldr	r3, [r5, #24]
 800f03a:	b913      	cbnz	r3, 800f042 <__swsetup_r+0x16>
 800f03c:	4628      	mov	r0, r5
 800f03e:	f7ff fd43 	bl	800eac8 <__sinit>
 800f042:	4b2e      	ldr	r3, [pc, #184]	; (800f0fc <__swsetup_r+0xd0>)
 800f044:	429c      	cmp	r4, r3
 800f046:	d10f      	bne.n	800f068 <__swsetup_r+0x3c>
 800f048:	686c      	ldr	r4, [r5, #4]
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f050:	0719      	lsls	r1, r3, #28
 800f052:	d42c      	bmi.n	800f0ae <__swsetup_r+0x82>
 800f054:	06dd      	lsls	r5, r3, #27
 800f056:	d411      	bmi.n	800f07c <__swsetup_r+0x50>
 800f058:	2309      	movs	r3, #9
 800f05a:	6033      	str	r3, [r6, #0]
 800f05c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	f04f 30ff 	mov.w	r0, #4294967295
 800f066:	e03e      	b.n	800f0e6 <__swsetup_r+0xba>
 800f068:	4b25      	ldr	r3, [pc, #148]	; (800f100 <__swsetup_r+0xd4>)
 800f06a:	429c      	cmp	r4, r3
 800f06c:	d101      	bne.n	800f072 <__swsetup_r+0x46>
 800f06e:	68ac      	ldr	r4, [r5, #8]
 800f070:	e7eb      	b.n	800f04a <__swsetup_r+0x1e>
 800f072:	4b24      	ldr	r3, [pc, #144]	; (800f104 <__swsetup_r+0xd8>)
 800f074:	429c      	cmp	r4, r3
 800f076:	bf08      	it	eq
 800f078:	68ec      	ldreq	r4, [r5, #12]
 800f07a:	e7e6      	b.n	800f04a <__swsetup_r+0x1e>
 800f07c:	0758      	lsls	r0, r3, #29
 800f07e:	d512      	bpl.n	800f0a6 <__swsetup_r+0x7a>
 800f080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f082:	b141      	cbz	r1, 800f096 <__swsetup_r+0x6a>
 800f084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f088:	4299      	cmp	r1, r3
 800f08a:	d002      	beq.n	800f092 <__swsetup_r+0x66>
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7fe fd63 	bl	800db58 <_free_r>
 800f092:	2300      	movs	r3, #0
 800f094:	6363      	str	r3, [r4, #52]	; 0x34
 800f096:	89a3      	ldrh	r3, [r4, #12]
 800f098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f09c:	81a3      	strh	r3, [r4, #12]
 800f09e:	2300      	movs	r3, #0
 800f0a0:	6063      	str	r3, [r4, #4]
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	f043 0308 	orr.w	r3, r3, #8
 800f0ac:	81a3      	strh	r3, [r4, #12]
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	b94b      	cbnz	r3, 800f0c6 <__swsetup_r+0x9a>
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0bc:	d003      	beq.n	800f0c6 <__swsetup_r+0x9a>
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	f000 f84d 	bl	800f160 <__smakebuf_r>
 800f0c6:	89a0      	ldrh	r0, [r4, #12]
 800f0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0cc:	f010 0301 	ands.w	r3, r0, #1
 800f0d0:	d00a      	beq.n	800f0e8 <__swsetup_r+0xbc>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60a3      	str	r3, [r4, #8]
 800f0d6:	6963      	ldr	r3, [r4, #20]
 800f0d8:	425b      	negs	r3, r3
 800f0da:	61a3      	str	r3, [r4, #24]
 800f0dc:	6923      	ldr	r3, [r4, #16]
 800f0de:	b943      	cbnz	r3, 800f0f2 <__swsetup_r+0xc6>
 800f0e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0e4:	d1ba      	bne.n	800f05c <__swsetup_r+0x30>
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	0781      	lsls	r1, r0, #30
 800f0ea:	bf58      	it	pl
 800f0ec:	6963      	ldrpl	r3, [r4, #20]
 800f0ee:	60a3      	str	r3, [r4, #8]
 800f0f0:	e7f4      	b.n	800f0dc <__swsetup_r+0xb0>
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	e7f7      	b.n	800f0e6 <__swsetup_r+0xba>
 800f0f6:	bf00      	nop
 800f0f8:	20000080 	.word	0x20000080
 800f0fc:	08010b04 	.word	0x08010b04
 800f100:	08010b24 	.word	0x08010b24
 800f104:	08010ae4 	.word	0x08010ae4

0800f108 <abort>:
 800f108:	b508      	push	{r3, lr}
 800f10a:	2006      	movs	r0, #6
 800f10c:	f000 f898 	bl	800f240 <raise>
 800f110:	2001      	movs	r0, #1
 800f112:	f7f4 f9f3 	bl	80034fc <_exit>

0800f116 <__swhatbuf_r>:
 800f116:	b570      	push	{r4, r5, r6, lr}
 800f118:	460e      	mov	r6, r1
 800f11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f11e:	2900      	cmp	r1, #0
 800f120:	b096      	sub	sp, #88	; 0x58
 800f122:	4614      	mov	r4, r2
 800f124:	461d      	mov	r5, r3
 800f126:	da08      	bge.n	800f13a <__swhatbuf_r+0x24>
 800f128:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	602a      	str	r2, [r5, #0]
 800f130:	061a      	lsls	r2, r3, #24
 800f132:	d410      	bmi.n	800f156 <__swhatbuf_r+0x40>
 800f134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f138:	e00e      	b.n	800f158 <__swhatbuf_r+0x42>
 800f13a:	466a      	mov	r2, sp
 800f13c:	f000 f89c 	bl	800f278 <_fstat_r>
 800f140:	2800      	cmp	r0, #0
 800f142:	dbf1      	blt.n	800f128 <__swhatbuf_r+0x12>
 800f144:	9a01      	ldr	r2, [sp, #4]
 800f146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f14a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f14e:	425a      	negs	r2, r3
 800f150:	415a      	adcs	r2, r3
 800f152:	602a      	str	r2, [r5, #0]
 800f154:	e7ee      	b.n	800f134 <__swhatbuf_r+0x1e>
 800f156:	2340      	movs	r3, #64	; 0x40
 800f158:	2000      	movs	r0, #0
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	b016      	add	sp, #88	; 0x58
 800f15e:	bd70      	pop	{r4, r5, r6, pc}

0800f160 <__smakebuf_r>:
 800f160:	898b      	ldrh	r3, [r1, #12]
 800f162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f164:	079d      	lsls	r5, r3, #30
 800f166:	4606      	mov	r6, r0
 800f168:	460c      	mov	r4, r1
 800f16a:	d507      	bpl.n	800f17c <__smakebuf_r+0x1c>
 800f16c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	6123      	str	r3, [r4, #16]
 800f174:	2301      	movs	r3, #1
 800f176:	6163      	str	r3, [r4, #20]
 800f178:	b002      	add	sp, #8
 800f17a:	bd70      	pop	{r4, r5, r6, pc}
 800f17c:	ab01      	add	r3, sp, #4
 800f17e:	466a      	mov	r2, sp
 800f180:	f7ff ffc9 	bl	800f116 <__swhatbuf_r>
 800f184:	9900      	ldr	r1, [sp, #0]
 800f186:	4605      	mov	r5, r0
 800f188:	4630      	mov	r0, r6
 800f18a:	f7fe fd51 	bl	800dc30 <_malloc_r>
 800f18e:	b948      	cbnz	r0, 800f1a4 <__smakebuf_r+0x44>
 800f190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f194:	059a      	lsls	r2, r3, #22
 800f196:	d4ef      	bmi.n	800f178 <__smakebuf_r+0x18>
 800f198:	f023 0303 	bic.w	r3, r3, #3
 800f19c:	f043 0302 	orr.w	r3, r3, #2
 800f1a0:	81a3      	strh	r3, [r4, #12]
 800f1a2:	e7e3      	b.n	800f16c <__smakebuf_r+0xc>
 800f1a4:	4b0d      	ldr	r3, [pc, #52]	; (800f1dc <__smakebuf_r+0x7c>)
 800f1a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1a8:	89a3      	ldrh	r3, [r4, #12]
 800f1aa:	6020      	str	r0, [r4, #0]
 800f1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1b0:	81a3      	strh	r3, [r4, #12]
 800f1b2:	9b00      	ldr	r3, [sp, #0]
 800f1b4:	6163      	str	r3, [r4, #20]
 800f1b6:	9b01      	ldr	r3, [sp, #4]
 800f1b8:	6120      	str	r0, [r4, #16]
 800f1ba:	b15b      	cbz	r3, 800f1d4 <__smakebuf_r+0x74>
 800f1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	f000 f86b 	bl	800f29c <_isatty_r>
 800f1c6:	b128      	cbz	r0, 800f1d4 <__smakebuf_r+0x74>
 800f1c8:	89a3      	ldrh	r3, [r4, #12]
 800f1ca:	f023 0303 	bic.w	r3, r3, #3
 800f1ce:	f043 0301 	orr.w	r3, r3, #1
 800f1d2:	81a3      	strh	r3, [r4, #12]
 800f1d4:	89a0      	ldrh	r0, [r4, #12]
 800f1d6:	4305      	orrs	r5, r0
 800f1d8:	81a5      	strh	r5, [r4, #12]
 800f1da:	e7cd      	b.n	800f178 <__smakebuf_r+0x18>
 800f1dc:	0800ea61 	.word	0x0800ea61

0800f1e0 <_malloc_usable_size_r>:
 800f1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1e4:	1f18      	subs	r0, r3, #4
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	bfbc      	itt	lt
 800f1ea:	580b      	ldrlt	r3, [r1, r0]
 800f1ec:	18c0      	addlt	r0, r0, r3
 800f1ee:	4770      	bx	lr

0800f1f0 <_raise_r>:
 800f1f0:	291f      	cmp	r1, #31
 800f1f2:	b538      	push	{r3, r4, r5, lr}
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	460d      	mov	r5, r1
 800f1f8:	d904      	bls.n	800f204 <_raise_r+0x14>
 800f1fa:	2316      	movs	r3, #22
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f206:	b112      	cbz	r2, 800f20e <_raise_r+0x1e>
 800f208:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f20c:	b94b      	cbnz	r3, 800f222 <_raise_r+0x32>
 800f20e:	4620      	mov	r0, r4
 800f210:	f000 f830 	bl	800f274 <_getpid_r>
 800f214:	462a      	mov	r2, r5
 800f216:	4601      	mov	r1, r0
 800f218:	4620      	mov	r0, r4
 800f21a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f21e:	f000 b817 	b.w	800f250 <_kill_r>
 800f222:	2b01      	cmp	r3, #1
 800f224:	d00a      	beq.n	800f23c <_raise_r+0x4c>
 800f226:	1c59      	adds	r1, r3, #1
 800f228:	d103      	bne.n	800f232 <_raise_r+0x42>
 800f22a:	2316      	movs	r3, #22
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	2001      	movs	r0, #1
 800f230:	e7e7      	b.n	800f202 <_raise_r+0x12>
 800f232:	2400      	movs	r4, #0
 800f234:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f238:	4628      	mov	r0, r5
 800f23a:	4798      	blx	r3
 800f23c:	2000      	movs	r0, #0
 800f23e:	e7e0      	b.n	800f202 <_raise_r+0x12>

0800f240 <raise>:
 800f240:	4b02      	ldr	r3, [pc, #8]	; (800f24c <raise+0xc>)
 800f242:	4601      	mov	r1, r0
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	f7ff bfd3 	b.w	800f1f0 <_raise_r>
 800f24a:	bf00      	nop
 800f24c:	20000080 	.word	0x20000080

0800f250 <_kill_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4d07      	ldr	r5, [pc, #28]	; (800f270 <_kill_r+0x20>)
 800f254:	2300      	movs	r3, #0
 800f256:	4604      	mov	r4, r0
 800f258:	4608      	mov	r0, r1
 800f25a:	4611      	mov	r1, r2
 800f25c:	602b      	str	r3, [r5, #0]
 800f25e:	f7f4 f93d 	bl	80034dc <_kill>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d102      	bne.n	800f26c <_kill_r+0x1c>
 800f266:	682b      	ldr	r3, [r5, #0]
 800f268:	b103      	cbz	r3, 800f26c <_kill_r+0x1c>
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	bd38      	pop	{r3, r4, r5, pc}
 800f26e:	bf00      	nop
 800f270:	200009e0 	.word	0x200009e0

0800f274 <_getpid_r>:
 800f274:	f7f4 b92a 	b.w	80034cc <_getpid>

0800f278 <_fstat_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d07      	ldr	r5, [pc, #28]	; (800f298 <_fstat_r+0x20>)
 800f27c:	2300      	movs	r3, #0
 800f27e:	4604      	mov	r4, r0
 800f280:	4608      	mov	r0, r1
 800f282:	4611      	mov	r1, r2
 800f284:	602b      	str	r3, [r5, #0]
 800f286:	f7f4 f988 	bl	800359a <_fstat>
 800f28a:	1c43      	adds	r3, r0, #1
 800f28c:	d102      	bne.n	800f294 <_fstat_r+0x1c>
 800f28e:	682b      	ldr	r3, [r5, #0]
 800f290:	b103      	cbz	r3, 800f294 <_fstat_r+0x1c>
 800f292:	6023      	str	r3, [r4, #0]
 800f294:	bd38      	pop	{r3, r4, r5, pc}
 800f296:	bf00      	nop
 800f298:	200009e0 	.word	0x200009e0

0800f29c <_isatty_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4d06      	ldr	r5, [pc, #24]	; (800f2b8 <_isatty_r+0x1c>)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	602b      	str	r3, [r5, #0]
 800f2a8:	f7f4 f987 	bl	80035ba <_isatty>
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	d102      	bne.n	800f2b6 <_isatty_r+0x1a>
 800f2b0:	682b      	ldr	r3, [r5, #0]
 800f2b2:	b103      	cbz	r3, 800f2b6 <_isatty_r+0x1a>
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
 800f2b8:	200009e0 	.word	0x200009e0
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <sin>:
 800f2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2c2:	ec53 2b10 	vmov	r2, r3, d0
 800f2c6:	4828      	ldr	r0, [pc, #160]	; (800f368 <sin+0xa8>)
 800f2c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f2cc:	4281      	cmp	r1, r0
 800f2ce:	dc07      	bgt.n	800f2e0 <sin+0x20>
 800f2d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f360 <sin+0xa0>
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	b005      	add	sp, #20
 800f2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2dc:	f000 be6c 	b.w	800ffb8 <__kernel_sin>
 800f2e0:	4822      	ldr	r0, [pc, #136]	; (800f36c <sin+0xac>)
 800f2e2:	4281      	cmp	r1, r0
 800f2e4:	dd09      	ble.n	800f2fa <sin+0x3a>
 800f2e6:	ee10 0a10 	vmov	r0, s0
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	f7f0 ffcc 	bl	8000288 <__aeabi_dsub>
 800f2f0:	ec41 0b10 	vmov	d0, r0, r1
 800f2f4:	b005      	add	sp, #20
 800f2f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2fa:	4668      	mov	r0, sp
 800f2fc:	f000 f838 	bl	800f370 <__ieee754_rem_pio2>
 800f300:	f000 0003 	and.w	r0, r0, #3
 800f304:	2801      	cmp	r0, #1
 800f306:	d00c      	beq.n	800f322 <sin+0x62>
 800f308:	2802      	cmp	r0, #2
 800f30a:	d011      	beq.n	800f330 <sin+0x70>
 800f30c:	b9f0      	cbnz	r0, 800f34c <sin+0x8c>
 800f30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f312:	ed9d 0b00 	vldr	d0, [sp]
 800f316:	2001      	movs	r0, #1
 800f318:	f000 fe4e 	bl	800ffb8 <__kernel_sin>
 800f31c:	ec51 0b10 	vmov	r0, r1, d0
 800f320:	e7e6      	b.n	800f2f0 <sin+0x30>
 800f322:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f326:	ed9d 0b00 	vldr	d0, [sp]
 800f32a:	f000 fa2d 	bl	800f788 <__kernel_cos>
 800f32e:	e7f5      	b.n	800f31c <sin+0x5c>
 800f330:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f334:	ed9d 0b00 	vldr	d0, [sp]
 800f338:	2001      	movs	r0, #1
 800f33a:	f000 fe3d 	bl	800ffb8 <__kernel_sin>
 800f33e:	ec53 2b10 	vmov	r2, r3, d0
 800f342:	ee10 0a10 	vmov	r0, s0
 800f346:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f34a:	e7d1      	b.n	800f2f0 <sin+0x30>
 800f34c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f350:	ed9d 0b00 	vldr	d0, [sp]
 800f354:	f000 fa18 	bl	800f788 <__kernel_cos>
 800f358:	e7f1      	b.n	800f33e <sin+0x7e>
 800f35a:	bf00      	nop
 800f35c:	f3af 8000 	nop.w
	...
 800f368:	3fe921fb 	.word	0x3fe921fb
 800f36c:	7fefffff 	.word	0x7fefffff

0800f370 <__ieee754_rem_pio2>:
 800f370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f374:	ed2d 8b02 	vpush	{d8}
 800f378:	ec55 4b10 	vmov	r4, r5, d0
 800f37c:	4bca      	ldr	r3, [pc, #808]	; (800f6a8 <__ieee754_rem_pio2+0x338>)
 800f37e:	b08b      	sub	sp, #44	; 0x2c
 800f380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f384:	4598      	cmp	r8, r3
 800f386:	4682      	mov	sl, r0
 800f388:	9502      	str	r5, [sp, #8]
 800f38a:	dc08      	bgt.n	800f39e <__ieee754_rem_pio2+0x2e>
 800f38c:	2200      	movs	r2, #0
 800f38e:	2300      	movs	r3, #0
 800f390:	ed80 0b00 	vstr	d0, [r0]
 800f394:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f398:	f04f 0b00 	mov.w	fp, #0
 800f39c:	e028      	b.n	800f3f0 <__ieee754_rem_pio2+0x80>
 800f39e:	4bc3      	ldr	r3, [pc, #780]	; (800f6ac <__ieee754_rem_pio2+0x33c>)
 800f3a0:	4598      	cmp	r8, r3
 800f3a2:	dc78      	bgt.n	800f496 <__ieee754_rem_pio2+0x126>
 800f3a4:	9b02      	ldr	r3, [sp, #8]
 800f3a6:	4ec2      	ldr	r6, [pc, #776]	; (800f6b0 <__ieee754_rem_pio2+0x340>)
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	ee10 0a10 	vmov	r0, s0
 800f3ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800f670 <__ieee754_rem_pio2+0x300>)
 800f3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	dd39      	ble.n	800f42c <__ieee754_rem_pio2+0xbc>
 800f3b8:	f7f0 ff66 	bl	8000288 <__aeabi_dsub>
 800f3bc:	45b0      	cmp	r8, r6
 800f3be:	4604      	mov	r4, r0
 800f3c0:	460d      	mov	r5, r1
 800f3c2:	d01b      	beq.n	800f3fc <__ieee754_rem_pio2+0x8c>
 800f3c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800f678 <__ieee754_rem_pio2+0x308>)
 800f3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ca:	f7f0 ff5d 	bl	8000288 <__aeabi_dsub>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	e9ca 2300 	strd	r2, r3, [sl]
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	f7f0 ff55 	bl	8000288 <__aeabi_dsub>
 800f3de:	a3a6      	add	r3, pc, #664	; (adr r3, 800f678 <__ieee754_rem_pio2+0x308>)
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f7f0 ff50 	bl	8000288 <__aeabi_dsub>
 800f3e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f3ec:	f04f 0b01 	mov.w	fp, #1
 800f3f0:	4658      	mov	r0, fp
 800f3f2:	b00b      	add	sp, #44	; 0x2c
 800f3f4:	ecbd 8b02 	vpop	{d8}
 800f3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800f680 <__ieee754_rem_pio2+0x310>)
 800f3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f402:	f7f0 ff41 	bl	8000288 <__aeabi_dsub>
 800f406:	a3a0      	add	r3, pc, #640	; (adr r3, 800f688 <__ieee754_rem_pio2+0x318>)
 800f408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40c:	4604      	mov	r4, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	f7f0 ff3a 	bl	8000288 <__aeabi_dsub>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	e9ca 2300 	strd	r2, r3, [sl]
 800f41c:	4620      	mov	r0, r4
 800f41e:	4629      	mov	r1, r5
 800f420:	f7f0 ff32 	bl	8000288 <__aeabi_dsub>
 800f424:	a398      	add	r3, pc, #608	; (adr r3, 800f688 <__ieee754_rem_pio2+0x318>)
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	e7db      	b.n	800f3e4 <__ieee754_rem_pio2+0x74>
 800f42c:	f7f0 ff2e 	bl	800028c <__adddf3>
 800f430:	45b0      	cmp	r8, r6
 800f432:	4604      	mov	r4, r0
 800f434:	460d      	mov	r5, r1
 800f436:	d016      	beq.n	800f466 <__ieee754_rem_pio2+0xf6>
 800f438:	a38f      	add	r3, pc, #572	; (adr r3, 800f678 <__ieee754_rem_pio2+0x308>)
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	f7f0 ff25 	bl	800028c <__adddf3>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	e9ca 2300 	strd	r2, r3, [sl]
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	f7f0 ff1b 	bl	8000288 <__aeabi_dsub>
 800f452:	a389      	add	r3, pc, #548	; (adr r3, 800f678 <__ieee754_rem_pio2+0x308>)
 800f454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f458:	f7f0 ff18 	bl	800028c <__adddf3>
 800f45c:	f04f 3bff 	mov.w	fp, #4294967295
 800f460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f464:	e7c4      	b.n	800f3f0 <__ieee754_rem_pio2+0x80>
 800f466:	a386      	add	r3, pc, #536	; (adr r3, 800f680 <__ieee754_rem_pio2+0x310>)
 800f468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46c:	f7f0 ff0e 	bl	800028c <__adddf3>
 800f470:	a385      	add	r3, pc, #532	; (adr r3, 800f688 <__ieee754_rem_pio2+0x318>)
 800f472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f476:	4604      	mov	r4, r0
 800f478:	460d      	mov	r5, r1
 800f47a:	f7f0 ff07 	bl	800028c <__adddf3>
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	e9ca 2300 	strd	r2, r3, [sl]
 800f486:	4620      	mov	r0, r4
 800f488:	4629      	mov	r1, r5
 800f48a:	f7f0 fefd 	bl	8000288 <__aeabi_dsub>
 800f48e:	a37e      	add	r3, pc, #504	; (adr r3, 800f688 <__ieee754_rem_pio2+0x318>)
 800f490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f494:	e7e0      	b.n	800f458 <__ieee754_rem_pio2+0xe8>
 800f496:	4b87      	ldr	r3, [pc, #540]	; (800f6b4 <__ieee754_rem_pio2+0x344>)
 800f498:	4598      	cmp	r8, r3
 800f49a:	f300 80d9 	bgt.w	800f650 <__ieee754_rem_pio2+0x2e0>
 800f49e:	f000 fe49 	bl	8010134 <fabs>
 800f4a2:	ec55 4b10 	vmov	r4, r5, d0
 800f4a6:	ee10 0a10 	vmov	r0, s0
 800f4aa:	a379      	add	r3, pc, #484	; (adr r3, 800f690 <__ieee754_rem_pio2+0x320>)
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	f7f1 f8a1 	bl	80005f8 <__aeabi_dmul>
 800f4b6:	4b80      	ldr	r3, [pc, #512]	; (800f6b8 <__ieee754_rem_pio2+0x348>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f7f0 fee7 	bl	800028c <__adddf3>
 800f4be:	f7f1 fb4b 	bl	8000b58 <__aeabi_d2iz>
 800f4c2:	4683      	mov	fp, r0
 800f4c4:	f7f1 f82e 	bl	8000524 <__aeabi_i2d>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	ec43 2b18 	vmov	d8, r2, r3
 800f4d0:	a367      	add	r3, pc, #412	; (adr r3, 800f670 <__ieee754_rem_pio2+0x300>)
 800f4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d6:	f7f1 f88f 	bl	80005f8 <__aeabi_dmul>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	4620      	mov	r0, r4
 800f4e0:	4629      	mov	r1, r5
 800f4e2:	f7f0 fed1 	bl	8000288 <__aeabi_dsub>
 800f4e6:	a364      	add	r3, pc, #400	; (adr r3, 800f678 <__ieee754_rem_pio2+0x308>)
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	4606      	mov	r6, r0
 800f4ee:	460f      	mov	r7, r1
 800f4f0:	ec51 0b18 	vmov	r0, r1, d8
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	f1bb 0f1f 	cmp.w	fp, #31
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	460d      	mov	r5, r1
 800f500:	dc0d      	bgt.n	800f51e <__ieee754_rem_pio2+0x1ae>
 800f502:	4b6e      	ldr	r3, [pc, #440]	; (800f6bc <__ieee754_rem_pio2+0x34c>)
 800f504:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f50c:	4543      	cmp	r3, r8
 800f50e:	d006      	beq.n	800f51e <__ieee754_rem_pio2+0x1ae>
 800f510:	4622      	mov	r2, r4
 800f512:	462b      	mov	r3, r5
 800f514:	4630      	mov	r0, r6
 800f516:	4639      	mov	r1, r7
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	e00f      	b.n	800f53e <__ieee754_rem_pio2+0x1ce>
 800f51e:	462b      	mov	r3, r5
 800f520:	4622      	mov	r2, r4
 800f522:	4630      	mov	r0, r6
 800f524:	4639      	mov	r1, r7
 800f526:	f7f0 feaf 	bl	8000288 <__aeabi_dsub>
 800f52a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f52e:	9303      	str	r3, [sp, #12]
 800f530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f534:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f538:	f1b8 0f10 	cmp.w	r8, #16
 800f53c:	dc02      	bgt.n	800f544 <__ieee754_rem_pio2+0x1d4>
 800f53e:	e9ca 0100 	strd	r0, r1, [sl]
 800f542:	e039      	b.n	800f5b8 <__ieee754_rem_pio2+0x248>
 800f544:	a34e      	add	r3, pc, #312	; (adr r3, 800f680 <__ieee754_rem_pio2+0x310>)
 800f546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54a:	ec51 0b18 	vmov	r0, r1, d8
 800f54e:	f7f1 f853 	bl	80005f8 <__aeabi_dmul>
 800f552:	4604      	mov	r4, r0
 800f554:	460d      	mov	r5, r1
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f0 fe93 	bl	8000288 <__aeabi_dsub>
 800f562:	4602      	mov	r2, r0
 800f564:	460b      	mov	r3, r1
 800f566:	4680      	mov	r8, r0
 800f568:	4689      	mov	r9, r1
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	f7f0 fe8b 	bl	8000288 <__aeabi_dsub>
 800f572:	4622      	mov	r2, r4
 800f574:	462b      	mov	r3, r5
 800f576:	f7f0 fe87 	bl	8000288 <__aeabi_dsub>
 800f57a:	a343      	add	r3, pc, #268	; (adr r3, 800f688 <__ieee754_rem_pio2+0x318>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	4604      	mov	r4, r0
 800f582:	460d      	mov	r5, r1
 800f584:	ec51 0b18 	vmov	r0, r1, d8
 800f588:	f7f1 f836 	bl	80005f8 <__aeabi_dmul>
 800f58c:	4622      	mov	r2, r4
 800f58e:	462b      	mov	r3, r5
 800f590:	f7f0 fe7a 	bl	8000288 <__aeabi_dsub>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	4604      	mov	r4, r0
 800f59a:	460d      	mov	r5, r1
 800f59c:	4640      	mov	r0, r8
 800f59e:	4649      	mov	r1, r9
 800f5a0:	f7f0 fe72 	bl	8000288 <__aeabi_dsub>
 800f5a4:	9a03      	ldr	r2, [sp, #12]
 800f5a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	2b31      	cmp	r3, #49	; 0x31
 800f5ae:	dc24      	bgt.n	800f5fa <__ieee754_rem_pio2+0x28a>
 800f5b0:	e9ca 0100 	strd	r0, r1, [sl]
 800f5b4:	4646      	mov	r6, r8
 800f5b6:	464f      	mov	r7, r9
 800f5b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800f5bc:	4630      	mov	r0, r6
 800f5be:	4642      	mov	r2, r8
 800f5c0:	464b      	mov	r3, r9
 800f5c2:	4639      	mov	r1, r7
 800f5c4:	f7f0 fe60 	bl	8000288 <__aeabi_dsub>
 800f5c8:	462b      	mov	r3, r5
 800f5ca:	4622      	mov	r2, r4
 800f5cc:	f7f0 fe5c 	bl	8000288 <__aeabi_dsub>
 800f5d0:	9b02      	ldr	r3, [sp, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f5d8:	f6bf af0a 	bge.w	800f3f0 <__ieee754_rem_pio2+0x80>
 800f5dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f5e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800f5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5e8:	f8ca 8000 	str.w	r8, [sl]
 800f5ec:	f8ca 0008 	str.w	r0, [sl, #8]
 800f5f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800f5f4:	f1cb 0b00 	rsb	fp, fp, #0
 800f5f8:	e6fa      	b.n	800f3f0 <__ieee754_rem_pio2+0x80>
 800f5fa:	a327      	add	r3, pc, #156	; (adr r3, 800f698 <__ieee754_rem_pio2+0x328>)
 800f5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f600:	ec51 0b18 	vmov	r0, r1, d8
 800f604:	f7f0 fff8 	bl	80005f8 <__aeabi_dmul>
 800f608:	4604      	mov	r4, r0
 800f60a:	460d      	mov	r5, r1
 800f60c:	4602      	mov	r2, r0
 800f60e:	460b      	mov	r3, r1
 800f610:	4640      	mov	r0, r8
 800f612:	4649      	mov	r1, r9
 800f614:	f7f0 fe38 	bl	8000288 <__aeabi_dsub>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	4606      	mov	r6, r0
 800f61e:	460f      	mov	r7, r1
 800f620:	4640      	mov	r0, r8
 800f622:	4649      	mov	r1, r9
 800f624:	f7f0 fe30 	bl	8000288 <__aeabi_dsub>
 800f628:	4622      	mov	r2, r4
 800f62a:	462b      	mov	r3, r5
 800f62c:	f7f0 fe2c 	bl	8000288 <__aeabi_dsub>
 800f630:	a31b      	add	r3, pc, #108	; (adr r3, 800f6a0 <__ieee754_rem_pio2+0x330>)
 800f632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f636:	4604      	mov	r4, r0
 800f638:	460d      	mov	r5, r1
 800f63a:	ec51 0b18 	vmov	r0, r1, d8
 800f63e:	f7f0 ffdb 	bl	80005f8 <__aeabi_dmul>
 800f642:	4622      	mov	r2, r4
 800f644:	462b      	mov	r3, r5
 800f646:	f7f0 fe1f 	bl	8000288 <__aeabi_dsub>
 800f64a:	4604      	mov	r4, r0
 800f64c:	460d      	mov	r5, r1
 800f64e:	e75f      	b.n	800f510 <__ieee754_rem_pio2+0x1a0>
 800f650:	4b1b      	ldr	r3, [pc, #108]	; (800f6c0 <__ieee754_rem_pio2+0x350>)
 800f652:	4598      	cmp	r8, r3
 800f654:	dd36      	ble.n	800f6c4 <__ieee754_rem_pio2+0x354>
 800f656:	ee10 2a10 	vmov	r2, s0
 800f65a:	462b      	mov	r3, r5
 800f65c:	4620      	mov	r0, r4
 800f65e:	4629      	mov	r1, r5
 800f660:	f7f0 fe12 	bl	8000288 <__aeabi_dsub>
 800f664:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f668:	e9ca 0100 	strd	r0, r1, [sl]
 800f66c:	e694      	b.n	800f398 <__ieee754_rem_pio2+0x28>
 800f66e:	bf00      	nop
 800f670:	54400000 	.word	0x54400000
 800f674:	3ff921fb 	.word	0x3ff921fb
 800f678:	1a626331 	.word	0x1a626331
 800f67c:	3dd0b461 	.word	0x3dd0b461
 800f680:	1a600000 	.word	0x1a600000
 800f684:	3dd0b461 	.word	0x3dd0b461
 800f688:	2e037073 	.word	0x2e037073
 800f68c:	3ba3198a 	.word	0x3ba3198a
 800f690:	6dc9c883 	.word	0x6dc9c883
 800f694:	3fe45f30 	.word	0x3fe45f30
 800f698:	2e000000 	.word	0x2e000000
 800f69c:	3ba3198a 	.word	0x3ba3198a
 800f6a0:	252049c1 	.word	0x252049c1
 800f6a4:	397b839a 	.word	0x397b839a
 800f6a8:	3fe921fb 	.word	0x3fe921fb
 800f6ac:	4002d97b 	.word	0x4002d97b
 800f6b0:	3ff921fb 	.word	0x3ff921fb
 800f6b4:	413921fb 	.word	0x413921fb
 800f6b8:	3fe00000 	.word	0x3fe00000
 800f6bc:	08010b44 	.word	0x08010b44
 800f6c0:	7fefffff 	.word	0x7fefffff
 800f6c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f6c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f6cc:	ee10 0a10 	vmov	r0, s0
 800f6d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f6d4:	ee10 6a10 	vmov	r6, s0
 800f6d8:	460f      	mov	r7, r1
 800f6da:	f7f1 fa3d 	bl	8000b58 <__aeabi_d2iz>
 800f6de:	f7f0 ff21 	bl	8000524 <__aeabi_i2d>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	4639      	mov	r1, r7
 800f6ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6ee:	f7f0 fdcb 	bl	8000288 <__aeabi_dsub>
 800f6f2:	4b23      	ldr	r3, [pc, #140]	; (800f780 <__ieee754_rem_pio2+0x410>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f7f0 ff7f 	bl	80005f8 <__aeabi_dmul>
 800f6fa:	460f      	mov	r7, r1
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	f7f1 fa2b 	bl	8000b58 <__aeabi_d2iz>
 800f702:	f7f0 ff0f 	bl	8000524 <__aeabi_i2d>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4630      	mov	r0, r6
 800f70c:	4639      	mov	r1, r7
 800f70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f712:	f7f0 fdb9 	bl	8000288 <__aeabi_dsub>
 800f716:	4b1a      	ldr	r3, [pc, #104]	; (800f780 <__ieee754_rem_pio2+0x410>)
 800f718:	2200      	movs	r2, #0
 800f71a:	f7f0 ff6d 	bl	80005f8 <__aeabi_dmul>
 800f71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f722:	ad04      	add	r5, sp, #16
 800f724:	f04f 0803 	mov.w	r8, #3
 800f728:	46a9      	mov	r9, r5
 800f72a:	2600      	movs	r6, #0
 800f72c:	2700      	movs	r7, #0
 800f72e:	4632      	mov	r2, r6
 800f730:	463b      	mov	r3, r7
 800f732:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f736:	46c3      	mov	fp, r8
 800f738:	3d08      	subs	r5, #8
 800f73a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f73e:	f7f1 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f742:	2800      	cmp	r0, #0
 800f744:	d1f3      	bne.n	800f72e <__ieee754_rem_pio2+0x3be>
 800f746:	4b0f      	ldr	r3, [pc, #60]	; (800f784 <__ieee754_rem_pio2+0x414>)
 800f748:	9301      	str	r3, [sp, #4]
 800f74a:	2302      	movs	r3, #2
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	4622      	mov	r2, r4
 800f750:	465b      	mov	r3, fp
 800f752:	4651      	mov	r1, sl
 800f754:	4648      	mov	r0, r9
 800f756:	f000 f8df 	bl	800f918 <__kernel_rem_pio2>
 800f75a:	9b02      	ldr	r3, [sp, #8]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	4683      	mov	fp, r0
 800f760:	f6bf ae46 	bge.w	800f3f0 <__ieee754_rem_pio2+0x80>
 800f764:	e9da 2100 	ldrd	r2, r1, [sl]
 800f768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f76c:	e9ca 2300 	strd	r2, r3, [sl]
 800f770:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f778:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f77c:	e73a      	b.n	800f5f4 <__ieee754_rem_pio2+0x284>
 800f77e:	bf00      	nop
 800f780:	41700000 	.word	0x41700000
 800f784:	08010bc4 	.word	0x08010bc4

0800f788 <__kernel_cos>:
 800f788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	ec57 6b10 	vmov	r6, r7, d0
 800f790:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f794:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f798:	ed8d 1b00 	vstr	d1, [sp]
 800f79c:	da07      	bge.n	800f7ae <__kernel_cos+0x26>
 800f79e:	ee10 0a10 	vmov	r0, s0
 800f7a2:	4639      	mov	r1, r7
 800f7a4:	f7f1 f9d8 	bl	8000b58 <__aeabi_d2iz>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	f000 8088 	beq.w	800f8be <__kernel_cos+0x136>
 800f7ae:	4632      	mov	r2, r6
 800f7b0:	463b      	mov	r3, r7
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	f7f0 ff1f 	bl	80005f8 <__aeabi_dmul>
 800f7ba:	4b51      	ldr	r3, [pc, #324]	; (800f900 <__kernel_cos+0x178>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	4604      	mov	r4, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	f7f0 ff19 	bl	80005f8 <__aeabi_dmul>
 800f7c6:	a340      	add	r3, pc, #256	; (adr r3, 800f8c8 <__kernel_cos+0x140>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	4682      	mov	sl, r0
 800f7ce:	468b      	mov	fp, r1
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	f7f0 ff10 	bl	80005f8 <__aeabi_dmul>
 800f7d8:	a33d      	add	r3, pc, #244	; (adr r3, 800f8d0 <__kernel_cos+0x148>)
 800f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7de:	f7f0 fd55 	bl	800028c <__adddf3>
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	462b      	mov	r3, r5
 800f7e6:	f7f0 ff07 	bl	80005f8 <__aeabi_dmul>
 800f7ea:	a33b      	add	r3, pc, #236	; (adr r3, 800f8d8 <__kernel_cos+0x150>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f0 fd4a 	bl	8000288 <__aeabi_dsub>
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	462b      	mov	r3, r5
 800f7f8:	f7f0 fefe 	bl	80005f8 <__aeabi_dmul>
 800f7fc:	a338      	add	r3, pc, #224	; (adr r3, 800f8e0 <__kernel_cos+0x158>)
 800f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f802:	f7f0 fd43 	bl	800028c <__adddf3>
 800f806:	4622      	mov	r2, r4
 800f808:	462b      	mov	r3, r5
 800f80a:	f7f0 fef5 	bl	80005f8 <__aeabi_dmul>
 800f80e:	a336      	add	r3, pc, #216	; (adr r3, 800f8e8 <__kernel_cos+0x160>)
 800f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f814:	f7f0 fd38 	bl	8000288 <__aeabi_dsub>
 800f818:	4622      	mov	r2, r4
 800f81a:	462b      	mov	r3, r5
 800f81c:	f7f0 feec 	bl	80005f8 <__aeabi_dmul>
 800f820:	a333      	add	r3, pc, #204	; (adr r3, 800f8f0 <__kernel_cos+0x168>)
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f7f0 fd31 	bl	800028c <__adddf3>
 800f82a:	4622      	mov	r2, r4
 800f82c:	462b      	mov	r3, r5
 800f82e:	f7f0 fee3 	bl	80005f8 <__aeabi_dmul>
 800f832:	4622      	mov	r2, r4
 800f834:	462b      	mov	r3, r5
 800f836:	f7f0 fedf 	bl	80005f8 <__aeabi_dmul>
 800f83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f83e:	4604      	mov	r4, r0
 800f840:	460d      	mov	r5, r1
 800f842:	4630      	mov	r0, r6
 800f844:	4639      	mov	r1, r7
 800f846:	f7f0 fed7 	bl	80005f8 <__aeabi_dmul>
 800f84a:	460b      	mov	r3, r1
 800f84c:	4602      	mov	r2, r0
 800f84e:	4629      	mov	r1, r5
 800f850:	4620      	mov	r0, r4
 800f852:	f7f0 fd19 	bl	8000288 <__aeabi_dsub>
 800f856:	4b2b      	ldr	r3, [pc, #172]	; (800f904 <__kernel_cos+0x17c>)
 800f858:	4598      	cmp	r8, r3
 800f85a:	4606      	mov	r6, r0
 800f85c:	460f      	mov	r7, r1
 800f85e:	dc10      	bgt.n	800f882 <__kernel_cos+0xfa>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	4650      	mov	r0, sl
 800f866:	4659      	mov	r1, fp
 800f868:	f7f0 fd0e 	bl	8000288 <__aeabi_dsub>
 800f86c:	460b      	mov	r3, r1
 800f86e:	4926      	ldr	r1, [pc, #152]	; (800f908 <__kernel_cos+0x180>)
 800f870:	4602      	mov	r2, r0
 800f872:	2000      	movs	r0, #0
 800f874:	f7f0 fd08 	bl	8000288 <__aeabi_dsub>
 800f878:	ec41 0b10 	vmov	d0, r0, r1
 800f87c:	b003      	add	sp, #12
 800f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f882:	4b22      	ldr	r3, [pc, #136]	; (800f90c <__kernel_cos+0x184>)
 800f884:	4920      	ldr	r1, [pc, #128]	; (800f908 <__kernel_cos+0x180>)
 800f886:	4598      	cmp	r8, r3
 800f888:	bfcc      	ite	gt
 800f88a:	4d21      	ldrgt	r5, [pc, #132]	; (800f910 <__kernel_cos+0x188>)
 800f88c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f890:	2400      	movs	r4, #0
 800f892:	4622      	mov	r2, r4
 800f894:	462b      	mov	r3, r5
 800f896:	2000      	movs	r0, #0
 800f898:	f7f0 fcf6 	bl	8000288 <__aeabi_dsub>
 800f89c:	4622      	mov	r2, r4
 800f89e:	4680      	mov	r8, r0
 800f8a0:	4689      	mov	r9, r1
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4650      	mov	r0, sl
 800f8a6:	4659      	mov	r1, fp
 800f8a8:	f7f0 fcee 	bl	8000288 <__aeabi_dsub>
 800f8ac:	4632      	mov	r2, r6
 800f8ae:	463b      	mov	r3, r7
 800f8b0:	f7f0 fcea 	bl	8000288 <__aeabi_dsub>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	460b      	mov	r3, r1
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	4649      	mov	r1, r9
 800f8bc:	e7da      	b.n	800f874 <__kernel_cos+0xec>
 800f8be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f8f8 <__kernel_cos+0x170>
 800f8c2:	e7db      	b.n	800f87c <__kernel_cos+0xf4>
 800f8c4:	f3af 8000 	nop.w
 800f8c8:	be8838d4 	.word	0xbe8838d4
 800f8cc:	bda8fae9 	.word	0xbda8fae9
 800f8d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f8d4:	3e21ee9e 	.word	0x3e21ee9e
 800f8d8:	809c52ad 	.word	0x809c52ad
 800f8dc:	3e927e4f 	.word	0x3e927e4f
 800f8e0:	19cb1590 	.word	0x19cb1590
 800f8e4:	3efa01a0 	.word	0x3efa01a0
 800f8e8:	16c15177 	.word	0x16c15177
 800f8ec:	3f56c16c 	.word	0x3f56c16c
 800f8f0:	5555554c 	.word	0x5555554c
 800f8f4:	3fa55555 	.word	0x3fa55555
 800f8f8:	00000000 	.word	0x00000000
 800f8fc:	3ff00000 	.word	0x3ff00000
 800f900:	3fe00000 	.word	0x3fe00000
 800f904:	3fd33332 	.word	0x3fd33332
 800f908:	3ff00000 	.word	0x3ff00000
 800f90c:	3fe90000 	.word	0x3fe90000
 800f910:	3fd20000 	.word	0x3fd20000
 800f914:	00000000 	.word	0x00000000

0800f918 <__kernel_rem_pio2>:
 800f918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	ed2d 8b02 	vpush	{d8}
 800f920:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f924:	f112 0f14 	cmn.w	r2, #20
 800f928:	9308      	str	r3, [sp, #32]
 800f92a:	9101      	str	r1, [sp, #4]
 800f92c:	4bc4      	ldr	r3, [pc, #784]	; (800fc40 <__kernel_rem_pio2+0x328>)
 800f92e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f930:	900b      	str	r0, [sp, #44]	; 0x2c
 800f932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f936:	9302      	str	r3, [sp, #8]
 800f938:	9b08      	ldr	r3, [sp, #32]
 800f93a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f93e:	bfa8      	it	ge
 800f940:	1ed4      	subge	r4, r2, #3
 800f942:	9306      	str	r3, [sp, #24]
 800f944:	bfb2      	itee	lt
 800f946:	2400      	movlt	r4, #0
 800f948:	2318      	movge	r3, #24
 800f94a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f94e:	f06f 0317 	mvn.w	r3, #23
 800f952:	fb04 3303 	mla	r3, r4, r3, r3
 800f956:	eb03 0a02 	add.w	sl, r3, r2
 800f95a:	9b02      	ldr	r3, [sp, #8]
 800f95c:	9a06      	ldr	r2, [sp, #24]
 800f95e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fc30 <__kernel_rem_pio2+0x318>
 800f962:	eb03 0802 	add.w	r8, r3, r2
 800f966:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f968:	1aa7      	subs	r7, r4, r2
 800f96a:	ae22      	add	r6, sp, #136	; 0x88
 800f96c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f970:	2500      	movs	r5, #0
 800f972:	4545      	cmp	r5, r8
 800f974:	dd13      	ble.n	800f99e <__kernel_rem_pio2+0x86>
 800f976:	9b08      	ldr	r3, [sp, #32]
 800f978:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fc30 <__kernel_rem_pio2+0x318>
 800f97c:	aa22      	add	r2, sp, #136	; 0x88
 800f97e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f982:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f986:	f04f 0800 	mov.w	r8, #0
 800f98a:	9b02      	ldr	r3, [sp, #8]
 800f98c:	4598      	cmp	r8, r3
 800f98e:	dc2f      	bgt.n	800f9f0 <__kernel_rem_pio2+0xd8>
 800f990:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f994:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f998:	462f      	mov	r7, r5
 800f99a:	2600      	movs	r6, #0
 800f99c:	e01b      	b.n	800f9d6 <__kernel_rem_pio2+0xbe>
 800f99e:	42ef      	cmn	r7, r5
 800f9a0:	d407      	bmi.n	800f9b2 <__kernel_rem_pio2+0x9a>
 800f9a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f9a6:	f7f0 fdbd 	bl	8000524 <__aeabi_i2d>
 800f9aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f9ae:	3501      	adds	r5, #1
 800f9b0:	e7df      	b.n	800f972 <__kernel_rem_pio2+0x5a>
 800f9b2:	ec51 0b18 	vmov	r0, r1, d8
 800f9b6:	e7f8      	b.n	800f9aa <__kernel_rem_pio2+0x92>
 800f9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f9c0:	f7f0 fe1a 	bl	80005f8 <__aeabi_dmul>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9cc:	f7f0 fc5e 	bl	800028c <__adddf3>
 800f9d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9d4:	3601      	adds	r6, #1
 800f9d6:	9b06      	ldr	r3, [sp, #24]
 800f9d8:	429e      	cmp	r6, r3
 800f9da:	f1a7 0708 	sub.w	r7, r7, #8
 800f9de:	ddeb      	ble.n	800f9b8 <__kernel_rem_pio2+0xa0>
 800f9e0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f9e4:	f108 0801 	add.w	r8, r8, #1
 800f9e8:	ecab 7b02 	vstmia	fp!, {d7}
 800f9ec:	3508      	adds	r5, #8
 800f9ee:	e7cc      	b.n	800f98a <__kernel_rem_pio2+0x72>
 800f9f0:	9b02      	ldr	r3, [sp, #8]
 800f9f2:	aa0e      	add	r2, sp, #56	; 0x38
 800f9f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9f8:	930d      	str	r3, [sp, #52]	; 0x34
 800f9fa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f9fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fa00:	9c02      	ldr	r4, [sp, #8]
 800fa02:	930c      	str	r3, [sp, #48]	; 0x30
 800fa04:	00e3      	lsls	r3, r4, #3
 800fa06:	930a      	str	r3, [sp, #40]	; 0x28
 800fa08:	ab9a      	add	r3, sp, #616	; 0x268
 800fa0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fa12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fa16:	ab72      	add	r3, sp, #456	; 0x1c8
 800fa18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fa1c:	46c3      	mov	fp, r8
 800fa1e:	46a1      	mov	r9, r4
 800fa20:	f1b9 0f00 	cmp.w	r9, #0
 800fa24:	f1a5 0508 	sub.w	r5, r5, #8
 800fa28:	dc77      	bgt.n	800fb1a <__kernel_rem_pio2+0x202>
 800fa2a:	ec47 6b10 	vmov	d0, r6, r7
 800fa2e:	4650      	mov	r0, sl
 800fa30:	f000 fc0a 	bl	8010248 <scalbn>
 800fa34:	ec57 6b10 	vmov	r6, r7, d0
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fa3e:	ee10 0a10 	vmov	r0, s0
 800fa42:	4639      	mov	r1, r7
 800fa44:	f7f0 fdd8 	bl	80005f8 <__aeabi_dmul>
 800fa48:	ec41 0b10 	vmov	d0, r0, r1
 800fa4c:	f000 fb7c 	bl	8010148 <floor>
 800fa50:	4b7c      	ldr	r3, [pc, #496]	; (800fc44 <__kernel_rem_pio2+0x32c>)
 800fa52:	ec51 0b10 	vmov	r0, r1, d0
 800fa56:	2200      	movs	r2, #0
 800fa58:	f7f0 fdce 	bl	80005f8 <__aeabi_dmul>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	4630      	mov	r0, r6
 800fa62:	4639      	mov	r1, r7
 800fa64:	f7f0 fc10 	bl	8000288 <__aeabi_dsub>
 800fa68:	460f      	mov	r7, r1
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	f7f1 f874 	bl	8000b58 <__aeabi_d2iz>
 800fa70:	9004      	str	r0, [sp, #16]
 800fa72:	f7f0 fd57 	bl	8000524 <__aeabi_i2d>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4630      	mov	r0, r6
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	f7f0 fc03 	bl	8000288 <__aeabi_dsub>
 800fa82:	f1ba 0f00 	cmp.w	sl, #0
 800fa86:	4606      	mov	r6, r0
 800fa88:	460f      	mov	r7, r1
 800fa8a:	dd6d      	ble.n	800fb68 <__kernel_rem_pio2+0x250>
 800fa8c:	1e62      	subs	r2, r4, #1
 800fa8e:	ab0e      	add	r3, sp, #56	; 0x38
 800fa90:	9d04      	ldr	r5, [sp, #16]
 800fa92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fa96:	f1ca 0118 	rsb	r1, sl, #24
 800fa9a:	fa40 f301 	asr.w	r3, r0, r1
 800fa9e:	441d      	add	r5, r3
 800faa0:	408b      	lsls	r3, r1
 800faa2:	1ac0      	subs	r0, r0, r3
 800faa4:	ab0e      	add	r3, sp, #56	; 0x38
 800faa6:	9504      	str	r5, [sp, #16]
 800faa8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800faac:	f1ca 0317 	rsb	r3, sl, #23
 800fab0:	fa40 fb03 	asr.w	fp, r0, r3
 800fab4:	f1bb 0f00 	cmp.w	fp, #0
 800fab8:	dd65      	ble.n	800fb86 <__kernel_rem_pio2+0x26e>
 800faba:	9b04      	ldr	r3, [sp, #16]
 800fabc:	2200      	movs	r2, #0
 800fabe:	3301      	adds	r3, #1
 800fac0:	9304      	str	r3, [sp, #16]
 800fac2:	4615      	mov	r5, r2
 800fac4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fac8:	4294      	cmp	r4, r2
 800faca:	f300 809c 	bgt.w	800fc06 <__kernel_rem_pio2+0x2ee>
 800face:	f1ba 0f00 	cmp.w	sl, #0
 800fad2:	dd07      	ble.n	800fae4 <__kernel_rem_pio2+0x1cc>
 800fad4:	f1ba 0f01 	cmp.w	sl, #1
 800fad8:	f000 80c0 	beq.w	800fc5c <__kernel_rem_pio2+0x344>
 800fadc:	f1ba 0f02 	cmp.w	sl, #2
 800fae0:	f000 80c6 	beq.w	800fc70 <__kernel_rem_pio2+0x358>
 800fae4:	f1bb 0f02 	cmp.w	fp, #2
 800fae8:	d14d      	bne.n	800fb86 <__kernel_rem_pio2+0x26e>
 800faea:	4632      	mov	r2, r6
 800faec:	463b      	mov	r3, r7
 800faee:	4956      	ldr	r1, [pc, #344]	; (800fc48 <__kernel_rem_pio2+0x330>)
 800faf0:	2000      	movs	r0, #0
 800faf2:	f7f0 fbc9 	bl	8000288 <__aeabi_dsub>
 800faf6:	4606      	mov	r6, r0
 800faf8:	460f      	mov	r7, r1
 800fafa:	2d00      	cmp	r5, #0
 800fafc:	d043      	beq.n	800fb86 <__kernel_rem_pio2+0x26e>
 800fafe:	4650      	mov	r0, sl
 800fb00:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fc38 <__kernel_rem_pio2+0x320>
 800fb04:	f000 fba0 	bl	8010248 <scalbn>
 800fb08:	4630      	mov	r0, r6
 800fb0a:	4639      	mov	r1, r7
 800fb0c:	ec53 2b10 	vmov	r2, r3, d0
 800fb10:	f7f0 fbba 	bl	8000288 <__aeabi_dsub>
 800fb14:	4606      	mov	r6, r0
 800fb16:	460f      	mov	r7, r1
 800fb18:	e035      	b.n	800fb86 <__kernel_rem_pio2+0x26e>
 800fb1a:	4b4c      	ldr	r3, [pc, #304]	; (800fc4c <__kernel_rem_pio2+0x334>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	4630      	mov	r0, r6
 800fb20:	4639      	mov	r1, r7
 800fb22:	f7f0 fd69 	bl	80005f8 <__aeabi_dmul>
 800fb26:	f7f1 f817 	bl	8000b58 <__aeabi_d2iz>
 800fb2a:	f7f0 fcfb 	bl	8000524 <__aeabi_i2d>
 800fb2e:	4602      	mov	r2, r0
 800fb30:	460b      	mov	r3, r1
 800fb32:	ec43 2b18 	vmov	d8, r2, r3
 800fb36:	4b46      	ldr	r3, [pc, #280]	; (800fc50 <__kernel_rem_pio2+0x338>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	f7f0 fd5d 	bl	80005f8 <__aeabi_dmul>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	4630      	mov	r0, r6
 800fb44:	4639      	mov	r1, r7
 800fb46:	f7f0 fb9f 	bl	8000288 <__aeabi_dsub>
 800fb4a:	f7f1 f805 	bl	8000b58 <__aeabi_d2iz>
 800fb4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb52:	f84b 0b04 	str.w	r0, [fp], #4
 800fb56:	ec51 0b18 	vmov	r0, r1, d8
 800fb5a:	f7f0 fb97 	bl	800028c <__adddf3>
 800fb5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800fb62:	4606      	mov	r6, r0
 800fb64:	460f      	mov	r7, r1
 800fb66:	e75b      	b.n	800fa20 <__kernel_rem_pio2+0x108>
 800fb68:	d106      	bne.n	800fb78 <__kernel_rem_pio2+0x260>
 800fb6a:	1e63      	subs	r3, r4, #1
 800fb6c:	aa0e      	add	r2, sp, #56	; 0x38
 800fb6e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fb72:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fb76:	e79d      	b.n	800fab4 <__kernel_rem_pio2+0x19c>
 800fb78:	4b36      	ldr	r3, [pc, #216]	; (800fc54 <__kernel_rem_pio2+0x33c>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f7f0 ffc2 	bl	8000b04 <__aeabi_dcmpge>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d13d      	bne.n	800fc00 <__kernel_rem_pio2+0x2e8>
 800fb84:	4683      	mov	fp, r0
 800fb86:	2200      	movs	r2, #0
 800fb88:	2300      	movs	r3, #0
 800fb8a:	4630      	mov	r0, r6
 800fb8c:	4639      	mov	r1, r7
 800fb8e:	f7f0 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	f000 80c0 	beq.w	800fd18 <__kernel_rem_pio2+0x400>
 800fb98:	1e65      	subs	r5, r4, #1
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	9902      	ldr	r1, [sp, #8]
 800fba0:	428b      	cmp	r3, r1
 800fba2:	da6c      	bge.n	800fc7e <__kernel_rem_pio2+0x366>
 800fba4:	2a00      	cmp	r2, #0
 800fba6:	f000 8089 	beq.w	800fcbc <__kernel_rem_pio2+0x3a4>
 800fbaa:	ab0e      	add	r3, sp, #56	; 0x38
 800fbac:	f1aa 0a18 	sub.w	sl, sl, #24
 800fbb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f000 80ad 	beq.w	800fd14 <__kernel_rem_pio2+0x3fc>
 800fbba:	4650      	mov	r0, sl
 800fbbc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fc38 <__kernel_rem_pio2+0x320>
 800fbc0:	f000 fb42 	bl	8010248 <scalbn>
 800fbc4:	ab9a      	add	r3, sp, #616	; 0x268
 800fbc6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fbca:	ec57 6b10 	vmov	r6, r7, d0
 800fbce:	00ec      	lsls	r4, r5, #3
 800fbd0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fbd4:	46aa      	mov	sl, r5
 800fbd6:	f1ba 0f00 	cmp.w	sl, #0
 800fbda:	f280 80d6 	bge.w	800fd8a <__kernel_rem_pio2+0x472>
 800fbde:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fc30 <__kernel_rem_pio2+0x318>
 800fbe2:	462e      	mov	r6, r5
 800fbe4:	2e00      	cmp	r6, #0
 800fbe6:	f2c0 8104 	blt.w	800fdf2 <__kernel_rem_pio2+0x4da>
 800fbea:	ab72      	add	r3, sp, #456	; 0x1c8
 800fbec:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fbf0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fc58 <__kernel_rem_pio2+0x340>
 800fbf4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fbf8:	f04f 0800 	mov.w	r8, #0
 800fbfc:	1baf      	subs	r7, r5, r6
 800fbfe:	e0ea      	b.n	800fdd6 <__kernel_rem_pio2+0x4be>
 800fc00:	f04f 0b02 	mov.w	fp, #2
 800fc04:	e759      	b.n	800faba <__kernel_rem_pio2+0x1a2>
 800fc06:	f8d8 3000 	ldr.w	r3, [r8]
 800fc0a:	b955      	cbnz	r5, 800fc22 <__kernel_rem_pio2+0x30a>
 800fc0c:	b123      	cbz	r3, 800fc18 <__kernel_rem_pio2+0x300>
 800fc0e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fc12:	f8c8 3000 	str.w	r3, [r8]
 800fc16:	2301      	movs	r3, #1
 800fc18:	3201      	adds	r2, #1
 800fc1a:	f108 0804 	add.w	r8, r8, #4
 800fc1e:	461d      	mov	r5, r3
 800fc20:	e752      	b.n	800fac8 <__kernel_rem_pio2+0x1b0>
 800fc22:	1acb      	subs	r3, r1, r3
 800fc24:	f8c8 3000 	str.w	r3, [r8]
 800fc28:	462b      	mov	r3, r5
 800fc2a:	e7f5      	b.n	800fc18 <__kernel_rem_pio2+0x300>
 800fc2c:	f3af 8000 	nop.w
	...
 800fc3c:	3ff00000 	.word	0x3ff00000
 800fc40:	08010d10 	.word	0x08010d10
 800fc44:	40200000 	.word	0x40200000
 800fc48:	3ff00000 	.word	0x3ff00000
 800fc4c:	3e700000 	.word	0x3e700000
 800fc50:	41700000 	.word	0x41700000
 800fc54:	3fe00000 	.word	0x3fe00000
 800fc58:	08010cd0 	.word	0x08010cd0
 800fc5c:	1e62      	subs	r2, r4, #1
 800fc5e:	ab0e      	add	r3, sp, #56	; 0x38
 800fc60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fc68:	a90e      	add	r1, sp, #56	; 0x38
 800fc6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fc6e:	e739      	b.n	800fae4 <__kernel_rem_pio2+0x1cc>
 800fc70:	1e62      	subs	r2, r4, #1
 800fc72:	ab0e      	add	r3, sp, #56	; 0x38
 800fc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fc7c:	e7f4      	b.n	800fc68 <__kernel_rem_pio2+0x350>
 800fc7e:	a90e      	add	r1, sp, #56	; 0x38
 800fc80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fc84:	3b01      	subs	r3, #1
 800fc86:	430a      	orrs	r2, r1
 800fc88:	e789      	b.n	800fb9e <__kernel_rem_pio2+0x286>
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fc90:	2900      	cmp	r1, #0
 800fc92:	d0fa      	beq.n	800fc8a <__kernel_rem_pio2+0x372>
 800fc94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc96:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fc9a:	446a      	add	r2, sp
 800fc9c:	3a98      	subs	r2, #152	; 0x98
 800fc9e:	920a      	str	r2, [sp, #40]	; 0x28
 800fca0:	9a08      	ldr	r2, [sp, #32]
 800fca2:	18e3      	adds	r3, r4, r3
 800fca4:	18a5      	adds	r5, r4, r2
 800fca6:	aa22      	add	r2, sp, #136	; 0x88
 800fca8:	f104 0801 	add.w	r8, r4, #1
 800fcac:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	9b04      	ldr	r3, [sp, #16]
 800fcb4:	4543      	cmp	r3, r8
 800fcb6:	da04      	bge.n	800fcc2 <__kernel_rem_pio2+0x3aa>
 800fcb8:	461c      	mov	r4, r3
 800fcba:	e6a3      	b.n	800fa04 <__kernel_rem_pio2+0xec>
 800fcbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	e7e4      	b.n	800fc8c <__kernel_rem_pio2+0x374>
 800fcc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcc4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fcc8:	f7f0 fc2c 	bl	8000524 <__aeabi_i2d>
 800fccc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fcd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcd2:	46ab      	mov	fp, r5
 800fcd4:	461c      	mov	r4, r3
 800fcd6:	f04f 0900 	mov.w	r9, #0
 800fcda:	2600      	movs	r6, #0
 800fcdc:	2700      	movs	r7, #0
 800fcde:	9b06      	ldr	r3, [sp, #24]
 800fce0:	4599      	cmp	r9, r3
 800fce2:	dd06      	ble.n	800fcf2 <__kernel_rem_pio2+0x3da>
 800fce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fce6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fcea:	f108 0801 	add.w	r8, r8, #1
 800fcee:	930a      	str	r3, [sp, #40]	; 0x28
 800fcf0:	e7df      	b.n	800fcb2 <__kernel_rem_pio2+0x39a>
 800fcf2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fcf6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fcfa:	f7f0 fc7d 	bl	80005f8 <__aeabi_dmul>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	4630      	mov	r0, r6
 800fd04:	4639      	mov	r1, r7
 800fd06:	f7f0 fac1 	bl	800028c <__adddf3>
 800fd0a:	f109 0901 	add.w	r9, r9, #1
 800fd0e:	4606      	mov	r6, r0
 800fd10:	460f      	mov	r7, r1
 800fd12:	e7e4      	b.n	800fcde <__kernel_rem_pio2+0x3c6>
 800fd14:	3d01      	subs	r5, #1
 800fd16:	e748      	b.n	800fbaa <__kernel_rem_pio2+0x292>
 800fd18:	ec47 6b10 	vmov	d0, r6, r7
 800fd1c:	f1ca 0000 	rsb	r0, sl, #0
 800fd20:	f000 fa92 	bl	8010248 <scalbn>
 800fd24:	ec57 6b10 	vmov	r6, r7, d0
 800fd28:	4ba0      	ldr	r3, [pc, #640]	; (800ffac <__kernel_rem_pio2+0x694>)
 800fd2a:	ee10 0a10 	vmov	r0, s0
 800fd2e:	2200      	movs	r2, #0
 800fd30:	4639      	mov	r1, r7
 800fd32:	f7f0 fee7 	bl	8000b04 <__aeabi_dcmpge>
 800fd36:	b1f8      	cbz	r0, 800fd78 <__kernel_rem_pio2+0x460>
 800fd38:	4b9d      	ldr	r3, [pc, #628]	; (800ffb0 <__kernel_rem_pio2+0x698>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	4639      	mov	r1, r7
 800fd40:	f7f0 fc5a 	bl	80005f8 <__aeabi_dmul>
 800fd44:	f7f0 ff08 	bl	8000b58 <__aeabi_d2iz>
 800fd48:	4680      	mov	r8, r0
 800fd4a:	f7f0 fbeb 	bl	8000524 <__aeabi_i2d>
 800fd4e:	4b97      	ldr	r3, [pc, #604]	; (800ffac <__kernel_rem_pio2+0x694>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	f7f0 fc51 	bl	80005f8 <__aeabi_dmul>
 800fd56:	460b      	mov	r3, r1
 800fd58:	4602      	mov	r2, r0
 800fd5a:	4639      	mov	r1, r7
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f7f0 fa93 	bl	8000288 <__aeabi_dsub>
 800fd62:	f7f0 fef9 	bl	8000b58 <__aeabi_d2iz>
 800fd66:	1c65      	adds	r5, r4, #1
 800fd68:	ab0e      	add	r3, sp, #56	; 0x38
 800fd6a:	f10a 0a18 	add.w	sl, sl, #24
 800fd6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fd72:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800fd76:	e720      	b.n	800fbba <__kernel_rem_pio2+0x2a2>
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4639      	mov	r1, r7
 800fd7c:	f7f0 feec 	bl	8000b58 <__aeabi_d2iz>
 800fd80:	ab0e      	add	r3, sp, #56	; 0x38
 800fd82:	4625      	mov	r5, r4
 800fd84:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800fd88:	e717      	b.n	800fbba <__kernel_rem_pio2+0x2a2>
 800fd8a:	ab0e      	add	r3, sp, #56	; 0x38
 800fd8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800fd90:	f7f0 fbc8 	bl	8000524 <__aeabi_i2d>
 800fd94:	4632      	mov	r2, r6
 800fd96:	463b      	mov	r3, r7
 800fd98:	f7f0 fc2e 	bl	80005f8 <__aeabi_dmul>
 800fd9c:	4b84      	ldr	r3, [pc, #528]	; (800ffb0 <__kernel_rem_pio2+0x698>)
 800fd9e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800fda2:	2200      	movs	r2, #0
 800fda4:	4630      	mov	r0, r6
 800fda6:	4639      	mov	r1, r7
 800fda8:	f7f0 fc26 	bl	80005f8 <__aeabi_dmul>
 800fdac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	460f      	mov	r7, r1
 800fdb4:	e70f      	b.n	800fbd6 <__kernel_rem_pio2+0x2be>
 800fdb6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800fdba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800fdbe:	f7f0 fc1b 	bl	80005f8 <__aeabi_dmul>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdca:	f7f0 fa5f 	bl	800028c <__adddf3>
 800fdce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fdd2:	f108 0801 	add.w	r8, r8, #1
 800fdd6:	9b02      	ldr	r3, [sp, #8]
 800fdd8:	4598      	cmp	r8, r3
 800fdda:	dc01      	bgt.n	800fde0 <__kernel_rem_pio2+0x4c8>
 800fddc:	45b8      	cmp	r8, r7
 800fdde:	ddea      	ble.n	800fdb6 <__kernel_rem_pio2+0x49e>
 800fde0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800fde4:	ab4a      	add	r3, sp, #296	; 0x128
 800fde6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fdea:	ed87 7b00 	vstr	d7, [r7]
 800fdee:	3e01      	subs	r6, #1
 800fdf0:	e6f8      	b.n	800fbe4 <__kernel_rem_pio2+0x2cc>
 800fdf2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	dc0b      	bgt.n	800fe10 <__kernel_rem_pio2+0x4f8>
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	dc35      	bgt.n	800fe68 <__kernel_rem_pio2+0x550>
 800fdfc:	d059      	beq.n	800feb2 <__kernel_rem_pio2+0x59a>
 800fdfe:	9b04      	ldr	r3, [sp, #16]
 800fe00:	f003 0007 	and.w	r0, r3, #7
 800fe04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800fe08:	ecbd 8b02 	vpop	{d8}
 800fe0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d1f3      	bne.n	800fdfe <__kernel_rem_pio2+0x4e6>
 800fe16:	ab4a      	add	r3, sp, #296	; 0x128
 800fe18:	4423      	add	r3, r4
 800fe1a:	9306      	str	r3, [sp, #24]
 800fe1c:	461c      	mov	r4, r3
 800fe1e:	469a      	mov	sl, r3
 800fe20:	9502      	str	r5, [sp, #8]
 800fe22:	9b02      	ldr	r3, [sp, #8]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f1aa 0a08 	sub.w	sl, sl, #8
 800fe2a:	dc6b      	bgt.n	800ff04 <__kernel_rem_pio2+0x5ec>
 800fe2c:	46aa      	mov	sl, r5
 800fe2e:	f1ba 0f01 	cmp.w	sl, #1
 800fe32:	f1a4 0408 	sub.w	r4, r4, #8
 800fe36:	f300 8085 	bgt.w	800ff44 <__kernel_rem_pio2+0x62c>
 800fe3a:	9c06      	ldr	r4, [sp, #24]
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	3408      	adds	r4, #8
 800fe40:	2100      	movs	r1, #0
 800fe42:	2d01      	cmp	r5, #1
 800fe44:	f300 809d 	bgt.w	800ff82 <__kernel_rem_pio2+0x66a>
 800fe48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fe4c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800fe50:	f1bb 0f00 	cmp.w	fp, #0
 800fe54:	f040 809b 	bne.w	800ff8e <__kernel_rem_pio2+0x676>
 800fe58:	9b01      	ldr	r3, [sp, #4]
 800fe5a:	e9c3 5600 	strd	r5, r6, [r3]
 800fe5e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800fe62:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fe66:	e7ca      	b.n	800fdfe <__kernel_rem_pio2+0x4e6>
 800fe68:	3408      	adds	r4, #8
 800fe6a:	ab4a      	add	r3, sp, #296	; 0x128
 800fe6c:	441c      	add	r4, r3
 800fe6e:	462e      	mov	r6, r5
 800fe70:	2000      	movs	r0, #0
 800fe72:	2100      	movs	r1, #0
 800fe74:	2e00      	cmp	r6, #0
 800fe76:	da36      	bge.n	800fee6 <__kernel_rem_pio2+0x5ce>
 800fe78:	f1bb 0f00 	cmp.w	fp, #0
 800fe7c:	d039      	beq.n	800fef2 <__kernel_rem_pio2+0x5da>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe84:	9c01      	ldr	r4, [sp, #4]
 800fe86:	e9c4 2300 	strd	r2, r3, [r4]
 800fe8a:	4602      	mov	r2, r0
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800fe92:	f7f0 f9f9 	bl	8000288 <__aeabi_dsub>
 800fe96:	ae4c      	add	r6, sp, #304	; 0x130
 800fe98:	2401      	movs	r4, #1
 800fe9a:	42a5      	cmp	r5, r4
 800fe9c:	da2c      	bge.n	800fef8 <__kernel_rem_pio2+0x5e0>
 800fe9e:	f1bb 0f00 	cmp.w	fp, #0
 800fea2:	d002      	beq.n	800feaa <__kernel_rem_pio2+0x592>
 800fea4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fea8:	4619      	mov	r1, r3
 800feaa:	9b01      	ldr	r3, [sp, #4]
 800feac:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800feb0:	e7a5      	b.n	800fdfe <__kernel_rem_pio2+0x4e6>
 800feb2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800feb6:	eb0d 0403 	add.w	r4, sp, r3
 800feba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800febe:	2000      	movs	r0, #0
 800fec0:	2100      	movs	r1, #0
 800fec2:	2d00      	cmp	r5, #0
 800fec4:	da09      	bge.n	800feda <__kernel_rem_pio2+0x5c2>
 800fec6:	f1bb 0f00 	cmp.w	fp, #0
 800feca:	d002      	beq.n	800fed2 <__kernel_rem_pio2+0x5ba>
 800fecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fed0:	4619      	mov	r1, r3
 800fed2:	9b01      	ldr	r3, [sp, #4]
 800fed4:	e9c3 0100 	strd	r0, r1, [r3]
 800fed8:	e791      	b.n	800fdfe <__kernel_rem_pio2+0x4e6>
 800feda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fede:	f7f0 f9d5 	bl	800028c <__adddf3>
 800fee2:	3d01      	subs	r5, #1
 800fee4:	e7ed      	b.n	800fec2 <__kernel_rem_pio2+0x5aa>
 800fee6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800feea:	f7f0 f9cf 	bl	800028c <__adddf3>
 800feee:	3e01      	subs	r6, #1
 800fef0:	e7c0      	b.n	800fe74 <__kernel_rem_pio2+0x55c>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	e7c5      	b.n	800fe84 <__kernel_rem_pio2+0x56c>
 800fef8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800fefc:	f7f0 f9c6 	bl	800028c <__adddf3>
 800ff00:	3401      	adds	r4, #1
 800ff02:	e7ca      	b.n	800fe9a <__kernel_rem_pio2+0x582>
 800ff04:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ff0c:	9b02      	ldr	r3, [sp, #8]
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	9302      	str	r3, [sp, #8]
 800ff12:	4632      	mov	r2, r6
 800ff14:	463b      	mov	r3, r7
 800ff16:	4640      	mov	r0, r8
 800ff18:	4649      	mov	r1, r9
 800ff1a:	f7f0 f9b7 	bl	800028c <__adddf3>
 800ff1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4640      	mov	r0, r8
 800ff28:	4649      	mov	r1, r9
 800ff2a:	f7f0 f9ad 	bl	8000288 <__aeabi_dsub>
 800ff2e:	4632      	mov	r2, r6
 800ff30:	463b      	mov	r3, r7
 800ff32:	f7f0 f9ab 	bl	800028c <__adddf3>
 800ff36:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ff3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff3e:	ed8a 7b00 	vstr	d7, [sl]
 800ff42:	e76e      	b.n	800fe22 <__kernel_rem_pio2+0x50a>
 800ff44:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ff48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	4632      	mov	r2, r6
 800ff50:	463b      	mov	r3, r7
 800ff52:	4649      	mov	r1, r9
 800ff54:	f7f0 f99a 	bl	800028c <__adddf3>
 800ff58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	460b      	mov	r3, r1
 800ff60:	4640      	mov	r0, r8
 800ff62:	4649      	mov	r1, r9
 800ff64:	f7f0 f990 	bl	8000288 <__aeabi_dsub>
 800ff68:	4632      	mov	r2, r6
 800ff6a:	463b      	mov	r3, r7
 800ff6c:	f7f0 f98e 	bl	800028c <__adddf3>
 800ff70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff78:	ed84 7b00 	vstr	d7, [r4]
 800ff7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff80:	e755      	b.n	800fe2e <__kernel_rem_pio2+0x516>
 800ff82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff86:	f7f0 f981 	bl	800028c <__adddf3>
 800ff8a:	3d01      	subs	r5, #1
 800ff8c:	e759      	b.n	800fe42 <__kernel_rem_pio2+0x52a>
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	9a01      	ldr	r2, [sp, #4]
 800ff92:	601d      	str	r5, [r3, #0]
 800ff94:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ff98:	605c      	str	r4, [r3, #4]
 800ff9a:	609f      	str	r7, [r3, #8]
 800ff9c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ffa0:	60d3      	str	r3, [r2, #12]
 800ffa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffa6:	6110      	str	r0, [r2, #16]
 800ffa8:	6153      	str	r3, [r2, #20]
 800ffaa:	e728      	b.n	800fdfe <__kernel_rem_pio2+0x4e6>
 800ffac:	41700000 	.word	0x41700000
 800ffb0:	3e700000 	.word	0x3e700000
 800ffb4:	00000000 	.word	0x00000000

0800ffb8 <__kernel_sin>:
 800ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffbc:	ed2d 8b04 	vpush	{d8-d9}
 800ffc0:	eeb0 8a41 	vmov.f32	s16, s2
 800ffc4:	eef0 8a61 	vmov.f32	s17, s3
 800ffc8:	ec55 4b10 	vmov	r4, r5, d0
 800ffcc:	b083      	sub	sp, #12
 800ffce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ffd2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ffd6:	9001      	str	r0, [sp, #4]
 800ffd8:	da06      	bge.n	800ffe8 <__kernel_sin+0x30>
 800ffda:	ee10 0a10 	vmov	r0, s0
 800ffde:	4629      	mov	r1, r5
 800ffe0:	f7f0 fdba 	bl	8000b58 <__aeabi_d2iz>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d051      	beq.n	801008c <__kernel_sin+0xd4>
 800ffe8:	4622      	mov	r2, r4
 800ffea:	462b      	mov	r3, r5
 800ffec:	4620      	mov	r0, r4
 800ffee:	4629      	mov	r1, r5
 800fff0:	f7f0 fb02 	bl	80005f8 <__aeabi_dmul>
 800fff4:	4682      	mov	sl, r0
 800fff6:	468b      	mov	fp, r1
 800fff8:	4602      	mov	r2, r0
 800fffa:	460b      	mov	r3, r1
 800fffc:	4620      	mov	r0, r4
 800fffe:	4629      	mov	r1, r5
 8010000:	f7f0 fafa 	bl	80005f8 <__aeabi_dmul>
 8010004:	a341      	add	r3, pc, #260	; (adr r3, 801010c <__kernel_sin+0x154>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	4680      	mov	r8, r0
 801000c:	4689      	mov	r9, r1
 801000e:	4650      	mov	r0, sl
 8010010:	4659      	mov	r1, fp
 8010012:	f7f0 faf1 	bl	80005f8 <__aeabi_dmul>
 8010016:	a33f      	add	r3, pc, #252	; (adr r3, 8010114 <__kernel_sin+0x15c>)
 8010018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001c:	f7f0 f934 	bl	8000288 <__aeabi_dsub>
 8010020:	4652      	mov	r2, sl
 8010022:	465b      	mov	r3, fp
 8010024:	f7f0 fae8 	bl	80005f8 <__aeabi_dmul>
 8010028:	a33c      	add	r3, pc, #240	; (adr r3, 801011c <__kernel_sin+0x164>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	f7f0 f92d 	bl	800028c <__adddf3>
 8010032:	4652      	mov	r2, sl
 8010034:	465b      	mov	r3, fp
 8010036:	f7f0 fadf 	bl	80005f8 <__aeabi_dmul>
 801003a:	a33a      	add	r3, pc, #232	; (adr r3, 8010124 <__kernel_sin+0x16c>)
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	f7f0 f922 	bl	8000288 <__aeabi_dsub>
 8010044:	4652      	mov	r2, sl
 8010046:	465b      	mov	r3, fp
 8010048:	f7f0 fad6 	bl	80005f8 <__aeabi_dmul>
 801004c:	a337      	add	r3, pc, #220	; (adr r3, 801012c <__kernel_sin+0x174>)
 801004e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010052:	f7f0 f91b 	bl	800028c <__adddf3>
 8010056:	9b01      	ldr	r3, [sp, #4]
 8010058:	4606      	mov	r6, r0
 801005a:	460f      	mov	r7, r1
 801005c:	b9eb      	cbnz	r3, 801009a <__kernel_sin+0xe2>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	4650      	mov	r0, sl
 8010064:	4659      	mov	r1, fp
 8010066:	f7f0 fac7 	bl	80005f8 <__aeabi_dmul>
 801006a:	a325      	add	r3, pc, #148	; (adr r3, 8010100 <__kernel_sin+0x148>)
 801006c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010070:	f7f0 f90a 	bl	8000288 <__aeabi_dsub>
 8010074:	4642      	mov	r2, r8
 8010076:	464b      	mov	r3, r9
 8010078:	f7f0 fabe 	bl	80005f8 <__aeabi_dmul>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	4620      	mov	r0, r4
 8010082:	4629      	mov	r1, r5
 8010084:	f7f0 f902 	bl	800028c <__adddf3>
 8010088:	4604      	mov	r4, r0
 801008a:	460d      	mov	r5, r1
 801008c:	ec45 4b10 	vmov	d0, r4, r5
 8010090:	b003      	add	sp, #12
 8010092:	ecbd 8b04 	vpop	{d8-d9}
 8010096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801009a:	4b1b      	ldr	r3, [pc, #108]	; (8010108 <__kernel_sin+0x150>)
 801009c:	ec51 0b18 	vmov	r0, r1, d8
 80100a0:	2200      	movs	r2, #0
 80100a2:	f7f0 faa9 	bl	80005f8 <__aeabi_dmul>
 80100a6:	4632      	mov	r2, r6
 80100a8:	ec41 0b19 	vmov	d9, r0, r1
 80100ac:	463b      	mov	r3, r7
 80100ae:	4640      	mov	r0, r8
 80100b0:	4649      	mov	r1, r9
 80100b2:	f7f0 faa1 	bl	80005f8 <__aeabi_dmul>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	ec51 0b19 	vmov	r0, r1, d9
 80100be:	f7f0 f8e3 	bl	8000288 <__aeabi_dsub>
 80100c2:	4652      	mov	r2, sl
 80100c4:	465b      	mov	r3, fp
 80100c6:	f7f0 fa97 	bl	80005f8 <__aeabi_dmul>
 80100ca:	ec53 2b18 	vmov	r2, r3, d8
 80100ce:	f7f0 f8db 	bl	8000288 <__aeabi_dsub>
 80100d2:	a30b      	add	r3, pc, #44	; (adr r3, 8010100 <__kernel_sin+0x148>)
 80100d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d8:	4606      	mov	r6, r0
 80100da:	460f      	mov	r7, r1
 80100dc:	4640      	mov	r0, r8
 80100de:	4649      	mov	r1, r9
 80100e0:	f7f0 fa8a 	bl	80005f8 <__aeabi_dmul>
 80100e4:	4602      	mov	r2, r0
 80100e6:	460b      	mov	r3, r1
 80100e8:	4630      	mov	r0, r6
 80100ea:	4639      	mov	r1, r7
 80100ec:	f7f0 f8ce 	bl	800028c <__adddf3>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4620      	mov	r0, r4
 80100f6:	4629      	mov	r1, r5
 80100f8:	f7f0 f8c6 	bl	8000288 <__aeabi_dsub>
 80100fc:	e7c4      	b.n	8010088 <__kernel_sin+0xd0>
 80100fe:	bf00      	nop
 8010100:	55555549 	.word	0x55555549
 8010104:	3fc55555 	.word	0x3fc55555
 8010108:	3fe00000 	.word	0x3fe00000
 801010c:	5acfd57c 	.word	0x5acfd57c
 8010110:	3de5d93a 	.word	0x3de5d93a
 8010114:	8a2b9ceb 	.word	0x8a2b9ceb
 8010118:	3e5ae5e6 	.word	0x3e5ae5e6
 801011c:	57b1fe7d 	.word	0x57b1fe7d
 8010120:	3ec71de3 	.word	0x3ec71de3
 8010124:	19c161d5 	.word	0x19c161d5
 8010128:	3f2a01a0 	.word	0x3f2a01a0
 801012c:	1110f8a6 	.word	0x1110f8a6
 8010130:	3f811111 	.word	0x3f811111

08010134 <fabs>:
 8010134:	ec51 0b10 	vmov	r0, r1, d0
 8010138:	ee10 2a10 	vmov	r2, s0
 801013c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010140:	ec43 2b10 	vmov	d0, r2, r3
 8010144:	4770      	bx	lr
	...

08010148 <floor>:
 8010148:	ec51 0b10 	vmov	r0, r1, d0
 801014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010150:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010154:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010158:	2e13      	cmp	r6, #19
 801015a:	ee10 5a10 	vmov	r5, s0
 801015e:	ee10 8a10 	vmov	r8, s0
 8010162:	460c      	mov	r4, r1
 8010164:	dc32      	bgt.n	80101cc <floor+0x84>
 8010166:	2e00      	cmp	r6, #0
 8010168:	da14      	bge.n	8010194 <floor+0x4c>
 801016a:	a333      	add	r3, pc, #204	; (adr r3, 8010238 <floor+0xf0>)
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	f7f0 f88c 	bl	800028c <__adddf3>
 8010174:	2200      	movs	r2, #0
 8010176:	2300      	movs	r3, #0
 8010178:	f7f0 fcce 	bl	8000b18 <__aeabi_dcmpgt>
 801017c:	b138      	cbz	r0, 801018e <floor+0x46>
 801017e:	2c00      	cmp	r4, #0
 8010180:	da57      	bge.n	8010232 <floor+0xea>
 8010182:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010186:	431d      	orrs	r5, r3
 8010188:	d001      	beq.n	801018e <floor+0x46>
 801018a:	4c2d      	ldr	r4, [pc, #180]	; (8010240 <floor+0xf8>)
 801018c:	2500      	movs	r5, #0
 801018e:	4621      	mov	r1, r4
 8010190:	4628      	mov	r0, r5
 8010192:	e025      	b.n	80101e0 <floor+0x98>
 8010194:	4f2b      	ldr	r7, [pc, #172]	; (8010244 <floor+0xfc>)
 8010196:	4137      	asrs	r7, r6
 8010198:	ea01 0307 	and.w	r3, r1, r7
 801019c:	4303      	orrs	r3, r0
 801019e:	d01f      	beq.n	80101e0 <floor+0x98>
 80101a0:	a325      	add	r3, pc, #148	; (adr r3, 8010238 <floor+0xf0>)
 80101a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a6:	f7f0 f871 	bl	800028c <__adddf3>
 80101aa:	2200      	movs	r2, #0
 80101ac:	2300      	movs	r3, #0
 80101ae:	f7f0 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80101b2:	2800      	cmp	r0, #0
 80101b4:	d0eb      	beq.n	801018e <floor+0x46>
 80101b6:	2c00      	cmp	r4, #0
 80101b8:	bfbe      	ittt	lt
 80101ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80101be:	fa43 f606 	asrlt.w	r6, r3, r6
 80101c2:	19a4      	addlt	r4, r4, r6
 80101c4:	ea24 0407 	bic.w	r4, r4, r7
 80101c8:	2500      	movs	r5, #0
 80101ca:	e7e0      	b.n	801018e <floor+0x46>
 80101cc:	2e33      	cmp	r6, #51	; 0x33
 80101ce:	dd0b      	ble.n	80101e8 <floor+0xa0>
 80101d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80101d4:	d104      	bne.n	80101e0 <floor+0x98>
 80101d6:	ee10 2a10 	vmov	r2, s0
 80101da:	460b      	mov	r3, r1
 80101dc:	f7f0 f856 	bl	800028c <__adddf3>
 80101e0:	ec41 0b10 	vmov	d0, r0, r1
 80101e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80101ec:	f04f 33ff 	mov.w	r3, #4294967295
 80101f0:	fa23 f707 	lsr.w	r7, r3, r7
 80101f4:	4207      	tst	r7, r0
 80101f6:	d0f3      	beq.n	80101e0 <floor+0x98>
 80101f8:	a30f      	add	r3, pc, #60	; (adr r3, 8010238 <floor+0xf0>)
 80101fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fe:	f7f0 f845 	bl	800028c <__adddf3>
 8010202:	2200      	movs	r2, #0
 8010204:	2300      	movs	r3, #0
 8010206:	f7f0 fc87 	bl	8000b18 <__aeabi_dcmpgt>
 801020a:	2800      	cmp	r0, #0
 801020c:	d0bf      	beq.n	801018e <floor+0x46>
 801020e:	2c00      	cmp	r4, #0
 8010210:	da02      	bge.n	8010218 <floor+0xd0>
 8010212:	2e14      	cmp	r6, #20
 8010214:	d103      	bne.n	801021e <floor+0xd6>
 8010216:	3401      	adds	r4, #1
 8010218:	ea25 0507 	bic.w	r5, r5, r7
 801021c:	e7b7      	b.n	801018e <floor+0x46>
 801021e:	2301      	movs	r3, #1
 8010220:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010224:	fa03 f606 	lsl.w	r6, r3, r6
 8010228:	4435      	add	r5, r6
 801022a:	4545      	cmp	r5, r8
 801022c:	bf38      	it	cc
 801022e:	18e4      	addcc	r4, r4, r3
 8010230:	e7f2      	b.n	8010218 <floor+0xd0>
 8010232:	2500      	movs	r5, #0
 8010234:	462c      	mov	r4, r5
 8010236:	e7aa      	b.n	801018e <floor+0x46>
 8010238:	8800759c 	.word	0x8800759c
 801023c:	7e37e43c 	.word	0x7e37e43c
 8010240:	bff00000 	.word	0xbff00000
 8010244:	000fffff 	.word	0x000fffff

08010248 <scalbn>:
 8010248:	b570      	push	{r4, r5, r6, lr}
 801024a:	ec55 4b10 	vmov	r4, r5, d0
 801024e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010252:	4606      	mov	r6, r0
 8010254:	462b      	mov	r3, r5
 8010256:	b99a      	cbnz	r2, 8010280 <scalbn+0x38>
 8010258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801025c:	4323      	orrs	r3, r4
 801025e:	d036      	beq.n	80102ce <scalbn+0x86>
 8010260:	4b39      	ldr	r3, [pc, #228]	; (8010348 <scalbn+0x100>)
 8010262:	4629      	mov	r1, r5
 8010264:	ee10 0a10 	vmov	r0, s0
 8010268:	2200      	movs	r2, #0
 801026a:	f7f0 f9c5 	bl	80005f8 <__aeabi_dmul>
 801026e:	4b37      	ldr	r3, [pc, #220]	; (801034c <scalbn+0x104>)
 8010270:	429e      	cmp	r6, r3
 8010272:	4604      	mov	r4, r0
 8010274:	460d      	mov	r5, r1
 8010276:	da10      	bge.n	801029a <scalbn+0x52>
 8010278:	a32b      	add	r3, pc, #172	; (adr r3, 8010328 <scalbn+0xe0>)
 801027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027e:	e03a      	b.n	80102f6 <scalbn+0xae>
 8010280:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010284:	428a      	cmp	r2, r1
 8010286:	d10c      	bne.n	80102a2 <scalbn+0x5a>
 8010288:	ee10 2a10 	vmov	r2, s0
 801028c:	4620      	mov	r0, r4
 801028e:	4629      	mov	r1, r5
 8010290:	f7ef fffc 	bl	800028c <__adddf3>
 8010294:	4604      	mov	r4, r0
 8010296:	460d      	mov	r5, r1
 8010298:	e019      	b.n	80102ce <scalbn+0x86>
 801029a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801029e:	460b      	mov	r3, r1
 80102a0:	3a36      	subs	r2, #54	; 0x36
 80102a2:	4432      	add	r2, r6
 80102a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80102a8:	428a      	cmp	r2, r1
 80102aa:	dd08      	ble.n	80102be <scalbn+0x76>
 80102ac:	2d00      	cmp	r5, #0
 80102ae:	a120      	add	r1, pc, #128	; (adr r1, 8010330 <scalbn+0xe8>)
 80102b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102b4:	da1c      	bge.n	80102f0 <scalbn+0xa8>
 80102b6:	a120      	add	r1, pc, #128	; (adr r1, 8010338 <scalbn+0xf0>)
 80102b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102bc:	e018      	b.n	80102f0 <scalbn+0xa8>
 80102be:	2a00      	cmp	r2, #0
 80102c0:	dd08      	ble.n	80102d4 <scalbn+0x8c>
 80102c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80102c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80102ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80102ce:	ec45 4b10 	vmov	d0, r4, r5
 80102d2:	bd70      	pop	{r4, r5, r6, pc}
 80102d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80102d8:	da19      	bge.n	801030e <scalbn+0xc6>
 80102da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80102de:	429e      	cmp	r6, r3
 80102e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80102e4:	dd0a      	ble.n	80102fc <scalbn+0xb4>
 80102e6:	a112      	add	r1, pc, #72	; (adr r1, 8010330 <scalbn+0xe8>)
 80102e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1e2      	bne.n	80102b6 <scalbn+0x6e>
 80102f0:	a30f      	add	r3, pc, #60	; (adr r3, 8010330 <scalbn+0xe8>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	f7f0 f97f 	bl	80005f8 <__aeabi_dmul>
 80102fa:	e7cb      	b.n	8010294 <scalbn+0x4c>
 80102fc:	a10a      	add	r1, pc, #40	; (adr r1, 8010328 <scalbn+0xe0>)
 80102fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d0b8      	beq.n	8010278 <scalbn+0x30>
 8010306:	a10e      	add	r1, pc, #56	; (adr r1, 8010340 <scalbn+0xf8>)
 8010308:	e9d1 0100 	ldrd	r0, r1, [r1]
 801030c:	e7b4      	b.n	8010278 <scalbn+0x30>
 801030e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010312:	3236      	adds	r2, #54	; 0x36
 8010314:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010318:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801031c:	4620      	mov	r0, r4
 801031e:	4b0c      	ldr	r3, [pc, #48]	; (8010350 <scalbn+0x108>)
 8010320:	2200      	movs	r2, #0
 8010322:	e7e8      	b.n	80102f6 <scalbn+0xae>
 8010324:	f3af 8000 	nop.w
 8010328:	c2f8f359 	.word	0xc2f8f359
 801032c:	01a56e1f 	.word	0x01a56e1f
 8010330:	8800759c 	.word	0x8800759c
 8010334:	7e37e43c 	.word	0x7e37e43c
 8010338:	8800759c 	.word	0x8800759c
 801033c:	fe37e43c 	.word	0xfe37e43c
 8010340:	c2f8f359 	.word	0xc2f8f359
 8010344:	81a56e1f 	.word	0x81a56e1f
 8010348:	43500000 	.word	0x43500000
 801034c:	ffff3cb0 	.word	0xffff3cb0
 8010350:	3c900000 	.word	0x3c900000

08010354 <_init>:
 8010354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010356:	bf00      	nop
 8010358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801035a:	bc08      	pop	{r3}
 801035c:	469e      	mov	lr, r3
 801035e:	4770      	bx	lr

08010360 <_fini>:
 8010360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010362:	bf00      	nop
 8010364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010366:	bc08      	pop	{r3}
 8010368:	469e      	mov	lr, r3
 801036a:	4770      	bx	lr
