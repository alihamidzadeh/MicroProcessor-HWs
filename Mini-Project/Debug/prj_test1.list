
prj_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  080110e0  080110e0  000210e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b58  08011b58  00030348  2**0
                  CONTENTS
  4 .ARM          00000008  08011b58  08011b58  00021b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b60  08011b60  00030348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b60  08011b60  00021b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b64  08011b64  00021b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000348  20000000  08011b68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030348  2**0
                  CONTENTS
 10 .bss          000007bc  20000348  20000348  00030348  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b04  20000b04  00030348  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa8e  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003848  00000000  00000000  0004fe06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00053650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  00054f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000222c4  00000000  00000000  00056788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200a1  00000000  00000000  00078a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce9e3  00000000  00000000  00098aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001674d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008964  00000000  00000000  00167520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0016fe84  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0016fea8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000348 	.word	0x20000348
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080110c4 	.word	0x080110c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	080110c4 	.word	0x080110c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	; 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_ldivmod>:
 8000c9c:	b97b      	cbnz	r3, 8000cbe <__aeabi_ldivmod+0x22>
 8000c9e:	b972      	cbnz	r2, 8000cbe <__aeabi_ldivmod+0x22>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bfbe      	ittt	lt
 8000ca4:	2000      	movlt	r0, #0
 8000ca6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000caa:	e006      	blt.n	8000cba <__aeabi_ldivmod+0x1e>
 8000cac:	bf08      	it	eq
 8000cae:	2800      	cmpeq	r0, #0
 8000cb0:	bf1c      	itt	ne
 8000cb2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb6:	f04f 30ff 	movne.w	r0, #4294967295
 8000cba:	f000 b9dd 	b.w	8001078 <__aeabi_idiv0>
 8000cbe:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	db09      	blt.n	8000cde <__aeabi_ldivmod+0x42>
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db1a      	blt.n	8000d04 <__aeabi_ldivmod+0x68>
 8000cce:	f000 f86b 	bl	8000da8 <__udivmoddi4>
 8000cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cda:	b004      	add	sp, #16
 8000cdc:	4770      	bx	lr
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db1b      	blt.n	8000d20 <__aeabi_ldivmod+0x84>
 8000ce8:	f000 f85e 	bl	8000da8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d02:	4770      	bx	lr
 8000d04:	4252      	negs	r2, r2
 8000d06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0a:	f000 f84d 	bl	8000da8 <__udivmoddi4>
 8000d0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d16:	b004      	add	sp, #16
 8000d18:	4240      	negs	r0, r0
 8000d1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f83f 	bl	8000da8 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4252      	negs	r2, r2
 8000d36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_d2lz>:
 8000d3c:	b538      	push	{r3, r4, r5, lr}
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2300      	movs	r3, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	460d      	mov	r5, r1
 8000d46:	f7ff fed3 	bl	8000af0 <__aeabi_dcmplt>
 8000d4a:	b928      	cbnz	r0, 8000d58 <__aeabi_d2lz+0x1c>
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	4629      	mov	r1, r5
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d54:	f000 b80a 	b.w	8000d6c <__aeabi_d2ulz>
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5e:	f000 f805 	bl	8000d6c <__aeabi_d2ulz>
 8000d62:	4240      	negs	r0, r0
 8000d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop

08000d6c <__aeabi_d2ulz>:
 8000d6c:	b5d0      	push	{r4, r6, r7, lr}
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <__aeabi_d2ulz+0x34>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	4606      	mov	r6, r0
 8000d74:	460f      	mov	r7, r1
 8000d76:	f7ff fc49 	bl	800060c <__aeabi_dmul>
 8000d7a:	f7ff ff1f 	bl	8000bbc <__aeabi_d2uiz>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	f7ff fbca 	bl	8000518 <__aeabi_ui2d>
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <__aeabi_d2ulz+0x38>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f7ff fc40 	bl	800060c <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4630      	mov	r0, r6
 8000d92:	4639      	mov	r1, r7
 8000d94:	f7ff fa82 	bl	800029c <__aeabi_dsub>
 8000d98:	f7ff ff10 	bl	8000bbc <__aeabi_d2uiz>
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000da0:	3df00000 	.word	0x3df00000
 8000da4:	41f00000 	.word	0x41f00000

08000da8 <__udivmoddi4>:
 8000da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	9d08      	ldr	r5, [sp, #32]
 8000dae:	4604      	mov	r4, r0
 8000db0:	468e      	mov	lr, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d14d      	bne.n	8000e52 <__udivmoddi4+0xaa>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	4694      	mov	ip, r2
 8000dba:	d969      	bls.n	8000e90 <__udivmoddi4+0xe8>
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b152      	cbz	r2, 8000dd8 <__udivmoddi4+0x30>
 8000dc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc6:	f1c2 0120 	rsb	r1, r2, #32
 8000dca:	fa20 f101 	lsr.w	r1, r0, r1
 8000dce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd6:	4094      	lsls	r4, r2
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	0c21      	lsrs	r1, r4, #16
 8000dde:	fbbe f6f8 	udiv	r6, lr, r8
 8000de2:	fa1f f78c 	uxth.w	r7, ip
 8000de6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dee:	fb06 f107 	mul.w	r1, r6, r7
 8000df2:	4299      	cmp	r1, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x64>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfe:	f080 811f 	bcs.w	8001040 <__udivmoddi4+0x298>
 8000e02:	4299      	cmp	r1, r3
 8000e04:	f240 811c 	bls.w	8001040 <__udivmoddi4+0x298>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb00 f707 	mul.w	r7, r0, r7
 8000e20:	42a7      	cmp	r7, r4
 8000e22:	d90a      	bls.n	8000e3a <__udivmoddi4+0x92>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2c:	f080 810a 	bcs.w	8001044 <__udivmoddi4+0x29c>
 8000e30:	42a7      	cmp	r7, r4
 8000e32:	f240 8107 	bls.w	8001044 <__udivmoddi4+0x29c>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3e:	1be4      	subs	r4, r4, r7
 8000e40:	2600      	movs	r6, #0
 8000e42:	b11d      	cbz	r5, 8000e4c <__udivmoddi4+0xa4>
 8000e44:	40d4      	lsrs	r4, r2
 8000e46:	2300      	movs	r3, #0
 8000e48:	e9c5 4300 	strd	r4, r3, [r5]
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d909      	bls.n	8000e6a <__udivmoddi4+0xc2>
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	f000 80ef 	beq.w	800103a <__udivmoddi4+0x292>
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e62:	4630      	mov	r0, r6
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	fab3 f683 	clz	r6, r3
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d14a      	bne.n	8000f08 <__udivmoddi4+0x160>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d302      	bcc.n	8000e7c <__udivmoddi4+0xd4>
 8000e76:	4282      	cmp	r2, r0
 8000e78:	f200 80f9 	bhi.w	800106e <__udivmoddi4+0x2c6>
 8000e7c:	1a84      	subs	r4, r0, r2
 8000e7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e82:	2001      	movs	r0, #1
 8000e84:	469e      	mov	lr, r3
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d0e0      	beq.n	8000e4c <__udivmoddi4+0xa4>
 8000e8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8e:	e7dd      	b.n	8000e4c <__udivmoddi4+0xa4>
 8000e90:	b902      	cbnz	r2, 8000e94 <__udivmoddi4+0xec>
 8000e92:	deff      	udf	#255	; 0xff
 8000e94:	fab2 f282 	clz	r2, r2
 8000e98:	2a00      	cmp	r2, #0
 8000e9a:	f040 8092 	bne.w	8000fc2 <__udivmoddi4+0x21a>
 8000e9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ea2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea6:	fa1f fe8c 	uxth.w	lr, ip
 8000eaa:	2601      	movs	r6, #1
 8000eac:	0c20      	lsrs	r0, r4, #16
 8000eae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eba:	fb0e f003 	mul.w	r0, lr, r3
 8000ebe:	4288      	cmp	r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x12c>
 8000ec2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x12a>
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	f200 80cb 	bhi.w	8001068 <__udivmoddi4+0x2c0>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000edc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ee0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x156>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef4:	d202      	bcs.n	8000efc <__udivmoddi4+0x154>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	f200 80bb 	bhi.w	8001072 <__udivmoddi4+0x2ca>
 8000efc:	4608      	mov	r0, r1
 8000efe:	eba4 040e 	sub.w	r4, r4, lr
 8000f02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f06:	e79c      	b.n	8000e42 <__udivmoddi4+0x9a>
 8000f08:	f1c6 0720 	rsb	r7, r6, #32
 8000f0c:	40b3      	lsls	r3, r6
 8000f0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f16:	fa20 f407 	lsr.w	r4, r0, r7
 8000f1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	40f9      	lsrs	r1, r7
 8000f22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f26:	fa00 f306 	lsl.w	r3, r0, r6
 8000f2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2e:	0c20      	lsrs	r0, r4, #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fb09 1118 	mls	r1, r9, r8, r1
 8000f38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f40:	4288      	cmp	r0, r1
 8000f42:	fa02 f206 	lsl.w	r2, r2, r6
 8000f46:	d90b      	bls.n	8000f60 <__udivmoddi4+0x1b8>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f50:	f080 8088 	bcs.w	8001064 <__udivmoddi4+0x2bc>
 8000f54:	4288      	cmp	r0, r1
 8000f56:	f240 8085 	bls.w	8001064 <__udivmoddi4+0x2bc>
 8000f5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1a09      	subs	r1, r1, r0
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f68:	fb09 1110 	mls	r1, r9, r0, r1
 8000f6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f74:	458e      	cmp	lr, r1
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x1e2>
 8000f78:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f80:	d26c      	bcs.n	800105c <__udivmoddi4+0x2b4>
 8000f82:	458e      	cmp	lr, r1
 8000f84:	d96a      	bls.n	800105c <__udivmoddi4+0x2b4>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4461      	add	r1, ip
 8000f8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f92:	eba1 010e 	sub.w	r1, r1, lr
 8000f96:	42a1      	cmp	r1, r4
 8000f98:	46c8      	mov	r8, r9
 8000f9a:	46a6      	mov	lr, r4
 8000f9c:	d356      	bcc.n	800104c <__udivmoddi4+0x2a4>
 8000f9e:	d053      	beq.n	8001048 <__udivmoddi4+0x2a0>
 8000fa0:	b15d      	cbz	r5, 8000fba <__udivmoddi4+0x212>
 8000fa2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa6:	eb61 010e 	sbc.w	r1, r1, lr
 8000faa:	fa01 f707 	lsl.w	r7, r1, r7
 8000fae:	fa22 f306 	lsr.w	r3, r2, r6
 8000fb2:	40f1      	lsrs	r1, r6
 8000fb4:	431f      	orrs	r7, r3
 8000fb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fba:	2600      	movs	r6, #0
 8000fbc:	4631      	mov	r1, r6
 8000fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc2:	f1c2 0320 	rsb	r3, r2, #32
 8000fc6:	40d8      	lsrs	r0, r3
 8000fc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fd0:	4091      	lsls	r1, r2
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd8:	fa1f fe8c 	uxth.w	lr, ip
 8000fdc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fe0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe4:	0c0b      	lsrs	r3, r1, #16
 8000fe6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fea:	fb00 f60e 	mul.w	r6, r0, lr
 8000fee:	429e      	cmp	r6, r3
 8000ff0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff4:	d908      	bls.n	8001008 <__udivmoddi4+0x260>
 8000ff6:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffe:	d22f      	bcs.n	8001060 <__udivmoddi4+0x2b8>
 8001000:	429e      	cmp	r6, r3
 8001002:	d92d      	bls.n	8001060 <__udivmoddi4+0x2b8>
 8001004:	3802      	subs	r0, #2
 8001006:	4463      	add	r3, ip
 8001008:	1b9b      	subs	r3, r3, r6
 800100a:	b289      	uxth	r1, r1
 800100c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001010:	fb07 3316 	mls	r3, r7, r6, r3
 8001014:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001018:	fb06 f30e 	mul.w	r3, r6, lr
 800101c:	428b      	cmp	r3, r1
 800101e:	d908      	bls.n	8001032 <__udivmoddi4+0x28a>
 8001020:	eb1c 0101 	adds.w	r1, ip, r1
 8001024:	f106 38ff 	add.w	r8, r6, #4294967295
 8001028:	d216      	bcs.n	8001058 <__udivmoddi4+0x2b0>
 800102a:	428b      	cmp	r3, r1
 800102c:	d914      	bls.n	8001058 <__udivmoddi4+0x2b0>
 800102e:	3e02      	subs	r6, #2
 8001030:	4461      	add	r1, ip
 8001032:	1ac9      	subs	r1, r1, r3
 8001034:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001038:	e738      	b.n	8000eac <__udivmoddi4+0x104>
 800103a:	462e      	mov	r6, r5
 800103c:	4628      	mov	r0, r5
 800103e:	e705      	b.n	8000e4c <__udivmoddi4+0xa4>
 8001040:	4606      	mov	r6, r0
 8001042:	e6e3      	b.n	8000e0c <__udivmoddi4+0x64>
 8001044:	4618      	mov	r0, r3
 8001046:	e6f8      	b.n	8000e3a <__udivmoddi4+0x92>
 8001048:	454b      	cmp	r3, r9
 800104a:	d2a9      	bcs.n	8000fa0 <__udivmoddi4+0x1f8>
 800104c:	ebb9 0802 	subs.w	r8, r9, r2
 8001050:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001054:	3801      	subs	r0, #1
 8001056:	e7a3      	b.n	8000fa0 <__udivmoddi4+0x1f8>
 8001058:	4646      	mov	r6, r8
 800105a:	e7ea      	b.n	8001032 <__udivmoddi4+0x28a>
 800105c:	4620      	mov	r0, r4
 800105e:	e794      	b.n	8000f8a <__udivmoddi4+0x1e2>
 8001060:	4640      	mov	r0, r8
 8001062:	e7d1      	b.n	8001008 <__udivmoddi4+0x260>
 8001064:	46d0      	mov	r8, sl
 8001066:	e77b      	b.n	8000f60 <__udivmoddi4+0x1b8>
 8001068:	3b02      	subs	r3, #2
 800106a:	4461      	add	r1, ip
 800106c:	e732      	b.n	8000ed4 <__udivmoddi4+0x12c>
 800106e:	4630      	mov	r0, r6
 8001070:	e709      	b.n	8000e86 <__udivmoddi4+0xde>
 8001072:	4464      	add	r4, ip
 8001074:	3802      	subs	r0, #2
 8001076:	e742      	b.n	8000efe <__udivmoddi4+0x156>

08001078 <__aeabi_idiv0>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f002 fd41 	bl	8003b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f867 	bl	8001158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f000 fced 	bl	8001a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 800108e:	f000 f9b5 	bl	80013fc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001092:	f000 fa19 	bl	80014c8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8001096:	f000 fcc5 	bl	8001a24 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 800109a:	f000 f8cf 	bl	800123c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800109e:	f000 fc91 	bl	80019c4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80010a2:	f000 fafb 	bl	800169c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010a6:	f000 fb47 	bl	8001738 <MX_TIM3_Init>
  MX_ADC3_Init();
 80010aa:	f000 f937 	bl	800131c <MX_ADC3_Init>
  MX_TIM1_Init();
 80010ae:	f000 fa49 	bl	8001544 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010b2:	f000 fc33 	bl	800191c <MX_TIM8_Init>
  MX_TIM4_Init();
 80010b6:	f000 fbd7 	bl	8001868 <MX_TIM4_Init>
  MX_RTC_Init();
 80010ba:	f000 f9df 	bl	800147c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  programInit();
 80010be:	f001 fe2b 	bl	8002d18 <programInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start_IT(&hadc1);
 80010c2:	481e      	ldr	r0, [pc, #120]	; (800113c <main+0xc0>)
 80010c4:	f002 ff7a 	bl	8003fbc <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc3);
 80010c8:	481d      	ldr	r0, [pc, #116]	; (8001140 <main+0xc4>)
 80010ca:	f002 ff77 	bl	8003fbc <HAL_ADC_Start_IT>

//  HAL_UART_Transmit(&huart3,"TTT to while",12,1000);
  HAL_TIM_Base_Start_IT(&htim1);
 80010ce:	481d      	ldr	r0, [pc, #116]	; (8001144 <main+0xc8>)
 80010d0:	f006 fd1c 	bl	8007b0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	481c      	ldr	r0, [pc, #112]	; (8001148 <main+0xcc>)
 80010d6:	f006 fd19 	bl	8007b0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <main+0xd0>)
 80010dc:	f006 fd16 	bl	8007b0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80010e0:	481b      	ldr	r0, [pc, #108]	; (8001150 <main+0xd4>)
 80010e2:	f006 fd13 	bl	8007b0c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e6:	2100      	movs	r1, #0
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <main+0xd0>)
 80010ea:	f006 fdd1 	bl	8007c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010ee:	2104      	movs	r1, #4
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <main+0xd0>)
 80010f2:	f006 fdcd 	bl	8007c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4815      	ldr	r0, [pc, #84]	; (8001150 <main+0xd4>)
 80010fa:	f006 fdc9 	bl	8007c90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010fe:	210c      	movs	r1, #12
 8001100:	4812      	ldr	r0, [pc, #72]	; (800114c <main+0xd0>)
 8001102:	f006 fdc5 	bl	8007c90 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001106:	2100      	movs	r1, #0
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <main+0xc8>)
 800110a:	f006 fdc1 	bl	8007c90 <HAL_TIM_PWM_Start>
  uart_rx_enable_it();
 800110e:	f001 fe5b 	bl	8002dc8 <uart_rx_enable_it>
 8001112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001116:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001120:	683b      	ldr	r3, [r7, #0]
//  setSegment(1,1,1);
//  setSegment(2,9,1);
//  setSegment(3,7,1);
//  setNumber(1110);
//	turn_on_leds();
  __HAL_RCC_RTC_ENABLE();
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <main+0xd8>)
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	461a      	mov	r2, r3
 8001132:	2301      	movs	r3, #1
 8001134:	6013      	str	r3, [r2, #0]

  set_start_time();
 8001136:	f000 fdc1 	bl	8001cbc <set_start_time>

  while (1)
 800113a:	e7fe      	b.n	800113a <main+0xbe>
 800113c:	20000364 	.word	0x20000364
 8001140:	200003b4 	.word	0x200003b4
 8001144:	200004dc 	.word	0x200004dc
 8001148:	20000528 	.word	0x20000528
 800114c:	20000574 	.word	0x20000574
 8001150:	200005c0 	.word	0x200005c0
 8001154:	10908100 	.word	0x10908100

08001158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b09e      	sub	sp, #120	; 0x78
 800115c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001162:	2228      	movs	r2, #40	; 0x28
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f009 fb34 	bl	800a7d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	223c      	movs	r2, #60	; 0x3c
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fb26 	bl	800a7d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001188:	230b      	movs	r3, #11
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800118c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001190:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001196:	2301      	movs	r3, #1
 8001198:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119a:	2310      	movs	r3, #16
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800119e:	2301      	movs	r3, #1
 80011a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011aa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fd48 	bl	8005c4c <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011c2:	f000 fd75 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011e0:	2101      	movs	r1, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fd70 	bl	8006cc8 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ee:	f000 fd5f 	bl	8001cb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemClock_Config+0xe0>)
 80011f4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800120a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800120e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001210:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 800121a:	2300      	movs	r3, #0
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4618      	mov	r0, r3
 8001222:	f005 ff87 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800122c:	f000 fd40 	bl	8001cb0 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3778      	adds	r7, #120	; 0x78
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	000331a4 	.word	0x000331a4

0800123c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001260:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <MX_ADC1_Init+0xdc>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <MX_ADC1_Init+0xdc>)
 800127a:	2200      	movs	r2, #0
 800127c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001288:	2200      	movs	r2, #0
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <MX_ADC1_Init+0xdc>)
 800128e:	2201      	movs	r2, #1
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001298:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <MX_ADC1_Init+0xdc>)
 800129a:	2201      	movs	r2, #1
 800129c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012a8:	2204      	movs	r2, #4
 80012aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b8:	4817      	ldr	r0, [pc, #92]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012ba:	f002 fc9f 	bl	8003bfc <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 fcf4 	bl	8001cb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	; (8001318 <MX_ADC1_Init+0xdc>)
 80012d4:	f003 fdba 	bl	8004e4c <HAL_ADCEx_MultiModeConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012de:	f000 fce7 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012e2:	2304      	movs	r3, #4
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80012ee:	2307      	movs	r3, #7
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_ADC1_Init+0xdc>)
 8001300:	f003 fab8 	bl	8004874 <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800130a:	f000 fcd1 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000364 	.word	0x20000364

0800131c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001340:	4a2d      	ldr	r2, [pc, #180]	; (80013f8 <MX_ADC3_Init+0xdc>)
 8001342:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001346:	2200      	movs	r2, #0
 8001348:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <MX_ADC3_Init+0xd8>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001356:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800135c:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <MX_ADC3_Init+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136a:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <MX_ADC3_Init+0xd8>)
 800136c:	2201      	movs	r2, #1
 800136e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001378:	2201      	movs	r2, #1
 800137a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <MX_ADC3_Init+0xd8>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001386:	2204      	movs	r2, #4
 8001388:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800138a:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <MX_ADC3_Init+0xd8>)
 800138c:	2200      	movs	r2, #0
 800138e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001392:	2200      	movs	r2, #0
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <MX_ADC3_Init+0xd8>)
 8001398:	f002 fc30 	bl	8003bfc <HAL_ADC_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80013a2:	f000 fc85 	bl	8001cb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <MX_ADC3_Init+0xd8>)
 80013b2:	f003 fd4b 	bl	8004e4c <HAL_ADCEx_MultiModeConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80013bc:	f000 fc78 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80013cc:	2307      	movs	r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_ADC3_Init+0xd8>)
 80013de:	f003 fa49 	bl	8004874 <HAL_ADC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80013e8:	f000 fc62 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200003b4 	.word	0x200003b4
 80013f8:	50000400 	.word	0x50000400

080013fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_I2C1_Init+0x74>)
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <MX_I2C1_Init+0x78>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_I2C1_Init+0x74>)
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <MX_I2C1_Init+0x7c>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_I2C1_Init+0x74>)
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_I2C1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_I2C1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_I2C1_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <MX_I2C1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <MX_I2C1_Init+0x74>)
 8001438:	f004 fa10 	bl	800585c <HAL_I2C_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001442:	f000 fc35 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <MX_I2C1_Init+0x74>)
 800144a:	f004 fa96 	bl	800597a <HAL_I2CEx_ConfigAnalogFilter>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001454:	f000 fc2c 	bl	8001cb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001458:	2100      	movs	r1, #0
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <MX_I2C1_Init+0x74>)
 800145c:	f004 fad8 	bl	8005a10 <HAL_I2CEx_ConfigDigitalFilter>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001466:	f000 fc23 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000404 	.word	0x20000404
 8001474:	40005400 	.word	0x40005400
 8001478:	2000090e 	.word	0x2000090e

0800147c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_RTC_Init+0x44>)
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <MX_RTC_Init+0x48>)
 8001484:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_RTC_Init+0x44>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_RTC_Init+0x44>)
 800148e:	227f      	movs	r2, #127	; 0x7f
 8001490:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_RTC_Init+0x44>)
 8001494:	22ff      	movs	r2, #255	; 0xff
 8001496:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_RTC_Init+0x44>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_RTC_Init+0x44>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_RTC_Init+0x44>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_RTC_Init+0x44>)
 80014ac:	f005 fff2 	bl	8007494 <HAL_RTC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80014b6:	f000 fbfb 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000458 	.word	0x20000458
 80014c4:	40002800 	.word	0x40002800

080014c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_SPI1_Init+0x74>)
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <MX_SPI1_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_SPI1_Init+0x74>)
 80014d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_SPI1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_SPI1_Init+0x74>)
 80014e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_SPI1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI1_Init+0x74>)
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_SPI1_Init+0x74>)
 80014fe:	2208      	movs	r2, #8
 8001500:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI1_Init+0x74>)
 8001516:	2207      	movs	r2, #7
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_SPI1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI1_Init+0x74>)
 8001522:	2208      	movs	r2, #8
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_SPI1_Init+0x74>)
 8001528:	f006 f9ee 	bl	8007908 <HAL_SPI_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001532:	f000 fbbd 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000478 	.word	0x20000478
 8001540:	40013000 	.word	0x40013000

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b09a      	sub	sp, #104	; 0x68
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	222c      	movs	r2, #44	; 0x2c
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f009 f928 	bl	800a7d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001584:	4b43      	ldr	r3, [pc, #268]	; (8001694 <MX_TIM1_Init+0x150>)
 8001586:	4a44      	ldr	r2, [pc, #272]	; (8001698 <MX_TIM1_Init+0x154>)
 8001588:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800158a:	4b42      	ldr	r3, [pc, #264]	; (8001694 <MX_TIM1_Init+0x150>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <MX_TIM1_Init+0x150>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <MX_TIM1_Init+0x150>)
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <MX_TIM1_Init+0x150>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a4:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <MX_TIM1_Init+0x150>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <MX_TIM1_Init+0x150>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b0:	4838      	ldr	r0, [pc, #224]	; (8001694 <MX_TIM1_Init+0x150>)
 80015b2:	f006 fa54 	bl	8007a5e <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015bc:	f000 fb78 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ca:	4619      	mov	r1, r3
 80015cc:	4831      	ldr	r0, [pc, #196]	; (8001694 <MX_TIM1_Init+0x150>)
 80015ce:	f006 fe93 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015d8:	f000 fb6a 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015dc:	482d      	ldr	r0, [pc, #180]	; (8001694 <MX_TIM1_Init+0x150>)
 80015de:	f006 faff 	bl	8007be0 <HAL_TIM_PWM_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015e8:	f000 fb62 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fc:	4619      	mov	r1, r3
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <MX_TIM1_Init+0x150>)
 8001600:	f007 fb92 	bl	8008d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800160a:	f000 fb51 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001616:	2300      	movs	r3, #0
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <MX_TIM1_Init+0x150>)
 8001634:	f006 fd4c 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800163e:	f000 fb37 	bl	8001cb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_TIM1_Init+0x150>)
 8001678:	f007 fbd6 	bl	8008e28 <HAL_TIMEx_ConfigBreakDeadTime>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001682:	f000 fb15 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <MX_TIM1_Init+0x150>)
 8001688:	f001 ff78 	bl	800357c <HAL_TIM_MspPostInit>

}
 800168c:	bf00      	nop
 800168e:	3768      	adds	r7, #104	; 0x68
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200004dc 	.word	0x200004dc
 8001698:	40012c00 	.word	0x40012c00

0800169c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <MX_TIM2_Init+0x98>)
 80016bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3000-1;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <MX_TIM2_Init+0x98>)
 80016c4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80016c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_TIM2_Init+0x98>)
 80016d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_TIM2_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <MX_TIM2_Init+0x98>)
 80016e6:	f006 f9ba 	bl	8007a5e <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80016f0:	f000 fade 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_TIM2_Init+0x98>)
 8001702:	f006 fdf9 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800170c:	f000 fad0 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_TIM2_Init+0x98>)
 800171e:	f007 fb03 	bl	8008d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001728:	f000 fac2 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000528 	.word	0x20000528

08001738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	; 0x38
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <MX_TIM3_Init+0x128>)
 800176c:	4a3d      	ldr	r2, [pc, #244]	; (8001864 <MX_TIM3_Init+0x12c>)
 800176e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001770:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <MX_TIM3_Init+0x128>)
 8001772:	222f      	movs	r2, #47	; 0x2f
 8001774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b3a      	ldr	r3, [pc, #232]	; (8001860 <MX_TIM3_Init+0x128>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <MX_TIM3_Init+0x128>)
 800177e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001782:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <MX_TIM3_Init+0x128>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178a:	4b35      	ldr	r3, [pc, #212]	; (8001860 <MX_TIM3_Init+0x128>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001790:	4833      	ldr	r0, [pc, #204]	; (8001860 <MX_TIM3_Init+0x128>)
 8001792:	f006 f964 	bl	8007a5e <HAL_TIM_Base_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800179c:	f000 fa88 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017aa:	4619      	mov	r1, r3
 80017ac:	482c      	ldr	r0, [pc, #176]	; (8001860 <MX_TIM3_Init+0x128>)
 80017ae:	f006 fda3 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80017b8:	f000 fa7a 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017bc:	4828      	ldr	r0, [pc, #160]	; (8001860 <MX_TIM3_Init+0x128>)
 80017be:	f006 fa0f 	bl	8007be0 <HAL_TIM_PWM_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80017c8:	f000 fa72 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4821      	ldr	r0, [pc, #132]	; (8001860 <MX_TIM3_Init+0x128>)
 80017dc:	f007 faa4 	bl	8008d28 <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017e6:	f000 fa63 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ea:	2360      	movs	r3, #96	; 0x60
 80017ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	4817      	ldr	r0, [pc, #92]	; (8001860 <MX_TIM3_Init+0x128>)
 8001802:	f006 fc65 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800180c:	f000 fa50 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	2204      	movs	r2, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <MX_TIM3_Init+0x128>)
 8001818:	f006 fc5a 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001822:	f000 fa45 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001826:	463b      	mov	r3, r7
 8001828:	2208      	movs	r2, #8
 800182a:	4619      	mov	r1, r3
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MX_TIM3_Init+0x128>)
 800182e:	f006 fc4f 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001838:	f000 fa3a 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	220c      	movs	r2, #12
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM3_Init+0x128>)
 8001844:	f006 fc44 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800184e:	f000 fa2f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM3_Init+0x128>)
 8001854:	f001 fe92 	bl	800357c <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000574 	.word	0x20000574
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <MX_TIM4_Init+0xac>)
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <MX_TIM4_Init+0xb0>)
 8001890:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <MX_TIM4_Init+0xac>)
 8001894:	222f      	movs	r2, #47	; 0x2f
 8001896:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_TIM4_Init+0xac>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_TIM4_Init+0xac>)
 80018a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_TIM4_Init+0xac>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <MX_TIM4_Init+0xac>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018b2:	4818      	ldr	r0, [pc, #96]	; (8001914 <MX_TIM4_Init+0xac>)
 80018b4:	f006 f994 	bl	8007be0 <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80018be:	f000 f9f7 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	4810      	ldr	r0, [pc, #64]	; (8001914 <MX_TIM4_Init+0xac>)
 80018d2:	f007 fa29 	bl	8008d28 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80018dc:	f000 f9e8 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	; 0x60
 80018e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM4_Init+0xac>)
 80018f8:	f006 fbea 	bl	80080d0 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001902:	f000 f9d5 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM4_Init+0xac>)
 8001908:	f001 fe38 	bl	800357c <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200005c0 	.word	0x200005c0
 8001918:	40000800 	.word	0x40000800

0800191c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_TIM8_Init+0xa0>)
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <MX_TIM8_Init+0xa4>)
 800193e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_TIM8_Init+0xa0>)
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_TIM8_Init+0xa0>)
 800195c:	2200      	movs	r2, #0
 800195e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001966:	4815      	ldr	r0, [pc, #84]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001968:	f006 f879 	bl	8007a5e <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001972:	f000 f99d 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480e      	ldr	r0, [pc, #56]	; (80019bc <MX_TIM8_Init+0xa0>)
 8001984:	f006 fcb8 	bl	80082f8 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800198e:	f000 f98f 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <MX_TIM8_Init+0xa0>)
 80019a4:	f007 f9c0 	bl	8008d28 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80019ae:	f000 f97f 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000060c 	.word	0x2000060c
 80019c0:	40013400 	.word	0x40013400

080019c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <MX_USART3_UART_Init+0x5c>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80019d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_USART3_UART_Init+0x58>)
 8001a08:	f007 faaa 	bl	8008f60 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a12:	f000 f94d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000658 	.word	0x20000658
 8001a20:	40004800 	.word	0x40004800

08001a24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <MX_USB_PCD_Init+0x40>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a30:	2208      	movs	r2, #8
 8001a32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a36:	2202      	movs	r2, #2
 8001a38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_USB_PCD_Init+0x3c>)
 8001a4e:	f004 f82b 	bl	8005aa8 <HAL_PCD_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001a58:	f000 f92a 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200006e0 	.word	0x200006e0
 8001a64:	40005c00 	.word	0x40005c00

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7e:	4b86      	ldr	r3, [pc, #536]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	4a85      	ldr	r2, [pc, #532]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a88:	6153      	str	r3, [r2, #20]
 8001a8a:	4b83      	ldr	r3, [pc, #524]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b80      	ldr	r3, [pc, #512]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	4a7f      	ldr	r2, [pc, #508]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa0:	6153      	str	r3, [r2, #20]
 8001aa2:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4a79      	ldr	r2, [pc, #484]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab8:	6153      	str	r3, [r2, #20]
 8001aba:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b74      	ldr	r3, [pc, #464]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	4a73      	ldr	r2, [pc, #460]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	6153      	str	r3, [r2, #20]
 8001ad2:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a6d      	ldr	r2, [pc, #436]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af6:	4b68      	ldr	r3, [pc, #416]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a67      	ldr	r2, [pc, #412]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <MX_GPIO_Init+0x230>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001b14:	4861      	ldr	r0, [pc, #388]	; (8001c9c <MX_GPIO_Init+0x234>)
 8001b16:	f003 fe57 	bl	80057c8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2114      	movs	r1, #20
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f003 fe51 	bl	80057c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2150      	movs	r1, #80	; 0x50
 8001b2a:	485d      	ldr	r0, [pc, #372]	; (8001ca0 <MX_GPIO_Init+0x238>)
 8001b2c:	f003 fe4c 	bl	80057c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f242 0105 	movw	r1, #8197	; 0x2005
 8001b36:	485b      	ldr	r0, [pc, #364]	; (8001ca4 <MX_GPIO_Init+0x23c>)
 8001b38:	f003 fe46 	bl	80057c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_13, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8001b42:	4859      	ldr	r0, [pc, #356]	; (8001ca8 <MX_GPIO_Init+0x240>)
 8001b44:	f003 fe40 	bl	80057c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT4_Pin;
 8001b48:	2324      	movs	r3, #36	; 0x24
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b4c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	484f      	ldr	r0, [pc, #316]	; (8001c9c <MX_GPIO_Init+0x234>)
 8001b5e:	f003 fcb9 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001b62:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001b66:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4848      	ldr	r0, [pc, #288]	; (8001c9c <MX_GPIO_Init+0x234>)
 8001b7c:	f003 fcaa 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4842      	ldr	r0, [pc, #264]	; (8001ca0 <MX_GPIO_Init+0x238>)
 8001b96:	f003 fc9d 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb0:	f003 fc90 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f003 fc82 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001bd0:	2314      	movs	r3, #20
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 031c 	add.w	r3, r7, #28
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bea:	f003 fc73 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	482a      	ldr	r0, [pc, #168]	; (8001cac <MX_GPIO_Init+0x244>)
 8001c04:	f003 fc66 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001c08:	2350      	movs	r3, #80	; 0x50
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4820      	ldr	r0, [pc, #128]	; (8001ca0 <MX_GPIO_Init+0x238>)
 8001c20:	f003 fc58 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_13;
 8001c24:	f242 0305 	movw	r3, #8197	; 0x2005
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <MX_GPIO_Init+0x23c>)
 8001c3e:	f003 fc49 	bl	80054d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_13;
 8001c42:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <MX_GPIO_Init+0x240>)
 8001c5c:	f003 fc3a 	bl	80054d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2006      	movs	r0, #6
 8001c66:	f003 fb88 	bl	800537a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c6a:	2006      	movs	r0, #6
 8001c6c:	f003 fba1 	bl	80053b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	2007      	movs	r0, #7
 8001c76:	f003 fb80 	bl	800537a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c7a:	2007      	movs	r0, #7
 8001c7c:	f003 fb99 	bl	80053b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	200a      	movs	r0, #10
 8001c86:	f003 fb78 	bl	800537a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f003 fb91 	bl	80053b2 <HAL_NVIC_EnableIRQ>

}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	48001000 	.word	0x48001000
 8001ca0:	48000800 	.word	0x48000800
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	48000c00 	.word	0x48000c00
 8001cac:	48001400 	.word	0x48001400

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>
	...

08001cbc <set_start_time>:
extern RTC_HandleTypeDef hrtc;

RTC_TimeTypeDef rtc_time ;
char timeStr[100];

void set_start_time(){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
	time_t currentTime;
	struct tm *localTime;
	time(&currentTime);
 8001cc2:	f107 0318 	add.w	r3, r7, #24
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00a fc4e 	bl	800c568 <time>
	localTime = localtime(&currentTime);
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 fc5d 	bl	800a590 <localtime>
 8001cd6:	6278      	str	r0, [r7, #36]	; 0x24
//    printf("Current time: %02d:%02d:%02d\n", localTime->tm_hour, localTime->tm_min, localTime->tm_sec);

	RTC_TimeTypeDef start_t ;
	start_t.Hours = localTime->tm_hour;
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	713b      	strb	r3, [r7, #4]
	start_t.Minutes = localTime->tm_min;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	717b      	strb	r3, [r7, #5]
	start_t.Seconds = localTime->tm_sec;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	71bb      	strb	r3, [r7, #6]

    HAL_RTC_SetTime(&hrtc, &start_t, RTC_FORMAT_BIN);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4803      	ldr	r0, [pc, #12]	; (8001d04 <set_start_time+0x48>)
 8001cf8:	f005 fc4f 	bl	800759a <HAL_RTC_SetTime>
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000458 	.word	0x20000458

08001d08 <PWM_Change_Tone>:

TIM_HandleTypeDef *pwm_timer_buzzer = &htim1; // Point to PWM timer configured in CubeMX
uint32_t pwm_channel_buzz = TIM_CHANNEL_1;  // Specify configured PWM channel

void PWM_Change_Tone(uint32_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]

//  volume=5;
  if (pwm_freq == 0 || pwm_freq > 20000)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <PWM_Change_Tone+0x1c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d937      	bls.n	8001d94 <PWM_Change_Tone+0x8c>
  {
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, 0);
 8001d24:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d105      	bne.n	8001d38 <PWM_Change_Tone+0x30>
 8001d2c:	4b51      	ldr	r3, [pc, #324]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
 8001d36:	e097      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001d38:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d105      	bne.n	8001d4c <PWM_Change_Tone+0x44>
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	6393      	str	r3, [r2, #56]	; 0x38
 8001d4a:	e08d      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001d4c:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d105      	bne.n	8001d60 <PWM_Change_Tone+0x58>
 8001d54:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d5e:	e083      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d105      	bne.n	8001d74 <PWM_Change_Tone+0x6c>
 8001d68:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	e079      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001d74:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d105      	bne.n	8001d88 <PWM_Change_Tone+0x80>
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	e06f      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d92:	e069      	b.n	8001e68 <PWM_Change_Tone+0x160>
  }
  else
  {
    const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001d94:	f005 f914 	bl	8006fc0 <HAL_RCC_GetSysClockFreq>
 8001d98:	61f8      	str	r0, [r7, #28]
	const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4a35      	ldr	r2, [pc, #212]	; (8001e78 <PWM_Change_Tone+0x170>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0b9b      	lsrs	r3, r3, #14
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	837b      	strh	r3, [r7, #26]
    const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001db0:	8b7b      	ldrh	r3, [r7, #26]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    const uint32_t period_cycles = timer_clock / pwm_freq;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	613b      	str	r3, [r7, #16]
    const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <PWM_Change_Tone+0x174>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	09db      	lsrs	r3, r3, #7
 8001dd4:	60fb      	str	r3, [r7, #12]

    pwm_timer_buzzer->Instance->PSC = prescaler - 1;
 8001dd6:	8b7b      	ldrh	r3, [r7, #26]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
    pwm_timer_buzzer->Instance->ARR = period_cycles - 1;
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	3a01      	subs	r2, #1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
    pwm_timer_buzzer->Instance->EGR = TIM_EGR_UG;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <PWM_Change_Tone+0x104>
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8001e0a:	e02d      	b.n	8001e68 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d105      	bne.n	8001e20 <PWM_Change_Tone+0x118>
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e1e:	e023      	b.n	8001e68 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d105      	bne.n	8001e34 <PWM_Change_Tone+0x12c>
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001e32:	e019      	b.n	8001e68 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b0c      	cmp	r3, #12
 8001e3a:	d105      	bne.n	8001e48 <PWM_Change_Tone+0x140>
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e46:	e00f      	b.n	8001e68 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <PWM_Change_Tone+0x168>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d105      	bne.n	8001e5c <PWM_Change_Tone+0x154>
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001e5a:	e005      	b.n	8001e68 <PWM_Change_Tone+0x160>
    __HAL_TIM_SET_COMPARE(pwm_timer_buzzer, pwm_channel_buzz, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <PWM_Change_Tone+0x16c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001e66:	e7ff      	b.n	8001e68 <PWM_Change_Tone+0x160>
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000a48 	.word	0x20000a48
 8001e74:	2000009c 	.word	0x2000009c
 8001e78:	45e7b273 	.word	0x45e7b273
 8001e7c:	10624dd3 	.word	0x10624dd3

08001e80 <turn_on_leds>:

int alert = 0;
uint32_t LEDs_power;

void turn_on_leds(){
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
	// Green 2 PC7

	// white 3 PE4

	// red 4 PC9
	if(alert == 0){
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <turn_on_leds+0xd0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d15c      	bne.n	8001f46 <turn_on_leds+0xc6>
		if(numbers[1] == 1){
 8001e8c:	4b31      	ldr	r3, [pc, #196]	; (8001f54 <turn_on_leds+0xd4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d111      	bne.n	8001eb8 <turn_on_leds+0x38>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <turn_on_leds+0xd8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <turn_on_leds+0xdc>)
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <turn_on_leds+0xd8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <turn_on_leds+0xe0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <turn_on_leds+0xd8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
		}
	}
}
 8001eb6:	e046      	b.n	8001f46 <turn_on_leds+0xc6>
		}else if(numbers[1] == 2){
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <turn_on_leds+0xd4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d112      	bne.n	8001ee6 <turn_on_leds+0x66>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001ec0:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <turn_on_leds+0xd8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a25      	ldr	r2, [pc, #148]	; (8001f5c <turn_on_leds+0xdc>)
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <turn_on_leds+0xd8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <turn_on_leds+0xdc>)
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <turn_on_leds+0xe0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <turn_on_leds+0xd8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ee4:	e02f      	b.n	8001f46 <turn_on_leds+0xc6>
		}else if(numbers[1] == 3){
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <turn_on_leds+0xd4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d113      	bne.n	8001f16 <turn_on_leds+0x96>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <turn_on_leds+0xd8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1a      	ldr	r2, [pc, #104]	; (8001f5c <turn_on_leds+0xdc>)
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <turn_on_leds+0xd8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <turn_on_leds+0xdc>)
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <turn_on_leds+0xe0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <turn_on_leds+0xdc>)
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <turn_on_leds+0xd8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2200      	movs	r2, #0
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f14:	e017      	b.n	8001f46 <turn_on_leds+0xc6>
		}else if(numbers[1] == 4){
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <turn_on_leds+0xd4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d113      	bne.n	8001f46 <turn_on_leds+0xc6>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, LEDs_power);
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <turn_on_leds+0xd8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <turn_on_leds+0xdc>)
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, LEDs_power);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <turn_on_leds+0xd8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <turn_on_leds+0xdc>)
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, LEDs_power);
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <turn_on_leds+0xe0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <turn_on_leds+0xdc>)
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LEDs_power);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <turn_on_leds+0xd8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <turn_on_leds+0xdc>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	20000a4c 	.word	0x20000a4c
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000574 	.word	0x20000574
 8001f5c:	20000a50 	.word	0x20000a50
 8001f60:	200005c0 	.word	0x200005c0

08001f64 <turn_off_leds>:

void turn_off_leds(){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	// Orange(yellow)1 PB4
	// Green 2 PC7
	// white 3 PE4
	// red 4 PC9

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <turn_off_leds+0x58>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <turn_off_leds+0x58>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <turn_off_leds+0x5c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <turn_off_leds+0x58>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40

		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <turn_off_leds+0x60>)
 8001f90:	f003 fc1a 	bl	80057c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9a:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <turn_off_leds+0x60>)
 8001f9c:	f003 fc14 	bl	80057c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa6:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <turn_off_leds+0x60>)
 8001fa8:	f003 fc0e 	bl	80057c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb2:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <turn_off_leds+0x60>)
 8001fb4:	f003 fc08 	bl	80057c8 <HAL_GPIO_WritePin>
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000574 	.word	0x20000574
 8001fc0:	200005c0 	.word	0x200005c0
 8001fc4:	48001000 	.word	0x48001000

08001fc8 <sin_signal>:
void sin_signal(int counter){
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	int max = 10000;
 8001fd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001fd4:	60fb      	str	r3, [r7, #12]
	uint32_t x = (uint32_t) (max * sin(counter * (M_PI  / 180)) + 10000);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7fe faae 	bl	8000538 <__aeabi_i2d>
 8001fdc:	4604      	mov	r4, r0
 8001fde:	460d      	mov	r5, r1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe faa9 	bl	8000538 <__aeabi_i2d>
 8001fe6:	a318      	add	r3, pc, #96	; (adr r3, 8002048 <sin_signal+0x80>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb0e 	bl	800060c <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	ec43 2b17 	vmov	d7, r2, r3
 8001ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8001ffc:	eef0 0a67 	vmov.f32	s1, s15
 8002000:	f00e f80e 	bl	8010020 <sin>
 8002004:	ec53 2b10 	vmov	r2, r3, d0
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe fafe 	bl	800060c <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	a30d      	add	r3, pc, #52	; (adr r3, 8002050 <sin_signal+0x88>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f93f 	bl	80002a0 <__adddf3>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fdc7 	bl	8000bbc <__aeabi_d2uiz>
 800202e:	4603      	mov	r3, r0
 8002030:	60bb      	str	r3, [r7, #8]
	PWM_Change_Tone(x, 1000);
 8002032:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002036:	68b8      	ldr	r0, [r7, #8]
 8002038:	f7ff fe66 	bl	8001d08 <PWM_Change_Tone>
//	printf("%f   %d\n", x, counter);

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bdb0      	pop	{r4, r5, r7, pc}
 8002044:	f3af 8000 	nop.w
 8002048:	a2529d39 	.word	0xa2529d39
 800204c:	3f91df46 	.word	0x3f91df46
 8002050:	00000000 	.word	0x00000000
 8002054:	40c38800 	.word	0x40c38800

08002058 <square_signal>:

void square_signal(int counter){
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b5f      	cmp	r3, #95	; 0x5f
 8002064:	dd0c      	ble.n	8002080 <square_signal+0x28>
		counter = counter % 96;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <square_signal+0x64>)
 800206a:	fb83 1302 	smull	r1, r3, r3, r2
 800206e:	1119      	asrs	r1, r3, #4
 8002070:	17d3      	asrs	r3, r2, #31
 8002072:	1ac9      	subs	r1, r1, r3
 8002074:	460b      	mov	r3, r1
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	440b      	add	r3, r1
 800207a:	015b      	lsls	r3, r3, #5
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	607b      	str	r3, [r7, #4]

	}

	if (counter < 48) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b2f      	cmp	r3, #47	; 0x2f
 8002084:	dc08      	bgt.n	8002098 <square_signal+0x40>
		uint32_t x = 20000;
 8002086:	f644 6320 	movw	r3, #20000	; 0x4e20
 800208a:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 800208c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f7ff fe39 	bl	8001d08 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8002096:	e00d      	b.n	80020b4 <square_signal+0x5c>
	else if (counter >= 48 && counter < 96){
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b2f      	cmp	r3, #47	; 0x2f
 800209c:	dd0a      	ble.n	80020b4 <square_signal+0x5c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b5f      	cmp	r3, #95	; 0x5f
 80020a2:	dc07      	bgt.n	80020b4 <square_signal+0x5c>
		uint32_t x = 5000;
 80020a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80020a8:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 80020aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f7ff fe2a 	bl	8001d08 <PWM_Change_Tone>
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2aaaaaab 	.word	0x2aaaaaab

080020c0 <triangle_signal>:

void triangle_signal(int counter){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	if (counter >= 96){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b5f      	cmp	r3, #95	; 0x5f
 80020cc:	dd0c      	ble.n	80020e8 <triangle_signal+0x28>
		counter = counter % 96;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <triangle_signal+0x68>)
 80020d2:	fb83 1302 	smull	r1, r3, r3, r2
 80020d6:	1119      	asrs	r1, r3, #4
 80020d8:	17d3      	asrs	r3, r2, #31
 80020da:	1ac9      	subs	r1, r1, r3
 80020dc:	460b      	mov	r3, r1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	440b      	add	r3, r1
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	607b      	str	r3, [r7, #4]
	}

	if (counter < 80) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b4f      	cmp	r3, #79	; 0x4f
 80020ec:	dc0a      	bgt.n	8002104 <triangle_signal+0x44>
		uint32_t x = 250 * counter;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	22fa      	movs	r2, #250	; 0xfa
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	60bb      	str	r3, [r7, #8]
		PWM_Change_Tone(x, 1000);
 80020f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020fc:	68b8      	ldr	r0, [r7, #8]
 80020fe:	f7ff fe03 	bl	8001d08 <PWM_Change_Tone>
		PWM_Change_Tone(x, 1000);

//		printf("%f   %d\n", x, counter);
	}

}
 8002102:	e00c      	b.n	800211e <triangle_signal+0x5e>
	else if (counter >= 80 && counter < 96){
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b4f      	cmp	r3, #79	; 0x4f
 8002108:	dd09      	ble.n	800211e <triangle_signal+0x5e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b5f      	cmp	r3, #95	; 0x5f
 800210e:	dc06      	bgt.n	800211e <triangle_signal+0x5e>
		uint32_t x = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
		PWM_Change_Tone(x, 1000);
 8002114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fdf5 	bl	8001d08 <PWM_Change_Tone>
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2aaaaaab 	.word	0x2aaaaaab

0800212c <seven_segment_display_decimal>:
        .digits={0, 0, 0, 0},
        .number = 0};



void seven_segment_display_decimal(uint32_t n) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
    if (n < 10) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b09      	cmp	r3, #9
 8002138:	d832      	bhi.n	80021a0 <seven_segment_display_decimal+0x74>
        HAL_GPIO_WritePin(seven_segment.BCD_input[0].port, seven_segment.BCD_input[0].pin, (n & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 800213c:	6a18      	ldr	r0, [r3, #32]
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 8002140:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	f003 fb3b 	bl	80057c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[1].port, seven_segment.BCD_input[1].pin, (n & 2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 8002154:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 8002158:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	f003 fb2e 	bl	80057c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[2].port, seven_segment.BCD_input[2].pin, (n & 4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 800216e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 8002172:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	f003 fb21 	bl	80057c8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(seven_segment.BCD_input[3].port, seven_segment.BCD_input[3].pin, (n & 8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 8002188:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <seven_segment_display_decimal+0x7c>)
 800218c:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	f003 fb14 	bl	80057c8 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
    }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200000a0 	.word	0x200000a0

080021ac <seven_segment_deactivate_digits>:

void seven_segment_deactivate_digits(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; ++i) {
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	e00f      	b.n	80021d8 <seven_segment_deactivate_digits+0x2c>
        HAL_GPIO_WritePin(seven_segment.digit_activators[i].port, seven_segment.digit_activators[i].pin, GPIO_PIN_SET);
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <seven_segment_deactivate_digits+0x3c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80021c0:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <seven_segment_deactivate_digits+0x3c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	889b      	ldrh	r3, [r3, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4619      	mov	r1, r3
 80021ce:	f003 fafb 	bl	80057c8 <HAL_GPIO_WritePin>
    for (int i = 0; i < 4; ++i) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	ddec      	ble.n	80021b8 <seven_segment_deactivate_digits+0xc>
    }
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	200000a0 	.word	0x200000a0

080021ec <seven_segment_activate_digit>:

int last_time_on = 0;
void seven_segment_activate_digit(uint32_t d) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    if (d < 4) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d834      	bhi.n	8002264 <seven_segment_activate_digit+0x78>
//		}
//		else if (d != (2-state)){
//			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
//		}

		if(d == state && (HAL_GetTick() - last_time_on) > 40){
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <seven_segment_activate_digit+0x80>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4293      	cmp	r3, r2
 8002204:	d11b      	bne.n	800223e <seven_segment_activate_digit+0x52>
 8002206:	f001 fcd9 	bl	8003bbc <HAL_GetTick>
 800220a:	4603      	mov	r3, r0
 800220c:	4a18      	ldr	r2, [pc, #96]	; (8002270 <seven_segment_activate_digit+0x84>)
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	2b28      	cmp	r3, #40	; 0x28
 8002214:	d913      	bls.n	800223e <seven_segment_activate_digit+0x52>
//			HAL_Delay(35);
			HAL_GPIO_TogglePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin);
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <seven_segment_activate_digit+0x88>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800221e:	4915      	ldr	r1, [pc, #84]	; (8002274 <seven_segment_activate_digit+0x88>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	889b      	ldrh	r3, [r3, #4]
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f003 fae4 	bl	80057f8 <HAL_GPIO_TogglePin>
			last_time_on = HAL_GetTick();
 8002230:	f001 fcc4 	bl	8003bbc <HAL_GetTick>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <seven_segment_activate_digit+0x84>)
 800223a:	601a      	str	r2, [r3, #0]
		}
		else if (d != state){
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
		}
    }
}
 800223c:	e012      	b.n	8002264 <seven_segment_activate_digit+0x78>
		else if (d != state){
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <seven_segment_activate_digit+0x80>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4293      	cmp	r3, r2
 8002248:	d00c      	beq.n	8002264 <seven_segment_activate_digit+0x78>
			HAL_GPIO_WritePin(seven_segment.digit_activators[d].port, seven_segment.digit_activators[d].pin, GPIO_PIN_RESET);
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <seven_segment_activate_digit+0x88>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <seven_segment_activate_digit+0x88>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	889b      	ldrh	r3, [r3, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	f003 fab2 	bl	80057c8 <HAL_GPIO_WritePin>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000a44 	.word	0x20000a44
 8002270:	20000a54 	.word	0x20000a54
 8002274:	200000a0 	.word	0x200000a0

08002278 <seven_segment_set_num>:

void seven_segment_set_num(int num[4]) {
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
        for (uint32_t i = 0; i <= 3; ++i) {
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e00d      	b.n	80022a2 <seven_segment_set_num+0x2a>
            seven_segment.digits[i] = num[i];
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4619      	mov	r1, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <seven_segment_set_num+0x40>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3310      	adds	r3, #16
 8002298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (uint32_t i = 0; i <= 3; ++i) {
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d9ee      	bls.n	8002286 <seven_segment_set_num+0xe>
		}
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200000a0 	.word	0x200000a0

080022bc <seven_segment_refresh>:

void seven_segment_refresh(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    static uint32_t state_tmp = 0;
    static uint32_t last_time_tmp = 0;
    //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
    if (HAL_GetTick() - last_time_tmp > 5) {
 80022c0:	f001 fc7c 	bl	8003bbc <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <seven_segment_refresh+0x9c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d940      	bls.n	8002352 <seven_segment_refresh+0x96>
        seven_segment_deactivate_digits();
 80022d0:	f7ff ff6c 	bl	80021ac <seven_segment_deactivate_digits>
        seven_segment_activate_digit(state_tmp);
 80022d4:	4b21      	ldr	r3, [pc, #132]	; (800235c <seven_segment_refresh+0xa0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff87 	bl	80021ec <seven_segment_activate_digit>
        seven_segment_display_decimal(seven_segment.digits[state_tmp]);
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <seven_segment_refresh+0xa0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <seven_segment_refresh+0xa4>)
 80022e4:	3310      	adds	r3, #16
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff1e 	bl	800212c <seven_segment_display_decimal>
        if ((state == 2 && state_tmp == 2) || (state==1 && state_tmp==1) || (state == 0 && state_tmp == 0)){
 80022f0:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <seven_segment_refresh+0xa8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d103      	bne.n	8002300 <seven_segment_refresh+0x44>
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <seven_segment_refresh+0xa0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d00f      	beq.n	8002320 <seven_segment_refresh+0x64>
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <seven_segment_refresh+0xa8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d103      	bne.n	8002310 <seven_segment_refresh+0x54>
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <seven_segment_refresh+0xa0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d007      	beq.n	8002320 <seven_segment_refresh+0x64>
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <seven_segment_refresh+0xa8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <seven_segment_refresh+0x72>
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <seven_segment_refresh+0xa0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <seven_segment_refresh+0x72>
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	2104      	movs	r1, #4
 8002324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002328:	f003 fa4e 	bl	80057c8 <HAL_GPIO_WritePin>
 800232c:	e005      	b.n	800233a <seven_segment_refresh+0x7e>
        }else{
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2104      	movs	r1, #4
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002336:	f003 fa47 	bl	80057c8 <HAL_GPIO_WritePin>
        }
        state_tmp = (state_tmp + 1) % 4; //active each 4 segments
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <seven_segment_refresh+0xa0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	4a05      	ldr	r2, [pc, #20]	; (800235c <seven_segment_refresh+0xa0>)
 8002346:	6013      	str	r3, [r2, #0]
        last_time_tmp = HAL_GetTick();
 8002348:	f001 fc38 	bl	8003bbc <HAL_GetTick>
 800234c:	4603      	mov	r3, r0
 800234e:	4a02      	ldr	r2, [pc, #8]	; (8002358 <seven_segment_refresh+0x9c>)
 8002350:	6013      	str	r3, [r2, #0]
    }
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000ab8 	.word	0x20000ab8
 800235c:	20000abc 	.word	0x20000abc
 8002360:	200000a0 	.word	0x200000a0
 8002364:	20000a44 	.word	0x20000a44

08002368 <programLoop>:

void programContinue(){
	seven_segment_set_num(numbers);
}

void programLoop() {
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
    seven_segment_refresh();
 800236c:	f7ff ffa6 	bl	80022bc <seven_segment_refresh>
}
 8002370:	bf00      	nop
 8002372:	bd80      	pop	{r7, pc}

08002374 <setNumber>:
		numbers[state]=digit;
	}
	seven_segment_set_num(numbers);
}

void setNumber(int number){
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	int a = 0, b = 0, c = 0, d = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
	if (number <= 9999 && number >= 0){
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002392:	4293      	cmp	r3, r2
 8002394:	dc5b      	bgt.n	800244e <setNumber+0xda>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db58      	blt.n	800244e <setNumber+0xda>
		a = number % 10;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <setNumber+0xe4>)
 80023a0:	fb83 1302 	smull	r1, r3, r3, r2
 80023a4:	1099      	asrs	r1, r3, #2
 80023a6:	17d3      	asrs	r3, r2, #31
 80023a8:	1ac9      	subs	r1, r1, r3
 80023aa:	460b      	mov	r3, r1
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
		number /= 10;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a27      	ldr	r2, [pc, #156]	; (8002458 <setNumber+0xe4>)
 80023ba:	fb82 1203 	smull	r1, r2, r2, r3
 80023be:	1092      	asrs	r2, r2, #2
 80023c0:	17db      	asrs	r3, r3, #31
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	607b      	str	r3, [r7, #4]
		b = number % 10;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4b23      	ldr	r3, [pc, #140]	; (8002458 <setNumber+0xe4>)
 80023ca:	fb83 1302 	smull	r1, r3, r3, r2
 80023ce:	1099      	asrs	r1, r3, #2
 80023d0:	17d3      	asrs	r3, r2, #31
 80023d2:	1ac9      	subs	r1, r1, r3
 80023d4:	460b      	mov	r3, r1
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	623b      	str	r3, [r7, #32]
		number /= 10;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <setNumber+0xe4>)
 80023e4:	fb82 1203 	smull	r1, r2, r2, r3
 80023e8:	1092      	asrs	r2, r2, #2
 80023ea:	17db      	asrs	r3, r3, #31
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	607b      	str	r3, [r7, #4]
		c = number % 10;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <setNumber+0xe4>)
 80023f4:	fb83 1302 	smull	r1, r3, r3, r2
 80023f8:	1099      	asrs	r1, r3, #2
 80023fa:	17d3      	asrs	r3, r2, #31
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	460b      	mov	r3, r1
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	61fb      	str	r3, [r7, #28]
		number /= 10;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <setNumber+0xe4>)
 800240e:	fb82 1203 	smull	r1, r2, r2, r3
 8002412:	1092      	asrs	r2, r2, #2
 8002414:	17db      	asrs	r3, r3, #31
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	607b      	str	r3, [r7, #4]
		d = number % 10;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <setNumber+0xe4>)
 800241e:	fb83 1302 	smull	r1, r3, r3, r2
 8002422:	1099      	asrs	r1, r3, #2
 8002424:	17d3      	asrs	r3, r2, #31
 8002426:	1ac9      	subs	r1, r1, r3
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	61bb      	str	r3, [r7, #24]
		int numbers2[4]={d,c,b,a};
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	617b      	str	r3, [r7, #20]
		seven_segment_set_num(numbers2);
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff15 	bl	8002278 <seven_segment_set_num>
	}

}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	; 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	66666667 	.word	0x66666667

0800245c <HAL_GPIO_EXTI_Callback>:
int threshhold_plus = 0;
int initBR=-1;
int threshold=-1;
int initFlag;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800245c:	b580      	push	{r7, lr}
 800245e:	b0a8      	sub	sp, #160	; 0xa0
 8002460:	af02      	add	r7, sp, #8
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
	char data[100];
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002466:	2200      	movs	r2, #0
 8002468:	498e      	ldr	r1, [pc, #568]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x248>)
 800246a:	488f      	ldr	r0, [pc, #572]	; (80026a8 <HAL_GPIO_EXTI_Callback+0x24c>)
 800246c:	f005 f92f 	bl	80076ce <HAL_RTC_GetTime>
	sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002470:	4b8c      	ldr	r3, [pc, #560]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x248>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	4b8b      	ldr	r3, [pc, #556]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x248>)
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	4619      	mov	r1, r3
 800247c:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_GPIO_EXTI_Callback+0x248>)
 800247e:	789b      	ldrb	r3, [r3, #2]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	460b      	mov	r3, r1
 8002484:	4989      	ldr	r1, [pc, #548]	; (80026ac <HAL_GPIO_EXTI_Callback+0x250>)
 8002486:	488a      	ldr	r0, [pc, #552]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002488:	f009 f91c 	bl	800b6c4 <siprintf>
	if (initFlag==0){
 800248c:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_GPIO_EXTI_Callback+0x258>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 81f2 	bne.w	800287a <HAL_GPIO_EXTI_Callback+0x41e>
		if (GPIO_Pin == GPIO_PIN_4) { //Left button (Decrease Number) ==> PF4
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b10      	cmp	r3, #16
 800249a:	f040 80b0 	bne.w	80025fe <HAL_GPIO_EXTI_Callback+0x1a2>
			if (HAL_GetTick() - last_time2 > 400){
 800249e:	f001 fb8d 	bl	8003bbc <HAL_GetTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a84      	ldr	r2, [pc, #528]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80024ae:	f240 81e0 	bls.w	8002872 <HAL_GPIO_EXTI_Callback+0x416>
				int n = sprintf(data, "[INFO] %s Digit %d Decreased\n", timeStr,state+1);
 80024b2:	4b82      	ldr	r3, [pc, #520]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	f107 000c 	add.w	r0, r7, #12
 80024bc:	4a7c      	ldr	r2, [pc, #496]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 80024be:	4980      	ldr	r1, [pc, #512]	; (80026c0 <HAL_GPIO_EXTI_Callback+0x264>)
 80024c0:	f009 f900 	bl	800b6c4 <siprintf>
 80024c4:	67f8      	str	r0, [r7, #124]	; 0x7c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 80024c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f107 010c 	add.w	r1, r7, #12
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	487c      	ldr	r0, [pc, #496]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80024d4:	f006 fd92 	bl	8008ffc <HAL_UART_Transmit>
				if (state == 0){
 80024d8:	4b78      	ldr	r3, [pc, #480]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d12a      	bne.n	8002536 <HAL_GPIO_EXTI_Callback+0xda>
					numbers[state]=(numbers[state] - 1);
 80024e0:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80024e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024ea:	4b74      	ldr	r3, [pc, #464]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3a01      	subs	r2, #1
 80024f0:	4975      	ldr	r1, [pc, #468]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (numbers[state] == -1)
 80024f6:	4b71      	ldr	r3, [pc, #452]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a73      	ldr	r2, [pc, #460]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80024fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d105      	bne.n	8002512 <HAL_GPIO_EXTI_Callback+0xb6>
						numbers[state]=9;
 8002506:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a6f      	ldr	r2, [pc, #444]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 800250c:	2109      	movs	r1, #9
 800250e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s DimStep Decreased\n", timeStr);
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002518:	496c      	ldr	r1, [pc, #432]	; (80026cc <HAL_GPIO_EXTI_Callback+0x270>)
 800251a:	4618      	mov	r0, r3
 800251c:	f009 f8d2 	bl	800b6c4 <siprintf>
 8002520:	6738      	str	r0, [r7, #112]	; 0x70
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002524:	b29a      	uxth	r2, r3
 8002526:	f107 010c 	add.w	r1, r7, #12
 800252a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252e:	4865      	ldr	r0, [pc, #404]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002530:	f006 fd64 	bl	8008ffc <HAL_UART_Transmit>
 8002534:	e05c      	b.n	80025f0 <HAL_GPIO_EXTI_Callback+0x194>
				}else if (state == 1){
 8002536:	4b61      	ldr	r3, [pc, #388]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d12a      	bne.n	8002594 <HAL_GPIO_EXTI_Callback+0x138>
					numbers[state]=(numbers[state] - 1);
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a61      	ldr	r2, [pc, #388]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002548:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3a01      	subs	r2, #1
 800254e:	495e      	ldr	r1, [pc, #376]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a5b      	ldr	r2, [pc, #364]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_GPIO_EXTI_Callback+0x112>
							numbers[state]=4;
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002568:	2104      	movs	r1, #4
 800256a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						int n = sprintf(data, "[INFO] %s Lights changed to %d\n", timeStr,numbers[1]);
 800256e:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f107 000c 	add.w	r0, r7, #12
 8002576:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002578:	4955      	ldr	r1, [pc, #340]	; (80026d0 <HAL_GPIO_EXTI_Callback+0x274>)
 800257a:	f009 f8a3 	bl	800b6c4 <siprintf>
 800257e:	6778      	str	r0, [r7, #116]	; 0x74
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002582:	b29a      	uxth	r2, r3
 8002584:	f107 010c 	add.w	r1, r7, #12
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	484d      	ldr	r0, [pc, #308]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 800258e:	f006 fd35 	bl	8008ffc <HAL_UART_Transmit>
 8002592:	e02d      	b.n	80025f0 <HAL_GPIO_EXTI_Callback+0x194>
				}else if (state == 2){
 8002594:	4b49      	ldr	r3, [pc, #292]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d129      	bne.n	80025f0 <HAL_GPIO_EXTI_Callback+0x194>
					numbers[state]=(numbers[state] - 1);
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3a01      	subs	r2, #1
 80025ac:	4946      	ldr	r1, [pc, #280]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (numbers[state] == 0)
 80025b2:	4b42      	ldr	r3, [pc, #264]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_GPIO_EXTI_Callback+0x170>
							numbers[state]=3;
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025c6:	2103      	movs	r1, #3
 80025c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						int n = sprintf(data, "[INFO] %s Wave changed to %d\n", timeStr,numbers[2]);
 80025cc:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f107 000c 	add.w	r0, r7, #12
 80025d4:	4a36      	ldr	r2, [pc, #216]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 80025d6:	493f      	ldr	r1, [pc, #252]	; (80026d4 <HAL_GPIO_EXTI_Callback+0x278>)
 80025d8:	f009 f874 	bl	800b6c4 <siprintf>
 80025dc:	67b8      	str	r0, [r7, #120]	; 0x78
						HAL_UART_Transmit(&huart3, data, n, 1000);
 80025de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f107 010c 	add.w	r1, r7, #12
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	4836      	ldr	r0, [pc, #216]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 80025ec:	f006 fd06 	bl	8008ffc <HAL_UART_Transmit>
				}
				last_time2=HAL_GetTick();
 80025f0:	f001 fae4 	bl	8003bbc <HAL_GetTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e139      	b.n	8002872 <HAL_GPIO_EXTI_Callback+0x416>
			}
		}
		else if (GPIO_Pin == GPIO_PIN_1){	 //middle button (Increase Number) ==> PA1
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b02      	cmp	r3, #2
 8002602:	f040 80ee 	bne.w	80027e2 <HAL_GPIO_EXTI_Callback+0x386>
			if (HAL_GetTick() - last_time2 > 400){
 8002606:	f001 fad9 	bl	8003bbc <HAL_GetTick>
 800260a:	4603      	mov	r3, r0
 800260c:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002616:	f240 812c 	bls.w	8002872 <HAL_GPIO_EXTI_Callback+0x416>

				int n = sprintf(data, "[INFO] %s Digit %d Increased\n", timeStr,state+1);
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	f107 000c 	add.w	r0, r7, #12
 8002624:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002626:	492c      	ldr	r1, [pc, #176]	; (80026d8 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002628:	f009 f84c 	bl	800b6c4 <siprintf>
 800262c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				HAL_UART_Transmit(&huart3, data, n, 1000);
 8002630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002634:	b29a      	uxth	r2, r3
 8002636:	f107 010c 	add.w	r1, r7, #12
 800263a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263e:	4821      	ldr	r0, [pc, #132]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 8002640:	f006 fcdc 	bl	8008ffc <HAL_UART_Transmit>
				if (state == 0){
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d14b      	bne.n	80026e4 <HAL_GPIO_EXTI_Callback+0x288>
					numbers[state]=(numbers[state] + 1) % 10;
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <HAL_GPIO_EXTI_Callback+0x280>)
 800265e:	fb83 2301 	smull	r2, r3, r3, r1
 8002662:	109a      	asrs	r2, r3, #2
 8002664:	17cb      	asrs	r3, r1, #31
 8002666:	1ad2      	subs	r2, r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	1aca      	subs	r2, r1, r3
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_GPIO_EXTI_Callback+0x26c>)
 8002674:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					int n = sprintf(data, "[INFO] %s DimStep Increased\n", timeStr,state+1);
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_GPIO_EXTI_Callback+0x260>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	f107 000c 	add.w	r0, r7, #12
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_GPIO_EXTI_Callback+0x254>)
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_GPIO_EXTI_Callback+0x284>)
 8002686:	f009 f81d 	bl	800b6c4 <siprintf>
 800268a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800268e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002692:	b29a      	uxth	r2, r3
 8002694:	f107 010c 	add.w	r1, r7, #12
 8002698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269c:	4809      	ldr	r0, [pc, #36]	; (80026c4 <HAL_GPIO_EXTI_Callback+0x268>)
 800269e:	f006 fcad 	bl	8008ffc <HAL_UART_Transmit>
 80026a2:	e097      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x378>
 80026a4:	200009cc 	.word	0x200009cc
 80026a8:	20000458 	.word	0x20000458
 80026ac:	080110e0 	.word	0x080110e0
 80026b0:	200009e0 	.word	0x200009e0
 80026b4:	20000a60 	.word	0x20000a60
 80026b8:	20000a58 	.word	0x20000a58
 80026bc:	20000a44 	.word	0x20000a44
 80026c0:	080110f0 	.word	0x080110f0
 80026c4:	20000658 	.word	0x20000658
 80026c8:	20000000 	.word	0x20000000
 80026cc:	08011110 	.word	0x08011110
 80026d0:	08011130 	.word	0x08011130
 80026d4:	08011150 	.word	0x08011150
 80026d8:	08011170 	.word	0x08011170
 80026dc:	66666667 	.word	0x66666667
 80026e0:	08011190 	.word	0x08011190

				}else if (state == 1){
 80026e4:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d139      	bne.n	8002760 <HAL_GPIO_EXTI_Callback+0x304>
					numbers[state]=(numbers[state] + 1) % 5;
 80026ec:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a89      	ldr	r2, [pc, #548]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80026f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	4b86      	ldr	r3, [pc, #536]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4b87      	ldr	r3, [pc, #540]	; (800291c <HAL_GPIO_EXTI_Callback+0x4c0>)
 80026fe:	fb83 2301 	smull	r2, r3, r3, r1
 8002702:	105a      	asrs	r2, r3, #1
 8002704:	17cb      	asrs	r3, r1, #31
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	1aca      	subs	r2, r1, r3
 8002710:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002712:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
					if (numbers[state] == 0)
 8002716:	4b7f      	ldr	r3, [pc, #508]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a7f      	ldr	r2, [pc, #508]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d108      	bne.n	8002736 <HAL_GPIO_EXTI_Callback+0x2da>
						numbers[state]++;
 8002724:	4b7b      	ldr	r3, [pc, #492]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a7b      	ldr	r2, [pc, #492]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800272a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800272e:	3201      	adds	r2, #1
 8002730:	4979      	ldr	r1, [pc, #484]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s Lights changed to %d\n", timeStr,numbers[1]);
 8002736:	4b78      	ldr	r3, [pc, #480]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f107 000c 	add.w	r0, r7, #12
 800273e:	4a78      	ldr	r2, [pc, #480]	; (8002920 <HAL_GPIO_EXTI_Callback+0x4c4>)
 8002740:	4978      	ldr	r1, [pc, #480]	; (8002924 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8002742:	f008 ffbf 	bl	800b6c4 <siprintf>
 8002746:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800274a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800274e:	b29a      	uxth	r2, r3
 8002750:	f107 010c 	add.w	r1, r7, #12
 8002754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002758:	4873      	ldr	r0, [pc, #460]	; (8002928 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800275a:	f006 fc4f 	bl	8008ffc <HAL_UART_Transmit>
 800275e:	e039      	b.n	80027d4 <HAL_GPIO_EXTI_Callback+0x378>
				}else if (state == 2){
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d135      	bne.n	80027d4 <HAL_GPIO_EXTI_Callback+0x378>
					numbers[state]=(numbers[state] + 1) % 4;
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	3301      	adds	r3, #1
 8002774:	4a67      	ldr	r2, [pc, #412]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	4259      	negs	r1, r3
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	f001 0103 	and.w	r1, r1, #3
 8002782:	bf58      	it	pl
 8002784:	424b      	negpl	r3, r1
 8002786:	4964      	ldr	r1, [pc, #400]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002788:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					if (numbers[state] == 0)
 800278c:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a61      	ldr	r2, [pc, #388]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d108      	bne.n	80027ac <HAL_GPIO_EXTI_Callback+0x350>
						numbers[state]++;
 800279a:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80027a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027a4:	3201      	adds	r2, #1
 80027a6:	495c      	ldr	r1, [pc, #368]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					int n = sprintf(data, "[INFO] %s Wave changed to %d\n", timeStr,numbers[2]);
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f107 000c 	add.w	r0, r7, #12
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_GPIO_EXTI_Callback+0x4c4>)
 80027b6:	495d      	ldr	r1, [pc, #372]	; (800292c <HAL_GPIO_EXTI_Callback+0x4d0>)
 80027b8:	f008 ff84 	bl	800b6c4 <siprintf>
 80027bc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					HAL_UART_Transmit(&huart3, data, n, 1000);
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f107 010c 	add.w	r1, r7, #12
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	4856      	ldr	r0, [pc, #344]	; (8002928 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80027d0:	f006 fc14 	bl	8008ffc <HAL_UART_Transmit>
				}
				last_time2=HAL_GetTick();
 80027d4:	f001 f9f2 	bl	8003bbc <HAL_GetTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b54      	ldr	r3, [pc, #336]	; (8002930 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e047      	b.n	8002872 <HAL_GPIO_EXTI_Callback+0x416>
			}

		}
		else if (GPIO_Pin == GPIO_PIN_0) { //Right button (Next Number)==> PC0
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d144      	bne.n	8002872 <HAL_GPIO_EXTI_Callback+0x416>
			if (HAL_GetTick() - last_time2 > 400){
 80027e8:	f001 f9e8 	bl	8003bbc <HAL_GetTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_GPIO_EXTI_Callback+0x4d4>)
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80027f8:	d93b      	bls.n	8002872 <HAL_GPIO_EXTI_Callback+0x416>
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80027fa:	2200      	movs	r2, #0
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80027fe:	484e      	ldr	r0, [pc, #312]	; (8002938 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8002800:	f004 ff65 	bl	80076ce <HAL_RTC_GetTime>
				sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_GPIO_EXTI_Callback+0x4d8>)
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	4619      	mov	r1, r3
 8002810:	4b48      	ldr	r3, [pc, #288]	; (8002934 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8002812:	789b      	ldrb	r3, [r3, #2]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	460b      	mov	r3, r1
 8002818:	4948      	ldr	r1, [pc, #288]	; (800293c <HAL_GPIO_EXTI_Callback+0x4e0>)
 800281a:	4841      	ldr	r0, [pc, #260]	; (8002920 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800281c:	f008 ff52 	bl	800b6c4 <siprintf>
				int n = sprintf(data, "[INFO] %s Digit changed\n", timeStr,state+1);
 8002820:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	f107 000c 	add.w	r0, r7, #12
 800282a:	4a3d      	ldr	r2, [pc, #244]	; (8002920 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800282c:	4944      	ldr	r1, [pc, #272]	; (8002940 <HAL_GPIO_EXTI_Callback+0x4e4>)
 800282e:	f008 ff49 	bl	800b6c4 <siprintf>
 8002832:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
				HAL_UART_Transmit(&huart3, data, n, 1000);
 8002836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800283a:	b29a      	uxth	r2, r3
 800283c:	f107 010c 	add.w	r1, r7, #12
 8002840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002844:	4838      	ldr	r0, [pc, #224]	; (8002928 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8002846:	f006 fbd9 	bl	8008ffc <HAL_UART_Transmit>
				state = (state + 1) % 3;
 800284a:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	4b3c      	ldr	r3, [pc, #240]	; (8002944 <HAL_GPIO_EXTI_Callback+0x4e8>)
 8002852:	fb83 3201 	smull	r3, r2, r3, r1
 8002856:	17cb      	asrs	r3, r1, #31
 8002858:	1ad2      	subs	r2, r2, r3
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	1aca      	subs	r2, r1, r3
 8002862:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002864:	601a      	str	r2, [r3, #0]
				last_time2=HAL_GetTick();
 8002866:	f001 f9a9 	bl	8003bbc <HAL_GetTick>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8002870:	601a      	str	r2, [r3, #0]
				}
			}
		seven_segment_set_num(numbers);
 8002872:	4829      	ldr	r0, [pc, #164]	; (8002918 <HAL_GPIO_EXTI_Callback+0x4bc>)
 8002874:	f7ff fd00 	bl	8002278 <seven_segment_set_num>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
				last_time2=HAL_GetTick();
			}
		}
	}
}
 8002878:	e048      	b.n	800290c <HAL_GPIO_EXTI_Callback+0x4b0>
		if (GPIO_Pin == GPIO_PIN_4) { //Left button: set threshold
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b10      	cmp	r3, #16
 800287e:	d145      	bne.n	800290c <HAL_GPIO_EXTI_Callback+0x4b0>
			if (HAL_GetTick() - last_time2 > 400){
 8002880:	f001 f99c 	bl	8003bbc <HAL_GetTick>
 8002884:	4603      	mov	r3, r0
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	1a9b      	subs	r3, r3, r2
 800288c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002890:	d93c      	bls.n	800290c <HAL_GPIO_EXTI_Callback+0x4b0>
				int n = sprintf(data, "[INFO] %s Threshold setted\n", timeStr,state+1);
 8002892:	4b20      	ldr	r3, [pc, #128]	; (8002914 <HAL_GPIO_EXTI_Callback+0x4b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	f107 000c 	add.w	r0, r7, #12
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_GPIO_EXTI_Callback+0x4c4>)
 800289e:	492a      	ldr	r1, [pc, #168]	; (8002948 <HAL_GPIO_EXTI_Callback+0x4ec>)
 80028a0:	f008 ff10 	bl	800b6c4 <siprintf>
 80028a4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
				HAL_UART_Transmit(&huart3, data, n, 1000);
 80028a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	f107 010c 	add.w	r1, r7, #12
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	481c      	ldr	r0, [pc, #112]	; (8002928 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80028b8:	f006 fba0 	bl	8008ffc <HAL_UART_Transmit>
				threshold=threshhold_plus+initBR;
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_GPIO_EXTI_Callback+0x4f0>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	4a23      	ldr	r2, [pc, #140]	; (8002954 <HAL_GPIO_EXTI_Callback+0x4f8>)
 80028c8:	6013      	str	r3, [r2, #0]
				initFlag=0;
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d6:	4821      	ldr	r0, [pc, #132]	; (800295c <HAL_GPIO_EXTI_Callback+0x500>)
 80028d8:	f002 ff76 	bl	80057c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e2:	481e      	ldr	r0, [pc, #120]	; (800295c <HAL_GPIO_EXTI_Callback+0x500>)
 80028e4:	f002 ff70 	bl	80057c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ee:	481b      	ldr	r0, [pc, #108]	; (800295c <HAL_GPIO_EXTI_Callback+0x500>)
 80028f0:	f002 ff6a 	bl	80057c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028fa:	4818      	ldr	r0, [pc, #96]	; (800295c <HAL_GPIO_EXTI_Callback+0x500>)
 80028fc:	f002 ff64 	bl	80057c8 <HAL_GPIO_WritePin>
				last_time2=HAL_GetTick();
 8002900:	f001 f95c 	bl	8003bbc <HAL_GetTick>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_GPIO_EXTI_Callback+0x4d4>)
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3798      	adds	r7, #152	; 0x98
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000a44 	.word	0x20000a44
 8002918:	20000000 	.word	0x20000000
 800291c:	66666667 	.word	0x66666667
 8002920:	200009e0 	.word	0x200009e0
 8002924:	08011130 	.word	0x08011130
 8002928:	20000658 	.word	0x20000658
 800292c:	08011150 	.word	0x08011150
 8002930:	20000a58 	.word	0x20000a58
 8002934:	200009cc 	.word	0x200009cc
 8002938:	20000458 	.word	0x20000458
 800293c:	080110e0 	.word	0x080110e0
 8002940:	080111b0 	.word	0x080111b0
 8002944:	55555556 	.word	0x55555556
 8002948:	080111cc 	.word	0x080111cc
 800294c:	20000a5c 	.word	0x20000a5c
 8002950:	200000f4 	.word	0x200000f4
 8002954:	200000f8 	.word	0x200000f8
 8002958:	20000a60 	.word	0x20000a60
 800295c:	48001000 	.word	0x48001000

08002960 <HAL_ADC_ConvCpltCallback>:


int currentBR;
int currentVolume;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b0a4      	sub	sp, #144	; 0x90
 8002964:	af02      	add	r7, sp, #8
 8002966:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC3) {
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_ADC_ConvCpltCallback+0xd4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12a      	bne.n	80029c8 <HAL_ADC_ConvCpltCallback+0x68>

		int x = HAL_ADC_GetValue(&hadc3);
 8002972:	4831      	ldr	r0, [pc, #196]	; (8002a38 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002974:	f001 fc62 	bl	800423c <HAL_ADC_GetValue>
 8002978:	4603      	mov	r3, r0
 800297a:	67bb      	str	r3, [r7, #120]	; 0x78
		float fx = ((float) x * 100 / 4095);
 800297c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002986:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002a3c <HAL_ADC_ConvCpltCallback+0xdc>
 800298a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800298e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8002a40 <HAL_ADC_ConvCpltCallback+0xe0>
 8002992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002996:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		currentVolume = (int) fx;
 800299a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800299e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a2:	ee17 2a90 	vmov	r2, s15
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_ADC_ConvCpltCallback+0xe4>)
 80029a8:	601a      	str	r2, [r3, #0]
		unsigned char data[100];
		int n = sprintf(data, "volume: %d  %.4f\n", x, fx);
 80029aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80029ac:	f7fd fdd6 	bl	800055c <__aeabi_f2d>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	f107 000c 	add.w	r0, r7, #12
 80029b8:	e9cd 2300 	strd	r2, r3, [sp]
 80029bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029be:	4922      	ldr	r1, [pc, #136]	; (8002a48 <HAL_ADC_ConvCpltCallback+0xe8>)
 80029c0:	f008 fe80 	bl	800b6c4 <siprintf>
 80029c4:	6738      	str	r0, [r7, #112]	; 0x70
		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
//		HAL_UART_Transmit(&huart3, data, n, 1000);
		checkBrightness();
	}

}
 80029c6:	e030      	b.n	8002a2a <HAL_ADC_ConvCpltCallback+0xca>
	else if(hadc->Instance == ADC1){
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d0:	d12b      	bne.n	8002a2a <HAL_ADC_ConvCpltCallback+0xca>
		int x = HAL_ADC_GetValue(&hadc1);
 80029d2:	481e      	ldr	r0, [pc, #120]	; (8002a4c <HAL_ADC_ConvCpltCallback+0xec>)
 80029d4:	f001 fc32 	bl	800423c <HAL_ADC_GetValue>
 80029d8:	4603      	mov	r3, r0
 80029da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		currentBR=x;
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <HAL_ADC_ConvCpltCallback+0xf0>)
 80029e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029e4:	6013      	str	r3, [r2, #0]
		float fx = ((float) x * 100 / 3800);
 80029e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002a3c <HAL_ADC_ConvCpltCallback+0xdc>
 80029f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029fa:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002a54 <HAL_ADC_ConvCpltCallback+0xf4>
 80029fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a02:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		int n = sprintf(data, "LDR: %d  %.2f \n", x, fx);
 8002a06:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002a0a:	f7fd fda7 	bl	800055c <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	f107 000c 	add.w	r0, r7, #12
 8002a16:	e9cd 2300 	strd	r2, r3, [sp]
 8002a1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002a1e:	490e      	ldr	r1, [pc, #56]	; (8002a58 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a20:	f008 fe50 	bl	800b6c4 <siprintf>
 8002a24:	67f8      	str	r0, [r7, #124]	; 0x7c
		checkBrightness();
 8002a26:	f000 f8f9 	bl	8002c1c <checkBrightness>
}
 8002a2a:	bf00      	nop
 8002a2c:	3788      	adds	r7, #136	; 0x88
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	50000400 	.word	0x50000400
 8002a38:	200003b4 	.word	0x200003b4
 8002a3c:	42c80000 	.word	0x42c80000
 8002a40:	457ff000 	.word	0x457ff000
 8002a44:	20000a68 	.word	0x20000a68
 8002a48:	080111e8 	.word	0x080111e8
 8002a4c:	20000364 	.word	0x20000364
 8002a50:	20000a64 	.word	0x20000a64
 8002a54:	456d8000 	.word	0x456d8000
 8002a58:	080111fc 	.word	0x080111fc

08002a5c <HAL_TIM_PeriodElapsedCallback>:
//Play Warn
uint64_t counter = 0;
int buzz_type = 2;
int warnCount=0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	b09e      	sub	sp, #120	; 0x78
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	programLoop();
 8002a64:	f7ff fc80 	bl	8002368 <programLoop>

	if (htim->Instance == TIM2) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d17a      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x10c>
		counter = counter + 1;
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	1c54      	adds	r4, r2, #1
 8002a7a:	f143 0500 	adc.w	r5, r3, #0
 8002a7e:	4b3c      	ldr	r3, [pc, #240]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a80:	e9c3 4500 	strd	r4, r5, [r3]
		buzz_type = numbers[2];
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a3b      	ldr	r2, [pc, #236]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002a8a:	6013      	str	r3, [r2, #0]
		if(counter > 5000){
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f241 3189 	movw	r1, #5001	; 0x1389
 8002a96:	428a      	cmp	r2, r1
 8002a98:	f173 0300 	sbcs.w	r3, r3, #0
 8002a9c:	d306      	bcc.n	8002aac <HAL_TIM_PeriodElapsedCallback+0x50>
			counter = 0;
 8002a9e:	4934      	ldr	r1, [pc, #208]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		HAL_ADC_Start_IT(&hadc1);
 8002aac:	4833      	ldr	r0, [pc, #204]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002aae:	f001 fa85 	bl	8003fbc <HAL_ADC_Start_IT>
		HAL_ADC_Start_IT(&hadc3);
 8002ab2:	4833      	ldr	r0, [pc, #204]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002ab4:	f001 fa82 	bl	8003fbc <HAL_ADC_Start_IT>
		checkBrightness();
 8002ab8:	f000 f8b0 	bl	8002c1c <checkBrightness>
		int LEDLight = (int) numbers[0]*100 + mledlight[(currentVolume/5)-1]; //0.1ta 0.1ta
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	492f      	ldr	r1, [pc, #188]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002acc:	fb81 0103 	smull	r0, r1, r1, r3
 8002ad0:	1049      	asrs	r1, r1, #1
 8002ad2:	17db      	asrs	r3, r3, #31
 8002ad4:	1acb      	subs	r3, r1, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	492c      	ldr	r1, [pc, #176]	; (8002b8c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002ada:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ade:	4413      	add	r3, r2
 8002ae0:	677b      	str	r3, [r7, #116]	; 0x74
	    threshhold_plus = (int) mthreshold[(currentVolume/7)-1]; //20ta 20ta
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aec:	441a      	add	r2, r3
 8002aee:	1092      	asrs	r2, r2, #2
 8002af0:	17db      	asrs	r3, r3, #31
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002afe:	6013      	str	r3, [r2, #0]

		unsigned char data[100];
		int n = sprintf(data, "Treshhold plus: %d taghsim 5 %d \n", threshhold_plus, (currentVolume/7));
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002b0a:	fb82 0203 	smull	r0, r2, r2, r3
 8002b0e:	441a      	add	r2, r3
 8002b10:	1092      	asrs	r2, r2, #2
 8002b12:	17db      	asrs	r3, r3, #31
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f107 000c 	add.w	r0, r7, #12
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	491f      	ldr	r1, [pc, #124]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002b1e:	f008 fdd1 	bl	800b6c4 <siprintf>
 8002b22:	6738      	str	r0, [r7, #112]	; 0x70


		if (initFlag==1){
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d113      	bne.n	8002b54 <HAL_TIM_PeriodElapsedCallback+0xf8>
			if (initBR == -1)
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0xe8>
				initBR = HAL_ADC_GetValue(&hadc1);
 8002b36:	4811      	ldr	r0, [pc, #68]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002b38:	f001 fb80 	bl	800423c <HAL_ADC_GetValue>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002b42:	601a      	str	r2, [r3, #0]
			setNumber(threshhold_plus+initBR);
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fc10 	bl	8002374 <setNumber>
		}

//		HAL_UART_Transmit(&huart3, data, n, 1000);
		if(LEDLight < 0){
 8002b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da03      	bge.n	8002b62 <HAL_TIM_PeriodElapsedCallback+0x106>
			LEDs_power = 0;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
		}
		else{
			LEDs_power = LEDLight;
		}
	}
}
 8002b60:	e002      	b.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x10c>
			LEDs_power = LEDLight;
 8002b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b64:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	3778      	adds	r7, #120	; 0x78
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b70:	20000a70 	.word	0x20000a70
 8002b74:	20000000 	.word	0x20000000
 8002b78:	200000fc 	.word	0x200000fc
 8002b7c:	20000364 	.word	0x20000364
 8002b80:	200003b4 	.word	0x200003b4
 8002b84:	20000a68 	.word	0x20000a68
 8002b88:	66666667 	.word	0x66666667
 8002b8c:	20000010 	.word	0x20000010
 8002b90:	92492493 	.word	0x92492493
 8002b94:	20000060 	.word	0x20000060
 8002b98:	20000a5c 	.word	0x20000a5c
 8002b9c:	0801120c 	.word	0x0801120c
 8002ba0:	20000a60 	.word	0x20000a60
 8002ba4:	200000f4 	.word	0x200000f4
 8002ba8:	20000a50 	.word	0x20000a50

08002bac <playAlarm>:

void playAlarm(){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	if (initFlag == 0 && alert == 1){
 8002bb0:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <playAlarm+0x60>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d126      	bne.n	8002c06 <playAlarm+0x5a>
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <playAlarm+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d122      	bne.n	8002c06 <playAlarm+0x5a>
		if(buzz_type == 3)
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <playAlarm+0x68>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d107      	bne.n	8002bd8 <playAlarm+0x2c>
			triangle_signal(counter);
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <playAlarm+0x6c>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fa75 	bl	80020c0 <triangle_signal>
		else if(buzz_type == 2)
			square_signal(counter);
		else if(buzz_type == 1)
			sin_signal(counter);
	}
}
 8002bd6:	e016      	b.n	8002c06 <playAlarm+0x5a>
		else if(buzz_type == 2)
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <playAlarm+0x68>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d107      	bne.n	8002bf0 <playAlarm+0x44>
			square_signal(counter);
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <playAlarm+0x6c>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	4613      	mov	r3, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa35 	bl	8002058 <square_signal>
}
 8002bee:	e00a      	b.n	8002c06 <playAlarm+0x5a>
		else if(buzz_type == 1)
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <playAlarm+0x68>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d106      	bne.n	8002c06 <playAlarm+0x5a>
			sin_signal(counter);
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <playAlarm+0x6c>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff f9e1 	bl	8001fc8 <sin_signal>
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000a60 	.word	0x20000a60
 8002c10:	20000a4c 	.word	0x20000a4c
 8002c14:	200000fc 	.word	0x200000fc
 8002c18:	20000a70 	.word	0x20000a70

08002c1c <checkBrightness>:

void checkBrightness(){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b09c      	sub	sp, #112	; 0x70
 8002c20:	af02      	add	r7, sp, #8
	if (initFlag == 0){
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <checkBrightness+0xc8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d158      	bne.n	8002cdc <checkBrightness+0xc0>
		if (currentBR >= threshold){
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <checkBrightness+0xcc>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <checkBrightness+0xd0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	db46      	blt.n	8002cc4 <checkBrightness+0xa8>
			setNumber(currentBR);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <checkBrightness+0xcc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fb9a 	bl	8002374 <setNumber>

			if(alert == 0){
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <checkBrightness+0xd4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d134      	bne.n	8002cb2 <checkBrightness+0x96>
				warnCount=(warnCount+1)%10;
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <checkBrightness+0xd8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1c59      	adds	r1, r3, #1
 8002c4e:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <checkBrightness+0xdc>)
 8002c50:	fb83 2301 	smull	r2, r3, r3, r1
 8002c54:	109a      	asrs	r2, r3, #2
 8002c56:	17cb      	asrs	r3, r1, #31
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	1aca      	subs	r2, r1, r3
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <checkBrightness+0xd8>)
 8002c66:	601a      	str	r2, [r3, #0]
				alert = 1;
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <checkBrightness+0xd4>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	4922      	ldr	r1, [pc, #136]	; (8002cfc <checkBrightness+0xe0>)
 8002c72:	4823      	ldr	r0, [pc, #140]	; (8002d00 <checkBrightness+0xe4>)
 8002c74:	f004 fd2b 	bl	80076ce <HAL_RTC_GetTime>
				sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002c78:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <checkBrightness+0xe0>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <checkBrightness+0xe0>)
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	4619      	mov	r1, r3
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <checkBrightness+0xe0>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	491d      	ldr	r1, [pc, #116]	; (8002d04 <checkBrightness+0xe8>)
 8002c8e:	481e      	ldr	r0, [pc, #120]	; (8002d08 <checkBrightness+0xec>)
 8002c90:	f008 fd18 	bl	800b6c4 <siprintf>
				char data[100];
				int n = sprintf(data, "[WARN] %s Critical Situation\n", timeStr);
 8002c94:	463b      	mov	r3, r7
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <checkBrightness+0xec>)
 8002c98:	491c      	ldr	r1, [pc, #112]	; (8002d0c <checkBrightness+0xf0>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f008 fd12 	bl	800b6c4 <siprintf>
 8002ca0:	6678      	str	r0, [r7, #100]	; 0x64
				HAL_UART_Transmit(&huart3, data, n, 1000);
 8002ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	4639      	mov	r1, r7
 8002ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cac:	4818      	ldr	r0, [pc, #96]	; (8002d10 <checkBrightness+0xf4>)
 8002cae:	f006 f9a5 	bl	8008ffc <HAL_UART_Transmit>
			}
			turn_off_leds();
 8002cb2:	f7ff f957 	bl	8001f64 <turn_off_leds>
			playAlarm();
 8002cb6:	f7ff ff79 	bl	8002bac <playAlarm>
			numbers[3]=warnCount;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <checkBrightness+0xd8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <checkBrightness+0xf8>)
 8002cc0:	60d3      	str	r3, [r2, #12]
			seven_segment_set_num(numbers);
			PWM_Change_Tone(0, 0);
			turn_on_leds();
		}
	}
}
 8002cc2:	e00b      	b.n	8002cdc <checkBrightness+0xc0>
			alert=0;
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <checkBrightness+0xd4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
			seven_segment_set_num(numbers);
 8002cca:	4812      	ldr	r0, [pc, #72]	; (8002d14 <checkBrightness+0xf8>)
 8002ccc:	f7ff fad4 	bl	8002278 <seven_segment_set_num>
			PWM_Change_Tone(0, 0);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7ff f818 	bl	8001d08 <PWM_Change_Tone>
			turn_on_leds();
 8002cd8:	f7ff f8d2 	bl	8001e80 <turn_on_leds>
}
 8002cdc:	bf00      	nop
 8002cde:	3768      	adds	r7, #104	; 0x68
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000a60 	.word	0x20000a60
 8002ce8:	20000a64 	.word	0x20000a64
 8002cec:	200000f8 	.word	0x200000f8
 8002cf0:	20000a4c 	.word	0x20000a4c
 8002cf4:	20000a78 	.word	0x20000a78
 8002cf8:	66666667 	.word	0x66666667
 8002cfc:	200009cc 	.word	0x200009cc
 8002d00:	20000458 	.word	0x20000458
 8002d04:	080110e0 	.word	0x080110e0
 8002d08:	200009e0 	.word	0x200009e0
 8002d0c:	08011230 	.word	0x08011230
 8002d10:	20000658 	.word	0x20000658
 8002d14:	20000000 	.word	0x20000000

08002d18 <programInit>:


void programInit() {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	; 0x70
 8002d1c:	af02      	add	r7, sp, #8
    //give environment brightenss and set treshhold by volume ==> show volume (20-20 on 7-segment)
	initFlag = 1; //time to set threshold and dont warn
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <programInit+0x90>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 8002d24:	2201      	movs	r2, #1
 8002d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d2a:	4820      	ldr	r0, [pc, #128]	; (8002dac <programInit+0x94>)
 8002d2c:	f002 fd4c 	bl	80057c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8002d30:	2201      	movs	r2, #1
 8002d32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d36:	481d      	ldr	r0, [pc, #116]	; (8002dac <programInit+0x94>)
 8002d38:	f002 fd46 	bl	80057c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d42:	481a      	ldr	r0, [pc, #104]	; (8002dac <programInit+0x94>)
 8002d44:	f002 fd40 	bl	80057c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d4e:	4817      	ldr	r0, [pc, #92]	; (8002dac <programInit+0x94>)
 8002d50:	f002 fd3a 	bl	80057c8 <HAL_GPIO_WritePin>
	setNumber(0);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff fb0d 	bl	8002374 <setNumber>

	char data[100];

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4914      	ldr	r1, [pc, #80]	; (8002db0 <programInit+0x98>)
 8002d5e:	4815      	ldr	r0, [pc, #84]	; (8002db4 <programInit+0x9c>)
 8002d60:	f004 fcb5 	bl	80076ce <HAL_RTC_GetTime>
	sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <programInit+0x98>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <programInit+0x98>)
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <programInit+0x98>)
 8002d72:	789b      	ldrb	r3, [r3, #2]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	460b      	mov	r3, r1
 8002d78:	490f      	ldr	r1, [pc, #60]	; (8002db8 <programInit+0xa0>)
 8002d7a:	4810      	ldr	r0, [pc, #64]	; (8002dbc <programInit+0xa4>)
 8002d7c:	f008 fca2 	bl	800b6c4 <siprintf>
	int n = sprintf(data, "[INFO] %s Program Started\n", timeStr);
 8002d80:	463b      	mov	r3, r7
 8002d82:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <programInit+0xa4>)
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <programInit+0xa8>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f008 fc9c 	bl	800b6c4 <siprintf>
 8002d8c:	6678      	str	r0, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart3, data, n, 1000);
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	4639      	mov	r1, r7
 8002d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d98:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <programInit+0xac>)
 8002d9a:	f006 f92f 	bl	8008ffc <HAL_UART_Transmit>


}
 8002d9e:	bf00      	nop
 8002da0:	3768      	adds	r7, #104	; 0x68
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000a60 	.word	0x20000a60
 8002dac:	48001000 	.word	0x48001000
 8002db0:	200009cc 	.word	0x200009cc
 8002db4:	20000458 	.word	0x20000458
 8002db8:	080110e0 	.word	0x080110e0
 8002dbc:	200009e0 	.word	0x200009e0
 8002dc0:	08011250 	.word	0x08011250
 8002dc4:	20000658 	.word	0x20000658

08002dc8 <uart_rx_enable_it>:

char character;
char input[50];
int index_arr = 0;

void uart_rx_enable_it(void) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &character, 1);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4903      	ldr	r1, [pc, #12]	; (8002ddc <uart_rx_enable_it+0x14>)
 8002dd0:	4803      	ldr	r0, [pc, #12]	; (8002de0 <uart_rx_enable_it+0x18>)
 8002dd2:	f006 f99d 	bl	8009110 <HAL_UART_Receive_IT>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000a7c 	.word	0x20000a7c
 8002de0:	20000658 	.word	0x20000658

08002de4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b0b2      	sub	sp, #200	; 0xc8
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
	char data[100];
    char prefix1[] = "[DIMSTEP]:";
 8002dec:	4ab3      	ldr	r2, [pc, #716]	; (80030bc <HAL_UART_RxCpltCallback+0x2d8>)
 8002dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df4:	c303      	stmia	r3!, {r0, r1}
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	3302      	adds	r3, #2
 8002dfa:	0c12      	lsrs	r2, r2, #16
 8002dfc:	701a      	strb	r2, [r3, #0]
    char prefix2[] = "[LIGHTS]:";
 8002dfe:	4ab0      	ldr	r2, [pc, #704]	; (80030c0 <HAL_UART_RxCpltCallback+0x2dc>)
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e06:	c303      	stmia	r3!, {r0, r1}
 8002e08:	801a      	strh	r2, [r3, #0]
    char prefix3[] = "[WARNNUM]:";
 8002e0a:	4aae      	ldr	r2, [pc, #696]	; (80030c4 <HAL_UART_RxCpltCallback+0x2e0>)
 8002e0c:	f107 0310 	add.w	r3, r7, #16
 8002e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e12:	c303      	stmia	r3!, {r0, r1}
 8002e14:	801a      	strh	r2, [r3, #0]
 8002e16:	3302      	adds	r3, #2
 8002e18:	0c12      	lsrs	r2, r2, #16
 8002e1a:	701a      	strb	r2, [r3, #0]

    if (huart->Instance == USART3){
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4aa9      	ldr	r2, [pc, #676]	; (80030c8 <HAL_UART_RxCpltCallback+0x2e4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f040 81c8 	bne.w	80031b8 <HAL_UART_RxCpltCallback+0x3d4>
    	if(character != 10){
 8002e28:	4ba8      	ldr	r3, [pc, #672]	; (80030cc <HAL_UART_RxCpltCallback+0x2e8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b0a      	cmp	r3, #10
 8002e2e:	d009      	beq.n	8002e44 <HAL_UART_RxCpltCallback+0x60>
    		input[index_arr++] = character;
 8002e30:	4ba7      	ldr	r3, [pc, #668]	; (80030d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	49a6      	ldr	r1, [pc, #664]	; (80030d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002e38:	600a      	str	r2, [r1, #0]
 8002e3a:	4aa4      	ldr	r2, [pc, #656]	; (80030cc <HAL_UART_RxCpltCallback+0x2e8>)
 8002e3c:	7811      	ldrb	r1, [r2, #0]
 8002e3e:	4aa5      	ldr	r2, [pc, #660]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002e40:	54d1      	strb	r1, [r2, r3]
 8002e42:	e1b7      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
    	} else{
			input[index_arr++] = '\0';
 8002e44:	4ba2      	ldr	r3, [pc, #648]	; (80030d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	49a1      	ldr	r1, [pc, #644]	; (80030d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002e4c:	600a      	str	r2, [r1, #0]
 8002e4e:	4aa1      	ldr	r2, [pc, #644]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002e50:	2100      	movs	r1, #0
 8002e52:	54d1      	strb	r1, [r2, r3]
			index_arr = 0;
 8002e54:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
			int value;
			HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	499e      	ldr	r1, [pc, #632]	; (80030d8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e5e:	489f      	ldr	r0, [pc, #636]	; (80030dc <HAL_UART_RxCpltCallback+0x2f8>)
 8002e60:	f004 fc35 	bl	80076ce <HAL_RTC_GetTime>
			sprintf(timeStr, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 8002e64:	4b9c      	ldr	r3, [pc, #624]	; (80030d8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b9b      	ldr	r3, [pc, #620]	; (80030d8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e6c:	785b      	ldrb	r3, [r3, #1]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4b99      	ldr	r3, [pc, #612]	; (80030d8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e72:	789b      	ldrb	r3, [r3, #2]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	460b      	mov	r3, r1
 8002e78:	4999      	ldr	r1, [pc, #612]	; (80030e0 <HAL_UART_RxCpltCallback+0x2fc>)
 8002e7a:	489a      	ldr	r0, [pc, #616]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002e7c:	f008 fc22 	bl	800b6c4 <siprintf>
			if (strncmp(input, prefix1, strlen(prefix1)) == 0){ //DIMSTEP
 8002e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd f9a3 	bl	80001d0 <strlen>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e90:	4619      	mov	r1, r3
 8002e92:	4890      	ldr	r0, [pc, #576]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002e94:	f008 fca7 	bl	800b7e6 <strncmp>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d164      	bne.n	8002f68 <HAL_UART_RxCpltCallback+0x184>
				if (sscanf(input + strlen(prefix1), "%d", &value) == 1) {
 8002e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd f994 	bl	80001d0 <strlen>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4a8a      	ldr	r2, [pc, #552]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002eac:	4413      	add	r3, r2
 8002eae:	f107 020c 	add.w	r2, r7, #12
 8002eb2:	498d      	ldr	r1, [pc, #564]	; (80030e8 <HAL_UART_RxCpltCallback+0x304>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f008 fc25 	bl	800b704 <siscanf>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d13f      	bne.n	8002f40 <HAL_UART_RxCpltCallback+0x15c>
					if (value >= 0 && value <= 9){
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db28      	blt.n	8002f18 <HAL_UART_RxCpltCallback+0x134>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	dc25      	bgt.n	8002f18 <HAL_UART_RxCpltCallback+0x134>
						int n;
						if (numbers[0]>value)
 8002ecc:	4b87      	ldr	r3, [pc, #540]	; (80030ec <HAL_UART_RxCpltCallback+0x308>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dd09      	ble.n	8002eea <HAL_UART_RxCpltCallback+0x106>
							n = sprintf(data, "[INFO] %s DimStep decreased\n", timeStr);
 8002ed6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eda:	4a82      	ldr	r2, [pc, #520]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002edc:	4984      	ldr	r1, [pc, #528]	; (80030f0 <HAL_UART_RxCpltCallback+0x30c>)
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f008 fbf0 	bl	800b6c4 <siprintf>
 8002ee4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8002ee8:	e008      	b.n	8002efc <HAL_UART_RxCpltCallback+0x118>
						else
							n = sprintf(data, "[INFO] %s DimStep increased\n", timeStr);
 8002eea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eee:	4a7d      	ldr	r2, [pc, #500]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002ef0:	4980      	ldr	r1, [pc, #512]	; (80030f4 <HAL_UART_RxCpltCallback+0x310>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f008 fbe6 	bl	800b6c4 <siprintf>
 8002ef8:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
						numbers[0]=value;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a7b      	ldr	r2, [pc, #492]	; (80030ec <HAL_UART_RxCpltCallback+0x308>)
 8002f00:	6013      	str	r3, [r2, #0]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002f02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f10:	4879      	ldr	r0, [pc, #484]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 8002f12:	f006 f873 	bl	8008ffc <HAL_UART_Transmit>
					if (value >= 0 && value <= 9){
 8002f16:	e14d      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 8002f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f1c:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002f1e:	4977      	ldr	r1, [pc, #476]	; (80030fc <HAL_UART_RxCpltCallback+0x318>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f008 fbcf 	bl	800b6c4 <siprintf>
 8002f26:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f38:	486f      	ldr	r0, [pc, #444]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 8002f3a:	f006 f85f 	bl	8008ffc <HAL_UART_Transmit>
 8002f3e:	e139      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8002f40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f44:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002f46:	496e      	ldr	r1, [pc, #440]	; (8003100 <HAL_UART_RxCpltCallback+0x31c>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f008 fbbb 	bl	800b6c4 <siprintf>
 8002f4e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8002f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f60:	4865      	ldr	r0, [pc, #404]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 8002f62:	f006 f84b 	bl	8008ffc <HAL_UART_Transmit>
 8002f66:	e125      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
				}

			}else if (strncmp(input, prefix2, strlen(prefix2)) == 0){ //LIGHTS
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd f92f 	bl	80001d0 <strlen>
 8002f72:	4602      	mov	r2, r0
 8002f74:	f107 031c 	add.w	r3, r7, #28
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4856      	ldr	r0, [pc, #344]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002f7c:	f008 fc33 	bl	800b7e6 <strncmp>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d164      	bne.n	8003050 <HAL_UART_RxCpltCallback+0x26c>
				if (sscanf(input + strlen(prefix2), "%d", &value) == 1) {
 8002f86:	f107 031c 	add.w	r3, r7, #28
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd f920 	bl	80001d0 <strlen>
 8002f90:	4603      	mov	r3, r0
 8002f92:	4a50      	ldr	r2, [pc, #320]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002f94:	4413      	add	r3, r2
 8002f96:	f107 020c 	add.w	r2, r7, #12
 8002f9a:	4953      	ldr	r1, [pc, #332]	; (80030e8 <HAL_UART_RxCpltCallback+0x304>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f008 fbb1 	bl	800b704 <siscanf>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d13f      	bne.n	8003028 <HAL_UART_RxCpltCallback+0x244>
					if (value >= 1 && value <= 4){
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dd28      	ble.n	8003000 <HAL_UART_RxCpltCallback+0x21c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	dc25      	bgt.n	8003000 <HAL_UART_RxCpltCallback+0x21c>
						int n;
						if (numbers[1]>value)
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_UART_RxCpltCallback+0x308>)
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dd09      	ble.n	8002fd2 <HAL_UART_RxCpltCallback+0x1ee>
							n = sprintf(data, "[INFO] %s LIGHTS decreased\n", timeStr);
 8002fbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc2:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002fc4:	494f      	ldr	r1, [pc, #316]	; (8003104 <HAL_UART_RxCpltCallback+0x320>)
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f008 fb7c 	bl	800b6c4 <siprintf>
 8002fcc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8002fd0:	e008      	b.n	8002fe4 <HAL_UART_RxCpltCallback+0x200>
						else
							n = sprintf(data, "[INFO] %s LIGHTS increased\n", timeStr);
 8002fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd6:	4a43      	ldr	r2, [pc, #268]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8002fd8:	494b      	ldr	r1, [pc, #300]	; (8003108 <HAL_UART_RxCpltCallback+0x324>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f008 fb72 	bl	800b6c4 <siprintf>
 8002fe0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
						numbers[1]=value;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a41      	ldr	r2, [pc, #260]	; (80030ec <HAL_UART_RxCpltCallback+0x308>)
 8002fe8:	6053      	str	r3, [r2, #4]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8002fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff8:	483f      	ldr	r0, [pc, #252]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 8002ffa:	f005 ffff 	bl	8008ffc <HAL_UART_Transmit>
					if (value >= 1 && value <= 4){
 8002ffe:	e0d9      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 8003000:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003004:	4a37      	ldr	r2, [pc, #220]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 8003006:	493d      	ldr	r1, [pc, #244]	; (80030fc <HAL_UART_RxCpltCallback+0x318>)
 8003008:	4618      	mov	r0, r3
 800300a:	f008 fb5b 	bl	800b6c4 <siprintf>
 800300e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003016:	b29a      	uxth	r2, r3
 8003018:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800301c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003020:	4835      	ldr	r0, [pc, #212]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 8003022:	f005 ffeb 	bl	8008ffc <HAL_UART_Transmit>
 8003026:	e0c5      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8003028:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800302c:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 800302e:	4934      	ldr	r1, [pc, #208]	; (8003100 <HAL_UART_RxCpltCallback+0x31c>)
 8003030:	4618      	mov	r0, r3
 8003032:	f008 fb47 	bl	800b6c4 <siprintf>
 8003036:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
					HAL_UART_Transmit(&huart3, data, n, 1000);
 800303a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303e:	b29a      	uxth	r2, r3
 8003040:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003048:	482b      	ldr	r0, [pc, #172]	; (80030f8 <HAL_UART_RxCpltCallback+0x314>)
 800304a:	f005 ffd7 	bl	8008ffc <HAL_UART_Transmit>
 800304e:	e0b1      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
				}
			}else if (strncmp(input, prefix3, strlen(prefix3)) == 0){ //WARNNUM
 8003050:	f107 0310 	add.w	r3, r7, #16
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f8bb 	bl	80001d0 <strlen>
 800305a:	4602      	mov	r2, r0
 800305c:	f107 0310 	add.w	r3, r7, #16
 8003060:	4619      	mov	r1, r3
 8003062:	481c      	ldr	r0, [pc, #112]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 8003064:	f008 fbbf 	bl	800b7e6 <strncmp>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 808f 	bne.w	800318e <HAL_UART_RxCpltCallback+0x3aa>
				if (sscanf(input + strlen(prefix3), "%d", &value) == 1) {
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd f8ab 	bl	80001d0 <strlen>
 800307a:	4603      	mov	r3, r0
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_UART_RxCpltCallback+0x2f0>)
 800307e:	4413      	add	r3, r2
 8003080:	f107 020c 	add.w	r2, r7, #12
 8003084:	4918      	ldr	r1, [pc, #96]	; (80030e8 <HAL_UART_RxCpltCallback+0x304>)
 8003086:	4618      	mov	r0, r3
 8003088:	f008 fb3c 	bl	800b704 <siscanf>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d169      	bne.n	8003166 <HAL_UART_RxCpltCallback+0x382>
					if (value >= 1 && value <= 3){
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	dd52      	ble.n	800313e <HAL_UART_RxCpltCallback+0x35a>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b03      	cmp	r3, #3
 800309c:	dc4f      	bgt.n	800313e <HAL_UART_RxCpltCallback+0x35a>
						int n;
						if (numbers[2]>value)
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <HAL_UART_RxCpltCallback+0x308>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dd33      	ble.n	8003110 <HAL_UART_RxCpltCallback+0x32c>
							n = sprintf(data, "[INFO] %s WARNNUM decreased\n", timeStr);
 80030a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_UART_RxCpltCallback+0x300>)
 80030ae:	4917      	ldr	r1, [pc, #92]	; (800310c <HAL_UART_RxCpltCallback+0x328>)
 80030b0:	4618      	mov	r0, r3
 80030b2:	f008 fb07 	bl	800b6c4 <siprintf>
 80030b6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 80030ba:	e032      	b.n	8003122 <HAL_UART_RxCpltCallback+0x33e>
 80030bc:	08011368 	.word	0x08011368
 80030c0:	08011374 	.word	0x08011374
 80030c4:	08011380 	.word	0x08011380
 80030c8:	40004800 	.word	0x40004800
 80030cc:	20000a7c 	.word	0x20000a7c
 80030d0:	20000ab4 	.word	0x20000ab4
 80030d4:	20000a80 	.word	0x20000a80
 80030d8:	200009cc 	.word	0x200009cc
 80030dc:	20000458 	.word	0x20000458
 80030e0:	080110e0 	.word	0x080110e0
 80030e4:	200009e0 	.word	0x200009e0
 80030e8:	0801126c 	.word	0x0801126c
 80030ec:	20000000 	.word	0x20000000
 80030f0:	08011270 	.word	0x08011270
 80030f4:	08011290 	.word	0x08011290
 80030f8:	20000658 	.word	0x20000658
 80030fc:	080112b0 	.word	0x080112b0
 8003100:	080112d4 	.word	0x080112d4
 8003104:	080112f0 	.word	0x080112f0
 8003108:	0801130c 	.word	0x0801130c
 800310c:	08011328 	.word	0x08011328
						else
							n = sprintf(data, "[INFO] %s WARNNUM increased\n", timeStr);
 8003110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003114:	4a2a      	ldr	r2, [pc, #168]	; (80031c0 <HAL_UART_RxCpltCallback+0x3dc>)
 8003116:	492b      	ldr	r1, [pc, #172]	; (80031c4 <HAL_UART_RxCpltCallback+0x3e0>)
 8003118:	4618      	mov	r0, r3
 800311a:	f008 fad3 	bl	800b6c4 <siprintf>
 800311e:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
						numbers[2]=value;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <HAL_UART_RxCpltCallback+0x3e4>)
 8003126:	6093      	str	r3, [r2, #8]
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800312c:	b29a      	uxth	r2, r3
 800312e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003136:	4825      	ldr	r0, [pc, #148]	; (80031cc <HAL_UART_RxCpltCallback+0x3e8>)
 8003138:	f005 ff60 	bl	8008ffc <HAL_UART_Transmit>
					if (value >= 1 && value <= 3){
 800313c:	e03a      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}else{
						int n = sprintf(data, "[ERR] %s Not valid range of number\n", timeStr);
 800313e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_UART_RxCpltCallback+0x3dc>)
 8003144:	4922      	ldr	r1, [pc, #136]	; (80031d0 <HAL_UART_RxCpltCallback+0x3ec>)
 8003146:	4618      	mov	r0, r3
 8003148:	f008 fabc 	bl	800b6c4 <siprintf>
 800314c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
						HAL_UART_Transmit(&huart3, data, n, 1000);
 8003150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003154:	b29a      	uxth	r2, r3
 8003156:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800315a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <HAL_UART_RxCpltCallback+0x3e8>)
 8003160:	f005 ff4c 	bl	8008ffc <HAL_UART_Transmit>
 8003164:	e026      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
					}
				}else{
					int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 8003166:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <HAL_UART_RxCpltCallback+0x3dc>)
 800316c:	4919      	ldr	r1, [pc, #100]	; (80031d4 <HAL_UART_RxCpltCallback+0x3f0>)
 800316e:	4618      	mov	r0, r3
 8003170:	f008 faa8 	bl	800b6c4 <siprintf>
 8003174:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
					HAL_UART_Transmit(&huart3, data, n, 1000);
 8003178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800317c:	b29a      	uxth	r2, r3
 800317e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	4811      	ldr	r0, [pc, #68]	; (80031cc <HAL_UART_RxCpltCallback+0x3e8>)
 8003188:	f005 ff38 	bl	8008ffc <HAL_UART_Transmit>
 800318c:	e012      	b.n	80031b4 <HAL_UART_RxCpltCallback+0x3d0>
				}
			}else{											//Others
				int n = sprintf(data, "[ERR] %s Not valid Value\n", timeStr);
 800318e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <HAL_UART_RxCpltCallback+0x3dc>)
 8003194:	490f      	ldr	r1, [pc, #60]	; (80031d4 <HAL_UART_RxCpltCallback+0x3f0>)
 8003196:	4618      	mov	r0, r3
 8003198:	f008 fa94 	bl	800b6c4 <siprintf>
 800319c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				HAL_UART_Transmit(&huart3, data, n, 1000);
 80031a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80031aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ae:	4807      	ldr	r0, [pc, #28]	; (80031cc <HAL_UART_RxCpltCallback+0x3e8>)
 80031b0:	f005 ff24 	bl	8008ffc <HAL_UART_Transmit>
			}

		}
		uart_rx_enable_it();
 80031b4:	f7ff fe08 	bl	8002dc8 <uart_rx_enable_it>
    }
}
 80031b8:	bf00      	nop
 80031ba:	37c0      	adds	r7, #192	; 0xc0
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200009e0 	.word	0x200009e0
 80031c4:	08011348 	.word	0x08011348
 80031c8:	20000000 	.word	0x20000000
 80031cc:	20000658 	.word	0x20000658
 80031d0:	080112b0 	.word	0x080112b0
 80031d4:	080112d4 	.word	0x080112d4

080031d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_MspInit+0x44>)
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_MspInit+0x44>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6193      	str	r3, [r2, #24]
 80031ea:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_MspInit+0x44>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	607b      	str	r3, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_MspInit+0x44>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_MspInit+0x44>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_MspInit+0x44>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800320e:	2005      	movs	r0, #5
 8003210:	f002 f8a8 	bl	8005364 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003214:	bf00      	nop
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08c      	sub	sp, #48	; 0x30
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003240:	d12d      	bne.n	800329e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003242:	4b31      	ldr	r3, [pc, #196]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4a30      	ldr	r2, [pc, #192]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6153      	str	r3, [r2, #20]
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003264:	6153      	str	r3, [r2, #20]
 8003266:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003272:	2308      	movs	r3, #8
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 031c 	add.w	r3, r7, #28
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f002 f924 	bl	80054d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2101      	movs	r1, #1
 8003290:	2012      	movs	r0, #18
 8003292:	f002 f872 	bl	800537a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003296:	2012      	movs	r0, #18
 8003298:	f002 f88b 	bl	80053b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800329c:	e030      	b.n	8003300 <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_ADC_MspInit+0xec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d12b      	bne.n	8003300 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032b2:	6153      	str	r3, [r2, #20]
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	4a10      	ldr	r2, [pc, #64]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ca:	6153      	str	r3, [r2, #20]
 80032cc:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_ADC_MspInit+0xe8>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032d8:	2302      	movs	r3, #2
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032dc:	2303      	movs	r3, #3
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e4:	f107 031c 	add.w	r3, r7, #28
 80032e8:	4619      	mov	r1, r3
 80032ea:	4809      	ldr	r0, [pc, #36]	; (8003310 <HAL_ADC_MspInit+0xf0>)
 80032ec:	f002 f8f2 	bl	80054d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	202f      	movs	r0, #47	; 0x2f
 80032f6:	f002 f840 	bl	800537a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80032fa:	202f      	movs	r0, #47	; 0x2f
 80032fc:	f002 f859 	bl	80053b2 <HAL_NVIC_EnableIRQ>
}
 8003300:	bf00      	nop
 8003302:	3730      	adds	r7, #48	; 0x30
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000
 800330c:	50000400 	.word	0x50000400
 8003310:	48000400 	.word	0x48000400

08003314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_I2C_MspInit+0x7c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d127      	bne.n	8003386 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_I2C_MspInit+0x80>)
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <HAL_I2C_MspInit+0x80>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003340:	6153      	str	r3, [r2, #20]
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_I2C_MspInit+0x80>)
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800334e:	23c0      	movs	r3, #192	; 0xc0
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003352:	2312      	movs	r3, #18
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003356:	2301      	movs	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335a:	2303      	movs	r3, #3
 800335c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800335e:	2304      	movs	r3, #4
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	480b      	ldr	r0, [pc, #44]	; (8003398 <HAL_I2C_MspInit+0x84>)
 800336a:	f002 f8b3 	bl	80054d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_I2C_MspInit+0x80>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_I2C_MspInit+0x80>)
 8003374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_I2C_MspInit+0x80>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003386:	bf00      	nop
 8003388:	3728      	adds	r7, #40	; 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40005400 	.word	0x40005400
 8003394:	40021000 	.word	0x40021000
 8003398:	48000400 	.word	0x48000400

0800339c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_RTC_MspInit+0x44>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d111      	bne.n	80033d2 <HAL_RTC_MspInit+0x36>
 80033ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	60bb      	str	r3, [r7, #8]
  return result;
 80033bc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RTC_MspInit+0x48>)
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	461a      	mov	r2, r3
 80033ce:	2301      	movs	r3, #1
 80033d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40002800 	.word	0x40002800
 80033e4:	10908100 	.word	0x10908100

080033e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	; 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_SPI_MspInit+0x7c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d128      	bne.n	800345c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_SPI_MspInit+0x80>)
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <HAL_SPI_MspInit+0x80>)
 8003410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003414:	6193      	str	r3, [r2, #24]
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_SPI_MspInit+0x80>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	4b11      	ldr	r3, [pc, #68]	; (8003468 <HAL_SPI_MspInit+0x80>)
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4a10      	ldr	r2, [pc, #64]	; (8003468 <HAL_SPI_MspInit+0x80>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	6153      	str	r3, [r2, #20]
 800342e:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_SPI_MspInit+0x80>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800343a:	23e0      	movs	r3, #224	; 0xe0
 800343c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003446:	2303      	movs	r3, #3
 8003448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800344a:	2305      	movs	r3, #5
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003458:	f002 f83c 	bl	80054d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40013000 	.word	0x40013000
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_TIM_Base_MspInit+0xc0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10c      	bne.n	8003498 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4a2b      	ldr	r2, [pc, #172]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 8003484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003488:	6193      	str	r3, [r2, #24]
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003496:	e044      	b.n	8003522 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d114      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4a22      	ldr	r2, [pc, #136]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	61d3      	str	r3, [r2, #28]
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	201c      	movs	r0, #28
 80034c0:	f001 ff5b 	bl	800537a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c4:	201c      	movs	r0, #28
 80034c6:	f001 ff74 	bl	80053b2 <HAL_NVIC_EnableIRQ>
}
 80034ca:	e02a      	b.n	8003522 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_TIM_Base_MspInit+0xc8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d114      	bne.n	8003500 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	201d      	movs	r0, #29
 80034f4:	f001 ff41 	bl	800537a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034f8:	201d      	movs	r0, #29
 80034fa:	f001 ff5a 	bl	80053b2 <HAL_NVIC_EnableIRQ>
}
 80034fe:	e010      	b.n	8003522 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <HAL_TIM_Base_MspInit+0xcc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10b      	bne.n	8003522 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 8003510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003514:	6193      	str	r3, [r2, #24]
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_TIM_Base_MspInit+0xc4>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40021000 	.word	0x40021000
 8003534:	40000400 	.word	0x40000400
 8003538:	40013400 	.word	0x40013400

0800353c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_TIM_PWM_MspInit+0x38>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10b      	bne.n	8003566 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40000800 	.word	0x40000800
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <HAL_TIM_MspPostInit+0x164>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d11e      	bne.n	80035dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a8:	6153      	str	r3, [r2, #20]
 80035aa:	4b4e      	ldr	r3, [pc, #312]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035c8:	2306      	movs	r3, #6
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f107 031c 	add.w	r3, r7, #28
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d6:	f001 ff7d 	bl	80054d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80035da:	e07c      	b.n	80036d6 <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM3)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a41      	ldr	r2, [pc, #260]	; (80036e8 <HAL_TIM_MspPostInit+0x16c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d155      	bne.n	8003692 <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4a3e      	ldr	r2, [pc, #248]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035f0:	6153      	str	r3, [r2, #20]
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4a38      	ldr	r2, [pc, #224]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 8003604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003608:	6153      	str	r3, [r2, #20]
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003616:	4b33      	ldr	r3, [pc, #204]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4a32      	ldr	r2, [pc, #200]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 800361c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003620:	6153      	str	r3, [r2, #20]
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800362e:	2310      	movs	r3, #16
 8003630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800363e:	2302      	movs	r3, #2
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	4619      	mov	r1, r3
 8003648:	4828      	ldr	r0, [pc, #160]	; (80036ec <HAL_TIM_MspPostInit+0x170>)
 800364a:	f001 ff43 	bl	80054d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800364e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003660:	2302      	movs	r3, #2
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	4821      	ldr	r0, [pc, #132]	; (80036f0 <HAL_TIM_MspPostInit+0x174>)
 800366c:	f001 ff32 	bl	80054d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003670:	2310      	movs	r3, #16
 8003672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367c:	2300      	movs	r3, #0
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003680:	2302      	movs	r3, #2
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003684:	f107 031c 	add.w	r3, r7, #28
 8003688:	4619      	mov	r1, r3
 800368a:	481a      	ldr	r0, [pc, #104]	; (80036f4 <HAL_TIM_MspPostInit+0x178>)
 800368c:	f001 ff22 	bl	80054d4 <HAL_GPIO_Init>
}
 8003690:	e021      	b.n	80036d6 <HAL_TIM_MspPostInit+0x15a>
  else if(htim->Instance==TIM4)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <HAL_TIM_MspPostInit+0x17c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d11c      	bne.n	80036d6 <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80036a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a6:	6153      	str	r3, [r2, #20]
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_TIM_MspPostInit+0x168>)
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036c6:	2302      	movs	r3, #2
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4619      	mov	r1, r3
 80036d0:	480a      	ldr	r0, [pc, #40]	; (80036fc <HAL_TIM_MspPostInit+0x180>)
 80036d2:	f001 feff 	bl	80054d4 <HAL_GPIO_Init>
}
 80036d6:	bf00      	nop
 80036d8:	3730      	adds	r7, #48	; 0x30
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	48001000 	.word	0x48001000
 80036f0:	48000800 	.word	0x48000800
 80036f4:	48000400 	.word	0x48000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	48000c00 	.word	0x48000c00

08003700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1b      	ldr	r2, [pc, #108]	; (800378c <HAL_UART_MspInit+0x8c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d130      	bne.n	8003784 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_UART_MspInit+0x90>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <HAL_UART_MspInit+0x90>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372c:	61d3      	str	r3, [r2, #28]
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_UART_MspInit+0x90>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_UART_MspInit+0x90>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_UART_MspInit+0x90>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003744:	6153      	str	r3, [r2, #20]
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_UART_MspInit+0x90>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003752:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003764:	2307      	movs	r3, #7
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4809      	ldr	r0, [pc, #36]	; (8003794 <HAL_UART_MspInit+0x94>)
 8003770:	f001 feb0 	bl	80054d4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	2027      	movs	r0, #39	; 0x27
 800377a:	f001 fdfe 	bl	800537a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800377e:	2027      	movs	r0, #39	; 0x27
 8003780:	f001 fe17 	bl	80053b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003784:	bf00      	nop
 8003786:	3728      	adds	r7, #40	; 0x28
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40004800 	.word	0x40004800
 8003790:	40021000 	.word	0x40021000
 8003794:	48000400 	.word	0x48000400

08003798 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	; (8003818 <HAL_PCD_MspInit+0x80>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d129      	bne.n	800380e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_PCD_MspInit+0x84>)
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_PCD_MspInit+0x84>)
 80037c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c4:	6153      	str	r3, [r2, #20]
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <HAL_PCD_MspInit+0x84>)
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|DP_Pin;
 80037d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80037d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e0:	2303      	movs	r3, #3
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80037e4:	230e      	movs	r3, #14
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f2:	f001 fe6f 	bl	80054d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_PCD_MspInit+0x84>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_PCD_MspInit+0x84>)
 80037fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003800:	61d3      	str	r3, [r2, #28]
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_PCD_MspInit+0x84>)
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40005c00 	.word	0x40005c00
 800381c:	40021000 	.word	0x40021000

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler+0x4>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <UsageFault_Handler+0x4>

0800383e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800386c:	f000 f992 	bl	8003b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}

08003874 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003878:	2001      	movs	r0, #1
 800387a:	f001 ffd7 	bl	800582c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}

08003882 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003886:	2002      	movs	r0, #2
 8003888:	f001 ffd0 	bl	800582c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}

08003890 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003894:	2010      	movs	r0, #16
 8003896:	f001 ffc9 	bl	800582c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <ADC1_2_IRQHandler+0x10>)
 80038a6:	f000 fcd7 	bl	8004258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000364 	.word	0x20000364

080038b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <TIM2_IRQHandler+0x10>)
 80038ba:	f004 fae9 	bl	8007e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000528 	.word	0x20000528

080038c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <TIM3_IRQHandler+0x10>)
 80038ce:	f004 fadf 	bl	8007e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000574 	.word	0x20000574

080038dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <USART3_IRQHandler+0x10>)
 80038e2:	f005 fc59 	bl	8009198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000658 	.word	0x20000658

080038f0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <ADC3_IRQHandler+0x10>)
 80038f6:	f000 fcaf 	bl	8004258 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200003b4 	.word	0x200003b4

08003904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return 1;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <_kill>:

int _kill(int pid, int sig)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800391e:	f006 fe0d 	bl	800a53c <__errno>
 8003922:	4603      	mov	r3, r0
 8003924:	2216      	movs	r2, #22
 8003926:	601a      	str	r2, [r3, #0]
  return -1;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_exit>:

void _exit (int status)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800393c:	f04f 31ff 	mov.w	r1, #4294967295
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ffe7 	bl	8003914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003946:	e7fe      	b.n	8003946 <_exit+0x12>

08003948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e00a      	b.n	8003970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800395a:	f3af 8000 	nop.w
 800395e:	4601      	mov	r1, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	60ba      	str	r2, [r7, #8]
 8003966:	b2ca      	uxtb	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	3301      	adds	r3, #1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	dbf0      	blt.n	800395a <_read+0x12>
  }

  return len;
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	e009      	b.n	80039a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	60ba      	str	r2, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dbf1      	blt.n	8003994 <_write+0x12>
  }
  return len;
 80039b0:	687b      	ldr	r3, [r7, #4]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <_close>:

int _close(int file)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039e2:	605a      	str	r2, [r3, #4]
  return 0;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_isatty>:

int _isatty(int file)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <_sbrk+0x5c>)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <_sbrk+0x60>)
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <_sbrk+0x64>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <_sbrk+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a54:	f006 fd72 	bl	800a53c <__errno>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a62:	e009      	b.n	8003a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <_sbrk+0x64>)
 8003a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	2000a000 	.word	0x2000a000
 8003a84:	00000400 	.word	0x00000400
 8003a88:	20000ac4 	.word	0x20000ac4
 8003a8c:	20000b08 	.word	0x20000b08

08003a90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <SystemInit+0x20>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <SystemInit+0x20>)
 8003a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aec <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ab8:	f7ff ffea 	bl	8003a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003abc:	480c      	ldr	r0, [pc, #48]	; (8003af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003abe:	490d      	ldr	r1, [pc, #52]	; (8003af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <LoopForever+0xe>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac4:	e002      	b.n	8003acc <LoopCopyDataInit>

08003ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aca:	3304      	adds	r3, #4

08003acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad0:	d3f9      	bcc.n	8003ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ad4:	4c0a      	ldr	r4, [pc, #40]	; (8003b00 <LoopForever+0x16>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ad8:	e001      	b.n	8003ade <LoopFillZerobss>

08003ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003adc:	3204      	adds	r2, #4

08003ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae0:	d3fb      	bcc.n	8003ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ae2:	f006 fd31 	bl	800a548 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ae6:	f7fd fac9 	bl	800107c <main>

08003aea <LoopForever>:

LoopForever:
    b LoopForever
 8003aea:	e7fe      	b.n	8003aea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003aec:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003af4:	20000348 	.word	0x20000348
  ldr r2, =_sidata
 8003af8:	08011b68 	.word	0x08011b68
  ldr r2, =_sbss
 8003afc:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8003b00:	20000b04 	.word	0x20000b04

08003b04 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b04:	e7fe      	b.n	8003b04 <ADC4_IRQHandler>
	...

08003b08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <HAL_Init+0x28>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_Init+0x28>)
 8003b12:	f043 0310 	orr.w	r3, r3, #16
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f001 fc23 	bl	8005364 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f000 f808 	bl	8003b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b24:	f7ff fb58 	bl	80031d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40022000 	.word	0x40022000

08003b34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_InitTick+0x54>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_InitTick+0x58>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fc3b 	bl	80053ce <HAL_SYSTICK_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00e      	b.n	8003b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d80a      	bhi.n	8003b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f001 fc03 	bl	800537a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <HAL_InitTick+0x5c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000104 	.word	0x20000104
 8003b8c:	2000010c 	.word	0x2000010c
 8003b90:	20000108 	.word	0x20000108

08003b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000010c 	.word	0x2000010c
 8003bb8:	20000ac8 	.word	0x20000ac8

08003bbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000ac8 	.word	0x20000ac8

08003bd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b09a      	sub	sp, #104	; 0x68
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e1c9      	b.n	8003fb0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d176      	bne.n	8003d1c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d152      	bne.n	8003cdc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fae5 	bl	8003220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13b      	bne.n	8003cdc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f001 fa47 	bl	80050f8 <ADC_Disable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d12f      	bne.n	8003cdc <HAL_ADC_Init+0xe0>
 8003c7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d12b      	bne.n	8003cdc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c8c:	f023 0302 	bic.w	r3, r3, #2
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003cb6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cb8:	4b86      	ldr	r3, [pc, #536]	; (8003ed4 <HAL_ADC_Init+0x2d8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a86      	ldr	r2, [pc, #536]	; (8003ed8 <HAL_ADC_Init+0x2dc>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9a      	lsrs	r2, r3, #18
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d110      	bne.n	8003d1c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f023 0312 	bic.w	r3, r3, #18
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8136 	bne.w	8003f96 <HAL_ADC_Init+0x39a>
 8003d2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 8131 	bne.w	8003f96 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 8129 	bne.w	8003f96 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d4c:	f043 0202 	orr.w	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_Init+0x16c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a5e      	ldr	r2, [pc, #376]	; (8003edc <HAL_ADC_Init+0x2e0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d101      	bne.n	8003d6c <HAL_ADC_Init+0x170>
 8003d68:	4b5d      	ldr	r3, [pc, #372]	; (8003ee0 <HAL_ADC_Init+0x2e4>)
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_Init+0x172>
 8003d6c:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_ADC_Init+0x2e8>)
 8003d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d78:	d102      	bne.n	8003d80 <HAL_ADC_Init+0x184>
 8003d7a:	4b58      	ldr	r3, [pc, #352]	; (8003edc <HAL_ADC_Init+0x2e0>)
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e01a      	b.n	8003db6 <HAL_ADC_Init+0x1ba>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a55      	ldr	r2, [pc, #340]	; (8003edc <HAL_ADC_Init+0x2e0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d103      	bne.n	8003d92 <HAL_ADC_Init+0x196>
 8003d8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e011      	b.n	8003db6 <HAL_ADC_Init+0x1ba>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a54      	ldr	r2, [pc, #336]	; (8003ee8 <HAL_ADC_Init+0x2ec>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d102      	bne.n	8003da2 <HAL_ADC_Init+0x1a6>
 8003d9c:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_ADC_Init+0x2f0>)
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e009      	b.n	8003db6 <HAL_ADC_Init+0x1ba>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a51      	ldr	r2, [pc, #324]	; (8003eec <HAL_ADC_Init+0x2f0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d102      	bne.n	8003db2 <HAL_ADC_Init+0x1b6>
 8003dac:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <HAL_ADC_Init+0x2ec>)
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e001      	b.n	8003db6 <HAL_ADC_Init+0x1ba>
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d108      	bne.n	8003dd6 <HAL_ADC_Init+0x1da>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_Init+0x1da>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_ADC_Init+0x1dc>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d11c      	bne.n	8003e16 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ddc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_ADC_Init+0x202>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Init+0x202>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_ADC_Init+0x204>
 8003dfe:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d108      	bne.n	8003e16 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e14:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	7e5b      	ldrb	r3, [r3, #25]
 8003e1a:	035b      	lsls	r3, r3, #13
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e20:	2a01      	cmp	r2, #1
 8003e22:	d002      	beq.n	8003e2a <HAL_ADC_Init+0x22e>
 8003e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e28:	e000      	b.n	8003e2c <HAL_ADC_Init+0x230>
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d11b      	bne.n	8003e82 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7e5b      	ldrb	r3, [r3, #25]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d109      	bne.n	8003e66 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	3b01      	subs	r3, #1
 8003e58:	045a      	lsls	r2, r3, #17
 8003e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60
 8003e64:	e00d      	b.n	8003e82 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e6e:	f043 0220 	orr.w	r2, r3, #32
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d03a      	beq.n	8003f00 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <HAL_ADC_Init+0x2ec>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADC_Init+0x2a2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <HAL_ADC_Init+0x2f0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d128      	bne.n	8003ef0 <HAL_ADC_Init+0x2f4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8003ea6:	d012      	beq.n	8003ece <HAL_ADC_Init+0x2d2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_ADC_Init+0x2cc>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003eba:	d002      	beq.n	8003ec2 <HAL_ADC_Init+0x2c6>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	e018      	b.n	8003ef4 <HAL_ADC_Init+0x2f8>
 8003ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ec6:	e015      	b.n	8003ef4 <HAL_ADC_Init+0x2f8>
 8003ec8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003ecc:	e012      	b.n	8003ef4 <HAL_ADC_Init+0x2f8>
 8003ece:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003ed2:	e00f      	b.n	8003ef4 <HAL_ADC_Init+0x2f8>
 8003ed4:	20000104 	.word	0x20000104
 8003ed8:	431bde83 	.word	0x431bde83
 8003edc:	50000100 	.word	0x50000100
 8003ee0:	50000300 	.word	0x50000300
 8003ee4:	50000700 	.word	0x50000700
 8003ee8:	50000400 	.word	0x50000400
 8003eec:	50000500 	.word	0x50000500
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003efc:	4313      	orrs	r3, r2
 8003efe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d114      	bne.n	8003f38 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1c:	f023 0302 	bic.w	r3, r3, #2
 8003f20:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7e1b      	ldrb	r3, [r3, #24]
 8003f26:	039a      	lsls	r2, r3, #14
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f34:	4313      	orrs	r3, r2
 8003f36:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_ADC_Init+0x3bc>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10c      	bne.n	8003f6e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f023 010f 	bic.w	r1, r3, #15
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f6c:	e007      	b.n	8003f7e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 020f 	bic.w	r2, r2, #15
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f023 0303 	bic.w	r3, r3, #3
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
 8003f94:	e00a      	b.n	8003fac <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f023 0312 	bic.w	r3, r3, #18
 8003f9e:	f043 0210 	orr.w	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003fac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3768      	adds	r7, #104	; 0x68
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	fff0c007 	.word	0xfff0c007

08003fbc <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 8123 	bne.w	800421e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Start_IT+0x2a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e11e      	b.n	8004224 <HAL_ADC_Start_IT+0x268>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 f81e 	bl	8005030 <ADC_Enable>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 810a 	bne.w	8004214 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800401c:	d004      	beq.n	8004028 <HAL_ADC_Start_IT+0x6c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a82      	ldr	r2, [pc, #520]	; (800422c <HAL_ADC_Start_IT+0x270>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d106      	bne.n	8004036 <HAL_ADC_Start_IT+0x7a>
 8004028:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_ADC_Start_IT+0x274>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_ADC_Start_IT+0x9a>
 8004034:	e005      	b.n	8004042 <HAL_ADC_Start_IT+0x86>
 8004036:	4b7f      	ldr	r3, [pc, #508]	; (8004234 <HAL_ADC_Start_IT+0x278>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_ADC_Start_IT+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404a:	d004      	beq.n	8004056 <HAL_ADC_Start_IT+0x9a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a79      	ldr	r2, [pc, #484]	; (8004238 <HAL_ADC_Start_IT+0x27c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d115      	bne.n	8004082 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d036      	beq.n	80040de <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004078:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004080:	e02d      	b.n	80040de <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004096:	d004      	beq.n	80040a2 <HAL_ADC_Start_IT+0xe6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a63      	ldr	r2, [pc, #396]	; (800422c <HAL_ADC_Start_IT+0x270>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADC_Start_IT+0xfc>
 80040a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e008      	b.n	80040ca <HAL_ADC_Start_IT+0x10e>
 80040b8:	4b5f      	ldr	r3, [pc, #380]	; (8004238 <HAL_ADC_Start_IT+0x27c>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bf14      	ite	ne
 80040c4:	2301      	movne	r3, #1
 80040c6:	2300      	moveq	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ea:	d106      	bne.n	80040fa <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	f023 0206 	bic.w	r2, r3, #6
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
 80040f8:	e002      	b.n	8004100 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	221c      	movs	r2, #28
 800410e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d110      	bne.n	800413a <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	605a      	str	r2, [r3, #4]
          break;
 8004138:	e008      	b.n	800414c <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 020c 	orr.w	r2, r2, #12
 8004148:	605a      	str	r2, [r3, #4]
          break;
 800414a:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0210 	bic.w	r2, r2, #16
 8004162:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416c:	d004      	beq.n	8004178 <HAL_ADC_Start_IT+0x1bc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2e      	ldr	r2, [pc, #184]	; (800422c <HAL_ADC_Start_IT+0x270>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d106      	bne.n	8004186 <HAL_ADC_Start_IT+0x1ca>
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_ADC_Start_IT+0x274>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b00      	cmp	r3, #0
 8004182:	d03e      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 8004184:	e005      	b.n	8004192 <HAL_ADC_Start_IT+0x1d6>
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_ADC_Start_IT+0x278>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	2b00      	cmp	r3, #0
 8004190:	d037      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800419a:	d004      	beq.n	80041a6 <HAL_ADC_Start_IT+0x1ea>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_ADC_Start_IT+0x270>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d106      	bne.n	80041b4 <HAL_ADC_Start_IT+0x1f8>
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_ADC_Start_IT+0x274>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	d027      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 80041b2:	e005      	b.n	80041c0 <HAL_ADC_Start_IT+0x204>
 80041b4:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <HAL_ADC_Start_IT+0x278>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	2b05      	cmp	r3, #5
 80041be:	d020      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c8:	d004      	beq.n	80041d4 <HAL_ADC_Start_IT+0x218>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_ADC_Start_IT+0x270>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d106      	bne.n	80041e2 <HAL_ADC_Start_IT+0x226>
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <HAL_ADC_Start_IT+0x274>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2b09      	cmp	r3, #9
 80041de:	d010      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 80041e0:	e005      	b.n	80041ee <HAL_ADC_Start_IT+0x232>
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <HAL_ADC_Start_IT+0x278>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2b09      	cmp	r3, #9
 80041ec:	d009      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f6:	d004      	beq.n	8004202 <HAL_ADC_Start_IT+0x246>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <HAL_ADC_Start_IT+0x27c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10f      	bne.n	8004222 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0204 	orr.w	r2, r2, #4
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	e006      	b.n	8004222 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800421c:	e001      	b.n	8004222 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004222:	7bfb      	ldrb	r3, [r7, #15]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	50000100 	.word	0x50000100
 8004230:	50000300 	.word	0x50000300
 8004234:	50000700 	.word	0x50000700
 8004238:	50000400 	.word	0x50000400

0800423c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800424a:	4618      	mov	r0, r3
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8004264:	2300      	movs	r3, #0
 8004266:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <HAL_ADC_IRQHandler+0x38>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10b      	bne.n	80042a8 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80bc 	beq.w	8004414 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80b6 	beq.w	8004414 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042c8:	d004      	beq.n	80042d4 <HAL_ADC_IRQHandler+0x7c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a90      	ldr	r2, [pc, #576]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d106      	bne.n	80042e2 <HAL_ADC_IRQHandler+0x8a>
 80042d4:	4b8f      	ldr	r3, [pc, #572]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d03e      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 80042e0:	e005      	b.n	80042ee <HAL_ADC_IRQHandler+0x96>
 80042e2:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d037      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f6:	d004      	beq.n	8004302 <HAL_ADC_IRQHandler+0xaa>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a84      	ldr	r2, [pc, #528]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d106      	bne.n	8004310 <HAL_ADC_IRQHandler+0xb8>
 8004302:	4b84      	ldr	r3, [pc, #528]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2b05      	cmp	r3, #5
 800430c:	d027      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 800430e:	e005      	b.n	800431c <HAL_ADC_IRQHandler+0xc4>
 8004310:	4b81      	ldr	r3, [pc, #516]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2b05      	cmp	r3, #5
 800431a:	d020      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004324:	d004      	beq.n	8004330 <HAL_ADC_IRQHandler+0xd8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a79      	ldr	r2, [pc, #484]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d106      	bne.n	800433e <HAL_ADC_IRQHandler+0xe6>
 8004330:	4b78      	ldr	r3, [pc, #480]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2b09      	cmp	r3, #9
 800433a:	d010      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 800433c:	e005      	b.n	800434a <HAL_ADC_IRQHandler+0xf2>
 800433e:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2b09      	cmp	r3, #9
 8004348:	d009      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004352:	d004      	beq.n	800435e <HAL_ADC_IRQHandler+0x106>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a70      	ldr	r2, [pc, #448]	; (800451c <HAL_ADC_IRQHandler+0x2c4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d104      	bne.n	8004368 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e00f      	b.n	8004388 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004370:	d004      	beq.n	800437c <HAL_ADC_IRQHandler+0x124>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a66      	ldr	r2, [pc, #408]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d102      	bne.n	8004382 <HAL_ADC_IRQHandler+0x12a>
 800437c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004380:	e000      	b.n	8004384 <HAL_ADC_IRQHandler+0x12c>
 8004382:	4b66      	ldr	r3, [pc, #408]	; (800451c <HAL_ADC_IRQHandler+0x2c4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004392:	2b00      	cmp	r3, #0
 8004394:	d137      	bne.n	8004406 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800439c:	2b00      	cmp	r3, #0
 800439e:	d132      	bne.n	8004406 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02d      	beq.n	8004406 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 020c 	bic.w	r2, r2, #12
 80043c6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d112      	bne.n	8004406 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
 80043ec:	e00b      	b.n	8004406 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe faaa 	bl	8002960 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	220c      	movs	r2, #12
 8004412:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_ADC_IRQHandler+0x1d0>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8138 	beq.w	80046a4 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8132 	beq.w	80046a4 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004454:	d004      	beq.n	8004460 <HAL_ADC_IRQHandler+0x208>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2d      	ldr	r2, [pc, #180]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d106      	bne.n	800446e <HAL_ADC_IRQHandler+0x216>
 8004460:	4b2c      	ldr	r3, [pc, #176]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2b00      	cmp	r3, #0
 800446a:	d03e      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 800446c:	e005      	b.n	800447a <HAL_ADC_IRQHandler+0x222>
 800446e:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d037      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004482:	d004      	beq.n	800448e <HAL_ADC_IRQHandler+0x236>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a21      	ldr	r2, [pc, #132]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d106      	bne.n	800449c <HAL_ADC_IRQHandler+0x244>
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2b05      	cmp	r3, #5
 8004498:	d027      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 800449a:	e005      	b.n	80044a8 <HAL_ADC_IRQHandler+0x250>
 800449c:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d020      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_IRQHandler+0x264>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d106      	bne.n	80044ca <HAL_ADC_IRQHandler+0x272>
 80044bc:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_ADC_IRQHandler+0x2bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2b09      	cmp	r3, #9
 80044c6:	d010      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 80044c8:	e005      	b.n	80044d6 <HAL_ADC_IRQHandler+0x27e>
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_ADC_IRQHandler+0x2c0>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d009      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044de:	d004      	beq.n	80044ea <HAL_ADC_IRQHandler+0x292>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	; (800451c <HAL_ADC_IRQHandler+0x2c4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d104      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e018      	b.n	8004526 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044fc:	d004      	beq.n	8004508 <HAL_ADC_IRQHandler+0x2b0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a03      	ldr	r2, [pc, #12]	; (8004510 <HAL_ADC_IRQHandler+0x2b8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10b      	bne.n	8004520 <HAL_ADC_IRQHandler+0x2c8>
 8004508:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800450c:	e009      	b.n	8004522 <HAL_ADC_IRQHandler+0x2ca>
 800450e:	bf00      	nop
 8004510:	50000100 	.word	0x50000100
 8004514:	50000300 	.word	0x50000300
 8004518:	50000700 	.word	0x50000700
 800451c:	50000400 	.word	0x50000400
 8004520:	4b92      	ldr	r3, [pc, #584]	; (800476c <HAL_ADC_IRQHandler+0x514>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004530:	2b00      	cmp	r3, #0
 8004532:	f040 80b0 	bne.w	8004696 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80a3 	bne.w	8004696 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 809d 	bne.w	8004696 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8097 	beq.w	8004696 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004570:	d004      	beq.n	800457c <HAL_ADC_IRQHandler+0x324>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7e      	ldr	r2, [pc, #504]	; (8004770 <HAL_ADC_IRQHandler+0x518>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d106      	bne.n	800458a <HAL_ADC_IRQHandler+0x332>
 800457c:	4b7d      	ldr	r3, [pc, #500]	; (8004774 <HAL_ADC_IRQHandler+0x51c>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2b00      	cmp	r3, #0
 8004586:	d03e      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 8004588:	e005      	b.n	8004596 <HAL_ADC_IRQHandler+0x33e>
 800458a:	4b7b      	ldr	r3, [pc, #492]	; (8004778 <HAL_ADC_IRQHandler+0x520>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	2b00      	cmp	r3, #0
 8004594:	d037      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800459e:	d004      	beq.n	80045aa <HAL_ADC_IRQHandler+0x352>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a72      	ldr	r2, [pc, #456]	; (8004770 <HAL_ADC_IRQHandler+0x518>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d106      	bne.n	80045b8 <HAL_ADC_IRQHandler+0x360>
 80045aa:	4b72      	ldr	r3, [pc, #456]	; (8004774 <HAL_ADC_IRQHandler+0x51c>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d027      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 80045b6:	e005      	b.n	80045c4 <HAL_ADC_IRQHandler+0x36c>
 80045b8:	4b6f      	ldr	r3, [pc, #444]	; (8004778 <HAL_ADC_IRQHandler+0x520>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d020      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045cc:	d004      	beq.n	80045d8 <HAL_ADC_IRQHandler+0x380>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a67      	ldr	r2, [pc, #412]	; (8004770 <HAL_ADC_IRQHandler+0x518>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d106      	bne.n	80045e6 <HAL_ADC_IRQHandler+0x38e>
 80045d8:	4b66      	ldr	r3, [pc, #408]	; (8004774 <HAL_ADC_IRQHandler+0x51c>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2b07      	cmp	r3, #7
 80045e2:	d010      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 80045e4:	e005      	b.n	80045f2 <HAL_ADC_IRQHandler+0x39a>
 80045e6:	4b64      	ldr	r3, [pc, #400]	; (8004778 <HAL_ADC_IRQHandler+0x520>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 031f 	and.w	r3, r3, #31
 80045ee:	2b07      	cmp	r3, #7
 80045f0:	d009      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045fa:	d004      	beq.n	8004606 <HAL_ADC_IRQHandler+0x3ae>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a5a      	ldr	r2, [pc, #360]	; (800476c <HAL_ADC_IRQHandler+0x514>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d104      	bne.n	8004610 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e00f      	b.n	8004630 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004618:	d004      	beq.n	8004624 <HAL_ADC_IRQHandler+0x3cc>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a54      	ldr	r2, [pc, #336]	; (8004770 <HAL_ADC_IRQHandler+0x518>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d102      	bne.n	800462a <HAL_ADC_IRQHandler+0x3d2>
 8004624:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004628:	e000      	b.n	800462c <HAL_ADC_IRQHandler+0x3d4>
 800462a:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_ADC_IRQHandler+0x514>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d12d      	bne.n	8004696 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11a      	bne.n	800467e <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004656:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d112      	bne.n	8004696 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0201 	orr.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
 800467c:	e00b      	b.n	8004696 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8c4 	bl	8004824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2260      	movs	r2, #96	; 0x60
 80046a2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_ADC_IRQHandler+0x47a>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff fa85 	bl	8003bd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d012      	beq.n	8004702 <HAL_ADC_IRQHandler+0x4aa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00d      	beq.n	8004702 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8aa 	bl	800484c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004700:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_ADC_IRQHandler+0x4da>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f89c 	bl	8004860 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004730:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d04f      	beq.n	80047dc <HAL_ADC_IRQHandler+0x584>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04a      	beq.n	80047dc <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	2b01      	cmp	r3, #1
 800474c:	d102      	bne.n	8004754 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800474e:	2301      	movs	r3, #1
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e02d      	b.n	80047b0 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800475c:	d004      	beq.n	8004768 <HAL_ADC_IRQHandler+0x510>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a03      	ldr	r2, [pc, #12]	; (8004770 <HAL_ADC_IRQHandler+0x518>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d109      	bne.n	800477c <HAL_ADC_IRQHandler+0x524>
 8004768:	4b02      	ldr	r3, [pc, #8]	; (8004774 <HAL_ADC_IRQHandler+0x51c>)
 800476a:	e008      	b.n	800477e <HAL_ADC_IRQHandler+0x526>
 800476c:	50000400 	.word	0x50000400
 8004770:	50000100 	.word	0x50000100
 8004774:	50000300 	.word	0x50000300
 8004778:	50000700 	.word	0x50000700
 800477c:	4b28      	ldr	r3, [pc, #160]	; (8004820 <HAL_ADC_IRQHandler+0x5c8>)
 800477e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10a      	bne.n	80047b0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800479a:	2301      	movs	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e007      	b.n	80047b0 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80047ac:	2301      	movs	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d10e      	bne.n	80047d4 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	f043 0202 	orr.w	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fa0a 	bl	8003be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2210      	movs	r2, #16
 80047da:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <HAL_ADC_IRQHandler+0x5c0>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	f043 0208 	orr.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f810 	bl	8004838 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8004818:	bf00      	nop
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	50000700 	.word	0x50000700

08004824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004874:	b480      	push	{r7}
 8004876:	b09b      	sub	sp, #108	; 0x6c
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_ADC_ConfigChannel+0x22>
 8004892:	2302      	movs	r3, #2
 8004894:	e2ca      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x5b8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 82ae 	bne.w	8004e0a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d81c      	bhi.n	80048f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	461a      	mov	r2, r3
 80048ca:	231f      	movs	r3, #31
 80048cc:	4093      	lsls	r3, r2
 80048ce:	43db      	mvns	r3, r3
 80048d0:	4019      	ands	r1, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa00 f203 	lsl.w	r2, r0, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
 80048ee:	e063      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	d81e      	bhi.n	8004936 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	3b1e      	subs	r3, #30
 800490c:	221f      	movs	r2, #31
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	4019      	ands	r1, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	3b1e      	subs	r3, #30
 8004928:	fa00 f203 	lsl.w	r2, r0, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	635a      	str	r2, [r3, #52]	; 0x34
 8004934:	e040      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b0e      	cmp	r3, #14
 800493c:	d81e      	bhi.n	800497c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	3b3c      	subs	r3, #60	; 0x3c
 8004952:	221f      	movs	r2, #31
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	4019      	ands	r1, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	4413      	add	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	3b3c      	subs	r3, #60	; 0x3c
 800496e:	fa00 f203 	lsl.w	r2, r0, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
 800497a:	e01d      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	4413      	add	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	3b5a      	subs	r3, #90	; 0x5a
 8004990:	221f      	movs	r2, #31
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	4019      	ands	r1, r3
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	3b5a      	subs	r3, #90	; 0x5a
 80049ac:	fa00 f203 	lsl.w	r2, r0, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 80e5 	bne.w	8004b92 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	d91c      	bls.n	8004a0a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	3b1e      	subs	r3, #30
 80049e2:	2207      	movs	r2, #7
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	4019      	ands	r1, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	6898      	ldr	r0, [r3, #8]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	4413      	add	r3, r2
 80049fa:	3b1e      	subs	r3, #30
 80049fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	619a      	str	r2, [r3, #24]
 8004a08:	e019      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6959      	ldr	r1, [r3, #20]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	4019      	ands	r1, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6898      	ldr	r0, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	fa00 f203 	lsl.w	r2, r0, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d84f      	bhi.n	8004b00 <HAL_ADC_ConfigChannel+0x28c>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <HAL_ADC_ConfigChannel+0x1f4>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a79 	.word	0x08004a79
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004abd 	.word	0x08004abd
 8004a74:	08004adf 	.word	0x08004adf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a7e:	4b9a      	ldr	r3, [pc, #616]	; (8004ce8 <HAL_ADC_ConfigChannel+0x474>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	0691      	lsls	r1, r2, #26
 8004a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004a96:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004a98:	e07e      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004aa0:	4b91      	ldr	r3, [pc, #580]	; (8004ce8 <HAL_ADC_ConfigChannel+0x474>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	0691      	lsls	r1, r2, #26
 8004aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aac:	430a      	orrs	r2, r1
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004aba:	e06d      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ac2:	4b89      	ldr	r3, [pc, #548]	; (8004ce8 <HAL_ADC_ConfigChannel+0x474>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	0691      	lsls	r1, r2, #26
 8004acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004adc:	e05c      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ae4:	4b80      	ldr	r3, [pc, #512]	; (8004ce8 <HAL_ADC_ConfigChannel+0x474>)
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	0691      	lsls	r1, r2, #26
 8004aee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004af0:	430a      	orrs	r2, r1
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004afc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004afe:	e04b      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	069b      	lsls	r3, r3, #26
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d107      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	069b      	lsls	r3, r3, #26
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b46:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	069b      	lsls	r3, r3, #26
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b6a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	069b      	lsls	r3, r3, #26
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d10a      	bne.n	8004b96 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004b90:	e001      	b.n	8004b96 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004b96:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d108      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x344>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x344>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_ADC_ConfigChannel+0x346>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 8130 	bne.w	8004e20 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d00f      	beq.n	8004be8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	400a      	ands	r2, r1
 8004be2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004be6:	e049      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d91c      	bls.n	8004c44 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	3b1b      	subs	r3, #27
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	4019      	ands	r1, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6898      	ldr	r0, [r3, #8]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4413      	add	r3, r2
 8004c34:	3b1b      	subs	r3, #27
 8004c36:	fa00 f203 	lsl.w	r2, r0, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	619a      	str	r2, [r3, #24]
 8004c42:	e01b      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6959      	ldr	r1, [r3, #20]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	4613      	mov	r3, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	4413      	add	r3, r2
 8004c56:	2207      	movs	r2, #7
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	4019      	ands	r1, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6898      	ldr	r0, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	fa00 f203 	lsl.w	r2, r0, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c84:	d004      	beq.n	8004c90 <HAL_ADC_ConfigChannel+0x41c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_ADC_ConfigChannel+0x478>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x420>
 8004c90:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_ADC_ConfigChannel+0x47c>)
 8004c92:	e000      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x422>
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <HAL_ADC_ConfigChannel+0x480>)
 8004c96:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d105      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d015      	beq.n	8004cd8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004cb0:	2b11      	cmp	r3, #17
 8004cb2:	d105      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004cc4:	2b12      	cmp	r3, #18
 8004cc6:	f040 80ab 	bne.w	8004e20 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 80a4 	bne.w	8004e20 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_ADC_ConfigChannel+0x484>
 8004ce2:	4b02      	ldr	r3, [pc, #8]	; (8004cec <HAL_ADC_ConfigChannel+0x478>)
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e022      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x4ba>
 8004ce8:	83fff000 	.word	0x83fff000
 8004cec:	50000100 	.word	0x50000100
 8004cf0:	50000300 	.word	0x50000300
 8004cf4:	50000700 	.word	0x50000700
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a4e      	ldr	r2, [pc, #312]	; (8004e38 <HAL_ADC_ConfigChannel+0x5c4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d103      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x496>
 8004d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e011      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x4ba>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4b      	ldr	r2, [pc, #300]	; (8004e3c <HAL_ADC_ConfigChannel+0x5c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d102      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x4a6>
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	e009      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x4ba>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a48      	ldr	r2, [pc, #288]	; (8004e40 <HAL_ADC_ConfigChannel+0x5cc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x4b6>
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_ADC_ConfigChannel+0x5c8>)
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e001      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x4ba>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d108      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x4da>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_ADC_ConfigChannel+0x4da>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_ADC_ConfigChannel+0x4dc>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d150      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d107      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x502>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x502>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_ADC_ConfigChannel+0x504>
 8004d76:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d13c      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b10      	cmp	r3, #16
 8004d82:	d11d      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x54c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d8c:	d118      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d98:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d9a:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <HAL_ADC_ConfigChannel+0x5d0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a2a      	ldr	r2, [pc, #168]	; (8004e48 <HAL_ADC_ConfigChannel+0x5d4>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	0c9a      	lsrs	r2, r3, #18
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004db0:	e002      	b.n	8004db8 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f9      	bne.n	8004db2 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004dbe:	e02e      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b11      	cmp	r3, #17
 8004dc6:	d10b      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x56c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dd0:	d106      	bne.n	8004de0 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004dde:	e01e      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b12      	cmp	r3, #18
 8004de6:	d11a      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004df4:	e013      	b.n	8004e1e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e08:	e00a      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004e1e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004e28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	376c      	adds	r7, #108	; 0x6c
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	50000100 	.word	0x50000100
 8004e3c:	50000400 	.word	0x50000400
 8004e40:	50000500 	.word	0x50000500
 8004e44:	20000104 	.word	0x20000104
 8004e48:	431bde83 	.word	0x431bde83

08004e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b099      	sub	sp, #100	; 0x64
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e64:	d102      	bne.n	8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004e66:	4b6d      	ldr	r3, [pc, #436]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	e01a      	b.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a6a      	ldr	r2, [pc, #424]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d103      	bne.n	8004e7e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	e011      	b.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a67      	ldr	r2, [pc, #412]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d102      	bne.n	8004e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e88:	4b66      	ldr	r3, [pc, #408]	; (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	e009      	b.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a64      	ldr	r2, [pc, #400]	; (8005024 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d102      	bne.n	8004e9e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e98:	4b61      	ldr	r3, [pc, #388]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	e001      	b.n	8004ea2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0b0      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0a9      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f040 808d 	bne.w	8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f040 8086 	bne.w	8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ee8:	d004      	beq.n	8004ef4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a4b      	ldr	r2, [pc, #300]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ef4:	4b4c      	ldr	r3, [pc, #304]	; (8005028 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004ef6:	e000      	b.n	8004efa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ef8:	4b4c      	ldr	r3, [pc, #304]	; (800502c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004efa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d040      	beq.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f16:	035b      	lsls	r3, r3, #13
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d108      	bne.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d15c      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004f62:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d14b      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f70:	f023 030f 	bic.w	r3, r3, #15
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	6811      	ldr	r1, [r2, #0]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	6892      	ldr	r2, [r2, #8]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f82:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f84:	e03c      	b.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f90:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d108      	bne.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d123      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004fd4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d112      	bne.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fe2:	f023 030f 	bic.w	r3, r3, #15
 8004fe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fe8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fea:	e009      	b.n	8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ffe:	e000      	b.n	8005002 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005000:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800500a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800500e:	4618      	mov	r0, r3
 8005010:	3764      	adds	r7, #100	; 0x64
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	50000100 	.word	0x50000100
 8005020:	50000400 	.word	0x50000400
 8005024:	50000500 	.word	0x50000500
 8005028:	50000300 	.word	0x50000300
 800502c:	50000700 	.word	0x50000700

08005030 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d108      	bne.n	800505c <ADC_Enable+0x2c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <ADC_Enable+0x2c>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <ADC_Enable+0x2e>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d143      	bne.n	80050ea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <ADC_Enable+0xc4>)
 800506a:	4013      	ands	r3, r2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f043 0210 	orr.w	r2, r3, #16
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005080:	f043 0201 	orr.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e02f      	b.n	80050ec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800509c:	f7fe fd8e 	bl	8003bbc <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050a2:	e01b      	b.n	80050dc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050a4:	f7fe fd8a 	bl	8003bbc <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d914      	bls.n	80050dc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d00d      	beq.n	80050dc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	f043 0210 	orr.w	r2, r3, #16
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f043 0201 	orr.w	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e007      	b.n	80050ec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d1dc      	bne.n	80050a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	8000003f 	.word	0x8000003f

080050f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d108      	bne.n	8005124 <ADC_Disable+0x2c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <ADC_Disable+0x2c>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <ADC_Disable+0x2e>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d047      	beq.n	80051ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f003 030d 	and.w	r3, r3, #13
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10f      	bne.n	8005158 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0202 	orr.w	r2, r2, #2
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2203      	movs	r2, #3
 800514e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005150:	f7fe fd34 	bl	8003bbc <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005156:	e029      	b.n	80051ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	f043 0210 	orr.w	r2, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005168:	f043 0201 	orr.w	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e023      	b.n	80051bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005174:	f7fe fd22 	bl	8003bbc <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d914      	bls.n	80051ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10d      	bne.n	80051ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	f043 0210 	orr.w	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e007      	b.n	80051bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d0dc      	beq.n	8005174 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <__NVIC_SetPriorityGrouping+0x44>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051e0:	4013      	ands	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051f6:	4a04      	ldr	r2, [pc, #16]	; (8005208 <__NVIC_SetPriorityGrouping+0x44>)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	60d3      	str	r3, [r2, #12]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <__NVIC_GetPriorityGrouping+0x18>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 0307 	and.w	r3, r3, #7
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000ed00 	.word	0xe000ed00

08005228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	2b00      	cmp	r3, #0
 8005238:	db0b      	blt.n	8005252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	f003 021f 	and.w	r2, r3, #31
 8005240:	4907      	ldr	r1, [pc, #28]	; (8005260 <__NVIC_EnableIRQ+0x38>)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	2001      	movs	r0, #1
 800524a:	fa00 f202 	lsl.w	r2, r0, r2
 800524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000e100 	.word	0xe000e100

08005264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	6039      	str	r1, [r7, #0]
 800526e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db0a      	blt.n	800528e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	490c      	ldr	r1, [pc, #48]	; (80052b0 <__NVIC_SetPriority+0x4c>)
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	0112      	lsls	r2, r2, #4
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	440b      	add	r3, r1
 8005288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800528c:	e00a      	b.n	80052a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4908      	ldr	r1, [pc, #32]	; (80052b4 <__NVIC_SetPriority+0x50>)
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	3b04      	subs	r3, #4
 800529c:	0112      	lsls	r2, r2, #4
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	440b      	add	r3, r1
 80052a2:	761a      	strb	r2, [r3, #24]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	e000e100 	.word	0xe000e100
 80052b4:	e000ed00 	.word	0xe000ed00

080052b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f1c3 0307 	rsb	r3, r3, #7
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	bf28      	it	cs
 80052d6:	2304      	movcs	r3, #4
 80052d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3304      	adds	r3, #4
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d902      	bls.n	80052e8 <NVIC_EncodePriority+0x30>
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3b03      	subs	r3, #3
 80052e6:	e000      	b.n	80052ea <NVIC_EncodePriority+0x32>
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052ec:	f04f 32ff 	mov.w	r2, #4294967295
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43da      	mvns	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	401a      	ands	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005300:	f04f 31ff 	mov.w	r1, #4294967295
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	43d9      	mvns	r1, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005310:	4313      	orrs	r3, r2
         );
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3b01      	subs	r3, #1
 800532c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005330:	d301      	bcc.n	8005336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005332:	2301      	movs	r3, #1
 8005334:	e00f      	b.n	8005356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005336:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <SysTick_Config+0x40>)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3b01      	subs	r3, #1
 800533c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800533e:	210f      	movs	r1, #15
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	f7ff ff8e 	bl	8005264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <SysTick_Config+0x40>)
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800534e:	4b04      	ldr	r3, [pc, #16]	; (8005360 <SysTick_Config+0x40>)
 8005350:	2207      	movs	r2, #7
 8005352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	e000e010 	.word	0xe000e010

08005364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ff29 	bl	80051c4 <__NVIC_SetPriorityGrouping>
}
 8005372:	bf00      	nop
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b086      	sub	sp, #24
 800537e:	af00      	add	r7, sp, #0
 8005380:	4603      	mov	r3, r0
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
 8005386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800538c:	f7ff ff3e 	bl	800520c <__NVIC_GetPriorityGrouping>
 8005390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	6978      	ldr	r0, [r7, #20]
 8005398:	f7ff ff8e 	bl	80052b8 <NVIC_EncodePriority>
 800539c:	4602      	mov	r2, r0
 800539e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff5d 	bl	8005264 <__NVIC_SetPriority>
}
 80053aa:	bf00      	nop
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b082      	sub	sp, #8
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4603      	mov	r3, r0
 80053ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff31 	bl	8005228 <__NVIC_EnableIRQ>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ffa2 	bl	8005320 <SysTick_Config>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d008      	beq.n	800540a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2204      	movs	r2, #4
 80053fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e020      	b.n	800544c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 020e 	bic.w	r2, r2, #14
 8005418:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0201 	bic.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f202 	lsl.w	r2, r1, r2
 8005438:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800546a:	2b02      	cmp	r3, #2
 800546c:	d005      	beq.n	800547a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2204      	movs	r2, #4
 8005472:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
 8005478:	e027      	b.n	80054ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020e 	bic.w	r2, r2, #14
 8005488:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
    } 
  }
  return status;
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054e2:	e154      	b.n	800578e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2101      	movs	r1, #1
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	4013      	ands	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8146 	beq.w	8005788 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b01      	cmp	r3, #1
 8005506:	d005      	beq.n	8005514 <HAL_GPIO_Init+0x40>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d130      	bne.n	8005576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4013      	ands	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800554a:	2201      	movs	r2, #1
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43db      	mvns	r3, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4013      	ands	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 0201 	and.w	r2, r3, #1
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b03      	cmp	r3, #3
 8005580:	d017      	beq.n	80055b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	2203      	movs	r2, #3
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43db      	mvns	r3, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4013      	ands	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d123      	bne.n	8005606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3208      	adds	r2, #8
 80055c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	220f      	movs	r2, #15
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43db      	mvns	r3, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	08da      	lsrs	r2, r3, #3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3208      	adds	r2, #8
 8005600:	6939      	ldr	r1, [r7, #16]
 8005602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4013      	ands	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 0203 	and.w	r2, r3, #3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a0 	beq.w	8005788 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005648:	4b58      	ldr	r3, [pc, #352]	; (80057ac <HAL_GPIO_Init+0x2d8>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	4a57      	ldr	r2, [pc, #348]	; (80057ac <HAL_GPIO_Init+0x2d8>)
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	6193      	str	r3, [r2, #24]
 8005654:	4b55      	ldr	r3, [pc, #340]	; (80057ac <HAL_GPIO_Init+0x2d8>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005660:	4a53      	ldr	r2, [pc, #332]	; (80057b0 <HAL_GPIO_Init+0x2dc>)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	3302      	adds	r3, #2
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	220f      	movs	r2, #15
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43db      	mvns	r3, r3
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4013      	ands	r3, r2
 8005682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800568a:	d019      	beq.n	80056c0 <HAL_GPIO_Init+0x1ec>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a49      	ldr	r2, [pc, #292]	; (80057b4 <HAL_GPIO_Init+0x2e0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_GPIO_Init+0x1e8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a48      	ldr	r2, [pc, #288]	; (80057b8 <HAL_GPIO_Init+0x2e4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00d      	beq.n	80056b8 <HAL_GPIO_Init+0x1e4>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a47      	ldr	r2, [pc, #284]	; (80057bc <HAL_GPIO_Init+0x2e8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <HAL_GPIO_Init+0x1e0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a46      	ldr	r2, [pc, #280]	; (80057c0 <HAL_GPIO_Init+0x2ec>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_GPIO_Init+0x1dc>
 80056ac:	2304      	movs	r3, #4
 80056ae:	e008      	b.n	80056c2 <HAL_GPIO_Init+0x1ee>
 80056b0:	2305      	movs	r3, #5
 80056b2:	e006      	b.n	80056c2 <HAL_GPIO_Init+0x1ee>
 80056b4:	2303      	movs	r3, #3
 80056b6:	e004      	b.n	80056c2 <HAL_GPIO_Init+0x1ee>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e002      	b.n	80056c2 <HAL_GPIO_Init+0x1ee>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_GPIO_Init+0x1ee>
 80056c0:	2300      	movs	r3, #0
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	f002 0203 	and.w	r2, r2, #3
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	4093      	lsls	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056d2:	4937      	ldr	r1, [pc, #220]	; (80057b0 <HAL_GPIO_Init+0x2dc>)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	089b      	lsrs	r3, r3, #2
 80056d8:	3302      	adds	r3, #2
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e0:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005704:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800570a:	4b2e      	ldr	r3, [pc, #184]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800572e:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005734:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800575e:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005782:	4a10      	ldr	r2, [pc, #64]	; (80057c4 <HAL_GPIO_Init+0x2f0>)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3301      	adds	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	f47f aea3 	bne.w	80054e4 <HAL_GPIO_Init+0x10>
  }
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40010000 	.word	0x40010000
 80057b4:	48000400 	.word	0x48000400
 80057b8:	48000800 	.word	0x48000800
 80057bc:	48000c00 	.word	0x48000c00
 80057c0:	48001000 	.word	0x48001000
 80057c4:	40010400 	.word	0x40010400

080057c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
 80057d4:	4613      	mov	r3, r2
 80057d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057d8:	787b      	ldrb	r3, [r7, #1]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057de:	887a      	ldrh	r2, [r7, #2]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057e4:	e002      	b.n	80057ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057e6:	887a      	ldrh	r2, [r7, #2]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800580a:	887a      	ldrh	r2, [r7, #2]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4013      	ands	r3, r2
 8005810:	041a      	lsls	r2, r3, #16
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	43d9      	mvns	r1, r3
 8005816:	887b      	ldrh	r3, [r7, #2]
 8005818:	400b      	ands	r3, r1
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	619a      	str	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005836:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fc fe06 	bl	800245c <HAL_GPIO_EXTI_Callback>
  }
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40010400 	.word	0x40010400

0800585c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e081      	b.n	8005972 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fd fd46 	bl	8003314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	; 0x24
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	e006      	b.n	80058e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d104      	bne.n	80058f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b20      	cmp	r3, #32
 800598e:	d138      	bne.n	8005a02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800599a:	2302      	movs	r3, #2
 800599c:	e032      	b.n	8005a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2224      	movs	r2, #36	; 0x24
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	e000      	b.n	8005a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
  }
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d139      	bne.n	8005a9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e033      	b.n	8005a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	; 0x24
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0201 	bic.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a9a:	2302      	movs	r3, #2
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aaa:	b08b      	sub	sp, #44	; 0x2c
 8005aac:	af06      	add	r7, sp, #24
 8005aae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0c4      	b.n	8005c44 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d106      	bne.n	8005ad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fd fe62 	bl	8003798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f004 fcef 	bl	800a4c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
 8005aea:	e040      	b.n	8005b6e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	440b      	add	r3, r1
 8005afc:	3301      	adds	r3, #1
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	440b      	add	r3, r1
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	3303      	adds	r3, #3
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b2c:	7bfa      	ldrb	r2, [r7, #15]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	440b      	add	r3, r1
 8005b3a:	3338      	adds	r3, #56	; 0x38
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	333c      	adds	r3, #60	; 0x3c
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	3340      	adds	r3, #64	; 0x40
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
 8005b6e:	7bfa      	ldrb	r2, [r7, #15]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3b9      	bcc.n	8005aec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e044      	b.n	8005c08 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	440b      	add	r3, r1
 8005bce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	440b      	add	r3, r1
 8005be4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	3301      	adds	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	7bfa      	ldrb	r2, [r7, #15]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3b5      	bcc.n	8005b7e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	687e      	ldr	r6, [r7, #4]
 8005c1a:	466d      	mov	r5, sp
 8005c1c:	f106 0410 	add.w	r4, r6, #16
 8005c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	1d33      	adds	r3, r6, #4
 8005c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f004 fc64 	bl	800a4fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f001 b823 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 817d 	beq.w	8005f82 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005c88:	4bbc      	ldr	r3, [pc, #752]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d00c      	beq.n	8005cae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c94:	4bb9      	ldr	r3, [pc, #740]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 030c 	and.w	r3, r3, #12
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d15c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x10e>
 8005ca0:	4bb6      	ldr	r3, [pc, #728]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d155      	bne.n	8005d5a <HAL_RCC_OscConfig+0x10e>
 8005cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cb2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005cba:	fa93 f3a3 	rbit	r3, r3
 8005cbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8005cc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc6:	fab3 f383 	clz	r3, r3
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x94>
 8005cda:	4ba8      	ldr	r3, [pc, #672]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	e015      	b.n	8005d0c <HAL_RCC_OscConfig+0xc0>
 8005ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ce4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005cfc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005d00:	fa93 f3a3 	rbit	r3, r3
 8005d04:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005d08:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005d14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005d18:	fa92 f2a2 	rbit	r2, r2
 8005d1c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005d20:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005d24:	fab2 f282 	clz	r2, r2
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	f042 0220 	orr.w	r2, r2, #32
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	f002 021f 	and.w	r2, r2, #31
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 811f 	beq.w	8005f80 <HAL_RCC_OscConfig+0x334>
 8005d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 8116 	bne.w	8005f80 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f000 bfaf 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12e>
 8005d6c:	4b83      	ldr	r3, [pc, #524]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a82      	ldr	r2, [pc, #520]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e036      	b.n	8005de8 <HAL_RCC_OscConfig+0x19c>
 8005d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x158>
 8005d8a:	4b7c      	ldr	r3, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a7b      	ldr	r2, [pc, #492]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	4b79      	ldr	r3, [pc, #484]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a78      	ldr	r2, [pc, #480]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e021      	b.n	8005de8 <HAL_RCC_OscConfig+0x19c>
 8005da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x184>
 8005db6:	4b71      	ldr	r3, [pc, #452]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a70      	ldr	r2, [pc, #448]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b6e      	ldr	r3, [pc, #440]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6d      	ldr	r2, [pc, #436]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00b      	b.n	8005de8 <HAL_RCC_OscConfig+0x19c>
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a69      	ldr	r2, [pc, #420]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b67      	ldr	r3, [pc, #412]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a66      	ldr	r2, [pc, #408]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005de8:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	f023 020f 	bic.w	r2, r3, #15
 8005df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	495f      	ldr	r1, [pc, #380]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d059      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e12:	f7fd fed3 	bl	8003bbc <HAL_GetTick>
 8005e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	e00a      	b.n	8005e32 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e1c:	f7fd fece 	bl	8003bbc <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d902      	bls.n	8005e32 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	f000 bf43 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8005e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e36:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005e46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	fab3 f383 	clz	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_RCC_OscConfig+0x218>
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	e015      	b.n	8005e90 <HAL_RCC_OscConfig+0x244>
 8005e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e68:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005e70:	fa93 f3a3 	rbit	r3, r3
 8005e74:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e7c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005e80:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005e84:	fa93 f3a3 	rbit	r3, r3
 8005e88:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005e8c:	4b3b      	ldr	r3, [pc, #236]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e94:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005e98:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005e9c:	fa92 f2a2 	rbit	r2, r2
 8005ea0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005ea4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005ea8:	fab2 f282 	clz	r2, r2
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	f042 0220 	orr.w	r2, r2, #32
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	f002 021f 	and.w	r2, r2, #31
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f202 	lsl.w	r2, r1, r2
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ab      	beq.n	8005e1c <HAL_RCC_OscConfig+0x1d0>
 8005ec4:	e05d      	b.n	8005f82 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fd fe79 	bl	8003bbc <HAL_GetTick>
 8005eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fe74 	bl	8003bbc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b64      	cmp	r3, #100	; 0x64
 8005ede:	d902      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	f000 bee9 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8005ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005eea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005ef2:	fa93 f3a3 	rbit	r3, r3
 8005ef6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8005efa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_RCC_OscConfig+0x2cc>
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e015      	b.n	8005f44 <HAL_RCC_OscConfig+0x2f8>
 8005f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f1c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005f24:	fa93 f3a3 	rbit	r3, r3
 8005f28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f30:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005f34:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005f38:	fa93 f3a3 	rbit	r3, r3
 8005f3c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005f40:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <HAL_RCC_OscConfig+0x330>)
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f48:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005f4c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005f50:	fa92 f2a2 	rbit	r2, r2
 8005f54:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005f58:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005f5c:	fab2 f282 	clz	r2, r2
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	f042 0220 	orr.w	r2, r2, #32
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	f002 021f 	and.w	r2, r2, #31
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1ab      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x284>
 8005f78:	e003      	b.n	8005f82 <HAL_RCC_OscConfig+0x336>
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 817d 	beq.w	8006292 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005f98:	4ba6      	ldr	r3, [pc, #664]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fa4:	4ba3      	ldr	r3, [pc, #652]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d172      	bne.n	8006096 <HAL_RCC_OscConfig+0x44a>
 8005fb0:	4ba0      	ldr	r3, [pc, #640]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d16c      	bne.n	8006096 <HAL_RCC_OscConfig+0x44a>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8005fc6:	fa93 f3a3 	rbit	r3, r3
 8005fca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005fce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd2:	fab3 f383 	clz	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d102      	bne.n	8005fec <HAL_RCC_OscConfig+0x3a0>
 8005fe6:	4b93      	ldr	r3, [pc, #588]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	e013      	b.n	8006014 <HAL_RCC_OscConfig+0x3c8>
 8005fec:	2302      	movs	r3, #2
 8005fee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005ff6:	fa93 f3a3 	rbit	r3, r3
 8005ffa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005ffe:	2302      	movs	r3, #2
 8006000:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006004:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006010:	4b88      	ldr	r3, [pc, #544]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	2202      	movs	r2, #2
 8006016:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800601a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800601e:	fa92 f2a2 	rbit	r2, r2
 8006022:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006026:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800602a:	fab2 f282 	clz	r2, r2
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f042 0220 	orr.w	r2, r2, #32
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	f002 021f 	and.w	r2, r2, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f202 	lsl.w	r2, r1, r2
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <HAL_RCC_OscConfig+0x410>
 8006046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d002      	beq.n	800605c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f000 be2e 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605c:	4b75      	ldr	r3, [pc, #468]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	21f8      	movs	r1, #248	; 0xf8
 8006072:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800607a:	fa91 f1a1 	rbit	r1, r1
 800607e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006082:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006086:	fab1 f181 	clz	r1, r1
 800608a:	b2c9      	uxtb	r1, r1
 800608c:	408b      	lsls	r3, r1
 800608e:	4969      	ldr	r1, [pc, #420]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8006090:	4313      	orrs	r3, r2
 8006092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006094:	e0fd      	b.n	8006292 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800609a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8088 	beq.w	80061b8 <HAL_RCC_OscConfig+0x56c>
 80060a8:	2301      	movs	r3, #1
 80060aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80060ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060be:	fab3 f383 	clz	r3, r3
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	461a      	mov	r2, r3
 80060d0:	2301      	movs	r3, #1
 80060d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fd fd72 	bl	8003bbc <HAL_GetTick>
 80060d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060de:	f7fd fd6d 	bl	8003bbc <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d902      	bls.n	80060f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	f000 bde2 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 80060f4:	2302      	movs	r3, #2
 80060f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80060fe:	fa93 f3a3 	rbit	r3, r3
 8006102:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006106:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d102      	bne.n	8006124 <HAL_RCC_OscConfig+0x4d8>
 800611e:	4b45      	ldr	r3, [pc, #276]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	e013      	b.n	800614c <HAL_RCC_OscConfig+0x500>
 8006124:	2302      	movs	r3, #2
 8006126:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800612e:	fa93 f3a3 	rbit	r3, r3
 8006132:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006136:	2302      	movs	r3, #2
 8006138:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800613c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006140:	fa93 f3a3 	rbit	r3, r3
 8006144:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006148:	4b3a      	ldr	r3, [pc, #232]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	2202      	movs	r2, #2
 800614e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006152:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006156:	fa92 f2a2 	rbit	r2, r2
 800615a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800615e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006162:	fab2 f282 	clz	r2, r2
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	f042 0220 	orr.w	r2, r2, #32
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	f002 021f 	and.w	r2, r2, #31
 8006172:	2101      	movs	r1, #1
 8006174:	fa01 f202 	lsl.w	r2, r1, r2
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0af      	beq.n	80060de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617e:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	21f8      	movs	r1, #248	; 0xf8
 8006194:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006198:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800619c:	fa91 f1a1 	rbit	r1, r1
 80061a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80061a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80061a8:	fab1 f181 	clz	r1, r1
 80061ac:	b2c9      	uxtb	r1, r1
 80061ae:	408b      	lsls	r3, r1
 80061b0:	4920      	ldr	r1, [pc, #128]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]
 80061b6:	e06c      	b.n	8006292 <HAL_RCC_OscConfig+0x646>
 80061b8:	2301      	movs	r3, #1
 80061ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80061ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ce:	fab3 f383 	clz	r3, r3
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	461a      	mov	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fd fcea 	bl	8003bbc <HAL_GetTick>
 80061e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ec:	e00a      	b.n	8006204 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ee:	f7fd fce5 	bl	8003bbc <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d902      	bls.n	8006204 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	f000 bd5a 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8006204:	2302      	movs	r3, #2
 8006206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800620e:	fa93 f3a3 	rbit	r3, r3
 8006212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800621a:	fab3 f383 	clz	r3, r3
 800621e:	b2db      	uxtb	r3, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b01      	cmp	r3, #1
 800622c:	d104      	bne.n	8006238 <HAL_RCC_OscConfig+0x5ec>
 800622e:	4b01      	ldr	r3, [pc, #4]	; (8006234 <HAL_RCC_OscConfig+0x5e8>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	e015      	b.n	8006260 <HAL_RCC_OscConfig+0x614>
 8006234:	40021000 	.word	0x40021000
 8006238:	2302      	movs	r3, #2
 800623a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800623e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800624a:	2302      	movs	r3, #2
 800624c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006250:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006254:	fa93 f3a3 	rbit	r3, r3
 8006258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800625c:	4bc8      	ldr	r3, [pc, #800]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	2202      	movs	r2, #2
 8006262:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006266:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800626a:	fa92 f2a2 	rbit	r2, r2
 800626e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006272:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006276:	fab2 f282 	clz	r2, r2
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	f042 0220 	orr.w	r2, r2, #32
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	f002 021f 	and.w	r2, r2, #31
 8006286:	2101      	movs	r1, #1
 8006288:	fa01 f202 	lsl.w	r2, r1, r2
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1ad      	bne.n	80061ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8110 	beq.w	80064c8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d079      	beq.n	80063ac <HAL_RCC_OscConfig+0x760>
 80062b8:	2301      	movs	r3, #1
 80062ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062c2:	fa93 f3a3 	rbit	r3, r3
 80062c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80062ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	fab3 f383 	clz	r3, r3
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	4bab      	ldr	r3, [pc, #684]	; (8006584 <HAL_RCC_OscConfig+0x938>)
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	461a      	mov	r2, r3
 80062de:	2301      	movs	r3, #1
 80062e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e2:	f7fd fc6b 	bl	8003bbc <HAL_GetTick>
 80062e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ea:	e00a      	b.n	8006302 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ec:	f7fd fc66 	bl	8003bbc <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d902      	bls.n	8006302 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	f000 bcdb 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8006302:	2302      	movs	r3, #2
 8006304:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800630c:	fa93 f3a3 	rbit	r3, r3
 8006310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006318:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800631c:	2202      	movs	r2, #2
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006324:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	fa93 f2a3 	rbit	r2, r3
 800632e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006340:	2202      	movs	r2, #2
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	fa93 f2a3 	rbit	r2, r3
 8006352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800635a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800635c:	4b88      	ldr	r3, [pc, #544]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 800635e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006368:	2102      	movs	r1, #2
 800636a:	6019      	str	r1, [r3, #0]
 800636c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006370:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	fa93 f1a3 	rbit	r1, r3
 800637a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006382:	6019      	str	r1, [r3, #0]
  return result;
 8006384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006388:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2101      	movs	r1, #1
 80063a0:	fa01 f303 	lsl.w	r3, r1, r3
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0a0      	beq.n	80062ec <HAL_RCC_OscConfig+0x6a0>
 80063aa:	e08d      	b.n	80064c8 <HAL_RCC_OscConfig+0x87c>
 80063ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063b4:	2201      	movs	r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	fa93 f2a3 	rbit	r2, r3
 80063c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063ce:	601a      	str	r2, [r3, #0]
  return result;
 80063d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063da:	fab3 f383 	clz	r3, r3
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b68      	ldr	r3, [pc, #416]	; (8006584 <HAL_RCC_OscConfig+0x938>)
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	461a      	mov	r2, r3
 80063ea:	2300      	movs	r3, #0
 80063ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ee:	f7fd fbe5 	bl	8003bbc <HAL_GetTick>
 80063f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f6:	e00a      	b.n	800640e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f8:	f7fd fbe0 	bl	8003bbc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d902      	bls.n	800640e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	f000 bc55 	b.w	8006cb8 <HAL_RCC_OscConfig+0x106c>
 800640e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006412:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006416:	2202      	movs	r2, #2
 8006418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	fa93 f2a3 	rbit	r2, r3
 8006428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800642c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800643a:	2202      	movs	r2, #2
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	fa93 f2a3 	rbit	r2, r3
 800644c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800645a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645e:	2202      	movs	r2, #2
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	fa93 f2a3 	rbit	r2, r3
 8006470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006474:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006478:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800647a:	4b41      	ldr	r3, [pc, #260]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 800647c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800647e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006482:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006486:	2102      	movs	r1, #2
 8006488:	6019      	str	r1, [r3, #0]
 800648a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800648e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	fa93 f1a3 	rbit	r1, r3
 8006498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800649c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80064a0:	6019      	str	r1, [r3, #0]
  return result;
 80064a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2101      	movs	r1, #1
 80064be:	fa01 f303 	lsl.w	r3, r1, r3
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d197      	bne.n	80063f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 81a1 	beq.w	8006820 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064de:	2300      	movs	r3, #0
 80064e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064e4:	4b26      	ldr	r3, [pc, #152]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d116      	bne.n	800651e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f0:	4b23      	ldr	r3, [pc, #140]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	4a22      	ldr	r2, [pc, #136]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 80064f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fa:	61d3      	str	r3, [r2, #28]
 80064fc:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006508:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006512:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006516:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <HAL_RCC_OscConfig+0x93c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d11a      	bne.n	8006560 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652a:	4b17      	ldr	r3, [pc, #92]	; (8006588 <HAL_RCC_OscConfig+0x93c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a16      	ldr	r2, [pc, #88]	; (8006588 <HAL_RCC_OscConfig+0x93c>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006536:	f7fd fb41 	bl	8003bbc <HAL_GetTick>
 800653a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653e:	e009      	b.n	8006554 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006540:	f7fd fb3c 	bl	8003bbc <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b64      	cmp	r3, #100	; 0x64
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e3b1      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_RCC_OscConfig+0x93c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0ef      	beq.n	8006540 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006564:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d10d      	bne.n	800658c <HAL_RCC_OscConfig+0x940>
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	4a02      	ldr	r2, [pc, #8]	; (8006580 <HAL_RCC_OscConfig+0x934>)
 8006576:	f043 0301 	orr.w	r3, r3, #1
 800657a:	6213      	str	r3, [r2, #32]
 800657c:	e03c      	b.n	80065f8 <HAL_RCC_OscConfig+0x9ac>
 800657e:	bf00      	nop
 8006580:	40021000 	.word	0x40021000
 8006584:	10908120 	.word	0x10908120
 8006588:	40007000 	.word	0x40007000
 800658c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10c      	bne.n	80065b6 <HAL_RCC_OscConfig+0x96a>
 800659c:	4bc1      	ldr	r3, [pc, #772]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	4ac0      	ldr	r2, [pc, #768]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065a2:	f023 0301 	bic.w	r3, r3, #1
 80065a6:	6213      	str	r3, [r2, #32]
 80065a8:	4bbe      	ldr	r3, [pc, #760]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	4abd      	ldr	r2, [pc, #756]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065ae:	f023 0304 	bic.w	r3, r3, #4
 80065b2:	6213      	str	r3, [r2, #32]
 80065b4:	e020      	b.n	80065f8 <HAL_RCC_OscConfig+0x9ac>
 80065b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x994>
 80065c6:	4bb7      	ldr	r3, [pc, #732]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	4ab6      	ldr	r2, [pc, #728]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065cc:	f043 0304 	orr.w	r3, r3, #4
 80065d0:	6213      	str	r3, [r2, #32]
 80065d2:	4bb4      	ldr	r3, [pc, #720]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	4ab3      	ldr	r2, [pc, #716]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065d8:	f043 0301 	orr.w	r3, r3, #1
 80065dc:	6213      	str	r3, [r2, #32]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0x9ac>
 80065e0:	4bb0      	ldr	r3, [pc, #704]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	4aaf      	ldr	r2, [pc, #700]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	6213      	str	r3, [r2, #32]
 80065ec:	4bad      	ldr	r3, [pc, #692]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	4aac      	ldr	r2, [pc, #688]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80065f2:	f023 0304 	bic.w	r3, r3, #4
 80065f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8081 	beq.w	800670c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660a:	f7fd fad7 	bl	8003bbc <HAL_GetTick>
 800660e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006612:	e00b      	b.n	800662c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006614:	f7fd fad2 	bl	8003bbc <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	f241 3288 	movw	r2, #5000	; 0x1388
 8006624:	4293      	cmp	r3, r2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e345      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
 800662c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006630:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006634:	2202      	movs	r2, #2
 8006636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	fa93 f2a3 	rbit	r2, r3
 8006646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800664a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006654:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006658:	2202      	movs	r2, #2
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006660:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	fa93 f2a3 	rbit	r2, r3
 800666a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006672:	601a      	str	r2, [r3, #0]
  return result;
 8006674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006678:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800667c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	fab3 f383 	clz	r3, r3
 8006682:	b2db      	uxtb	r3, r3
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d102      	bne.n	8006698 <HAL_RCC_OscConfig+0xa4c>
 8006692:	4b84      	ldr	r3, [pc, #528]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	e013      	b.n	80066c0 <HAL_RCC_OscConfig+0xa74>
 8006698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80066a0:	2202      	movs	r2, #2
 80066a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066a8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	fa93 f2a3 	rbit	r2, r3
 80066b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	4b79      	ldr	r3, [pc, #484]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80066c8:	2102      	movs	r1, #2
 80066ca:	6011      	str	r1, [r2, #0]
 80066cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066d0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	fa92 f1a2 	rbit	r1, r2
 80066da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80066e2:	6011      	str	r1, [r2, #0]
  return result;
 80066e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80066e8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	fab2 f282 	clz	r2, r2
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	f002 021f 	and.w	r2, r2, #31
 80066fe:	2101      	movs	r1, #1
 8006700:	fa01 f202 	lsl.w	r2, r1, r2
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d084      	beq.n	8006614 <HAL_RCC_OscConfig+0x9c8>
 800670a:	e07f      	b.n	800680c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800670c:	f7fd fa56 	bl	8003bbc <HAL_GetTick>
 8006710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006714:	e00b      	b.n	800672e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006716:	f7fd fa51 	bl	8003bbc <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e2c4      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
 800672e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006732:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006736:	2202      	movs	r2, #2
 8006738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800673a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800673e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	fa93 f2a3 	rbit	r2, r3
 8006748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800674c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006756:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800675a:	2202      	movs	r2, #2
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006762:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	fa93 f2a3 	rbit	r2, r3
 800676c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006770:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006774:	601a      	str	r2, [r3, #0]
  return result;
 8006776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800677a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800677e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f043 0302 	orr.w	r3, r3, #2
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d102      	bne.n	800679a <HAL_RCC_OscConfig+0xb4e>
 8006794:	4b43      	ldr	r3, [pc, #268]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	e013      	b.n	80067c2 <HAL_RCC_OscConfig+0xb76>
 800679a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800679e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80067a2:	2202      	movs	r2, #2
 80067a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067aa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	fa93 f2a3 	rbit	r2, r3
 80067b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	4b39      	ldr	r3, [pc, #228]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067c6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80067ca:	2102      	movs	r1, #2
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067d2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	fa92 f1a2 	rbit	r1, r2
 80067dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067e0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80067e4:	6011      	str	r1, [r2, #0]
  return result;
 80067e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80067ea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	fab2 f282 	clz	r2, r2
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	f002 021f 	and.w	r2, r2, #31
 8006800:	2101      	movs	r1, #1
 8006802:	fa01 f202 	lsl.w	r2, r1, r2
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d184      	bne.n	8006716 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800680c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006814:	4b23      	ldr	r3, [pc, #140]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 800681a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800681e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 8242 	beq.w	8006cb6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <HAL_RCC_OscConfig+0xc58>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	2b08      	cmp	r3, #8
 800683c:	f000 8213 	beq.w	8006c66 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	2b02      	cmp	r3, #2
 800684e:	f040 8162 	bne.w	8006b16 <HAL_RCC_OscConfig+0xeca>
 8006852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006856:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800685a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800685e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006864:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	fa93 f2a3 	rbit	r2, r3
 800686e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006872:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006876:	601a      	str	r2, [r3, #0]
  return result;
 8006878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800687c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	fab3 f383 	clz	r3, r3
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800688c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	461a      	mov	r2, r3
 8006894:	2300      	movs	r3, #0
 8006896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006898:	f7fd f990 	bl	8003bbc <HAL_GetTick>
 800689c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a0:	e00c      	b.n	80068bc <HAL_RCC_OscConfig+0xc70>
 80068a2:	bf00      	nop
 80068a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068a8:	f7fd f988 	bl	8003bbc <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1fd      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
 80068bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80068c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fa93 f2a3 	rbit	r2, r3
 80068d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80068e0:	601a      	str	r2, [r3, #0]
  return result;
 80068e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80068ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ec:	fab3 f383 	clz	r3, r3
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d102      	bne.n	8006906 <HAL_RCC_OscConfig+0xcba>
 8006900:	4bb0      	ldr	r3, [pc, #704]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	e027      	b.n	8006956 <HAL_RCC_OscConfig+0xd0a>
 8006906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800690a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800690e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006918:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	fa93 f2a3 	rbit	r2, r3
 8006922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006926:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006930:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800693e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	fa93 f2a3 	rbit	r2, r3
 8006948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800694c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	4b9c      	ldr	r3, [pc, #624]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800695a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800695e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006962:	6011      	str	r1, [r2, #0]
 8006964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006968:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	fa92 f1a2 	rbit	r1, r2
 8006972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006976:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800697a:	6011      	str	r1, [r2, #0]
  return result;
 800697c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006980:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	fab2 f282 	clz	r2, r2
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	f042 0220 	orr.w	r2, r2, #32
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	f002 021f 	and.w	r2, r2, #31
 8006996:	2101      	movs	r1, #1
 8006998:	fa01 f202 	lsl.w	r2, r1, r2
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d182      	bne.n	80068a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a2:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80069aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	430b      	orrs	r3, r1
 80069c4:	497f      	ldr	r1, [pc, #508]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
 80069ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80069d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	fa93 f2a3 	rbit	r2, r3
 80069e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80069ee:	601a      	str	r2, [r3, #0]
  return result;
 80069f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80069f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069fa:	fab3 f383 	clz	r3, r3
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a10:	f7fd f8d4 	bl	8003bbc <HAL_GetTick>
 8006a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a18:	e009      	b.n	8006a2e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a1a:	f7fd f8cf 	bl	8003bbc <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e144      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8006a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a32:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a40:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	fa93 f2a3 	rbit	r2, r3
 8006a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a4e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a52:	601a      	str	r2, [r3, #0]
  return result;
 8006a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006a5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a5e:	fab3 f383 	clz	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d102      	bne.n	8006a78 <HAL_RCC_OscConfig+0xe2c>
 8006a72:	4b54      	ldr	r3, [pc, #336]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	e027      	b.n	8006ac8 <HAL_RCC_OscConfig+0xe7c>
 8006a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a7c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a8a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	fa93 f2a3 	rbit	r2, r3
 8006a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a98:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ab0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	fa93 f2a3 	rbit	r2, r3
 8006aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006abe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	4b3f      	ldr	r3, [pc, #252]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006acc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006ad0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ad4:	6011      	str	r1, [r2, #0]
 8006ad6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ada:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	fa92 f1a2 	rbit	r1, r2
 8006ae4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006ae8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006aec:	6011      	str	r1, [r2, #0]
  return result;
 8006aee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006af2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	fab2 f282 	clz	r2, r2
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	f042 0220 	orr.w	r2, r2, #32
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	f002 021f 	and.w	r2, r2, #31
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0e:	4013      	ands	r3, r2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d082      	beq.n	8006a1a <HAL_RCC_OscConfig+0xdce>
 8006b14:	e0cf      	b.n	8006cb6 <HAL_RCC_OscConfig+0x106a>
 8006b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b1a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006b1e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b28:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	fa93 f2a3 	rbit	r2, r3
 8006b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b3a:	601a      	str	r2, [r3, #0]
  return result;
 8006b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b40:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006b44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b46:	fab3 f383 	clz	r3, r3
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	461a      	mov	r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7fd f82e 	bl	8003bbc <HAL_GetTick>
 8006b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b64:	e009      	b.n	8006b7a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fd f829 	bl	8003bbc <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e09e      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
 8006b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b7e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006b82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	fa93 f2a3 	rbit	r2, r3
 8006b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006b9e:	601a      	str	r2, [r3, #0]
  return result;
 8006ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ba4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006baa:	fab3 f383 	clz	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d104      	bne.n	8006bc8 <HAL_RCC_OscConfig+0xf7c>
 8006bbe:	4b01      	ldr	r3, [pc, #4]	; (8006bc4 <HAL_RCC_OscConfig+0xf78>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	e029      	b.n	8006c18 <HAL_RCC_OscConfig+0xfcc>
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bcc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bda:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	fa93 f2a3 	rbit	r2, r3
 8006be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bf2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c00:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	fa93 f2a3 	rbit	r2, r3
 8006c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <HAL_RCC_OscConfig+0x1078>)
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c1c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c2a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	fa92 f1a2 	rbit	r1, r2
 8006c34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c38:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c3c:	6011      	str	r1, [r2, #0]
  return result;
 8006c3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c42:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	fab2 f282 	clz	r2, r2
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	f042 0220 	orr.w	r2, r2, #32
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	f002 021f 	and.w	r2, r2, #31
 8006c58:	2101      	movs	r1, #1
 8006c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d180      	bne.n	8006b66 <HAL_RCC_OscConfig+0xf1a>
 8006c64:	e027      	b.n	8006cb6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e01e      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <HAL_RCC_OscConfig+0x1078>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006c82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006c86:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006c9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006c9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d001      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40021000 	.word	0x40021000

08006cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b09e      	sub	sp, #120	; 0x78
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e162      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce0:	4b90      	ldr	r3, [pc, #576]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d910      	bls.n	8006d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cee:	4b8d      	ldr	r3, [pc, #564]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f023 0207 	bic.w	r2, r3, #7
 8006cf6:	498b      	ldr	r1, [pc, #556]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfe:	4b89      	ldr	r3, [pc, #548]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d001      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e14a      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d1c:	4b82      	ldr	r3, [pc, #520]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	497f      	ldr	r1, [pc, #508]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80dc 	beq.w	8006ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d13c      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xf6>
 8006d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d4c:	fa93 f3a3 	rbit	r3, r3
 8006d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d54:	fab3 f383 	clz	r3, r3
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d102      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xa6>
 8006d68:	4b6f      	ldr	r3, [pc, #444]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	e00f      	b.n	8006d8e <HAL_RCC_ClockConfig+0xc6>
 8006d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d80:	663b      	str	r3, [r7, #96]	; 0x60
 8006d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d84:	fa93 f3a3 	rbit	r3, r3
 8006d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d8a:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d96:	fa92 f2a2 	rbit	r2, r2
 8006d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d9e:	fab2 f282 	clz	r2, r2
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	f042 0220 	orr.w	r2, r2, #32
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	f002 021f 	and.w	r2, r2, #31
 8006dae:	2101      	movs	r1, #1
 8006db0:	fa01 f202 	lsl.w	r2, r1, r2
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d17b      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e0f3      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d13c      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x178>
 8006dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd6:	fab3 f383 	clz	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d102      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x128>
 8006dea:	4b4f      	ldr	r3, [pc, #316]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	e00f      	b.n	8006e10 <HAL_RCC_ClockConfig+0x148>
 8006df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df8:	fa93 f3a3 	rbit	r3, r3
 8006dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e02:	643b      	str	r3, [r7, #64]	; 0x40
 8006e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e06:	fa93 f3a3 	rbit	r3, r3
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	4b46      	ldr	r3, [pc, #280]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e18:	fa92 f2a2 	rbit	r2, r2
 8006e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e20:	fab2 f282 	clz	r2, r2
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	f042 0220 	orr.w	r2, r2, #32
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	f002 021f 	and.w	r2, r2, #31
 8006e30:	2101      	movs	r1, #1
 8006e32:	fa01 f202 	lsl.w	r2, r1, r2
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d13a      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0b2      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
 8006e40:	2302      	movs	r3, #2
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	fa93 f3a3 	rbit	r3, r3
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e4e:	fab3 f383 	clz	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d102      	bne.n	8006e68 <HAL_RCC_ClockConfig+0x1a0>
 8006e62:	4b31      	ldr	r3, [pc, #196]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	e00d      	b.n	8006e84 <HAL_RCC_ClockConfig+0x1bc>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	fa93 f3a3 	rbit	r3, r3
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	2302      	movs	r3, #2
 8006e76:	623b      	str	r3, [r7, #32]
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	fa93 f3a3 	rbit	r3, r3
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2202      	movs	r2, #2
 8006e86:	61ba      	str	r2, [r7, #24]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	fa92 f2a2 	rbit	r2, r2
 8006e8e:	617a      	str	r2, [r7, #20]
  return result;
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	fab2 f282 	clz	r2, r2
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	f042 0220 	orr.w	r2, r2, #32
 8006e9c:	b2d2      	uxtb	r2, r2
 8006e9e:	f002 021f 	and.w	r2, r2, #31
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e079      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eb2:	4b1d      	ldr	r3, [pc, #116]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f023 0203 	bic.w	r2, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	491a      	ldr	r1, [pc, #104]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ec4:	f7fc fe7a 	bl	8003bbc <HAL_GetTick>
 8006ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ecc:	f7fc fe76 	bl	8003bbc <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e061      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee2:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <HAL_RCC_ClockConfig+0x260>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f003 020c 	and.w	r2, r3, #12
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d1eb      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d214      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 0207 	bic.w	r2, r3, #7
 8006f0a:	4906      	ldr	r1, [pc, #24]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f12:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <HAL_RCC_ClockConfig+0x25c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d005      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e040      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x2de>
 8006f24:	40022000 	.word	0x40022000
 8006f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f38:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	491a      	ldr	r1, [pc, #104]	; (8006fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f56:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4912      	ldr	r1, [pc, #72]	; (8006fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006f6a:	f000 f829 	bl	8006fc0 <HAL_RCC_GetSysClockFreq>
 8006f6e:	4601      	mov	r1, r0
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f78:	22f0      	movs	r2, #240	; 0xf0
 8006f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	fa92 f2a2 	rbit	r2, r2
 8006f82:	60fa      	str	r2, [r7, #12]
  return result;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	fab2 f282 	clz	r2, r2
 8006f8a:	b2d2      	uxtb	r2, r2
 8006f8c:	40d3      	lsrs	r3, r2
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8006f90:	5cd3      	ldrb	r3, [r2, r3]
 8006f92:	fa21 f303 	lsr.w	r3, r1, r3
 8006f96:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8006f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <HAL_RCC_ClockConfig+0x2f4>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fc fdc8 	bl	8003b34 <HAL_InitTick>
  
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3778      	adds	r7, #120	; 0x78
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	08011398 	.word	0x08011398
 8006fb8:	20000104 	.word	0x20000104
 8006fbc:	20000108 	.word	0x20000108

08006fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b08b      	sub	sp, #44	; 0x2c
 8006fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f003 030c 	and.w	r3, r3, #12
 8006fe6:	2b04      	cmp	r3, #4
 8006fe8:	d002      	beq.n	8006ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8006fee:	e03c      	b.n	800706a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ff0:	4b24      	ldr	r3, [pc, #144]	; (8007084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006ff2:	623b      	str	r3, [r7, #32]
      break;
 8006ff4:	e03c      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	fa92 f2a2 	rbit	r2, r2
 8007008:	607a      	str	r2, [r7, #4]
  return result;
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	fab2 f282 	clz	r2, r2
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	40d3      	lsrs	r3, r2
 8007014:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007016:	5cd3      	ldrb	r3, [r2, r3]
 8007018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800701a:	4b19      	ldr	r3, [pc, #100]	; (8007080 <HAL_RCC_GetSysClockFreq+0xc0>)
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	220f      	movs	r2, #15
 8007024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	fa92 f2a2 	rbit	r2, r2
 800702c:	60fa      	str	r2, [r7, #12]
  return result;
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	fab2 f282 	clz	r2, r2
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	40d3      	lsrs	r3, r2
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <HAL_RCC_GetSysClockFreq+0xcc>)
 800703a:	5cd3      	ldrb	r3, [r2, r3]
 800703c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d008      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007048:	4a0e      	ldr	r2, [pc, #56]	; (8007084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	627b      	str	r3, [r7, #36]	; 0x24
 8007058:	e004      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	4a0c      	ldr	r2, [pc, #48]	; (8007090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	623b      	str	r3, [r7, #32]
      break;
 8007068:	e002      	b.n	8007070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800706c:	623b      	str	r3, [r7, #32]
      break;
 800706e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007070:	6a3b      	ldr	r3, [r7, #32]
}
 8007072:	4618      	mov	r0, r3
 8007074:	372c      	adds	r7, #44	; 0x2c
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40021000 	.word	0x40021000
 8007084:	007a1200 	.word	0x007a1200
 8007088:	080113b0 	.word	0x080113b0
 800708c:	080113c0 	.word	0x080113c0
 8007090:	003d0900 	.word	0x003d0900

08007094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800709a:	681b      	ldr	r3, [r3, #0]
}
 800709c:	4618      	mov	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000104 	.word	0x20000104

080070ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80070b2:	f7ff ffef 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 80070b6:	4601      	mov	r1, r0
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80070c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	fa92 f2a2 	rbit	r2, r2
 80070cc:	603a      	str	r2, [r7, #0]
  return result;
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	fab2 f282 	clz	r2, r2
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	40d3      	lsrs	r3, r2
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80070da:	5cd3      	ldrb	r3, [r2, r3]
 80070dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40021000 	.word	0x40021000
 80070ec:	080113a8 	.word	0x080113a8

080070f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80070f6:	f7ff ffcd 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 80070fa:	4601      	mov	r1, r0
 80070fc:	4b0b      	ldr	r3, [pc, #44]	; (800712c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007104:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007108:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	fa92 f2a2 	rbit	r2, r2
 8007110:	603a      	str	r2, [r7, #0]
  return result;
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	fab2 f282 	clz	r2, r2
 8007118:	b2d2      	uxtb	r2, r2
 800711a:	40d3      	lsrs	r3, r2
 800711c:	4a04      	ldr	r2, [pc, #16]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x40>)
 800711e:	5cd3      	ldrb	r3, [r2, r3]
 8007120:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40021000 	.word	0x40021000
 8007130:	080113a8 	.word	0x080113a8

08007134 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b092      	sub	sp, #72	; 0x48
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007144:	2300      	movs	r3, #0
 8007146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80d4 	beq.w	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007158:	4b4e      	ldr	r3, [pc, #312]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10e      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007164:	4b4b      	ldr	r3, [pc, #300]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	4a4a      	ldr	r2, [pc, #296]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800716a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716e:	61d3      	str	r3, [r2, #28]
 8007170:	4b48      	ldr	r3, [pc, #288]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800717c:	2301      	movs	r3, #1
 800717e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007182:	4b45      	ldr	r3, [pc, #276]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d118      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800718e:	4b42      	ldr	r3, [pc, #264]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a41      	ldr	r2, [pc, #260]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007198:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800719a:	f7fc fd0f 	bl	8003bbc <HAL_GetTick>
 800719e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a0:	e008      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a2:	f7fc fd0b 	bl	8003bbc <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b64      	cmp	r3, #100	; 0x64
 80071ae:	d901      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e169      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b4:	4b38      	ldr	r3, [pc, #224]	; (8007298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071c0:	4b34      	ldr	r3, [pc, #208]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8084 	beq.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071dc:	429a      	cmp	r2, r3
 80071de:	d07c      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071e0:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	fa93 f3a3 	rbit	r3, r3
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071fa:	fab3 f383 	clz	r3, r3
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	4b26      	ldr	r3, [pc, #152]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	461a      	mov	r2, r3
 800720a:	2301      	movs	r3, #1
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	fa93 f3a3 	rbit	r3, r3
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	461a      	mov	r2, r3
 8007226:	4b1d      	ldr	r3, [pc, #116]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	461a      	mov	r2, r3
 800722e:	2300      	movs	r3, #0
 8007230:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007232:	4a18      	ldr	r2, [pc, #96]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007236:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d04b      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007242:	f7fc fcbb 	bl	8003bbc <HAL_GetTick>
 8007246:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007248:	e00a      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724a:	f7fc fcb7 	bl	8003bbc <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	f241 3288 	movw	r2, #5000	; 0x1388
 8007258:	4293      	cmp	r3, r2
 800725a:	d901      	bls.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e113      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007260:	2302      	movs	r3, #2
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
 800726c:	2302      	movs	r3, #2
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	fa93 f3a3 	rbit	r3, r3
 8007276:	61fb      	str	r3, [r7, #28]
  return result;
 8007278:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f043 0302 	orr.w	r3, r3, #2
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d108      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800728e:	4b01      	ldr	r3, [pc, #4]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	e00d      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007294:	40021000 	.word	0x40021000
 8007298:	40007000 	.word	0x40007000
 800729c:	10908100 	.word	0x10908100
 80072a0:	2302      	movs	r3, #2
 80072a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	4b78      	ldr	r3, [pc, #480]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	2202      	movs	r2, #2
 80072b2:	613a      	str	r2, [r7, #16]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	fa92 f2a2 	rbit	r2, r2
 80072ba:	60fa      	str	r2, [r7, #12]
  return result;
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	fab2 f282 	clz	r2, r2
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	f002 021f 	and.w	r2, r2, #31
 80072ce:	2101      	movs	r1, #1
 80072d0:	fa01 f202 	lsl.w	r2, r1, r2
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0b7      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80072da:	4b6d      	ldr	r3, [pc, #436]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	496a      	ldr	r1, [pc, #424]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d105      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072f4:	4b66      	ldr	r3, [pc, #408]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	4a65      	ldr	r2, [pc, #404]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80072fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800730c:	4b60      	ldr	r3, [pc, #384]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	f023 0203 	bic.w	r2, r3, #3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	495d      	ldr	r1, [pc, #372]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800731a:	4313      	orrs	r3, r2
 800731c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800732a:	4b59      	ldr	r3, [pc, #356]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4956      	ldr	r1, [pc, #344]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007338:	4313      	orrs	r3, r2
 800733a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007348:	4b51      	ldr	r3, [pc, #324]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	494e      	ldr	r1, [pc, #312]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007356:	4313      	orrs	r3, r2
 8007358:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	f023 0210 	bic.w	r2, r3, #16
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	4947      	ldr	r1, [pc, #284]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007384:	4b42      	ldr	r3, [pc, #264]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	493f      	ldr	r1, [pc, #252]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007392:	4313      	orrs	r3, r2
 8007394:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073a2:	4b3b      	ldr	r3, [pc, #236]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f023 0220 	bic.w	r2, r3, #32
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	4938      	ldr	r1, [pc, #224]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073c0:	4b33      	ldr	r3, [pc, #204]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	4930      	ldr	r1, [pc, #192]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d008      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073de:	4b2c      	ldr	r3, [pc, #176]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	4929      	ldr	r1, [pc, #164]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073fc:	4b24      	ldr	r3, [pc, #144]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	4921      	ldr	r1, [pc, #132]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007416:	2b00      	cmp	r3, #0
 8007418:	d008      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	491a      	ldr	r1, [pc, #104]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007438:	4b15      	ldr	r3, [pc, #84]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	4912      	ldr	r1, [pc, #72]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007446:	4313      	orrs	r3, r2
 8007448:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d008      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007456:	4b0e      	ldr	r3, [pc, #56]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	490b      	ldr	r1, [pc, #44]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007464:	4313      	orrs	r3, r2
 8007466:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007480:	4903      	ldr	r1, [pc, #12]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3748      	adds	r7, #72	; 0x48
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40021000 	.word	0x40021000

08007494 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e073      	b.n	8007592 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7f5b      	ldrb	r3, [r3, #29]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fb ff6e 	bl	800339c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d055      	beq.n	8007580 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	22ca      	movs	r2, #202	; 0xca
 80074da:	625a      	str	r2, [r3, #36]	; 0x24
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2253      	movs	r2, #83	; 0x53
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f977 	bl	80077d8 <RTC_EnterInitMode>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d12c      	bne.n	800754e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007506:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6899      	ldr	r1, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68d2      	ldr	r2, [r2, #12]
 800752e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6919      	ldr	r1, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	041a      	lsls	r2, r3, #16
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f97e 	bl	8007846 <RTC_ExitInitMode>
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007562:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	22ff      	movs	r2, #255	; 0xff
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
 800757e:	e001      	b.n	8007584 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800759a:	b590      	push	{r4, r7, lr}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	7f1b      	ldrb	r3, [r3, #28]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_RTC_SetTime+0x1c>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e087      	b.n	80076c6 <HAL_RTC_SetTime+0x12c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2202      	movs	r2, #2
 80075c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d126      	bne.n	8007616 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 f955 	bl	8007890 <RTC_ByteToBcd2>
 80075e6:	4603      	mov	r3, r0
 80075e8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f94e 	bl	8007890 <RTC_ByteToBcd2>
 80075f4:	4603      	mov	r3, r0
 80075f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075f8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	789b      	ldrb	r3, [r3, #2]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 f946 	bl	8007890 <RTC_ByteToBcd2>
 8007604:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007606:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	78db      	ldrb	r3, [r3, #3]
 800760e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e018      	b.n	8007648 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007636:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800763c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	78db      	ldrb	r3, [r3, #3]
 8007642:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	22ca      	movs	r2, #202	; 0xca
 800764e:	625a      	str	r2, [r3, #36]	; 0x24
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2253      	movs	r2, #83	; 0x53
 8007656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f8bd 	bl	80077d8 <RTC_EnterInitMode>
 800765e:	4603      	mov	r3, r0
 8007660:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007662:	7cfb      	ldrb	r3, [r7, #19]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d120      	bne.n	80076aa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007672:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007676:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007686:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6899      	ldr	r1, [r3, #8]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68da      	ldr	r2, [r3, #12]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	431a      	orrs	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f8d0 	bl	8007846 <RTC_ExitInitMode>
 80076a6:	4603      	mov	r3, r0
 80076a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076aa:	7cfb      	ldrb	r3, [r7, #19]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2201      	movs	r2, #1
 80076b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	22ff      	movs	r2, #255	; 0xff
 80076bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	771a      	strb	r2, [r3, #28]

  return status;
 80076c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd90      	pop	{r4, r7, pc}

080076ce <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007700:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007704:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	0c1b      	lsrs	r3, r3, #16
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007710:	b2da      	uxtb	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	0a1b      	lsrs	r3, r3, #8
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	b2da      	uxtb	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	b2db      	uxtb	r3, r3
 800772a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772e:	b2da      	uxtb	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	0d9b      	lsrs	r3, r3, #22
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d11a      	bne.n	8007780 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f000 f8bc 	bl	80078cc <RTC_Bcd2ToByte>
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f8b3 	bl	80078cc <RTC_Bcd2ToByte>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	789b      	ldrb	r3, [r3, #2]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f8aa 	bl	80078cc <RTC_Bcd2ToByte>
 8007778:	4603      	mov	r3, r0
 800777a:	461a      	mov	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a0d      	ldr	r2, [pc, #52]	; (80077d4 <HAL_RTC_WaitForSynchro+0x48>)
 800779e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077a0:	f7fc fa0c 	bl	8003bbc <HAL_GetTick>
 80077a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077a6:	e009      	b.n	80077bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077a8:	f7fc fa08 	bl	8003bbc <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077b6:	d901      	bls.n	80077bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e007      	b.n	80077cc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0ee      	beq.n	80077a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	0001ff5f 	.word	0x0001ff5f

080077d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d122      	bne.n	800783c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007804:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007806:	f7fc f9d9 	bl	8003bbc <HAL_GetTick>
 800780a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800780c:	e00c      	b.n	8007828 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800780e:	f7fc f9d5 	bl	8003bbc <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781c:	d904      	bls.n	8007828 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2204      	movs	r2, #4
 8007822:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d102      	bne.n	800783c <RTC_EnterInitMode+0x64>
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d1e8      	bne.n	800780e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007860:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff8b 	bl	800778c <HAL_RTC_WaitForSynchro>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800789e:	e005      	b.n	80078ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	3b0a      	subs	r3, #10
 80078aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d8f6      	bhi.n	80078a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	4313      	orrs	r3, r2
 80078be:	b2db      	uxtb	r3, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	091b      	lsrs	r3, r3, #4
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	4413      	add	r3, r2
 80078fa:	b2db      	uxtb	r3, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e09d      	b.n	8007a56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792a:	d009      	beq.n	8007940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
 8007932:	e005      	b.n	8007940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fb fd44 	bl	80033e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007980:	d902      	bls.n	8007988 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	e002      	b.n	800798e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800798c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007996:	d007      	beq.n	80079a8 <HAL_SPI_Init+0xa0>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079a0:	d002      	beq.n	80079a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	431a      	orrs	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d6:	431a      	orrs	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	ea42 0103 	orr.w	r1, r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	f003 0204 	and.w	r2, r3, #4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a24:	ea42 0103 	orr.w	r1, r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b082      	sub	sp, #8
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e049      	b.n	8007b04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d106      	bne.n	8007a8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7fb fcf1 	bl	800346c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f000 fd1d 	bl	80084dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d001      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e04a      	b.n	8007bba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d018      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x6c>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b4e:	d013      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x6c>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	; (8007bcc <HAL_TIM_Base_Start_IT+0xc0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00e      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x6c>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d009      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x6c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0x6c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d115      	bne.n	8007ba4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2b06      	cmp	r3, #6
 8007b88:	d015      	beq.n	8007bb6 <HAL_TIM_Base_Start_IT+0xaa>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b90:	d011      	beq.n	8007bb6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba2:	e008      	b.n	8007bb6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e000      	b.n	8007bb8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40012c00 	.word	0x40012c00
 8007bcc:	40000400 	.word	0x40000400
 8007bd0:	40000800 	.word	0x40000800
 8007bd4:	40013400 	.word	0x40013400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	00010007 	.word	0x00010007

08007be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e049      	b.n	8007c86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fb fc98 	bl	800353c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 fc5c 	bl	80084dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d109      	bne.n	8007cb4 <HAL_TIM_PWM_Start+0x24>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	bf14      	ite	ne
 8007cac:	2301      	movne	r3, #1
 8007cae:	2300      	moveq	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	e03c      	b.n	8007d2e <HAL_TIM_PWM_Start+0x9e>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d109      	bne.n	8007cce <HAL_TIM_PWM_Start+0x3e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e02f      	b.n	8007d2e <HAL_TIM_PWM_Start+0x9e>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d109      	bne.n	8007ce8 <HAL_TIM_PWM_Start+0x58>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	e022      	b.n	8007d2e <HAL_TIM_PWM_Start+0x9e>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b0c      	cmp	r3, #12
 8007cec:	d109      	bne.n	8007d02 <HAL_TIM_PWM_Start+0x72>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	bf14      	ite	ne
 8007cfa:	2301      	movne	r3, #1
 8007cfc:	2300      	moveq	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	e015      	b.n	8007d2e <HAL_TIM_PWM_Start+0x9e>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d109      	bne.n	8007d1c <HAL_TIM_PWM_Start+0x8c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_PWM_Start+0x9e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e097      	b.n	8007e66 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xb6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d44:	e023      	b.n	8007d8e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0xc6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d54:	e01b      	b.n	8007d8e <HAL_TIM_PWM_Start+0xfe>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start+0xd6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d64:	e013      	b.n	8007d8e <HAL_TIM_PWM_Start+0xfe>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b0c      	cmp	r3, #12
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Start+0xe6>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d74:	e00b      	b.n	8007d8e <HAL_TIM_PWM_Start+0xfe>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Start+0xf6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d84:	e003      	b.n	8007d8e <HAL_TIM_PWM_Start+0xfe>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2201      	movs	r2, #1
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 ffa0 	bl	8008cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a33      	ldr	r2, [pc, #204]	; (8007e70 <HAL_TIM_PWM_Start+0x1e0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_TIM_PWM_Start+0x13e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a32      	ldr	r2, [pc, #200]	; (8007e74 <HAL_TIM_PWM_Start+0x1e4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIM_PWM_Start+0x13e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a30      	ldr	r2, [pc, #192]	; (8007e78 <HAL_TIM_PWM_Start+0x1e8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_TIM_PWM_Start+0x13e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a2f      	ldr	r2, [pc, #188]	; (8007e7c <HAL_TIM_PWM_Start+0x1ec>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIM_PWM_Start+0x13e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2d      	ldr	r2, [pc, #180]	; (8007e80 <HAL_TIM_PWM_Start+0x1f0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_PWM_Start+0x142>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e000      	b.n	8007dd4 <HAL_TIM_PWM_Start+0x144>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d007      	beq.n	8007de8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a20      	ldr	r2, [pc, #128]	; (8007e70 <HAL_TIM_PWM_Start+0x1e0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d018      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x194>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d013      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x194>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a20      	ldr	r2, [pc, #128]	; (8007e84 <HAL_TIM_PWM_Start+0x1f4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00e      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x194>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1f      	ldr	r2, [pc, #124]	; (8007e88 <HAL_TIM_PWM_Start+0x1f8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d009      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x194>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a17      	ldr	r2, [pc, #92]	; (8007e74 <HAL_TIM_PWM_Start+0x1e4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x194>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a16      	ldr	r2, [pc, #88]	; (8007e78 <HAL_TIM_PWM_Start+0x1e8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d115      	bne.n	8007e50 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <HAL_TIM_PWM_Start+0x1fc>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b06      	cmp	r3, #6
 8007e34:	d015      	beq.n	8007e62 <HAL_TIM_PWM_Start+0x1d2>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3c:	d011      	beq.n	8007e62 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f042 0201 	orr.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4e:	e008      	b.n	8007e62 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0201 	orr.w	r2, r2, #1
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40012c00 	.word	0x40012c00
 8007e74:	40013400 	.word	0x40013400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	00010007 	.word	0x00010007

08007e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d122      	bne.n	8007eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d11b      	bne.n	8007eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0202 	mvn.w	r2, #2
 8007ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fae3 	bl	800849e <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fad5 	bl	800848a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fae6 	bl	80084b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0304 	and.w	r3, r3, #4
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d122      	bne.n	8007f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d11b      	bne.n	8007f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f06f 0204 	mvn.w	r2, #4
 8007f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fab9 	bl	800849e <HAL_TIM_IC_CaptureCallback>
 8007f2c:	e005      	b.n	8007f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 faab 	bl	800848a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fabc 	bl	80084b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d122      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d11b      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0208 	mvn.w	r2, #8
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f003 0303 	and.w	r3, r3, #3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 fa8f 	bl	800849e <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fa81 	bl	800848a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa92 	bl	80084b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b10      	cmp	r3, #16
 8007fa0:	d122      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d11b      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f06f 0210 	mvn.w	r2, #16
 8007fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa65 	bl	800849e <HAL_TIM_IC_CaptureCallback>
 8007fd4:	e005      	b.n	8007fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa57 	bl	800848a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fa68 	bl	80084b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d10e      	bne.n	8008014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d107      	bne.n	8008014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0201 	mvn.w	r2, #1
 800800c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fa fd24 	bl	8002a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d10e      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d107      	bne.n	8008040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 ff7c 	bl	8008f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804e:	d10e      	bne.n	800806e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805a:	2b80      	cmp	r3, #128	; 0x80
 800805c:	d107      	bne.n	800806e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 ff6f 	bl	8008f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d10e      	bne.n	800809a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d107      	bne.n	800809a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa16 	bl	80084c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d10e      	bne.n	80080c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d107      	bne.n	80080c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f06f 0220 	mvn.w	r2, #32
 80080be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 ff2f 	bl	8008f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e0ff      	b.n	80082ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b14      	cmp	r3, #20
 80080fa:	f200 80f0 	bhi.w	80082de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08008159 	.word	0x08008159
 8008108:	080082df 	.word	0x080082df
 800810c:	080082df 	.word	0x080082df
 8008110:	080082df 	.word	0x080082df
 8008114:	08008199 	.word	0x08008199
 8008118:	080082df 	.word	0x080082df
 800811c:	080082df 	.word	0x080082df
 8008120:	080082df 	.word	0x080082df
 8008124:	080081db 	.word	0x080081db
 8008128:	080082df 	.word	0x080082df
 800812c:	080082df 	.word	0x080082df
 8008130:	080082df 	.word	0x080082df
 8008134:	0800821b 	.word	0x0800821b
 8008138:	080082df 	.word	0x080082df
 800813c:	080082df 	.word	0x080082df
 8008140:	080082df 	.word	0x080082df
 8008144:	0800825d 	.word	0x0800825d
 8008148:	080082df 	.word	0x080082df
 800814c:	080082df 	.word	0x080082df
 8008150:	080082df 	.word	0x080082df
 8008154:	0800829d 	.word	0x0800829d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fa4c 	bl	80085fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0208 	orr.w	r2, r2, #8
 8008172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	699a      	ldr	r2, [r3, #24]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0204 	bic.w	r2, r2, #4
 8008182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6999      	ldr	r1, [r3, #24]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	691a      	ldr	r2, [r3, #16]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	619a      	str	r2, [r3, #24]
      break;
 8008196:	e0a5      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fabc 	bl	800871c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6999      	ldr	r1, [r3, #24]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	021a      	lsls	r2, r3, #8
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	619a      	str	r2, [r3, #24]
      break;
 80081d8:	e084      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fb25 	bl	8008830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69da      	ldr	r2, [r3, #28]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f042 0208 	orr.w	r2, r2, #8
 80081f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	69da      	ldr	r2, [r3, #28]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0204 	bic.w	r2, r2, #4
 8008204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69d9      	ldr	r1, [r3, #28]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	61da      	str	r2, [r3, #28]
      break;
 8008218:	e064      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fb8d 	bl	8008940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69da      	ldr	r2, [r3, #28]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69d9      	ldr	r1, [r3, #28]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	021a      	lsls	r2, r3, #8
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	430a      	orrs	r2, r1
 8008258:	61da      	str	r2, [r3, #28]
      break;
 800825a:	e043      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fbd6 	bl	8008a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0208 	orr.w	r2, r2, #8
 8008276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0204 	bic.w	r2, r2, #4
 8008286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800829a:	e023      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fc1a 	bl	8008adc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082dc:	e002      	b.n	80082e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]
      break;
 80082e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop

080082f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_TIM_ConfigClockSource+0x1c>
 8008310:	2302      	movs	r3, #2
 8008312:	e0b6      	b.n	8008482 <HAL_TIM_ConfigClockSource+0x18a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800833e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008350:	d03e      	beq.n	80083d0 <HAL_TIM_ConfigClockSource+0xd8>
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008356:	f200 8087 	bhi.w	8008468 <HAL_TIM_ConfigClockSource+0x170>
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835e:	f000 8086 	beq.w	800846e <HAL_TIM_ConfigClockSource+0x176>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d87f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008368:	2b70      	cmp	r3, #112	; 0x70
 800836a:	d01a      	beq.n	80083a2 <HAL_TIM_ConfigClockSource+0xaa>
 800836c:	2b70      	cmp	r3, #112	; 0x70
 800836e:	d87b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008370:	2b60      	cmp	r3, #96	; 0x60
 8008372:	d050      	beq.n	8008416 <HAL_TIM_ConfigClockSource+0x11e>
 8008374:	2b60      	cmp	r3, #96	; 0x60
 8008376:	d877      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008378:	2b50      	cmp	r3, #80	; 0x50
 800837a:	d03c      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0xfe>
 800837c:	2b50      	cmp	r3, #80	; 0x50
 800837e:	d873      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008380:	2b40      	cmp	r3, #64	; 0x40
 8008382:	d058      	beq.n	8008436 <HAL_TIM_ConfigClockSource+0x13e>
 8008384:	2b40      	cmp	r3, #64	; 0x40
 8008386:	d86f      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008388:	2b30      	cmp	r3, #48	; 0x30
 800838a:	d064      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15e>
 800838c:	2b30      	cmp	r3, #48	; 0x30
 800838e:	d86b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008390:	2b20      	cmp	r3, #32
 8008392:	d060      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15e>
 8008394:	2b20      	cmp	r3, #32
 8008396:	d867      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d05c      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15e>
 800839c:	2b10      	cmp	r3, #16
 800839e:	d05a      	beq.n	8008456 <HAL_TIM_ConfigClockSource+0x15e>
 80083a0:	e062      	b.n	8008468 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	6899      	ldr	r1, [r3, #8]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f000 fc73 	bl	8008c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	609a      	str	r2, [r3, #8]
      break;
 80083ce:	e04f      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	6899      	ldr	r1, [r3, #8]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f000 fc5c 	bl	8008c9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	689a      	ldr	r2, [r3, #8]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083f2:	609a      	str	r2, [r3, #8]
      break;
 80083f4:	e03c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6818      	ldr	r0, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	6859      	ldr	r1, [r3, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	461a      	mov	r2, r3
 8008404:	f000 fbd0 	bl	8008ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2150      	movs	r1, #80	; 0x50
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fc29 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008414:	e02c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	6859      	ldr	r1, [r3, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	461a      	mov	r2, r3
 8008424:	f000 fbef 	bl	8008c06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2160      	movs	r1, #96	; 0x60
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fc19 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008434:	e01c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6818      	ldr	r0, [r3, #0]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	6859      	ldr	r1, [r3, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	461a      	mov	r2, r3
 8008444:	f000 fbb0 	bl	8008ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2140      	movs	r1, #64	; 0x40
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fc09 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008454:	e00c      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4619      	mov	r1, r3
 8008460:	4610      	mov	r0, r2
 8008462:	f000 fc00 	bl	8008c66 <TIM_ITRx_SetConfig>
      break;
 8008466:	e003      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e000      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800846e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008480:	7bfb      	ldrb	r3, [r7, #15]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084ce:	bf00      	nop
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a3c      	ldr	r2, [pc, #240]	; (80085e0 <TIM_Base_SetConfig+0x104>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00f      	beq.n	8008514 <TIM_Base_SetConfig+0x38>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fa:	d00b      	beq.n	8008514 <TIM_Base_SetConfig+0x38>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a39      	ldr	r2, [pc, #228]	; (80085e4 <TIM_Base_SetConfig+0x108>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d007      	beq.n	8008514 <TIM_Base_SetConfig+0x38>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a38      	ldr	r2, [pc, #224]	; (80085e8 <TIM_Base_SetConfig+0x10c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d003      	beq.n	8008514 <TIM_Base_SetConfig+0x38>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a37      	ldr	r2, [pc, #220]	; (80085ec <TIM_Base_SetConfig+0x110>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d108      	bne.n	8008526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a2d      	ldr	r2, [pc, #180]	; (80085e0 <TIM_Base_SetConfig+0x104>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01b      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008534:	d017      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2a      	ldr	r2, [pc, #168]	; (80085e4 <TIM_Base_SetConfig+0x108>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d013      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a29      	ldr	r2, [pc, #164]	; (80085e8 <TIM_Base_SetConfig+0x10c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00f      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a28      	ldr	r2, [pc, #160]	; (80085ec <TIM_Base_SetConfig+0x110>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00b      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a27      	ldr	r2, [pc, #156]	; (80085f0 <TIM_Base_SetConfig+0x114>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d007      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a26      	ldr	r2, [pc, #152]	; (80085f4 <TIM_Base_SetConfig+0x118>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d003      	beq.n	8008566 <TIM_Base_SetConfig+0x8a>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a25      	ldr	r2, [pc, #148]	; (80085f8 <TIM_Base_SetConfig+0x11c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d108      	bne.n	8008578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a10      	ldr	r2, [pc, #64]	; (80085e0 <TIM_Base_SetConfig+0x104>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00f      	beq.n	80085c4 <TIM_Base_SetConfig+0xe8>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a11      	ldr	r2, [pc, #68]	; (80085ec <TIM_Base_SetConfig+0x110>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <TIM_Base_SetConfig+0xe8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <TIM_Base_SetConfig+0x114>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <TIM_Base_SetConfig+0xe8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a0f      	ldr	r2, [pc, #60]	; (80085f4 <TIM_Base_SetConfig+0x118>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_Base_SetConfig+0xe8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <TIM_Base_SetConfig+0x11c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d103      	bne.n	80085cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	615a      	str	r2, [r3, #20]
}
 80085d2:	bf00      	nop
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40012c00 	.word	0x40012c00
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800
 80085ec:	40013400 	.word	0x40013400
 80085f0:	40014000 	.word	0x40014000
 80085f4:	40014400 	.word	0x40014400
 80085f8:	40014800 	.word	0x40014800

080085fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0201 	bic.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 0302 	bic.w	r3, r3, #2
 8008648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a2c      	ldr	r2, [pc, #176]	; (8008708 <TIM_OC1_SetConfig+0x10c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00f      	beq.n	800867c <TIM_OC1_SetConfig+0x80>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a2b      	ldr	r2, [pc, #172]	; (800870c <TIM_OC1_SetConfig+0x110>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00b      	beq.n	800867c <TIM_OC1_SetConfig+0x80>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a2a      	ldr	r2, [pc, #168]	; (8008710 <TIM_OC1_SetConfig+0x114>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_OC1_SetConfig+0x80>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a29      	ldr	r2, [pc, #164]	; (8008714 <TIM_OC1_SetConfig+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_OC1_SetConfig+0x80>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a28      	ldr	r2, [pc, #160]	; (8008718 <TIM_OC1_SetConfig+0x11c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d10c      	bne.n	8008696 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f023 0308 	bic.w	r3, r3, #8
 8008682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f023 0304 	bic.w	r3, r3, #4
 8008694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1b      	ldr	r2, [pc, #108]	; (8008708 <TIM_OC1_SetConfig+0x10c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00f      	beq.n	80086be <TIM_OC1_SetConfig+0xc2>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1a      	ldr	r2, [pc, #104]	; (800870c <TIM_OC1_SetConfig+0x110>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00b      	beq.n	80086be <TIM_OC1_SetConfig+0xc2>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <TIM_OC1_SetConfig+0x114>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d007      	beq.n	80086be <TIM_OC1_SetConfig+0xc2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a18      	ldr	r2, [pc, #96]	; (8008714 <TIM_OC1_SetConfig+0x118>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d003      	beq.n	80086be <TIM_OC1_SetConfig+0xc2>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a17      	ldr	r2, [pc, #92]	; (8008718 <TIM_OC1_SetConfig+0x11c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d111      	bne.n	80086e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	621a      	str	r2, [r3, #32]
}
 80086fc:	bf00      	nop
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	40012c00 	.word	0x40012c00
 800870c:	40013400 	.word	0x40013400
 8008710:	40014000 	.word	0x40014000
 8008714:	40014400 	.word	0x40014400
 8008718:	40014800 	.word	0x40014800

0800871c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	f023 0210 	bic.w	r2, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800874a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4313      	orrs	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0320 	bic.w	r3, r3, #32
 800876a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a28      	ldr	r2, [pc, #160]	; (800881c <TIM_OC2_SetConfig+0x100>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_OC2_SetConfig+0x6c>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a27      	ldr	r2, [pc, #156]	; (8008820 <TIM_OC2_SetConfig+0x104>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d10d      	bne.n	80087a4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a1d      	ldr	r2, [pc, #116]	; (800881c <TIM_OC2_SetConfig+0x100>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00f      	beq.n	80087cc <TIM_OC2_SetConfig+0xb0>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a1c      	ldr	r2, [pc, #112]	; (8008820 <TIM_OC2_SetConfig+0x104>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d00b      	beq.n	80087cc <TIM_OC2_SetConfig+0xb0>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1b      	ldr	r2, [pc, #108]	; (8008824 <TIM_OC2_SetConfig+0x108>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d007      	beq.n	80087cc <TIM_OC2_SetConfig+0xb0>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a1a      	ldr	r2, [pc, #104]	; (8008828 <TIM_OC2_SetConfig+0x10c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC2_SetConfig+0xb0>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a19      	ldr	r2, [pc, #100]	; (800882c <TIM_OC2_SetConfig+0x110>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d113      	bne.n	80087f4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	693a      	ldr	r2, [r7, #16]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40012c00 	.word	0x40012c00
 8008820:	40013400 	.word	0x40013400
 8008824:	40014000 	.word	0x40014000
 8008828:	40014400 	.word	0x40014400
 800882c:	40014800 	.word	0x40014800

08008830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008830:	b480      	push	{r7}
 8008832:	b087      	sub	sp, #28
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800885e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0303 	bic.w	r3, r3, #3
 800886a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	4313      	orrs	r3, r2
 8008874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800887c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	021b      	lsls	r3, r3, #8
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a27      	ldr	r2, [pc, #156]	; (800892c <TIM_OC3_SetConfig+0xfc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d003      	beq.n	800889a <TIM_OC3_SetConfig+0x6a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a26      	ldr	r2, [pc, #152]	; (8008930 <TIM_OC3_SetConfig+0x100>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d10d      	bne.n	80088b6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a1c      	ldr	r2, [pc, #112]	; (800892c <TIM_OC3_SetConfig+0xfc>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00f      	beq.n	80088de <TIM_OC3_SetConfig+0xae>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <TIM_OC3_SetConfig+0x100>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d00b      	beq.n	80088de <TIM_OC3_SetConfig+0xae>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a1a      	ldr	r2, [pc, #104]	; (8008934 <TIM_OC3_SetConfig+0x104>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d007      	beq.n	80088de <TIM_OC3_SetConfig+0xae>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a19      	ldr	r2, [pc, #100]	; (8008938 <TIM_OC3_SetConfig+0x108>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_OC3_SetConfig+0xae>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a18      	ldr	r2, [pc, #96]	; (800893c <TIM_OC3_SetConfig+0x10c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d113      	bne.n	8008906 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	621a      	str	r2, [r3, #32]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	40012c00 	.word	0x40012c00
 8008930:	40013400 	.word	0x40013400
 8008934:	40014000 	.word	0x40014000
 8008938:	40014400 	.word	0x40014400
 800893c:	40014800 	.word	0x40014800

08008940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800896e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800897a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800898e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	031b      	lsls	r3, r3, #12
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <TIM_OC4_SetConfig+0xc0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00f      	beq.n	80089c4 <TIM_OC4_SetConfig+0x84>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <TIM_OC4_SetConfig+0xc4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d00b      	beq.n	80089c4 <TIM_OC4_SetConfig+0x84>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a16      	ldr	r2, [pc, #88]	; (8008a08 <TIM_OC4_SetConfig+0xc8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d007      	beq.n	80089c4 <TIM_OC4_SetConfig+0x84>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <TIM_OC4_SetConfig+0xcc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d003      	beq.n	80089c4 <TIM_OC4_SetConfig+0x84>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a14      	ldr	r2, [pc, #80]	; (8008a10 <TIM_OC4_SetConfig+0xd0>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d109      	bne.n	80089d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	019b      	lsls	r3, r3, #6
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	621a      	str	r2, [r3, #32]
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40012c00 	.word	0x40012c00
 8008a04:	40013400 	.word	0x40013400
 8008a08:	40014000 	.word	0x40014000
 8008a0c:	40014400 	.word	0x40014400
 8008a10:	40014800 	.word	0x40014800

08008a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	041b      	lsls	r3, r3, #16
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a17      	ldr	r2, [pc, #92]	; (8008ac8 <TIM_OC5_SetConfig+0xb4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_OC5_SetConfig+0x7a>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a16      	ldr	r2, [pc, #88]	; (8008acc <TIM_OC5_SetConfig+0xb8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00b      	beq.n	8008a8e <TIM_OC5_SetConfig+0x7a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <TIM_OC5_SetConfig+0xbc>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_OC5_SetConfig+0x7a>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <TIM_OC5_SetConfig+0xc0>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_OC5_SetConfig+0x7a>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a13      	ldr	r2, [pc, #76]	; (8008ad8 <TIM_OC5_SetConfig+0xc4>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d109      	bne.n	8008aa2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	021b      	lsls	r3, r3, #8
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	621a      	str	r2, [r3, #32]
}
 8008abc:	bf00      	nop
 8008abe:	371c      	adds	r7, #28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	40012c00 	.word	0x40012c00
 8008acc:	40013400 	.word	0x40013400
 8008ad0:	40014000 	.word	0x40014000
 8008ad4:	40014400 	.word	0x40014400
 8008ad8:	40014800 	.word	0x40014800

08008adc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	051b      	lsls	r3, r3, #20
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <TIM_OC6_SetConfig+0xb8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_OC6_SetConfig+0x7c>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a17      	ldr	r2, [pc, #92]	; (8008b98 <TIM_OC6_SetConfig+0xbc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00b      	beq.n	8008b58 <TIM_OC6_SetConfig+0x7c>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a16      	ldr	r2, [pc, #88]	; (8008b9c <TIM_OC6_SetConfig+0xc0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_OC6_SetConfig+0x7c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <TIM_OC6_SetConfig+0xc4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC6_SetConfig+0x7c>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a14      	ldr	r2, [pc, #80]	; (8008ba4 <TIM_OC6_SetConfig+0xc8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d109      	bne.n	8008b6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800

08008ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f023 0201 	bic.w	r2, r3, #1
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f023 030a 	bic.w	r3, r3, #10
 8008be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	621a      	str	r2, [r3, #32]
}
 8008bfa:	bf00      	nop
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr

08008c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b087      	sub	sp, #28
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1b      	ldr	r3, [r3, #32]
 8008c16:	f023 0210 	bic.w	r2, r3, #16
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	621a      	str	r2, [r3, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f043 0307 	orr.w	r3, r3, #7
 8008c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	609a      	str	r2, [r3, #8]
}
 8008c90:	bf00      	nop
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	021a      	lsls	r2, r3, #8
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	371c      	adds	r7, #28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2201      	movs	r2, #1
 8008cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6a1a      	ldr	r2, [r3, #32]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	401a      	ands	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a1a      	ldr	r2, [r3, #32]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 031f 	and.w	r3, r3, #31
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	fa01 f303 	lsl.w	r3, r1, r3
 8008d14:	431a      	orrs	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
	...

08008d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e063      	b.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a2b      	ldr	r2, [pc, #172]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d108      	bne.n	8008d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d018      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db2:	d013      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00e      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d009      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d004      	beq.n	8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d10c      	bne.n	8008df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	40012c00 	.word	0x40012c00
 8008e18:	40013400 	.word	0x40013400
 8008e1c:	40000400 	.word	0x40000400
 8008e20:	40000800 	.word	0x40000800
 8008e24:	40014000 	.word	0x40014000

08008e28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d101      	bne.n	8008e44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e065      	b.n	8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d004      	beq.n	8008ed2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a14      	ldr	r2, [pc, #80]	; (8008f20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d115      	bne.n	8008efe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	051b      	lsls	r3, r3, #20
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3714      	adds	r7, #20
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	40012c00 	.word	0x40012c00
 8008f20:	40013400 	.word	0x40013400

08008f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f54:	bf00      	nop
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e040      	b.n	8008ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f7fa fbbc 	bl	8003700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2224      	movs	r2, #36	; 0x24
 8008f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc00 	bl	80097a4 <UART_SetConfig>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d101      	bne.n	8008fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e022      	b.n	8008ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fdc8 	bl	8009b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	689a      	ldr	r2, [r3, #8]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fe4f 	bl	8009c90 <UART_CheckIdleState>
 8008ff2:	4603      	mov	r3, r0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	; 0x28
 8009000:	af02      	add	r7, sp, #8
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009010:	2b20      	cmp	r3, #32
 8009012:	d178      	bne.n	8009106 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_UART_Transmit+0x24>
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e071      	b.n	8009108 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2221      	movs	r2, #33	; 0x21
 8009030:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009032:	f7fa fdc3 	bl	8003bbc <HAL_GetTick>
 8009036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	88fa      	ldrh	r2, [r7, #6]
 800903c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	88fa      	ldrh	r2, [r7, #6]
 8009044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009050:	d108      	bne.n	8009064 <HAL_UART_Transmit+0x68>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	61bb      	str	r3, [r7, #24]
 8009062:	e003      	b.n	800906c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800906c:	e030      	b.n	80090d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2200      	movs	r2, #0
 8009076:	2180      	movs	r1, #128	; 0x80
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 feb1 	bl	8009de0 <UART_WaitOnFlagUntilTimeout>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2220      	movs	r2, #32
 8009088:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e03c      	b.n	8009108 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	881a      	ldrh	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090a0:	b292      	uxth	r2, r2
 80090a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	3302      	adds	r3, #2
 80090a8:	61bb      	str	r3, [r7, #24]
 80090aa:	e008      	b.n	80090be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	b292      	uxth	r2, r2
 80090b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	3301      	adds	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1c8      	bne.n	800906e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2200      	movs	r2, #0
 80090e4:	2140      	movs	r1, #64	; 0x40
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 fe7a 	bl	8009de0 <UART_WaitOnFlagUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2220      	movs	r2, #32
 80090f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e005      	b.n	8009108 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	e000      	b.n	8009108 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009124:	2b20      	cmp	r3, #32
 8009126:	d132      	bne.n	800918e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_UART_Receive_IT+0x24>
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e02b      	b.n	8009190 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d018      	beq.n	800917e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	613b      	str	r3, [r7, #16]
   return(result);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	623b      	str	r3, [r7, #32]
 800916c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	69f9      	ldr	r1, [r7, #28]
 8009170:	6a3a      	ldr	r2, [r7, #32]
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	61bb      	str	r3, [r7, #24]
   return(result);
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e6      	bne.n	800914c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	461a      	mov	r2, r3
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 fe93 	bl	8009eb0 <UART_Start_Receive_IT>
 800918a:	4603      	mov	r3, r0
 800918c:	e000      	b.n	8009190 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800918e:	2302      	movs	r3, #2
  }
}
 8009190:	4618      	mov	r0, r3
 8009192:	3728      	adds	r7, #40	; 0x28
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b0ba      	sub	sp, #232	; 0xe8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80091c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80091c6:	4013      	ands	r3, r2
 80091c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80091cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d115      	bne.n	8009200 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00f      	beq.n	8009200 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d009      	beq.n	8009200 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 82ab 	beq.w	800974c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
      }
      return;
 80091fe:	e2a5      	b.n	800974c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009200:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 8117 	beq.w	8009438 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800920a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009216:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800921a:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_UART_IRQHandler+0x298>)
 800921c:	4013      	ands	r3, r2
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 810a 	beq.w	8009438 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d011      	beq.n	8009254 <HAL_UART_IRQHandler+0xbc>
 8009230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2201      	movs	r2, #1
 8009242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924a:	f043 0201 	orr.w	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_UART_IRQHandler+0xec>
 8009260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2202      	movs	r2, #2
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927a:	f043 0204 	orr.w	r2, r3, #4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009288:	f003 0304 	and.w	r3, r3, #4
 800928c:	2b00      	cmp	r3, #0
 800928e:	d011      	beq.n	80092b4 <HAL_UART_IRQHandler+0x11c>
 8009290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2204      	movs	r2, #4
 80092a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092aa:	f043 0202 	orr.w	r2, r3, #2
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d017      	beq.n	80092f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d105      	bne.n	80092d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2208      	movs	r2, #8
 80092de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e6:	f043 0208 	orr.w	r2, r3, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d012      	beq.n	8009322 <HAL_UART_IRQHandler+0x18a>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00c      	beq.n	8009322 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009318:	f043 0220 	orr.w	r2, r3, #32
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8211 	beq.w	8009750 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800932e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00d      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800933a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800935c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d005      	beq.n	800937a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800936e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009376:	2b00      	cmp	r3, #0
 8009378:	d04f      	beq.n	800941a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fe4c 	bl	800a018 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b40      	cmp	r3, #64	; 0x40
 800938c:	d141      	bne.n	8009412 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80093a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80093ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80093be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1d9      	bne.n	800938e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093e6:	4a13      	ldr	r2, [pc, #76]	; (8009434 <HAL_UART_IRQHandler+0x29c>)
 80093e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fc f832 	bl	8005458 <HAL_DMA_Abort_IT>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d017      	beq.n	800942a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009408:	e00f      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f9b4 	bl	8009778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	e00b      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9b0 	bl	8009778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	e007      	b.n	800942a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f9ac 	bl	8009778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009428:	e192      	b.n	8009750 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942a:	bf00      	nop
    return;
 800942c:	e190      	b.n	8009750 <HAL_UART_IRQHandler+0x5b8>
 800942e:	bf00      	nop
 8009430:	04000120 	.word	0x04000120
 8009434:	0800a0e1 	.word	0x0800a0e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800943c:	2b01      	cmp	r3, #1
 800943e:	f040 814b 	bne.w	80096d8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009446:	f003 0310 	and.w	r3, r3, #16
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8144 	beq.w	80096d8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 813d 	beq.w	80096d8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2210      	movs	r2, #16
 8009464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009470:	2b40      	cmp	r3, #64	; 0x40
 8009472:	f040 80b5 	bne.w	80095e0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009482:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 8164 	beq.w	8009754 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009496:	429a      	cmp	r2, r3
 8009498:	f080 815c 	bcs.w	8009754 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80094a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	f000 8086 	beq.w	80095be <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094e0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1da      	bne.n	80094b2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800950c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009520:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009524:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009528:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e1      	bne.n	80094fc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800954a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800954e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3308      	adds	r3, #8
 8009558:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800955c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800955e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009562:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800956a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e3      	bne.n	8009538 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800958c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958e:	f023 0310 	bic.w	r3, r3, #16
 8009592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80095a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80095a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80095ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e4      	bne.n	800957e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fb ff14 	bl	80053e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f8d7 	bl	800978c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095de:	e0b9      	b.n	8009754 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 80ab 	beq.w	8009758 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 80a6 	beq.w	8009758 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962e:	647b      	str	r3, [r7, #68]	; 0x44
 8009630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800963c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e4      	bne.n	800960c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	e853 3f00 	ldrex	r3, [r3]
 8009650:	623b      	str	r3, [r7, #32]
   return(result);
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	f023 0301 	bic.w	r3, r3, #1
 8009658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3308      	adds	r3, #8
 8009662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009666:	633a      	str	r2, [r7, #48]	; 0x30
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800966c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e3      	bne.n	8009642 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	60fb      	str	r3, [r7, #12]
   return(result);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0310 	bic.w	r3, r3, #16
 80096a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80096b0:	61fb      	str	r3, [r7, #28]
 80096b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	69fa      	ldr	r2, [r7, #28]
 80096b8:	e841 2300 	strex	r3, r2, [r1]
 80096bc:	617b      	str	r3, [r7, #20]
   return(result);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e4      	bne.n	800968e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096ce:	4619      	mov	r1, r3
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f85b 	bl	800978c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096d6:	e03f      	b.n	8009758 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00e      	beq.n	8009702 <HAL_UART_IRQHandler+0x56a>
 80096e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d008      	beq.n	8009702 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fed8 	bl	800a4b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009700:	e02d      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00e      	beq.n	800972c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800970e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009716:	2b00      	cmp	r3, #0
 8009718:	d008      	beq.n	800972c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01c      	beq.n	800975c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
    }
    return;
 800972a:	e017      	b.n	800975c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <HAL_UART_IRQHandler+0x5c6>
 8009738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00c      	beq.n	800975e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fce1 	bl	800a10c <UART_EndTransmit_IT>
    return;
 800974a:	e008      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
      return;
 800974c:	bf00      	nop
 800974e:	e006      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
    return;
 8009750:	bf00      	nop
 8009752:	e004      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009754:	bf00      	nop
 8009756:	e002      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009758:	bf00      	nop
 800975a:	e000      	b.n	800975e <HAL_UART_IRQHandler+0x5c6>
    return;
 800975c:	bf00      	nop
  }

}
 800975e:	37e8      	adds	r7, #232	; 0xe8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	431a      	orrs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80097d2:	f023 030c 	bic.w	r3, r3, #12
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6812      	ldr	r2, [r2, #0]
 80097da:	6979      	ldr	r1, [r7, #20]
 80097dc:	430b      	orrs	r3, r1
 80097de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	4313      	orrs	r3, r2
 8009804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	430a      	orrs	r2, r1
 8009818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4aa7      	ldr	r2, [pc, #668]	; (8009abc <UART_SetConfig+0x318>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d120      	bne.n	8009866 <UART_SetConfig+0xc2>
 8009824:	4ba6      	ldr	r3, [pc, #664]	; (8009ac0 <UART_SetConfig+0x31c>)
 8009826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009828:	f003 0303 	and.w	r3, r3, #3
 800982c:	2b03      	cmp	r3, #3
 800982e:	d817      	bhi.n	8009860 <UART_SetConfig+0xbc>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <UART_SetConfig+0x94>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	08009855 	.word	0x08009855
 8009840:	0800985b 	.word	0x0800985b
 8009844:	0800984f 	.word	0x0800984f
 8009848:	2301      	movs	r3, #1
 800984a:	77fb      	strb	r3, [r7, #31]
 800984c:	e0b5      	b.n	80099ba <UART_SetConfig+0x216>
 800984e:	2302      	movs	r3, #2
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e0b2      	b.n	80099ba <UART_SetConfig+0x216>
 8009854:	2304      	movs	r3, #4
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e0af      	b.n	80099ba <UART_SetConfig+0x216>
 800985a:	2308      	movs	r3, #8
 800985c:	77fb      	strb	r3, [r7, #31]
 800985e:	e0ac      	b.n	80099ba <UART_SetConfig+0x216>
 8009860:	2310      	movs	r3, #16
 8009862:	77fb      	strb	r3, [r7, #31]
 8009864:	e0a9      	b.n	80099ba <UART_SetConfig+0x216>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a96      	ldr	r2, [pc, #600]	; (8009ac4 <UART_SetConfig+0x320>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d124      	bne.n	80098ba <UART_SetConfig+0x116>
 8009870:	4b93      	ldr	r3, [pc, #588]	; (8009ac0 <UART_SetConfig+0x31c>)
 8009872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800987c:	d011      	beq.n	80098a2 <UART_SetConfig+0xfe>
 800987e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009882:	d817      	bhi.n	80098b4 <UART_SetConfig+0x110>
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009888:	d011      	beq.n	80098ae <UART_SetConfig+0x10a>
 800988a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800988e:	d811      	bhi.n	80098b4 <UART_SetConfig+0x110>
 8009890:	2b00      	cmp	r3, #0
 8009892:	d003      	beq.n	800989c <UART_SetConfig+0xf8>
 8009894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009898:	d006      	beq.n	80098a8 <UART_SetConfig+0x104>
 800989a:	e00b      	b.n	80098b4 <UART_SetConfig+0x110>
 800989c:	2300      	movs	r3, #0
 800989e:	77fb      	strb	r3, [r7, #31]
 80098a0:	e08b      	b.n	80099ba <UART_SetConfig+0x216>
 80098a2:	2302      	movs	r3, #2
 80098a4:	77fb      	strb	r3, [r7, #31]
 80098a6:	e088      	b.n	80099ba <UART_SetConfig+0x216>
 80098a8:	2304      	movs	r3, #4
 80098aa:	77fb      	strb	r3, [r7, #31]
 80098ac:	e085      	b.n	80099ba <UART_SetConfig+0x216>
 80098ae:	2308      	movs	r3, #8
 80098b0:	77fb      	strb	r3, [r7, #31]
 80098b2:	e082      	b.n	80099ba <UART_SetConfig+0x216>
 80098b4:	2310      	movs	r3, #16
 80098b6:	77fb      	strb	r3, [r7, #31]
 80098b8:	e07f      	b.n	80099ba <UART_SetConfig+0x216>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a82      	ldr	r2, [pc, #520]	; (8009ac8 <UART_SetConfig+0x324>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d124      	bne.n	800990e <UART_SetConfig+0x16a>
 80098c4:	4b7e      	ldr	r3, [pc, #504]	; (8009ac0 <UART_SetConfig+0x31c>)
 80098c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80098cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098d0:	d011      	beq.n	80098f6 <UART_SetConfig+0x152>
 80098d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80098d6:	d817      	bhi.n	8009908 <UART_SetConfig+0x164>
 80098d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098dc:	d011      	beq.n	8009902 <UART_SetConfig+0x15e>
 80098de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098e2:	d811      	bhi.n	8009908 <UART_SetConfig+0x164>
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <UART_SetConfig+0x14c>
 80098e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098ec:	d006      	beq.n	80098fc <UART_SetConfig+0x158>
 80098ee:	e00b      	b.n	8009908 <UART_SetConfig+0x164>
 80098f0:	2300      	movs	r3, #0
 80098f2:	77fb      	strb	r3, [r7, #31]
 80098f4:	e061      	b.n	80099ba <UART_SetConfig+0x216>
 80098f6:	2302      	movs	r3, #2
 80098f8:	77fb      	strb	r3, [r7, #31]
 80098fa:	e05e      	b.n	80099ba <UART_SetConfig+0x216>
 80098fc:	2304      	movs	r3, #4
 80098fe:	77fb      	strb	r3, [r7, #31]
 8009900:	e05b      	b.n	80099ba <UART_SetConfig+0x216>
 8009902:	2308      	movs	r3, #8
 8009904:	77fb      	strb	r3, [r7, #31]
 8009906:	e058      	b.n	80099ba <UART_SetConfig+0x216>
 8009908:	2310      	movs	r3, #16
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	e055      	b.n	80099ba <UART_SetConfig+0x216>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a6e      	ldr	r2, [pc, #440]	; (8009acc <UART_SetConfig+0x328>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d124      	bne.n	8009962 <UART_SetConfig+0x1be>
 8009918:	4b69      	ldr	r3, [pc, #420]	; (8009ac0 <UART_SetConfig+0x31c>)
 800991a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800991c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009924:	d011      	beq.n	800994a <UART_SetConfig+0x1a6>
 8009926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800992a:	d817      	bhi.n	800995c <UART_SetConfig+0x1b8>
 800992c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009930:	d011      	beq.n	8009956 <UART_SetConfig+0x1b2>
 8009932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009936:	d811      	bhi.n	800995c <UART_SetConfig+0x1b8>
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <UART_SetConfig+0x1a0>
 800993c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009940:	d006      	beq.n	8009950 <UART_SetConfig+0x1ac>
 8009942:	e00b      	b.n	800995c <UART_SetConfig+0x1b8>
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e037      	b.n	80099ba <UART_SetConfig+0x216>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e034      	b.n	80099ba <UART_SetConfig+0x216>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e031      	b.n	80099ba <UART_SetConfig+0x216>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e02e      	b.n	80099ba <UART_SetConfig+0x216>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e02b      	b.n	80099ba <UART_SetConfig+0x216>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a5a      	ldr	r2, [pc, #360]	; (8009ad0 <UART_SetConfig+0x32c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d124      	bne.n	80099b6 <UART_SetConfig+0x212>
 800996c:	4b54      	ldr	r3, [pc, #336]	; (8009ac0 <UART_SetConfig+0x31c>)
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009978:	d011      	beq.n	800999e <UART_SetConfig+0x1fa>
 800997a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800997e:	d817      	bhi.n	80099b0 <UART_SetConfig+0x20c>
 8009980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009984:	d011      	beq.n	80099aa <UART_SetConfig+0x206>
 8009986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800998a:	d811      	bhi.n	80099b0 <UART_SetConfig+0x20c>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <UART_SetConfig+0x1f4>
 8009990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009994:	d006      	beq.n	80099a4 <UART_SetConfig+0x200>
 8009996:	e00b      	b.n	80099b0 <UART_SetConfig+0x20c>
 8009998:	2300      	movs	r3, #0
 800999a:	77fb      	strb	r3, [r7, #31]
 800999c:	e00d      	b.n	80099ba <UART_SetConfig+0x216>
 800999e:	2302      	movs	r3, #2
 80099a0:	77fb      	strb	r3, [r7, #31]
 80099a2:	e00a      	b.n	80099ba <UART_SetConfig+0x216>
 80099a4:	2304      	movs	r3, #4
 80099a6:	77fb      	strb	r3, [r7, #31]
 80099a8:	e007      	b.n	80099ba <UART_SetConfig+0x216>
 80099aa:	2308      	movs	r3, #8
 80099ac:	77fb      	strb	r3, [r7, #31]
 80099ae:	e004      	b.n	80099ba <UART_SetConfig+0x216>
 80099b0:	2310      	movs	r3, #16
 80099b2:	77fb      	strb	r3, [r7, #31]
 80099b4:	e001      	b.n	80099ba <UART_SetConfig+0x216>
 80099b6:	2310      	movs	r3, #16
 80099b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099c2:	d15b      	bne.n	8009a7c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80099c4:	7ffb      	ldrb	r3, [r7, #31]
 80099c6:	2b08      	cmp	r3, #8
 80099c8:	d827      	bhi.n	8009a1a <UART_SetConfig+0x276>
 80099ca:	a201      	add	r2, pc, #4	; (adr r2, 80099d0 <UART_SetConfig+0x22c>)
 80099cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	08009a1b 	.word	0x08009a1b
 80099e0:	08009a0b 	.word	0x08009a0b
 80099e4:	08009a1b 	.word	0x08009a1b
 80099e8:	08009a1b 	.word	0x08009a1b
 80099ec:	08009a1b 	.word	0x08009a1b
 80099f0:	08009a13 	.word	0x08009a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099f4:	f7fd fb5a 	bl	80070ac <HAL_RCC_GetPCLK1Freq>
 80099f8:	61b8      	str	r0, [r7, #24]
        break;
 80099fa:	e013      	b.n	8009a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099fc:	f7fd fb78 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8009a00:	61b8      	str	r0, [r7, #24]
        break;
 8009a02:	e00f      	b.n	8009a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a04:	4b33      	ldr	r3, [pc, #204]	; (8009ad4 <UART_SetConfig+0x330>)
 8009a06:	61bb      	str	r3, [r7, #24]
        break;
 8009a08:	e00c      	b.n	8009a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a0a:	f7fd fad9 	bl	8006fc0 <HAL_RCC_GetSysClockFreq>
 8009a0e:	61b8      	str	r0, [r7, #24]
        break;
 8009a10:	e008      	b.n	8009a24 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a16:	61bb      	str	r3, [r7, #24]
        break;
 8009a18:	e004      	b.n	8009a24 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	77bb      	strb	r3, [r7, #30]
        break;
 8009a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 8082 	beq.w	8009b30 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	005a      	lsls	r2, r3, #1
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	441a      	add	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	2b0f      	cmp	r3, #15
 8009a46:	d916      	bls.n	8009a76 <UART_SetConfig+0x2d2>
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4e:	d212      	bcs.n	8009a76 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f023 030f 	bic.w	r3, r3, #15
 8009a58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	085b      	lsrs	r3, r3, #1
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f003 0307 	and.w	r3, r3, #7
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	89fb      	ldrh	r3, [r7, #14]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	89fa      	ldrh	r2, [r7, #14]
 8009a72:	60da      	str	r2, [r3, #12]
 8009a74:	e05c      	b.n	8009b30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	77bb      	strb	r3, [r7, #30]
 8009a7a:	e059      	b.n	8009b30 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a7c:	7ffb      	ldrb	r3, [r7, #31]
 8009a7e:	2b08      	cmp	r3, #8
 8009a80:	d835      	bhi.n	8009aee <UART_SetConfig+0x34a>
 8009a82:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <UART_SetConfig+0x2e4>)
 8009a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a88:	08009aad 	.word	0x08009aad
 8009a8c:	08009ab5 	.word	0x08009ab5
 8009a90:	08009ad9 	.word	0x08009ad9
 8009a94:	08009aef 	.word	0x08009aef
 8009a98:	08009adf 	.word	0x08009adf
 8009a9c:	08009aef 	.word	0x08009aef
 8009aa0:	08009aef 	.word	0x08009aef
 8009aa4:	08009aef 	.word	0x08009aef
 8009aa8:	08009ae7 	.word	0x08009ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009aac:	f7fd fafe 	bl	80070ac <HAL_RCC_GetPCLK1Freq>
 8009ab0:	61b8      	str	r0, [r7, #24]
        break;
 8009ab2:	e021      	b.n	8009af8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ab4:	f7fd fb1c 	bl	80070f0 <HAL_RCC_GetPCLK2Freq>
 8009ab8:	61b8      	str	r0, [r7, #24]
        break;
 8009aba:	e01d      	b.n	8009af8 <UART_SetConfig+0x354>
 8009abc:	40013800 	.word	0x40013800
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	40004400 	.word	0x40004400
 8009ac8:	40004800 	.word	0x40004800
 8009acc:	40004c00 	.word	0x40004c00
 8009ad0:	40005000 	.word	0x40005000
 8009ad4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <UART_SetConfig+0x3a4>)
 8009ada:	61bb      	str	r3, [r7, #24]
        break;
 8009adc:	e00c      	b.n	8009af8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ade:	f7fd fa6f 	bl	8006fc0 <HAL_RCC_GetSysClockFreq>
 8009ae2:	61b8      	str	r0, [r7, #24]
        break;
 8009ae4:	e008      	b.n	8009af8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aea:	61bb      	str	r3, [r7, #24]
        break;
 8009aec:	e004      	b.n	8009af8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	77bb      	strb	r3, [r7, #30]
        break;
 8009af6:	bf00      	nop
    }

    if (pclk != 0U)
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d018      	beq.n	8009b30 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	085a      	lsrs	r2, r3, #1
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	441a      	add	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	2b0f      	cmp	r3, #15
 8009b16:	d909      	bls.n	8009b2c <UART_SetConfig+0x388>
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b1e:	d205      	bcs.n	8009b2c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60da      	str	r2, [r3, #12]
 8009b2a:	e001      	b.n	8009b30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	007a1200 	.word	0x007a1200

08009b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00a      	beq.n	8009b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00a      	beq.n	8009b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d00a      	beq.n	8009bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	f003 0308 	and.w	r3, r3, #8
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00a      	beq.n	8009bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00a      	beq.n	8009c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d01a      	beq.n	8009c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c4a:	d10a      	bne.n	8009c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	605a      	str	r2, [r3, #4]
  }
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b098      	sub	sp, #96	; 0x60
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ca0:	f7f9 ff8c 	bl	8003bbc <HAL_GetTick>
 8009ca4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0308 	and.w	r3, r3, #8
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d12e      	bne.n	8009d12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f88c 	bl	8009de0 <UART_WaitOnFlagUntilTimeout>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d021      	beq.n	8009d12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	e853 3f00 	ldrex	r3, [r3]
 8009cda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cec:	647b      	str	r3, [r7, #68]	; 0x44
 8009cee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e6      	bne.n	8009cce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2220      	movs	r2, #32
 8009d04:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	e062      	b.n	8009dd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0304 	and.w	r3, r3, #4
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d149      	bne.n	8009db4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f856 	bl	8009de0 <UART_WaitOnFlagUntilTimeout>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d03c      	beq.n	8009db4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	e853 3f00 	ldrex	r3, [r3]
 8009d46:	623b      	str	r3, [r7, #32]
   return(result);
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d58:	633b      	str	r3, [r7, #48]	; 0x30
 8009d5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d60:	e841 2300 	strex	r3, r2, [r1]
 8009d64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e6      	bne.n	8009d3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3308      	adds	r3, #8
 8009d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3308      	adds	r3, #8
 8009d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d8c:	61fa      	str	r2, [r7, #28]
 8009d8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d90:	69b9      	ldr	r1, [r7, #24]
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	e841 2300 	strex	r3, r2, [r1]
 8009d98:	617b      	str	r3, [r7, #20]
   return(result);
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1e5      	bne.n	8009d6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2220      	movs	r2, #32
 8009da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e011      	b.n	8009dd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3758      	adds	r7, #88	; 0x58
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	4613      	mov	r3, r2
 8009dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009df0:	e049      	b.n	8009e86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df8:	d045      	beq.n	8009e86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dfa:	f7f9 fedf 	bl	8003bbc <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d302      	bcc.n	8009e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e048      	b.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d031      	beq.n	8009e86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d110      	bne.n	8009e52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2208      	movs	r2, #8
 8009e36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 f8ed 	bl	800a018 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2208      	movs	r2, #8
 8009e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e029      	b.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e60:	d111      	bne.n	8009e86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f8d3 	bl	800a018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2220      	movs	r2, #32
 8009e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e00f      	b.n	8009ea6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	bf0c      	ite	eq
 8009e96:	2301      	moveq	r3, #1
 8009e98:	2300      	movne	r3, #0
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d0a6      	beq.n	8009df2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b097      	sub	sp, #92	; 0x5c
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	88fa      	ldrh	r2, [r7, #6]
 8009ec8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	88fa      	ldrh	r2, [r7, #6]
 8009ed0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee2:	d10e      	bne.n	8009f02 <UART_Start_Receive_IT+0x52>
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d105      	bne.n	8009ef8 <UART_Start_Receive_IT+0x48>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ef6:	e01a      	b.n	8009f2e <UART_Start_Receive_IT+0x7e>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	22ff      	movs	r2, #255	; 0xff
 8009efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f00:	e015      	b.n	8009f2e <UART_Start_Receive_IT+0x7e>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10d      	bne.n	8009f26 <UART_Start_Receive_IT+0x76>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <UART_Start_Receive_IT+0x6c>
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	22ff      	movs	r2, #255	; 0xff
 8009f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f1a:	e008      	b.n	8009f2e <UART_Start_Receive_IT+0x7e>
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	227f      	movs	r2, #127	; 0x7f
 8009f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f24:	e003      	b.n	8009f2e <UART_Start_Receive_IT+0x7e>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2222      	movs	r2, #34	; 0x22
 8009f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3308      	adds	r3, #8
 8009f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	f043 0301 	orr.w	r3, r3, #1
 8009f54:	657b      	str	r3, [r7, #84]	; 0x54
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e5      	bne.n	8009f3e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7a:	d107      	bne.n	8009f8c <UART_Start_Receive_IT+0xdc>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d103      	bne.n	8009f8c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a22      	ldr	r2, [pc, #136]	; (800a010 <UART_Start_Receive_IT+0x160>)
 8009f88:	669a      	str	r2, [r3, #104]	; 0x68
 8009f8a:	e002      	b.n	8009f92 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a21      	ldr	r2, [pc, #132]	; (800a014 <UART_Start_Receive_IT+0x164>)
 8009f90:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d019      	beq.n	8009fce <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009fba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <UART_Start_Receive_IT+0xea>
 8009fcc:	e018      	b.n	800a000 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	613b      	str	r3, [r7, #16]
   return(result);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f043 0320 	orr.w	r3, r3, #32
 8009fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69f9      	ldr	r1, [r7, #28]
 8009ff2:	6a3a      	ldr	r2, [r7, #32]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	375c      	adds	r7, #92	; 0x5c
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	0800a309 	.word	0x0800a309
 800a014:	0800a161 	.word	0x0800a161

0800a018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a018:	b480      	push	{r7}
 800a01a:	b095      	sub	sp, #84	; 0x54
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a034:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a03e:	643b      	str	r3, [r7, #64]	; 0x40
 800a040:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e6      	bne.n	800a020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3308      	adds	r3, #8
 800a058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	e853 3f00 	ldrex	r3, [r3]
 800a060:	61fb      	str	r3, [r7, #28]
   return(result);
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	f023 0301 	bic.w	r3, r3, #1
 800a068:	64bb      	str	r3, [r7, #72]	; 0x48
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a072:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e5      	bne.n	800a052 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d118      	bne.n	800a0c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	e853 3f00 	ldrex	r3, [r3]
 800a09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	f023 0310 	bic.w	r3, r3, #16
 800a0a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6979      	ldr	r1, [r7, #20]
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e6      	bne.n	800a08e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a0d4:	bf00      	nop
 800a0d6:	3754      	adds	r7, #84	; 0x54
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7ff fb3a 	bl	8009778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b088      	sub	sp, #32
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	e853 3f00 	ldrex	r3, [r3]
 800a120:	60bb      	str	r3, [r7, #8]
   return(result);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a128:	61fb      	str	r3, [r7, #28]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	61bb      	str	r3, [r7, #24]
 800a134:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6979      	ldr	r1, [r7, #20]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	613b      	str	r3, [r7, #16]
   return(result);
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e6      	bne.n	800a114 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fb06 	bl	8009764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a158:	bf00      	nop
 800a15a:	3720      	adds	r7, #32
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b09c      	sub	sp, #112	; 0x70
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a16e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a178:	2b22      	cmp	r3, #34	; 0x22
 800a17a:	f040 80b9 	bne.w	800a2f0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a184:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a188:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a18c:	b2d9      	uxtb	r1, r3
 800a18e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a192:	b2da      	uxtb	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a198:	400a      	ands	r2, r1
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 809c 	bne.w	800a300 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e6      	bne.n	800a1c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20c:	f023 0301 	bic.w	r3, r3, #1
 800a210:	667b      	str	r3, [r7, #100]	; 0x64
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a21a:	647a      	str	r2, [r7, #68]	; 0x44
 800a21c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a220:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e5      	bne.n	800a1fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d018      	beq.n	800a282 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	623b      	str	r3, [r7, #32]
   return(result);
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a264:	663b      	str	r3, [r7, #96]	; 0x60
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a26e:	633b      	str	r3, [r7, #48]	; 0x30
 800a270:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e6      	bne.n	800a250 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a286:	2b01      	cmp	r3, #1
 800a288:	d12e      	bne.n	800a2e8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f023 0310 	bic.w	r3, r3, #16
 800a2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ae:	61fb      	str	r3, [r7, #28]
 800a2b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	69b9      	ldr	r1, [r7, #24]
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	617b      	str	r3, [r7, #20]
   return(result);
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e6      	bne.n	800a290 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	d103      	bne.n	800a2d8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff fa53 	bl	800978c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2e6:	e00b      	b.n	800a300 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7f8 fd7b 	bl	8002de4 <HAL_UART_RxCpltCallback>
}
 800a2ee:	e007      	b.n	800a300 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	699a      	ldr	r2, [r3, #24]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f042 0208 	orr.w	r2, r2, #8
 800a2fe:	619a      	str	r2, [r3, #24]
}
 800a300:	bf00      	nop
 800a302:	3770      	adds	r7, #112	; 0x70
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b09c      	sub	sp, #112	; 0x70
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a316:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a320:	2b22      	cmp	r3, #34	; 0x22
 800a322:	f040 80b9 	bne.w	800a498 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a32c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a334:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a336:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a33a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a33e:	4013      	ands	r3, r2
 800a340:	b29a      	uxth	r2, r3
 800a342:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a344:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a34a:	1c9a      	adds	r2, r3, #2
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a356:	b29b      	uxth	r3, r3
 800a358:	3b01      	subs	r3, #1
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a368:	b29b      	uxth	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f040 809c 	bne.w	800a4a8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a384:	667b      	str	r3, [r7, #100]	; 0x64
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a38e:	657b      	str	r3, [r7, #84]	; 0x54
 800a390:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a39c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e6      	bne.n	800a370 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	f023 0301 	bic.w	r3, r3, #1
 800a3b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3c2:	643a      	str	r2, [r7, #64]	; 0x40
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e5      	bne.n	800a3a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d018      	beq.n	800a42a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	e853 3f00 	ldrex	r3, [r3]
 800a404:	61fb      	str	r3, [r7, #28]
   return(result);
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a40c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a418:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a41c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a41e:	e841 2300 	strex	r3, r2, [r1]
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1e6      	bne.n	800a3f8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d12e      	bne.n	800a490 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	e853 3f00 	ldrex	r3, [r3]
 800a444:	60bb      	str	r3, [r7, #8]
   return(result);
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	f023 0310 	bic.w	r3, r3, #16
 800a44c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a456:	61bb      	str	r3, [r7, #24]
 800a458:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45a:	6979      	ldr	r1, [r7, #20]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	613b      	str	r3, [r7, #16]
   return(result);
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e6      	bne.n	800a438 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b10      	cmp	r3, #16
 800a476:	d103      	bne.n	800a480 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2210      	movs	r2, #16
 800a47e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff f97f 	bl	800978c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a48e:	e00b      	b.n	800a4a8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7f8 fca7 	bl	8002de4 <HAL_UART_RxCpltCallback>
}
 800a496:	e007      	b.n	800a4a8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0208 	orr.w	r2, r2, #8
 800a4a6:	619a      	str	r2, [r3, #24]
}
 800a4a8:	bf00      	nop
 800a4aa:	3770      	adds	r7, #112	; 0x70
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a4d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	43db      	mvns	r3, r3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	f107 0014 	add.w	r0, r7, #20
 800a508:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	b004      	add	sp, #16
 800a53a:	4770      	bx	lr

0800a53c <__errno>:
 800a53c:	4b01      	ldr	r3, [pc, #4]	; (800a544 <__errno+0x8>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20000110 	.word	0x20000110

0800a548 <__libc_init_array>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4d0d      	ldr	r5, [pc, #52]	; (800a580 <__libc_init_array+0x38>)
 800a54c:	4c0d      	ldr	r4, [pc, #52]	; (800a584 <__libc_init_array+0x3c>)
 800a54e:	1b64      	subs	r4, r4, r5
 800a550:	10a4      	asrs	r4, r4, #2
 800a552:	2600      	movs	r6, #0
 800a554:	42a6      	cmp	r6, r4
 800a556:	d109      	bne.n	800a56c <__libc_init_array+0x24>
 800a558:	4d0b      	ldr	r5, [pc, #44]	; (800a588 <__libc_init_array+0x40>)
 800a55a:	4c0c      	ldr	r4, [pc, #48]	; (800a58c <__libc_init_array+0x44>)
 800a55c:	f006 fdb2 	bl	80110c4 <_init>
 800a560:	1b64      	subs	r4, r4, r5
 800a562:	10a4      	asrs	r4, r4, #2
 800a564:	2600      	movs	r6, #0
 800a566:	42a6      	cmp	r6, r4
 800a568:	d105      	bne.n	800a576 <__libc_init_array+0x2e>
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a570:	4798      	blx	r3
 800a572:	3601      	adds	r6, #1
 800a574:	e7ee      	b.n	800a554 <__libc_init_array+0xc>
 800a576:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57a:	4798      	blx	r3
 800a57c:	3601      	adds	r6, #1
 800a57e:	e7f2      	b.n	800a566 <__libc_init_array+0x1e>
 800a580:	08011b60 	.word	0x08011b60
 800a584:	08011b60 	.word	0x08011b60
 800a588:	08011b60 	.word	0x08011b60
 800a58c:	08011b64 	.word	0x08011b64

0800a590 <localtime>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <localtime+0x30>)
 800a594:	681d      	ldr	r5, [r3, #0]
 800a596:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a598:	4604      	mov	r4, r0
 800a59a:	b953      	cbnz	r3, 800a5b2 <localtime+0x22>
 800a59c:	2024      	movs	r0, #36	; 0x24
 800a59e:	f000 f909 	bl	800a7b4 <malloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	63e8      	str	r0, [r5, #60]	; 0x3c
 800a5a6:	b920      	cbnz	r0, 800a5b2 <localtime+0x22>
 800a5a8:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <localtime+0x34>)
 800a5aa:	4807      	ldr	r0, [pc, #28]	; (800a5c8 <localtime+0x38>)
 800a5ac:	2132      	movs	r1, #50	; 0x32
 800a5ae:	f002 fa43 	bl	800ca38 <__assert_func>
 800a5b2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5ba:	f000 b807 	b.w	800a5cc <localtime_r>
 800a5be:	bf00      	nop
 800a5c0:	20000110 	.word	0x20000110
 800a5c4:	080113d4 	.word	0x080113d4
 800a5c8:	080113eb 	.word	0x080113eb

0800a5cc <localtime_r>:
 800a5cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	9101      	str	r1, [sp, #4]
 800a5d4:	f003 fcb2 	bl	800df3c <__gettzinfo>
 800a5d8:	9901      	ldr	r1, [sp, #4]
 800a5da:	4605      	mov	r5, r0
 800a5dc:	4640      	mov	r0, r8
 800a5de:	f003 fcb1 	bl	800df44 <gmtime_r>
 800a5e2:	6943      	ldr	r3, [r0, #20]
 800a5e4:	0799      	lsls	r1, r3, #30
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800a5ec:	d105      	bne.n	800a5fa <localtime_r+0x2e>
 800a5ee:	2264      	movs	r2, #100	; 0x64
 800a5f0:	fb97 f3f2 	sdiv	r3, r7, r2
 800a5f4:	fb02 7313 	mls	r3, r2, r3, r7
 800a5f8:	bb73      	cbnz	r3, 800a658 <localtime_r+0x8c>
 800a5fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a5fe:	fb97 f6f3 	sdiv	r6, r7, r3
 800a602:	fb03 7616 	mls	r6, r3, r6, r7
 800a606:	fab6 f386 	clz	r3, r6
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	4e67      	ldr	r6, [pc, #412]	; (800a7ac <localtime_r+0x1e0>)
 800a60e:	2230      	movs	r2, #48	; 0x30
 800a610:	fb02 6603 	mla	r6, r2, r3, r6
 800a614:	f002 f86c 	bl	800c6f0 <__tz_lock>
 800a618:	f002 f876 	bl	800c708 <_tzset_unlocked>
 800a61c:	4b64      	ldr	r3, [pc, #400]	; (800a7b0 <localtime_r+0x1e4>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	b34b      	cbz	r3, 800a676 <localtime_r+0xaa>
 800a622:	686b      	ldr	r3, [r5, #4]
 800a624:	42bb      	cmp	r3, r7
 800a626:	d119      	bne.n	800a65c <localtime_r+0x90>
 800a628:	682f      	ldr	r7, [r5, #0]
 800a62a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a62e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800a632:	b9df      	cbnz	r7, 800a66c <localtime_r+0xa0>
 800a634:	4282      	cmp	r2, r0
 800a636:	eb73 0101 	sbcs.w	r1, r3, r1
 800a63a:	da23      	bge.n	800a684 <localtime_r+0xb8>
 800a63c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800a640:	4282      	cmp	r2, r0
 800a642:	eb73 0701 	sbcs.w	r7, r3, r1
 800a646:	bfb4      	ite	lt
 800a648:	2701      	movlt	r7, #1
 800a64a:	2700      	movge	r7, #0
 800a64c:	4282      	cmp	r2, r0
 800a64e:	418b      	sbcs	r3, r1
 800a650:	6227      	str	r7, [r4, #32]
 800a652:	db19      	blt.n	800a688 <localtime_r+0xbc>
 800a654:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a656:	e018      	b.n	800a68a <localtime_r+0xbe>
 800a658:	2301      	movs	r3, #1
 800a65a:	e7d7      	b.n	800a60c <localtime_r+0x40>
 800a65c:	4638      	mov	r0, r7
 800a65e:	f001 ff9d 	bl	800c59c <__tzcalc_limits>
 800a662:	2800      	cmp	r0, #0
 800a664:	d1e0      	bne.n	800a628 <localtime_r+0x5c>
 800a666:	f04f 33ff 	mov.w	r3, #4294967295
 800a66a:	e004      	b.n	800a676 <localtime_r+0xaa>
 800a66c:	4282      	cmp	r2, r0
 800a66e:	eb73 0101 	sbcs.w	r1, r3, r1
 800a672:	da02      	bge.n	800a67a <localtime_r+0xae>
 800a674:	2300      	movs	r3, #0
 800a676:	6223      	str	r3, [r4, #32]
 800a678:	e7ec      	b.n	800a654 <localtime_r+0x88>
 800a67a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800a67e:	4282      	cmp	r2, r0
 800a680:	418b      	sbcs	r3, r1
 800a682:	daf7      	bge.n	800a674 <localtime_r+0xa8>
 800a684:	2301      	movs	r3, #1
 800a686:	6223      	str	r3, [r4, #32]
 800a688:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a68a:	6861      	ldr	r1, [r4, #4]
 800a68c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800a690:	203c      	movs	r0, #60	; 0x3c
 800a692:	fb93 f5f2 	sdiv	r5, r3, r2
 800a696:	fb02 3315 	mls	r3, r2, r5, r3
 800a69a:	fb93 f2f0 	sdiv	r2, r3, r0
 800a69e:	fb00 3012 	mls	r0, r0, r2, r3
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	1a89      	subs	r1, r1, r2
 800a6a6:	68a2      	ldr	r2, [r4, #8]
 800a6a8:	6061      	str	r1, [r4, #4]
 800a6aa:	1a1b      	subs	r3, r3, r0
 800a6ac:	1b52      	subs	r2, r2, r5
 800a6ae:	2b3b      	cmp	r3, #59	; 0x3b
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	60a2      	str	r2, [r4, #8]
 800a6b4:	dd35      	ble.n	800a722 <localtime_r+0x156>
 800a6b6:	3101      	adds	r1, #1
 800a6b8:	6061      	str	r1, [r4, #4]
 800a6ba:	3b3c      	subs	r3, #60	; 0x3c
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	6863      	ldr	r3, [r4, #4]
 800a6c0:	2b3b      	cmp	r3, #59	; 0x3b
 800a6c2:	dd34      	ble.n	800a72e <localtime_r+0x162>
 800a6c4:	3201      	adds	r2, #1
 800a6c6:	60a2      	str	r2, [r4, #8]
 800a6c8:	3b3c      	subs	r3, #60	; 0x3c
 800a6ca:	6063      	str	r3, [r4, #4]
 800a6cc:	68a3      	ldr	r3, [r4, #8]
 800a6ce:	2b17      	cmp	r3, #23
 800a6d0:	dd33      	ble.n	800a73a <localtime_r+0x16e>
 800a6d2:	69e2      	ldr	r2, [r4, #28]
 800a6d4:	3201      	adds	r2, #1
 800a6d6:	61e2      	str	r2, [r4, #28]
 800a6d8:	69a2      	ldr	r2, [r4, #24]
 800a6da:	3201      	adds	r2, #1
 800a6dc:	2a06      	cmp	r2, #6
 800a6de:	bfc8      	it	gt
 800a6e0:	2200      	movgt	r2, #0
 800a6e2:	61a2      	str	r2, [r4, #24]
 800a6e4:	68e2      	ldr	r2, [r4, #12]
 800a6e6:	3b18      	subs	r3, #24
 800a6e8:	3201      	adds	r2, #1
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6923      	ldr	r3, [r4, #16]
 800a6ee:	60e2      	str	r2, [r4, #12]
 800a6f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800a6f4:	428a      	cmp	r2, r1
 800a6f6:	dd0e      	ble.n	800a716 <localtime_r+0x14a>
 800a6f8:	2b0b      	cmp	r3, #11
 800a6fa:	eba2 0201 	sub.w	r2, r2, r1
 800a6fe:	60e2      	str	r2, [r4, #12]
 800a700:	f103 0201 	add.w	r2, r3, #1
 800a704:	bf09      	itett	eq
 800a706:	6963      	ldreq	r3, [r4, #20]
 800a708:	6122      	strne	r2, [r4, #16]
 800a70a:	2200      	moveq	r2, #0
 800a70c:	3301      	addeq	r3, #1
 800a70e:	bf02      	ittt	eq
 800a710:	6122      	streq	r2, [r4, #16]
 800a712:	6163      	streq	r3, [r4, #20]
 800a714:	61e2      	streq	r2, [r4, #28]
 800a716:	f001 fff1 	bl	800c6fc <__tz_unlock>
 800a71a:	4620      	mov	r0, r4
 800a71c:	b002      	add	sp, #8
 800a71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a722:	2b00      	cmp	r3, #0
 800a724:	dacb      	bge.n	800a6be <localtime_r+0xf2>
 800a726:	3901      	subs	r1, #1
 800a728:	6061      	str	r1, [r4, #4]
 800a72a:	333c      	adds	r3, #60	; 0x3c
 800a72c:	e7c6      	b.n	800a6bc <localtime_r+0xf0>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dacc      	bge.n	800a6cc <localtime_r+0x100>
 800a732:	3a01      	subs	r2, #1
 800a734:	60a2      	str	r2, [r4, #8]
 800a736:	333c      	adds	r3, #60	; 0x3c
 800a738:	e7c7      	b.n	800a6ca <localtime_r+0xfe>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	daeb      	bge.n	800a716 <localtime_r+0x14a>
 800a73e:	69e2      	ldr	r2, [r4, #28]
 800a740:	3a01      	subs	r2, #1
 800a742:	61e2      	str	r2, [r4, #28]
 800a744:	69a2      	ldr	r2, [r4, #24]
 800a746:	3a01      	subs	r2, #1
 800a748:	bf48      	it	mi
 800a74a:	2206      	movmi	r2, #6
 800a74c:	61a2      	str	r2, [r4, #24]
 800a74e:	68e2      	ldr	r2, [r4, #12]
 800a750:	3318      	adds	r3, #24
 800a752:	3a01      	subs	r2, #1
 800a754:	60e2      	str	r2, [r4, #12]
 800a756:	60a3      	str	r3, [r4, #8]
 800a758:	2a00      	cmp	r2, #0
 800a75a:	d1dc      	bne.n	800a716 <localtime_r+0x14a>
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	3b01      	subs	r3, #1
 800a760:	d405      	bmi.n	800a76e <localtime_r+0x1a2>
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800a76a:	60e3      	str	r3, [r4, #12]
 800a76c:	e7d3      	b.n	800a716 <localtime_r+0x14a>
 800a76e:	230b      	movs	r3, #11
 800a770:	6123      	str	r3, [r4, #16]
 800a772:	6963      	ldr	r3, [r4, #20]
 800a774:	1e5a      	subs	r2, r3, #1
 800a776:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800a77a:	6162      	str	r2, [r4, #20]
 800a77c:	079a      	lsls	r2, r3, #30
 800a77e:	d105      	bne.n	800a78c <localtime_r+0x1c0>
 800a780:	2164      	movs	r1, #100	; 0x64
 800a782:	fb93 f2f1 	sdiv	r2, r3, r1
 800a786:	fb01 3212 	mls	r2, r1, r2, r3
 800a78a:	b962      	cbnz	r2, 800a7a6 <localtime_r+0x1da>
 800a78c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a790:	fb93 f1f2 	sdiv	r1, r3, r2
 800a794:	fb02 3311 	mls	r3, r2, r1, r3
 800a798:	fab3 f383 	clz	r3, r3
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a7a2:	61e3      	str	r3, [r4, #28]
 800a7a4:	e7de      	b.n	800a764 <localtime_r+0x198>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e7f9      	b.n	800a79e <localtime_r+0x1d2>
 800a7aa:	bf00      	nop
 800a7ac:	08011448 	.word	0x08011448
 800a7b0:	20000af0 	.word	0x20000af0

0800a7b4 <malloc>:
 800a7b4:	4b02      	ldr	r3, [pc, #8]	; (800a7c0 <malloc+0xc>)
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	f000 b87f 	b.w	800a8bc <_malloc_r>
 800a7be:	bf00      	nop
 800a7c0:	20000110 	.word	0x20000110

0800a7c4 <free>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <free+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f000 b80b 	b.w	800a7e4 <_free_r>
 800a7ce:	bf00      	nop
 800a7d0:	20000110 	.word	0x20000110

0800a7d4 <memset>:
 800a7d4:	4402      	add	r2, r0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d100      	bne.n	800a7de <memset+0xa>
 800a7dc:	4770      	bx	lr
 800a7de:	f803 1b01 	strb.w	r1, [r3], #1
 800a7e2:	e7f9      	b.n	800a7d8 <memset+0x4>

0800a7e4 <_free_r>:
 800a7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	d044      	beq.n	800a874 <_free_r+0x90>
 800a7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ee:	9001      	str	r0, [sp, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7f6:	bfb8      	it	lt
 800a7f8:	18e4      	addlt	r4, r4, r3
 800a7fa:	f003 fc8b 	bl	800e114 <__malloc_lock>
 800a7fe:	4a1e      	ldr	r2, [pc, #120]	; (800a878 <_free_r+0x94>)
 800a800:	9801      	ldr	r0, [sp, #4]
 800a802:	6813      	ldr	r3, [r2, #0]
 800a804:	b933      	cbnz	r3, 800a814 <_free_r+0x30>
 800a806:	6063      	str	r3, [r4, #4]
 800a808:	6014      	str	r4, [r2, #0]
 800a80a:	b003      	add	sp, #12
 800a80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a810:	f003 bc86 	b.w	800e120 <__malloc_unlock>
 800a814:	42a3      	cmp	r3, r4
 800a816:	d908      	bls.n	800a82a <_free_r+0x46>
 800a818:	6825      	ldr	r5, [r4, #0]
 800a81a:	1961      	adds	r1, r4, r5
 800a81c:	428b      	cmp	r3, r1
 800a81e:	bf01      	itttt	eq
 800a820:	6819      	ldreq	r1, [r3, #0]
 800a822:	685b      	ldreq	r3, [r3, #4]
 800a824:	1949      	addeq	r1, r1, r5
 800a826:	6021      	streq	r1, [r4, #0]
 800a828:	e7ed      	b.n	800a806 <_free_r+0x22>
 800a82a:	461a      	mov	r2, r3
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	b10b      	cbz	r3, 800a834 <_free_r+0x50>
 800a830:	42a3      	cmp	r3, r4
 800a832:	d9fa      	bls.n	800a82a <_free_r+0x46>
 800a834:	6811      	ldr	r1, [r2, #0]
 800a836:	1855      	adds	r5, r2, r1
 800a838:	42a5      	cmp	r5, r4
 800a83a:	d10b      	bne.n	800a854 <_free_r+0x70>
 800a83c:	6824      	ldr	r4, [r4, #0]
 800a83e:	4421      	add	r1, r4
 800a840:	1854      	adds	r4, r2, r1
 800a842:	42a3      	cmp	r3, r4
 800a844:	6011      	str	r1, [r2, #0]
 800a846:	d1e0      	bne.n	800a80a <_free_r+0x26>
 800a848:	681c      	ldr	r4, [r3, #0]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	6053      	str	r3, [r2, #4]
 800a84e:	4421      	add	r1, r4
 800a850:	6011      	str	r1, [r2, #0]
 800a852:	e7da      	b.n	800a80a <_free_r+0x26>
 800a854:	d902      	bls.n	800a85c <_free_r+0x78>
 800a856:	230c      	movs	r3, #12
 800a858:	6003      	str	r3, [r0, #0]
 800a85a:	e7d6      	b.n	800a80a <_free_r+0x26>
 800a85c:	6825      	ldr	r5, [r4, #0]
 800a85e:	1961      	adds	r1, r4, r5
 800a860:	428b      	cmp	r3, r1
 800a862:	bf04      	itt	eq
 800a864:	6819      	ldreq	r1, [r3, #0]
 800a866:	685b      	ldreq	r3, [r3, #4]
 800a868:	6063      	str	r3, [r4, #4]
 800a86a:	bf04      	itt	eq
 800a86c:	1949      	addeq	r1, r1, r5
 800a86e:	6021      	streq	r1, [r4, #0]
 800a870:	6054      	str	r4, [r2, #4]
 800a872:	e7ca      	b.n	800a80a <_free_r+0x26>
 800a874:	b003      	add	sp, #12
 800a876:	bd30      	pop	{r4, r5, pc}
 800a878:	20000acc 	.word	0x20000acc

0800a87c <sbrk_aligned>:
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	4e0e      	ldr	r6, [pc, #56]	; (800a8b8 <sbrk_aligned+0x3c>)
 800a880:	460c      	mov	r4, r1
 800a882:	6831      	ldr	r1, [r6, #0]
 800a884:	4605      	mov	r5, r0
 800a886:	b911      	cbnz	r1, 800a88e <sbrk_aligned+0x12>
 800a888:	f000 ff06 	bl	800b698 <_sbrk_r>
 800a88c:	6030      	str	r0, [r6, #0]
 800a88e:	4621      	mov	r1, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f000 ff01 	bl	800b698 <_sbrk_r>
 800a896:	1c43      	adds	r3, r0, #1
 800a898:	d00a      	beq.n	800a8b0 <sbrk_aligned+0x34>
 800a89a:	1cc4      	adds	r4, r0, #3
 800a89c:	f024 0403 	bic.w	r4, r4, #3
 800a8a0:	42a0      	cmp	r0, r4
 800a8a2:	d007      	beq.n	800a8b4 <sbrk_aligned+0x38>
 800a8a4:	1a21      	subs	r1, r4, r0
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f000 fef6 	bl	800b698 <_sbrk_r>
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d101      	bne.n	800a8b4 <sbrk_aligned+0x38>
 800a8b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	20000ad0 	.word	0x20000ad0

0800a8bc <_malloc_r>:
 800a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c0:	1ccd      	adds	r5, r1, #3
 800a8c2:	f025 0503 	bic.w	r5, r5, #3
 800a8c6:	3508      	adds	r5, #8
 800a8c8:	2d0c      	cmp	r5, #12
 800a8ca:	bf38      	it	cc
 800a8cc:	250c      	movcc	r5, #12
 800a8ce:	2d00      	cmp	r5, #0
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	db01      	blt.n	800a8d8 <_malloc_r+0x1c>
 800a8d4:	42a9      	cmp	r1, r5
 800a8d6:	d905      	bls.n	800a8e4 <_malloc_r+0x28>
 800a8d8:	230c      	movs	r3, #12
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	2600      	movs	r6, #0
 800a8de:	4630      	mov	r0, r6
 800a8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e4:	4e2e      	ldr	r6, [pc, #184]	; (800a9a0 <_malloc_r+0xe4>)
 800a8e6:	f003 fc15 	bl	800e114 <__malloc_lock>
 800a8ea:	6833      	ldr	r3, [r6, #0]
 800a8ec:	461c      	mov	r4, r3
 800a8ee:	bb34      	cbnz	r4, 800a93e <_malloc_r+0x82>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f7ff ffc2 	bl	800a87c <sbrk_aligned>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	4604      	mov	r4, r0
 800a8fc:	d14d      	bne.n	800a99a <_malloc_r+0xde>
 800a8fe:	6834      	ldr	r4, [r6, #0]
 800a900:	4626      	mov	r6, r4
 800a902:	2e00      	cmp	r6, #0
 800a904:	d140      	bne.n	800a988 <_malloc_r+0xcc>
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	4631      	mov	r1, r6
 800a90a:	4638      	mov	r0, r7
 800a90c:	eb04 0803 	add.w	r8, r4, r3
 800a910:	f000 fec2 	bl	800b698 <_sbrk_r>
 800a914:	4580      	cmp	r8, r0
 800a916:	d13a      	bne.n	800a98e <_malloc_r+0xd2>
 800a918:	6821      	ldr	r1, [r4, #0]
 800a91a:	3503      	adds	r5, #3
 800a91c:	1a6d      	subs	r5, r5, r1
 800a91e:	f025 0503 	bic.w	r5, r5, #3
 800a922:	3508      	adds	r5, #8
 800a924:	2d0c      	cmp	r5, #12
 800a926:	bf38      	it	cc
 800a928:	250c      	movcc	r5, #12
 800a92a:	4629      	mov	r1, r5
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7ff ffa5 	bl	800a87c <sbrk_aligned>
 800a932:	3001      	adds	r0, #1
 800a934:	d02b      	beq.n	800a98e <_malloc_r+0xd2>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	442b      	add	r3, r5
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	e00e      	b.n	800a95c <_malloc_r+0xa0>
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	1b52      	subs	r2, r2, r5
 800a942:	d41e      	bmi.n	800a982 <_malloc_r+0xc6>
 800a944:	2a0b      	cmp	r2, #11
 800a946:	d916      	bls.n	800a976 <_malloc_r+0xba>
 800a948:	1961      	adds	r1, r4, r5
 800a94a:	42a3      	cmp	r3, r4
 800a94c:	6025      	str	r5, [r4, #0]
 800a94e:	bf18      	it	ne
 800a950:	6059      	strne	r1, [r3, #4]
 800a952:	6863      	ldr	r3, [r4, #4]
 800a954:	bf08      	it	eq
 800a956:	6031      	streq	r1, [r6, #0]
 800a958:	5162      	str	r2, [r4, r5]
 800a95a:	604b      	str	r3, [r1, #4]
 800a95c:	4638      	mov	r0, r7
 800a95e:	f104 060b 	add.w	r6, r4, #11
 800a962:	f003 fbdd 	bl	800e120 <__malloc_unlock>
 800a966:	f026 0607 	bic.w	r6, r6, #7
 800a96a:	1d23      	adds	r3, r4, #4
 800a96c:	1af2      	subs	r2, r6, r3
 800a96e:	d0b6      	beq.n	800a8de <_malloc_r+0x22>
 800a970:	1b9b      	subs	r3, r3, r6
 800a972:	50a3      	str	r3, [r4, r2]
 800a974:	e7b3      	b.n	800a8de <_malloc_r+0x22>
 800a976:	6862      	ldr	r2, [r4, #4]
 800a978:	42a3      	cmp	r3, r4
 800a97a:	bf0c      	ite	eq
 800a97c:	6032      	streq	r2, [r6, #0]
 800a97e:	605a      	strne	r2, [r3, #4]
 800a980:	e7ec      	b.n	800a95c <_malloc_r+0xa0>
 800a982:	4623      	mov	r3, r4
 800a984:	6864      	ldr	r4, [r4, #4]
 800a986:	e7b2      	b.n	800a8ee <_malloc_r+0x32>
 800a988:	4634      	mov	r4, r6
 800a98a:	6876      	ldr	r6, [r6, #4]
 800a98c:	e7b9      	b.n	800a902 <_malloc_r+0x46>
 800a98e:	230c      	movs	r3, #12
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	4638      	mov	r0, r7
 800a994:	f003 fbc4 	bl	800e120 <__malloc_unlock>
 800a998:	e7a1      	b.n	800a8de <_malloc_r+0x22>
 800a99a:	6025      	str	r5, [r4, #0]
 800a99c:	e7de      	b.n	800a95c <_malloc_r+0xa0>
 800a99e:	bf00      	nop
 800a9a0:	20000acc 	.word	0x20000acc

0800a9a4 <__cvt>:
 800a9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	ec55 4b10 	vmov	r4, r5, d0
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	460e      	mov	r6, r1
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	bfbb      	ittet	lt
 800a9b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a9ba:	461d      	movlt	r5, r3
 800a9bc:	2300      	movge	r3, #0
 800a9be:	232d      	movlt	r3, #45	; 0x2d
 800a9c0:	700b      	strb	r3, [r1, #0]
 800a9c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9c8:	4691      	mov	r9, r2
 800a9ca:	f023 0820 	bic.w	r8, r3, #32
 800a9ce:	bfbc      	itt	lt
 800a9d0:	4622      	movlt	r2, r4
 800a9d2:	4614      	movlt	r4, r2
 800a9d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9d8:	d005      	beq.n	800a9e6 <__cvt+0x42>
 800a9da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9de:	d100      	bne.n	800a9e2 <__cvt+0x3e>
 800a9e0:	3601      	adds	r6, #1
 800a9e2:	2102      	movs	r1, #2
 800a9e4:	e000      	b.n	800a9e8 <__cvt+0x44>
 800a9e6:	2103      	movs	r1, #3
 800a9e8:	ab03      	add	r3, sp, #12
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	ab02      	add	r3, sp, #8
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	ec45 4b10 	vmov	d0, r4, r5
 800a9f4:	4653      	mov	r3, sl
 800a9f6:	4632      	mov	r2, r6
 800a9f8:	f002 f8da 	bl	800cbb0 <_dtoa_r>
 800a9fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aa00:	4607      	mov	r7, r0
 800aa02:	d102      	bne.n	800aa0a <__cvt+0x66>
 800aa04:	f019 0f01 	tst.w	r9, #1
 800aa08:	d022      	beq.n	800aa50 <__cvt+0xac>
 800aa0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aa0e:	eb07 0906 	add.w	r9, r7, r6
 800aa12:	d110      	bne.n	800aa36 <__cvt+0x92>
 800aa14:	783b      	ldrb	r3, [r7, #0]
 800aa16:	2b30      	cmp	r3, #48	; 0x30
 800aa18:	d10a      	bne.n	800aa30 <__cvt+0x8c>
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4620      	mov	r0, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	f7f6 f85b 	bl	8000adc <__aeabi_dcmpeq>
 800aa26:	b918      	cbnz	r0, 800aa30 <__cvt+0x8c>
 800aa28:	f1c6 0601 	rsb	r6, r6, #1
 800aa2c:	f8ca 6000 	str.w	r6, [sl]
 800aa30:	f8da 3000 	ldr.w	r3, [sl]
 800aa34:	4499      	add	r9, r3
 800aa36:	2200      	movs	r2, #0
 800aa38:	2300      	movs	r3, #0
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7f6 f84d 	bl	8000adc <__aeabi_dcmpeq>
 800aa42:	b108      	cbz	r0, 800aa48 <__cvt+0xa4>
 800aa44:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa48:	2230      	movs	r2, #48	; 0x30
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	454b      	cmp	r3, r9
 800aa4e:	d307      	bcc.n	800aa60 <__cvt+0xbc>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa54:	1bdb      	subs	r3, r3, r7
 800aa56:	4638      	mov	r0, r7
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	b004      	add	sp, #16
 800aa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa60:	1c59      	adds	r1, r3, #1
 800aa62:	9103      	str	r1, [sp, #12]
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	e7f0      	b.n	800aa4a <__cvt+0xa6>

0800aa68 <__exponent>:
 800aa68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2900      	cmp	r1, #0
 800aa6e:	bfb8      	it	lt
 800aa70:	4249      	neglt	r1, r1
 800aa72:	f803 2b02 	strb.w	r2, [r3], #2
 800aa76:	bfb4      	ite	lt
 800aa78:	222d      	movlt	r2, #45	; 0x2d
 800aa7a:	222b      	movge	r2, #43	; 0x2b
 800aa7c:	2909      	cmp	r1, #9
 800aa7e:	7042      	strb	r2, [r0, #1]
 800aa80:	dd2a      	ble.n	800aad8 <__exponent+0x70>
 800aa82:	f10d 0407 	add.w	r4, sp, #7
 800aa86:	46a4      	mov	ip, r4
 800aa88:	270a      	movs	r7, #10
 800aa8a:	46a6      	mov	lr, r4
 800aa8c:	460a      	mov	r2, r1
 800aa8e:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa92:	fb07 1516 	mls	r5, r7, r6, r1
 800aa96:	3530      	adds	r5, #48	; 0x30
 800aa98:	2a63      	cmp	r2, #99	; 0x63
 800aa9a:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	dcf1      	bgt.n	800aa8a <__exponent+0x22>
 800aaa6:	3130      	adds	r1, #48	; 0x30
 800aaa8:	f1ae 0502 	sub.w	r5, lr, #2
 800aaac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aab0:	1c44      	adds	r4, r0, #1
 800aab2:	4629      	mov	r1, r5
 800aab4:	4561      	cmp	r1, ip
 800aab6:	d30a      	bcc.n	800aace <__exponent+0x66>
 800aab8:	f10d 0209 	add.w	r2, sp, #9
 800aabc:	eba2 020e 	sub.w	r2, r2, lr
 800aac0:	4565      	cmp	r5, ip
 800aac2:	bf88      	it	hi
 800aac4:	2200      	movhi	r2, #0
 800aac6:	4413      	add	r3, r2
 800aac8:	1a18      	subs	r0, r3, r0
 800aaca:	b003      	add	sp, #12
 800aacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aace:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aad2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aad6:	e7ed      	b.n	800aab4 <__exponent+0x4c>
 800aad8:	2330      	movs	r3, #48	; 0x30
 800aada:	3130      	adds	r1, #48	; 0x30
 800aadc:	7083      	strb	r3, [r0, #2]
 800aade:	70c1      	strb	r1, [r0, #3]
 800aae0:	1d03      	adds	r3, r0, #4
 800aae2:	e7f1      	b.n	800aac8 <__exponent+0x60>

0800aae4 <_printf_float>:
 800aae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	ed2d 8b02 	vpush	{d8}
 800aaec:	b08d      	sub	sp, #52	; 0x34
 800aaee:	460c      	mov	r4, r1
 800aaf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	4605      	mov	r5, r0
 800aafa:	f003 facf 	bl	800e09c <_localeconv_r>
 800aafe:	f8d0 a000 	ldr.w	sl, [r0]
 800ab02:	4650      	mov	r0, sl
 800ab04:	f7f5 fb64 	bl	80001d0 <strlen>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	f8d8 3000 	ldr.w	r3, [r8]
 800ab14:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ab18:	3307      	adds	r3, #7
 800ab1a:	f023 0307 	bic.w	r3, r3, #7
 800ab1e:	f103 0208 	add.w	r2, r3, #8
 800ab22:	f8c8 2000 	str.w	r2, [r8]
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab3c:	ee08 0a10 	vmov	s16, r0
 800ab40:	4b9f      	ldr	r3, [pc, #636]	; (800adc0 <_printf_float+0x2dc>)
 800ab42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	f7f5 fff9 	bl	8000b40 <__aeabi_dcmpun>
 800ab4e:	bb88      	cbnz	r0, 800abb4 <_printf_float+0xd0>
 800ab50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab54:	4b9a      	ldr	r3, [pc, #616]	; (800adc0 <_printf_float+0x2dc>)
 800ab56:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5a:	f7f5 ffd3 	bl	8000b04 <__aeabi_dcmple>
 800ab5e:	bb48      	cbnz	r0, 800abb4 <_printf_float+0xd0>
 800ab60:	2200      	movs	r2, #0
 800ab62:	2300      	movs	r3, #0
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffc2 	bl	8000af0 <__aeabi_dcmplt>
 800ab6c:	b110      	cbz	r0, 800ab74 <_printf_float+0x90>
 800ab6e:	232d      	movs	r3, #45	; 0x2d
 800ab70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab74:	4b93      	ldr	r3, [pc, #588]	; (800adc4 <_printf_float+0x2e0>)
 800ab76:	4894      	ldr	r0, [pc, #592]	; (800adc8 <_printf_float+0x2e4>)
 800ab78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab7c:	bf94      	ite	ls
 800ab7e:	4698      	movls	r8, r3
 800ab80:	4680      	movhi	r8, r0
 800ab82:	2303      	movs	r3, #3
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	9b05      	ldr	r3, [sp, #20]
 800ab88:	f023 0204 	bic.w	r2, r3, #4
 800ab8c:	6022      	str	r2, [r4, #0]
 800ab8e:	f04f 0900 	mov.w	r9, #0
 800ab92:	9700      	str	r7, [sp, #0]
 800ab94:	4633      	mov	r3, r6
 800ab96:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab98:	4621      	mov	r1, r4
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	f000 f9d8 	bl	800af50 <_printf_common>
 800aba0:	3001      	adds	r0, #1
 800aba2:	f040 8090 	bne.w	800acc6 <_printf_float+0x1e2>
 800aba6:	f04f 30ff 	mov.w	r0, #4294967295
 800abaa:	b00d      	add	sp, #52	; 0x34
 800abac:	ecbd 8b02 	vpop	{d8}
 800abb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb4:	4642      	mov	r2, r8
 800abb6:	464b      	mov	r3, r9
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 ffc0 	bl	8000b40 <__aeabi_dcmpun>
 800abc0:	b140      	cbz	r0, 800abd4 <_printf_float+0xf0>
 800abc2:	464b      	mov	r3, r9
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfbc      	itt	lt
 800abc8:	232d      	movlt	r3, #45	; 0x2d
 800abca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800abce:	487f      	ldr	r0, [pc, #508]	; (800adcc <_printf_float+0x2e8>)
 800abd0:	4b7f      	ldr	r3, [pc, #508]	; (800add0 <_printf_float+0x2ec>)
 800abd2:	e7d1      	b.n	800ab78 <_printf_float+0x94>
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800abda:	9206      	str	r2, [sp, #24]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	d13f      	bne.n	800ac60 <_printf_float+0x17c>
 800abe0:	2306      	movs	r3, #6
 800abe2:	6063      	str	r3, [r4, #4]
 800abe4:	9b05      	ldr	r3, [sp, #20]
 800abe6:	6861      	ldr	r1, [r4, #4]
 800abe8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abec:	2300      	movs	r3, #0
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	ab0a      	add	r3, sp, #40	; 0x28
 800abf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abf6:	ab09      	add	r3, sp, #36	; 0x24
 800abf8:	ec49 8b10 	vmov	d0, r8, r9
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	6022      	str	r2, [r4, #0]
 800ac00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7ff fecd 	bl	800a9a4 <__cvt>
 800ac0a:	9b06      	ldr	r3, [sp, #24]
 800ac0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac0e:	2b47      	cmp	r3, #71	; 0x47
 800ac10:	4680      	mov	r8, r0
 800ac12:	d108      	bne.n	800ac26 <_printf_float+0x142>
 800ac14:	1cc8      	adds	r0, r1, #3
 800ac16:	db02      	blt.n	800ac1e <_printf_float+0x13a>
 800ac18:	6863      	ldr	r3, [r4, #4]
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	dd41      	ble.n	800aca2 <_printf_float+0x1be>
 800ac1e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ac22:	fa5f fb8b 	uxtb.w	fp, fp
 800ac26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac2a:	d820      	bhi.n	800ac6e <_printf_float+0x18a>
 800ac2c:	3901      	subs	r1, #1
 800ac2e:	465a      	mov	r2, fp
 800ac30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac34:	9109      	str	r1, [sp, #36]	; 0x24
 800ac36:	f7ff ff17 	bl	800aa68 <__exponent>
 800ac3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac3c:	1813      	adds	r3, r2, r0
 800ac3e:	2a01      	cmp	r2, #1
 800ac40:	4681      	mov	r9, r0
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	dc02      	bgt.n	800ac4c <_printf_float+0x168>
 800ac46:	6822      	ldr	r2, [r4, #0]
 800ac48:	07d2      	lsls	r2, r2, #31
 800ac4a:	d501      	bpl.n	800ac50 <_printf_float+0x16c>
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d09c      	beq.n	800ab92 <_printf_float+0xae>
 800ac58:	232d      	movs	r3, #45	; 0x2d
 800ac5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5e:	e798      	b.n	800ab92 <_printf_float+0xae>
 800ac60:	9a06      	ldr	r2, [sp, #24]
 800ac62:	2a47      	cmp	r2, #71	; 0x47
 800ac64:	d1be      	bne.n	800abe4 <_printf_float+0x100>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1bc      	bne.n	800abe4 <_printf_float+0x100>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e7b9      	b.n	800abe2 <_printf_float+0xfe>
 800ac6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac72:	d118      	bne.n	800aca6 <_printf_float+0x1c2>
 800ac74:	2900      	cmp	r1, #0
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	dd0b      	ble.n	800ac92 <_printf_float+0x1ae>
 800ac7a:	6121      	str	r1, [r4, #16]
 800ac7c:	b913      	cbnz	r3, 800ac84 <_printf_float+0x1a0>
 800ac7e:	6822      	ldr	r2, [r4, #0]
 800ac80:	07d0      	lsls	r0, r2, #31
 800ac82:	d502      	bpl.n	800ac8a <_printf_float+0x1a6>
 800ac84:	3301      	adds	r3, #1
 800ac86:	440b      	add	r3, r1
 800ac88:	6123      	str	r3, [r4, #16]
 800ac8a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac8c:	f04f 0900 	mov.w	r9, #0
 800ac90:	e7de      	b.n	800ac50 <_printf_float+0x16c>
 800ac92:	b913      	cbnz	r3, 800ac9a <_printf_float+0x1b6>
 800ac94:	6822      	ldr	r2, [r4, #0]
 800ac96:	07d2      	lsls	r2, r2, #31
 800ac98:	d501      	bpl.n	800ac9e <_printf_float+0x1ba>
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	e7f4      	b.n	800ac88 <_printf_float+0x1a4>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e7f2      	b.n	800ac88 <_printf_float+0x1a4>
 800aca2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aca8:	4299      	cmp	r1, r3
 800acaa:	db05      	blt.n	800acb8 <_printf_float+0x1d4>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	6121      	str	r1, [r4, #16]
 800acb0:	07d8      	lsls	r0, r3, #31
 800acb2:	d5ea      	bpl.n	800ac8a <_printf_float+0x1a6>
 800acb4:	1c4b      	adds	r3, r1, #1
 800acb6:	e7e7      	b.n	800ac88 <_printf_float+0x1a4>
 800acb8:	2900      	cmp	r1, #0
 800acba:	bfd4      	ite	le
 800acbc:	f1c1 0202 	rsble	r2, r1, #2
 800acc0:	2201      	movgt	r2, #1
 800acc2:	4413      	add	r3, r2
 800acc4:	e7e0      	b.n	800ac88 <_printf_float+0x1a4>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	055a      	lsls	r2, r3, #21
 800acca:	d407      	bmi.n	800acdc <_printf_float+0x1f8>
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	4642      	mov	r2, r8
 800acd0:	4631      	mov	r1, r6
 800acd2:	4628      	mov	r0, r5
 800acd4:	47b8      	blx	r7
 800acd6:	3001      	adds	r0, #1
 800acd8:	d12c      	bne.n	800ad34 <_printf_float+0x250>
 800acda:	e764      	b.n	800aba6 <_printf_float+0xc2>
 800acdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ace0:	f240 80e0 	bls.w	800aea4 <_printf_float+0x3c0>
 800ace4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ace8:	2200      	movs	r2, #0
 800acea:	2300      	movs	r3, #0
 800acec:	f7f5 fef6 	bl	8000adc <__aeabi_dcmpeq>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d034      	beq.n	800ad5e <_printf_float+0x27a>
 800acf4:	4a37      	ldr	r2, [pc, #220]	; (800add4 <_printf_float+0x2f0>)
 800acf6:	2301      	movs	r3, #1
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b8      	blx	r7
 800acfe:	3001      	adds	r0, #1
 800ad00:	f43f af51 	beq.w	800aba6 <_printf_float+0xc2>
 800ad04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	db02      	blt.n	800ad12 <_printf_float+0x22e>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	07d8      	lsls	r0, r3, #31
 800ad10:	d510      	bpl.n	800ad34 <_printf_float+0x250>
 800ad12:	ee18 3a10 	vmov	r3, s16
 800ad16:	4652      	mov	r2, sl
 800ad18:	4631      	mov	r1, r6
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	47b8      	blx	r7
 800ad1e:	3001      	adds	r0, #1
 800ad20:	f43f af41 	beq.w	800aba6 <_printf_float+0xc2>
 800ad24:	f04f 0800 	mov.w	r8, #0
 800ad28:	f104 091a 	add.w	r9, r4, #26
 800ad2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	4543      	cmp	r3, r8
 800ad32:	dc09      	bgt.n	800ad48 <_printf_float+0x264>
 800ad34:	6823      	ldr	r3, [r4, #0]
 800ad36:	079b      	lsls	r3, r3, #30
 800ad38:	f100 8105 	bmi.w	800af46 <_printf_float+0x462>
 800ad3c:	68e0      	ldr	r0, [r4, #12]
 800ad3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad40:	4298      	cmp	r0, r3
 800ad42:	bfb8      	it	lt
 800ad44:	4618      	movlt	r0, r3
 800ad46:	e730      	b.n	800abaa <_printf_float+0xc6>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	464a      	mov	r2, r9
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	f43f af27 	beq.w	800aba6 <_printf_float+0xc2>
 800ad58:	f108 0801 	add.w	r8, r8, #1
 800ad5c:	e7e6      	b.n	800ad2c <_printf_float+0x248>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc39      	bgt.n	800add8 <_printf_float+0x2f4>
 800ad64:	4a1b      	ldr	r2, [pc, #108]	; (800add4 <_printf_float+0x2f0>)
 800ad66:	2301      	movs	r3, #1
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b8      	blx	r7
 800ad6e:	3001      	adds	r0, #1
 800ad70:	f43f af19 	beq.w	800aba6 <_printf_float+0xc2>
 800ad74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	d102      	bne.n	800ad82 <_printf_float+0x29e>
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	07d9      	lsls	r1, r3, #31
 800ad80:	d5d8      	bpl.n	800ad34 <_printf_float+0x250>
 800ad82:	ee18 3a10 	vmov	r3, s16
 800ad86:	4652      	mov	r2, sl
 800ad88:	4631      	mov	r1, r6
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	47b8      	blx	r7
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f43f af09 	beq.w	800aba6 <_printf_float+0xc2>
 800ad94:	f04f 0900 	mov.w	r9, #0
 800ad98:	f104 0a1a 	add.w	sl, r4, #26
 800ad9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9e:	425b      	negs	r3, r3
 800ada0:	454b      	cmp	r3, r9
 800ada2:	dc01      	bgt.n	800ada8 <_printf_float+0x2c4>
 800ada4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada6:	e792      	b.n	800acce <_printf_float+0x1ea>
 800ada8:	2301      	movs	r3, #1
 800adaa:	4652      	mov	r2, sl
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	f43f aef7 	beq.w	800aba6 <_printf_float+0xc2>
 800adb8:	f109 0901 	add.w	r9, r9, #1
 800adbc:	e7ee      	b.n	800ad9c <_printf_float+0x2b8>
 800adbe:	bf00      	nop
 800adc0:	7fefffff 	.word	0x7fefffff
 800adc4:	080114a8 	.word	0x080114a8
 800adc8:	080114ac 	.word	0x080114ac
 800adcc:	080114b4 	.word	0x080114b4
 800add0:	080114b0 	.word	0x080114b0
 800add4:	08011909 	.word	0x08011909
 800add8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800addc:	429a      	cmp	r2, r3
 800adde:	bfa8      	it	ge
 800ade0:	461a      	movge	r2, r3
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	4691      	mov	r9, r2
 800ade6:	dc37      	bgt.n	800ae58 <_printf_float+0x374>
 800ade8:	f04f 0b00 	mov.w	fp, #0
 800adec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adf0:	f104 021a 	add.w	r2, r4, #26
 800adf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adf6:	9305      	str	r3, [sp, #20]
 800adf8:	eba3 0309 	sub.w	r3, r3, r9
 800adfc:	455b      	cmp	r3, fp
 800adfe:	dc33      	bgt.n	800ae68 <_printf_float+0x384>
 800ae00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae04:	429a      	cmp	r2, r3
 800ae06:	db3b      	blt.n	800ae80 <_printf_float+0x39c>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	07da      	lsls	r2, r3, #31
 800ae0c:	d438      	bmi.n	800ae80 <_printf_float+0x39c>
 800ae0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae10:	9a05      	ldr	r2, [sp, #20]
 800ae12:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae14:	1a9a      	subs	r2, r3, r2
 800ae16:	eba3 0901 	sub.w	r9, r3, r1
 800ae1a:	4591      	cmp	r9, r2
 800ae1c:	bfa8      	it	ge
 800ae1e:	4691      	movge	r9, r2
 800ae20:	f1b9 0f00 	cmp.w	r9, #0
 800ae24:	dc35      	bgt.n	800ae92 <_printf_float+0x3ae>
 800ae26:	f04f 0800 	mov.w	r8, #0
 800ae2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae2e:	f104 0a1a 	add.w	sl, r4, #26
 800ae32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	eba3 0309 	sub.w	r3, r3, r9
 800ae3c:	4543      	cmp	r3, r8
 800ae3e:	f77f af79 	ble.w	800ad34 <_printf_float+0x250>
 800ae42:	2301      	movs	r3, #1
 800ae44:	4652      	mov	r2, sl
 800ae46:	4631      	mov	r1, r6
 800ae48:	4628      	mov	r0, r5
 800ae4a:	47b8      	blx	r7
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	f43f aeaa 	beq.w	800aba6 <_printf_float+0xc2>
 800ae52:	f108 0801 	add.w	r8, r8, #1
 800ae56:	e7ec      	b.n	800ae32 <_printf_float+0x34e>
 800ae58:	4613      	mov	r3, r2
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	d1c0      	bne.n	800ade8 <_printf_float+0x304>
 800ae66:	e69e      	b.n	800aba6 <_printf_float+0xc2>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4631      	mov	r1, r6
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	9205      	str	r2, [sp, #20]
 800ae70:	47b8      	blx	r7
 800ae72:	3001      	adds	r0, #1
 800ae74:	f43f ae97 	beq.w	800aba6 <_printf_float+0xc2>
 800ae78:	9a05      	ldr	r2, [sp, #20]
 800ae7a:	f10b 0b01 	add.w	fp, fp, #1
 800ae7e:	e7b9      	b.n	800adf4 <_printf_float+0x310>
 800ae80:	ee18 3a10 	vmov	r3, s16
 800ae84:	4652      	mov	r2, sl
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d1be      	bne.n	800ae0e <_printf_float+0x32a>
 800ae90:	e689      	b.n	800aba6 <_printf_float+0xc2>
 800ae92:	9a05      	ldr	r2, [sp, #20]
 800ae94:	464b      	mov	r3, r9
 800ae96:	4442      	add	r2, r8
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d1c1      	bne.n	800ae26 <_printf_float+0x342>
 800aea2:	e680      	b.n	800aba6 <_printf_float+0xc2>
 800aea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea6:	2a01      	cmp	r2, #1
 800aea8:	dc01      	bgt.n	800aeae <_printf_float+0x3ca>
 800aeaa:	07db      	lsls	r3, r3, #31
 800aeac:	d538      	bpl.n	800af20 <_printf_float+0x43c>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4642      	mov	r2, r8
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	47b8      	blx	r7
 800aeb8:	3001      	adds	r0, #1
 800aeba:	f43f ae74 	beq.w	800aba6 <_printf_float+0xc2>
 800aebe:	ee18 3a10 	vmov	r3, s16
 800aec2:	4652      	mov	r2, sl
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	f43f ae6b 	beq.w	800aba6 <_printf_float+0xc2>
 800aed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aed4:	2200      	movs	r2, #0
 800aed6:	2300      	movs	r3, #0
 800aed8:	f7f5 fe00 	bl	8000adc <__aeabi_dcmpeq>
 800aedc:	b9d8      	cbnz	r0, 800af16 <_printf_float+0x432>
 800aede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee0:	f108 0201 	add.w	r2, r8, #1
 800aee4:	3b01      	subs	r3, #1
 800aee6:	4631      	mov	r1, r6
 800aee8:	4628      	mov	r0, r5
 800aeea:	47b8      	blx	r7
 800aeec:	3001      	adds	r0, #1
 800aeee:	d10e      	bne.n	800af0e <_printf_float+0x42a>
 800aef0:	e659      	b.n	800aba6 <_printf_float+0xc2>
 800aef2:	2301      	movs	r3, #1
 800aef4:	4652      	mov	r2, sl
 800aef6:	4631      	mov	r1, r6
 800aef8:	4628      	mov	r0, r5
 800aefa:	47b8      	blx	r7
 800aefc:	3001      	adds	r0, #1
 800aefe:	f43f ae52 	beq.w	800aba6 <_printf_float+0xc2>
 800af02:	f108 0801 	add.w	r8, r8, #1
 800af06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af08:	3b01      	subs	r3, #1
 800af0a:	4543      	cmp	r3, r8
 800af0c:	dcf1      	bgt.n	800aef2 <_printf_float+0x40e>
 800af0e:	464b      	mov	r3, r9
 800af10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af14:	e6dc      	b.n	800acd0 <_printf_float+0x1ec>
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	f104 0a1a 	add.w	sl, r4, #26
 800af1e:	e7f2      	b.n	800af06 <_printf_float+0x422>
 800af20:	2301      	movs	r3, #1
 800af22:	4642      	mov	r2, r8
 800af24:	e7df      	b.n	800aee6 <_printf_float+0x402>
 800af26:	2301      	movs	r3, #1
 800af28:	464a      	mov	r2, r9
 800af2a:	4631      	mov	r1, r6
 800af2c:	4628      	mov	r0, r5
 800af2e:	47b8      	blx	r7
 800af30:	3001      	adds	r0, #1
 800af32:	f43f ae38 	beq.w	800aba6 <_printf_float+0xc2>
 800af36:	f108 0801 	add.w	r8, r8, #1
 800af3a:	68e3      	ldr	r3, [r4, #12]
 800af3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af3e:	1a5b      	subs	r3, r3, r1
 800af40:	4543      	cmp	r3, r8
 800af42:	dcf0      	bgt.n	800af26 <_printf_float+0x442>
 800af44:	e6fa      	b.n	800ad3c <_printf_float+0x258>
 800af46:	f04f 0800 	mov.w	r8, #0
 800af4a:	f104 0919 	add.w	r9, r4, #25
 800af4e:	e7f4      	b.n	800af3a <_printf_float+0x456>

0800af50 <_printf_common>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	4616      	mov	r6, r2
 800af56:	4699      	mov	r9, r3
 800af58:	688a      	ldr	r2, [r1, #8]
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af60:	4293      	cmp	r3, r2
 800af62:	bfb8      	it	lt
 800af64:	4613      	movlt	r3, r2
 800af66:	6033      	str	r3, [r6, #0]
 800af68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af6c:	4607      	mov	r7, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	b10a      	cbz	r2, 800af76 <_printf_common+0x26>
 800af72:	3301      	adds	r3, #1
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	0699      	lsls	r1, r3, #26
 800af7a:	bf42      	ittt	mi
 800af7c:	6833      	ldrmi	r3, [r6, #0]
 800af7e:	3302      	addmi	r3, #2
 800af80:	6033      	strmi	r3, [r6, #0]
 800af82:	6825      	ldr	r5, [r4, #0]
 800af84:	f015 0506 	ands.w	r5, r5, #6
 800af88:	d106      	bne.n	800af98 <_printf_common+0x48>
 800af8a:	f104 0a19 	add.w	sl, r4, #25
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	6832      	ldr	r2, [r6, #0]
 800af92:	1a9b      	subs	r3, r3, r2
 800af94:	42ab      	cmp	r3, r5
 800af96:	dc26      	bgt.n	800afe6 <_printf_common+0x96>
 800af98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af9c:	1e13      	subs	r3, r2, #0
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	bf18      	it	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	0692      	lsls	r2, r2, #26
 800afa6:	d42b      	bmi.n	800b000 <_printf_common+0xb0>
 800afa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afac:	4649      	mov	r1, r9
 800afae:	4638      	mov	r0, r7
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d01e      	beq.n	800aff4 <_printf_common+0xa4>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	68e5      	ldr	r5, [r4, #12]
 800afba:	6832      	ldr	r2, [r6, #0]
 800afbc:	f003 0306 	and.w	r3, r3, #6
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	bf08      	it	eq
 800afc4:	1aad      	subeq	r5, r5, r2
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	6922      	ldr	r2, [r4, #16]
 800afca:	bf0c      	ite	eq
 800afcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afd0:	2500      	movne	r5, #0
 800afd2:	4293      	cmp	r3, r2
 800afd4:	bfc4      	itt	gt
 800afd6:	1a9b      	subgt	r3, r3, r2
 800afd8:	18ed      	addgt	r5, r5, r3
 800afda:	2600      	movs	r6, #0
 800afdc:	341a      	adds	r4, #26
 800afde:	42b5      	cmp	r5, r6
 800afe0:	d11a      	bne.n	800b018 <_printf_common+0xc8>
 800afe2:	2000      	movs	r0, #0
 800afe4:	e008      	b.n	800aff8 <_printf_common+0xa8>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4652      	mov	r2, sl
 800afea:	4649      	mov	r1, r9
 800afec:	4638      	mov	r0, r7
 800afee:	47c0      	blx	r8
 800aff0:	3001      	adds	r0, #1
 800aff2:	d103      	bne.n	800affc <_printf_common+0xac>
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affc:	3501      	adds	r5, #1
 800affe:	e7c6      	b.n	800af8e <_printf_common+0x3e>
 800b000:	18e1      	adds	r1, r4, r3
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	2030      	movs	r0, #48	; 0x30
 800b006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b00a:	4422      	add	r2, r4
 800b00c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b014:	3302      	adds	r3, #2
 800b016:	e7c7      	b.n	800afa8 <_printf_common+0x58>
 800b018:	2301      	movs	r3, #1
 800b01a:	4622      	mov	r2, r4
 800b01c:	4649      	mov	r1, r9
 800b01e:	4638      	mov	r0, r7
 800b020:	47c0      	blx	r8
 800b022:	3001      	adds	r0, #1
 800b024:	d0e6      	beq.n	800aff4 <_printf_common+0xa4>
 800b026:	3601      	adds	r6, #1
 800b028:	e7d9      	b.n	800afde <_printf_common+0x8e>
	...

0800b02c <_printf_i>:
 800b02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	7e0f      	ldrb	r7, [r1, #24]
 800b032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b034:	2f78      	cmp	r7, #120	; 0x78
 800b036:	4691      	mov	r9, r2
 800b038:	4680      	mov	r8, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	469a      	mov	sl, r3
 800b03e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b042:	d807      	bhi.n	800b054 <_printf_i+0x28>
 800b044:	2f62      	cmp	r7, #98	; 0x62
 800b046:	d80a      	bhi.n	800b05e <_printf_i+0x32>
 800b048:	2f00      	cmp	r7, #0
 800b04a:	f000 80d8 	beq.w	800b1fe <_printf_i+0x1d2>
 800b04e:	2f58      	cmp	r7, #88	; 0x58
 800b050:	f000 80a3 	beq.w	800b19a <_printf_i+0x16e>
 800b054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b05c:	e03a      	b.n	800b0d4 <_printf_i+0xa8>
 800b05e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b062:	2b15      	cmp	r3, #21
 800b064:	d8f6      	bhi.n	800b054 <_printf_i+0x28>
 800b066:	a101      	add	r1, pc, #4	; (adr r1, 800b06c <_printf_i+0x40>)
 800b068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b06c:	0800b0c5 	.word	0x0800b0c5
 800b070:	0800b0d9 	.word	0x0800b0d9
 800b074:	0800b055 	.word	0x0800b055
 800b078:	0800b055 	.word	0x0800b055
 800b07c:	0800b055 	.word	0x0800b055
 800b080:	0800b055 	.word	0x0800b055
 800b084:	0800b0d9 	.word	0x0800b0d9
 800b088:	0800b055 	.word	0x0800b055
 800b08c:	0800b055 	.word	0x0800b055
 800b090:	0800b055 	.word	0x0800b055
 800b094:	0800b055 	.word	0x0800b055
 800b098:	0800b1e5 	.word	0x0800b1e5
 800b09c:	0800b109 	.word	0x0800b109
 800b0a0:	0800b1c7 	.word	0x0800b1c7
 800b0a4:	0800b055 	.word	0x0800b055
 800b0a8:	0800b055 	.word	0x0800b055
 800b0ac:	0800b207 	.word	0x0800b207
 800b0b0:	0800b055 	.word	0x0800b055
 800b0b4:	0800b109 	.word	0x0800b109
 800b0b8:	0800b055 	.word	0x0800b055
 800b0bc:	0800b055 	.word	0x0800b055
 800b0c0:	0800b1cf 	.word	0x0800b1cf
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	1d1a      	adds	r2, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	602a      	str	r2, [r5, #0]
 800b0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e0a3      	b.n	800b220 <_printf_i+0x1f4>
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	6829      	ldr	r1, [r5, #0]
 800b0dc:	0606      	lsls	r6, r0, #24
 800b0de:	f101 0304 	add.w	r3, r1, #4
 800b0e2:	d50a      	bpl.n	800b0fa <_printf_i+0xce>
 800b0e4:	680e      	ldr	r6, [r1, #0]
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	da03      	bge.n	800b0f4 <_printf_i+0xc8>
 800b0ec:	232d      	movs	r3, #45	; 0x2d
 800b0ee:	4276      	negs	r6, r6
 800b0f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f4:	485e      	ldr	r0, [pc, #376]	; (800b270 <_printf_i+0x244>)
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	e019      	b.n	800b12e <_printf_i+0x102>
 800b0fa:	680e      	ldr	r6, [r1, #0]
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b102:	bf18      	it	ne
 800b104:	b236      	sxthne	r6, r6
 800b106:	e7ef      	b.n	800b0e8 <_printf_i+0xbc>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	6820      	ldr	r0, [r4, #0]
 800b10c:	1d19      	adds	r1, r3, #4
 800b10e:	6029      	str	r1, [r5, #0]
 800b110:	0601      	lsls	r1, r0, #24
 800b112:	d501      	bpl.n	800b118 <_printf_i+0xec>
 800b114:	681e      	ldr	r6, [r3, #0]
 800b116:	e002      	b.n	800b11e <_printf_i+0xf2>
 800b118:	0646      	lsls	r6, r0, #25
 800b11a:	d5fb      	bpl.n	800b114 <_printf_i+0xe8>
 800b11c:	881e      	ldrh	r6, [r3, #0]
 800b11e:	4854      	ldr	r0, [pc, #336]	; (800b270 <_printf_i+0x244>)
 800b120:	2f6f      	cmp	r7, #111	; 0x6f
 800b122:	bf0c      	ite	eq
 800b124:	2308      	moveq	r3, #8
 800b126:	230a      	movne	r3, #10
 800b128:	2100      	movs	r1, #0
 800b12a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b12e:	6865      	ldr	r5, [r4, #4]
 800b130:	60a5      	str	r5, [r4, #8]
 800b132:	2d00      	cmp	r5, #0
 800b134:	bfa2      	ittt	ge
 800b136:	6821      	ldrge	r1, [r4, #0]
 800b138:	f021 0104 	bicge.w	r1, r1, #4
 800b13c:	6021      	strge	r1, [r4, #0]
 800b13e:	b90e      	cbnz	r6, 800b144 <_printf_i+0x118>
 800b140:	2d00      	cmp	r5, #0
 800b142:	d04d      	beq.n	800b1e0 <_printf_i+0x1b4>
 800b144:	4615      	mov	r5, r2
 800b146:	fbb6 f1f3 	udiv	r1, r6, r3
 800b14a:	fb03 6711 	mls	r7, r3, r1, r6
 800b14e:	5dc7      	ldrb	r7, [r0, r7]
 800b150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b154:	4637      	mov	r7, r6
 800b156:	42bb      	cmp	r3, r7
 800b158:	460e      	mov	r6, r1
 800b15a:	d9f4      	bls.n	800b146 <_printf_i+0x11a>
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d10b      	bne.n	800b178 <_printf_i+0x14c>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	07de      	lsls	r6, r3, #31
 800b164:	d508      	bpl.n	800b178 <_printf_i+0x14c>
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	6861      	ldr	r1, [r4, #4]
 800b16a:	4299      	cmp	r1, r3
 800b16c:	bfde      	ittt	le
 800b16e:	2330      	movle	r3, #48	; 0x30
 800b170:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b174:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b178:	1b52      	subs	r2, r2, r5
 800b17a:	6122      	str	r2, [r4, #16]
 800b17c:	f8cd a000 	str.w	sl, [sp]
 800b180:	464b      	mov	r3, r9
 800b182:	aa03      	add	r2, sp, #12
 800b184:	4621      	mov	r1, r4
 800b186:	4640      	mov	r0, r8
 800b188:	f7ff fee2 	bl	800af50 <_printf_common>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d14c      	bne.n	800b22a <_printf_i+0x1fe>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	b004      	add	sp, #16
 800b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19a:	4835      	ldr	r0, [pc, #212]	; (800b270 <_printf_i+0x244>)
 800b19c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1a0:	6829      	ldr	r1, [r5, #0]
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1a8:	6029      	str	r1, [r5, #0]
 800b1aa:	061d      	lsls	r5, r3, #24
 800b1ac:	d514      	bpl.n	800b1d8 <_printf_i+0x1ac>
 800b1ae:	07df      	lsls	r7, r3, #31
 800b1b0:	bf44      	itt	mi
 800b1b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b6:	6023      	strmi	r3, [r4, #0]
 800b1b8:	b91e      	cbnz	r6, 800b1c2 <_printf_i+0x196>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f023 0320 	bic.w	r3, r3, #32
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	e7b0      	b.n	800b128 <_printf_i+0xfc>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f043 0320 	orr.w	r3, r3, #32
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	2378      	movs	r3, #120	; 0x78
 800b1d0:	4828      	ldr	r0, [pc, #160]	; (800b274 <_printf_i+0x248>)
 800b1d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1d6:	e7e3      	b.n	800b1a0 <_printf_i+0x174>
 800b1d8:	0659      	lsls	r1, r3, #25
 800b1da:	bf48      	it	mi
 800b1dc:	b2b6      	uxthmi	r6, r6
 800b1de:	e7e6      	b.n	800b1ae <_printf_i+0x182>
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	e7bb      	b.n	800b15c <_printf_i+0x130>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	6826      	ldr	r6, [r4, #0]
 800b1e8:	6961      	ldr	r1, [r4, #20]
 800b1ea:	1d18      	adds	r0, r3, #4
 800b1ec:	6028      	str	r0, [r5, #0]
 800b1ee:	0635      	lsls	r5, r6, #24
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	d501      	bpl.n	800b1f8 <_printf_i+0x1cc>
 800b1f4:	6019      	str	r1, [r3, #0]
 800b1f6:	e002      	b.n	800b1fe <_printf_i+0x1d2>
 800b1f8:	0670      	lsls	r0, r6, #25
 800b1fa:	d5fb      	bpl.n	800b1f4 <_printf_i+0x1c8>
 800b1fc:	8019      	strh	r1, [r3, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	4615      	mov	r5, r2
 800b204:	e7ba      	b.n	800b17c <_printf_i+0x150>
 800b206:	682b      	ldr	r3, [r5, #0]
 800b208:	1d1a      	adds	r2, r3, #4
 800b20a:	602a      	str	r2, [r5, #0]
 800b20c:	681d      	ldr	r5, [r3, #0]
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	2100      	movs	r1, #0
 800b212:	4628      	mov	r0, r5
 800b214:	f7f4 ffe4 	bl	80001e0 <memchr>
 800b218:	b108      	cbz	r0, 800b21e <_printf_i+0x1f2>
 800b21a:	1b40      	subs	r0, r0, r5
 800b21c:	6060      	str	r0, [r4, #4]
 800b21e:	6863      	ldr	r3, [r4, #4]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	2300      	movs	r3, #0
 800b224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b228:	e7a8      	b.n	800b17c <_printf_i+0x150>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	462a      	mov	r2, r5
 800b22e:	4649      	mov	r1, r9
 800b230:	4640      	mov	r0, r8
 800b232:	47d0      	blx	sl
 800b234:	3001      	adds	r0, #1
 800b236:	d0ab      	beq.n	800b190 <_printf_i+0x164>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	079b      	lsls	r3, r3, #30
 800b23c:	d413      	bmi.n	800b266 <_printf_i+0x23a>
 800b23e:	68e0      	ldr	r0, [r4, #12]
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	4298      	cmp	r0, r3
 800b244:	bfb8      	it	lt
 800b246:	4618      	movlt	r0, r3
 800b248:	e7a4      	b.n	800b194 <_printf_i+0x168>
 800b24a:	2301      	movs	r3, #1
 800b24c:	4632      	mov	r2, r6
 800b24e:	4649      	mov	r1, r9
 800b250:	4640      	mov	r0, r8
 800b252:	47d0      	blx	sl
 800b254:	3001      	adds	r0, #1
 800b256:	d09b      	beq.n	800b190 <_printf_i+0x164>
 800b258:	3501      	adds	r5, #1
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	9903      	ldr	r1, [sp, #12]
 800b25e:	1a5b      	subs	r3, r3, r1
 800b260:	42ab      	cmp	r3, r5
 800b262:	dcf2      	bgt.n	800b24a <_printf_i+0x21e>
 800b264:	e7eb      	b.n	800b23e <_printf_i+0x212>
 800b266:	2500      	movs	r5, #0
 800b268:	f104 0619 	add.w	r6, r4, #25
 800b26c:	e7f5      	b.n	800b25a <_printf_i+0x22e>
 800b26e:	bf00      	nop
 800b270:	080114b8 	.word	0x080114b8
 800b274:	080114c9 	.word	0x080114c9

0800b278 <_scanf_float>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	b087      	sub	sp, #28
 800b27e:	4617      	mov	r7, r2
 800b280:	9303      	str	r3, [sp, #12]
 800b282:	688b      	ldr	r3, [r1, #8]
 800b284:	1e5a      	subs	r2, r3, #1
 800b286:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b28a:	bf83      	ittte	hi
 800b28c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b290:	195b      	addhi	r3, r3, r5
 800b292:	9302      	strhi	r3, [sp, #8]
 800b294:	2300      	movls	r3, #0
 800b296:	bf86      	itte	hi
 800b298:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b29c:	608b      	strhi	r3, [r1, #8]
 800b29e:	9302      	strls	r3, [sp, #8]
 800b2a0:	680b      	ldr	r3, [r1, #0]
 800b2a2:	468b      	mov	fp, r1
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b2aa:	f84b 3b1c 	str.w	r3, [fp], #28
 800b2ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	465e      	mov	r6, fp
 800b2b8:	46aa      	mov	sl, r5
 800b2ba:	46a9      	mov	r9, r5
 800b2bc:	9501      	str	r5, [sp, #4]
 800b2be:	68a2      	ldr	r2, [r4, #8]
 800b2c0:	b152      	cbz	r2, 800b2d8 <_scanf_float+0x60>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	2b4e      	cmp	r3, #78	; 0x4e
 800b2c8:	d864      	bhi.n	800b394 <_scanf_float+0x11c>
 800b2ca:	2b40      	cmp	r3, #64	; 0x40
 800b2cc:	d83c      	bhi.n	800b348 <_scanf_float+0xd0>
 800b2ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b2d2:	b2c8      	uxtb	r0, r1
 800b2d4:	280e      	cmp	r0, #14
 800b2d6:	d93a      	bls.n	800b34e <_scanf_float+0xd6>
 800b2d8:	f1b9 0f00 	cmp.w	r9, #0
 800b2dc:	d003      	beq.n	800b2e6 <_scanf_float+0x6e>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2ea:	f1ba 0f01 	cmp.w	sl, #1
 800b2ee:	f200 8113 	bhi.w	800b518 <_scanf_float+0x2a0>
 800b2f2:	455e      	cmp	r6, fp
 800b2f4:	f200 8105 	bhi.w	800b502 <_scanf_float+0x28a>
 800b2f8:	2501      	movs	r5, #1
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	b007      	add	sp, #28
 800b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b302:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b306:	2a0d      	cmp	r2, #13
 800b308:	d8e6      	bhi.n	800b2d8 <_scanf_float+0x60>
 800b30a:	a101      	add	r1, pc, #4	; (adr r1, 800b310 <_scanf_float+0x98>)
 800b30c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b310:	0800b44f 	.word	0x0800b44f
 800b314:	0800b2d9 	.word	0x0800b2d9
 800b318:	0800b2d9 	.word	0x0800b2d9
 800b31c:	0800b2d9 	.word	0x0800b2d9
 800b320:	0800b4af 	.word	0x0800b4af
 800b324:	0800b487 	.word	0x0800b487
 800b328:	0800b2d9 	.word	0x0800b2d9
 800b32c:	0800b2d9 	.word	0x0800b2d9
 800b330:	0800b45d 	.word	0x0800b45d
 800b334:	0800b2d9 	.word	0x0800b2d9
 800b338:	0800b2d9 	.word	0x0800b2d9
 800b33c:	0800b2d9 	.word	0x0800b2d9
 800b340:	0800b2d9 	.word	0x0800b2d9
 800b344:	0800b415 	.word	0x0800b415
 800b348:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b34c:	e7db      	b.n	800b306 <_scanf_float+0x8e>
 800b34e:	290e      	cmp	r1, #14
 800b350:	d8c2      	bhi.n	800b2d8 <_scanf_float+0x60>
 800b352:	a001      	add	r0, pc, #4	; (adr r0, 800b358 <_scanf_float+0xe0>)
 800b354:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b358:	0800b407 	.word	0x0800b407
 800b35c:	0800b2d9 	.word	0x0800b2d9
 800b360:	0800b407 	.word	0x0800b407
 800b364:	0800b49b 	.word	0x0800b49b
 800b368:	0800b2d9 	.word	0x0800b2d9
 800b36c:	0800b3b5 	.word	0x0800b3b5
 800b370:	0800b3f1 	.word	0x0800b3f1
 800b374:	0800b3f1 	.word	0x0800b3f1
 800b378:	0800b3f1 	.word	0x0800b3f1
 800b37c:	0800b3f1 	.word	0x0800b3f1
 800b380:	0800b3f1 	.word	0x0800b3f1
 800b384:	0800b3f1 	.word	0x0800b3f1
 800b388:	0800b3f1 	.word	0x0800b3f1
 800b38c:	0800b3f1 	.word	0x0800b3f1
 800b390:	0800b3f1 	.word	0x0800b3f1
 800b394:	2b6e      	cmp	r3, #110	; 0x6e
 800b396:	d809      	bhi.n	800b3ac <_scanf_float+0x134>
 800b398:	2b60      	cmp	r3, #96	; 0x60
 800b39a:	d8b2      	bhi.n	800b302 <_scanf_float+0x8a>
 800b39c:	2b54      	cmp	r3, #84	; 0x54
 800b39e:	d077      	beq.n	800b490 <_scanf_float+0x218>
 800b3a0:	2b59      	cmp	r3, #89	; 0x59
 800b3a2:	d199      	bne.n	800b2d8 <_scanf_float+0x60>
 800b3a4:	2d07      	cmp	r5, #7
 800b3a6:	d197      	bne.n	800b2d8 <_scanf_float+0x60>
 800b3a8:	2508      	movs	r5, #8
 800b3aa:	e029      	b.n	800b400 <_scanf_float+0x188>
 800b3ac:	2b74      	cmp	r3, #116	; 0x74
 800b3ae:	d06f      	beq.n	800b490 <_scanf_float+0x218>
 800b3b0:	2b79      	cmp	r3, #121	; 0x79
 800b3b2:	e7f6      	b.n	800b3a2 <_scanf_float+0x12a>
 800b3b4:	6821      	ldr	r1, [r4, #0]
 800b3b6:	05c8      	lsls	r0, r1, #23
 800b3b8:	d51a      	bpl.n	800b3f0 <_scanf_float+0x178>
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b3c0:	6021      	str	r1, [r4, #0]
 800b3c2:	f109 0901 	add.w	r9, r9, #1
 800b3c6:	b11b      	cbz	r3, 800b3d0 <_scanf_float+0x158>
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	3201      	adds	r2, #1
 800b3cc:	9302      	str	r3, [sp, #8]
 800b3ce:	60a2      	str	r2, [r4, #8]
 800b3d0:	68a3      	ldr	r3, [r4, #8]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	60a3      	str	r3, [r4, #8]
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	607b      	str	r3, [r7, #4]
 800b3e4:	f340 8084 	ble.w	800b4f0 <_scanf_float+0x278>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	603b      	str	r3, [r7, #0]
 800b3ee:	e766      	b.n	800b2be <_scanf_float+0x46>
 800b3f0:	eb1a 0f05 	cmn.w	sl, r5
 800b3f4:	f47f af70 	bne.w	800b2d8 <_scanf_float+0x60>
 800b3f8:	6822      	ldr	r2, [r4, #0]
 800b3fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b3fe:	6022      	str	r2, [r4, #0]
 800b400:	f806 3b01 	strb.w	r3, [r6], #1
 800b404:	e7e4      	b.n	800b3d0 <_scanf_float+0x158>
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	0610      	lsls	r0, r2, #24
 800b40a:	f57f af65 	bpl.w	800b2d8 <_scanf_float+0x60>
 800b40e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b412:	e7f4      	b.n	800b3fe <_scanf_float+0x186>
 800b414:	f1ba 0f00 	cmp.w	sl, #0
 800b418:	d10e      	bne.n	800b438 <_scanf_float+0x1c0>
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	d10e      	bne.n	800b43e <_scanf_float+0x1c6>
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b426:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b42a:	d108      	bne.n	800b43e <_scanf_float+0x1c6>
 800b42c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	f04f 0a01 	mov.w	sl, #1
 800b436:	e7e3      	b.n	800b400 <_scanf_float+0x188>
 800b438:	f1ba 0f02 	cmp.w	sl, #2
 800b43c:	d055      	beq.n	800b4ea <_scanf_float+0x272>
 800b43e:	2d01      	cmp	r5, #1
 800b440:	d002      	beq.n	800b448 <_scanf_float+0x1d0>
 800b442:	2d04      	cmp	r5, #4
 800b444:	f47f af48 	bne.w	800b2d8 <_scanf_float+0x60>
 800b448:	3501      	adds	r5, #1
 800b44a:	b2ed      	uxtb	r5, r5
 800b44c:	e7d8      	b.n	800b400 <_scanf_float+0x188>
 800b44e:	f1ba 0f01 	cmp.w	sl, #1
 800b452:	f47f af41 	bne.w	800b2d8 <_scanf_float+0x60>
 800b456:	f04f 0a02 	mov.w	sl, #2
 800b45a:	e7d1      	b.n	800b400 <_scanf_float+0x188>
 800b45c:	b97d      	cbnz	r5, 800b47e <_scanf_float+0x206>
 800b45e:	f1b9 0f00 	cmp.w	r9, #0
 800b462:	f47f af3c 	bne.w	800b2de <_scanf_float+0x66>
 800b466:	6822      	ldr	r2, [r4, #0]
 800b468:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b46c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b470:	f47f af39 	bne.w	800b2e6 <_scanf_float+0x6e>
 800b474:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b478:	6022      	str	r2, [r4, #0]
 800b47a:	2501      	movs	r5, #1
 800b47c:	e7c0      	b.n	800b400 <_scanf_float+0x188>
 800b47e:	2d03      	cmp	r5, #3
 800b480:	d0e2      	beq.n	800b448 <_scanf_float+0x1d0>
 800b482:	2d05      	cmp	r5, #5
 800b484:	e7de      	b.n	800b444 <_scanf_float+0x1cc>
 800b486:	2d02      	cmp	r5, #2
 800b488:	f47f af26 	bne.w	800b2d8 <_scanf_float+0x60>
 800b48c:	2503      	movs	r5, #3
 800b48e:	e7b7      	b.n	800b400 <_scanf_float+0x188>
 800b490:	2d06      	cmp	r5, #6
 800b492:	f47f af21 	bne.w	800b2d8 <_scanf_float+0x60>
 800b496:	2507      	movs	r5, #7
 800b498:	e7b2      	b.n	800b400 <_scanf_float+0x188>
 800b49a:	6822      	ldr	r2, [r4, #0]
 800b49c:	0591      	lsls	r1, r2, #22
 800b49e:	f57f af1b 	bpl.w	800b2d8 <_scanf_float+0x60>
 800b4a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4ac:	e7a8      	b.n	800b400 <_scanf_float+0x188>
 800b4ae:	6822      	ldr	r2, [r4, #0]
 800b4b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b4b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b4b8:	d006      	beq.n	800b4c8 <_scanf_float+0x250>
 800b4ba:	0550      	lsls	r0, r2, #21
 800b4bc:	f57f af0c 	bpl.w	800b2d8 <_scanf_float+0x60>
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	f43f af0f 	beq.w	800b2e6 <_scanf_float+0x6e>
 800b4c8:	0591      	lsls	r1, r2, #22
 800b4ca:	bf58      	it	pl
 800b4cc:	9901      	ldrpl	r1, [sp, #4]
 800b4ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b4d2:	bf58      	it	pl
 800b4d4:	eba9 0101 	subpl.w	r1, r9, r1
 800b4d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b4dc:	bf58      	it	pl
 800b4de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4e2:	6022      	str	r2, [r4, #0]
 800b4e4:	f04f 0900 	mov.w	r9, #0
 800b4e8:	e78a      	b.n	800b400 <_scanf_float+0x188>
 800b4ea:	f04f 0a03 	mov.w	sl, #3
 800b4ee:	e787      	b.n	800b400 <_scanf_float+0x188>
 800b4f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4798      	blx	r3
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	f43f aedf 	beq.w	800b2be <_scanf_float+0x46>
 800b500:	e6ea      	b.n	800b2d8 <_scanf_float+0x60>
 800b502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b50a:	463a      	mov	r2, r7
 800b50c:	4640      	mov	r0, r8
 800b50e:	4798      	blx	r3
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	3b01      	subs	r3, #1
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	e6ec      	b.n	800b2f2 <_scanf_float+0x7a>
 800b518:	1e6b      	subs	r3, r5, #1
 800b51a:	2b06      	cmp	r3, #6
 800b51c:	d825      	bhi.n	800b56a <_scanf_float+0x2f2>
 800b51e:	2d02      	cmp	r5, #2
 800b520:	d836      	bhi.n	800b590 <_scanf_float+0x318>
 800b522:	455e      	cmp	r6, fp
 800b524:	f67f aee8 	bls.w	800b2f8 <_scanf_float+0x80>
 800b528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b52c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b530:	463a      	mov	r2, r7
 800b532:	4640      	mov	r0, r8
 800b534:	4798      	blx	r3
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	3b01      	subs	r3, #1
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	e7f1      	b.n	800b522 <_scanf_float+0x2aa>
 800b53e:	9802      	ldr	r0, [sp, #8]
 800b540:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b544:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b548:	9002      	str	r0, [sp, #8]
 800b54a:	463a      	mov	r2, r7
 800b54c:	4640      	mov	r0, r8
 800b54e:	4798      	blx	r3
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	3b01      	subs	r3, #1
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b55a:	fa5f fa8a 	uxtb.w	sl, sl
 800b55e:	f1ba 0f02 	cmp.w	sl, #2
 800b562:	d1ec      	bne.n	800b53e <_scanf_float+0x2c6>
 800b564:	3d03      	subs	r5, #3
 800b566:	b2ed      	uxtb	r5, r5
 800b568:	1b76      	subs	r6, r6, r5
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	05da      	lsls	r2, r3, #23
 800b56e:	d52f      	bpl.n	800b5d0 <_scanf_float+0x358>
 800b570:	055b      	lsls	r3, r3, #21
 800b572:	d510      	bpl.n	800b596 <_scanf_float+0x31e>
 800b574:	455e      	cmp	r6, fp
 800b576:	f67f aebf 	bls.w	800b2f8 <_scanf_float+0x80>
 800b57a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b57e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b582:	463a      	mov	r2, r7
 800b584:	4640      	mov	r0, r8
 800b586:	4798      	blx	r3
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	e7f1      	b.n	800b574 <_scanf_float+0x2fc>
 800b590:	46aa      	mov	sl, r5
 800b592:	9602      	str	r6, [sp, #8]
 800b594:	e7df      	b.n	800b556 <_scanf_float+0x2de>
 800b596:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	2965      	cmp	r1, #101	; 0x65
 800b59e:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b5a6:	6123      	str	r3, [r4, #16]
 800b5a8:	d00c      	beq.n	800b5c4 <_scanf_float+0x34c>
 800b5aa:	2945      	cmp	r1, #69	; 0x45
 800b5ac:	d00a      	beq.n	800b5c4 <_scanf_float+0x34c>
 800b5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5b2:	463a      	mov	r2, r7
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	4798      	blx	r3
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	1eb5      	subs	r5, r6, #2
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5c8:	463a      	mov	r2, r7
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	4798      	blx	r3
 800b5ce:	462e      	mov	r6, r5
 800b5d0:	6825      	ldr	r5, [r4, #0]
 800b5d2:	f015 0510 	ands.w	r5, r5, #16
 800b5d6:	d159      	bne.n	800b68c <_scanf_float+0x414>
 800b5d8:	7035      	strb	r5, [r6, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e4:	d11b      	bne.n	800b61e <_scanf_float+0x3a6>
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	454b      	cmp	r3, r9
 800b5ea:	eba3 0209 	sub.w	r2, r3, r9
 800b5ee:	d123      	bne.n	800b638 <_scanf_float+0x3c0>
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4659      	mov	r1, fp
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	f000 ff2d 	bl	800c454 <_strtod_r>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	f012 0f02 	tst.w	r2, #2
 800b602:	ec57 6b10 	vmov	r6, r7, d0
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	d021      	beq.n	800b64e <_scanf_float+0x3d6>
 800b60a:	9903      	ldr	r1, [sp, #12]
 800b60c:	1d1a      	adds	r2, r3, #4
 800b60e:	600a      	str	r2, [r1, #0]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	e9c3 6700 	strd	r6, r7, [r3]
 800b616:	68e3      	ldr	r3, [r4, #12]
 800b618:	3301      	adds	r3, #1
 800b61a:	60e3      	str	r3, [r4, #12]
 800b61c:	e66d      	b.n	800b2fa <_scanf_float+0x82>
 800b61e:	9b04      	ldr	r3, [sp, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d0e5      	beq.n	800b5f0 <_scanf_float+0x378>
 800b624:	9905      	ldr	r1, [sp, #20]
 800b626:	230a      	movs	r3, #10
 800b628:	462a      	mov	r2, r5
 800b62a:	3101      	adds	r1, #1
 800b62c:	4640      	mov	r0, r8
 800b62e:	f000 ff99 	bl	800c564 <_strtol_r>
 800b632:	9b04      	ldr	r3, [sp, #16]
 800b634:	9e05      	ldr	r6, [sp, #20]
 800b636:	1ac2      	subs	r2, r0, r3
 800b638:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b63c:	429e      	cmp	r6, r3
 800b63e:	bf28      	it	cs
 800b640:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b644:	4912      	ldr	r1, [pc, #72]	; (800b690 <_scanf_float+0x418>)
 800b646:	4630      	mov	r0, r6
 800b648:	f000 f83c 	bl	800b6c4 <siprintf>
 800b64c:	e7d0      	b.n	800b5f0 <_scanf_float+0x378>
 800b64e:	9903      	ldr	r1, [sp, #12]
 800b650:	f012 0f04 	tst.w	r2, #4
 800b654:	f103 0204 	add.w	r2, r3, #4
 800b658:	600a      	str	r2, [r1, #0]
 800b65a:	d1d9      	bne.n	800b610 <_scanf_float+0x398>
 800b65c:	f8d3 8000 	ldr.w	r8, [r3]
 800b660:	ee10 2a10 	vmov	r2, s0
 800b664:	ee10 0a10 	vmov	r0, s0
 800b668:	463b      	mov	r3, r7
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f5 fa68 	bl	8000b40 <__aeabi_dcmpun>
 800b670:	b128      	cbz	r0, 800b67e <_scanf_float+0x406>
 800b672:	4808      	ldr	r0, [pc, #32]	; (800b694 <_scanf_float+0x41c>)
 800b674:	f000 f820 	bl	800b6b8 <nanf>
 800b678:	ed88 0a00 	vstr	s0, [r8]
 800b67c:	e7cb      	b.n	800b616 <_scanf_float+0x39e>
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f5 fabb 	bl	8000bfc <__aeabi_d2f>
 800b686:	f8c8 0000 	str.w	r0, [r8]
 800b68a:	e7c4      	b.n	800b616 <_scanf_float+0x39e>
 800b68c:	2500      	movs	r5, #0
 800b68e:	e634      	b.n	800b2fa <_scanf_float+0x82>
 800b690:	080114da 	.word	0x080114da
 800b694:	080115a7 	.word	0x080115a7

0800b698 <_sbrk_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d06      	ldr	r5, [pc, #24]	; (800b6b4 <_sbrk_r+0x1c>)
 800b69c:	2300      	movs	r3, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	602b      	str	r3, [r5, #0]
 800b6a4:	f7f8 f9be 	bl	8003a24 <_sbrk>
 800b6a8:	1c43      	adds	r3, r0, #1
 800b6aa:	d102      	bne.n	800b6b2 <_sbrk_r+0x1a>
 800b6ac:	682b      	ldr	r3, [r5, #0]
 800b6ae:	b103      	cbz	r3, 800b6b2 <_sbrk_r+0x1a>
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	20000b00 	.word	0x20000b00

0800b6b8 <nanf>:
 800b6b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6c0 <nanf+0x8>
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	7fc00000 	.word	0x7fc00000

0800b6c4 <siprintf>:
 800b6c4:	b40e      	push	{r1, r2, r3}
 800b6c6:	b500      	push	{lr}
 800b6c8:	b09c      	sub	sp, #112	; 0x70
 800b6ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b6cc:	9002      	str	r0, [sp, #8]
 800b6ce:	9006      	str	r0, [sp, #24]
 800b6d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6d4:	4809      	ldr	r0, [pc, #36]	; (800b6fc <siprintf+0x38>)
 800b6d6:	9107      	str	r1, [sp, #28]
 800b6d8:	9104      	str	r1, [sp, #16]
 800b6da:	4909      	ldr	r1, [pc, #36]	; (800b700 <siprintf+0x3c>)
 800b6dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e0:	9105      	str	r1, [sp, #20]
 800b6e2:	6800      	ldr	r0, [r0, #0]
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	a902      	add	r1, sp, #8
 800b6e8:	f003 fa52 	bl	800eb90 <_svfiprintf_r>
 800b6ec:	9b02      	ldr	r3, [sp, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]
 800b6f2:	b01c      	add	sp, #112	; 0x70
 800b6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f8:	b003      	add	sp, #12
 800b6fa:	4770      	bx	lr
 800b6fc:	20000110 	.word	0x20000110
 800b700:	ffff0208 	.word	0xffff0208

0800b704 <siscanf>:
 800b704:	b40e      	push	{r1, r2, r3}
 800b706:	b510      	push	{r4, lr}
 800b708:	b09f      	sub	sp, #124	; 0x7c
 800b70a:	ac21      	add	r4, sp, #132	; 0x84
 800b70c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b710:	f854 2b04 	ldr.w	r2, [r4], #4
 800b714:	9201      	str	r2, [sp, #4]
 800b716:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b71a:	9004      	str	r0, [sp, #16]
 800b71c:	9008      	str	r0, [sp, #32]
 800b71e:	f7f4 fd57 	bl	80001d0 <strlen>
 800b722:	4b0c      	ldr	r3, [pc, #48]	; (800b754 <siscanf+0x50>)
 800b724:	9005      	str	r0, [sp, #20]
 800b726:	9009      	str	r0, [sp, #36]	; 0x24
 800b728:	930d      	str	r3, [sp, #52]	; 0x34
 800b72a:	480b      	ldr	r0, [pc, #44]	; (800b758 <siscanf+0x54>)
 800b72c:	9a01      	ldr	r2, [sp, #4]
 800b72e:	6800      	ldr	r0, [r0, #0]
 800b730:	9403      	str	r4, [sp, #12]
 800b732:	2300      	movs	r3, #0
 800b734:	9311      	str	r3, [sp, #68]	; 0x44
 800b736:	9316      	str	r3, [sp, #88]	; 0x58
 800b738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b73c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b740:	a904      	add	r1, sp, #16
 800b742:	4623      	mov	r3, r4
 800b744:	f003 fb7e 	bl	800ee44 <__ssvfiscanf_r>
 800b748:	b01f      	add	sp, #124	; 0x7c
 800b74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b74e:	b003      	add	sp, #12
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	0800b77f 	.word	0x0800b77f
 800b758:	20000110 	.word	0x20000110

0800b75c <__sread>:
 800b75c:	b510      	push	{r4, lr}
 800b75e:	460c      	mov	r4, r1
 800b760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b764:	f003 ff92 	bl	800f68c <_read_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	bfab      	itete	ge
 800b76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b76e:	89a3      	ldrhlt	r3, [r4, #12]
 800b770:	181b      	addge	r3, r3, r0
 800b772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b776:	bfac      	ite	ge
 800b778:	6563      	strge	r3, [r4, #84]	; 0x54
 800b77a:	81a3      	strhlt	r3, [r4, #12]
 800b77c:	bd10      	pop	{r4, pc}

0800b77e <__seofread>:
 800b77e:	2000      	movs	r0, #0
 800b780:	4770      	bx	lr

0800b782 <__swrite>:
 800b782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b786:	461f      	mov	r7, r3
 800b788:	898b      	ldrh	r3, [r1, #12]
 800b78a:	05db      	lsls	r3, r3, #23
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	4616      	mov	r6, r2
 800b792:	d505      	bpl.n	800b7a0 <__swrite+0x1e>
 800b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b798:	2302      	movs	r3, #2
 800b79a:	2200      	movs	r2, #0
 800b79c:	f002 fc88 	bl	800e0b0 <_lseek_r>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7aa:	81a3      	strh	r3, [r4, #12]
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b6:	f001 b92d 	b.w	800ca14 <_write_r>

0800b7ba <__sseek>:
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f002 fc75 	bl	800e0b0 <_lseek_r>
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	bf15      	itete	ne
 800b7cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7d6:	81a3      	strheq	r3, [r4, #12]
 800b7d8:	bf18      	it	ne
 800b7da:	81a3      	strhne	r3, [r4, #12]
 800b7dc:	bd10      	pop	{r4, pc}

0800b7de <__sclose>:
 800b7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e2:	f001 b947 	b.w	800ca74 <_close_r>

0800b7e6 <strncmp>:
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	b17a      	cbz	r2, 800b80a <strncmp+0x24>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	3901      	subs	r1, #1
 800b7ee:	1884      	adds	r4, r0, r2
 800b7f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b7f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b7f8:	4290      	cmp	r0, r2
 800b7fa:	d101      	bne.n	800b800 <strncmp+0x1a>
 800b7fc:	42a3      	cmp	r3, r4
 800b7fe:	d101      	bne.n	800b804 <strncmp+0x1e>
 800b800:	1a80      	subs	r0, r0, r2
 800b802:	bd10      	pop	{r4, pc}
 800b804:	2800      	cmp	r0, #0
 800b806:	d1f3      	bne.n	800b7f0 <strncmp+0xa>
 800b808:	e7fa      	b.n	800b800 <strncmp+0x1a>
 800b80a:	4610      	mov	r0, r2
 800b80c:	e7f9      	b.n	800b802 <strncmp+0x1c>

0800b80e <sulp>:
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	4604      	mov	r4, r0
 800b812:	460d      	mov	r5, r1
 800b814:	ec45 4b10 	vmov	d0, r4, r5
 800b818:	4616      	mov	r6, r2
 800b81a:	f002 fff9 	bl	800e810 <__ulp>
 800b81e:	ec51 0b10 	vmov	r0, r1, d0
 800b822:	b17e      	cbz	r6, 800b844 <sulp+0x36>
 800b824:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b828:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd09      	ble.n	800b844 <sulp+0x36>
 800b830:	051b      	lsls	r3, r3, #20
 800b832:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b836:	2400      	movs	r4, #0
 800b838:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b83c:	4622      	mov	r2, r4
 800b83e:	462b      	mov	r3, r5
 800b840:	f7f4 fee4 	bl	800060c <__aeabi_dmul>
 800b844:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b848 <_strtod_l>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ed2d 8b02 	vpush	{d8}
 800b850:	b09d      	sub	sp, #116	; 0x74
 800b852:	461f      	mov	r7, r3
 800b854:	2300      	movs	r3, #0
 800b856:	9318      	str	r3, [sp, #96]	; 0x60
 800b858:	4ba2      	ldr	r3, [pc, #648]	; (800bae4 <_strtod_l+0x29c>)
 800b85a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	9305      	str	r3, [sp, #20]
 800b860:	4604      	mov	r4, r0
 800b862:	4618      	mov	r0, r3
 800b864:	4688      	mov	r8, r1
 800b866:	f7f4 fcb3 	bl	80001d0 <strlen>
 800b86a:	f04f 0a00 	mov.w	sl, #0
 800b86e:	4605      	mov	r5, r0
 800b870:	f04f 0b00 	mov.w	fp, #0
 800b874:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	2a2b      	cmp	r2, #43	; 0x2b
 800b87e:	d04e      	beq.n	800b91e <_strtod_l+0xd6>
 800b880:	d83b      	bhi.n	800b8fa <_strtod_l+0xb2>
 800b882:	2a0d      	cmp	r2, #13
 800b884:	d834      	bhi.n	800b8f0 <_strtod_l+0xa8>
 800b886:	2a08      	cmp	r2, #8
 800b888:	d834      	bhi.n	800b8f4 <_strtod_l+0xac>
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d03e      	beq.n	800b90c <_strtod_l+0xc4>
 800b88e:	2300      	movs	r3, #0
 800b890:	930a      	str	r3, [sp, #40]	; 0x28
 800b892:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b894:	7833      	ldrb	r3, [r6, #0]
 800b896:	2b30      	cmp	r3, #48	; 0x30
 800b898:	f040 80b0 	bne.w	800b9fc <_strtod_l+0x1b4>
 800b89c:	7873      	ldrb	r3, [r6, #1]
 800b89e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b8a2:	2b58      	cmp	r3, #88	; 0x58
 800b8a4:	d168      	bne.n	800b978 <_strtod_l+0x130>
 800b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8a8:	9301      	str	r3, [sp, #4]
 800b8aa:	ab18      	add	r3, sp, #96	; 0x60
 800b8ac:	9702      	str	r7, [sp, #8]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	4a8d      	ldr	r2, [pc, #564]	; (800bae8 <_strtod_l+0x2a0>)
 800b8b2:	ab19      	add	r3, sp, #100	; 0x64
 800b8b4:	a917      	add	r1, sp, #92	; 0x5c
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f001 ffe2 	bl	800d880 <__gethex>
 800b8bc:	f010 0707 	ands.w	r7, r0, #7
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	d005      	beq.n	800b8d0 <_strtod_l+0x88>
 800b8c4:	2f06      	cmp	r7, #6
 800b8c6:	d12c      	bne.n	800b922 <_strtod_l+0xda>
 800b8c8:	3601      	adds	r6, #1
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800b8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f040 8590 	bne.w	800c3f8 <_strtod_l+0xbb0>
 800b8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8da:	b1eb      	cbz	r3, 800b918 <_strtod_l+0xd0>
 800b8dc:	4652      	mov	r2, sl
 800b8de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b8e2:	ec43 2b10 	vmov	d0, r2, r3
 800b8e6:	b01d      	add	sp, #116	; 0x74
 800b8e8:	ecbd 8b02 	vpop	{d8}
 800b8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f0:	2a20      	cmp	r2, #32
 800b8f2:	d1cc      	bne.n	800b88e <_strtod_l+0x46>
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8f8:	e7be      	b.n	800b878 <_strtod_l+0x30>
 800b8fa:	2a2d      	cmp	r2, #45	; 0x2d
 800b8fc:	d1c7      	bne.n	800b88e <_strtod_l+0x46>
 800b8fe:	2201      	movs	r2, #1
 800b900:	920a      	str	r2, [sp, #40]	; 0x28
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	9217      	str	r2, [sp, #92]	; 0x5c
 800b906:	785b      	ldrb	r3, [r3, #1]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1c2      	bne.n	800b892 <_strtod_l+0x4a>
 800b90c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b90e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b912:	2b00      	cmp	r3, #0
 800b914:	f040 856e 	bne.w	800c3f4 <_strtod_l+0xbac>
 800b918:	4652      	mov	r2, sl
 800b91a:	465b      	mov	r3, fp
 800b91c:	e7e1      	b.n	800b8e2 <_strtod_l+0x9a>
 800b91e:	2200      	movs	r2, #0
 800b920:	e7ee      	b.n	800b900 <_strtod_l+0xb8>
 800b922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b924:	b13a      	cbz	r2, 800b936 <_strtod_l+0xee>
 800b926:	2135      	movs	r1, #53	; 0x35
 800b928:	a81a      	add	r0, sp, #104	; 0x68
 800b92a:	f003 f87c 	bl	800ea26 <__copybits>
 800b92e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b930:	4620      	mov	r0, r4
 800b932:	f002 fc3b 	bl	800e1ac <_Bfree>
 800b936:	3f01      	subs	r7, #1
 800b938:	2f04      	cmp	r7, #4
 800b93a:	d806      	bhi.n	800b94a <_strtod_l+0x102>
 800b93c:	e8df f007 	tbb	[pc, r7]
 800b940:	1714030a 	.word	0x1714030a
 800b944:	0a          	.byte	0x0a
 800b945:	00          	.byte	0x00
 800b946:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b94a:	0728      	lsls	r0, r5, #28
 800b94c:	d5c0      	bpl.n	800b8d0 <_strtod_l+0x88>
 800b94e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b952:	e7bd      	b.n	800b8d0 <_strtod_l+0x88>
 800b954:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b95a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b95e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b962:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b966:	e7f0      	b.n	800b94a <_strtod_l+0x102>
 800b968:	f8df b180 	ldr.w	fp, [pc, #384]	; 800baec <_strtod_l+0x2a4>
 800b96c:	e7ed      	b.n	800b94a <_strtod_l+0x102>
 800b96e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b972:	f04f 3aff 	mov.w	sl, #4294967295
 800b976:	e7e8      	b.n	800b94a <_strtod_l+0x102>
 800b978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b97e:	785b      	ldrb	r3, [r3, #1]
 800b980:	2b30      	cmp	r3, #48	; 0x30
 800b982:	d0f9      	beq.n	800b978 <_strtod_l+0x130>
 800b984:	2b00      	cmp	r3, #0
 800b986:	d0a3      	beq.n	800b8d0 <_strtod_l+0x88>
 800b988:	2301      	movs	r3, #1
 800b98a:	f04f 0900 	mov.w	r9, #0
 800b98e:	9304      	str	r3, [sp, #16]
 800b990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b992:	9308      	str	r3, [sp, #32]
 800b994:	f8cd 901c 	str.w	r9, [sp, #28]
 800b998:	464f      	mov	r7, r9
 800b99a:	220a      	movs	r2, #10
 800b99c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b99e:	7806      	ldrb	r6, [r0, #0]
 800b9a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b9a4:	b2d9      	uxtb	r1, r3
 800b9a6:	2909      	cmp	r1, #9
 800b9a8:	d92a      	bls.n	800ba00 <_strtod_l+0x1b8>
 800b9aa:	9905      	ldr	r1, [sp, #20]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	f7ff ff1a 	bl	800b7e6 <strncmp>
 800b9b2:	b398      	cbz	r0, 800ba1c <_strtod_l+0x1d4>
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	463d      	mov	r5, r7
 800b9ba:	9005      	str	r0, [sp, #20]
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2a65      	cmp	r2, #101	; 0x65
 800b9c0:	d001      	beq.n	800b9c6 <_strtod_l+0x17e>
 800b9c2:	2a45      	cmp	r2, #69	; 0x45
 800b9c4:	d118      	bne.n	800b9f8 <_strtod_l+0x1b0>
 800b9c6:	b91d      	cbnz	r5, 800b9d0 <_strtod_l+0x188>
 800b9c8:	9a04      	ldr	r2, [sp, #16]
 800b9ca:	4302      	orrs	r2, r0
 800b9cc:	d09e      	beq.n	800b90c <_strtod_l+0xc4>
 800b9ce:	2500      	movs	r5, #0
 800b9d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b9d4:	f108 0201 	add.w	r2, r8, #1
 800b9d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b9de:	2a2b      	cmp	r2, #43	; 0x2b
 800b9e0:	d075      	beq.n	800bace <_strtod_l+0x286>
 800b9e2:	2a2d      	cmp	r2, #45	; 0x2d
 800b9e4:	d07b      	beq.n	800bade <_strtod_l+0x296>
 800b9e6:	f04f 0c00 	mov.w	ip, #0
 800b9ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b9ee:	2909      	cmp	r1, #9
 800b9f0:	f240 8082 	bls.w	800baf8 <_strtod_l+0x2b0>
 800b9f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	e09d      	b.n	800bb38 <_strtod_l+0x2f0>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e7c4      	b.n	800b98a <_strtod_l+0x142>
 800ba00:	2f08      	cmp	r7, #8
 800ba02:	bfd8      	it	le
 800ba04:	9907      	ldrle	r1, [sp, #28]
 800ba06:	f100 0001 	add.w	r0, r0, #1
 800ba0a:	bfda      	itte	le
 800ba0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba10:	9307      	strle	r3, [sp, #28]
 800ba12:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ba16:	3701      	adds	r7, #1
 800ba18:	9017      	str	r0, [sp, #92]	; 0x5c
 800ba1a:	e7bf      	b.n	800b99c <_strtod_l+0x154>
 800ba1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba1e:	195a      	adds	r2, r3, r5
 800ba20:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba22:	5d5a      	ldrb	r2, [r3, r5]
 800ba24:	2f00      	cmp	r7, #0
 800ba26:	d037      	beq.n	800ba98 <_strtod_l+0x250>
 800ba28:	9005      	str	r0, [sp, #20]
 800ba2a:	463d      	mov	r5, r7
 800ba2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba30:	2b09      	cmp	r3, #9
 800ba32:	d912      	bls.n	800ba5a <_strtod_l+0x212>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e7c2      	b.n	800b9be <_strtod_l+0x176>
 800ba38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba3e:	785a      	ldrb	r2, [r3, #1]
 800ba40:	3001      	adds	r0, #1
 800ba42:	2a30      	cmp	r2, #48	; 0x30
 800ba44:	d0f8      	beq.n	800ba38 <_strtod_l+0x1f0>
 800ba46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	f200 84d9 	bhi.w	800c402 <_strtod_l+0xbba>
 800ba50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba52:	9005      	str	r0, [sp, #20]
 800ba54:	2000      	movs	r0, #0
 800ba56:	9308      	str	r3, [sp, #32]
 800ba58:	4605      	mov	r5, r0
 800ba5a:	3a30      	subs	r2, #48	; 0x30
 800ba5c:	f100 0301 	add.w	r3, r0, #1
 800ba60:	d014      	beq.n	800ba8c <_strtod_l+0x244>
 800ba62:	9905      	ldr	r1, [sp, #20]
 800ba64:	4419      	add	r1, r3
 800ba66:	9105      	str	r1, [sp, #20]
 800ba68:	462b      	mov	r3, r5
 800ba6a:	eb00 0e05 	add.w	lr, r0, r5
 800ba6e:	210a      	movs	r1, #10
 800ba70:	4573      	cmp	r3, lr
 800ba72:	d113      	bne.n	800ba9c <_strtod_l+0x254>
 800ba74:	182b      	adds	r3, r5, r0
 800ba76:	2b08      	cmp	r3, #8
 800ba78:	f105 0501 	add.w	r5, r5, #1
 800ba7c:	4405      	add	r5, r0
 800ba7e:	dc1c      	bgt.n	800baba <_strtod_l+0x272>
 800ba80:	9907      	ldr	r1, [sp, #28]
 800ba82:	230a      	movs	r3, #10
 800ba84:	fb03 2301 	mla	r3, r3, r1, r2
 800ba88:	9307      	str	r3, [sp, #28]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba8e:	1c51      	adds	r1, r2, #1
 800ba90:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba92:	7852      	ldrb	r2, [r2, #1]
 800ba94:	4618      	mov	r0, r3
 800ba96:	e7c9      	b.n	800ba2c <_strtod_l+0x1e4>
 800ba98:	4638      	mov	r0, r7
 800ba9a:	e7d2      	b.n	800ba42 <_strtod_l+0x1fa>
 800ba9c:	2b08      	cmp	r3, #8
 800ba9e:	dc04      	bgt.n	800baaa <_strtod_l+0x262>
 800baa0:	9e07      	ldr	r6, [sp, #28]
 800baa2:	434e      	muls	r6, r1
 800baa4:	9607      	str	r6, [sp, #28]
 800baa6:	3301      	adds	r3, #1
 800baa8:	e7e2      	b.n	800ba70 <_strtod_l+0x228>
 800baaa:	f103 0c01 	add.w	ip, r3, #1
 800baae:	f1bc 0f10 	cmp.w	ip, #16
 800bab2:	bfd8      	it	le
 800bab4:	fb01 f909 	mulle.w	r9, r1, r9
 800bab8:	e7f5      	b.n	800baa6 <_strtod_l+0x25e>
 800baba:	2d10      	cmp	r5, #16
 800babc:	bfdc      	itt	le
 800babe:	230a      	movle	r3, #10
 800bac0:	fb03 2909 	mlale	r9, r3, r9, r2
 800bac4:	e7e1      	b.n	800ba8a <_strtod_l+0x242>
 800bac6:	2300      	movs	r3, #0
 800bac8:	9305      	str	r3, [sp, #20]
 800baca:	2301      	movs	r3, #1
 800bacc:	e77c      	b.n	800b9c8 <_strtod_l+0x180>
 800bace:	f04f 0c00 	mov.w	ip, #0
 800bad2:	f108 0202 	add.w	r2, r8, #2
 800bad6:	9217      	str	r2, [sp, #92]	; 0x5c
 800bad8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800badc:	e785      	b.n	800b9ea <_strtod_l+0x1a2>
 800bade:	f04f 0c01 	mov.w	ip, #1
 800bae2:	e7f6      	b.n	800bad2 <_strtod_l+0x28a>
 800bae4:	08011788 	.word	0x08011788
 800bae8:	080114e0 	.word	0x080114e0
 800baec:	7ff00000 	.word	0x7ff00000
 800baf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baf2:	1c51      	adds	r1, r2, #1
 800baf4:	9117      	str	r1, [sp, #92]	; 0x5c
 800baf6:	7852      	ldrb	r2, [r2, #1]
 800baf8:	2a30      	cmp	r2, #48	; 0x30
 800bafa:	d0f9      	beq.n	800baf0 <_strtod_l+0x2a8>
 800bafc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bb00:	2908      	cmp	r1, #8
 800bb02:	f63f af79 	bhi.w	800b9f8 <_strtod_l+0x1b0>
 800bb06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bb0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb0c:	9206      	str	r2, [sp, #24]
 800bb0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb10:	1c51      	adds	r1, r2, #1
 800bb12:	9117      	str	r1, [sp, #92]	; 0x5c
 800bb14:	7852      	ldrb	r2, [r2, #1]
 800bb16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bb1a:	2e09      	cmp	r6, #9
 800bb1c:	d937      	bls.n	800bb8e <_strtod_l+0x346>
 800bb1e:	9e06      	ldr	r6, [sp, #24]
 800bb20:	1b89      	subs	r1, r1, r6
 800bb22:	2908      	cmp	r1, #8
 800bb24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bb28:	dc02      	bgt.n	800bb30 <_strtod_l+0x2e8>
 800bb2a:	4576      	cmp	r6, lr
 800bb2c:	bfa8      	it	ge
 800bb2e:	4676      	movge	r6, lr
 800bb30:	f1bc 0f00 	cmp.w	ip, #0
 800bb34:	d000      	beq.n	800bb38 <_strtod_l+0x2f0>
 800bb36:	4276      	negs	r6, r6
 800bb38:	2d00      	cmp	r5, #0
 800bb3a:	d14d      	bne.n	800bbd8 <_strtod_l+0x390>
 800bb3c:	9904      	ldr	r1, [sp, #16]
 800bb3e:	4301      	orrs	r1, r0
 800bb40:	f47f aec6 	bne.w	800b8d0 <_strtod_l+0x88>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f47f aee1 	bne.w	800b90c <_strtod_l+0xc4>
 800bb4a:	2a69      	cmp	r2, #105	; 0x69
 800bb4c:	d027      	beq.n	800bb9e <_strtod_l+0x356>
 800bb4e:	dc24      	bgt.n	800bb9a <_strtod_l+0x352>
 800bb50:	2a49      	cmp	r2, #73	; 0x49
 800bb52:	d024      	beq.n	800bb9e <_strtod_l+0x356>
 800bb54:	2a4e      	cmp	r2, #78	; 0x4e
 800bb56:	f47f aed9 	bne.w	800b90c <_strtod_l+0xc4>
 800bb5a:	499f      	ldr	r1, [pc, #636]	; (800bdd8 <_strtod_l+0x590>)
 800bb5c:	a817      	add	r0, sp, #92	; 0x5c
 800bb5e:	f002 f8e7 	bl	800dd30 <__match>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	f43f aed2 	beq.w	800b90c <_strtod_l+0xc4>
 800bb68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b28      	cmp	r3, #40	; 0x28
 800bb6e:	d12d      	bne.n	800bbcc <_strtod_l+0x384>
 800bb70:	499a      	ldr	r1, [pc, #616]	; (800bddc <_strtod_l+0x594>)
 800bb72:	aa1a      	add	r2, sp, #104	; 0x68
 800bb74:	a817      	add	r0, sp, #92	; 0x5c
 800bb76:	f002 f8ef 	bl	800dd58 <__hexnan>
 800bb7a:	2805      	cmp	r0, #5
 800bb7c:	d126      	bne.n	800bbcc <_strtod_l+0x384>
 800bb7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bb84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bb88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bb8c:	e6a0      	b.n	800b8d0 <_strtod_l+0x88>
 800bb8e:	210a      	movs	r1, #10
 800bb90:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bb94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bb98:	e7b9      	b.n	800bb0e <_strtod_l+0x2c6>
 800bb9a:	2a6e      	cmp	r2, #110	; 0x6e
 800bb9c:	e7db      	b.n	800bb56 <_strtod_l+0x30e>
 800bb9e:	4990      	ldr	r1, [pc, #576]	; (800bde0 <_strtod_l+0x598>)
 800bba0:	a817      	add	r0, sp, #92	; 0x5c
 800bba2:	f002 f8c5 	bl	800dd30 <__match>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f43f aeb0 	beq.w	800b90c <_strtod_l+0xc4>
 800bbac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbae:	498d      	ldr	r1, [pc, #564]	; (800bde4 <_strtod_l+0x59c>)
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	a817      	add	r0, sp, #92	; 0x5c
 800bbb4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbb6:	f002 f8bb 	bl	800dd30 <__match>
 800bbba:	b910      	cbnz	r0, 800bbc2 <_strtod_l+0x37a>
 800bbbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bdf4 <_strtod_l+0x5ac>
 800bbc6:	f04f 0a00 	mov.w	sl, #0
 800bbca:	e681      	b.n	800b8d0 <_strtod_l+0x88>
 800bbcc:	4886      	ldr	r0, [pc, #536]	; (800bde8 <_strtod_l+0x5a0>)
 800bbce:	f003 fd6f 	bl	800f6b0 <nan>
 800bbd2:	ec5b ab10 	vmov	sl, fp, d0
 800bbd6:	e67b      	b.n	800b8d0 <_strtod_l+0x88>
 800bbd8:	9b05      	ldr	r3, [sp, #20]
 800bbda:	9807      	ldr	r0, [sp, #28]
 800bbdc:	1af3      	subs	r3, r6, r3
 800bbde:	2f00      	cmp	r7, #0
 800bbe0:	bf08      	it	eq
 800bbe2:	462f      	moveq	r7, r5
 800bbe4:	2d10      	cmp	r5, #16
 800bbe6:	9306      	str	r3, [sp, #24]
 800bbe8:	46a8      	mov	r8, r5
 800bbea:	bfa8      	it	ge
 800bbec:	f04f 0810 	movge.w	r8, #16
 800bbf0:	f7f4 fc92 	bl	8000518 <__aeabi_ui2d>
 800bbf4:	2d09      	cmp	r5, #9
 800bbf6:	4682      	mov	sl, r0
 800bbf8:	468b      	mov	fp, r1
 800bbfa:	dd13      	ble.n	800bc24 <_strtod_l+0x3dc>
 800bbfc:	4b7b      	ldr	r3, [pc, #492]	; (800bdec <_strtod_l+0x5a4>)
 800bbfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bc02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bc06:	f7f4 fd01 	bl	800060c <__aeabi_dmul>
 800bc0a:	4682      	mov	sl, r0
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	468b      	mov	fp, r1
 800bc10:	f7f4 fc82 	bl	8000518 <__aeabi_ui2d>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4650      	mov	r0, sl
 800bc1a:	4659      	mov	r1, fp
 800bc1c:	f7f4 fb40 	bl	80002a0 <__adddf3>
 800bc20:	4682      	mov	sl, r0
 800bc22:	468b      	mov	fp, r1
 800bc24:	2d0f      	cmp	r5, #15
 800bc26:	dc38      	bgt.n	800bc9a <_strtod_l+0x452>
 800bc28:	9b06      	ldr	r3, [sp, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f43f ae50 	beq.w	800b8d0 <_strtod_l+0x88>
 800bc30:	dd24      	ble.n	800bc7c <_strtod_l+0x434>
 800bc32:	2b16      	cmp	r3, #22
 800bc34:	dc0b      	bgt.n	800bc4e <_strtod_l+0x406>
 800bc36:	496d      	ldr	r1, [pc, #436]	; (800bdec <_strtod_l+0x5a4>)
 800bc38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc40:	4652      	mov	r2, sl
 800bc42:	465b      	mov	r3, fp
 800bc44:	f7f4 fce2 	bl	800060c <__aeabi_dmul>
 800bc48:	4682      	mov	sl, r0
 800bc4a:	468b      	mov	fp, r1
 800bc4c:	e640      	b.n	800b8d0 <_strtod_l+0x88>
 800bc4e:	9a06      	ldr	r2, [sp, #24]
 800bc50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bc54:	4293      	cmp	r3, r2
 800bc56:	db20      	blt.n	800bc9a <_strtod_l+0x452>
 800bc58:	4c64      	ldr	r4, [pc, #400]	; (800bdec <_strtod_l+0x5a4>)
 800bc5a:	f1c5 050f 	rsb	r5, r5, #15
 800bc5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc62:	4652      	mov	r2, sl
 800bc64:	465b      	mov	r3, fp
 800bc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc6a:	f7f4 fccf 	bl	800060c <__aeabi_dmul>
 800bc6e:	9b06      	ldr	r3, [sp, #24]
 800bc70:	1b5d      	subs	r5, r3, r5
 800bc72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc7a:	e7e3      	b.n	800bc44 <_strtod_l+0x3fc>
 800bc7c:	9b06      	ldr	r3, [sp, #24]
 800bc7e:	3316      	adds	r3, #22
 800bc80:	db0b      	blt.n	800bc9a <_strtod_l+0x452>
 800bc82:	9b05      	ldr	r3, [sp, #20]
 800bc84:	1b9e      	subs	r6, r3, r6
 800bc86:	4b59      	ldr	r3, [pc, #356]	; (800bdec <_strtod_l+0x5a4>)
 800bc88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bc8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc90:	4650      	mov	r0, sl
 800bc92:	4659      	mov	r1, fp
 800bc94:	f7f4 fde4 	bl	8000860 <__aeabi_ddiv>
 800bc98:	e7d6      	b.n	800bc48 <_strtod_l+0x400>
 800bc9a:	9b06      	ldr	r3, [sp, #24]
 800bc9c:	eba5 0808 	sub.w	r8, r5, r8
 800bca0:	4498      	add	r8, r3
 800bca2:	f1b8 0f00 	cmp.w	r8, #0
 800bca6:	dd74      	ble.n	800bd92 <_strtod_l+0x54a>
 800bca8:	f018 030f 	ands.w	r3, r8, #15
 800bcac:	d00a      	beq.n	800bcc4 <_strtod_l+0x47c>
 800bcae:	494f      	ldr	r1, [pc, #316]	; (800bdec <_strtod_l+0x5a4>)
 800bcb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcb4:	4652      	mov	r2, sl
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcbc:	f7f4 fca6 	bl	800060c <__aeabi_dmul>
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	468b      	mov	fp, r1
 800bcc4:	f038 080f 	bics.w	r8, r8, #15
 800bcc8:	d04f      	beq.n	800bd6a <_strtod_l+0x522>
 800bcca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bcce:	dd22      	ble.n	800bd16 <_strtod_l+0x4ce>
 800bcd0:	2500      	movs	r5, #0
 800bcd2:	462e      	mov	r6, r5
 800bcd4:	9507      	str	r5, [sp, #28]
 800bcd6:	9505      	str	r5, [sp, #20]
 800bcd8:	2322      	movs	r3, #34	; 0x22
 800bcda:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bdf4 <_strtod_l+0x5ac>
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	f04f 0a00 	mov.w	sl, #0
 800bce4:	9b07      	ldr	r3, [sp, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f43f adf2 	beq.w	800b8d0 <_strtod_l+0x88>
 800bcec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f002 fa5c 	bl	800e1ac <_Bfree>
 800bcf4:	9905      	ldr	r1, [sp, #20]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f002 fa58 	bl	800e1ac <_Bfree>
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f002 fa54 	bl	800e1ac <_Bfree>
 800bd04:	9907      	ldr	r1, [sp, #28]
 800bd06:	4620      	mov	r0, r4
 800bd08:	f002 fa50 	bl	800e1ac <_Bfree>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f002 fa4c 	bl	800e1ac <_Bfree>
 800bd14:	e5dc      	b.n	800b8d0 <_strtod_l+0x88>
 800bd16:	4b36      	ldr	r3, [pc, #216]	; (800bdf0 <_strtod_l+0x5a8>)
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	4699      	mov	r9, r3
 800bd26:	f1b8 0f01 	cmp.w	r8, #1
 800bd2a:	dc21      	bgt.n	800bd70 <_strtod_l+0x528>
 800bd2c:	b10b      	cbz	r3, 800bd32 <_strtod_l+0x4ea>
 800bd2e:	4682      	mov	sl, r0
 800bd30:	468b      	mov	fp, r1
 800bd32:	4b2f      	ldr	r3, [pc, #188]	; (800bdf0 <_strtod_l+0x5a8>)
 800bd34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bd38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bd44:	f7f4 fc62 	bl	800060c <__aeabi_dmul>
 800bd48:	4b2a      	ldr	r3, [pc, #168]	; (800bdf4 <_strtod_l+0x5ac>)
 800bd4a:	460a      	mov	r2, r1
 800bd4c:	400b      	ands	r3, r1
 800bd4e:	492a      	ldr	r1, [pc, #168]	; (800bdf8 <_strtod_l+0x5b0>)
 800bd50:	428b      	cmp	r3, r1
 800bd52:	4682      	mov	sl, r0
 800bd54:	d8bc      	bhi.n	800bcd0 <_strtod_l+0x488>
 800bd56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd5a:	428b      	cmp	r3, r1
 800bd5c:	bf86      	itte	hi
 800bd5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bdfc <_strtod_l+0x5b4>
 800bd62:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	9304      	str	r3, [sp, #16]
 800bd6e:	e084      	b.n	800be7a <_strtod_l+0x632>
 800bd70:	f018 0f01 	tst.w	r8, #1
 800bd74:	d005      	beq.n	800bd82 <_strtod_l+0x53a>
 800bd76:	9b04      	ldr	r3, [sp, #16]
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	f7f4 fc46 	bl	800060c <__aeabi_dmul>
 800bd80:	2301      	movs	r3, #1
 800bd82:	9a04      	ldr	r2, [sp, #16]
 800bd84:	3208      	adds	r2, #8
 800bd86:	f109 0901 	add.w	r9, r9, #1
 800bd8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd8e:	9204      	str	r2, [sp, #16]
 800bd90:	e7c9      	b.n	800bd26 <_strtod_l+0x4de>
 800bd92:	d0ea      	beq.n	800bd6a <_strtod_l+0x522>
 800bd94:	f1c8 0800 	rsb	r8, r8, #0
 800bd98:	f018 020f 	ands.w	r2, r8, #15
 800bd9c:	d00a      	beq.n	800bdb4 <_strtod_l+0x56c>
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <_strtod_l+0x5a4>)
 800bda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 fd58 	bl	8000860 <__aeabi_ddiv>
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	468b      	mov	fp, r1
 800bdb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bdb8:	d0d7      	beq.n	800bd6a <_strtod_l+0x522>
 800bdba:	f1b8 0f1f 	cmp.w	r8, #31
 800bdbe:	dd1f      	ble.n	800be00 <_strtod_l+0x5b8>
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	462e      	mov	r6, r5
 800bdc4:	9507      	str	r5, [sp, #28]
 800bdc6:	9505      	str	r5, [sp, #20]
 800bdc8:	2322      	movs	r3, #34	; 0x22
 800bdca:	f04f 0a00 	mov.w	sl, #0
 800bdce:	f04f 0b00 	mov.w	fp, #0
 800bdd2:	6023      	str	r3, [r4, #0]
 800bdd4:	e786      	b.n	800bce4 <_strtod_l+0x49c>
 800bdd6:	bf00      	nop
 800bdd8:	080114b5 	.word	0x080114b5
 800bddc:	080114f4 	.word	0x080114f4
 800bde0:	080114ad 	.word	0x080114ad
 800bde4:	080116ac 	.word	0x080116ac
 800bde8:	080115a7 	.word	0x080115a7
 800bdec:	08011820 	.word	0x08011820
 800bdf0:	080117f8 	.word	0x080117f8
 800bdf4:	7ff00000 	.word	0x7ff00000
 800bdf8:	7ca00000 	.word	0x7ca00000
 800bdfc:	7fefffff 	.word	0x7fefffff
 800be00:	f018 0310 	ands.w	r3, r8, #16
 800be04:	bf18      	it	ne
 800be06:	236a      	movne	r3, #106	; 0x6a
 800be08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c1b8 <_strtod_l+0x970>
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	4650      	mov	r0, sl
 800be10:	4659      	mov	r1, fp
 800be12:	2300      	movs	r3, #0
 800be14:	f018 0f01 	tst.w	r8, #1
 800be18:	d004      	beq.n	800be24 <_strtod_l+0x5dc>
 800be1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be1e:	f7f4 fbf5 	bl	800060c <__aeabi_dmul>
 800be22:	2301      	movs	r3, #1
 800be24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800be28:	f109 0908 	add.w	r9, r9, #8
 800be2c:	d1f2      	bne.n	800be14 <_strtod_l+0x5cc>
 800be2e:	b10b      	cbz	r3, 800be34 <_strtod_l+0x5ec>
 800be30:	4682      	mov	sl, r0
 800be32:	468b      	mov	fp, r1
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	b1c3      	cbz	r3, 800be6a <_strtod_l+0x622>
 800be38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be40:	2b00      	cmp	r3, #0
 800be42:	4659      	mov	r1, fp
 800be44:	dd11      	ble.n	800be6a <_strtod_l+0x622>
 800be46:	2b1f      	cmp	r3, #31
 800be48:	f340 8124 	ble.w	800c094 <_strtod_l+0x84c>
 800be4c:	2b34      	cmp	r3, #52	; 0x34
 800be4e:	bfde      	ittt	le
 800be50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be54:	f04f 33ff 	movle.w	r3, #4294967295
 800be58:	fa03 f202 	lslle.w	r2, r3, r2
 800be5c:	f04f 0a00 	mov.w	sl, #0
 800be60:	bfcc      	ite	gt
 800be62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800be66:	ea02 0b01 	andle.w	fp, r2, r1
 800be6a:	2200      	movs	r2, #0
 800be6c:	2300      	movs	r3, #0
 800be6e:	4650      	mov	r0, sl
 800be70:	4659      	mov	r1, fp
 800be72:	f7f4 fe33 	bl	8000adc <__aeabi_dcmpeq>
 800be76:	2800      	cmp	r0, #0
 800be78:	d1a2      	bne.n	800bdc0 <_strtod_l+0x578>
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	9908      	ldr	r1, [sp, #32]
 800be80:	462b      	mov	r3, r5
 800be82:	463a      	mov	r2, r7
 800be84:	4620      	mov	r0, r4
 800be86:	f002 f9f9 	bl	800e27c <__s2b>
 800be8a:	9007      	str	r0, [sp, #28]
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f43f af1f 	beq.w	800bcd0 <_strtod_l+0x488>
 800be92:	9b05      	ldr	r3, [sp, #20]
 800be94:	1b9e      	subs	r6, r3, r6
 800be96:	9b06      	ldr	r3, [sp, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfb4      	ite	lt
 800be9c:	4633      	movlt	r3, r6
 800be9e:	2300      	movge	r3, #0
 800bea0:	930c      	str	r3, [sp, #48]	; 0x30
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	2500      	movs	r5, #0
 800bea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800beaa:	9312      	str	r3, [sp, #72]	; 0x48
 800beac:	462e      	mov	r6, r5
 800beae:	9b07      	ldr	r3, [sp, #28]
 800beb0:	4620      	mov	r0, r4
 800beb2:	6859      	ldr	r1, [r3, #4]
 800beb4:	f002 f93a 	bl	800e12c <_Balloc>
 800beb8:	9005      	str	r0, [sp, #20]
 800beba:	2800      	cmp	r0, #0
 800bebc:	f43f af0c 	beq.w	800bcd8 <_strtod_l+0x490>
 800bec0:	9b07      	ldr	r3, [sp, #28]
 800bec2:	691a      	ldr	r2, [r3, #16]
 800bec4:	3202      	adds	r2, #2
 800bec6:	f103 010c 	add.w	r1, r3, #12
 800beca:	0092      	lsls	r2, r2, #2
 800becc:	300c      	adds	r0, #12
 800bece:	f002 f913 	bl	800e0f8 <memcpy>
 800bed2:	ec4b ab10 	vmov	d0, sl, fp
 800bed6:	aa1a      	add	r2, sp, #104	; 0x68
 800bed8:	a919      	add	r1, sp, #100	; 0x64
 800beda:	4620      	mov	r0, r4
 800bedc:	f002 fd14 	bl	800e908 <__d2b>
 800bee0:	ec4b ab18 	vmov	d8, sl, fp
 800bee4:	9018      	str	r0, [sp, #96]	; 0x60
 800bee6:	2800      	cmp	r0, #0
 800bee8:	f43f aef6 	beq.w	800bcd8 <_strtod_l+0x490>
 800beec:	2101      	movs	r1, #1
 800beee:	4620      	mov	r0, r4
 800bef0:	f002 fa5e 	bl	800e3b0 <__i2b>
 800bef4:	4606      	mov	r6, r0
 800bef6:	2800      	cmp	r0, #0
 800bef8:	f43f aeee 	beq.w	800bcd8 <_strtod_l+0x490>
 800befc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800befe:	9904      	ldr	r1, [sp, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bfab      	itete	ge
 800bf04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bf06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bf08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bf0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800bf0e:	bfac      	ite	ge
 800bf10:	eb03 0902 	addge.w	r9, r3, r2
 800bf14:	1ad7      	sublt	r7, r2, r3
 800bf16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bf18:	eba3 0801 	sub.w	r8, r3, r1
 800bf1c:	4490      	add	r8, r2
 800bf1e:	4ba1      	ldr	r3, [pc, #644]	; (800c1a4 <_strtod_l+0x95c>)
 800bf20:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf24:	4598      	cmp	r8, r3
 800bf26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf2a:	f280 80c7 	bge.w	800c0bc <_strtod_l+0x874>
 800bf2e:	eba3 0308 	sub.w	r3, r3, r8
 800bf32:	2b1f      	cmp	r3, #31
 800bf34:	eba2 0203 	sub.w	r2, r2, r3
 800bf38:	f04f 0101 	mov.w	r1, #1
 800bf3c:	f300 80b1 	bgt.w	800c0a2 <_strtod_l+0x85a>
 800bf40:	fa01 f303 	lsl.w	r3, r1, r3
 800bf44:	930d      	str	r3, [sp, #52]	; 0x34
 800bf46:	2300      	movs	r3, #0
 800bf48:	9308      	str	r3, [sp, #32]
 800bf4a:	eb09 0802 	add.w	r8, r9, r2
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	45c1      	cmp	r9, r8
 800bf52:	4417      	add	r7, r2
 800bf54:	441f      	add	r7, r3
 800bf56:	464b      	mov	r3, r9
 800bf58:	bfa8      	it	ge
 800bf5a:	4643      	movge	r3, r8
 800bf5c:	42bb      	cmp	r3, r7
 800bf5e:	bfa8      	it	ge
 800bf60:	463b      	movge	r3, r7
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bfc2      	ittt	gt
 800bf66:	eba8 0803 	subgt.w	r8, r8, r3
 800bf6a:	1aff      	subgt	r7, r7, r3
 800bf6c:	eba9 0903 	subgt.w	r9, r9, r3
 800bf70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	dd17      	ble.n	800bfa6 <_strtod_l+0x75e>
 800bf76:	4631      	mov	r1, r6
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f002 fad8 	bl	800e530 <__pow5mult>
 800bf80:	4606      	mov	r6, r0
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f43f aea8 	beq.w	800bcd8 <_strtod_l+0x490>
 800bf88:	4601      	mov	r1, r0
 800bf8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f002 fa25 	bl	800e3dc <__multiply>
 800bf92:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f43f ae9f 	beq.w	800bcd8 <_strtod_l+0x490>
 800bf9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f002 f905 	bl	800e1ac <_Bfree>
 800bfa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa4:	9318      	str	r3, [sp, #96]	; 0x60
 800bfa6:	f1b8 0f00 	cmp.w	r8, #0
 800bfaa:	f300 808c 	bgt.w	800c0c6 <_strtod_l+0x87e>
 800bfae:	9b06      	ldr	r3, [sp, #24]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	dd08      	ble.n	800bfc6 <_strtod_l+0x77e>
 800bfb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfb6:	9905      	ldr	r1, [sp, #20]
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f002 fab9 	bl	800e530 <__pow5mult>
 800bfbe:	9005      	str	r0, [sp, #20]
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	f43f ae89 	beq.w	800bcd8 <_strtod_l+0x490>
 800bfc6:	2f00      	cmp	r7, #0
 800bfc8:	dd08      	ble.n	800bfdc <_strtod_l+0x794>
 800bfca:	9905      	ldr	r1, [sp, #20]
 800bfcc:	463a      	mov	r2, r7
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f002 fb08 	bl	800e5e4 <__lshift>
 800bfd4:	9005      	str	r0, [sp, #20]
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	f43f ae7e 	beq.w	800bcd8 <_strtod_l+0x490>
 800bfdc:	f1b9 0f00 	cmp.w	r9, #0
 800bfe0:	dd08      	ble.n	800bff4 <_strtod_l+0x7ac>
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	464a      	mov	r2, r9
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f002 fafc 	bl	800e5e4 <__lshift>
 800bfec:	4606      	mov	r6, r0
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f43f ae72 	beq.w	800bcd8 <_strtod_l+0x490>
 800bff4:	9a05      	ldr	r2, [sp, #20]
 800bff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bff8:	4620      	mov	r0, r4
 800bffa:	f002 fb7f 	bl	800e6fc <__mdiff>
 800bffe:	4605      	mov	r5, r0
 800c000:	2800      	cmp	r0, #0
 800c002:	f43f ae69 	beq.w	800bcd8 <_strtod_l+0x490>
 800c006:	68c3      	ldr	r3, [r0, #12]
 800c008:	930b      	str	r3, [sp, #44]	; 0x2c
 800c00a:	2300      	movs	r3, #0
 800c00c:	60c3      	str	r3, [r0, #12]
 800c00e:	4631      	mov	r1, r6
 800c010:	f002 fb58 	bl	800e6c4 <__mcmp>
 800c014:	2800      	cmp	r0, #0
 800c016:	da60      	bge.n	800c0da <_strtod_l+0x892>
 800c018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01a:	ea53 030a 	orrs.w	r3, r3, sl
 800c01e:	f040 8082 	bne.w	800c126 <_strtod_l+0x8de>
 800c022:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c026:	2b00      	cmp	r3, #0
 800c028:	d17d      	bne.n	800c126 <_strtod_l+0x8de>
 800c02a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c02e:	0d1b      	lsrs	r3, r3, #20
 800c030:	051b      	lsls	r3, r3, #20
 800c032:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c036:	d976      	bls.n	800c126 <_strtod_l+0x8de>
 800c038:	696b      	ldr	r3, [r5, #20]
 800c03a:	b913      	cbnz	r3, 800c042 <_strtod_l+0x7fa>
 800c03c:	692b      	ldr	r3, [r5, #16]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	dd71      	ble.n	800c126 <_strtod_l+0x8de>
 800c042:	4629      	mov	r1, r5
 800c044:	2201      	movs	r2, #1
 800c046:	4620      	mov	r0, r4
 800c048:	f002 facc 	bl	800e5e4 <__lshift>
 800c04c:	4631      	mov	r1, r6
 800c04e:	4605      	mov	r5, r0
 800c050:	f002 fb38 	bl	800e6c4 <__mcmp>
 800c054:	2800      	cmp	r0, #0
 800c056:	dd66      	ble.n	800c126 <_strtod_l+0x8de>
 800c058:	9904      	ldr	r1, [sp, #16]
 800c05a:	4a53      	ldr	r2, [pc, #332]	; (800c1a8 <_strtod_l+0x960>)
 800c05c:	465b      	mov	r3, fp
 800c05e:	2900      	cmp	r1, #0
 800c060:	f000 8081 	beq.w	800c166 <_strtod_l+0x91e>
 800c064:	ea02 010b 	and.w	r1, r2, fp
 800c068:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c06c:	dc7b      	bgt.n	800c166 <_strtod_l+0x91e>
 800c06e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c072:	f77f aea9 	ble.w	800bdc8 <_strtod_l+0x580>
 800c076:	4b4d      	ldr	r3, [pc, #308]	; (800c1ac <_strtod_l+0x964>)
 800c078:	4650      	mov	r0, sl
 800c07a:	4659      	mov	r1, fp
 800c07c:	2200      	movs	r2, #0
 800c07e:	f7f4 fac5 	bl	800060c <__aeabi_dmul>
 800c082:	460b      	mov	r3, r1
 800c084:	4303      	orrs	r3, r0
 800c086:	bf08      	it	eq
 800c088:	2322      	moveq	r3, #34	; 0x22
 800c08a:	4682      	mov	sl, r0
 800c08c:	468b      	mov	fp, r1
 800c08e:	bf08      	it	eq
 800c090:	6023      	streq	r3, [r4, #0]
 800c092:	e62b      	b.n	800bcec <_strtod_l+0x4a4>
 800c094:	f04f 32ff 	mov.w	r2, #4294967295
 800c098:	fa02 f303 	lsl.w	r3, r2, r3
 800c09c:	ea03 0a0a 	and.w	sl, r3, sl
 800c0a0:	e6e3      	b.n	800be6a <_strtod_l+0x622>
 800c0a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c0a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c0aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c0ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c0b2:	fa01 f308 	lsl.w	r3, r1, r8
 800c0b6:	9308      	str	r3, [sp, #32]
 800c0b8:	910d      	str	r1, [sp, #52]	; 0x34
 800c0ba:	e746      	b.n	800bf4a <_strtod_l+0x702>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9308      	str	r3, [sp, #32]
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0c4:	e741      	b.n	800bf4a <_strtod_l+0x702>
 800c0c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f002 fa8a 	bl	800e5e4 <__lshift>
 800c0d0:	9018      	str	r0, [sp, #96]	; 0x60
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f47f af6b 	bne.w	800bfae <_strtod_l+0x766>
 800c0d8:	e5fe      	b.n	800bcd8 <_strtod_l+0x490>
 800c0da:	465f      	mov	r7, fp
 800c0dc:	d16e      	bne.n	800c1bc <_strtod_l+0x974>
 800c0de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0e4:	b342      	cbz	r2, 800c138 <_strtod_l+0x8f0>
 800c0e6:	4a32      	ldr	r2, [pc, #200]	; (800c1b0 <_strtod_l+0x968>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d128      	bne.n	800c13e <_strtod_l+0x8f6>
 800c0ec:	9b04      	ldr	r3, [sp, #16]
 800c0ee:	4651      	mov	r1, sl
 800c0f0:	b1eb      	cbz	r3, 800c12e <_strtod_l+0x8e6>
 800c0f2:	4b2d      	ldr	r3, [pc, #180]	; (800c1a8 <_strtod_l+0x960>)
 800c0f4:	403b      	ands	r3, r7
 800c0f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fe:	d819      	bhi.n	800c134 <_strtod_l+0x8ec>
 800c100:	0d1b      	lsrs	r3, r3, #20
 800c102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c106:	fa02 f303 	lsl.w	r3, r2, r3
 800c10a:	4299      	cmp	r1, r3
 800c10c:	d117      	bne.n	800c13e <_strtod_l+0x8f6>
 800c10e:	4b29      	ldr	r3, [pc, #164]	; (800c1b4 <_strtod_l+0x96c>)
 800c110:	429f      	cmp	r7, r3
 800c112:	d102      	bne.n	800c11a <_strtod_l+0x8d2>
 800c114:	3101      	adds	r1, #1
 800c116:	f43f addf 	beq.w	800bcd8 <_strtod_l+0x490>
 800c11a:	4b23      	ldr	r3, [pc, #140]	; (800c1a8 <_strtod_l+0x960>)
 800c11c:	403b      	ands	r3, r7
 800c11e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c122:	f04f 0a00 	mov.w	sl, #0
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1a4      	bne.n	800c076 <_strtod_l+0x82e>
 800c12c:	e5de      	b.n	800bcec <_strtod_l+0x4a4>
 800c12e:	f04f 33ff 	mov.w	r3, #4294967295
 800c132:	e7ea      	b.n	800c10a <_strtod_l+0x8c2>
 800c134:	4613      	mov	r3, r2
 800c136:	e7e8      	b.n	800c10a <_strtod_l+0x8c2>
 800c138:	ea53 030a 	orrs.w	r3, r3, sl
 800c13c:	d08c      	beq.n	800c058 <_strtod_l+0x810>
 800c13e:	9b08      	ldr	r3, [sp, #32]
 800c140:	b1db      	cbz	r3, 800c17a <_strtod_l+0x932>
 800c142:	423b      	tst	r3, r7
 800c144:	d0ef      	beq.n	800c126 <_strtod_l+0x8de>
 800c146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c148:	9a04      	ldr	r2, [sp, #16]
 800c14a:	4650      	mov	r0, sl
 800c14c:	4659      	mov	r1, fp
 800c14e:	b1c3      	cbz	r3, 800c182 <_strtod_l+0x93a>
 800c150:	f7ff fb5d 	bl	800b80e <sulp>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	ec51 0b18 	vmov	r0, r1, d8
 800c15c:	f7f4 f8a0 	bl	80002a0 <__adddf3>
 800c160:	4682      	mov	sl, r0
 800c162:	468b      	mov	fp, r1
 800c164:	e7df      	b.n	800c126 <_strtod_l+0x8de>
 800c166:	4013      	ands	r3, r2
 800c168:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c16c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c170:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c174:	f04f 3aff 	mov.w	sl, #4294967295
 800c178:	e7d5      	b.n	800c126 <_strtod_l+0x8de>
 800c17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c17c:	ea13 0f0a 	tst.w	r3, sl
 800c180:	e7e0      	b.n	800c144 <_strtod_l+0x8fc>
 800c182:	f7ff fb44 	bl	800b80e <sulp>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	ec51 0b18 	vmov	r0, r1, d8
 800c18e:	f7f4 f885 	bl	800029c <__aeabi_dsub>
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	4682      	mov	sl, r0
 800c198:	468b      	mov	fp, r1
 800c19a:	f7f4 fc9f 	bl	8000adc <__aeabi_dcmpeq>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d0c1      	beq.n	800c126 <_strtod_l+0x8de>
 800c1a2:	e611      	b.n	800bdc8 <_strtod_l+0x580>
 800c1a4:	fffffc02 	.word	0xfffffc02
 800c1a8:	7ff00000 	.word	0x7ff00000
 800c1ac:	39500000 	.word	0x39500000
 800c1b0:	000fffff 	.word	0x000fffff
 800c1b4:	7fefffff 	.word	0x7fefffff
 800c1b8:	08011508 	.word	0x08011508
 800c1bc:	4631      	mov	r1, r6
 800c1be:	4628      	mov	r0, r5
 800c1c0:	f002 fbfe 	bl	800e9c0 <__ratio>
 800c1c4:	ec59 8b10 	vmov	r8, r9, d0
 800c1c8:	ee10 0a10 	vmov	r0, s0
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	f7f4 fc96 	bl	8000b04 <__aeabi_dcmple>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d07a      	beq.n	800c2d2 <_strtod_l+0xa8a>
 800c1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d04a      	beq.n	800c278 <_strtod_l+0xa30>
 800c1e2:	4b95      	ldr	r3, [pc, #596]	; (800c438 <_strtod_l+0xbf0>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c438 <_strtod_l+0xbf0>
 800c1ee:	f04f 0800 	mov.w	r8, #0
 800c1f2:	4b92      	ldr	r3, [pc, #584]	; (800c43c <_strtod_l+0xbf4>)
 800c1f4:	403b      	ands	r3, r7
 800c1f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c1f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1fa:	4b91      	ldr	r3, [pc, #580]	; (800c440 <_strtod_l+0xbf8>)
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	f040 80b0 	bne.w	800c362 <_strtod_l+0xb1a>
 800c202:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c206:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c20a:	ec4b ab10 	vmov	d0, sl, fp
 800c20e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c212:	f002 fafd 	bl	800e810 <__ulp>
 800c216:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c21a:	ec53 2b10 	vmov	r2, r3, d0
 800c21e:	f7f4 f9f5 	bl	800060c <__aeabi_dmul>
 800c222:	4652      	mov	r2, sl
 800c224:	465b      	mov	r3, fp
 800c226:	f7f4 f83b 	bl	80002a0 <__adddf3>
 800c22a:	460b      	mov	r3, r1
 800c22c:	4983      	ldr	r1, [pc, #524]	; (800c43c <_strtod_l+0xbf4>)
 800c22e:	4a85      	ldr	r2, [pc, #532]	; (800c444 <_strtod_l+0xbfc>)
 800c230:	4019      	ands	r1, r3
 800c232:	4291      	cmp	r1, r2
 800c234:	4682      	mov	sl, r0
 800c236:	d960      	bls.n	800c2fa <_strtod_l+0xab2>
 800c238:	ee18 3a90 	vmov	r3, s17
 800c23c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c240:	4293      	cmp	r3, r2
 800c242:	d104      	bne.n	800c24e <_strtod_l+0xa06>
 800c244:	ee18 3a10 	vmov	r3, s16
 800c248:	3301      	adds	r3, #1
 800c24a:	f43f ad45 	beq.w	800bcd8 <_strtod_l+0x490>
 800c24e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c450 <_strtod_l+0xc08>
 800c252:	f04f 3aff 	mov.w	sl, #4294967295
 800c256:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c258:	4620      	mov	r0, r4
 800c25a:	f001 ffa7 	bl	800e1ac <_Bfree>
 800c25e:	9905      	ldr	r1, [sp, #20]
 800c260:	4620      	mov	r0, r4
 800c262:	f001 ffa3 	bl	800e1ac <_Bfree>
 800c266:	4631      	mov	r1, r6
 800c268:	4620      	mov	r0, r4
 800c26a:	f001 ff9f 	bl	800e1ac <_Bfree>
 800c26e:	4629      	mov	r1, r5
 800c270:	4620      	mov	r0, r4
 800c272:	f001 ff9b 	bl	800e1ac <_Bfree>
 800c276:	e61a      	b.n	800beae <_strtod_l+0x666>
 800c278:	f1ba 0f00 	cmp.w	sl, #0
 800c27c:	d11b      	bne.n	800c2b6 <_strtod_l+0xa6e>
 800c27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c282:	b9f3      	cbnz	r3, 800c2c2 <_strtod_l+0xa7a>
 800c284:	4b6c      	ldr	r3, [pc, #432]	; (800c438 <_strtod_l+0xbf0>)
 800c286:	2200      	movs	r2, #0
 800c288:	4640      	mov	r0, r8
 800c28a:	4649      	mov	r1, r9
 800c28c:	f7f4 fc30 	bl	8000af0 <__aeabi_dcmplt>
 800c290:	b9d0      	cbnz	r0, 800c2c8 <_strtod_l+0xa80>
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	4b6c      	ldr	r3, [pc, #432]	; (800c448 <_strtod_l+0xc00>)
 800c298:	2200      	movs	r2, #0
 800c29a:	f7f4 f9b7 	bl	800060c <__aeabi_dmul>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4689      	mov	r9, r1
 800c2a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c2aa:	9315      	str	r3, [sp, #84]	; 0x54
 800c2ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c2b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c2b4:	e79d      	b.n	800c1f2 <_strtod_l+0x9aa>
 800c2b6:	f1ba 0f01 	cmp.w	sl, #1
 800c2ba:	d102      	bne.n	800c2c2 <_strtod_l+0xa7a>
 800c2bc:	2f00      	cmp	r7, #0
 800c2be:	f43f ad83 	beq.w	800bdc8 <_strtod_l+0x580>
 800c2c2:	4b62      	ldr	r3, [pc, #392]	; (800c44c <_strtod_l+0xc04>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	e78e      	b.n	800c1e6 <_strtod_l+0x99e>
 800c2c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c448 <_strtod_l+0xc00>
 800c2cc:	f04f 0800 	mov.w	r8, #0
 800c2d0:	e7e7      	b.n	800c2a2 <_strtod_l+0xa5a>
 800c2d2:	4b5d      	ldr	r3, [pc, #372]	; (800c448 <_strtod_l+0xc00>)
 800c2d4:	4640      	mov	r0, r8
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f7f4 f997 	bl	800060c <__aeabi_dmul>
 800c2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	4689      	mov	r9, r1
 800c2e4:	b933      	cbnz	r3, 800c2f4 <_strtod_l+0xaac>
 800c2e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ea:	900e      	str	r0, [sp, #56]	; 0x38
 800c2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c2f2:	e7dd      	b.n	800c2b0 <_strtod_l+0xa68>
 800c2f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c2f8:	e7f9      	b.n	800c2ee <_strtod_l+0xaa6>
 800c2fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1a8      	bne.n	800c256 <_strtod_l+0xa0e>
 800c304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c30a:	0d1b      	lsrs	r3, r3, #20
 800c30c:	051b      	lsls	r3, r3, #20
 800c30e:	429a      	cmp	r2, r3
 800c310:	d1a1      	bne.n	800c256 <_strtod_l+0xa0e>
 800c312:	4640      	mov	r0, r8
 800c314:	4649      	mov	r1, r9
 800c316:	f7f4 fd11 	bl	8000d3c <__aeabi_d2lz>
 800c31a:	f7f4 f949 	bl	80005b0 <__aeabi_l2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4640      	mov	r0, r8
 800c324:	4649      	mov	r1, r9
 800c326:	f7f3 ffb9 	bl	800029c <__aeabi_dsub>
 800c32a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c32c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c330:	ea43 030a 	orr.w	r3, r3, sl
 800c334:	4313      	orrs	r3, r2
 800c336:	4680      	mov	r8, r0
 800c338:	4689      	mov	r9, r1
 800c33a:	d055      	beq.n	800c3e8 <_strtod_l+0xba0>
 800c33c:	a336      	add	r3, pc, #216	; (adr r3, 800c418 <_strtod_l+0xbd0>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f4 fbd5 	bl	8000af0 <__aeabi_dcmplt>
 800c346:	2800      	cmp	r0, #0
 800c348:	f47f acd0 	bne.w	800bcec <_strtod_l+0x4a4>
 800c34c:	a334      	add	r3, pc, #208	; (adr r3, 800c420 <_strtod_l+0xbd8>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	4640      	mov	r0, r8
 800c354:	4649      	mov	r1, r9
 800c356:	f7f4 fbe9 	bl	8000b2c <__aeabi_dcmpgt>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	f43f af7b 	beq.w	800c256 <_strtod_l+0xa0e>
 800c360:	e4c4      	b.n	800bcec <_strtod_l+0x4a4>
 800c362:	9b04      	ldr	r3, [sp, #16]
 800c364:	b333      	cbz	r3, 800c3b4 <_strtod_l+0xb6c>
 800c366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c368:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c36c:	d822      	bhi.n	800c3b4 <_strtod_l+0xb6c>
 800c36e:	a32e      	add	r3, pc, #184	; (adr r3, 800c428 <_strtod_l+0xbe0>)
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	4640      	mov	r0, r8
 800c376:	4649      	mov	r1, r9
 800c378:	f7f4 fbc4 	bl	8000b04 <__aeabi_dcmple>
 800c37c:	b1a0      	cbz	r0, 800c3a8 <_strtod_l+0xb60>
 800c37e:	4649      	mov	r1, r9
 800c380:	4640      	mov	r0, r8
 800c382:	f7f4 fc1b 	bl	8000bbc <__aeabi_d2uiz>
 800c386:	2801      	cmp	r0, #1
 800c388:	bf38      	it	cc
 800c38a:	2001      	movcc	r0, #1
 800c38c:	f7f4 f8c4 	bl	8000518 <__aeabi_ui2d>
 800c390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c392:	4680      	mov	r8, r0
 800c394:	4689      	mov	r9, r1
 800c396:	bb23      	cbnz	r3, 800c3e2 <_strtod_l+0xb9a>
 800c398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c39c:	9010      	str	r0, [sp, #64]	; 0x40
 800c39e:	9311      	str	r3, [sp, #68]	; 0x44
 800c3a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c3b0:	1a9b      	subs	r3, r3, r2
 800c3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3bc:	eef0 0a68 	vmov.f32	s1, s17
 800c3c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3c4:	f002 fa24 	bl	800e810 <__ulp>
 800c3c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3cc:	ec53 2b10 	vmov	r2, r3, d0
 800c3d0:	f7f4 f91c 	bl	800060c <__aeabi_dmul>
 800c3d4:	ec53 2b18 	vmov	r2, r3, d8
 800c3d8:	f7f3 ff62 	bl	80002a0 <__adddf3>
 800c3dc:	4682      	mov	sl, r0
 800c3de:	468b      	mov	fp, r1
 800c3e0:	e78d      	b.n	800c2fe <_strtod_l+0xab6>
 800c3e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c3e6:	e7db      	b.n	800c3a0 <_strtod_l+0xb58>
 800c3e8:	a311      	add	r3, pc, #68	; (adr r3, 800c430 <_strtod_l+0xbe8>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f4 fb7f 	bl	8000af0 <__aeabi_dcmplt>
 800c3f2:	e7b2      	b.n	800c35a <_strtod_l+0xb12>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	f7ff ba6b 	b.w	800b8d8 <_strtod_l+0x90>
 800c402:	2a65      	cmp	r2, #101	; 0x65
 800c404:	f43f ab5f 	beq.w	800bac6 <_strtod_l+0x27e>
 800c408:	2a45      	cmp	r2, #69	; 0x45
 800c40a:	f43f ab5c 	beq.w	800bac6 <_strtod_l+0x27e>
 800c40e:	2301      	movs	r3, #1
 800c410:	f7ff bb94 	b.w	800bb3c <_strtod_l+0x2f4>
 800c414:	f3af 8000 	nop.w
 800c418:	94a03595 	.word	0x94a03595
 800c41c:	3fdfffff 	.word	0x3fdfffff
 800c420:	35afe535 	.word	0x35afe535
 800c424:	3fe00000 	.word	0x3fe00000
 800c428:	ffc00000 	.word	0xffc00000
 800c42c:	41dfffff 	.word	0x41dfffff
 800c430:	94a03595 	.word	0x94a03595
 800c434:	3fcfffff 	.word	0x3fcfffff
 800c438:	3ff00000 	.word	0x3ff00000
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	7fe00000 	.word	0x7fe00000
 800c444:	7c9fffff 	.word	0x7c9fffff
 800c448:	3fe00000 	.word	0x3fe00000
 800c44c:	bff00000 	.word	0xbff00000
 800c450:	7fefffff 	.word	0x7fefffff

0800c454 <_strtod_r>:
 800c454:	4b01      	ldr	r3, [pc, #4]	; (800c45c <_strtod_r+0x8>)
 800c456:	f7ff b9f7 	b.w	800b848 <_strtod_l>
 800c45a:	bf00      	nop
 800c45c:	200001dc 	.word	0x200001dc

0800c460 <_strtol_l.constprop.0>:
 800c460:	2b01      	cmp	r3, #1
 800c462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c466:	d001      	beq.n	800c46c <_strtol_l.constprop.0+0xc>
 800c468:	2b24      	cmp	r3, #36	; 0x24
 800c46a:	d906      	bls.n	800c47a <_strtol_l.constprop.0+0x1a>
 800c46c:	f7fe f866 	bl	800a53c <__errno>
 800c470:	2316      	movs	r3, #22
 800c472:	6003      	str	r3, [r0, #0]
 800c474:	2000      	movs	r0, #0
 800c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c560 <_strtol_l.constprop.0+0x100>
 800c47e:	460d      	mov	r5, r1
 800c480:	462e      	mov	r6, r5
 800c482:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c486:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c48a:	f017 0708 	ands.w	r7, r7, #8
 800c48e:	d1f7      	bne.n	800c480 <_strtol_l.constprop.0+0x20>
 800c490:	2c2d      	cmp	r4, #45	; 0x2d
 800c492:	d132      	bne.n	800c4fa <_strtol_l.constprop.0+0x9a>
 800c494:	782c      	ldrb	r4, [r5, #0]
 800c496:	2701      	movs	r7, #1
 800c498:	1cb5      	adds	r5, r6, #2
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d05b      	beq.n	800c556 <_strtol_l.constprop.0+0xf6>
 800c49e:	2b10      	cmp	r3, #16
 800c4a0:	d109      	bne.n	800c4b6 <_strtol_l.constprop.0+0x56>
 800c4a2:	2c30      	cmp	r4, #48	; 0x30
 800c4a4:	d107      	bne.n	800c4b6 <_strtol_l.constprop.0+0x56>
 800c4a6:	782c      	ldrb	r4, [r5, #0]
 800c4a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c4ac:	2c58      	cmp	r4, #88	; 0x58
 800c4ae:	d14d      	bne.n	800c54c <_strtol_l.constprop.0+0xec>
 800c4b0:	786c      	ldrb	r4, [r5, #1]
 800c4b2:	2310      	movs	r3, #16
 800c4b4:	3502      	adds	r5, #2
 800c4b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4be:	f04f 0c00 	mov.w	ip, #0
 800c4c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c4c6:	4666      	mov	r6, ip
 800c4c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c4cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c4d0:	f1be 0f09 	cmp.w	lr, #9
 800c4d4:	d816      	bhi.n	800c504 <_strtol_l.constprop.0+0xa4>
 800c4d6:	4674      	mov	r4, lr
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	dd24      	ble.n	800c526 <_strtol_l.constprop.0+0xc6>
 800c4dc:	f1bc 0f00 	cmp.w	ip, #0
 800c4e0:	db1e      	blt.n	800c520 <_strtol_l.constprop.0+0xc0>
 800c4e2:	45b1      	cmp	r9, r6
 800c4e4:	d31c      	bcc.n	800c520 <_strtol_l.constprop.0+0xc0>
 800c4e6:	d101      	bne.n	800c4ec <_strtol_l.constprop.0+0x8c>
 800c4e8:	45a2      	cmp	sl, r4
 800c4ea:	db19      	blt.n	800c520 <_strtol_l.constprop.0+0xc0>
 800c4ec:	fb06 4603 	mla	r6, r6, r3, r4
 800c4f0:	f04f 0c01 	mov.w	ip, #1
 800c4f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4f8:	e7e8      	b.n	800c4cc <_strtol_l.constprop.0+0x6c>
 800c4fa:	2c2b      	cmp	r4, #43	; 0x2b
 800c4fc:	bf04      	itt	eq
 800c4fe:	782c      	ldrbeq	r4, [r5, #0]
 800c500:	1cb5      	addeq	r5, r6, #2
 800c502:	e7ca      	b.n	800c49a <_strtol_l.constprop.0+0x3a>
 800c504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c508:	f1be 0f19 	cmp.w	lr, #25
 800c50c:	d801      	bhi.n	800c512 <_strtol_l.constprop.0+0xb2>
 800c50e:	3c37      	subs	r4, #55	; 0x37
 800c510:	e7e2      	b.n	800c4d8 <_strtol_l.constprop.0+0x78>
 800c512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c516:	f1be 0f19 	cmp.w	lr, #25
 800c51a:	d804      	bhi.n	800c526 <_strtol_l.constprop.0+0xc6>
 800c51c:	3c57      	subs	r4, #87	; 0x57
 800c51e:	e7db      	b.n	800c4d8 <_strtol_l.constprop.0+0x78>
 800c520:	f04f 3cff 	mov.w	ip, #4294967295
 800c524:	e7e6      	b.n	800c4f4 <_strtol_l.constprop.0+0x94>
 800c526:	f1bc 0f00 	cmp.w	ip, #0
 800c52a:	da05      	bge.n	800c538 <_strtol_l.constprop.0+0xd8>
 800c52c:	2322      	movs	r3, #34	; 0x22
 800c52e:	6003      	str	r3, [r0, #0]
 800c530:	4646      	mov	r6, r8
 800c532:	b942      	cbnz	r2, 800c546 <_strtol_l.constprop.0+0xe6>
 800c534:	4630      	mov	r0, r6
 800c536:	e79e      	b.n	800c476 <_strtol_l.constprop.0+0x16>
 800c538:	b107      	cbz	r7, 800c53c <_strtol_l.constprop.0+0xdc>
 800c53a:	4276      	negs	r6, r6
 800c53c:	2a00      	cmp	r2, #0
 800c53e:	d0f9      	beq.n	800c534 <_strtol_l.constprop.0+0xd4>
 800c540:	f1bc 0f00 	cmp.w	ip, #0
 800c544:	d000      	beq.n	800c548 <_strtol_l.constprop.0+0xe8>
 800c546:	1e69      	subs	r1, r5, #1
 800c548:	6011      	str	r1, [r2, #0]
 800c54a:	e7f3      	b.n	800c534 <_strtol_l.constprop.0+0xd4>
 800c54c:	2430      	movs	r4, #48	; 0x30
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1b1      	bne.n	800c4b6 <_strtol_l.constprop.0+0x56>
 800c552:	2308      	movs	r3, #8
 800c554:	e7af      	b.n	800c4b6 <_strtol_l.constprop.0+0x56>
 800c556:	2c30      	cmp	r4, #48	; 0x30
 800c558:	d0a5      	beq.n	800c4a6 <_strtol_l.constprop.0+0x46>
 800c55a:	230a      	movs	r3, #10
 800c55c:	e7ab      	b.n	800c4b6 <_strtol_l.constprop.0+0x56>
 800c55e:	bf00      	nop
 800c560:	080115a9 	.word	0x080115a9

0800c564 <_strtol_r>:
 800c564:	f7ff bf7c 	b.w	800c460 <_strtol_l.constprop.0>

0800c568 <time>:
 800c568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c56a:	4b0b      	ldr	r3, [pc, #44]	; (800c598 <time+0x30>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	4669      	mov	r1, sp
 800c570:	4604      	mov	r4, r0
 800c572:	6818      	ldr	r0, [r3, #0]
 800c574:	f001 fcd0 	bl	800df18 <_gettimeofday_r>
 800c578:	2800      	cmp	r0, #0
 800c57a:	bfbe      	ittt	lt
 800c57c:	f04f 32ff 	movlt.w	r2, #4294967295
 800c580:	f04f 33ff 	movlt.w	r3, #4294967295
 800c584:	e9cd 2300 	strdlt	r2, r3, [sp]
 800c588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c58c:	b10c      	cbz	r4, 800c592 <time+0x2a>
 800c58e:	e9c4 0100 	strd	r0, r1, [r4]
 800c592:	b004      	add	sp, #16
 800c594:	bd10      	pop	{r4, pc}
 800c596:	bf00      	nop
 800c598:	20000110 	.word	0x20000110

0800c59c <__tzcalc_limits>:
 800c59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	f001 fccb 	bl	800df3c <__gettzinfo>
 800c5a6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800c5aa:	429d      	cmp	r5, r3
 800c5ac:	f340 8099 	ble.w	800c6e2 <__tzcalc_limits+0x146>
 800c5b0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800c5b4:	18ac      	adds	r4, r5, r2
 800c5b6:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800c5ba:	f240 126d 	movw	r2, #365	; 0x16d
 800c5be:	10a4      	asrs	r4, r4, #2
 800c5c0:	fb02 4403 	mla	r4, r2, r3, r4
 800c5c4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800c5c8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800c5cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5d0:	441c      	add	r4, r3
 800c5d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c5d6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800c5da:	fb95 fcf3 	sdiv	ip, r5, r3
 800c5de:	fb03 5c1c 	mls	ip, r3, ip, r5
 800c5e2:	186a      	adds	r2, r5, r1
 800c5e4:	fabc f68c 	clz	r6, ip
 800c5e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c5ec:	f005 0303 	and.w	r3, r5, #3
 800c5f0:	4414      	add	r4, r2
 800c5f2:	2264      	movs	r2, #100	; 0x64
 800c5f4:	6045      	str	r5, [r0, #4]
 800c5f6:	fb95 f7f2 	sdiv	r7, r5, r2
 800c5fa:	0976      	lsrs	r6, r6, #5
 800c5fc:	fb02 5717 	mls	r7, r2, r7, r5
 800c600:	4601      	mov	r1, r0
 800c602:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	f04f 0a07 	mov.w	sl, #7
 800c60c:	7a0d      	ldrb	r5, [r1, #8]
 800c60e:	694b      	ldr	r3, [r1, #20]
 800c610:	2d4a      	cmp	r5, #74	; 0x4a
 800c612:	d12d      	bne.n	800c670 <__tzcalc_limits+0xd4>
 800c614:	9a00      	ldr	r2, [sp, #0]
 800c616:	eb04 0e03 	add.w	lr, r4, r3
 800c61a:	b902      	cbnz	r2, 800c61e <__tzcalc_limits+0x82>
 800c61c:	b917      	cbnz	r7, 800c624 <__tzcalc_limits+0x88>
 800c61e:	f1bc 0f00 	cmp.w	ip, #0
 800c622:	d123      	bne.n	800c66c <__tzcalc_limits+0xd0>
 800c624:	2b3b      	cmp	r3, #59	; 0x3b
 800c626:	bfd4      	ite	le
 800c628:	2300      	movle	r3, #0
 800c62a:	2301      	movgt	r3, #1
 800c62c:	4473      	add	r3, lr
 800c62e:	3b01      	subs	r3, #1
 800c630:	698d      	ldr	r5, [r1, #24]
 800c632:	4a2d      	ldr	r2, [pc, #180]	; (800c6e8 <__tzcalc_limits+0x14c>)
 800c634:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800c638:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800c63c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800c63e:	18ed      	adds	r5, r5, r3
 800c640:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800c644:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800c648:	3128      	adds	r1, #40	; 0x28
 800c64a:	458b      	cmp	fp, r1
 800c64c:	d1de      	bne.n	800c60c <__tzcalc_limits+0x70>
 800c64e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800c652:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800c656:	428c      	cmp	r4, r1
 800c658:	eb72 0303 	sbcs.w	r3, r2, r3
 800c65c:	bfb4      	ite	lt
 800c65e:	2301      	movlt	r3, #1
 800c660:	2300      	movge	r3, #0
 800c662:	6003      	str	r3, [r0, #0]
 800c664:	2001      	movs	r0, #1
 800c666:	b003      	add	sp, #12
 800c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66c:	2300      	movs	r3, #0
 800c66e:	e7dd      	b.n	800c62c <__tzcalc_limits+0x90>
 800c670:	2d44      	cmp	r5, #68	; 0x44
 800c672:	d101      	bne.n	800c678 <__tzcalc_limits+0xdc>
 800c674:	4423      	add	r3, r4
 800c676:	e7db      	b.n	800c630 <__tzcalc_limits+0x94>
 800c678:	9a00      	ldr	r2, [sp, #0]
 800c67a:	bb62      	cbnz	r2, 800c6d6 <__tzcalc_limits+0x13a>
 800c67c:	2f00      	cmp	r7, #0
 800c67e:	bf0c      	ite	eq
 800c680:	4635      	moveq	r5, r6
 800c682:	2501      	movne	r5, #1
 800c684:	68ca      	ldr	r2, [r1, #12]
 800c686:	9201      	str	r2, [sp, #4]
 800c688:	4a18      	ldr	r2, [pc, #96]	; (800c6ec <__tzcalc_limits+0x150>)
 800c68a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800c68e:	fb09 2505 	mla	r5, r9, r5, r2
 800c692:	46a6      	mov	lr, r4
 800c694:	f04f 0800 	mov.w	r8, #0
 800c698:	3d04      	subs	r5, #4
 800c69a:	9a01      	ldr	r2, [sp, #4]
 800c69c:	f108 0801 	add.w	r8, r8, #1
 800c6a0:	4542      	cmp	r2, r8
 800c6a2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800c6a6:	dc18      	bgt.n	800c6da <__tzcalc_limits+0x13e>
 800c6a8:	f10e 0504 	add.w	r5, lr, #4
 800c6ac:	fb95 f8fa 	sdiv	r8, r5, sl
 800c6b0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800c6b4:	eba5 0808 	sub.w	r8, r5, r8
 800c6b8:	ebb3 0808 	subs.w	r8, r3, r8
 800c6bc:	690b      	ldr	r3, [r1, #16]
 800c6be:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6c2:	bf48      	it	mi
 800c6c4:	f108 0807 	addmi.w	r8, r8, #7
 800c6c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c6cc:	4443      	add	r3, r8
 800c6ce:	454b      	cmp	r3, r9
 800c6d0:	da05      	bge.n	800c6de <__tzcalc_limits+0x142>
 800c6d2:	4473      	add	r3, lr
 800c6d4:	e7ac      	b.n	800c630 <__tzcalc_limits+0x94>
 800c6d6:	4635      	mov	r5, r6
 800c6d8:	e7d4      	b.n	800c684 <__tzcalc_limits+0xe8>
 800c6da:	44ce      	add	lr, r9
 800c6dc:	e7dd      	b.n	800c69a <__tzcalc_limits+0xfe>
 800c6de:	3b07      	subs	r3, #7
 800c6e0:	e7f5      	b.n	800c6ce <__tzcalc_limits+0x132>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e7bf      	b.n	800c666 <__tzcalc_limits+0xca>
 800c6e6:	bf00      	nop
 800c6e8:	00015180 	.word	0x00015180
 800c6ec:	08011448 	.word	0x08011448

0800c6f0 <__tz_lock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__tz_lock+0x8>)
 800c6f2:	f001 bcd8 	b.w	800e0a6 <__retarget_lock_acquire>
 800c6f6:	bf00      	nop
 800c6f8:	20000afc 	.word	0x20000afc

0800c6fc <__tz_unlock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__tz_unlock+0x8>)
 800c6fe:	f001 bcd4 	b.w	800e0aa <__retarget_lock_release>
 800c702:	bf00      	nop
 800c704:	20000afc 	.word	0x20000afc

0800c708 <_tzset_unlocked>:
 800c708:	4b01      	ldr	r3, [pc, #4]	; (800c710 <_tzset_unlocked+0x8>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	f000 b802 	b.w	800c714 <_tzset_unlocked_r>
 800c710:	20000110 	.word	0x20000110

0800c714 <_tzset_unlocked_r>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	b08d      	sub	sp, #52	; 0x34
 800c71a:	4607      	mov	r7, r0
 800c71c:	f001 fc0e 	bl	800df3c <__gettzinfo>
 800c720:	49b0      	ldr	r1, [pc, #704]	; (800c9e4 <_tzset_unlocked_r+0x2d0>)
 800c722:	4eb1      	ldr	r6, [pc, #708]	; (800c9e8 <_tzset_unlocked_r+0x2d4>)
 800c724:	4605      	mov	r5, r0
 800c726:	4638      	mov	r0, r7
 800c728:	f001 fbee 	bl	800df08 <_getenv_r>
 800c72c:	4604      	mov	r4, r0
 800c72e:	b970      	cbnz	r0, 800c74e <_tzset_unlocked_r+0x3a>
 800c730:	4bae      	ldr	r3, [pc, #696]	; (800c9ec <_tzset_unlocked_r+0x2d8>)
 800c732:	4aaf      	ldr	r2, [pc, #700]	; (800c9f0 <_tzset_unlocked_r+0x2dc>)
 800c734:	6018      	str	r0, [r3, #0]
 800c736:	4baf      	ldr	r3, [pc, #700]	; (800c9f4 <_tzset_unlocked_r+0x2e0>)
 800c738:	6018      	str	r0, [r3, #0]
 800c73a:	4baf      	ldr	r3, [pc, #700]	; (800c9f8 <_tzset_unlocked_r+0x2e4>)
 800c73c:	6830      	ldr	r0, [r6, #0]
 800c73e:	e9c3 2200 	strd	r2, r2, [r3]
 800c742:	f7fe f83f 	bl	800a7c4 <free>
 800c746:	6034      	str	r4, [r6, #0]
 800c748:	b00d      	add	sp, #52	; 0x34
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	6831      	ldr	r1, [r6, #0]
 800c750:	2900      	cmp	r1, #0
 800c752:	d162      	bne.n	800c81a <_tzset_unlocked_r+0x106>
 800c754:	6830      	ldr	r0, [r6, #0]
 800c756:	f7fe f835 	bl	800a7c4 <free>
 800c75a:	4620      	mov	r0, r4
 800c75c:	f7f3 fd38 	bl	80001d0 <strlen>
 800c760:	1c41      	adds	r1, r0, #1
 800c762:	4638      	mov	r0, r7
 800c764:	f7fe f8aa 	bl	800a8bc <_malloc_r>
 800c768:	6030      	str	r0, [r6, #0]
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d15a      	bne.n	800c824 <_tzset_unlocked_r+0x110>
 800c76e:	7823      	ldrb	r3, [r4, #0]
 800c770:	4aa2      	ldr	r2, [pc, #648]	; (800c9fc <_tzset_unlocked_r+0x2e8>)
 800c772:	49a3      	ldr	r1, [pc, #652]	; (800ca00 <_tzset_unlocked_r+0x2ec>)
 800c774:	2b3a      	cmp	r3, #58	; 0x3a
 800c776:	bf08      	it	eq
 800c778:	3401      	addeq	r4, #1
 800c77a:	ae0a      	add	r6, sp, #40	; 0x28
 800c77c:	4633      	mov	r3, r6
 800c77e:	4620      	mov	r0, r4
 800c780:	f7fe ffc0 	bl	800b704 <siscanf>
 800c784:	2800      	cmp	r0, #0
 800c786:	dddf      	ble.n	800c748 <_tzset_unlocked_r+0x34>
 800c788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78a:	18e7      	adds	r7, r4, r3
 800c78c:	5ce3      	ldrb	r3, [r4, r3]
 800c78e:	2b2d      	cmp	r3, #45	; 0x2d
 800c790:	d14c      	bne.n	800c82c <_tzset_unlocked_r+0x118>
 800c792:	3701      	adds	r7, #1
 800c794:	f04f 38ff 	mov.w	r8, #4294967295
 800c798:	f10d 0a20 	add.w	sl, sp, #32
 800c79c:	f10d 0b1e 	add.w	fp, sp, #30
 800c7a0:	2400      	movs	r4, #0
 800c7a2:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800c7a6:	4997      	ldr	r1, [pc, #604]	; (800ca04 <_tzset_unlocked_r+0x2f0>)
 800c7a8:	9603      	str	r6, [sp, #12]
 800c7aa:	f8cd b000 	str.w	fp, [sp]
 800c7ae:	4633      	mov	r3, r6
 800c7b0:	aa07      	add	r2, sp, #28
 800c7b2:	4638      	mov	r0, r7
 800c7b4:	f8ad 401e 	strh.w	r4, [sp, #30]
 800c7b8:	f8ad 4020 	strh.w	r4, [sp, #32]
 800c7bc:	f7fe ffa2 	bl	800b704 <siscanf>
 800c7c0:	42a0      	cmp	r0, r4
 800c7c2:	ddc1      	ble.n	800c748 <_tzset_unlocked_r+0x34>
 800c7c4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c7c8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c7cc:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800ca10 <_tzset_unlocked_r+0x2fc>
 800c7d0:	213c      	movs	r1, #60	; 0x3c
 800c7d2:	fb01 3302 	mla	r3, r1, r2, r3
 800c7d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c7da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c7de:	fb01 3302 	mla	r3, r1, r2, r3
 800c7e2:	fb08 f303 	mul.w	r3, r8, r3
 800c7e6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800c9f8 <_tzset_unlocked_r+0x2e4>
 800c7ea:	62ab      	str	r3, [r5, #40]	; 0x28
 800c7ec:	4b83      	ldr	r3, [pc, #524]	; (800c9fc <_tzset_unlocked_r+0x2e8>)
 800c7ee:	f8c8 3000 	str.w	r3, [r8]
 800c7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f4:	4982      	ldr	r1, [pc, #520]	; (800ca00 <_tzset_unlocked_r+0x2ec>)
 800c7f6:	441f      	add	r7, r3
 800c7f8:	464a      	mov	r2, r9
 800c7fa:	4633      	mov	r3, r6
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7fe ff81 	bl	800b704 <siscanf>
 800c802:	42a0      	cmp	r0, r4
 800c804:	dc18      	bgt.n	800c838 <_tzset_unlocked_r+0x124>
 800c806:	f8d8 3000 	ldr.w	r3, [r8]
 800c80a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c80e:	4b77      	ldr	r3, [pc, #476]	; (800c9ec <_tzset_unlocked_r+0x2d8>)
 800c810:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	4b77      	ldr	r3, [pc, #476]	; (800c9f4 <_tzset_unlocked_r+0x2e0>)
 800c816:	601c      	str	r4, [r3, #0]
 800c818:	e796      	b.n	800c748 <_tzset_unlocked_r+0x34>
 800c81a:	f7f3 fd31 	bl	8000280 <strcmp>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d198      	bne.n	800c754 <_tzset_unlocked_r+0x40>
 800c822:	e791      	b.n	800c748 <_tzset_unlocked_r+0x34>
 800c824:	4621      	mov	r1, r4
 800c826:	f002 ff83 	bl	800f730 <strcpy>
 800c82a:	e7a0      	b.n	800c76e <_tzset_unlocked_r+0x5a>
 800c82c:	2b2b      	cmp	r3, #43	; 0x2b
 800c82e:	bf08      	it	eq
 800c830:	3701      	addeq	r7, #1
 800c832:	f04f 0801 	mov.w	r8, #1
 800c836:	e7af      	b.n	800c798 <_tzset_unlocked_r+0x84>
 800c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83a:	f8c8 9004 	str.w	r9, [r8, #4]
 800c83e:	18fc      	adds	r4, r7, r3
 800c840:	5cfb      	ldrb	r3, [r7, r3]
 800c842:	2b2d      	cmp	r3, #45	; 0x2d
 800c844:	f040 808b 	bne.w	800c95e <_tzset_unlocked_r+0x24a>
 800c848:	3401      	adds	r4, #1
 800c84a:	f04f 37ff 	mov.w	r7, #4294967295
 800c84e:	2300      	movs	r3, #0
 800c850:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c854:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c858:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c85c:	930a      	str	r3, [sp, #40]	; 0x28
 800c85e:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c862:	e9cd b600 	strd	fp, r6, [sp]
 800c866:	4967      	ldr	r1, [pc, #412]	; (800ca04 <_tzset_unlocked_r+0x2f0>)
 800c868:	4633      	mov	r3, r6
 800c86a:	aa07      	add	r2, sp, #28
 800c86c:	4620      	mov	r0, r4
 800c86e:	f7fe ff49 	bl	800b704 <siscanf>
 800c872:	2800      	cmp	r0, #0
 800c874:	dc78      	bgt.n	800c968 <_tzset_unlocked_r+0x254>
 800c876:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c878:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800c87c:	652b      	str	r3, [r5, #80]	; 0x50
 800c87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c880:	462f      	mov	r7, r5
 800c882:	441c      	add	r4, r3
 800c884:	f04f 0900 	mov.w	r9, #0
 800c888:	7823      	ldrb	r3, [r4, #0]
 800c88a:	2b2c      	cmp	r3, #44	; 0x2c
 800c88c:	bf08      	it	eq
 800c88e:	3401      	addeq	r4, #1
 800c890:	f894 8000 	ldrb.w	r8, [r4]
 800c894:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800c898:	d178      	bne.n	800c98c <_tzset_unlocked_r+0x278>
 800c89a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800c89e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800c8a2:	ab09      	add	r3, sp, #36	; 0x24
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	4958      	ldr	r1, [pc, #352]	; (800ca08 <_tzset_unlocked_r+0x2f4>)
 800c8a8:	9603      	str	r6, [sp, #12]
 800c8aa:	4633      	mov	r3, r6
 800c8ac:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7fe ff27 	bl	800b704 <siscanf>
 800c8b6:	2803      	cmp	r0, #3
 800c8b8:	f47f af46 	bne.w	800c748 <_tzset_unlocked_r+0x34>
 800c8bc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800c8c0:	1e4b      	subs	r3, r1, #1
 800c8c2:	2b0b      	cmp	r3, #11
 800c8c4:	f63f af40 	bhi.w	800c748 <_tzset_unlocked_r+0x34>
 800c8c8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800c8cc:	1e53      	subs	r3, r2, #1
 800c8ce:	2b04      	cmp	r3, #4
 800c8d0:	f63f af3a 	bhi.w	800c748 <_tzset_unlocked_r+0x34>
 800c8d4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800c8d8:	2b06      	cmp	r3, #6
 800c8da:	f63f af35 	bhi.w	800c748 <_tzset_unlocked_r+0x34>
 800c8de:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800c8e2:	f887 8008 	strb.w	r8, [r7, #8]
 800c8e6:	617b      	str	r3, [r7, #20]
 800c8e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ea:	eb04 0803 	add.w	r8, r4, r3
 800c8ee:	2302      	movs	r3, #2
 800c8f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c8fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 800c8fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c900:	f898 3000 	ldrb.w	r3, [r8]
 800c904:	2b2f      	cmp	r3, #47	; 0x2f
 800c906:	d109      	bne.n	800c91c <_tzset_unlocked_r+0x208>
 800c908:	e9cd a602 	strd	sl, r6, [sp, #8]
 800c90c:	e9cd b600 	strd	fp, r6, [sp]
 800c910:	493e      	ldr	r1, [pc, #248]	; (800ca0c <_tzset_unlocked_r+0x2f8>)
 800c912:	4633      	mov	r3, r6
 800c914:	aa07      	add	r2, sp, #28
 800c916:	4640      	mov	r0, r8
 800c918:	f7fe fef4 	bl	800b704 <siscanf>
 800c91c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c920:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c924:	213c      	movs	r1, #60	; 0x3c
 800c926:	fb01 3302 	mla	r3, r1, r2, r3
 800c92a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c92e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c932:	fb01 3302 	mla	r3, r1, r2, r3
 800c936:	61bb      	str	r3, [r7, #24]
 800c938:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c93a:	3728      	adds	r7, #40	; 0x28
 800c93c:	4444      	add	r4, r8
 800c93e:	f1b9 0f00 	cmp.w	r9, #0
 800c942:	d020      	beq.n	800c986 <_tzset_unlocked_r+0x272>
 800c944:	6868      	ldr	r0, [r5, #4]
 800c946:	f7ff fe29 	bl	800c59c <__tzcalc_limits>
 800c94a:	4b28      	ldr	r3, [pc, #160]	; (800c9ec <_tzset_unlocked_r+0x2d8>)
 800c94c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c94e:	601a      	str	r2, [r3, #0]
 800c950:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c952:	1a9b      	subs	r3, r3, r2
 800c954:	4a27      	ldr	r2, [pc, #156]	; (800c9f4 <_tzset_unlocked_r+0x2e0>)
 800c956:	bf18      	it	ne
 800c958:	2301      	movne	r3, #1
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e6f4      	b.n	800c748 <_tzset_unlocked_r+0x34>
 800c95e:	2b2b      	cmp	r3, #43	; 0x2b
 800c960:	bf08      	it	eq
 800c962:	3401      	addeq	r4, #1
 800c964:	2701      	movs	r7, #1
 800c966:	e772      	b.n	800c84e <_tzset_unlocked_r+0x13a>
 800c968:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800c96c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800c970:	213c      	movs	r1, #60	; 0x3c
 800c972:	fb01 3302 	mla	r3, r1, r2, r3
 800c976:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800c97a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800c97e:	fb01 3302 	mla	r3, r1, r2, r3
 800c982:	437b      	muls	r3, r7
 800c984:	e77a      	b.n	800c87c <_tzset_unlocked_r+0x168>
 800c986:	f04f 0901 	mov.w	r9, #1
 800c98a:	e77d      	b.n	800c888 <_tzset_unlocked_r+0x174>
 800c98c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800c990:	bf06      	itte	eq
 800c992:	3401      	addeq	r4, #1
 800c994:	4643      	moveq	r3, r8
 800c996:	2344      	movne	r3, #68	; 0x44
 800c998:	220a      	movs	r2, #10
 800c99a:	a90b      	add	r1, sp, #44	; 0x2c
 800c99c:	4620      	mov	r0, r4
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	f002 ff42 	bl	800f828 <strtoul>
 800c9a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c9a8:	9b05      	ldr	r3, [sp, #20]
 800c9aa:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800c9ae:	45a0      	cmp	r8, r4
 800c9b0:	d114      	bne.n	800c9dc <_tzset_unlocked_r+0x2c8>
 800c9b2:	234d      	movs	r3, #77	; 0x4d
 800c9b4:	f1b9 0f00 	cmp.w	r9, #0
 800c9b8:	d107      	bne.n	800c9ca <_tzset_unlocked_r+0x2b6>
 800c9ba:	722b      	strb	r3, [r5, #8]
 800c9bc:	2103      	movs	r1, #3
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800c9c4:	f8c5 9014 	str.w	r9, [r5, #20]
 800c9c8:	e791      	b.n	800c8ee <_tzset_unlocked_r+0x1da>
 800c9ca:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800c9ce:	220b      	movs	r2, #11
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800c9da:	e788      	b.n	800c8ee <_tzset_unlocked_r+0x1da>
 800c9dc:	b280      	uxth	r0, r0
 800c9de:	723b      	strb	r3, [r7, #8]
 800c9e0:	6178      	str	r0, [r7, #20]
 800c9e2:	e784      	b.n	800c8ee <_tzset_unlocked_r+0x1da>
 800c9e4:	08011530 	.word	0x08011530
 800c9e8:	20000aec 	.word	0x20000aec
 800c9ec:	20000af4 	.word	0x20000af4
 800c9f0:	08011533 	.word	0x08011533
 800c9f4:	20000af0 	.word	0x20000af0
 800c9f8:	20000174 	.word	0x20000174
 800c9fc:	20000adf 	.word	0x20000adf
 800ca00:	08011537 	.word	0x08011537
 800ca04:	0801155a 	.word	0x0801155a
 800ca08:	08011546 	.word	0x08011546
 800ca0c:	08011559 	.word	0x08011559
 800ca10:	20000ad4 	.word	0x20000ad4

0800ca14 <_write_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4d07      	ldr	r5, [pc, #28]	; (800ca34 <_write_r+0x20>)
 800ca18:	4604      	mov	r4, r0
 800ca1a:	4608      	mov	r0, r1
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	602a      	str	r2, [r5, #0]
 800ca22:	461a      	mov	r2, r3
 800ca24:	f7f6 ffad 	bl	8003982 <_write>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_write_r+0x1e>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_write_r+0x1e>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20000b00 	.word	0x20000b00

0800ca38 <__assert_func>:
 800ca38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca3a:	4614      	mov	r4, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <__assert_func+0x2c>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4605      	mov	r5, r0
 800ca44:	68d8      	ldr	r0, [r3, #12]
 800ca46:	b14c      	cbz	r4, 800ca5c <__assert_func+0x24>
 800ca48:	4b07      	ldr	r3, [pc, #28]	; (800ca68 <__assert_func+0x30>)
 800ca4a:	9100      	str	r1, [sp, #0]
 800ca4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca50:	4906      	ldr	r1, [pc, #24]	; (800ca6c <__assert_func+0x34>)
 800ca52:	462b      	mov	r3, r5
 800ca54:	f000 fe9a 	bl	800d78c <fiprintf>
 800ca58:	f002 fff8 	bl	800fa4c <abort>
 800ca5c:	4b04      	ldr	r3, [pc, #16]	; (800ca70 <__assert_func+0x38>)
 800ca5e:	461c      	mov	r4, r3
 800ca60:	e7f3      	b.n	800ca4a <__assert_func+0x12>
 800ca62:	bf00      	nop
 800ca64:	20000110 	.word	0x20000110
 800ca68:	0801156c 	.word	0x0801156c
 800ca6c:	08011579 	.word	0x08011579
 800ca70:	080115a7 	.word	0x080115a7

0800ca74 <_close_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4d06      	ldr	r5, [pc, #24]	; (800ca90 <_close_r+0x1c>)
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	4608      	mov	r0, r1
 800ca7e:	602b      	str	r3, [r5, #0]
 800ca80:	f7f6 ff9b 	bl	80039ba <_close>
 800ca84:	1c43      	adds	r3, r0, #1
 800ca86:	d102      	bne.n	800ca8e <_close_r+0x1a>
 800ca88:	682b      	ldr	r3, [r5, #0]
 800ca8a:	b103      	cbz	r3, 800ca8e <_close_r+0x1a>
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	bd38      	pop	{r3, r4, r5, pc}
 800ca90:	20000b00 	.word	0x20000b00

0800ca94 <quorem>:
 800ca94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	6903      	ldr	r3, [r0, #16]
 800ca9a:	690c      	ldr	r4, [r1, #16]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	4607      	mov	r7, r0
 800caa0:	f2c0 8081 	blt.w	800cba6 <quorem+0x112>
 800caa4:	3c01      	subs	r4, #1
 800caa6:	f101 0814 	add.w	r8, r1, #20
 800caaa:	f100 0514 	add.w	r5, r0, #20
 800caae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cabc:	3301      	adds	r3, #1
 800cabe:	429a      	cmp	r2, r3
 800cac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cac8:	fbb2 f6f3 	udiv	r6, r2, r3
 800cacc:	d331      	bcc.n	800cb32 <quorem+0x9e>
 800cace:	f04f 0e00 	mov.w	lr, #0
 800cad2:	4640      	mov	r0, r8
 800cad4:	46ac      	mov	ip, r5
 800cad6:	46f2      	mov	sl, lr
 800cad8:	f850 2b04 	ldr.w	r2, [r0], #4
 800cadc:	b293      	uxth	r3, r2
 800cade:	fb06 e303 	mla	r3, r6, r3, lr
 800cae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	ebaa 0303 	sub.w	r3, sl, r3
 800caec:	f8dc a000 	ldr.w	sl, [ip]
 800caf0:	0c12      	lsrs	r2, r2, #16
 800caf2:	fa13 f38a 	uxtah	r3, r3, sl
 800caf6:	fb06 e202 	mla	r2, r6, r2, lr
 800cafa:	9300      	str	r3, [sp, #0]
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb02:	b292      	uxth	r2, r2
 800cb04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb0c:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb10:	4581      	cmp	r9, r0
 800cb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb16:	f84c 3b04 	str.w	r3, [ip], #4
 800cb1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb1e:	d2db      	bcs.n	800cad8 <quorem+0x44>
 800cb20:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb24:	b92b      	cbnz	r3, 800cb32 <quorem+0x9e>
 800cb26:	9b01      	ldr	r3, [sp, #4]
 800cb28:	3b04      	subs	r3, #4
 800cb2a:	429d      	cmp	r5, r3
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	d32e      	bcc.n	800cb8e <quorem+0xfa>
 800cb30:	613c      	str	r4, [r7, #16]
 800cb32:	4638      	mov	r0, r7
 800cb34:	f001 fdc6 	bl	800e6c4 <__mcmp>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	db24      	blt.n	800cb86 <quorem+0xf2>
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f04f 0c00 	mov.w	ip, #0
 800cb44:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb48:	f8d0 e000 	ldr.w	lr, [r0]
 800cb4c:	b293      	uxth	r3, r2
 800cb4e:	ebac 0303 	sub.w	r3, ip, r3
 800cb52:	0c12      	lsrs	r2, r2, #16
 800cb54:	fa13 f38e 	uxtah	r3, r3, lr
 800cb58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb66:	45c1      	cmp	r9, r8
 800cb68:	f840 3b04 	str.w	r3, [r0], #4
 800cb6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb70:	d2e8      	bcs.n	800cb44 <quorem+0xb0>
 800cb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb7a:	b922      	cbnz	r2, 800cb86 <quorem+0xf2>
 800cb7c:	3b04      	subs	r3, #4
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	461a      	mov	r2, r3
 800cb82:	d30a      	bcc.n	800cb9a <quorem+0x106>
 800cb84:	613c      	str	r4, [r7, #16]
 800cb86:	4630      	mov	r0, r6
 800cb88:	b003      	add	sp, #12
 800cb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	3b04      	subs	r3, #4
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	d1cc      	bne.n	800cb30 <quorem+0x9c>
 800cb96:	3c01      	subs	r4, #1
 800cb98:	e7c7      	b.n	800cb2a <quorem+0x96>
 800cb9a:	6812      	ldr	r2, [r2, #0]
 800cb9c:	3b04      	subs	r3, #4
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	d1f0      	bne.n	800cb84 <quorem+0xf0>
 800cba2:	3c01      	subs	r4, #1
 800cba4:	e7eb      	b.n	800cb7e <quorem+0xea>
 800cba6:	2000      	movs	r0, #0
 800cba8:	e7ee      	b.n	800cb88 <quorem+0xf4>
 800cbaa:	0000      	movs	r0, r0
 800cbac:	0000      	movs	r0, r0
	...

0800cbb0 <_dtoa_r>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	ed2d 8b04 	vpush	{d8-d9}
 800cbb8:	ec57 6b10 	vmov	r6, r7, d0
 800cbbc:	b093      	sub	sp, #76	; 0x4c
 800cbbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cbc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbc4:	9106      	str	r1, [sp, #24]
 800cbc6:	ee10 aa10 	vmov	sl, s0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbce:	930c      	str	r3, [sp, #48]	; 0x30
 800cbd0:	46bb      	mov	fp, r7
 800cbd2:	b975      	cbnz	r5, 800cbf2 <_dtoa_r+0x42>
 800cbd4:	2010      	movs	r0, #16
 800cbd6:	f7fd fded 	bl	800a7b4 <malloc>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800cbde:	b920      	cbnz	r0, 800cbea <_dtoa_r+0x3a>
 800cbe0:	4ba7      	ldr	r3, [pc, #668]	; (800ce80 <_dtoa_r+0x2d0>)
 800cbe2:	21ea      	movs	r1, #234	; 0xea
 800cbe4:	48a7      	ldr	r0, [pc, #668]	; (800ce84 <_dtoa_r+0x2d4>)
 800cbe6:	f7ff ff27 	bl	800ca38 <__assert_func>
 800cbea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbee:	6005      	str	r5, [r0, #0]
 800cbf0:	60c5      	str	r5, [r0, #12]
 800cbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbf4:	6819      	ldr	r1, [r3, #0]
 800cbf6:	b151      	cbz	r1, 800cc0e <_dtoa_r+0x5e>
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	604a      	str	r2, [r1, #4]
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4093      	lsls	r3, r2
 800cc00:	608b      	str	r3, [r1, #8]
 800cc02:	4620      	mov	r0, r4
 800cc04:	f001 fad2 	bl	800e1ac <_Bfree>
 800cc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]
 800cc0e:	1e3b      	subs	r3, r7, #0
 800cc10:	bfaa      	itet	ge
 800cc12:	2300      	movge	r3, #0
 800cc14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cc18:	f8c8 3000 	strge.w	r3, [r8]
 800cc1c:	4b9a      	ldr	r3, [pc, #616]	; (800ce88 <_dtoa_r+0x2d8>)
 800cc1e:	bfbc      	itt	lt
 800cc20:	2201      	movlt	r2, #1
 800cc22:	f8c8 2000 	strlt.w	r2, [r8]
 800cc26:	ea33 030b 	bics.w	r3, r3, fp
 800cc2a:	d11b      	bne.n	800cc64 <_dtoa_r+0xb4>
 800cc2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc38:	4333      	orrs	r3, r6
 800cc3a:	f000 8592 	beq.w	800d762 <_dtoa_r+0xbb2>
 800cc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc40:	b963      	cbnz	r3, 800cc5c <_dtoa_r+0xac>
 800cc42:	4b92      	ldr	r3, [pc, #584]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc44:	e022      	b.n	800cc8c <_dtoa_r+0xdc>
 800cc46:	4b92      	ldr	r3, [pc, #584]	; (800ce90 <_dtoa_r+0x2e0>)
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	9801      	ldr	r0, [sp, #4]
 800cc52:	b013      	add	sp, #76	; 0x4c
 800cc54:	ecbd 8b04 	vpop	{d8-d9}
 800cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5c:	4b8b      	ldr	r3, [pc, #556]	; (800ce8c <_dtoa_r+0x2dc>)
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	3303      	adds	r3, #3
 800cc62:	e7f3      	b.n	800cc4c <_dtoa_r+0x9c>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 ff36 	bl	8000adc <__aeabi_dcmpeq>
 800cc70:	ec4b ab19 	vmov	d9, sl, fp
 800cc74:	4680      	mov	r8, r0
 800cc76:	b158      	cbz	r0, 800cc90 <_dtoa_r+0xe0>
 800cc78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 856b 	beq.w	800d75c <_dtoa_r+0xbac>
 800cc86:	4883      	ldr	r0, [pc, #524]	; (800ce94 <_dtoa_r+0x2e4>)
 800cc88:	6018      	str	r0, [r3, #0]
 800cc8a:	1e43      	subs	r3, r0, #1
 800cc8c:	9301      	str	r3, [sp, #4]
 800cc8e:	e7df      	b.n	800cc50 <_dtoa_r+0xa0>
 800cc90:	ec4b ab10 	vmov	d0, sl, fp
 800cc94:	aa10      	add	r2, sp, #64	; 0x40
 800cc96:	a911      	add	r1, sp, #68	; 0x44
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f001 fe35 	bl	800e908 <__d2b>
 800cc9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cca2:	ee08 0a10 	vmov	s16, r0
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	f000 8084 	beq.w	800cdb4 <_dtoa_r+0x204>
 800ccac:	ee19 3a90 	vmov	r3, s19
 800ccb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ccb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ccb8:	4656      	mov	r6, sl
 800ccba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ccbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ccc6:	4b74      	ldr	r3, [pc, #464]	; (800ce98 <_dtoa_r+0x2e8>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fae5 	bl	800029c <__aeabi_dsub>
 800ccd2:	a365      	add	r3, pc, #404	; (adr r3, 800ce68 <_dtoa_r+0x2b8>)
 800ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd8:	f7f3 fc98 	bl	800060c <__aeabi_dmul>
 800ccdc:	a364      	add	r3, pc, #400	; (adr r3, 800ce70 <_dtoa_r+0x2c0>)
 800ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce2:	f7f3 fadd 	bl	80002a0 <__adddf3>
 800cce6:	4606      	mov	r6, r0
 800cce8:	4628      	mov	r0, r5
 800ccea:	460f      	mov	r7, r1
 800ccec:	f7f3 fc24 	bl	8000538 <__aeabi_i2d>
 800ccf0:	a361      	add	r3, pc, #388	; (adr r3, 800ce78 <_dtoa_r+0x2c8>)
 800ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf6:	f7f3 fc89 	bl	800060c <__aeabi_dmul>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4630      	mov	r0, r6
 800cd00:	4639      	mov	r1, r7
 800cd02:	f7f3 facd 	bl	80002a0 <__adddf3>
 800cd06:	4606      	mov	r6, r0
 800cd08:	460f      	mov	r7, r1
 800cd0a:	f7f3 ff2f 	bl	8000b6c <__aeabi_d2iz>
 800cd0e:	2200      	movs	r2, #0
 800cd10:	9000      	str	r0, [sp, #0]
 800cd12:	2300      	movs	r3, #0
 800cd14:	4630      	mov	r0, r6
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 feea 	bl	8000af0 <__aeabi_dcmplt>
 800cd1c:	b150      	cbz	r0, 800cd34 <_dtoa_r+0x184>
 800cd1e:	9800      	ldr	r0, [sp, #0]
 800cd20:	f7f3 fc0a 	bl	8000538 <__aeabi_i2d>
 800cd24:	4632      	mov	r2, r6
 800cd26:	463b      	mov	r3, r7
 800cd28:	f7f3 fed8 	bl	8000adc <__aeabi_dcmpeq>
 800cd2c:	b910      	cbnz	r0, 800cd34 <_dtoa_r+0x184>
 800cd2e:	9b00      	ldr	r3, [sp, #0]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	9b00      	ldr	r3, [sp, #0]
 800cd36:	2b16      	cmp	r3, #22
 800cd38:	d85a      	bhi.n	800cdf0 <_dtoa_r+0x240>
 800cd3a:	9a00      	ldr	r2, [sp, #0]
 800cd3c:	4b57      	ldr	r3, [pc, #348]	; (800ce9c <_dtoa_r+0x2ec>)
 800cd3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	ec51 0b19 	vmov	r0, r1, d9
 800cd4a:	f7f3 fed1 	bl	8000af0 <__aeabi_dcmplt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	d050      	beq.n	800cdf4 <_dtoa_r+0x244>
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	2300      	movs	r3, #0
 800cd5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd5e:	1b5d      	subs	r5, r3, r5
 800cd60:	1e6b      	subs	r3, r5, #1
 800cd62:	9305      	str	r3, [sp, #20]
 800cd64:	bf45      	ittet	mi
 800cd66:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd6a:	9304      	strmi	r3, [sp, #16]
 800cd6c:	2300      	movpl	r3, #0
 800cd6e:	2300      	movmi	r3, #0
 800cd70:	bf4c      	ite	mi
 800cd72:	9305      	strmi	r3, [sp, #20]
 800cd74:	9304      	strpl	r3, [sp, #16]
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db3d      	blt.n	800cdf8 <_dtoa_r+0x248>
 800cd7c:	9b05      	ldr	r3, [sp, #20]
 800cd7e:	9a00      	ldr	r2, [sp, #0]
 800cd80:	920a      	str	r2, [sp, #40]	; 0x28
 800cd82:	4413      	add	r3, r2
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	2300      	movs	r3, #0
 800cd88:	9307      	str	r3, [sp, #28]
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	2b09      	cmp	r3, #9
 800cd8e:	f200 8089 	bhi.w	800cea4 <_dtoa_r+0x2f4>
 800cd92:	2b05      	cmp	r3, #5
 800cd94:	bfc4      	itt	gt
 800cd96:	3b04      	subgt	r3, #4
 800cd98:	9306      	strgt	r3, [sp, #24]
 800cd9a:	9b06      	ldr	r3, [sp, #24]
 800cd9c:	f1a3 0302 	sub.w	r3, r3, #2
 800cda0:	bfcc      	ite	gt
 800cda2:	2500      	movgt	r5, #0
 800cda4:	2501      	movle	r5, #1
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	f200 8087 	bhi.w	800ceba <_dtoa_r+0x30a>
 800cdac:	e8df f003 	tbb	[pc, r3]
 800cdb0:	59383a2d 	.word	0x59383a2d
 800cdb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdb8:	441d      	add	r5, r3
 800cdba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cdbe:	2b20      	cmp	r3, #32
 800cdc0:	bfc1      	itttt	gt
 800cdc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cdca:	fa0b f303 	lslgt.w	r3, fp, r3
 800cdce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cdd2:	bfda      	itte	le
 800cdd4:	f1c3 0320 	rsble	r3, r3, #32
 800cdd8:	fa06 f003 	lslle.w	r0, r6, r3
 800cddc:	4318      	orrgt	r0, r3
 800cdde:	f7f3 fb9b 	bl	8000518 <__aeabi_ui2d>
 800cde2:	2301      	movs	r3, #1
 800cde4:	4606      	mov	r6, r0
 800cde6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cdea:	3d01      	subs	r5, #1
 800cdec:	930e      	str	r3, [sp, #56]	; 0x38
 800cdee:	e76a      	b.n	800ccc6 <_dtoa_r+0x116>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e7b2      	b.n	800cd5a <_dtoa_r+0x1aa>
 800cdf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cdf6:	e7b1      	b.n	800cd5c <_dtoa_r+0x1ac>
 800cdf8:	9b04      	ldr	r3, [sp, #16]
 800cdfa:	9a00      	ldr	r2, [sp, #0]
 800cdfc:	1a9b      	subs	r3, r3, r2
 800cdfe:	9304      	str	r3, [sp, #16]
 800ce00:	4253      	negs	r3, r2
 800ce02:	9307      	str	r3, [sp, #28]
 800ce04:	2300      	movs	r3, #0
 800ce06:	930a      	str	r3, [sp, #40]	; 0x28
 800ce08:	e7bf      	b.n	800cd8a <_dtoa_r+0x1da>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	9308      	str	r3, [sp, #32]
 800ce0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	dc55      	bgt.n	800cec0 <_dtoa_r+0x310>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce1e:	e00c      	b.n	800ce3a <_dtoa_r+0x28a>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e7f3      	b.n	800ce0c <_dtoa_r+0x25c>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce28:	9308      	str	r3, [sp, #32]
 800ce2a:	9b00      	ldr	r3, [sp, #0]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	9302      	str	r3, [sp, #8]
 800ce30:	3301      	adds	r3, #1
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	bfb8      	it	lt
 800ce38:	2301      	movlt	r3, #1
 800ce3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	6042      	str	r2, [r0, #4]
 800ce40:	2204      	movs	r2, #4
 800ce42:	f102 0614 	add.w	r6, r2, #20
 800ce46:	429e      	cmp	r6, r3
 800ce48:	6841      	ldr	r1, [r0, #4]
 800ce4a:	d93d      	bls.n	800cec8 <_dtoa_r+0x318>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f001 f96d 	bl	800e12c <_Balloc>
 800ce52:	9001      	str	r0, [sp, #4]
 800ce54:	2800      	cmp	r0, #0
 800ce56:	d13b      	bne.n	800ced0 <_dtoa_r+0x320>
 800ce58:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <_dtoa_r+0x2f0>)
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ce60:	e6c0      	b.n	800cbe4 <_dtoa_r+0x34>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e7df      	b.n	800ce26 <_dtoa_r+0x276>
 800ce66:	bf00      	nop
 800ce68:	636f4361 	.word	0x636f4361
 800ce6c:	3fd287a7 	.word	0x3fd287a7
 800ce70:	8b60c8b3 	.word	0x8b60c8b3
 800ce74:	3fc68a28 	.word	0x3fc68a28
 800ce78:	509f79fb 	.word	0x509f79fb
 800ce7c:	3fd34413 	.word	0x3fd34413
 800ce80:	080113d4 	.word	0x080113d4
 800ce84:	080116b6 	.word	0x080116b6
 800ce88:	7ff00000 	.word	0x7ff00000
 800ce8c:	080116b2 	.word	0x080116b2
 800ce90:	080116a9 	.word	0x080116a9
 800ce94:	0801190a 	.word	0x0801190a
 800ce98:	3ff80000 	.word	0x3ff80000
 800ce9c:	08011820 	.word	0x08011820
 800cea0:	08011711 	.word	0x08011711
 800cea4:	2501      	movs	r5, #1
 800cea6:	2300      	movs	r3, #0
 800cea8:	9306      	str	r3, [sp, #24]
 800ceaa:	9508      	str	r5, [sp, #32]
 800ceac:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2312      	movs	r3, #18
 800ceb8:	e7b0      	b.n	800ce1c <_dtoa_r+0x26c>
 800ceba:	2301      	movs	r3, #1
 800cebc:	9308      	str	r3, [sp, #32]
 800cebe:	e7f5      	b.n	800ceac <_dtoa_r+0x2fc>
 800cec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cec6:	e7b8      	b.n	800ce3a <_dtoa_r+0x28a>
 800cec8:	3101      	adds	r1, #1
 800ceca:	6041      	str	r1, [r0, #4]
 800cecc:	0052      	lsls	r2, r2, #1
 800cece:	e7b8      	b.n	800ce42 <_dtoa_r+0x292>
 800ced0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ced2:	9a01      	ldr	r2, [sp, #4]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	9b03      	ldr	r3, [sp, #12]
 800ced8:	2b0e      	cmp	r3, #14
 800ceda:	f200 809d 	bhi.w	800d018 <_dtoa_r+0x468>
 800cede:	2d00      	cmp	r5, #0
 800cee0:	f000 809a 	beq.w	800d018 <_dtoa_r+0x468>
 800cee4:	9b00      	ldr	r3, [sp, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	dd32      	ble.n	800cf50 <_dtoa_r+0x3a0>
 800ceea:	4ab7      	ldr	r2, [pc, #732]	; (800d1c8 <_dtoa_r+0x618>)
 800ceec:	f003 030f 	and.w	r3, r3, #15
 800cef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	05d8      	lsls	r0, r3, #23
 800cefc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf00:	d516      	bpl.n	800cf30 <_dtoa_r+0x380>
 800cf02:	4bb2      	ldr	r3, [pc, #712]	; (800d1cc <_dtoa_r+0x61c>)
 800cf04:	ec51 0b19 	vmov	r0, r1, d9
 800cf08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf0c:	f7f3 fca8 	bl	8000860 <__aeabi_ddiv>
 800cf10:	f007 070f 	and.w	r7, r7, #15
 800cf14:	4682      	mov	sl, r0
 800cf16:	468b      	mov	fp, r1
 800cf18:	2503      	movs	r5, #3
 800cf1a:	4eac      	ldr	r6, [pc, #688]	; (800d1cc <_dtoa_r+0x61c>)
 800cf1c:	b957      	cbnz	r7, 800cf34 <_dtoa_r+0x384>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	4650      	mov	r0, sl
 800cf24:	4659      	mov	r1, fp
 800cf26:	f7f3 fc9b 	bl	8000860 <__aeabi_ddiv>
 800cf2a:	4682      	mov	sl, r0
 800cf2c:	468b      	mov	fp, r1
 800cf2e:	e028      	b.n	800cf82 <_dtoa_r+0x3d2>
 800cf30:	2502      	movs	r5, #2
 800cf32:	e7f2      	b.n	800cf1a <_dtoa_r+0x36a>
 800cf34:	07f9      	lsls	r1, r7, #31
 800cf36:	d508      	bpl.n	800cf4a <_dtoa_r+0x39a>
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf40:	f7f3 fb64 	bl	800060c <__aeabi_dmul>
 800cf44:	3501      	adds	r5, #1
 800cf46:	4680      	mov	r8, r0
 800cf48:	4689      	mov	r9, r1
 800cf4a:	107f      	asrs	r7, r7, #1
 800cf4c:	3608      	adds	r6, #8
 800cf4e:	e7e5      	b.n	800cf1c <_dtoa_r+0x36c>
 800cf50:	f000 809b 	beq.w	800d08a <_dtoa_r+0x4da>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	4f9d      	ldr	r7, [pc, #628]	; (800d1cc <_dtoa_r+0x61c>)
 800cf58:	425e      	negs	r6, r3
 800cf5a:	4b9b      	ldr	r3, [pc, #620]	; (800d1c8 <_dtoa_r+0x618>)
 800cf5c:	f006 020f 	and.w	r2, r6, #15
 800cf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	ec51 0b19 	vmov	r0, r1, d9
 800cf6c:	f7f3 fb4e 	bl	800060c <__aeabi_dmul>
 800cf70:	1136      	asrs	r6, r6, #4
 800cf72:	4682      	mov	sl, r0
 800cf74:	468b      	mov	fp, r1
 800cf76:	2300      	movs	r3, #0
 800cf78:	2502      	movs	r5, #2
 800cf7a:	2e00      	cmp	r6, #0
 800cf7c:	d17a      	bne.n	800d074 <_dtoa_r+0x4c4>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1d3      	bne.n	800cf2a <_dtoa_r+0x37a>
 800cf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 8082 	beq.w	800d08e <_dtoa_r+0x4de>
 800cf8a:	4b91      	ldr	r3, [pc, #580]	; (800d1d0 <_dtoa_r+0x620>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	4650      	mov	r0, sl
 800cf90:	4659      	mov	r1, fp
 800cf92:	f7f3 fdad 	bl	8000af0 <__aeabi_dcmplt>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d079      	beq.n	800d08e <_dtoa_r+0x4de>
 800cf9a:	9b03      	ldr	r3, [sp, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d076      	beq.n	800d08e <_dtoa_r+0x4de>
 800cfa0:	9b02      	ldr	r3, [sp, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dd36      	ble.n	800d014 <_dtoa_r+0x464>
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	4659      	mov	r1, fp
 800cfac:	1e5f      	subs	r7, r3, #1
 800cfae:	2200      	movs	r2, #0
 800cfb0:	4b88      	ldr	r3, [pc, #544]	; (800d1d4 <_dtoa_r+0x624>)
 800cfb2:	f7f3 fb2b 	bl	800060c <__aeabi_dmul>
 800cfb6:	9e02      	ldr	r6, [sp, #8]
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	3501      	adds	r5, #1
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f7f3 faba 	bl	8000538 <__aeabi_i2d>
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	465b      	mov	r3, fp
 800cfc8:	f7f3 fb20 	bl	800060c <__aeabi_dmul>
 800cfcc:	4b82      	ldr	r3, [pc, #520]	; (800d1d8 <_dtoa_r+0x628>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f7f3 f966 	bl	80002a0 <__adddf3>
 800cfd4:	46d0      	mov	r8, sl
 800cfd6:	46d9      	mov	r9, fp
 800cfd8:	4682      	mov	sl, r0
 800cfda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cfde:	2e00      	cmp	r6, #0
 800cfe0:	d158      	bne.n	800d094 <_dtoa_r+0x4e4>
 800cfe2:	4b7e      	ldr	r3, [pc, #504]	; (800d1dc <_dtoa_r+0x62c>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 f957 	bl	800029c <__aeabi_dsub>
 800cfee:	4652      	mov	r2, sl
 800cff0:	465b      	mov	r3, fp
 800cff2:	4680      	mov	r8, r0
 800cff4:	4689      	mov	r9, r1
 800cff6:	f7f3 fd99 	bl	8000b2c <__aeabi_dcmpgt>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f040 8295 	bne.w	800d52a <_dtoa_r+0x97a>
 800d000:	4652      	mov	r2, sl
 800d002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d006:	4640      	mov	r0, r8
 800d008:	4649      	mov	r1, r9
 800d00a:	f7f3 fd71 	bl	8000af0 <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8289 	bne.w	800d526 <_dtoa_r+0x976>
 800d014:	ec5b ab19 	vmov	sl, fp, d9
 800d018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f2c0 8148 	blt.w	800d2b0 <_dtoa_r+0x700>
 800d020:	9a00      	ldr	r2, [sp, #0]
 800d022:	2a0e      	cmp	r2, #14
 800d024:	f300 8144 	bgt.w	800d2b0 <_dtoa_r+0x700>
 800d028:	4b67      	ldr	r3, [pc, #412]	; (800d1c8 <_dtoa_r+0x618>)
 800d02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d02e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	f280 80d5 	bge.w	800d1e4 <_dtoa_r+0x634>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f300 80d1 	bgt.w	800d1e4 <_dtoa_r+0x634>
 800d042:	f040 826f 	bne.w	800d524 <_dtoa_r+0x974>
 800d046:	4b65      	ldr	r3, [pc, #404]	; (800d1dc <_dtoa_r+0x62c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	4640      	mov	r0, r8
 800d04c:	4649      	mov	r1, r9
 800d04e:	f7f3 fadd 	bl	800060c <__aeabi_dmul>
 800d052:	4652      	mov	r2, sl
 800d054:	465b      	mov	r3, fp
 800d056:	f7f3 fd5f 	bl	8000b18 <__aeabi_dcmpge>
 800d05a:	9e03      	ldr	r6, [sp, #12]
 800d05c:	4637      	mov	r7, r6
 800d05e:	2800      	cmp	r0, #0
 800d060:	f040 8245 	bne.w	800d4ee <_dtoa_r+0x93e>
 800d064:	9d01      	ldr	r5, [sp, #4]
 800d066:	2331      	movs	r3, #49	; 0x31
 800d068:	f805 3b01 	strb.w	r3, [r5], #1
 800d06c:	9b00      	ldr	r3, [sp, #0]
 800d06e:	3301      	adds	r3, #1
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	e240      	b.n	800d4f6 <_dtoa_r+0x946>
 800d074:	07f2      	lsls	r2, r6, #31
 800d076:	d505      	bpl.n	800d084 <_dtoa_r+0x4d4>
 800d078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d07c:	f7f3 fac6 	bl	800060c <__aeabi_dmul>
 800d080:	3501      	adds	r5, #1
 800d082:	2301      	movs	r3, #1
 800d084:	1076      	asrs	r6, r6, #1
 800d086:	3708      	adds	r7, #8
 800d088:	e777      	b.n	800cf7a <_dtoa_r+0x3ca>
 800d08a:	2502      	movs	r5, #2
 800d08c:	e779      	b.n	800cf82 <_dtoa_r+0x3d2>
 800d08e:	9f00      	ldr	r7, [sp, #0]
 800d090:	9e03      	ldr	r6, [sp, #12]
 800d092:	e794      	b.n	800cfbe <_dtoa_r+0x40e>
 800d094:	9901      	ldr	r1, [sp, #4]
 800d096:	4b4c      	ldr	r3, [pc, #304]	; (800d1c8 <_dtoa_r+0x618>)
 800d098:	4431      	add	r1, r6
 800d09a:	910d      	str	r1, [sp, #52]	; 0x34
 800d09c:	9908      	ldr	r1, [sp, #32]
 800d09e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0a6:	2900      	cmp	r1, #0
 800d0a8:	d043      	beq.n	800d132 <_dtoa_r+0x582>
 800d0aa:	494d      	ldr	r1, [pc, #308]	; (800d1e0 <_dtoa_r+0x630>)
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7f3 fbd7 	bl	8000860 <__aeabi_ddiv>
 800d0b2:	4652      	mov	r2, sl
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	f7f3 f8f1 	bl	800029c <__aeabi_dsub>
 800d0ba:	9d01      	ldr	r5, [sp, #4]
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7f3 fd52 	bl	8000b6c <__aeabi_d2iz>
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	f7f3 fa35 	bl	8000538 <__aeabi_i2d>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	f7f3 f8e1 	bl	800029c <__aeabi_dsub>
 800d0da:	3630      	adds	r6, #48	; 0x30
 800d0dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e0:	4652      	mov	r2, sl
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	4689      	mov	r9, r1
 800d0e8:	f7f3 fd02 	bl	8000af0 <__aeabi_dcmplt>
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d163      	bne.n	800d1b8 <_dtoa_r+0x608>
 800d0f0:	4642      	mov	r2, r8
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <_dtoa_r+0x620>)
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	f7f3 f8d0 	bl	800029c <__aeabi_dsub>
 800d0fc:	4652      	mov	r2, sl
 800d0fe:	465b      	mov	r3, fp
 800d100:	f7f3 fcf6 	bl	8000af0 <__aeabi_dcmplt>
 800d104:	2800      	cmp	r0, #0
 800d106:	f040 80b5 	bne.w	800d274 <_dtoa_r+0x6c4>
 800d10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d10c:	429d      	cmp	r5, r3
 800d10e:	d081      	beq.n	800d014 <_dtoa_r+0x464>
 800d110:	4b30      	ldr	r3, [pc, #192]	; (800d1d4 <_dtoa_r+0x624>)
 800d112:	2200      	movs	r2, #0
 800d114:	4650      	mov	r0, sl
 800d116:	4659      	mov	r1, fp
 800d118:	f7f3 fa78 	bl	800060c <__aeabi_dmul>
 800d11c:	4b2d      	ldr	r3, [pc, #180]	; (800d1d4 <_dtoa_r+0x624>)
 800d11e:	4682      	mov	sl, r0
 800d120:	468b      	mov	fp, r1
 800d122:	4640      	mov	r0, r8
 800d124:	4649      	mov	r1, r9
 800d126:	2200      	movs	r2, #0
 800d128:	f7f3 fa70 	bl	800060c <__aeabi_dmul>
 800d12c:	4680      	mov	r8, r0
 800d12e:	4689      	mov	r9, r1
 800d130:	e7c6      	b.n	800d0c0 <_dtoa_r+0x510>
 800d132:	4650      	mov	r0, sl
 800d134:	4659      	mov	r1, fp
 800d136:	f7f3 fa69 	bl	800060c <__aeabi_dmul>
 800d13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d13c:	9d01      	ldr	r5, [sp, #4]
 800d13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d140:	4682      	mov	sl, r0
 800d142:	468b      	mov	fp, r1
 800d144:	4649      	mov	r1, r9
 800d146:	4640      	mov	r0, r8
 800d148:	f7f3 fd10 	bl	8000b6c <__aeabi_d2iz>
 800d14c:	4606      	mov	r6, r0
 800d14e:	f7f3 f9f3 	bl	8000538 <__aeabi_i2d>
 800d152:	3630      	adds	r6, #48	; 0x30
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4640      	mov	r0, r8
 800d15a:	4649      	mov	r1, r9
 800d15c:	f7f3 f89e 	bl	800029c <__aeabi_dsub>
 800d160:	f805 6b01 	strb.w	r6, [r5], #1
 800d164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d166:	429d      	cmp	r5, r3
 800d168:	4680      	mov	r8, r0
 800d16a:	4689      	mov	r9, r1
 800d16c:	f04f 0200 	mov.w	r2, #0
 800d170:	d124      	bne.n	800d1bc <_dtoa_r+0x60c>
 800d172:	4b1b      	ldr	r3, [pc, #108]	; (800d1e0 <_dtoa_r+0x630>)
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 f892 	bl	80002a0 <__adddf3>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4640      	mov	r0, r8
 800d182:	4649      	mov	r1, r9
 800d184:	f7f3 fcd2 	bl	8000b2c <__aeabi_dcmpgt>
 800d188:	2800      	cmp	r0, #0
 800d18a:	d173      	bne.n	800d274 <_dtoa_r+0x6c4>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	4913      	ldr	r1, [pc, #76]	; (800d1e0 <_dtoa_r+0x630>)
 800d192:	2000      	movs	r0, #0
 800d194:	f7f3 f882 	bl	800029c <__aeabi_dsub>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4640      	mov	r0, r8
 800d19e:	4649      	mov	r1, r9
 800d1a0:	f7f3 fca6 	bl	8000af0 <__aeabi_dcmplt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f43f af35 	beq.w	800d014 <_dtoa_r+0x464>
 800d1aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1ac:	1e6b      	subs	r3, r5, #1
 800d1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1b4:	2b30      	cmp	r3, #48	; 0x30
 800d1b6:	d0f8      	beq.n	800d1aa <_dtoa_r+0x5fa>
 800d1b8:	9700      	str	r7, [sp, #0]
 800d1ba:	e049      	b.n	800d250 <_dtoa_r+0x6a0>
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <_dtoa_r+0x624>)
 800d1be:	f7f3 fa25 	bl	800060c <__aeabi_dmul>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	4689      	mov	r9, r1
 800d1c6:	e7bd      	b.n	800d144 <_dtoa_r+0x594>
 800d1c8:	08011820 	.word	0x08011820
 800d1cc:	080117f8 	.word	0x080117f8
 800d1d0:	3ff00000 	.word	0x3ff00000
 800d1d4:	40240000 	.word	0x40240000
 800d1d8:	401c0000 	.word	0x401c0000
 800d1dc:	40140000 	.word	0x40140000
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	9d01      	ldr	r5, [sp, #4]
 800d1e6:	4656      	mov	r6, sl
 800d1e8:	465f      	mov	r7, fp
 800d1ea:	4642      	mov	r2, r8
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	f7f3 fb35 	bl	8000860 <__aeabi_ddiv>
 800d1f6:	f7f3 fcb9 	bl	8000b6c <__aeabi_d2iz>
 800d1fa:	4682      	mov	sl, r0
 800d1fc:	f7f3 f99c 	bl	8000538 <__aeabi_i2d>
 800d200:	4642      	mov	r2, r8
 800d202:	464b      	mov	r3, r9
 800d204:	f7f3 fa02 	bl	800060c <__aeabi_dmul>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	4630      	mov	r0, r6
 800d20e:	4639      	mov	r1, r7
 800d210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d214:	f7f3 f842 	bl	800029c <__aeabi_dsub>
 800d218:	f805 6b01 	strb.w	r6, [r5], #1
 800d21c:	9e01      	ldr	r6, [sp, #4]
 800d21e:	9f03      	ldr	r7, [sp, #12]
 800d220:	1bae      	subs	r6, r5, r6
 800d222:	42b7      	cmp	r7, r6
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	d135      	bne.n	800d296 <_dtoa_r+0x6e6>
 800d22a:	f7f3 f839 	bl	80002a0 <__adddf3>
 800d22e:	4642      	mov	r2, r8
 800d230:	464b      	mov	r3, r9
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	f7f3 fc79 	bl	8000b2c <__aeabi_dcmpgt>
 800d23a:	b9d0      	cbnz	r0, 800d272 <_dtoa_r+0x6c2>
 800d23c:	4642      	mov	r2, r8
 800d23e:	464b      	mov	r3, r9
 800d240:	4630      	mov	r0, r6
 800d242:	4639      	mov	r1, r7
 800d244:	f7f3 fc4a 	bl	8000adc <__aeabi_dcmpeq>
 800d248:	b110      	cbz	r0, 800d250 <_dtoa_r+0x6a0>
 800d24a:	f01a 0f01 	tst.w	sl, #1
 800d24e:	d110      	bne.n	800d272 <_dtoa_r+0x6c2>
 800d250:	4620      	mov	r0, r4
 800d252:	ee18 1a10 	vmov	r1, s16
 800d256:	f000 ffa9 	bl	800e1ac <_Bfree>
 800d25a:	2300      	movs	r3, #0
 800d25c:	9800      	ldr	r0, [sp, #0]
 800d25e:	702b      	strb	r3, [r5, #0]
 800d260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d262:	3001      	adds	r0, #1
 800d264:	6018      	str	r0, [r3, #0]
 800d266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f43f acf1 	beq.w	800cc50 <_dtoa_r+0xa0>
 800d26e:	601d      	str	r5, [r3, #0]
 800d270:	e4ee      	b.n	800cc50 <_dtoa_r+0xa0>
 800d272:	9f00      	ldr	r7, [sp, #0]
 800d274:	462b      	mov	r3, r5
 800d276:	461d      	mov	r5, r3
 800d278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d27c:	2a39      	cmp	r2, #57	; 0x39
 800d27e:	d106      	bne.n	800d28e <_dtoa_r+0x6de>
 800d280:	9a01      	ldr	r2, [sp, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d1f7      	bne.n	800d276 <_dtoa_r+0x6c6>
 800d286:	9901      	ldr	r1, [sp, #4]
 800d288:	2230      	movs	r2, #48	; 0x30
 800d28a:	3701      	adds	r7, #1
 800d28c:	700a      	strb	r2, [r1, #0]
 800d28e:	781a      	ldrb	r2, [r3, #0]
 800d290:	3201      	adds	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]
 800d294:	e790      	b.n	800d1b8 <_dtoa_r+0x608>
 800d296:	4ba6      	ldr	r3, [pc, #664]	; (800d530 <_dtoa_r+0x980>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f7f3 f9b7 	bl	800060c <__aeabi_dmul>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	460f      	mov	r7, r1
 800d2a6:	f7f3 fc19 	bl	8000adc <__aeabi_dcmpeq>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d09d      	beq.n	800d1ea <_dtoa_r+0x63a>
 800d2ae:	e7cf      	b.n	800d250 <_dtoa_r+0x6a0>
 800d2b0:	9a08      	ldr	r2, [sp, #32]
 800d2b2:	2a00      	cmp	r2, #0
 800d2b4:	f000 80d7 	beq.w	800d466 <_dtoa_r+0x8b6>
 800d2b8:	9a06      	ldr	r2, [sp, #24]
 800d2ba:	2a01      	cmp	r2, #1
 800d2bc:	f300 80ba 	bgt.w	800d434 <_dtoa_r+0x884>
 800d2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	f000 80b2 	beq.w	800d42c <_dtoa_r+0x87c>
 800d2c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d2cc:	9e07      	ldr	r6, [sp, #28]
 800d2ce:	9d04      	ldr	r5, [sp, #16]
 800d2d0:	9a04      	ldr	r2, [sp, #16]
 800d2d2:	441a      	add	r2, r3
 800d2d4:	9204      	str	r2, [sp, #16]
 800d2d6:	9a05      	ldr	r2, [sp, #20]
 800d2d8:	2101      	movs	r1, #1
 800d2da:	441a      	add	r2, r3
 800d2dc:	4620      	mov	r0, r4
 800d2de:	9205      	str	r2, [sp, #20]
 800d2e0:	f001 f866 	bl	800e3b0 <__i2b>
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	2d00      	cmp	r5, #0
 800d2e8:	dd0c      	ble.n	800d304 <_dtoa_r+0x754>
 800d2ea:	9b05      	ldr	r3, [sp, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dd09      	ble.n	800d304 <_dtoa_r+0x754>
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	9a04      	ldr	r2, [sp, #16]
 800d2f4:	bfa8      	it	ge
 800d2f6:	462b      	movge	r3, r5
 800d2f8:	1ad2      	subs	r2, r2, r3
 800d2fa:	9204      	str	r2, [sp, #16]
 800d2fc:	9a05      	ldr	r2, [sp, #20]
 800d2fe:	1aed      	subs	r5, r5, r3
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	9305      	str	r3, [sp, #20]
 800d304:	9b07      	ldr	r3, [sp, #28]
 800d306:	b31b      	cbz	r3, 800d350 <_dtoa_r+0x7a0>
 800d308:	9b08      	ldr	r3, [sp, #32]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80af 	beq.w	800d46e <_dtoa_r+0x8be>
 800d310:	2e00      	cmp	r6, #0
 800d312:	dd13      	ble.n	800d33c <_dtoa_r+0x78c>
 800d314:	4639      	mov	r1, r7
 800d316:	4632      	mov	r2, r6
 800d318:	4620      	mov	r0, r4
 800d31a:	f001 f909 	bl	800e530 <__pow5mult>
 800d31e:	ee18 2a10 	vmov	r2, s16
 800d322:	4601      	mov	r1, r0
 800d324:	4607      	mov	r7, r0
 800d326:	4620      	mov	r0, r4
 800d328:	f001 f858 	bl	800e3dc <__multiply>
 800d32c:	ee18 1a10 	vmov	r1, s16
 800d330:	4680      	mov	r8, r0
 800d332:	4620      	mov	r0, r4
 800d334:	f000 ff3a 	bl	800e1ac <_Bfree>
 800d338:	ee08 8a10 	vmov	s16, r8
 800d33c:	9b07      	ldr	r3, [sp, #28]
 800d33e:	1b9a      	subs	r2, r3, r6
 800d340:	d006      	beq.n	800d350 <_dtoa_r+0x7a0>
 800d342:	ee18 1a10 	vmov	r1, s16
 800d346:	4620      	mov	r0, r4
 800d348:	f001 f8f2 	bl	800e530 <__pow5mult>
 800d34c:	ee08 0a10 	vmov	s16, r0
 800d350:	2101      	movs	r1, #1
 800d352:	4620      	mov	r0, r4
 800d354:	f001 f82c 	bl	800e3b0 <__i2b>
 800d358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	4606      	mov	r6, r0
 800d35e:	f340 8088 	ble.w	800d472 <_dtoa_r+0x8c2>
 800d362:	461a      	mov	r2, r3
 800d364:	4601      	mov	r1, r0
 800d366:	4620      	mov	r0, r4
 800d368:	f001 f8e2 	bl	800e530 <__pow5mult>
 800d36c:	9b06      	ldr	r3, [sp, #24]
 800d36e:	2b01      	cmp	r3, #1
 800d370:	4606      	mov	r6, r0
 800d372:	f340 8081 	ble.w	800d478 <_dtoa_r+0x8c8>
 800d376:	f04f 0800 	mov.w	r8, #0
 800d37a:	6933      	ldr	r3, [r6, #16]
 800d37c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d380:	6918      	ldr	r0, [r3, #16]
 800d382:	f000 ffc5 	bl	800e310 <__hi0bits>
 800d386:	f1c0 0020 	rsb	r0, r0, #32
 800d38a:	9b05      	ldr	r3, [sp, #20]
 800d38c:	4418      	add	r0, r3
 800d38e:	f010 001f 	ands.w	r0, r0, #31
 800d392:	f000 8092 	beq.w	800d4ba <_dtoa_r+0x90a>
 800d396:	f1c0 0320 	rsb	r3, r0, #32
 800d39a:	2b04      	cmp	r3, #4
 800d39c:	f340 808a 	ble.w	800d4b4 <_dtoa_r+0x904>
 800d3a0:	f1c0 001c 	rsb	r0, r0, #28
 800d3a4:	9b04      	ldr	r3, [sp, #16]
 800d3a6:	4403      	add	r3, r0
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	9b05      	ldr	r3, [sp, #20]
 800d3ac:	4403      	add	r3, r0
 800d3ae:	4405      	add	r5, r0
 800d3b0:	9305      	str	r3, [sp, #20]
 800d3b2:	9b04      	ldr	r3, [sp, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dd07      	ble.n	800d3c8 <_dtoa_r+0x818>
 800d3b8:	ee18 1a10 	vmov	r1, s16
 800d3bc:	461a      	mov	r2, r3
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 f910 	bl	800e5e4 <__lshift>
 800d3c4:	ee08 0a10 	vmov	s16, r0
 800d3c8:	9b05      	ldr	r3, [sp, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dd05      	ble.n	800d3da <_dtoa_r+0x82a>
 800d3ce:	4631      	mov	r1, r6
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	f001 f906 	bl	800e5e4 <__lshift>
 800d3d8:	4606      	mov	r6, r0
 800d3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d06e      	beq.n	800d4be <_dtoa_r+0x90e>
 800d3e0:	ee18 0a10 	vmov	r0, s16
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	f001 f96d 	bl	800e6c4 <__mcmp>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	da67      	bge.n	800d4be <_dtoa_r+0x90e>
 800d3ee:	9b00      	ldr	r3, [sp, #0]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	ee18 1a10 	vmov	r1, s16
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	220a      	movs	r2, #10
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fef7 	bl	800e1f0 <__multadd>
 800d402:	9b08      	ldr	r3, [sp, #32]
 800d404:	ee08 0a10 	vmov	s16, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 81b1 	beq.w	800d770 <_dtoa_r+0xbc0>
 800d40e:	2300      	movs	r3, #0
 800d410:	4639      	mov	r1, r7
 800d412:	220a      	movs	r2, #10
 800d414:	4620      	mov	r0, r4
 800d416:	f000 feeb 	bl	800e1f0 <__multadd>
 800d41a:	9b02      	ldr	r3, [sp, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	4607      	mov	r7, r0
 800d420:	f300 808e 	bgt.w	800d540 <_dtoa_r+0x990>
 800d424:	9b06      	ldr	r3, [sp, #24]
 800d426:	2b02      	cmp	r3, #2
 800d428:	dc51      	bgt.n	800d4ce <_dtoa_r+0x91e>
 800d42a:	e089      	b.n	800d540 <_dtoa_r+0x990>
 800d42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d432:	e74b      	b.n	800d2cc <_dtoa_r+0x71c>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	1e5e      	subs	r6, r3, #1
 800d438:	9b07      	ldr	r3, [sp, #28]
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	bfbf      	itttt	lt
 800d43e:	9b07      	ldrlt	r3, [sp, #28]
 800d440:	9607      	strlt	r6, [sp, #28]
 800d442:	1af2      	sublt	r2, r6, r3
 800d444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d446:	bfb6      	itet	lt
 800d448:	189b      	addlt	r3, r3, r2
 800d44a:	1b9e      	subge	r6, r3, r6
 800d44c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d44e:	9b03      	ldr	r3, [sp, #12]
 800d450:	bfb8      	it	lt
 800d452:	2600      	movlt	r6, #0
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfb7      	itett	lt
 800d458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d45c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d460:	1a9d      	sublt	r5, r3, r2
 800d462:	2300      	movlt	r3, #0
 800d464:	e734      	b.n	800d2d0 <_dtoa_r+0x720>
 800d466:	9e07      	ldr	r6, [sp, #28]
 800d468:	9d04      	ldr	r5, [sp, #16]
 800d46a:	9f08      	ldr	r7, [sp, #32]
 800d46c:	e73b      	b.n	800d2e6 <_dtoa_r+0x736>
 800d46e:	9a07      	ldr	r2, [sp, #28]
 800d470:	e767      	b.n	800d342 <_dtoa_r+0x792>
 800d472:	9b06      	ldr	r3, [sp, #24]
 800d474:	2b01      	cmp	r3, #1
 800d476:	dc18      	bgt.n	800d4aa <_dtoa_r+0x8fa>
 800d478:	f1ba 0f00 	cmp.w	sl, #0
 800d47c:	d115      	bne.n	800d4aa <_dtoa_r+0x8fa>
 800d47e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d482:	b993      	cbnz	r3, 800d4aa <_dtoa_r+0x8fa>
 800d484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	b183      	cbz	r3, 800d4b0 <_dtoa_r+0x900>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	9b05      	ldr	r3, [sp, #20]
 800d496:	3301      	adds	r3, #1
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	f04f 0801 	mov.w	r8, #1
 800d49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f47f af6a 	bne.w	800d37a <_dtoa_r+0x7ca>
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	e76f      	b.n	800d38a <_dtoa_r+0x7da>
 800d4aa:	f04f 0800 	mov.w	r8, #0
 800d4ae:	e7f6      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b0:	4698      	mov	r8, r3
 800d4b2:	e7f4      	b.n	800d49e <_dtoa_r+0x8ee>
 800d4b4:	f43f af7d 	beq.w	800d3b2 <_dtoa_r+0x802>
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	301c      	adds	r0, #28
 800d4bc:	e772      	b.n	800d3a4 <_dtoa_r+0x7f4>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc37      	bgt.n	800d534 <_dtoa_r+0x984>
 800d4c4:	9b06      	ldr	r3, [sp, #24]
 800d4c6:	2b02      	cmp	r3, #2
 800d4c8:	dd34      	ble.n	800d534 <_dtoa_r+0x984>
 800d4ca:	9b03      	ldr	r3, [sp, #12]
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	b96b      	cbnz	r3, 800d4ee <_dtoa_r+0x93e>
 800d4d2:	4631      	mov	r1, r6
 800d4d4:	2205      	movs	r2, #5
 800d4d6:	4620      	mov	r0, r4
 800d4d8:	f000 fe8a 	bl	800e1f0 <__multadd>
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4606      	mov	r6, r0
 800d4e0:	ee18 0a10 	vmov	r0, s16
 800d4e4:	f001 f8ee 	bl	800e6c4 <__mcmp>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f73f adbb 	bgt.w	800d064 <_dtoa_r+0x4b4>
 800d4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4f0:	9d01      	ldr	r5, [sp, #4]
 800d4f2:	43db      	mvns	r3, r3
 800d4f4:	9300      	str	r3, [sp, #0]
 800d4f6:	f04f 0800 	mov.w	r8, #0
 800d4fa:	4631      	mov	r1, r6
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fe55 	bl	800e1ac <_Bfree>
 800d502:	2f00      	cmp	r7, #0
 800d504:	f43f aea4 	beq.w	800d250 <_dtoa_r+0x6a0>
 800d508:	f1b8 0f00 	cmp.w	r8, #0
 800d50c:	d005      	beq.n	800d51a <_dtoa_r+0x96a>
 800d50e:	45b8      	cmp	r8, r7
 800d510:	d003      	beq.n	800d51a <_dtoa_r+0x96a>
 800d512:	4641      	mov	r1, r8
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fe49 	bl	800e1ac <_Bfree>
 800d51a:	4639      	mov	r1, r7
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fe45 	bl	800e1ac <_Bfree>
 800d522:	e695      	b.n	800d250 <_dtoa_r+0x6a0>
 800d524:	2600      	movs	r6, #0
 800d526:	4637      	mov	r7, r6
 800d528:	e7e1      	b.n	800d4ee <_dtoa_r+0x93e>
 800d52a:	9700      	str	r7, [sp, #0]
 800d52c:	4637      	mov	r7, r6
 800d52e:	e599      	b.n	800d064 <_dtoa_r+0x4b4>
 800d530:	40240000 	.word	0x40240000
 800d534:	9b08      	ldr	r3, [sp, #32]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80ca 	beq.w	800d6d0 <_dtoa_r+0xb20>
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	9302      	str	r3, [sp, #8]
 800d540:	2d00      	cmp	r5, #0
 800d542:	dd05      	ble.n	800d550 <_dtoa_r+0x9a0>
 800d544:	4639      	mov	r1, r7
 800d546:	462a      	mov	r2, r5
 800d548:	4620      	mov	r0, r4
 800d54a:	f001 f84b 	bl	800e5e4 <__lshift>
 800d54e:	4607      	mov	r7, r0
 800d550:	f1b8 0f00 	cmp.w	r8, #0
 800d554:	d05b      	beq.n	800d60e <_dtoa_r+0xa5e>
 800d556:	6879      	ldr	r1, [r7, #4]
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fde7 	bl	800e12c <_Balloc>
 800d55e:	4605      	mov	r5, r0
 800d560:	b928      	cbnz	r0, 800d56e <_dtoa_r+0x9be>
 800d562:	4b87      	ldr	r3, [pc, #540]	; (800d780 <_dtoa_r+0xbd0>)
 800d564:	4602      	mov	r2, r0
 800d566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d56a:	f7ff bb3b 	b.w	800cbe4 <_dtoa_r+0x34>
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	3202      	adds	r2, #2
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	f107 010c 	add.w	r1, r7, #12
 800d578:	300c      	adds	r0, #12
 800d57a:	f000 fdbd 	bl	800e0f8 <memcpy>
 800d57e:	2201      	movs	r2, #1
 800d580:	4629      	mov	r1, r5
 800d582:	4620      	mov	r0, r4
 800d584:	f001 f82e 	bl	800e5e4 <__lshift>
 800d588:	9b01      	ldr	r3, [sp, #4]
 800d58a:	f103 0901 	add.w	r9, r3, #1
 800d58e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d592:	4413      	add	r3, r2
 800d594:	9305      	str	r3, [sp, #20]
 800d596:	f00a 0301 	and.w	r3, sl, #1
 800d59a:	46b8      	mov	r8, r7
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	4607      	mov	r7, r0
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	ee18 0a10 	vmov	r0, s16
 800d5a6:	f7ff fa75 	bl	800ca94 <quorem>
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5b2:	ee18 0a10 	vmov	r0, s16
 800d5b6:	f001 f885 	bl	800e6c4 <__mcmp>
 800d5ba:	463a      	mov	r2, r7
 800d5bc:	9003      	str	r0, [sp, #12]
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f001 f89b 	bl	800e6fc <__mdiff>
 800d5c6:	68c2      	ldr	r2, [r0, #12]
 800d5c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	bb02      	cbnz	r2, 800d612 <_dtoa_r+0xa62>
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	ee18 0a10 	vmov	r0, s16
 800d5d6:	f001 f875 	bl	800e6c4 <__mcmp>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4620      	mov	r0, r4
 800d5e0:	9207      	str	r2, [sp, #28]
 800d5e2:	f000 fde3 	bl	800e1ac <_Bfree>
 800d5e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d5ea:	ea43 0102 	orr.w	r1, r3, r2
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	430b      	orrs	r3, r1
 800d5f2:	464d      	mov	r5, r9
 800d5f4:	d10f      	bne.n	800d616 <_dtoa_r+0xa66>
 800d5f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d5fa:	d02a      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d5fc:	9b03      	ldr	r3, [sp, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	dd02      	ble.n	800d608 <_dtoa_r+0xa58>
 800d602:	9b02      	ldr	r3, [sp, #8]
 800d604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d608:	f88b a000 	strb.w	sl, [fp]
 800d60c:	e775      	b.n	800d4fa <_dtoa_r+0x94a>
 800d60e:	4638      	mov	r0, r7
 800d610:	e7ba      	b.n	800d588 <_dtoa_r+0x9d8>
 800d612:	2201      	movs	r2, #1
 800d614:	e7e2      	b.n	800d5dc <_dtoa_r+0xa2c>
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	db04      	blt.n	800d626 <_dtoa_r+0xa76>
 800d61c:	9906      	ldr	r1, [sp, #24]
 800d61e:	430b      	orrs	r3, r1
 800d620:	9904      	ldr	r1, [sp, #16]
 800d622:	430b      	orrs	r3, r1
 800d624:	d122      	bne.n	800d66c <_dtoa_r+0xabc>
 800d626:	2a00      	cmp	r2, #0
 800d628:	ddee      	ble.n	800d608 <_dtoa_r+0xa58>
 800d62a:	ee18 1a10 	vmov	r1, s16
 800d62e:	2201      	movs	r2, #1
 800d630:	4620      	mov	r0, r4
 800d632:	f000 ffd7 	bl	800e5e4 <__lshift>
 800d636:	4631      	mov	r1, r6
 800d638:	ee08 0a10 	vmov	s16, r0
 800d63c:	f001 f842 	bl	800e6c4 <__mcmp>
 800d640:	2800      	cmp	r0, #0
 800d642:	dc03      	bgt.n	800d64c <_dtoa_r+0xa9c>
 800d644:	d1e0      	bne.n	800d608 <_dtoa_r+0xa58>
 800d646:	f01a 0f01 	tst.w	sl, #1
 800d64a:	d0dd      	beq.n	800d608 <_dtoa_r+0xa58>
 800d64c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d650:	d1d7      	bne.n	800d602 <_dtoa_r+0xa52>
 800d652:	2339      	movs	r3, #57	; 0x39
 800d654:	f88b 3000 	strb.w	r3, [fp]
 800d658:	462b      	mov	r3, r5
 800d65a:	461d      	mov	r5, r3
 800d65c:	3b01      	subs	r3, #1
 800d65e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d662:	2a39      	cmp	r2, #57	; 0x39
 800d664:	d071      	beq.n	800d74a <_dtoa_r+0xb9a>
 800d666:	3201      	adds	r2, #1
 800d668:	701a      	strb	r2, [r3, #0]
 800d66a:	e746      	b.n	800d4fa <_dtoa_r+0x94a>
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	dd07      	ble.n	800d680 <_dtoa_r+0xad0>
 800d670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d674:	d0ed      	beq.n	800d652 <_dtoa_r+0xaa2>
 800d676:	f10a 0301 	add.w	r3, sl, #1
 800d67a:	f88b 3000 	strb.w	r3, [fp]
 800d67e:	e73c      	b.n	800d4fa <_dtoa_r+0x94a>
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d686:	4599      	cmp	r9, r3
 800d688:	d047      	beq.n	800d71a <_dtoa_r+0xb6a>
 800d68a:	ee18 1a10 	vmov	r1, s16
 800d68e:	2300      	movs	r3, #0
 800d690:	220a      	movs	r2, #10
 800d692:	4620      	mov	r0, r4
 800d694:	f000 fdac 	bl	800e1f0 <__multadd>
 800d698:	45b8      	cmp	r8, r7
 800d69a:	ee08 0a10 	vmov	s16, r0
 800d69e:	f04f 0300 	mov.w	r3, #0
 800d6a2:	f04f 020a 	mov.w	r2, #10
 800d6a6:	4641      	mov	r1, r8
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	d106      	bne.n	800d6ba <_dtoa_r+0xb0a>
 800d6ac:	f000 fda0 	bl	800e1f0 <__multadd>
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	f109 0901 	add.w	r9, r9, #1
 800d6b8:	e772      	b.n	800d5a0 <_dtoa_r+0x9f0>
 800d6ba:	f000 fd99 	bl	800e1f0 <__multadd>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4680      	mov	r8, r0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	220a      	movs	r2, #10
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 fd92 	bl	800e1f0 <__multadd>
 800d6cc:	4607      	mov	r7, r0
 800d6ce:	e7f1      	b.n	800d6b4 <_dtoa_r+0xb04>
 800d6d0:	9b03      	ldr	r3, [sp, #12]
 800d6d2:	9302      	str	r3, [sp, #8]
 800d6d4:	9d01      	ldr	r5, [sp, #4]
 800d6d6:	ee18 0a10 	vmov	r0, s16
 800d6da:	4631      	mov	r1, r6
 800d6dc:	f7ff f9da 	bl	800ca94 <quorem>
 800d6e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	f805 ab01 	strb.w	sl, [r5], #1
 800d6ea:	1aea      	subs	r2, r5, r3
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	dd09      	ble.n	800d706 <_dtoa_r+0xb56>
 800d6f2:	ee18 1a10 	vmov	r1, s16
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	220a      	movs	r2, #10
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 fd78 	bl	800e1f0 <__multadd>
 800d700:	ee08 0a10 	vmov	s16, r0
 800d704:	e7e7      	b.n	800d6d6 <_dtoa_r+0xb26>
 800d706:	9b02      	ldr	r3, [sp, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfc8      	it	gt
 800d70c:	461d      	movgt	r5, r3
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	bfd8      	it	le
 800d712:	2501      	movle	r5, #1
 800d714:	441d      	add	r5, r3
 800d716:	f04f 0800 	mov.w	r8, #0
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	2201      	movs	r2, #1
 800d720:	4620      	mov	r0, r4
 800d722:	f000 ff5f 	bl	800e5e4 <__lshift>
 800d726:	4631      	mov	r1, r6
 800d728:	ee08 0a10 	vmov	s16, r0
 800d72c:	f000 ffca 	bl	800e6c4 <__mcmp>
 800d730:	2800      	cmp	r0, #0
 800d732:	dc91      	bgt.n	800d658 <_dtoa_r+0xaa8>
 800d734:	d102      	bne.n	800d73c <_dtoa_r+0xb8c>
 800d736:	f01a 0f01 	tst.w	sl, #1
 800d73a:	d18d      	bne.n	800d658 <_dtoa_r+0xaa8>
 800d73c:	462b      	mov	r3, r5
 800d73e:	461d      	mov	r5, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a30      	cmp	r2, #48	; 0x30
 800d746:	d0fa      	beq.n	800d73e <_dtoa_r+0xb8e>
 800d748:	e6d7      	b.n	800d4fa <_dtoa_r+0x94a>
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d184      	bne.n	800d65a <_dtoa_r+0xaaa>
 800d750:	9b00      	ldr	r3, [sp, #0]
 800d752:	3301      	adds	r3, #1
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	2331      	movs	r3, #49	; 0x31
 800d758:	7013      	strb	r3, [r2, #0]
 800d75a:	e6ce      	b.n	800d4fa <_dtoa_r+0x94a>
 800d75c:	4b09      	ldr	r3, [pc, #36]	; (800d784 <_dtoa_r+0xbd4>)
 800d75e:	f7ff ba95 	b.w	800cc8c <_dtoa_r+0xdc>
 800d762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d764:	2b00      	cmp	r3, #0
 800d766:	f47f aa6e 	bne.w	800cc46 <_dtoa_r+0x96>
 800d76a:	4b07      	ldr	r3, [pc, #28]	; (800d788 <_dtoa_r+0xbd8>)
 800d76c:	f7ff ba8e 	b.w	800cc8c <_dtoa_r+0xdc>
 800d770:	9b02      	ldr	r3, [sp, #8]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dcae      	bgt.n	800d6d4 <_dtoa_r+0xb24>
 800d776:	9b06      	ldr	r3, [sp, #24]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	f73f aea8 	bgt.w	800d4ce <_dtoa_r+0x91e>
 800d77e:	e7a9      	b.n	800d6d4 <_dtoa_r+0xb24>
 800d780:	08011711 	.word	0x08011711
 800d784:	08011909 	.word	0x08011909
 800d788:	080116a9 	.word	0x080116a9

0800d78c <fiprintf>:
 800d78c:	b40e      	push	{r1, r2, r3}
 800d78e:	b503      	push	{r0, r1, lr}
 800d790:	4601      	mov	r1, r0
 800d792:	ab03      	add	r3, sp, #12
 800d794:	4805      	ldr	r0, [pc, #20]	; (800d7ac <fiprintf+0x20>)
 800d796:	f853 2b04 	ldr.w	r2, [r3], #4
 800d79a:	6800      	ldr	r0, [r0, #0]
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	f001 fcf3 	bl	800f188 <_vfiprintf_r>
 800d7a2:	b002      	add	sp, #8
 800d7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7a8:	b003      	add	sp, #12
 800d7aa:	4770      	bx	lr
 800d7ac:	20000110 	.word	0x20000110

0800d7b0 <rshift>:
 800d7b0:	6903      	ldr	r3, [r0, #16]
 800d7b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7be:	f100 0414 	add.w	r4, r0, #20
 800d7c2:	dd45      	ble.n	800d850 <rshift+0xa0>
 800d7c4:	f011 011f 	ands.w	r1, r1, #31
 800d7c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7d0:	d10c      	bne.n	800d7ec <rshift+0x3c>
 800d7d2:	f100 0710 	add.w	r7, r0, #16
 800d7d6:	4629      	mov	r1, r5
 800d7d8:	42b1      	cmp	r1, r6
 800d7da:	d334      	bcc.n	800d846 <rshift+0x96>
 800d7dc:	1a9b      	subs	r3, r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	1eea      	subs	r2, r5, #3
 800d7e2:	4296      	cmp	r6, r2
 800d7e4:	bf38      	it	cc
 800d7e6:	2300      	movcc	r3, #0
 800d7e8:	4423      	add	r3, r4
 800d7ea:	e015      	b.n	800d818 <rshift+0x68>
 800d7ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7f0:	f1c1 0820 	rsb	r8, r1, #32
 800d7f4:	40cf      	lsrs	r7, r1
 800d7f6:	f105 0e04 	add.w	lr, r5, #4
 800d7fa:	46a1      	mov	r9, r4
 800d7fc:	4576      	cmp	r6, lr
 800d7fe:	46f4      	mov	ip, lr
 800d800:	d815      	bhi.n	800d82e <rshift+0x7e>
 800d802:	1a9a      	subs	r2, r3, r2
 800d804:	0092      	lsls	r2, r2, #2
 800d806:	3a04      	subs	r2, #4
 800d808:	3501      	adds	r5, #1
 800d80a:	42ae      	cmp	r6, r5
 800d80c:	bf38      	it	cc
 800d80e:	2200      	movcc	r2, #0
 800d810:	18a3      	adds	r3, r4, r2
 800d812:	50a7      	str	r7, [r4, r2]
 800d814:	b107      	cbz	r7, 800d818 <rshift+0x68>
 800d816:	3304      	adds	r3, #4
 800d818:	1b1a      	subs	r2, r3, r4
 800d81a:	42a3      	cmp	r3, r4
 800d81c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d820:	bf08      	it	eq
 800d822:	2300      	moveq	r3, #0
 800d824:	6102      	str	r2, [r0, #16]
 800d826:	bf08      	it	eq
 800d828:	6143      	streq	r3, [r0, #20]
 800d82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d82e:	f8dc c000 	ldr.w	ip, [ip]
 800d832:	fa0c fc08 	lsl.w	ip, ip, r8
 800d836:	ea4c 0707 	orr.w	r7, ip, r7
 800d83a:	f849 7b04 	str.w	r7, [r9], #4
 800d83e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d842:	40cf      	lsrs	r7, r1
 800d844:	e7da      	b.n	800d7fc <rshift+0x4c>
 800d846:	f851 cb04 	ldr.w	ip, [r1], #4
 800d84a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d84e:	e7c3      	b.n	800d7d8 <rshift+0x28>
 800d850:	4623      	mov	r3, r4
 800d852:	e7e1      	b.n	800d818 <rshift+0x68>

0800d854 <__hexdig_fun>:
 800d854:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d858:	2b09      	cmp	r3, #9
 800d85a:	d802      	bhi.n	800d862 <__hexdig_fun+0xe>
 800d85c:	3820      	subs	r0, #32
 800d85e:	b2c0      	uxtb	r0, r0
 800d860:	4770      	bx	lr
 800d862:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d866:	2b05      	cmp	r3, #5
 800d868:	d801      	bhi.n	800d86e <__hexdig_fun+0x1a>
 800d86a:	3847      	subs	r0, #71	; 0x47
 800d86c:	e7f7      	b.n	800d85e <__hexdig_fun+0xa>
 800d86e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d872:	2b05      	cmp	r3, #5
 800d874:	d801      	bhi.n	800d87a <__hexdig_fun+0x26>
 800d876:	3827      	subs	r0, #39	; 0x27
 800d878:	e7f1      	b.n	800d85e <__hexdig_fun+0xa>
 800d87a:	2000      	movs	r0, #0
 800d87c:	4770      	bx	lr
	...

0800d880 <__gethex>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	ed2d 8b02 	vpush	{d8}
 800d888:	b089      	sub	sp, #36	; 0x24
 800d88a:	ee08 0a10 	vmov	s16, r0
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	4bb4      	ldr	r3, [pc, #720]	; (800db64 <__gethex+0x2e4>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	4618      	mov	r0, r3
 800d898:	468b      	mov	fp, r1
 800d89a:	4690      	mov	r8, r2
 800d89c:	f7f2 fc98 	bl	80001d0 <strlen>
 800d8a0:	9b01      	ldr	r3, [sp, #4]
 800d8a2:	f8db 2000 	ldr.w	r2, [fp]
 800d8a6:	4403      	add	r3, r0
 800d8a8:	4682      	mov	sl, r0
 800d8aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8ae:	9305      	str	r3, [sp, #20]
 800d8b0:	1c93      	adds	r3, r2, #2
 800d8b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d8ba:	32fe      	adds	r2, #254	; 0xfe
 800d8bc:	18d1      	adds	r1, r2, r3
 800d8be:	461f      	mov	r7, r3
 800d8c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8c4:	9100      	str	r1, [sp, #0]
 800d8c6:	2830      	cmp	r0, #48	; 0x30
 800d8c8:	d0f8      	beq.n	800d8bc <__gethex+0x3c>
 800d8ca:	f7ff ffc3 	bl	800d854 <__hexdig_fun>
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d13a      	bne.n	800d94a <__gethex+0xca>
 800d8d4:	9901      	ldr	r1, [sp, #4]
 800d8d6:	4652      	mov	r2, sl
 800d8d8:	4638      	mov	r0, r7
 800d8da:	f7fd ff84 	bl	800b7e6 <strncmp>
 800d8de:	4605      	mov	r5, r0
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d168      	bne.n	800d9b6 <__gethex+0x136>
 800d8e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d8e8:	eb07 060a 	add.w	r6, r7, sl
 800d8ec:	f7ff ffb2 	bl	800d854 <__hexdig_fun>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d062      	beq.n	800d9ba <__gethex+0x13a>
 800d8f4:	4633      	mov	r3, r6
 800d8f6:	7818      	ldrb	r0, [r3, #0]
 800d8f8:	2830      	cmp	r0, #48	; 0x30
 800d8fa:	461f      	mov	r7, r3
 800d8fc:	f103 0301 	add.w	r3, r3, #1
 800d900:	d0f9      	beq.n	800d8f6 <__gethex+0x76>
 800d902:	f7ff ffa7 	bl	800d854 <__hexdig_fun>
 800d906:	2301      	movs	r3, #1
 800d908:	fab0 f480 	clz	r4, r0
 800d90c:	0964      	lsrs	r4, r4, #5
 800d90e:	4635      	mov	r5, r6
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	463a      	mov	r2, r7
 800d914:	4616      	mov	r6, r2
 800d916:	3201      	adds	r2, #1
 800d918:	7830      	ldrb	r0, [r6, #0]
 800d91a:	f7ff ff9b 	bl	800d854 <__hexdig_fun>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d1f8      	bne.n	800d914 <__gethex+0x94>
 800d922:	9901      	ldr	r1, [sp, #4]
 800d924:	4652      	mov	r2, sl
 800d926:	4630      	mov	r0, r6
 800d928:	f7fd ff5d 	bl	800b7e6 <strncmp>
 800d92c:	b980      	cbnz	r0, 800d950 <__gethex+0xd0>
 800d92e:	b94d      	cbnz	r5, 800d944 <__gethex+0xc4>
 800d930:	eb06 050a 	add.w	r5, r6, sl
 800d934:	462a      	mov	r2, r5
 800d936:	4616      	mov	r6, r2
 800d938:	3201      	adds	r2, #1
 800d93a:	7830      	ldrb	r0, [r6, #0]
 800d93c:	f7ff ff8a 	bl	800d854 <__hexdig_fun>
 800d940:	2800      	cmp	r0, #0
 800d942:	d1f8      	bne.n	800d936 <__gethex+0xb6>
 800d944:	1bad      	subs	r5, r5, r6
 800d946:	00ad      	lsls	r5, r5, #2
 800d948:	e004      	b.n	800d954 <__gethex+0xd4>
 800d94a:	2400      	movs	r4, #0
 800d94c:	4625      	mov	r5, r4
 800d94e:	e7e0      	b.n	800d912 <__gethex+0x92>
 800d950:	2d00      	cmp	r5, #0
 800d952:	d1f7      	bne.n	800d944 <__gethex+0xc4>
 800d954:	7833      	ldrb	r3, [r6, #0]
 800d956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d95a:	2b50      	cmp	r3, #80	; 0x50
 800d95c:	d13b      	bne.n	800d9d6 <__gethex+0x156>
 800d95e:	7873      	ldrb	r3, [r6, #1]
 800d960:	2b2b      	cmp	r3, #43	; 0x2b
 800d962:	d02c      	beq.n	800d9be <__gethex+0x13e>
 800d964:	2b2d      	cmp	r3, #45	; 0x2d
 800d966:	d02e      	beq.n	800d9c6 <__gethex+0x146>
 800d968:	1c71      	adds	r1, r6, #1
 800d96a:	f04f 0900 	mov.w	r9, #0
 800d96e:	7808      	ldrb	r0, [r1, #0]
 800d970:	f7ff ff70 	bl	800d854 <__hexdig_fun>
 800d974:	1e43      	subs	r3, r0, #1
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b18      	cmp	r3, #24
 800d97a:	d82c      	bhi.n	800d9d6 <__gethex+0x156>
 800d97c:	f1a0 0210 	sub.w	r2, r0, #16
 800d980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d984:	f7ff ff66 	bl	800d854 <__hexdig_fun>
 800d988:	1e43      	subs	r3, r0, #1
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b18      	cmp	r3, #24
 800d98e:	d91d      	bls.n	800d9cc <__gethex+0x14c>
 800d990:	f1b9 0f00 	cmp.w	r9, #0
 800d994:	d000      	beq.n	800d998 <__gethex+0x118>
 800d996:	4252      	negs	r2, r2
 800d998:	4415      	add	r5, r2
 800d99a:	f8cb 1000 	str.w	r1, [fp]
 800d99e:	b1e4      	cbz	r4, 800d9da <__gethex+0x15a>
 800d9a0:	9b00      	ldr	r3, [sp, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	bf14      	ite	ne
 800d9a6:	2700      	movne	r7, #0
 800d9a8:	2706      	moveq	r7, #6
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	b009      	add	sp, #36	; 0x24
 800d9ae:	ecbd 8b02 	vpop	{d8}
 800d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b6:	463e      	mov	r6, r7
 800d9b8:	4625      	mov	r5, r4
 800d9ba:	2401      	movs	r4, #1
 800d9bc:	e7ca      	b.n	800d954 <__gethex+0xd4>
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	1cb1      	adds	r1, r6, #2
 800d9c4:	e7d3      	b.n	800d96e <__gethex+0xee>
 800d9c6:	f04f 0901 	mov.w	r9, #1
 800d9ca:	e7fa      	b.n	800d9c2 <__gethex+0x142>
 800d9cc:	230a      	movs	r3, #10
 800d9ce:	fb03 0202 	mla	r2, r3, r2, r0
 800d9d2:	3a10      	subs	r2, #16
 800d9d4:	e7d4      	b.n	800d980 <__gethex+0x100>
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	e7df      	b.n	800d99a <__gethex+0x11a>
 800d9da:	1bf3      	subs	r3, r6, r7
 800d9dc:	3b01      	subs	r3, #1
 800d9de:	4621      	mov	r1, r4
 800d9e0:	2b07      	cmp	r3, #7
 800d9e2:	dc0b      	bgt.n	800d9fc <__gethex+0x17c>
 800d9e4:	ee18 0a10 	vmov	r0, s16
 800d9e8:	f000 fba0 	bl	800e12c <_Balloc>
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	b940      	cbnz	r0, 800da02 <__gethex+0x182>
 800d9f0:	4b5d      	ldr	r3, [pc, #372]	; (800db68 <__gethex+0x2e8>)
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	21de      	movs	r1, #222	; 0xde
 800d9f6:	485d      	ldr	r0, [pc, #372]	; (800db6c <__gethex+0x2ec>)
 800d9f8:	f7ff f81e 	bl	800ca38 <__assert_func>
 800d9fc:	3101      	adds	r1, #1
 800d9fe:	105b      	asrs	r3, r3, #1
 800da00:	e7ee      	b.n	800d9e0 <__gethex+0x160>
 800da02:	f100 0914 	add.w	r9, r0, #20
 800da06:	f04f 0b00 	mov.w	fp, #0
 800da0a:	f1ca 0301 	rsb	r3, sl, #1
 800da0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800da12:	f8cd b000 	str.w	fp, [sp]
 800da16:	9306      	str	r3, [sp, #24]
 800da18:	42b7      	cmp	r7, r6
 800da1a:	d340      	bcc.n	800da9e <__gethex+0x21e>
 800da1c:	9802      	ldr	r0, [sp, #8]
 800da1e:	9b00      	ldr	r3, [sp, #0]
 800da20:	f840 3b04 	str.w	r3, [r0], #4
 800da24:	eba0 0009 	sub.w	r0, r0, r9
 800da28:	1080      	asrs	r0, r0, #2
 800da2a:	0146      	lsls	r6, r0, #5
 800da2c:	6120      	str	r0, [r4, #16]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fc6e 	bl	800e310 <__hi0bits>
 800da34:	1a30      	subs	r0, r6, r0
 800da36:	f8d8 6000 	ldr.w	r6, [r8]
 800da3a:	42b0      	cmp	r0, r6
 800da3c:	dd63      	ble.n	800db06 <__gethex+0x286>
 800da3e:	1b87      	subs	r7, r0, r6
 800da40:	4639      	mov	r1, r7
 800da42:	4620      	mov	r0, r4
 800da44:	f001 f812 	bl	800ea6c <__any_on>
 800da48:	4682      	mov	sl, r0
 800da4a:	b1a8      	cbz	r0, 800da78 <__gethex+0x1f8>
 800da4c:	1e7b      	subs	r3, r7, #1
 800da4e:	1159      	asrs	r1, r3, #5
 800da50:	f003 021f 	and.w	r2, r3, #31
 800da54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da58:	f04f 0a01 	mov.w	sl, #1
 800da5c:	fa0a f202 	lsl.w	r2, sl, r2
 800da60:	420a      	tst	r2, r1
 800da62:	d009      	beq.n	800da78 <__gethex+0x1f8>
 800da64:	4553      	cmp	r3, sl
 800da66:	dd05      	ble.n	800da74 <__gethex+0x1f4>
 800da68:	1eb9      	subs	r1, r7, #2
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fffe 	bl	800ea6c <__any_on>
 800da70:	2800      	cmp	r0, #0
 800da72:	d145      	bne.n	800db00 <__gethex+0x280>
 800da74:	f04f 0a02 	mov.w	sl, #2
 800da78:	4639      	mov	r1, r7
 800da7a:	4620      	mov	r0, r4
 800da7c:	f7ff fe98 	bl	800d7b0 <rshift>
 800da80:	443d      	add	r5, r7
 800da82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da86:	42ab      	cmp	r3, r5
 800da88:	da4c      	bge.n	800db24 <__gethex+0x2a4>
 800da8a:	ee18 0a10 	vmov	r0, s16
 800da8e:	4621      	mov	r1, r4
 800da90:	f000 fb8c 	bl	800e1ac <_Bfree>
 800da94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da96:	2300      	movs	r3, #0
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	27a3      	movs	r7, #163	; 0xa3
 800da9c:	e785      	b.n	800d9aa <__gethex+0x12a>
 800da9e:	1e73      	subs	r3, r6, #1
 800daa0:	9a05      	ldr	r2, [sp, #20]
 800daa2:	9303      	str	r3, [sp, #12]
 800daa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d019      	beq.n	800dae0 <__gethex+0x260>
 800daac:	f1bb 0f20 	cmp.w	fp, #32
 800dab0:	d107      	bne.n	800dac2 <__gethex+0x242>
 800dab2:	9b02      	ldr	r3, [sp, #8]
 800dab4:	9a00      	ldr	r2, [sp, #0]
 800dab6:	f843 2b04 	str.w	r2, [r3], #4
 800daba:	9302      	str	r3, [sp, #8]
 800dabc:	2300      	movs	r3, #0
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	469b      	mov	fp, r3
 800dac2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dac6:	f7ff fec5 	bl	800d854 <__hexdig_fun>
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	f000 000f 	and.w	r0, r0, #15
 800dad0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dad4:	4303      	orrs	r3, r0
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	f10b 0b04 	add.w	fp, fp, #4
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	e00d      	b.n	800dafc <__gethex+0x27c>
 800dae0:	9b03      	ldr	r3, [sp, #12]
 800dae2:	9a06      	ldr	r2, [sp, #24]
 800dae4:	4413      	add	r3, r2
 800dae6:	42bb      	cmp	r3, r7
 800dae8:	d3e0      	bcc.n	800daac <__gethex+0x22c>
 800daea:	4618      	mov	r0, r3
 800daec:	9901      	ldr	r1, [sp, #4]
 800daee:	9307      	str	r3, [sp, #28]
 800daf0:	4652      	mov	r2, sl
 800daf2:	f7fd fe78 	bl	800b7e6 <strncmp>
 800daf6:	9b07      	ldr	r3, [sp, #28]
 800daf8:	2800      	cmp	r0, #0
 800dafa:	d1d7      	bne.n	800daac <__gethex+0x22c>
 800dafc:	461e      	mov	r6, r3
 800dafe:	e78b      	b.n	800da18 <__gethex+0x198>
 800db00:	f04f 0a03 	mov.w	sl, #3
 800db04:	e7b8      	b.n	800da78 <__gethex+0x1f8>
 800db06:	da0a      	bge.n	800db1e <__gethex+0x29e>
 800db08:	1a37      	subs	r7, r6, r0
 800db0a:	4621      	mov	r1, r4
 800db0c:	ee18 0a10 	vmov	r0, s16
 800db10:	463a      	mov	r2, r7
 800db12:	f000 fd67 	bl	800e5e4 <__lshift>
 800db16:	1bed      	subs	r5, r5, r7
 800db18:	4604      	mov	r4, r0
 800db1a:	f100 0914 	add.w	r9, r0, #20
 800db1e:	f04f 0a00 	mov.w	sl, #0
 800db22:	e7ae      	b.n	800da82 <__gethex+0x202>
 800db24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db28:	42a8      	cmp	r0, r5
 800db2a:	dd72      	ble.n	800dc12 <__gethex+0x392>
 800db2c:	1b45      	subs	r5, r0, r5
 800db2e:	42ae      	cmp	r6, r5
 800db30:	dc36      	bgt.n	800dba0 <__gethex+0x320>
 800db32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db36:	2b02      	cmp	r3, #2
 800db38:	d02a      	beq.n	800db90 <__gethex+0x310>
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d02c      	beq.n	800db98 <__gethex+0x318>
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d11c      	bne.n	800db7c <__gethex+0x2fc>
 800db42:	42ae      	cmp	r6, r5
 800db44:	d11a      	bne.n	800db7c <__gethex+0x2fc>
 800db46:	2e01      	cmp	r6, #1
 800db48:	d112      	bne.n	800db70 <__gethex+0x2f0>
 800db4a:	9a04      	ldr	r2, [sp, #16]
 800db4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	2301      	movs	r3, #1
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	f8c9 3000 	str.w	r3, [r9]
 800db5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db5c:	2762      	movs	r7, #98	; 0x62
 800db5e:	601c      	str	r4, [r3, #0]
 800db60:	e723      	b.n	800d9aa <__gethex+0x12a>
 800db62:	bf00      	nop
 800db64:	08011788 	.word	0x08011788
 800db68:	08011711 	.word	0x08011711
 800db6c:	08011722 	.word	0x08011722
 800db70:	1e71      	subs	r1, r6, #1
 800db72:	4620      	mov	r0, r4
 800db74:	f000 ff7a 	bl	800ea6c <__any_on>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d1e6      	bne.n	800db4a <__gethex+0x2ca>
 800db7c:	ee18 0a10 	vmov	r0, s16
 800db80:	4621      	mov	r1, r4
 800db82:	f000 fb13 	bl	800e1ac <_Bfree>
 800db86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db88:	2300      	movs	r3, #0
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	2750      	movs	r7, #80	; 0x50
 800db8e:	e70c      	b.n	800d9aa <__gethex+0x12a>
 800db90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1f2      	bne.n	800db7c <__gethex+0x2fc>
 800db96:	e7d8      	b.n	800db4a <__gethex+0x2ca>
 800db98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1d5      	bne.n	800db4a <__gethex+0x2ca>
 800db9e:	e7ed      	b.n	800db7c <__gethex+0x2fc>
 800dba0:	1e6f      	subs	r7, r5, #1
 800dba2:	f1ba 0f00 	cmp.w	sl, #0
 800dba6:	d131      	bne.n	800dc0c <__gethex+0x38c>
 800dba8:	b127      	cbz	r7, 800dbb4 <__gethex+0x334>
 800dbaa:	4639      	mov	r1, r7
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 ff5d 	bl	800ea6c <__any_on>
 800dbb2:	4682      	mov	sl, r0
 800dbb4:	117b      	asrs	r3, r7, #5
 800dbb6:	2101      	movs	r1, #1
 800dbb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dbbc:	f007 071f 	and.w	r7, r7, #31
 800dbc0:	fa01 f707 	lsl.w	r7, r1, r7
 800dbc4:	421f      	tst	r7, r3
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4620      	mov	r0, r4
 800dbca:	bf18      	it	ne
 800dbcc:	f04a 0a02 	orrne.w	sl, sl, #2
 800dbd0:	1b76      	subs	r6, r6, r5
 800dbd2:	f7ff fded 	bl	800d7b0 <rshift>
 800dbd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbda:	2702      	movs	r7, #2
 800dbdc:	f1ba 0f00 	cmp.w	sl, #0
 800dbe0:	d048      	beq.n	800dc74 <__gethex+0x3f4>
 800dbe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d015      	beq.n	800dc16 <__gethex+0x396>
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d017      	beq.n	800dc1e <__gethex+0x39e>
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d109      	bne.n	800dc06 <__gethex+0x386>
 800dbf2:	f01a 0f02 	tst.w	sl, #2
 800dbf6:	d006      	beq.n	800dc06 <__gethex+0x386>
 800dbf8:	f8d9 0000 	ldr.w	r0, [r9]
 800dbfc:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc00:	f01a 0f01 	tst.w	sl, #1
 800dc04:	d10e      	bne.n	800dc24 <__gethex+0x3a4>
 800dc06:	f047 0710 	orr.w	r7, r7, #16
 800dc0a:	e033      	b.n	800dc74 <__gethex+0x3f4>
 800dc0c:	f04f 0a01 	mov.w	sl, #1
 800dc10:	e7d0      	b.n	800dbb4 <__gethex+0x334>
 800dc12:	2701      	movs	r7, #1
 800dc14:	e7e2      	b.n	800dbdc <__gethex+0x35c>
 800dc16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc18:	f1c3 0301 	rsb	r3, r3, #1
 800dc1c:	9315      	str	r3, [sp, #84]	; 0x54
 800dc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d0f0      	beq.n	800dc06 <__gethex+0x386>
 800dc24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc28:	f104 0314 	add.w	r3, r4, #20
 800dc2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc34:	f04f 0c00 	mov.w	ip, #0
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc42:	d01c      	beq.n	800dc7e <__gethex+0x3fe>
 800dc44:	3201      	adds	r2, #1
 800dc46:	6002      	str	r2, [r0, #0]
 800dc48:	2f02      	cmp	r7, #2
 800dc4a:	f104 0314 	add.w	r3, r4, #20
 800dc4e:	d13f      	bne.n	800dcd0 <__gethex+0x450>
 800dc50:	f8d8 2000 	ldr.w	r2, [r8]
 800dc54:	3a01      	subs	r2, #1
 800dc56:	42b2      	cmp	r2, r6
 800dc58:	d10a      	bne.n	800dc70 <__gethex+0x3f0>
 800dc5a:	1171      	asrs	r1, r6, #5
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc62:	f006 061f 	and.w	r6, r6, #31
 800dc66:	fa02 f606 	lsl.w	r6, r2, r6
 800dc6a:	421e      	tst	r6, r3
 800dc6c:	bf18      	it	ne
 800dc6e:	4617      	movne	r7, r2
 800dc70:	f047 0720 	orr.w	r7, r7, #32
 800dc74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc76:	601c      	str	r4, [r3, #0]
 800dc78:	9b04      	ldr	r3, [sp, #16]
 800dc7a:	601d      	str	r5, [r3, #0]
 800dc7c:	e695      	b.n	800d9aa <__gethex+0x12a>
 800dc7e:	4299      	cmp	r1, r3
 800dc80:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc84:	d8d8      	bhi.n	800dc38 <__gethex+0x3b8>
 800dc86:	68a3      	ldr	r3, [r4, #8]
 800dc88:	459b      	cmp	fp, r3
 800dc8a:	db19      	blt.n	800dcc0 <__gethex+0x440>
 800dc8c:	6861      	ldr	r1, [r4, #4]
 800dc8e:	ee18 0a10 	vmov	r0, s16
 800dc92:	3101      	adds	r1, #1
 800dc94:	f000 fa4a 	bl	800e12c <_Balloc>
 800dc98:	4681      	mov	r9, r0
 800dc9a:	b918      	cbnz	r0, 800dca4 <__gethex+0x424>
 800dc9c:	4b1a      	ldr	r3, [pc, #104]	; (800dd08 <__gethex+0x488>)
 800dc9e:	4602      	mov	r2, r0
 800dca0:	2184      	movs	r1, #132	; 0x84
 800dca2:	e6a8      	b.n	800d9f6 <__gethex+0x176>
 800dca4:	6922      	ldr	r2, [r4, #16]
 800dca6:	3202      	adds	r2, #2
 800dca8:	f104 010c 	add.w	r1, r4, #12
 800dcac:	0092      	lsls	r2, r2, #2
 800dcae:	300c      	adds	r0, #12
 800dcb0:	f000 fa22 	bl	800e0f8 <memcpy>
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	ee18 0a10 	vmov	r0, s16
 800dcba:	f000 fa77 	bl	800e1ac <_Bfree>
 800dcbe:	464c      	mov	r4, r9
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcc8:	6122      	str	r2, [r4, #16]
 800dcca:	2201      	movs	r2, #1
 800dccc:	615a      	str	r2, [r3, #20]
 800dcce:	e7bb      	b.n	800dc48 <__gethex+0x3c8>
 800dcd0:	6922      	ldr	r2, [r4, #16]
 800dcd2:	455a      	cmp	r2, fp
 800dcd4:	dd0b      	ble.n	800dcee <__gethex+0x46e>
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	4620      	mov	r0, r4
 800dcda:	f7ff fd69 	bl	800d7b0 <rshift>
 800dcde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dce2:	3501      	adds	r5, #1
 800dce4:	42ab      	cmp	r3, r5
 800dce6:	f6ff aed0 	blt.w	800da8a <__gethex+0x20a>
 800dcea:	2701      	movs	r7, #1
 800dcec:	e7c0      	b.n	800dc70 <__gethex+0x3f0>
 800dcee:	f016 061f 	ands.w	r6, r6, #31
 800dcf2:	d0fa      	beq.n	800dcea <__gethex+0x46a>
 800dcf4:	4453      	add	r3, sl
 800dcf6:	f1c6 0620 	rsb	r6, r6, #32
 800dcfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcfe:	f000 fb07 	bl	800e310 <__hi0bits>
 800dd02:	42b0      	cmp	r0, r6
 800dd04:	dbe7      	blt.n	800dcd6 <__gethex+0x456>
 800dd06:	e7f0      	b.n	800dcea <__gethex+0x46a>
 800dd08:	08011711 	.word	0x08011711

0800dd0c <L_shift>:
 800dd0c:	f1c2 0208 	rsb	r2, r2, #8
 800dd10:	0092      	lsls	r2, r2, #2
 800dd12:	b570      	push	{r4, r5, r6, lr}
 800dd14:	f1c2 0620 	rsb	r6, r2, #32
 800dd18:	6843      	ldr	r3, [r0, #4]
 800dd1a:	6804      	ldr	r4, [r0, #0]
 800dd1c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd20:	432c      	orrs	r4, r5
 800dd22:	40d3      	lsrs	r3, r2
 800dd24:	6004      	str	r4, [r0, #0]
 800dd26:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd2a:	4288      	cmp	r0, r1
 800dd2c:	d3f4      	bcc.n	800dd18 <L_shift+0xc>
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}

0800dd30 <__match>:
 800dd30:	b530      	push	{r4, r5, lr}
 800dd32:	6803      	ldr	r3, [r0, #0]
 800dd34:	3301      	adds	r3, #1
 800dd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd3a:	b914      	cbnz	r4, 800dd42 <__match+0x12>
 800dd3c:	6003      	str	r3, [r0, #0]
 800dd3e:	2001      	movs	r0, #1
 800dd40:	bd30      	pop	{r4, r5, pc}
 800dd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd4a:	2d19      	cmp	r5, #25
 800dd4c:	bf98      	it	ls
 800dd4e:	3220      	addls	r2, #32
 800dd50:	42a2      	cmp	r2, r4
 800dd52:	d0f0      	beq.n	800dd36 <__match+0x6>
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7f3      	b.n	800dd40 <__match+0x10>

0800dd58 <__hexnan>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	680b      	ldr	r3, [r1, #0]
 800dd5e:	115e      	asrs	r6, r3, #5
 800dd60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd64:	f013 031f 	ands.w	r3, r3, #31
 800dd68:	b087      	sub	sp, #28
 800dd6a:	bf18      	it	ne
 800dd6c:	3604      	addne	r6, #4
 800dd6e:	2500      	movs	r5, #0
 800dd70:	1f37      	subs	r7, r6, #4
 800dd72:	4690      	mov	r8, r2
 800dd74:	6802      	ldr	r2, [r0, #0]
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	4682      	mov	sl, r0
 800dd7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd7e:	46b9      	mov	r9, r7
 800dd80:	463c      	mov	r4, r7
 800dd82:	9502      	str	r5, [sp, #8]
 800dd84:	46ab      	mov	fp, r5
 800dd86:	7851      	ldrb	r1, [r2, #1]
 800dd88:	1c53      	adds	r3, r2, #1
 800dd8a:	9303      	str	r3, [sp, #12]
 800dd8c:	b341      	cbz	r1, 800dde0 <__hexnan+0x88>
 800dd8e:	4608      	mov	r0, r1
 800dd90:	9205      	str	r2, [sp, #20]
 800dd92:	9104      	str	r1, [sp, #16]
 800dd94:	f7ff fd5e 	bl	800d854 <__hexdig_fun>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d14f      	bne.n	800de3c <__hexnan+0xe4>
 800dd9c:	9904      	ldr	r1, [sp, #16]
 800dd9e:	9a05      	ldr	r2, [sp, #20]
 800dda0:	2920      	cmp	r1, #32
 800dda2:	d818      	bhi.n	800ddd6 <__hexnan+0x7e>
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	459b      	cmp	fp, r3
 800dda8:	dd13      	ble.n	800ddd2 <__hexnan+0x7a>
 800ddaa:	454c      	cmp	r4, r9
 800ddac:	d206      	bcs.n	800ddbc <__hexnan+0x64>
 800ddae:	2d07      	cmp	r5, #7
 800ddb0:	dc04      	bgt.n	800ddbc <__hexnan+0x64>
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4649      	mov	r1, r9
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f7ff ffa8 	bl	800dd0c <L_shift>
 800ddbc:	4544      	cmp	r4, r8
 800ddbe:	d950      	bls.n	800de62 <__hexnan+0x10a>
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	f1a4 0904 	sub.w	r9, r4, #4
 800ddc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddca:	f8cd b008 	str.w	fp, [sp, #8]
 800ddce:	464c      	mov	r4, r9
 800ddd0:	461d      	mov	r5, r3
 800ddd2:	9a03      	ldr	r2, [sp, #12]
 800ddd4:	e7d7      	b.n	800dd86 <__hexnan+0x2e>
 800ddd6:	2929      	cmp	r1, #41	; 0x29
 800ddd8:	d156      	bne.n	800de88 <__hexnan+0x130>
 800ddda:	3202      	adds	r2, #2
 800dddc:	f8ca 2000 	str.w	r2, [sl]
 800dde0:	f1bb 0f00 	cmp.w	fp, #0
 800dde4:	d050      	beq.n	800de88 <__hexnan+0x130>
 800dde6:	454c      	cmp	r4, r9
 800dde8:	d206      	bcs.n	800ddf8 <__hexnan+0xa0>
 800ddea:	2d07      	cmp	r5, #7
 800ddec:	dc04      	bgt.n	800ddf8 <__hexnan+0xa0>
 800ddee:	462a      	mov	r2, r5
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7ff ff8a 	bl	800dd0c <L_shift>
 800ddf8:	4544      	cmp	r4, r8
 800ddfa:	d934      	bls.n	800de66 <__hexnan+0x10e>
 800ddfc:	f1a8 0204 	sub.w	r2, r8, #4
 800de00:	4623      	mov	r3, r4
 800de02:	f853 1b04 	ldr.w	r1, [r3], #4
 800de06:	f842 1f04 	str.w	r1, [r2, #4]!
 800de0a:	429f      	cmp	r7, r3
 800de0c:	d2f9      	bcs.n	800de02 <__hexnan+0xaa>
 800de0e:	1b3b      	subs	r3, r7, r4
 800de10:	f023 0303 	bic.w	r3, r3, #3
 800de14:	3304      	adds	r3, #4
 800de16:	3401      	adds	r4, #1
 800de18:	3e03      	subs	r6, #3
 800de1a:	42b4      	cmp	r4, r6
 800de1c:	bf88      	it	hi
 800de1e:	2304      	movhi	r3, #4
 800de20:	4443      	add	r3, r8
 800de22:	2200      	movs	r2, #0
 800de24:	f843 2b04 	str.w	r2, [r3], #4
 800de28:	429f      	cmp	r7, r3
 800de2a:	d2fb      	bcs.n	800de24 <__hexnan+0xcc>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	b91b      	cbnz	r3, 800de38 <__hexnan+0xe0>
 800de30:	4547      	cmp	r7, r8
 800de32:	d127      	bne.n	800de84 <__hexnan+0x12c>
 800de34:	2301      	movs	r3, #1
 800de36:	603b      	str	r3, [r7, #0]
 800de38:	2005      	movs	r0, #5
 800de3a:	e026      	b.n	800de8a <__hexnan+0x132>
 800de3c:	3501      	adds	r5, #1
 800de3e:	2d08      	cmp	r5, #8
 800de40:	f10b 0b01 	add.w	fp, fp, #1
 800de44:	dd06      	ble.n	800de54 <__hexnan+0xfc>
 800de46:	4544      	cmp	r4, r8
 800de48:	d9c3      	bls.n	800ddd2 <__hexnan+0x7a>
 800de4a:	2300      	movs	r3, #0
 800de4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800de50:	2501      	movs	r5, #1
 800de52:	3c04      	subs	r4, #4
 800de54:	6822      	ldr	r2, [r4, #0]
 800de56:	f000 000f 	and.w	r0, r0, #15
 800de5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de5e:	6022      	str	r2, [r4, #0]
 800de60:	e7b7      	b.n	800ddd2 <__hexnan+0x7a>
 800de62:	2508      	movs	r5, #8
 800de64:	e7b5      	b.n	800ddd2 <__hexnan+0x7a>
 800de66:	9b01      	ldr	r3, [sp, #4]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d0df      	beq.n	800de2c <__hexnan+0xd4>
 800de6c:	f04f 32ff 	mov.w	r2, #4294967295
 800de70:	f1c3 0320 	rsb	r3, r3, #32
 800de74:	fa22 f303 	lsr.w	r3, r2, r3
 800de78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de7c:	401a      	ands	r2, r3
 800de7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800de82:	e7d3      	b.n	800de2c <__hexnan+0xd4>
 800de84:	3f04      	subs	r7, #4
 800de86:	e7d1      	b.n	800de2c <__hexnan+0xd4>
 800de88:	2004      	movs	r0, #4
 800de8a:	b007      	add	sp, #28
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de90 <_findenv_r>:
 800de90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800df04 <_findenv_r+0x74>
 800de98:	4607      	mov	r7, r0
 800de9a:	4689      	mov	r9, r1
 800de9c:	4616      	mov	r6, r2
 800de9e:	f001 fddd 	bl	800fa5c <__env_lock>
 800dea2:	f8da 4000 	ldr.w	r4, [sl]
 800dea6:	b134      	cbz	r4, 800deb6 <_findenv_r+0x26>
 800dea8:	464b      	mov	r3, r9
 800deaa:	4698      	mov	r8, r3
 800deac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800deb0:	b13a      	cbz	r2, 800dec2 <_findenv_r+0x32>
 800deb2:	2a3d      	cmp	r2, #61	; 0x3d
 800deb4:	d1f9      	bne.n	800deaa <_findenv_r+0x1a>
 800deb6:	4638      	mov	r0, r7
 800deb8:	f001 fdd6 	bl	800fa68 <__env_unlock>
 800debc:	2000      	movs	r0, #0
 800debe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec2:	eba8 0809 	sub.w	r8, r8, r9
 800dec6:	46a3      	mov	fp, r4
 800dec8:	f854 0b04 	ldr.w	r0, [r4], #4
 800decc:	2800      	cmp	r0, #0
 800dece:	d0f2      	beq.n	800deb6 <_findenv_r+0x26>
 800ded0:	4642      	mov	r2, r8
 800ded2:	4649      	mov	r1, r9
 800ded4:	f7fd fc87 	bl	800b7e6 <strncmp>
 800ded8:	2800      	cmp	r0, #0
 800deda:	d1f4      	bne.n	800dec6 <_findenv_r+0x36>
 800dedc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800dee0:	eb03 0508 	add.w	r5, r3, r8
 800dee4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800dee8:	2b3d      	cmp	r3, #61	; 0x3d
 800deea:	d1ec      	bne.n	800dec6 <_findenv_r+0x36>
 800deec:	f8da 3000 	ldr.w	r3, [sl]
 800def0:	ebab 0303 	sub.w	r3, fp, r3
 800def4:	109b      	asrs	r3, r3, #2
 800def6:	4638      	mov	r0, r7
 800def8:	6033      	str	r3, [r6, #0]
 800defa:	f001 fdb5 	bl	800fa68 <__env_unlock>
 800defe:	1c68      	adds	r0, r5, #1
 800df00:	e7dd      	b.n	800debe <_findenv_r+0x2e>
 800df02:	bf00      	nop
 800df04:	20000100 	.word	0x20000100

0800df08 <_getenv_r>:
 800df08:	b507      	push	{r0, r1, r2, lr}
 800df0a:	aa01      	add	r2, sp, #4
 800df0c:	f7ff ffc0 	bl	800de90 <_findenv_r>
 800df10:	b003      	add	sp, #12
 800df12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800df18 <_gettimeofday_r>:
 800df18:	b538      	push	{r3, r4, r5, lr}
 800df1a:	4d07      	ldr	r5, [pc, #28]	; (800df38 <_gettimeofday_r+0x20>)
 800df1c:	2300      	movs	r3, #0
 800df1e:	4604      	mov	r4, r0
 800df20:	4608      	mov	r0, r1
 800df22:	4611      	mov	r1, r2
 800df24:	602b      	str	r3, [r5, #0]
 800df26:	f003 f8c5 	bl	80110b4 <_gettimeofday>
 800df2a:	1c43      	adds	r3, r0, #1
 800df2c:	d102      	bne.n	800df34 <_gettimeofday_r+0x1c>
 800df2e:	682b      	ldr	r3, [r5, #0]
 800df30:	b103      	cbz	r3, 800df34 <_gettimeofday_r+0x1c>
 800df32:	6023      	str	r3, [r4, #0]
 800df34:	bd38      	pop	{r3, r4, r5, pc}
 800df36:	bf00      	nop
 800df38:	20000b00 	.word	0x20000b00

0800df3c <__gettzinfo>:
 800df3c:	4800      	ldr	r0, [pc, #0]	; (800df40 <__gettzinfo+0x4>)
 800df3e:	4770      	bx	lr
 800df40:	20000180 	.word	0x20000180

0800df44 <gmtime_r>:
 800df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df48:	e9d0 6700 	ldrd	r6, r7, [r0]
 800df4c:	460c      	mov	r4, r1
 800df4e:	4a4f      	ldr	r2, [pc, #316]	; (800e08c <gmtime_r+0x148>)
 800df50:	2300      	movs	r3, #0
 800df52:	4630      	mov	r0, r6
 800df54:	4639      	mov	r1, r7
 800df56:	f7f2 fea1 	bl	8000c9c <__aeabi_ldivmod>
 800df5a:	4639      	mov	r1, r7
 800df5c:	4605      	mov	r5, r0
 800df5e:	4a4b      	ldr	r2, [pc, #300]	; (800e08c <gmtime_r+0x148>)
 800df60:	4630      	mov	r0, r6
 800df62:	2300      	movs	r3, #0
 800df64:	f7f2 fe9a 	bl	8000c9c <__aeabi_ldivmod>
 800df68:	2a00      	cmp	r2, #0
 800df6a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800df6e:	bfb7      	itett	lt
 800df70:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800df74:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800df78:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800df7c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800df80:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800df84:	fbb2 f1f0 	udiv	r1, r2, r0
 800df88:	fb00 2211 	mls	r2, r0, r1, r2
 800df8c:	203c      	movs	r0, #60	; 0x3c
 800df8e:	60a1      	str	r1, [r4, #8]
 800df90:	fbb2 f1f0 	udiv	r1, r2, r0
 800df94:	fb00 2211 	mls	r2, r0, r1, r2
 800df98:	6061      	str	r1, [r4, #4]
 800df9a:	6022      	str	r2, [r4, #0]
 800df9c:	2107      	movs	r1, #7
 800df9e:	1cda      	adds	r2, r3, #3
 800dfa0:	fb92 f1f1 	sdiv	r1, r2, r1
 800dfa4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800dfa8:	1a52      	subs	r2, r2, r1
 800dfaa:	bf48      	it	mi
 800dfac:	3207      	addmi	r2, #7
 800dfae:	4d38      	ldr	r5, [pc, #224]	; (800e090 <gmtime_r+0x14c>)
 800dfb0:	4838      	ldr	r0, [pc, #224]	; (800e094 <gmtime_r+0x150>)
 800dfb2:	61a2      	str	r2, [r4, #24]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	bfb7      	itett	lt
 800dfb8:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800dfbc:	fb93 f5f5 	sdivge	r5, r3, r5
 800dfc0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800dfc4:	fb92 f5f5 	sdivlt	r5, r2, r5
 800dfc8:	fb00 3005 	mla	r0, r0, r5, r3
 800dfcc:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800dfd0:	fbb0 f2f2 	udiv	r2, r0, r2
 800dfd4:	4402      	add	r2, r0
 800dfd6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800dfda:	fbb0 f1f3 	udiv	r1, r0, r3
 800dfde:	1a52      	subs	r2, r2, r1
 800dfe0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800dfe4:	492c      	ldr	r1, [pc, #176]	; (800e098 <gmtime_r+0x154>)
 800dfe6:	fbb0 f1f1 	udiv	r1, r0, r1
 800dfea:	2764      	movs	r7, #100	; 0x64
 800dfec:	1a52      	subs	r2, r2, r1
 800dfee:	fbb2 f1fc 	udiv	r1, r2, ip
 800dff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff6:	fbb1 f6f7 	udiv	r6, r1, r7
 800dffa:	1af3      	subs	r3, r6, r3
 800dffc:	4403      	add	r3, r0
 800dffe:	fb0c 3311 	mls	r3, ip, r1, r3
 800e002:	2299      	movs	r2, #153	; 0x99
 800e004:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800e008:	f10e 0e02 	add.w	lr, lr, #2
 800e00c:	f103 0c01 	add.w	ip, r3, #1
 800e010:	fbbe f0f2 	udiv	r0, lr, r2
 800e014:	4342      	muls	r2, r0
 800e016:	3202      	adds	r2, #2
 800e018:	f04f 0805 	mov.w	r8, #5
 800e01c:	fbb2 f2f8 	udiv	r2, r2, r8
 800e020:	ebac 0c02 	sub.w	ip, ip, r2
 800e024:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800e028:	4596      	cmp	lr, r2
 800e02a:	bf94      	ite	ls
 800e02c:	2202      	movls	r2, #2
 800e02e:	f06f 0209 	mvnhi.w	r2, #9
 800e032:	4410      	add	r0, r2
 800e034:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e038:	fb02 1505 	mla	r5, r2, r5, r1
 800e03c:	2801      	cmp	r0, #1
 800e03e:	bf98      	it	ls
 800e040:	3501      	addls	r5, #1
 800e042:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800e046:	d30d      	bcc.n	800e064 <gmtime_r+0x120>
 800e048:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e04c:	61e3      	str	r3, [r4, #28]
 800e04e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800e052:	2300      	movs	r3, #0
 800e054:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800e058:	f8c4 c00c 	str.w	ip, [r4, #12]
 800e05c:	6223      	str	r3, [r4, #32]
 800e05e:	4620      	mov	r0, r4
 800e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e064:	078a      	lsls	r2, r1, #30
 800e066:	d102      	bne.n	800e06e <gmtime_r+0x12a>
 800e068:	fb07 1616 	mls	r6, r7, r6, r1
 800e06c:	b95e      	cbnz	r6, 800e086 <gmtime_r+0x142>
 800e06e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e072:	fbb1 f6f2 	udiv	r6, r1, r2
 800e076:	fb02 1216 	mls	r2, r2, r6, r1
 800e07a:	fab2 f282 	clz	r2, r2
 800e07e:	0952      	lsrs	r2, r2, #5
 800e080:	333b      	adds	r3, #59	; 0x3b
 800e082:	4413      	add	r3, r2
 800e084:	e7e2      	b.n	800e04c <gmtime_r+0x108>
 800e086:	2201      	movs	r2, #1
 800e088:	e7fa      	b.n	800e080 <gmtime_r+0x13c>
 800e08a:	bf00      	nop
 800e08c:	00015180 	.word	0x00015180
 800e090:	00023ab1 	.word	0x00023ab1
 800e094:	fffdc54f 	.word	0xfffdc54f
 800e098:	00023ab0 	.word	0x00023ab0

0800e09c <_localeconv_r>:
 800e09c:	4800      	ldr	r0, [pc, #0]	; (800e0a0 <_localeconv_r+0x4>)
 800e09e:	4770      	bx	lr
 800e0a0:	200002cc 	.word	0x200002cc

0800e0a4 <__retarget_lock_init_recursive>:
 800e0a4:	4770      	bx	lr

0800e0a6 <__retarget_lock_acquire>:
 800e0a6:	4770      	bx	lr

0800e0a8 <__retarget_lock_acquire_recursive>:
 800e0a8:	4770      	bx	lr

0800e0aa <__retarget_lock_release>:
 800e0aa:	4770      	bx	lr

0800e0ac <__retarget_lock_release_recursive>:
 800e0ac:	4770      	bx	lr
	...

0800e0b0 <_lseek_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d07      	ldr	r5, [pc, #28]	; (800e0d0 <_lseek_r+0x20>)
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	4608      	mov	r0, r1
 800e0b8:	4611      	mov	r1, r2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	602a      	str	r2, [r5, #0]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f7f5 fca2 	bl	8003a08 <_lseek>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_lseek_r+0x1e>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_lseek_r+0x1e>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	20000b00 	.word	0x20000b00

0800e0d4 <__ascii_mbtowc>:
 800e0d4:	b082      	sub	sp, #8
 800e0d6:	b901      	cbnz	r1, 800e0da <__ascii_mbtowc+0x6>
 800e0d8:	a901      	add	r1, sp, #4
 800e0da:	b142      	cbz	r2, 800e0ee <__ascii_mbtowc+0x1a>
 800e0dc:	b14b      	cbz	r3, 800e0f2 <__ascii_mbtowc+0x1e>
 800e0de:	7813      	ldrb	r3, [r2, #0]
 800e0e0:	600b      	str	r3, [r1, #0]
 800e0e2:	7812      	ldrb	r2, [r2, #0]
 800e0e4:	1e10      	subs	r0, r2, #0
 800e0e6:	bf18      	it	ne
 800e0e8:	2001      	movne	r0, #1
 800e0ea:	b002      	add	sp, #8
 800e0ec:	4770      	bx	lr
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	e7fb      	b.n	800e0ea <__ascii_mbtowc+0x16>
 800e0f2:	f06f 0001 	mvn.w	r0, #1
 800e0f6:	e7f8      	b.n	800e0ea <__ascii_mbtowc+0x16>

0800e0f8 <memcpy>:
 800e0f8:	440a      	add	r2, r1
 800e0fa:	4291      	cmp	r1, r2
 800e0fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e100:	d100      	bne.n	800e104 <memcpy+0xc>
 800e102:	4770      	bx	lr
 800e104:	b510      	push	{r4, lr}
 800e106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e10e:	4291      	cmp	r1, r2
 800e110:	d1f9      	bne.n	800e106 <memcpy+0xe>
 800e112:	bd10      	pop	{r4, pc}

0800e114 <__malloc_lock>:
 800e114:	4801      	ldr	r0, [pc, #4]	; (800e11c <__malloc_lock+0x8>)
 800e116:	f7ff bfc7 	b.w	800e0a8 <__retarget_lock_acquire_recursive>
 800e11a:	bf00      	nop
 800e11c:	20000af9 	.word	0x20000af9

0800e120 <__malloc_unlock>:
 800e120:	4801      	ldr	r0, [pc, #4]	; (800e128 <__malloc_unlock+0x8>)
 800e122:	f7ff bfc3 	b.w	800e0ac <__retarget_lock_release_recursive>
 800e126:	bf00      	nop
 800e128:	20000af9 	.word	0x20000af9

0800e12c <_Balloc>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e130:	4604      	mov	r4, r0
 800e132:	460d      	mov	r5, r1
 800e134:	b976      	cbnz	r6, 800e154 <_Balloc+0x28>
 800e136:	2010      	movs	r0, #16
 800e138:	f7fc fb3c 	bl	800a7b4 <malloc>
 800e13c:	4602      	mov	r2, r0
 800e13e:	6260      	str	r0, [r4, #36]	; 0x24
 800e140:	b920      	cbnz	r0, 800e14c <_Balloc+0x20>
 800e142:	4b18      	ldr	r3, [pc, #96]	; (800e1a4 <_Balloc+0x78>)
 800e144:	4818      	ldr	r0, [pc, #96]	; (800e1a8 <_Balloc+0x7c>)
 800e146:	2166      	movs	r1, #102	; 0x66
 800e148:	f7fe fc76 	bl	800ca38 <__assert_func>
 800e14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e150:	6006      	str	r6, [r0, #0]
 800e152:	60c6      	str	r6, [r0, #12]
 800e154:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e156:	68f3      	ldr	r3, [r6, #12]
 800e158:	b183      	cbz	r3, 800e17c <_Balloc+0x50>
 800e15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e15c:	68db      	ldr	r3, [r3, #12]
 800e15e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e162:	b9b8      	cbnz	r0, 800e194 <_Balloc+0x68>
 800e164:	2101      	movs	r1, #1
 800e166:	fa01 f605 	lsl.w	r6, r1, r5
 800e16a:	1d72      	adds	r2, r6, #5
 800e16c:	0092      	lsls	r2, r2, #2
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fc9d 	bl	800eaae <_calloc_r>
 800e174:	b160      	cbz	r0, 800e190 <_Balloc+0x64>
 800e176:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e17a:	e00e      	b.n	800e19a <_Balloc+0x6e>
 800e17c:	2221      	movs	r2, #33	; 0x21
 800e17e:	2104      	movs	r1, #4
 800e180:	4620      	mov	r0, r4
 800e182:	f000 fc94 	bl	800eaae <_calloc_r>
 800e186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e188:	60f0      	str	r0, [r6, #12]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d1e4      	bne.n	800e15a <_Balloc+0x2e>
 800e190:	2000      	movs	r0, #0
 800e192:	bd70      	pop	{r4, r5, r6, pc}
 800e194:	6802      	ldr	r2, [r0, #0]
 800e196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e19a:	2300      	movs	r3, #0
 800e19c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1a0:	e7f7      	b.n	800e192 <_Balloc+0x66>
 800e1a2:	bf00      	nop
 800e1a4:	080113d4 	.word	0x080113d4
 800e1a8:	0801179c 	.word	0x0801179c

0800e1ac <_Bfree>:
 800e1ac:	b570      	push	{r4, r5, r6, lr}
 800e1ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	460c      	mov	r4, r1
 800e1b4:	b976      	cbnz	r6, 800e1d4 <_Bfree+0x28>
 800e1b6:	2010      	movs	r0, #16
 800e1b8:	f7fc fafc 	bl	800a7b4 <malloc>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	6268      	str	r0, [r5, #36]	; 0x24
 800e1c0:	b920      	cbnz	r0, 800e1cc <_Bfree+0x20>
 800e1c2:	4b09      	ldr	r3, [pc, #36]	; (800e1e8 <_Bfree+0x3c>)
 800e1c4:	4809      	ldr	r0, [pc, #36]	; (800e1ec <_Bfree+0x40>)
 800e1c6:	218a      	movs	r1, #138	; 0x8a
 800e1c8:	f7fe fc36 	bl	800ca38 <__assert_func>
 800e1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1d0:	6006      	str	r6, [r0, #0]
 800e1d2:	60c6      	str	r6, [r0, #12]
 800e1d4:	b13c      	cbz	r4, 800e1e6 <_Bfree+0x3a>
 800e1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1d8:	6862      	ldr	r2, [r4, #4]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1e0:	6021      	str	r1, [r4, #0]
 800e1e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	080113d4 	.word	0x080113d4
 800e1ec:	0801179c 	.word	0x0801179c

0800e1f0 <__multadd>:
 800e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f4:	690d      	ldr	r5, [r1, #16]
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	461e      	mov	r6, r3
 800e1fc:	f101 0c14 	add.w	ip, r1, #20
 800e200:	2000      	movs	r0, #0
 800e202:	f8dc 3000 	ldr.w	r3, [ip]
 800e206:	b299      	uxth	r1, r3
 800e208:	fb02 6101 	mla	r1, r2, r1, r6
 800e20c:	0c1e      	lsrs	r6, r3, #16
 800e20e:	0c0b      	lsrs	r3, r1, #16
 800e210:	fb02 3306 	mla	r3, r2, r6, r3
 800e214:	b289      	uxth	r1, r1
 800e216:	3001      	adds	r0, #1
 800e218:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e21c:	4285      	cmp	r5, r0
 800e21e:	f84c 1b04 	str.w	r1, [ip], #4
 800e222:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e226:	dcec      	bgt.n	800e202 <__multadd+0x12>
 800e228:	b30e      	cbz	r6, 800e26e <__multadd+0x7e>
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	42ab      	cmp	r3, r5
 800e22e:	dc19      	bgt.n	800e264 <__multadd+0x74>
 800e230:	6861      	ldr	r1, [r4, #4]
 800e232:	4638      	mov	r0, r7
 800e234:	3101      	adds	r1, #1
 800e236:	f7ff ff79 	bl	800e12c <_Balloc>
 800e23a:	4680      	mov	r8, r0
 800e23c:	b928      	cbnz	r0, 800e24a <__multadd+0x5a>
 800e23e:	4602      	mov	r2, r0
 800e240:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <__multadd+0x84>)
 800e242:	480d      	ldr	r0, [pc, #52]	; (800e278 <__multadd+0x88>)
 800e244:	21b5      	movs	r1, #181	; 0xb5
 800e246:	f7fe fbf7 	bl	800ca38 <__assert_func>
 800e24a:	6922      	ldr	r2, [r4, #16]
 800e24c:	3202      	adds	r2, #2
 800e24e:	f104 010c 	add.w	r1, r4, #12
 800e252:	0092      	lsls	r2, r2, #2
 800e254:	300c      	adds	r0, #12
 800e256:	f7ff ff4f 	bl	800e0f8 <memcpy>
 800e25a:	4621      	mov	r1, r4
 800e25c:	4638      	mov	r0, r7
 800e25e:	f7ff ffa5 	bl	800e1ac <_Bfree>
 800e262:	4644      	mov	r4, r8
 800e264:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e268:	3501      	adds	r5, #1
 800e26a:	615e      	str	r6, [r3, #20]
 800e26c:	6125      	str	r5, [r4, #16]
 800e26e:	4620      	mov	r0, r4
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	08011711 	.word	0x08011711
 800e278:	0801179c 	.word	0x0801179c

0800e27c <__s2b>:
 800e27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e280:	460c      	mov	r4, r1
 800e282:	4615      	mov	r5, r2
 800e284:	461f      	mov	r7, r3
 800e286:	2209      	movs	r2, #9
 800e288:	3308      	adds	r3, #8
 800e28a:	4606      	mov	r6, r0
 800e28c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e290:	2100      	movs	r1, #0
 800e292:	2201      	movs	r2, #1
 800e294:	429a      	cmp	r2, r3
 800e296:	db09      	blt.n	800e2ac <__s2b+0x30>
 800e298:	4630      	mov	r0, r6
 800e29a:	f7ff ff47 	bl	800e12c <_Balloc>
 800e29e:	b940      	cbnz	r0, 800e2b2 <__s2b+0x36>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	4b19      	ldr	r3, [pc, #100]	; (800e308 <__s2b+0x8c>)
 800e2a4:	4819      	ldr	r0, [pc, #100]	; (800e30c <__s2b+0x90>)
 800e2a6:	21ce      	movs	r1, #206	; 0xce
 800e2a8:	f7fe fbc6 	bl	800ca38 <__assert_func>
 800e2ac:	0052      	lsls	r2, r2, #1
 800e2ae:	3101      	adds	r1, #1
 800e2b0:	e7f0      	b.n	800e294 <__s2b+0x18>
 800e2b2:	9b08      	ldr	r3, [sp, #32]
 800e2b4:	6143      	str	r3, [r0, #20]
 800e2b6:	2d09      	cmp	r5, #9
 800e2b8:	f04f 0301 	mov.w	r3, #1
 800e2bc:	6103      	str	r3, [r0, #16]
 800e2be:	dd16      	ble.n	800e2ee <__s2b+0x72>
 800e2c0:	f104 0909 	add.w	r9, r4, #9
 800e2c4:	46c8      	mov	r8, r9
 800e2c6:	442c      	add	r4, r5
 800e2c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2cc:	4601      	mov	r1, r0
 800e2ce:	3b30      	subs	r3, #48	; 0x30
 800e2d0:	220a      	movs	r2, #10
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	f7ff ff8c 	bl	800e1f0 <__multadd>
 800e2d8:	45a0      	cmp	r8, r4
 800e2da:	d1f5      	bne.n	800e2c8 <__s2b+0x4c>
 800e2dc:	f1a5 0408 	sub.w	r4, r5, #8
 800e2e0:	444c      	add	r4, r9
 800e2e2:	1b2d      	subs	r5, r5, r4
 800e2e4:	1963      	adds	r3, r4, r5
 800e2e6:	42bb      	cmp	r3, r7
 800e2e8:	db04      	blt.n	800e2f4 <__s2b+0x78>
 800e2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2ee:	340a      	adds	r4, #10
 800e2f0:	2509      	movs	r5, #9
 800e2f2:	e7f6      	b.n	800e2e2 <__s2b+0x66>
 800e2f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e2f8:	4601      	mov	r1, r0
 800e2fa:	3b30      	subs	r3, #48	; 0x30
 800e2fc:	220a      	movs	r2, #10
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff ff76 	bl	800e1f0 <__multadd>
 800e304:	e7ee      	b.n	800e2e4 <__s2b+0x68>
 800e306:	bf00      	nop
 800e308:	08011711 	.word	0x08011711
 800e30c:	0801179c 	.word	0x0801179c

0800e310 <__hi0bits>:
 800e310:	0c03      	lsrs	r3, r0, #16
 800e312:	041b      	lsls	r3, r3, #16
 800e314:	b9d3      	cbnz	r3, 800e34c <__hi0bits+0x3c>
 800e316:	0400      	lsls	r0, r0, #16
 800e318:	2310      	movs	r3, #16
 800e31a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e31e:	bf04      	itt	eq
 800e320:	0200      	lsleq	r0, r0, #8
 800e322:	3308      	addeq	r3, #8
 800e324:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e328:	bf04      	itt	eq
 800e32a:	0100      	lsleq	r0, r0, #4
 800e32c:	3304      	addeq	r3, #4
 800e32e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e332:	bf04      	itt	eq
 800e334:	0080      	lsleq	r0, r0, #2
 800e336:	3302      	addeq	r3, #2
 800e338:	2800      	cmp	r0, #0
 800e33a:	db05      	blt.n	800e348 <__hi0bits+0x38>
 800e33c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e340:	f103 0301 	add.w	r3, r3, #1
 800e344:	bf08      	it	eq
 800e346:	2320      	moveq	r3, #32
 800e348:	4618      	mov	r0, r3
 800e34a:	4770      	bx	lr
 800e34c:	2300      	movs	r3, #0
 800e34e:	e7e4      	b.n	800e31a <__hi0bits+0xa>

0800e350 <__lo0bits>:
 800e350:	6803      	ldr	r3, [r0, #0]
 800e352:	f013 0207 	ands.w	r2, r3, #7
 800e356:	4601      	mov	r1, r0
 800e358:	d00b      	beq.n	800e372 <__lo0bits+0x22>
 800e35a:	07da      	lsls	r2, r3, #31
 800e35c:	d423      	bmi.n	800e3a6 <__lo0bits+0x56>
 800e35e:	0798      	lsls	r0, r3, #30
 800e360:	bf49      	itett	mi
 800e362:	085b      	lsrmi	r3, r3, #1
 800e364:	089b      	lsrpl	r3, r3, #2
 800e366:	2001      	movmi	r0, #1
 800e368:	600b      	strmi	r3, [r1, #0]
 800e36a:	bf5c      	itt	pl
 800e36c:	600b      	strpl	r3, [r1, #0]
 800e36e:	2002      	movpl	r0, #2
 800e370:	4770      	bx	lr
 800e372:	b298      	uxth	r0, r3
 800e374:	b9a8      	cbnz	r0, 800e3a2 <__lo0bits+0x52>
 800e376:	0c1b      	lsrs	r3, r3, #16
 800e378:	2010      	movs	r0, #16
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	b90a      	cbnz	r2, 800e382 <__lo0bits+0x32>
 800e37e:	3008      	adds	r0, #8
 800e380:	0a1b      	lsrs	r3, r3, #8
 800e382:	071a      	lsls	r2, r3, #28
 800e384:	bf04      	itt	eq
 800e386:	091b      	lsreq	r3, r3, #4
 800e388:	3004      	addeq	r0, #4
 800e38a:	079a      	lsls	r2, r3, #30
 800e38c:	bf04      	itt	eq
 800e38e:	089b      	lsreq	r3, r3, #2
 800e390:	3002      	addeq	r0, #2
 800e392:	07da      	lsls	r2, r3, #31
 800e394:	d403      	bmi.n	800e39e <__lo0bits+0x4e>
 800e396:	085b      	lsrs	r3, r3, #1
 800e398:	f100 0001 	add.w	r0, r0, #1
 800e39c:	d005      	beq.n	800e3aa <__lo0bits+0x5a>
 800e39e:	600b      	str	r3, [r1, #0]
 800e3a0:	4770      	bx	lr
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	e7e9      	b.n	800e37a <__lo0bits+0x2a>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	4770      	bx	lr
 800e3aa:	2020      	movs	r0, #32
 800e3ac:	4770      	bx	lr
	...

0800e3b0 <__i2b>:
 800e3b0:	b510      	push	{r4, lr}
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	f7ff feb9 	bl	800e12c <_Balloc>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	b928      	cbnz	r0, 800e3ca <__i2b+0x1a>
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <__i2b+0x24>)
 800e3c0:	4805      	ldr	r0, [pc, #20]	; (800e3d8 <__i2b+0x28>)
 800e3c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3c6:	f7fe fb37 	bl	800ca38 <__assert_func>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	6144      	str	r4, [r0, #20]
 800e3ce:	6103      	str	r3, [r0, #16]
 800e3d0:	bd10      	pop	{r4, pc}
 800e3d2:	bf00      	nop
 800e3d4:	08011711 	.word	0x08011711
 800e3d8:	0801179c 	.word	0x0801179c

0800e3dc <__multiply>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	4691      	mov	r9, r2
 800e3e2:	690a      	ldr	r2, [r1, #16]
 800e3e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	bfb8      	it	lt
 800e3ec:	460b      	movlt	r3, r1
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	bfbc      	itt	lt
 800e3f2:	464c      	movlt	r4, r9
 800e3f4:	4699      	movlt	r9, r3
 800e3f6:	6927      	ldr	r7, [r4, #16]
 800e3f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3fc:	68a3      	ldr	r3, [r4, #8]
 800e3fe:	6861      	ldr	r1, [r4, #4]
 800e400:	eb07 060a 	add.w	r6, r7, sl
 800e404:	42b3      	cmp	r3, r6
 800e406:	b085      	sub	sp, #20
 800e408:	bfb8      	it	lt
 800e40a:	3101      	addlt	r1, #1
 800e40c:	f7ff fe8e 	bl	800e12c <_Balloc>
 800e410:	b930      	cbnz	r0, 800e420 <__multiply+0x44>
 800e412:	4602      	mov	r2, r0
 800e414:	4b44      	ldr	r3, [pc, #272]	; (800e528 <__multiply+0x14c>)
 800e416:	4845      	ldr	r0, [pc, #276]	; (800e52c <__multiply+0x150>)
 800e418:	f240 115d 	movw	r1, #349	; 0x15d
 800e41c:	f7fe fb0c 	bl	800ca38 <__assert_func>
 800e420:	f100 0514 	add.w	r5, r0, #20
 800e424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e428:	462b      	mov	r3, r5
 800e42a:	2200      	movs	r2, #0
 800e42c:	4543      	cmp	r3, r8
 800e42e:	d321      	bcc.n	800e474 <__multiply+0x98>
 800e430:	f104 0314 	add.w	r3, r4, #20
 800e434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e438:	f109 0314 	add.w	r3, r9, #20
 800e43c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e440:	9202      	str	r2, [sp, #8]
 800e442:	1b3a      	subs	r2, r7, r4
 800e444:	3a15      	subs	r2, #21
 800e446:	f022 0203 	bic.w	r2, r2, #3
 800e44a:	3204      	adds	r2, #4
 800e44c:	f104 0115 	add.w	r1, r4, #21
 800e450:	428f      	cmp	r7, r1
 800e452:	bf38      	it	cc
 800e454:	2204      	movcc	r2, #4
 800e456:	9201      	str	r2, [sp, #4]
 800e458:	9a02      	ldr	r2, [sp, #8]
 800e45a:	9303      	str	r3, [sp, #12]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d80c      	bhi.n	800e47a <__multiply+0x9e>
 800e460:	2e00      	cmp	r6, #0
 800e462:	dd03      	ble.n	800e46c <__multiply+0x90>
 800e464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d05a      	beq.n	800e522 <__multiply+0x146>
 800e46c:	6106      	str	r6, [r0, #16]
 800e46e:	b005      	add	sp, #20
 800e470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e474:	f843 2b04 	str.w	r2, [r3], #4
 800e478:	e7d8      	b.n	800e42c <__multiply+0x50>
 800e47a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e47e:	f1ba 0f00 	cmp.w	sl, #0
 800e482:	d024      	beq.n	800e4ce <__multiply+0xf2>
 800e484:	f104 0e14 	add.w	lr, r4, #20
 800e488:	46a9      	mov	r9, r5
 800e48a:	f04f 0c00 	mov.w	ip, #0
 800e48e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e492:	f8d9 1000 	ldr.w	r1, [r9]
 800e496:	fa1f fb82 	uxth.w	fp, r2
 800e49a:	b289      	uxth	r1, r1
 800e49c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e4a4:	f8d9 2000 	ldr.w	r2, [r9]
 800e4a8:	4461      	add	r1, ip
 800e4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800e4b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4b6:	b289      	uxth	r1, r1
 800e4b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4bc:	4577      	cmp	r7, lr
 800e4be:	f849 1b04 	str.w	r1, [r9], #4
 800e4c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4c6:	d8e2      	bhi.n	800e48e <__multiply+0xb2>
 800e4c8:	9a01      	ldr	r2, [sp, #4]
 800e4ca:	f845 c002 	str.w	ip, [r5, r2]
 800e4ce:	9a03      	ldr	r2, [sp, #12]
 800e4d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4d4:	3304      	adds	r3, #4
 800e4d6:	f1b9 0f00 	cmp.w	r9, #0
 800e4da:	d020      	beq.n	800e51e <__multiply+0x142>
 800e4dc:	6829      	ldr	r1, [r5, #0]
 800e4de:	f104 0c14 	add.w	ip, r4, #20
 800e4e2:	46ae      	mov	lr, r5
 800e4e4:	f04f 0a00 	mov.w	sl, #0
 800e4e8:	f8bc b000 	ldrh.w	fp, [ip]
 800e4ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e4f0:	fb09 220b 	mla	r2, r9, fp, r2
 800e4f4:	4492      	add	sl, r2
 800e4f6:	b289      	uxth	r1, r1
 800e4f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e4fc:	f84e 1b04 	str.w	r1, [lr], #4
 800e500:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e504:	f8be 1000 	ldrh.w	r1, [lr]
 800e508:	0c12      	lsrs	r2, r2, #16
 800e50a:	fb09 1102 	mla	r1, r9, r2, r1
 800e50e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e512:	4567      	cmp	r7, ip
 800e514:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e518:	d8e6      	bhi.n	800e4e8 <__multiply+0x10c>
 800e51a:	9a01      	ldr	r2, [sp, #4]
 800e51c:	50a9      	str	r1, [r5, r2]
 800e51e:	3504      	adds	r5, #4
 800e520:	e79a      	b.n	800e458 <__multiply+0x7c>
 800e522:	3e01      	subs	r6, #1
 800e524:	e79c      	b.n	800e460 <__multiply+0x84>
 800e526:	bf00      	nop
 800e528:	08011711 	.word	0x08011711
 800e52c:	0801179c 	.word	0x0801179c

0800e530 <__pow5mult>:
 800e530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e534:	4615      	mov	r5, r2
 800e536:	f012 0203 	ands.w	r2, r2, #3
 800e53a:	4606      	mov	r6, r0
 800e53c:	460f      	mov	r7, r1
 800e53e:	d007      	beq.n	800e550 <__pow5mult+0x20>
 800e540:	4c25      	ldr	r4, [pc, #148]	; (800e5d8 <__pow5mult+0xa8>)
 800e542:	3a01      	subs	r2, #1
 800e544:	2300      	movs	r3, #0
 800e546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e54a:	f7ff fe51 	bl	800e1f0 <__multadd>
 800e54e:	4607      	mov	r7, r0
 800e550:	10ad      	asrs	r5, r5, #2
 800e552:	d03d      	beq.n	800e5d0 <__pow5mult+0xa0>
 800e554:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e556:	b97c      	cbnz	r4, 800e578 <__pow5mult+0x48>
 800e558:	2010      	movs	r0, #16
 800e55a:	f7fc f92b 	bl	800a7b4 <malloc>
 800e55e:	4602      	mov	r2, r0
 800e560:	6270      	str	r0, [r6, #36]	; 0x24
 800e562:	b928      	cbnz	r0, 800e570 <__pow5mult+0x40>
 800e564:	4b1d      	ldr	r3, [pc, #116]	; (800e5dc <__pow5mult+0xac>)
 800e566:	481e      	ldr	r0, [pc, #120]	; (800e5e0 <__pow5mult+0xb0>)
 800e568:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e56c:	f7fe fa64 	bl	800ca38 <__assert_func>
 800e570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e574:	6004      	str	r4, [r0, #0]
 800e576:	60c4      	str	r4, [r0, #12]
 800e578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e57c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e580:	b94c      	cbnz	r4, 800e596 <__pow5mult+0x66>
 800e582:	f240 2171 	movw	r1, #625	; 0x271
 800e586:	4630      	mov	r0, r6
 800e588:	f7ff ff12 	bl	800e3b0 <__i2b>
 800e58c:	2300      	movs	r3, #0
 800e58e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e592:	4604      	mov	r4, r0
 800e594:	6003      	str	r3, [r0, #0]
 800e596:	f04f 0900 	mov.w	r9, #0
 800e59a:	07eb      	lsls	r3, r5, #31
 800e59c:	d50a      	bpl.n	800e5b4 <__pow5mult+0x84>
 800e59e:	4639      	mov	r1, r7
 800e5a0:	4622      	mov	r2, r4
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7ff ff1a 	bl	800e3dc <__multiply>
 800e5a8:	4639      	mov	r1, r7
 800e5aa:	4680      	mov	r8, r0
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f7ff fdfd 	bl	800e1ac <_Bfree>
 800e5b2:	4647      	mov	r7, r8
 800e5b4:	106d      	asrs	r5, r5, #1
 800e5b6:	d00b      	beq.n	800e5d0 <__pow5mult+0xa0>
 800e5b8:	6820      	ldr	r0, [r4, #0]
 800e5ba:	b938      	cbnz	r0, 800e5cc <__pow5mult+0x9c>
 800e5bc:	4622      	mov	r2, r4
 800e5be:	4621      	mov	r1, r4
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7ff ff0b 	bl	800e3dc <__multiply>
 800e5c6:	6020      	str	r0, [r4, #0]
 800e5c8:	f8c0 9000 	str.w	r9, [r0]
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e7e4      	b.n	800e59a <__pow5mult+0x6a>
 800e5d0:	4638      	mov	r0, r7
 800e5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5d6:	bf00      	nop
 800e5d8:	080118e8 	.word	0x080118e8
 800e5dc:	080113d4 	.word	0x080113d4
 800e5e0:	0801179c 	.word	0x0801179c

0800e5e4 <__lshift>:
 800e5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	6849      	ldr	r1, [r1, #4]
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5f2:	68a3      	ldr	r3, [r4, #8]
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	4691      	mov	r9, r2
 800e5f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5fc:	f108 0601 	add.w	r6, r8, #1
 800e600:	42b3      	cmp	r3, r6
 800e602:	db0b      	blt.n	800e61c <__lshift+0x38>
 800e604:	4638      	mov	r0, r7
 800e606:	f7ff fd91 	bl	800e12c <_Balloc>
 800e60a:	4605      	mov	r5, r0
 800e60c:	b948      	cbnz	r0, 800e622 <__lshift+0x3e>
 800e60e:	4602      	mov	r2, r0
 800e610:	4b2a      	ldr	r3, [pc, #168]	; (800e6bc <__lshift+0xd8>)
 800e612:	482b      	ldr	r0, [pc, #172]	; (800e6c0 <__lshift+0xdc>)
 800e614:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e618:	f7fe fa0e 	bl	800ca38 <__assert_func>
 800e61c:	3101      	adds	r1, #1
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	e7ee      	b.n	800e600 <__lshift+0x1c>
 800e622:	2300      	movs	r3, #0
 800e624:	f100 0114 	add.w	r1, r0, #20
 800e628:	f100 0210 	add.w	r2, r0, #16
 800e62c:	4618      	mov	r0, r3
 800e62e:	4553      	cmp	r3, sl
 800e630:	db37      	blt.n	800e6a2 <__lshift+0xbe>
 800e632:	6920      	ldr	r0, [r4, #16]
 800e634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e638:	f104 0314 	add.w	r3, r4, #20
 800e63c:	f019 091f 	ands.w	r9, r9, #31
 800e640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e644:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e648:	d02f      	beq.n	800e6aa <__lshift+0xc6>
 800e64a:	f1c9 0e20 	rsb	lr, r9, #32
 800e64e:	468a      	mov	sl, r1
 800e650:	f04f 0c00 	mov.w	ip, #0
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	fa02 f209 	lsl.w	r2, r2, r9
 800e65a:	ea42 020c 	orr.w	r2, r2, ip
 800e65e:	f84a 2b04 	str.w	r2, [sl], #4
 800e662:	f853 2b04 	ldr.w	r2, [r3], #4
 800e666:	4298      	cmp	r0, r3
 800e668:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e66c:	d8f2      	bhi.n	800e654 <__lshift+0x70>
 800e66e:	1b03      	subs	r3, r0, r4
 800e670:	3b15      	subs	r3, #21
 800e672:	f023 0303 	bic.w	r3, r3, #3
 800e676:	3304      	adds	r3, #4
 800e678:	f104 0215 	add.w	r2, r4, #21
 800e67c:	4290      	cmp	r0, r2
 800e67e:	bf38      	it	cc
 800e680:	2304      	movcc	r3, #4
 800e682:	f841 c003 	str.w	ip, [r1, r3]
 800e686:	f1bc 0f00 	cmp.w	ip, #0
 800e68a:	d001      	beq.n	800e690 <__lshift+0xac>
 800e68c:	f108 0602 	add.w	r6, r8, #2
 800e690:	3e01      	subs	r6, #1
 800e692:	4638      	mov	r0, r7
 800e694:	612e      	str	r6, [r5, #16]
 800e696:	4621      	mov	r1, r4
 800e698:	f7ff fd88 	bl	800e1ac <_Bfree>
 800e69c:	4628      	mov	r0, r5
 800e69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	e7c1      	b.n	800e62e <__lshift+0x4a>
 800e6aa:	3904      	subs	r1, #4
 800e6ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6b4:	4298      	cmp	r0, r3
 800e6b6:	d8f9      	bhi.n	800e6ac <__lshift+0xc8>
 800e6b8:	e7ea      	b.n	800e690 <__lshift+0xac>
 800e6ba:	bf00      	nop
 800e6bc:	08011711 	.word	0x08011711
 800e6c0:	0801179c 	.word	0x0801179c

0800e6c4 <__mcmp>:
 800e6c4:	b530      	push	{r4, r5, lr}
 800e6c6:	6902      	ldr	r2, [r0, #16]
 800e6c8:	690c      	ldr	r4, [r1, #16]
 800e6ca:	1b12      	subs	r2, r2, r4
 800e6cc:	d10e      	bne.n	800e6ec <__mcmp+0x28>
 800e6ce:	f100 0314 	add.w	r3, r0, #20
 800e6d2:	3114      	adds	r1, #20
 800e6d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6e4:	42a5      	cmp	r5, r4
 800e6e6:	d003      	beq.n	800e6f0 <__mcmp+0x2c>
 800e6e8:	d305      	bcc.n	800e6f6 <__mcmp+0x32>
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4610      	mov	r0, r2
 800e6ee:	bd30      	pop	{r4, r5, pc}
 800e6f0:	4283      	cmp	r3, r0
 800e6f2:	d3f3      	bcc.n	800e6dc <__mcmp+0x18>
 800e6f4:	e7fa      	b.n	800e6ec <__mcmp+0x28>
 800e6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6fa:	e7f7      	b.n	800e6ec <__mcmp+0x28>

0800e6fc <__mdiff>:
 800e6fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e700:	460c      	mov	r4, r1
 800e702:	4606      	mov	r6, r0
 800e704:	4611      	mov	r1, r2
 800e706:	4620      	mov	r0, r4
 800e708:	4690      	mov	r8, r2
 800e70a:	f7ff ffdb 	bl	800e6c4 <__mcmp>
 800e70e:	1e05      	subs	r5, r0, #0
 800e710:	d110      	bne.n	800e734 <__mdiff+0x38>
 800e712:	4629      	mov	r1, r5
 800e714:	4630      	mov	r0, r6
 800e716:	f7ff fd09 	bl	800e12c <_Balloc>
 800e71a:	b930      	cbnz	r0, 800e72a <__mdiff+0x2e>
 800e71c:	4b3a      	ldr	r3, [pc, #232]	; (800e808 <__mdiff+0x10c>)
 800e71e:	4602      	mov	r2, r0
 800e720:	f240 2132 	movw	r1, #562	; 0x232
 800e724:	4839      	ldr	r0, [pc, #228]	; (800e80c <__mdiff+0x110>)
 800e726:	f7fe f987 	bl	800ca38 <__assert_func>
 800e72a:	2301      	movs	r3, #1
 800e72c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	bfa4      	itt	ge
 800e736:	4643      	movge	r3, r8
 800e738:	46a0      	movge	r8, r4
 800e73a:	4630      	mov	r0, r6
 800e73c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e740:	bfa6      	itte	ge
 800e742:	461c      	movge	r4, r3
 800e744:	2500      	movge	r5, #0
 800e746:	2501      	movlt	r5, #1
 800e748:	f7ff fcf0 	bl	800e12c <_Balloc>
 800e74c:	b920      	cbnz	r0, 800e758 <__mdiff+0x5c>
 800e74e:	4b2e      	ldr	r3, [pc, #184]	; (800e808 <__mdiff+0x10c>)
 800e750:	4602      	mov	r2, r0
 800e752:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e756:	e7e5      	b.n	800e724 <__mdiff+0x28>
 800e758:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e75c:	6926      	ldr	r6, [r4, #16]
 800e75e:	60c5      	str	r5, [r0, #12]
 800e760:	f104 0914 	add.w	r9, r4, #20
 800e764:	f108 0514 	add.w	r5, r8, #20
 800e768:	f100 0e14 	add.w	lr, r0, #20
 800e76c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e770:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e774:	f108 0210 	add.w	r2, r8, #16
 800e778:	46f2      	mov	sl, lr
 800e77a:	2100      	movs	r1, #0
 800e77c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e780:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e784:	fa1f f883 	uxth.w	r8, r3
 800e788:	fa11 f18b 	uxtah	r1, r1, fp
 800e78c:	0c1b      	lsrs	r3, r3, #16
 800e78e:	eba1 0808 	sub.w	r8, r1, r8
 800e792:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e796:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e79a:	fa1f f888 	uxth.w	r8, r8
 800e79e:	1419      	asrs	r1, r3, #16
 800e7a0:	454e      	cmp	r6, r9
 800e7a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7a6:	f84a 3b04 	str.w	r3, [sl], #4
 800e7aa:	d8e7      	bhi.n	800e77c <__mdiff+0x80>
 800e7ac:	1b33      	subs	r3, r6, r4
 800e7ae:	3b15      	subs	r3, #21
 800e7b0:	f023 0303 	bic.w	r3, r3, #3
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	3415      	adds	r4, #21
 800e7b8:	42a6      	cmp	r6, r4
 800e7ba:	bf38      	it	cc
 800e7bc:	2304      	movcc	r3, #4
 800e7be:	441d      	add	r5, r3
 800e7c0:	4473      	add	r3, lr
 800e7c2:	469e      	mov	lr, r3
 800e7c4:	462e      	mov	r6, r5
 800e7c6:	4566      	cmp	r6, ip
 800e7c8:	d30e      	bcc.n	800e7e8 <__mdiff+0xec>
 800e7ca:	f10c 0203 	add.w	r2, ip, #3
 800e7ce:	1b52      	subs	r2, r2, r5
 800e7d0:	f022 0203 	bic.w	r2, r2, #3
 800e7d4:	3d03      	subs	r5, #3
 800e7d6:	45ac      	cmp	ip, r5
 800e7d8:	bf38      	it	cc
 800e7da:	2200      	movcc	r2, #0
 800e7dc:	441a      	add	r2, r3
 800e7de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e7e2:	b17b      	cbz	r3, 800e804 <__mdiff+0x108>
 800e7e4:	6107      	str	r7, [r0, #16]
 800e7e6:	e7a3      	b.n	800e730 <__mdiff+0x34>
 800e7e8:	f856 8b04 	ldr.w	r8, [r6], #4
 800e7ec:	fa11 f288 	uxtah	r2, r1, r8
 800e7f0:	1414      	asrs	r4, r2, #16
 800e7f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7f6:	b292      	uxth	r2, r2
 800e7f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e7fc:	f84e 2b04 	str.w	r2, [lr], #4
 800e800:	1421      	asrs	r1, r4, #16
 800e802:	e7e0      	b.n	800e7c6 <__mdiff+0xca>
 800e804:	3f01      	subs	r7, #1
 800e806:	e7ea      	b.n	800e7de <__mdiff+0xe2>
 800e808:	08011711 	.word	0x08011711
 800e80c:	0801179c 	.word	0x0801179c

0800e810 <__ulp>:
 800e810:	b082      	sub	sp, #8
 800e812:	ed8d 0b00 	vstr	d0, [sp]
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	4912      	ldr	r1, [pc, #72]	; (800e864 <__ulp+0x54>)
 800e81a:	4019      	ands	r1, r3
 800e81c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e820:	2900      	cmp	r1, #0
 800e822:	dd05      	ble.n	800e830 <__ulp+0x20>
 800e824:	2200      	movs	r2, #0
 800e826:	460b      	mov	r3, r1
 800e828:	ec43 2b10 	vmov	d0, r2, r3
 800e82c:	b002      	add	sp, #8
 800e82e:	4770      	bx	lr
 800e830:	4249      	negs	r1, r1
 800e832:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e836:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e83a:	f04f 0200 	mov.w	r2, #0
 800e83e:	f04f 0300 	mov.w	r3, #0
 800e842:	da04      	bge.n	800e84e <__ulp+0x3e>
 800e844:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e848:	fa41 f300 	asr.w	r3, r1, r0
 800e84c:	e7ec      	b.n	800e828 <__ulp+0x18>
 800e84e:	f1a0 0114 	sub.w	r1, r0, #20
 800e852:	291e      	cmp	r1, #30
 800e854:	bfda      	itte	le
 800e856:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e85a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e85e:	2101      	movgt	r1, #1
 800e860:	460a      	mov	r2, r1
 800e862:	e7e1      	b.n	800e828 <__ulp+0x18>
 800e864:	7ff00000 	.word	0x7ff00000

0800e868 <__b2d>:
 800e868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86a:	6905      	ldr	r5, [r0, #16]
 800e86c:	f100 0714 	add.w	r7, r0, #20
 800e870:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e874:	1f2e      	subs	r6, r5, #4
 800e876:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f7ff fd48 	bl	800e310 <__hi0bits>
 800e880:	f1c0 0320 	rsb	r3, r0, #32
 800e884:	280a      	cmp	r0, #10
 800e886:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e904 <__b2d+0x9c>
 800e88a:	600b      	str	r3, [r1, #0]
 800e88c:	dc14      	bgt.n	800e8b8 <__b2d+0x50>
 800e88e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e892:	fa24 f10e 	lsr.w	r1, r4, lr
 800e896:	42b7      	cmp	r7, r6
 800e898:	ea41 030c 	orr.w	r3, r1, ip
 800e89c:	bf34      	ite	cc
 800e89e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8a2:	2100      	movcs	r1, #0
 800e8a4:	3015      	adds	r0, #21
 800e8a6:	fa04 f000 	lsl.w	r0, r4, r0
 800e8aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800e8ae:	ea40 0201 	orr.w	r2, r0, r1
 800e8b2:	ec43 2b10 	vmov	d0, r2, r3
 800e8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8b8:	42b7      	cmp	r7, r6
 800e8ba:	bf3a      	itte	cc
 800e8bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e8c4:	2100      	movcs	r1, #0
 800e8c6:	380b      	subs	r0, #11
 800e8c8:	d017      	beq.n	800e8fa <__b2d+0x92>
 800e8ca:	f1c0 0c20 	rsb	ip, r0, #32
 800e8ce:	fa04 f500 	lsl.w	r5, r4, r0
 800e8d2:	42be      	cmp	r6, r7
 800e8d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e8d8:	ea45 0504 	orr.w	r5, r5, r4
 800e8dc:	bf8c      	ite	hi
 800e8de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e8e2:	2400      	movls	r4, #0
 800e8e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e8e8:	fa01 f000 	lsl.w	r0, r1, r0
 800e8ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800e8f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e8f4:	ea40 0204 	orr.w	r2, r0, r4
 800e8f8:	e7db      	b.n	800e8b2 <__b2d+0x4a>
 800e8fa:	ea44 030c 	orr.w	r3, r4, ip
 800e8fe:	460a      	mov	r2, r1
 800e900:	e7d7      	b.n	800e8b2 <__b2d+0x4a>
 800e902:	bf00      	nop
 800e904:	3ff00000 	.word	0x3ff00000

0800e908 <__d2b>:
 800e908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e90c:	4689      	mov	r9, r1
 800e90e:	2101      	movs	r1, #1
 800e910:	ec57 6b10 	vmov	r6, r7, d0
 800e914:	4690      	mov	r8, r2
 800e916:	f7ff fc09 	bl	800e12c <_Balloc>
 800e91a:	4604      	mov	r4, r0
 800e91c:	b930      	cbnz	r0, 800e92c <__d2b+0x24>
 800e91e:	4602      	mov	r2, r0
 800e920:	4b25      	ldr	r3, [pc, #148]	; (800e9b8 <__d2b+0xb0>)
 800e922:	4826      	ldr	r0, [pc, #152]	; (800e9bc <__d2b+0xb4>)
 800e924:	f240 310a 	movw	r1, #778	; 0x30a
 800e928:	f7fe f886 	bl	800ca38 <__assert_func>
 800e92c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e934:	bb35      	cbnz	r5, 800e984 <__d2b+0x7c>
 800e936:	2e00      	cmp	r6, #0
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	d028      	beq.n	800e98e <__d2b+0x86>
 800e93c:	4668      	mov	r0, sp
 800e93e:	9600      	str	r6, [sp, #0]
 800e940:	f7ff fd06 	bl	800e350 <__lo0bits>
 800e944:	9900      	ldr	r1, [sp, #0]
 800e946:	b300      	cbz	r0, 800e98a <__d2b+0x82>
 800e948:	9a01      	ldr	r2, [sp, #4]
 800e94a:	f1c0 0320 	rsb	r3, r0, #32
 800e94e:	fa02 f303 	lsl.w	r3, r2, r3
 800e952:	430b      	orrs	r3, r1
 800e954:	40c2      	lsrs	r2, r0
 800e956:	6163      	str	r3, [r4, #20]
 800e958:	9201      	str	r2, [sp, #4]
 800e95a:	9b01      	ldr	r3, [sp, #4]
 800e95c:	61a3      	str	r3, [r4, #24]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	bf14      	ite	ne
 800e962:	2202      	movne	r2, #2
 800e964:	2201      	moveq	r2, #1
 800e966:	6122      	str	r2, [r4, #16]
 800e968:	b1d5      	cbz	r5, 800e9a0 <__d2b+0x98>
 800e96a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e96e:	4405      	add	r5, r0
 800e970:	f8c9 5000 	str.w	r5, [r9]
 800e974:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e978:	f8c8 0000 	str.w	r0, [r8]
 800e97c:	4620      	mov	r0, r4
 800e97e:	b003      	add	sp, #12
 800e980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e984:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e988:	e7d5      	b.n	800e936 <__d2b+0x2e>
 800e98a:	6161      	str	r1, [r4, #20]
 800e98c:	e7e5      	b.n	800e95a <__d2b+0x52>
 800e98e:	a801      	add	r0, sp, #4
 800e990:	f7ff fcde 	bl	800e350 <__lo0bits>
 800e994:	9b01      	ldr	r3, [sp, #4]
 800e996:	6163      	str	r3, [r4, #20]
 800e998:	2201      	movs	r2, #1
 800e99a:	6122      	str	r2, [r4, #16]
 800e99c:	3020      	adds	r0, #32
 800e99e:	e7e3      	b.n	800e968 <__d2b+0x60>
 800e9a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9a8:	f8c9 0000 	str.w	r0, [r9]
 800e9ac:	6918      	ldr	r0, [r3, #16]
 800e9ae:	f7ff fcaf 	bl	800e310 <__hi0bits>
 800e9b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9b6:	e7df      	b.n	800e978 <__d2b+0x70>
 800e9b8:	08011711 	.word	0x08011711
 800e9bc:	0801179c 	.word	0x0801179c

0800e9c0 <__ratio>:
 800e9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c4:	4688      	mov	r8, r1
 800e9c6:	4669      	mov	r1, sp
 800e9c8:	4681      	mov	r9, r0
 800e9ca:	f7ff ff4d 	bl	800e868 <__b2d>
 800e9ce:	a901      	add	r1, sp, #4
 800e9d0:	4640      	mov	r0, r8
 800e9d2:	ec55 4b10 	vmov	r4, r5, d0
 800e9d6:	f7ff ff47 	bl	800e868 <__b2d>
 800e9da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9e2:	eba3 0c02 	sub.w	ip, r3, r2
 800e9e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e9ea:	1a9b      	subs	r3, r3, r2
 800e9ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e9f0:	ec51 0b10 	vmov	r0, r1, d0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	bfd6      	itet	le
 800e9f8:	460a      	movle	r2, r1
 800e9fa:	462a      	movgt	r2, r5
 800e9fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea00:	468b      	mov	fp, r1
 800ea02:	462f      	mov	r7, r5
 800ea04:	bfd4      	ite	le
 800ea06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ea0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea0e:	4620      	mov	r0, r4
 800ea10:	ee10 2a10 	vmov	r2, s0
 800ea14:	465b      	mov	r3, fp
 800ea16:	4639      	mov	r1, r7
 800ea18:	f7f1 ff22 	bl	8000860 <__aeabi_ddiv>
 800ea1c:	ec41 0b10 	vmov	d0, r0, r1
 800ea20:	b003      	add	sp, #12
 800ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea26 <__copybits>:
 800ea26:	3901      	subs	r1, #1
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	1149      	asrs	r1, r1, #5
 800ea2c:	6914      	ldr	r4, [r2, #16]
 800ea2e:	3101      	adds	r1, #1
 800ea30:	f102 0314 	add.w	r3, r2, #20
 800ea34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea3c:	1f05      	subs	r5, r0, #4
 800ea3e:	42a3      	cmp	r3, r4
 800ea40:	d30c      	bcc.n	800ea5c <__copybits+0x36>
 800ea42:	1aa3      	subs	r3, r4, r2
 800ea44:	3b11      	subs	r3, #17
 800ea46:	f023 0303 	bic.w	r3, r3, #3
 800ea4a:	3211      	adds	r2, #17
 800ea4c:	42a2      	cmp	r2, r4
 800ea4e:	bf88      	it	hi
 800ea50:	2300      	movhi	r3, #0
 800ea52:	4418      	add	r0, r3
 800ea54:	2300      	movs	r3, #0
 800ea56:	4288      	cmp	r0, r1
 800ea58:	d305      	bcc.n	800ea66 <__copybits+0x40>
 800ea5a:	bd70      	pop	{r4, r5, r6, pc}
 800ea5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea60:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea64:	e7eb      	b.n	800ea3e <__copybits+0x18>
 800ea66:	f840 3b04 	str.w	r3, [r0], #4
 800ea6a:	e7f4      	b.n	800ea56 <__copybits+0x30>

0800ea6c <__any_on>:
 800ea6c:	f100 0214 	add.w	r2, r0, #20
 800ea70:	6900      	ldr	r0, [r0, #16]
 800ea72:	114b      	asrs	r3, r1, #5
 800ea74:	4298      	cmp	r0, r3
 800ea76:	b510      	push	{r4, lr}
 800ea78:	db11      	blt.n	800ea9e <__any_on+0x32>
 800ea7a:	dd0a      	ble.n	800ea92 <__any_on+0x26>
 800ea7c:	f011 011f 	ands.w	r1, r1, #31
 800ea80:	d007      	beq.n	800ea92 <__any_on+0x26>
 800ea82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea86:	fa24 f001 	lsr.w	r0, r4, r1
 800ea8a:	fa00 f101 	lsl.w	r1, r0, r1
 800ea8e:	428c      	cmp	r4, r1
 800ea90:	d10b      	bne.n	800eaaa <__any_on+0x3e>
 800ea92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d803      	bhi.n	800eaa2 <__any_on+0x36>
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	bd10      	pop	{r4, pc}
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	e7f7      	b.n	800ea92 <__any_on+0x26>
 800eaa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eaa6:	2900      	cmp	r1, #0
 800eaa8:	d0f5      	beq.n	800ea96 <__any_on+0x2a>
 800eaaa:	2001      	movs	r0, #1
 800eaac:	e7f6      	b.n	800ea9c <__any_on+0x30>

0800eaae <_calloc_r>:
 800eaae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eab0:	fba1 2402 	umull	r2, r4, r1, r2
 800eab4:	b94c      	cbnz	r4, 800eaca <_calloc_r+0x1c>
 800eab6:	4611      	mov	r1, r2
 800eab8:	9201      	str	r2, [sp, #4]
 800eaba:	f7fb feff 	bl	800a8bc <_malloc_r>
 800eabe:	9a01      	ldr	r2, [sp, #4]
 800eac0:	4605      	mov	r5, r0
 800eac2:	b930      	cbnz	r0, 800ead2 <_calloc_r+0x24>
 800eac4:	4628      	mov	r0, r5
 800eac6:	b003      	add	sp, #12
 800eac8:	bd30      	pop	{r4, r5, pc}
 800eaca:	220c      	movs	r2, #12
 800eacc:	6002      	str	r2, [r0, #0]
 800eace:	2500      	movs	r5, #0
 800ead0:	e7f8      	b.n	800eac4 <_calloc_r+0x16>
 800ead2:	4621      	mov	r1, r4
 800ead4:	f7fb fe7e 	bl	800a7d4 <memset>
 800ead8:	e7f4      	b.n	800eac4 <_calloc_r+0x16>

0800eada <__ssputs_r>:
 800eada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eade:	688e      	ldr	r6, [r1, #8]
 800eae0:	429e      	cmp	r6, r3
 800eae2:	4682      	mov	sl, r0
 800eae4:	460c      	mov	r4, r1
 800eae6:	4690      	mov	r8, r2
 800eae8:	461f      	mov	r7, r3
 800eaea:	d838      	bhi.n	800eb5e <__ssputs_r+0x84>
 800eaec:	898a      	ldrh	r2, [r1, #12]
 800eaee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eaf2:	d032      	beq.n	800eb5a <__ssputs_r+0x80>
 800eaf4:	6825      	ldr	r5, [r4, #0]
 800eaf6:	6909      	ldr	r1, [r1, #16]
 800eaf8:	eba5 0901 	sub.w	r9, r5, r1
 800eafc:	6965      	ldr	r5, [r4, #20]
 800eafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb06:	3301      	adds	r3, #1
 800eb08:	444b      	add	r3, r9
 800eb0a:	106d      	asrs	r5, r5, #1
 800eb0c:	429d      	cmp	r5, r3
 800eb0e:	bf38      	it	cc
 800eb10:	461d      	movcc	r5, r3
 800eb12:	0553      	lsls	r3, r2, #21
 800eb14:	d531      	bpl.n	800eb7a <__ssputs_r+0xa0>
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7fb fed0 	bl	800a8bc <_malloc_r>
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	b950      	cbnz	r0, 800eb36 <__ssputs_r+0x5c>
 800eb20:	230c      	movs	r3, #12
 800eb22:	f8ca 3000 	str.w	r3, [sl]
 800eb26:	89a3      	ldrh	r3, [r4, #12]
 800eb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb2c:	81a3      	strh	r3, [r4, #12]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb36:	6921      	ldr	r1, [r4, #16]
 800eb38:	464a      	mov	r2, r9
 800eb3a:	f7ff fadd 	bl	800e0f8 <memcpy>
 800eb3e:	89a3      	ldrh	r3, [r4, #12]
 800eb40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb48:	81a3      	strh	r3, [r4, #12]
 800eb4a:	6126      	str	r6, [r4, #16]
 800eb4c:	6165      	str	r5, [r4, #20]
 800eb4e:	444e      	add	r6, r9
 800eb50:	eba5 0509 	sub.w	r5, r5, r9
 800eb54:	6026      	str	r6, [r4, #0]
 800eb56:	60a5      	str	r5, [r4, #8]
 800eb58:	463e      	mov	r6, r7
 800eb5a:	42be      	cmp	r6, r7
 800eb5c:	d900      	bls.n	800eb60 <__ssputs_r+0x86>
 800eb5e:	463e      	mov	r6, r7
 800eb60:	6820      	ldr	r0, [r4, #0]
 800eb62:	4632      	mov	r2, r6
 800eb64:	4641      	mov	r1, r8
 800eb66:	f001 f9a1 	bl	800feac <memmove>
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	1b9b      	subs	r3, r3, r6
 800eb6e:	60a3      	str	r3, [r4, #8]
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	4433      	add	r3, r6
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	2000      	movs	r0, #0
 800eb78:	e7db      	b.n	800eb32 <__ssputs_r+0x58>
 800eb7a:	462a      	mov	r2, r5
 800eb7c:	f001 f9b0 	bl	800fee0 <_realloc_r>
 800eb80:	4606      	mov	r6, r0
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d1e1      	bne.n	800eb4a <__ssputs_r+0x70>
 800eb86:	6921      	ldr	r1, [r4, #16]
 800eb88:	4650      	mov	r0, sl
 800eb8a:	f7fb fe2b 	bl	800a7e4 <_free_r>
 800eb8e:	e7c7      	b.n	800eb20 <__ssputs_r+0x46>

0800eb90 <_svfiprintf_r>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	4698      	mov	r8, r3
 800eb96:	898b      	ldrh	r3, [r1, #12]
 800eb98:	061b      	lsls	r3, r3, #24
 800eb9a:	b09d      	sub	sp, #116	; 0x74
 800eb9c:	4607      	mov	r7, r0
 800eb9e:	460d      	mov	r5, r1
 800eba0:	4614      	mov	r4, r2
 800eba2:	d50e      	bpl.n	800ebc2 <_svfiprintf_r+0x32>
 800eba4:	690b      	ldr	r3, [r1, #16]
 800eba6:	b963      	cbnz	r3, 800ebc2 <_svfiprintf_r+0x32>
 800eba8:	2140      	movs	r1, #64	; 0x40
 800ebaa:	f7fb fe87 	bl	800a8bc <_malloc_r>
 800ebae:	6028      	str	r0, [r5, #0]
 800ebb0:	6128      	str	r0, [r5, #16]
 800ebb2:	b920      	cbnz	r0, 800ebbe <_svfiprintf_r+0x2e>
 800ebb4:	230c      	movs	r3, #12
 800ebb6:	603b      	str	r3, [r7, #0]
 800ebb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebbc:	e0d1      	b.n	800ed62 <_svfiprintf_r+0x1d2>
 800ebbe:	2340      	movs	r3, #64	; 0x40
 800ebc0:	616b      	str	r3, [r5, #20]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc6:	2320      	movs	r3, #32
 800ebc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd0:	2330      	movs	r3, #48	; 0x30
 800ebd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed7c <_svfiprintf_r+0x1ec>
 800ebd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebda:	f04f 0901 	mov.w	r9, #1
 800ebde:	4623      	mov	r3, r4
 800ebe0:	469a      	mov	sl, r3
 800ebe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe6:	b10a      	cbz	r2, 800ebec <_svfiprintf_r+0x5c>
 800ebe8:	2a25      	cmp	r2, #37	; 0x25
 800ebea:	d1f9      	bne.n	800ebe0 <_svfiprintf_r+0x50>
 800ebec:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf0:	d00b      	beq.n	800ec0a <_svfiprintf_r+0x7a>
 800ebf2:	465b      	mov	r3, fp
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	f7ff ff6e 	bl	800eada <__ssputs_r>
 800ebfe:	3001      	adds	r0, #1
 800ec00:	f000 80aa 	beq.w	800ed58 <_svfiprintf_r+0x1c8>
 800ec04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec06:	445a      	add	r2, fp
 800ec08:	9209      	str	r2, [sp, #36]	; 0x24
 800ec0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	f000 80a2 	beq.w	800ed58 <_svfiprintf_r+0x1c8>
 800ec14:	2300      	movs	r3, #0
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec1e:	f10a 0a01 	add.w	sl, sl, #1
 800ec22:	9304      	str	r3, [sp, #16]
 800ec24:	9307      	str	r3, [sp, #28]
 800ec26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ec2c:	4654      	mov	r4, sl
 800ec2e:	2205      	movs	r2, #5
 800ec30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec34:	4851      	ldr	r0, [pc, #324]	; (800ed7c <_svfiprintf_r+0x1ec>)
 800ec36:	f7f1 fad3 	bl	80001e0 <memchr>
 800ec3a:	9a04      	ldr	r2, [sp, #16]
 800ec3c:	b9d8      	cbnz	r0, 800ec76 <_svfiprintf_r+0xe6>
 800ec3e:	06d0      	lsls	r0, r2, #27
 800ec40:	bf44      	itt	mi
 800ec42:	2320      	movmi	r3, #32
 800ec44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec48:	0711      	lsls	r1, r2, #28
 800ec4a:	bf44      	itt	mi
 800ec4c:	232b      	movmi	r3, #43	; 0x2b
 800ec4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec52:	f89a 3000 	ldrb.w	r3, [sl]
 800ec56:	2b2a      	cmp	r3, #42	; 0x2a
 800ec58:	d015      	beq.n	800ec86 <_svfiprintf_r+0xf6>
 800ec5a:	9a07      	ldr	r2, [sp, #28]
 800ec5c:	4654      	mov	r4, sl
 800ec5e:	2000      	movs	r0, #0
 800ec60:	f04f 0c0a 	mov.w	ip, #10
 800ec64:	4621      	mov	r1, r4
 800ec66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec6a:	3b30      	subs	r3, #48	; 0x30
 800ec6c:	2b09      	cmp	r3, #9
 800ec6e:	d94e      	bls.n	800ed0e <_svfiprintf_r+0x17e>
 800ec70:	b1b0      	cbz	r0, 800eca0 <_svfiprintf_r+0x110>
 800ec72:	9207      	str	r2, [sp, #28]
 800ec74:	e014      	b.n	800eca0 <_svfiprintf_r+0x110>
 800ec76:	eba0 0308 	sub.w	r3, r0, r8
 800ec7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	9304      	str	r3, [sp, #16]
 800ec82:	46a2      	mov	sl, r4
 800ec84:	e7d2      	b.n	800ec2c <_svfiprintf_r+0x9c>
 800ec86:	9b03      	ldr	r3, [sp, #12]
 800ec88:	1d19      	adds	r1, r3, #4
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	9103      	str	r1, [sp, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfbb      	ittet	lt
 800ec92:	425b      	neglt	r3, r3
 800ec94:	f042 0202 	orrlt.w	r2, r2, #2
 800ec98:	9307      	strge	r3, [sp, #28]
 800ec9a:	9307      	strlt	r3, [sp, #28]
 800ec9c:	bfb8      	it	lt
 800ec9e:	9204      	strlt	r2, [sp, #16]
 800eca0:	7823      	ldrb	r3, [r4, #0]
 800eca2:	2b2e      	cmp	r3, #46	; 0x2e
 800eca4:	d10c      	bne.n	800ecc0 <_svfiprintf_r+0x130>
 800eca6:	7863      	ldrb	r3, [r4, #1]
 800eca8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecaa:	d135      	bne.n	800ed18 <_svfiprintf_r+0x188>
 800ecac:	9b03      	ldr	r3, [sp, #12]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	9203      	str	r2, [sp, #12]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	bfb8      	it	lt
 800ecb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecbc:	3402      	adds	r4, #2
 800ecbe:	9305      	str	r3, [sp, #20]
 800ecc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed8c <_svfiprintf_r+0x1fc>
 800ecc4:	7821      	ldrb	r1, [r4, #0]
 800ecc6:	2203      	movs	r2, #3
 800ecc8:	4650      	mov	r0, sl
 800ecca:	f7f1 fa89 	bl	80001e0 <memchr>
 800ecce:	b140      	cbz	r0, 800ece2 <_svfiprintf_r+0x152>
 800ecd0:	2340      	movs	r3, #64	; 0x40
 800ecd2:	eba0 000a 	sub.w	r0, r0, sl
 800ecd6:	fa03 f000 	lsl.w	r0, r3, r0
 800ecda:	9b04      	ldr	r3, [sp, #16]
 800ecdc:	4303      	orrs	r3, r0
 800ecde:	3401      	adds	r4, #1
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece6:	4826      	ldr	r0, [pc, #152]	; (800ed80 <_svfiprintf_r+0x1f0>)
 800ece8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecec:	2206      	movs	r2, #6
 800ecee:	f7f1 fa77 	bl	80001e0 <memchr>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d038      	beq.n	800ed68 <_svfiprintf_r+0x1d8>
 800ecf6:	4b23      	ldr	r3, [pc, #140]	; (800ed84 <_svfiprintf_r+0x1f4>)
 800ecf8:	bb1b      	cbnz	r3, 800ed42 <_svfiprintf_r+0x1b2>
 800ecfa:	9b03      	ldr	r3, [sp, #12]
 800ecfc:	3307      	adds	r3, #7
 800ecfe:	f023 0307 	bic.w	r3, r3, #7
 800ed02:	3308      	adds	r3, #8
 800ed04:	9303      	str	r3, [sp, #12]
 800ed06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed08:	4433      	add	r3, r6
 800ed0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed0c:	e767      	b.n	800ebde <_svfiprintf_r+0x4e>
 800ed0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed12:	460c      	mov	r4, r1
 800ed14:	2001      	movs	r0, #1
 800ed16:	e7a5      	b.n	800ec64 <_svfiprintf_r+0xd4>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	3401      	adds	r4, #1
 800ed1c:	9305      	str	r3, [sp, #20]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	f04f 0c0a 	mov.w	ip, #10
 800ed24:	4620      	mov	r0, r4
 800ed26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed2a:	3a30      	subs	r2, #48	; 0x30
 800ed2c:	2a09      	cmp	r2, #9
 800ed2e:	d903      	bls.n	800ed38 <_svfiprintf_r+0x1a8>
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d0c5      	beq.n	800ecc0 <_svfiprintf_r+0x130>
 800ed34:	9105      	str	r1, [sp, #20]
 800ed36:	e7c3      	b.n	800ecc0 <_svfiprintf_r+0x130>
 800ed38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e7f0      	b.n	800ed24 <_svfiprintf_r+0x194>
 800ed42:	ab03      	add	r3, sp, #12
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	462a      	mov	r2, r5
 800ed48:	4b0f      	ldr	r3, [pc, #60]	; (800ed88 <_svfiprintf_r+0x1f8>)
 800ed4a:	a904      	add	r1, sp, #16
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	f7fb fec9 	bl	800aae4 <_printf_float>
 800ed52:	1c42      	adds	r2, r0, #1
 800ed54:	4606      	mov	r6, r0
 800ed56:	d1d6      	bne.n	800ed06 <_svfiprintf_r+0x176>
 800ed58:	89ab      	ldrh	r3, [r5, #12]
 800ed5a:	065b      	lsls	r3, r3, #25
 800ed5c:	f53f af2c 	bmi.w	800ebb8 <_svfiprintf_r+0x28>
 800ed60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed62:	b01d      	add	sp, #116	; 0x74
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	ab03      	add	r3, sp, #12
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	462a      	mov	r2, r5
 800ed6e:	4b06      	ldr	r3, [pc, #24]	; (800ed88 <_svfiprintf_r+0x1f8>)
 800ed70:	a904      	add	r1, sp, #16
 800ed72:	4638      	mov	r0, r7
 800ed74:	f7fc f95a 	bl	800b02c <_printf_i>
 800ed78:	e7eb      	b.n	800ed52 <_svfiprintf_r+0x1c2>
 800ed7a:	bf00      	nop
 800ed7c:	080118f4 	.word	0x080118f4
 800ed80:	080118fe 	.word	0x080118fe
 800ed84:	0800aae5 	.word	0x0800aae5
 800ed88:	0800eadb 	.word	0x0800eadb
 800ed8c:	080118fa 	.word	0x080118fa

0800ed90 <_sungetc_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	1c4b      	adds	r3, r1, #1
 800ed94:	4614      	mov	r4, r2
 800ed96:	d103      	bne.n	800eda0 <_sungetc_r+0x10>
 800ed98:	f04f 35ff 	mov.w	r5, #4294967295
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	8993      	ldrh	r3, [r2, #12]
 800eda2:	f023 0320 	bic.w	r3, r3, #32
 800eda6:	8193      	strh	r3, [r2, #12]
 800eda8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800edaa:	6852      	ldr	r2, [r2, #4]
 800edac:	b2cd      	uxtb	r5, r1
 800edae:	b18b      	cbz	r3, 800edd4 <_sungetc_r+0x44>
 800edb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800edb2:	4293      	cmp	r3, r2
 800edb4:	dd08      	ble.n	800edc8 <_sungetc_r+0x38>
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	1e5a      	subs	r2, r3, #1
 800edba:	6022      	str	r2, [r4, #0]
 800edbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800edc0:	6863      	ldr	r3, [r4, #4]
 800edc2:	3301      	adds	r3, #1
 800edc4:	6063      	str	r3, [r4, #4]
 800edc6:	e7e9      	b.n	800ed9c <_sungetc_r+0xc>
 800edc8:	4621      	mov	r1, r4
 800edca:	f000 fd37 	bl	800f83c <__submore>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d0f1      	beq.n	800edb6 <_sungetc_r+0x26>
 800edd2:	e7e1      	b.n	800ed98 <_sungetc_r+0x8>
 800edd4:	6921      	ldr	r1, [r4, #16]
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	b151      	cbz	r1, 800edf0 <_sungetc_r+0x60>
 800edda:	4299      	cmp	r1, r3
 800eddc:	d208      	bcs.n	800edf0 <_sungetc_r+0x60>
 800edde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ede2:	42a9      	cmp	r1, r5
 800ede4:	d104      	bne.n	800edf0 <_sungetc_r+0x60>
 800ede6:	3b01      	subs	r3, #1
 800ede8:	3201      	adds	r2, #1
 800edea:	6023      	str	r3, [r4, #0]
 800edec:	6062      	str	r2, [r4, #4]
 800edee:	e7d5      	b.n	800ed9c <_sungetc_r+0xc>
 800edf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800edf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edf8:	6363      	str	r3, [r4, #52]	; 0x34
 800edfa:	2303      	movs	r3, #3
 800edfc:	63a3      	str	r3, [r4, #56]	; 0x38
 800edfe:	4623      	mov	r3, r4
 800ee00:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ee04:	6023      	str	r3, [r4, #0]
 800ee06:	2301      	movs	r3, #1
 800ee08:	e7dc      	b.n	800edc4 <_sungetc_r+0x34>

0800ee0a <__ssrefill_r>:
 800ee0a:	b510      	push	{r4, lr}
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ee10:	b169      	cbz	r1, 800ee2e <__ssrefill_r+0x24>
 800ee12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee16:	4299      	cmp	r1, r3
 800ee18:	d001      	beq.n	800ee1e <__ssrefill_r+0x14>
 800ee1a:	f7fb fce3 	bl	800a7e4 <_free_r>
 800ee1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee20:	6063      	str	r3, [r4, #4]
 800ee22:	2000      	movs	r0, #0
 800ee24:	6360      	str	r0, [r4, #52]	; 0x34
 800ee26:	b113      	cbz	r3, 800ee2e <__ssrefill_r+0x24>
 800ee28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ee2a:	6023      	str	r3, [r4, #0]
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	6923      	ldr	r3, [r4, #16]
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	2300      	movs	r3, #0
 800ee34:	6063      	str	r3, [r4, #4]
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	f043 0320 	orr.w	r3, r3, #32
 800ee3c:	81a3      	strh	r3, [r4, #12]
 800ee3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee42:	e7f3      	b.n	800ee2c <__ssrefill_r+0x22>

0800ee44 <__ssvfiscanf_r>:
 800ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee48:	460c      	mov	r4, r1
 800ee4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ee4e:	2100      	movs	r1, #0
 800ee50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ee54:	49a6      	ldr	r1, [pc, #664]	; (800f0f0 <__ssvfiscanf_r+0x2ac>)
 800ee56:	91a0      	str	r1, [sp, #640]	; 0x280
 800ee58:	f10d 0804 	add.w	r8, sp, #4
 800ee5c:	49a5      	ldr	r1, [pc, #660]	; (800f0f4 <__ssvfiscanf_r+0x2b0>)
 800ee5e:	4fa6      	ldr	r7, [pc, #664]	; (800f0f8 <__ssvfiscanf_r+0x2b4>)
 800ee60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800f0fc <__ssvfiscanf_r+0x2b8>
 800ee64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ee68:	4606      	mov	r6, r0
 800ee6a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	7813      	ldrb	r3, [r2, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 815a 	beq.w	800f12a <__ssvfiscanf_r+0x2e6>
 800ee76:	5dd9      	ldrb	r1, [r3, r7]
 800ee78:	f011 0108 	ands.w	r1, r1, #8
 800ee7c:	f102 0501 	add.w	r5, r2, #1
 800ee80:	d019      	beq.n	800eeb6 <__ssvfiscanf_r+0x72>
 800ee82:	6863      	ldr	r3, [r4, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dd0f      	ble.n	800eea8 <__ssvfiscanf_r+0x64>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	781a      	ldrb	r2, [r3, #0]
 800ee8c:	5cba      	ldrb	r2, [r7, r2]
 800ee8e:	0712      	lsls	r2, r2, #28
 800ee90:	d401      	bmi.n	800ee96 <__ssvfiscanf_r+0x52>
 800ee92:	462a      	mov	r2, r5
 800ee94:	e7eb      	b.n	800ee6e <__ssvfiscanf_r+0x2a>
 800ee96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ee98:	3201      	adds	r2, #1
 800ee9a:	9245      	str	r2, [sp, #276]	; 0x114
 800ee9c:	6862      	ldr	r2, [r4, #4]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	3a01      	subs	r2, #1
 800eea2:	6062      	str	r2, [r4, #4]
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	e7ec      	b.n	800ee82 <__ssvfiscanf_r+0x3e>
 800eea8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4630      	mov	r0, r6
 800eeae:	4798      	blx	r3
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d0e9      	beq.n	800ee88 <__ssvfiscanf_r+0x44>
 800eeb4:	e7ed      	b.n	800ee92 <__ssvfiscanf_r+0x4e>
 800eeb6:	2b25      	cmp	r3, #37	; 0x25
 800eeb8:	d012      	beq.n	800eee0 <__ssvfiscanf_r+0x9c>
 800eeba:	469a      	mov	sl, r3
 800eebc:	6863      	ldr	r3, [r4, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f340 8091 	ble.w	800efe6 <__ssvfiscanf_r+0x1a2>
 800eec4:	6822      	ldr	r2, [r4, #0]
 800eec6:	7813      	ldrb	r3, [r2, #0]
 800eec8:	4553      	cmp	r3, sl
 800eeca:	f040 812e 	bne.w	800f12a <__ssvfiscanf_r+0x2e6>
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	3b01      	subs	r3, #1
 800eed2:	6063      	str	r3, [r4, #4]
 800eed4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800eed6:	3201      	adds	r2, #1
 800eed8:	3301      	adds	r3, #1
 800eeda:	6022      	str	r2, [r4, #0]
 800eedc:	9345      	str	r3, [sp, #276]	; 0x114
 800eede:	e7d8      	b.n	800ee92 <__ssvfiscanf_r+0x4e>
 800eee0:	9141      	str	r1, [sp, #260]	; 0x104
 800eee2:	9143      	str	r1, [sp, #268]	; 0x10c
 800eee4:	7853      	ldrb	r3, [r2, #1]
 800eee6:	2b2a      	cmp	r3, #42	; 0x2a
 800eee8:	bf02      	ittt	eq
 800eeea:	2310      	moveq	r3, #16
 800eeec:	1c95      	addeq	r5, r2, #2
 800eeee:	9341      	streq	r3, [sp, #260]	; 0x104
 800eef0:	220a      	movs	r2, #10
 800eef2:	46aa      	mov	sl, r5
 800eef4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800eef8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800eefc:	2b09      	cmp	r3, #9
 800eefe:	d91d      	bls.n	800ef3c <__ssvfiscanf_r+0xf8>
 800ef00:	487e      	ldr	r0, [pc, #504]	; (800f0fc <__ssvfiscanf_r+0x2b8>)
 800ef02:	2203      	movs	r2, #3
 800ef04:	f7f1 f96c 	bl	80001e0 <memchr>
 800ef08:	b140      	cbz	r0, 800ef1c <__ssvfiscanf_r+0xd8>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	eba0 0009 	sub.w	r0, r0, r9
 800ef10:	fa03 f000 	lsl.w	r0, r3, r0
 800ef14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ef16:	4318      	orrs	r0, r3
 800ef18:	9041      	str	r0, [sp, #260]	; 0x104
 800ef1a:	4655      	mov	r5, sl
 800ef1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ef20:	2b78      	cmp	r3, #120	; 0x78
 800ef22:	d806      	bhi.n	800ef32 <__ssvfiscanf_r+0xee>
 800ef24:	2b57      	cmp	r3, #87	; 0x57
 800ef26:	d810      	bhi.n	800ef4a <__ssvfiscanf_r+0x106>
 800ef28:	2b25      	cmp	r3, #37	; 0x25
 800ef2a:	d0c6      	beq.n	800eeba <__ssvfiscanf_r+0x76>
 800ef2c:	d856      	bhi.n	800efdc <__ssvfiscanf_r+0x198>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d064      	beq.n	800effc <__ssvfiscanf_r+0x1b8>
 800ef32:	2303      	movs	r3, #3
 800ef34:	9347      	str	r3, [sp, #284]	; 0x11c
 800ef36:	230a      	movs	r3, #10
 800ef38:	9342      	str	r3, [sp, #264]	; 0x108
 800ef3a:	e071      	b.n	800f020 <__ssvfiscanf_r+0x1dc>
 800ef3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ef3e:	fb02 1103 	mla	r1, r2, r3, r1
 800ef42:	3930      	subs	r1, #48	; 0x30
 800ef44:	9143      	str	r1, [sp, #268]	; 0x10c
 800ef46:	4655      	mov	r5, sl
 800ef48:	e7d3      	b.n	800eef2 <__ssvfiscanf_r+0xae>
 800ef4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ef4e:	2a20      	cmp	r2, #32
 800ef50:	d8ef      	bhi.n	800ef32 <__ssvfiscanf_r+0xee>
 800ef52:	a101      	add	r1, pc, #4	; (adr r1, 800ef58 <__ssvfiscanf_r+0x114>)
 800ef54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef58:	0800f00b 	.word	0x0800f00b
 800ef5c:	0800ef33 	.word	0x0800ef33
 800ef60:	0800ef33 	.word	0x0800ef33
 800ef64:	0800f069 	.word	0x0800f069
 800ef68:	0800ef33 	.word	0x0800ef33
 800ef6c:	0800ef33 	.word	0x0800ef33
 800ef70:	0800ef33 	.word	0x0800ef33
 800ef74:	0800ef33 	.word	0x0800ef33
 800ef78:	0800ef33 	.word	0x0800ef33
 800ef7c:	0800ef33 	.word	0x0800ef33
 800ef80:	0800ef33 	.word	0x0800ef33
 800ef84:	0800f07f 	.word	0x0800f07f
 800ef88:	0800f055 	.word	0x0800f055
 800ef8c:	0800efe3 	.word	0x0800efe3
 800ef90:	0800efe3 	.word	0x0800efe3
 800ef94:	0800efe3 	.word	0x0800efe3
 800ef98:	0800ef33 	.word	0x0800ef33
 800ef9c:	0800f059 	.word	0x0800f059
 800efa0:	0800ef33 	.word	0x0800ef33
 800efa4:	0800ef33 	.word	0x0800ef33
 800efa8:	0800ef33 	.word	0x0800ef33
 800efac:	0800ef33 	.word	0x0800ef33
 800efb0:	0800f08f 	.word	0x0800f08f
 800efb4:	0800f061 	.word	0x0800f061
 800efb8:	0800f003 	.word	0x0800f003
 800efbc:	0800ef33 	.word	0x0800ef33
 800efc0:	0800ef33 	.word	0x0800ef33
 800efc4:	0800f08b 	.word	0x0800f08b
 800efc8:	0800ef33 	.word	0x0800ef33
 800efcc:	0800f055 	.word	0x0800f055
 800efd0:	0800ef33 	.word	0x0800ef33
 800efd4:	0800ef33 	.word	0x0800ef33
 800efd8:	0800f00b 	.word	0x0800f00b
 800efdc:	3b45      	subs	r3, #69	; 0x45
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d8a7      	bhi.n	800ef32 <__ssvfiscanf_r+0xee>
 800efe2:	2305      	movs	r3, #5
 800efe4:	e01b      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800efe6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800efe8:	4621      	mov	r1, r4
 800efea:	4630      	mov	r0, r6
 800efec:	4798      	blx	r3
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f af68 	beq.w	800eec4 <__ssvfiscanf_r+0x80>
 800eff4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800eff6:	2800      	cmp	r0, #0
 800eff8:	f040 808d 	bne.w	800f116 <__ssvfiscanf_r+0x2d2>
 800effc:	f04f 30ff 	mov.w	r0, #4294967295
 800f000:	e08f      	b.n	800f122 <__ssvfiscanf_r+0x2de>
 800f002:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f004:	f042 0220 	orr.w	r2, r2, #32
 800f008:	9241      	str	r2, [sp, #260]	; 0x104
 800f00a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f00c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f010:	9241      	str	r2, [sp, #260]	; 0x104
 800f012:	2210      	movs	r2, #16
 800f014:	2b6f      	cmp	r3, #111	; 0x6f
 800f016:	9242      	str	r2, [sp, #264]	; 0x108
 800f018:	bf34      	ite	cc
 800f01a:	2303      	movcc	r3, #3
 800f01c:	2304      	movcs	r3, #4
 800f01e:	9347      	str	r3, [sp, #284]	; 0x11c
 800f020:	6863      	ldr	r3, [r4, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	dd42      	ble.n	800f0ac <__ssvfiscanf_r+0x268>
 800f026:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f028:	0659      	lsls	r1, r3, #25
 800f02a:	d404      	bmi.n	800f036 <__ssvfiscanf_r+0x1f2>
 800f02c:	6823      	ldr	r3, [r4, #0]
 800f02e:	781a      	ldrb	r2, [r3, #0]
 800f030:	5cba      	ldrb	r2, [r7, r2]
 800f032:	0712      	lsls	r2, r2, #28
 800f034:	d441      	bmi.n	800f0ba <__ssvfiscanf_r+0x276>
 800f036:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f038:	2b02      	cmp	r3, #2
 800f03a:	dc50      	bgt.n	800f0de <__ssvfiscanf_r+0x29a>
 800f03c:	466b      	mov	r3, sp
 800f03e:	4622      	mov	r2, r4
 800f040:	a941      	add	r1, sp, #260	; 0x104
 800f042:	4630      	mov	r0, r6
 800f044:	f000 f9d0 	bl	800f3e8 <_scanf_chars>
 800f048:	2801      	cmp	r0, #1
 800f04a:	d06e      	beq.n	800f12a <__ssvfiscanf_r+0x2e6>
 800f04c:	2802      	cmp	r0, #2
 800f04e:	f47f af20 	bne.w	800ee92 <__ssvfiscanf_r+0x4e>
 800f052:	e7cf      	b.n	800eff4 <__ssvfiscanf_r+0x1b0>
 800f054:	220a      	movs	r2, #10
 800f056:	e7dd      	b.n	800f014 <__ssvfiscanf_r+0x1d0>
 800f058:	2300      	movs	r3, #0
 800f05a:	9342      	str	r3, [sp, #264]	; 0x108
 800f05c:	2303      	movs	r3, #3
 800f05e:	e7de      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800f060:	2308      	movs	r3, #8
 800f062:	9342      	str	r3, [sp, #264]	; 0x108
 800f064:	2304      	movs	r3, #4
 800f066:	e7da      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800f068:	4629      	mov	r1, r5
 800f06a:	4640      	mov	r0, r8
 800f06c:	f000 fb28 	bl	800f6c0 <__sccl>
 800f070:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f076:	9341      	str	r3, [sp, #260]	; 0x104
 800f078:	4605      	mov	r5, r0
 800f07a:	2301      	movs	r3, #1
 800f07c:	e7cf      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800f07e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f084:	9341      	str	r3, [sp, #260]	; 0x104
 800f086:	2300      	movs	r3, #0
 800f088:	e7c9      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800f08a:	2302      	movs	r3, #2
 800f08c:	e7c7      	b.n	800f01e <__ssvfiscanf_r+0x1da>
 800f08e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800f090:	06c3      	lsls	r3, r0, #27
 800f092:	f53f aefe 	bmi.w	800ee92 <__ssvfiscanf_r+0x4e>
 800f096:	9b00      	ldr	r3, [sp, #0]
 800f098:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f09a:	1d19      	adds	r1, r3, #4
 800f09c:	9100      	str	r1, [sp, #0]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f010 0f01 	tst.w	r0, #1
 800f0a4:	bf14      	ite	ne
 800f0a6:	801a      	strhne	r2, [r3, #0]
 800f0a8:	601a      	streq	r2, [r3, #0]
 800f0aa:	e6f2      	b.n	800ee92 <__ssvfiscanf_r+0x4e>
 800f0ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f0ae:	4621      	mov	r1, r4
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	4798      	blx	r3
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d0b6      	beq.n	800f026 <__ssvfiscanf_r+0x1e2>
 800f0b8:	e79c      	b.n	800eff4 <__ssvfiscanf_r+0x1b0>
 800f0ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f0bc:	3201      	adds	r2, #1
 800f0be:	9245      	str	r2, [sp, #276]	; 0x114
 800f0c0:	6862      	ldr	r2, [r4, #4]
 800f0c2:	3a01      	subs	r2, #1
 800f0c4:	2a00      	cmp	r2, #0
 800f0c6:	6062      	str	r2, [r4, #4]
 800f0c8:	dd02      	ble.n	800f0d0 <__ssvfiscanf_r+0x28c>
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	e7ad      	b.n	800f02c <__ssvfiscanf_r+0x1e8>
 800f0d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f0d2:	4621      	mov	r1, r4
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	4798      	blx	r3
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	d0a7      	beq.n	800f02c <__ssvfiscanf_r+0x1e8>
 800f0dc:	e78a      	b.n	800eff4 <__ssvfiscanf_r+0x1b0>
 800f0de:	2b04      	cmp	r3, #4
 800f0e0:	dc0e      	bgt.n	800f100 <__ssvfiscanf_r+0x2bc>
 800f0e2:	466b      	mov	r3, sp
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	a941      	add	r1, sp, #260	; 0x104
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f000 f9d7 	bl	800f49c <_scanf_i>
 800f0ee:	e7ab      	b.n	800f048 <__ssvfiscanf_r+0x204>
 800f0f0:	0800ed91 	.word	0x0800ed91
 800f0f4:	0800ee0b 	.word	0x0800ee0b
 800f0f8:	080115a9 	.word	0x080115a9
 800f0fc:	080118fa 	.word	0x080118fa
 800f100:	4b0b      	ldr	r3, [pc, #44]	; (800f130 <__ssvfiscanf_r+0x2ec>)
 800f102:	2b00      	cmp	r3, #0
 800f104:	f43f aec5 	beq.w	800ee92 <__ssvfiscanf_r+0x4e>
 800f108:	466b      	mov	r3, sp
 800f10a:	4622      	mov	r2, r4
 800f10c:	a941      	add	r1, sp, #260	; 0x104
 800f10e:	4630      	mov	r0, r6
 800f110:	f7fc f8b2 	bl	800b278 <_scanf_float>
 800f114:	e798      	b.n	800f048 <__ssvfiscanf_r+0x204>
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f11c:	bf18      	it	ne
 800f11e:	f04f 30ff 	movne.w	r0, #4294967295
 800f122:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f12c:	e7f9      	b.n	800f122 <__ssvfiscanf_r+0x2de>
 800f12e:	bf00      	nop
 800f130:	0800b279 	.word	0x0800b279

0800f134 <__sfputc_r>:
 800f134:	6893      	ldr	r3, [r2, #8]
 800f136:	3b01      	subs	r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	b410      	push	{r4}
 800f13c:	6093      	str	r3, [r2, #8]
 800f13e:	da08      	bge.n	800f152 <__sfputc_r+0x1e>
 800f140:	6994      	ldr	r4, [r2, #24]
 800f142:	42a3      	cmp	r3, r4
 800f144:	db01      	blt.n	800f14a <__sfputc_r+0x16>
 800f146:	290a      	cmp	r1, #10
 800f148:	d103      	bne.n	800f152 <__sfputc_r+0x1e>
 800f14a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f14e:	f000 bbaf 	b.w	800f8b0 <__swbuf_r>
 800f152:	6813      	ldr	r3, [r2, #0]
 800f154:	1c58      	adds	r0, r3, #1
 800f156:	6010      	str	r0, [r2, #0]
 800f158:	7019      	strb	r1, [r3, #0]
 800f15a:	4608      	mov	r0, r1
 800f15c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <__sfputs_r>:
 800f162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f164:	4606      	mov	r6, r0
 800f166:	460f      	mov	r7, r1
 800f168:	4614      	mov	r4, r2
 800f16a:	18d5      	adds	r5, r2, r3
 800f16c:	42ac      	cmp	r4, r5
 800f16e:	d101      	bne.n	800f174 <__sfputs_r+0x12>
 800f170:	2000      	movs	r0, #0
 800f172:	e007      	b.n	800f184 <__sfputs_r+0x22>
 800f174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f178:	463a      	mov	r2, r7
 800f17a:	4630      	mov	r0, r6
 800f17c:	f7ff ffda 	bl	800f134 <__sfputc_r>
 800f180:	1c43      	adds	r3, r0, #1
 800f182:	d1f3      	bne.n	800f16c <__sfputs_r+0xa>
 800f184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f188 <_vfiprintf_r>:
 800f188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18c:	460d      	mov	r5, r1
 800f18e:	b09d      	sub	sp, #116	; 0x74
 800f190:	4614      	mov	r4, r2
 800f192:	4698      	mov	r8, r3
 800f194:	4606      	mov	r6, r0
 800f196:	b118      	cbz	r0, 800f1a0 <_vfiprintf_r+0x18>
 800f198:	6983      	ldr	r3, [r0, #24]
 800f19a:	b90b      	cbnz	r3, 800f1a0 <_vfiprintf_r+0x18>
 800f19c:	f000 fd84 	bl	800fca8 <__sinit>
 800f1a0:	4b89      	ldr	r3, [pc, #548]	; (800f3c8 <_vfiprintf_r+0x240>)
 800f1a2:	429d      	cmp	r5, r3
 800f1a4:	d11b      	bne.n	800f1de <_vfiprintf_r+0x56>
 800f1a6:	6875      	ldr	r5, [r6, #4]
 800f1a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1aa:	07d9      	lsls	r1, r3, #31
 800f1ac:	d405      	bmi.n	800f1ba <_vfiprintf_r+0x32>
 800f1ae:	89ab      	ldrh	r3, [r5, #12]
 800f1b0:	059a      	lsls	r2, r3, #22
 800f1b2:	d402      	bmi.n	800f1ba <_vfiprintf_r+0x32>
 800f1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1b6:	f7fe ff77 	bl	800e0a8 <__retarget_lock_acquire_recursive>
 800f1ba:	89ab      	ldrh	r3, [r5, #12]
 800f1bc:	071b      	lsls	r3, r3, #28
 800f1be:	d501      	bpl.n	800f1c4 <_vfiprintf_r+0x3c>
 800f1c0:	692b      	ldr	r3, [r5, #16]
 800f1c2:	b9eb      	cbnz	r3, 800f200 <_vfiprintf_r+0x78>
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	f000 fbd2 	bl	800f970 <__swsetup_r>
 800f1cc:	b1c0      	cbz	r0, 800f200 <_vfiprintf_r+0x78>
 800f1ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1d0:	07dc      	lsls	r4, r3, #31
 800f1d2:	d50e      	bpl.n	800f1f2 <_vfiprintf_r+0x6a>
 800f1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d8:	b01d      	add	sp, #116	; 0x74
 800f1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1de:	4b7b      	ldr	r3, [pc, #492]	; (800f3cc <_vfiprintf_r+0x244>)
 800f1e0:	429d      	cmp	r5, r3
 800f1e2:	d101      	bne.n	800f1e8 <_vfiprintf_r+0x60>
 800f1e4:	68b5      	ldr	r5, [r6, #8]
 800f1e6:	e7df      	b.n	800f1a8 <_vfiprintf_r+0x20>
 800f1e8:	4b79      	ldr	r3, [pc, #484]	; (800f3d0 <_vfiprintf_r+0x248>)
 800f1ea:	429d      	cmp	r5, r3
 800f1ec:	bf08      	it	eq
 800f1ee:	68f5      	ldreq	r5, [r6, #12]
 800f1f0:	e7da      	b.n	800f1a8 <_vfiprintf_r+0x20>
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	0598      	lsls	r0, r3, #22
 800f1f6:	d4ed      	bmi.n	800f1d4 <_vfiprintf_r+0x4c>
 800f1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1fa:	f7fe ff57 	bl	800e0ac <__retarget_lock_release_recursive>
 800f1fe:	e7e9      	b.n	800f1d4 <_vfiprintf_r+0x4c>
 800f200:	2300      	movs	r3, #0
 800f202:	9309      	str	r3, [sp, #36]	; 0x24
 800f204:	2320      	movs	r3, #32
 800f206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f20a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f20e:	2330      	movs	r3, #48	; 0x30
 800f210:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3d4 <_vfiprintf_r+0x24c>
 800f214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f218:	f04f 0901 	mov.w	r9, #1
 800f21c:	4623      	mov	r3, r4
 800f21e:	469a      	mov	sl, r3
 800f220:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f224:	b10a      	cbz	r2, 800f22a <_vfiprintf_r+0xa2>
 800f226:	2a25      	cmp	r2, #37	; 0x25
 800f228:	d1f9      	bne.n	800f21e <_vfiprintf_r+0x96>
 800f22a:	ebba 0b04 	subs.w	fp, sl, r4
 800f22e:	d00b      	beq.n	800f248 <_vfiprintf_r+0xc0>
 800f230:	465b      	mov	r3, fp
 800f232:	4622      	mov	r2, r4
 800f234:	4629      	mov	r1, r5
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ff93 	bl	800f162 <__sfputs_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	f000 80aa 	beq.w	800f396 <_vfiprintf_r+0x20e>
 800f242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f244:	445a      	add	r2, fp
 800f246:	9209      	str	r2, [sp, #36]	; 0x24
 800f248:	f89a 3000 	ldrb.w	r3, [sl]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 80a2 	beq.w	800f396 <_vfiprintf_r+0x20e>
 800f252:	2300      	movs	r3, #0
 800f254:	f04f 32ff 	mov.w	r2, #4294967295
 800f258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f25c:	f10a 0a01 	add.w	sl, sl, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f268:	931a      	str	r3, [sp, #104]	; 0x68
 800f26a:	4654      	mov	r4, sl
 800f26c:	2205      	movs	r2, #5
 800f26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f272:	4858      	ldr	r0, [pc, #352]	; (800f3d4 <_vfiprintf_r+0x24c>)
 800f274:	f7f0 ffb4 	bl	80001e0 <memchr>
 800f278:	9a04      	ldr	r2, [sp, #16]
 800f27a:	b9d8      	cbnz	r0, 800f2b4 <_vfiprintf_r+0x12c>
 800f27c:	06d1      	lsls	r1, r2, #27
 800f27e:	bf44      	itt	mi
 800f280:	2320      	movmi	r3, #32
 800f282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f286:	0713      	lsls	r3, r2, #28
 800f288:	bf44      	itt	mi
 800f28a:	232b      	movmi	r3, #43	; 0x2b
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f290:	f89a 3000 	ldrb.w	r3, [sl]
 800f294:	2b2a      	cmp	r3, #42	; 0x2a
 800f296:	d015      	beq.n	800f2c4 <_vfiprintf_r+0x13c>
 800f298:	9a07      	ldr	r2, [sp, #28]
 800f29a:	4654      	mov	r4, sl
 800f29c:	2000      	movs	r0, #0
 800f29e:	f04f 0c0a 	mov.w	ip, #10
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a8:	3b30      	subs	r3, #48	; 0x30
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d94e      	bls.n	800f34c <_vfiprintf_r+0x1c4>
 800f2ae:	b1b0      	cbz	r0, 800f2de <_vfiprintf_r+0x156>
 800f2b0:	9207      	str	r2, [sp, #28]
 800f2b2:	e014      	b.n	800f2de <_vfiprintf_r+0x156>
 800f2b4:	eba0 0308 	sub.w	r3, r0, r8
 800f2b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	46a2      	mov	sl, r4
 800f2c2:	e7d2      	b.n	800f26a <_vfiprintf_r+0xe2>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	1d19      	adds	r1, r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	9103      	str	r1, [sp, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfbb      	ittet	lt
 800f2d0:	425b      	neglt	r3, r3
 800f2d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2d6:	9307      	strge	r3, [sp, #28]
 800f2d8:	9307      	strlt	r3, [sp, #28]
 800f2da:	bfb8      	it	lt
 800f2dc:	9204      	strlt	r2, [sp, #16]
 800f2de:	7823      	ldrb	r3, [r4, #0]
 800f2e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2e2:	d10c      	bne.n	800f2fe <_vfiprintf_r+0x176>
 800f2e4:	7863      	ldrb	r3, [r4, #1]
 800f2e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f2e8:	d135      	bne.n	800f356 <_vfiprintf_r+0x1ce>
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	1d1a      	adds	r2, r3, #4
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	9203      	str	r2, [sp, #12]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	bfb8      	it	lt
 800f2f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2fa:	3402      	adds	r4, #2
 800f2fc:	9305      	str	r3, [sp, #20]
 800f2fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3e4 <_vfiprintf_r+0x25c>
 800f302:	7821      	ldrb	r1, [r4, #0]
 800f304:	2203      	movs	r2, #3
 800f306:	4650      	mov	r0, sl
 800f308:	f7f0 ff6a 	bl	80001e0 <memchr>
 800f30c:	b140      	cbz	r0, 800f320 <_vfiprintf_r+0x198>
 800f30e:	2340      	movs	r3, #64	; 0x40
 800f310:	eba0 000a 	sub.w	r0, r0, sl
 800f314:	fa03 f000 	lsl.w	r0, r3, r0
 800f318:	9b04      	ldr	r3, [sp, #16]
 800f31a:	4303      	orrs	r3, r0
 800f31c:	3401      	adds	r4, #1
 800f31e:	9304      	str	r3, [sp, #16]
 800f320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f324:	482c      	ldr	r0, [pc, #176]	; (800f3d8 <_vfiprintf_r+0x250>)
 800f326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f32a:	2206      	movs	r2, #6
 800f32c:	f7f0 ff58 	bl	80001e0 <memchr>
 800f330:	2800      	cmp	r0, #0
 800f332:	d03f      	beq.n	800f3b4 <_vfiprintf_r+0x22c>
 800f334:	4b29      	ldr	r3, [pc, #164]	; (800f3dc <_vfiprintf_r+0x254>)
 800f336:	bb1b      	cbnz	r3, 800f380 <_vfiprintf_r+0x1f8>
 800f338:	9b03      	ldr	r3, [sp, #12]
 800f33a:	3307      	adds	r3, #7
 800f33c:	f023 0307 	bic.w	r3, r3, #7
 800f340:	3308      	adds	r3, #8
 800f342:	9303      	str	r3, [sp, #12]
 800f344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f346:	443b      	add	r3, r7
 800f348:	9309      	str	r3, [sp, #36]	; 0x24
 800f34a:	e767      	b.n	800f21c <_vfiprintf_r+0x94>
 800f34c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f350:	460c      	mov	r4, r1
 800f352:	2001      	movs	r0, #1
 800f354:	e7a5      	b.n	800f2a2 <_vfiprintf_r+0x11a>
 800f356:	2300      	movs	r3, #0
 800f358:	3401      	adds	r4, #1
 800f35a:	9305      	str	r3, [sp, #20]
 800f35c:	4619      	mov	r1, r3
 800f35e:	f04f 0c0a 	mov.w	ip, #10
 800f362:	4620      	mov	r0, r4
 800f364:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f368:	3a30      	subs	r2, #48	; 0x30
 800f36a:	2a09      	cmp	r2, #9
 800f36c:	d903      	bls.n	800f376 <_vfiprintf_r+0x1ee>
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d0c5      	beq.n	800f2fe <_vfiprintf_r+0x176>
 800f372:	9105      	str	r1, [sp, #20]
 800f374:	e7c3      	b.n	800f2fe <_vfiprintf_r+0x176>
 800f376:	fb0c 2101 	mla	r1, ip, r1, r2
 800f37a:	4604      	mov	r4, r0
 800f37c:	2301      	movs	r3, #1
 800f37e:	e7f0      	b.n	800f362 <_vfiprintf_r+0x1da>
 800f380:	ab03      	add	r3, sp, #12
 800f382:	9300      	str	r3, [sp, #0]
 800f384:	462a      	mov	r2, r5
 800f386:	4b16      	ldr	r3, [pc, #88]	; (800f3e0 <_vfiprintf_r+0x258>)
 800f388:	a904      	add	r1, sp, #16
 800f38a:	4630      	mov	r0, r6
 800f38c:	f7fb fbaa 	bl	800aae4 <_printf_float>
 800f390:	4607      	mov	r7, r0
 800f392:	1c78      	adds	r0, r7, #1
 800f394:	d1d6      	bne.n	800f344 <_vfiprintf_r+0x1bc>
 800f396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f398:	07d9      	lsls	r1, r3, #31
 800f39a:	d405      	bmi.n	800f3a8 <_vfiprintf_r+0x220>
 800f39c:	89ab      	ldrh	r3, [r5, #12]
 800f39e:	059a      	lsls	r2, r3, #22
 800f3a0:	d402      	bmi.n	800f3a8 <_vfiprintf_r+0x220>
 800f3a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3a4:	f7fe fe82 	bl	800e0ac <__retarget_lock_release_recursive>
 800f3a8:	89ab      	ldrh	r3, [r5, #12]
 800f3aa:	065b      	lsls	r3, r3, #25
 800f3ac:	f53f af12 	bmi.w	800f1d4 <_vfiprintf_r+0x4c>
 800f3b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3b2:	e711      	b.n	800f1d8 <_vfiprintf_r+0x50>
 800f3b4:	ab03      	add	r3, sp, #12
 800f3b6:	9300      	str	r3, [sp, #0]
 800f3b8:	462a      	mov	r2, r5
 800f3ba:	4b09      	ldr	r3, [pc, #36]	; (800f3e0 <_vfiprintf_r+0x258>)
 800f3bc:	a904      	add	r1, sp, #16
 800f3be:	4630      	mov	r0, r6
 800f3c0:	f7fb fe34 	bl	800b02c <_printf_i>
 800f3c4:	e7e4      	b.n	800f390 <_vfiprintf_r+0x208>
 800f3c6:	bf00      	nop
 800f3c8:	08011940 	.word	0x08011940
 800f3cc:	08011960 	.word	0x08011960
 800f3d0:	08011920 	.word	0x08011920
 800f3d4:	080118f4 	.word	0x080118f4
 800f3d8:	080118fe 	.word	0x080118fe
 800f3dc:	0800aae5 	.word	0x0800aae5
 800f3e0:	0800f163 	.word	0x0800f163
 800f3e4:	080118fa 	.word	0x080118fa

0800f3e8 <_scanf_chars>:
 800f3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3ec:	4615      	mov	r5, r2
 800f3ee:	688a      	ldr	r2, [r1, #8]
 800f3f0:	4680      	mov	r8, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	b932      	cbnz	r2, 800f404 <_scanf_chars+0x1c>
 800f3f6:	698a      	ldr	r2, [r1, #24]
 800f3f8:	2a00      	cmp	r2, #0
 800f3fa:	bf0c      	ite	eq
 800f3fc:	2201      	moveq	r2, #1
 800f3fe:	f04f 32ff 	movne.w	r2, #4294967295
 800f402:	608a      	str	r2, [r1, #8]
 800f404:	6822      	ldr	r2, [r4, #0]
 800f406:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f498 <_scanf_chars+0xb0>
 800f40a:	06d1      	lsls	r1, r2, #27
 800f40c:	bf5f      	itttt	pl
 800f40e:	681a      	ldrpl	r2, [r3, #0]
 800f410:	1d11      	addpl	r1, r2, #4
 800f412:	6019      	strpl	r1, [r3, #0]
 800f414:	6816      	ldrpl	r6, [r2, #0]
 800f416:	2700      	movs	r7, #0
 800f418:	69a0      	ldr	r0, [r4, #24]
 800f41a:	b188      	cbz	r0, 800f440 <_scanf_chars+0x58>
 800f41c:	2801      	cmp	r0, #1
 800f41e:	d107      	bne.n	800f430 <_scanf_chars+0x48>
 800f420:	682a      	ldr	r2, [r5, #0]
 800f422:	7811      	ldrb	r1, [r2, #0]
 800f424:	6962      	ldr	r2, [r4, #20]
 800f426:	5c52      	ldrb	r2, [r2, r1]
 800f428:	b952      	cbnz	r2, 800f440 <_scanf_chars+0x58>
 800f42a:	2f00      	cmp	r7, #0
 800f42c:	d031      	beq.n	800f492 <_scanf_chars+0xaa>
 800f42e:	e022      	b.n	800f476 <_scanf_chars+0x8e>
 800f430:	2802      	cmp	r0, #2
 800f432:	d120      	bne.n	800f476 <_scanf_chars+0x8e>
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f43c:	071b      	lsls	r3, r3, #28
 800f43e:	d41a      	bmi.n	800f476 <_scanf_chars+0x8e>
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	06da      	lsls	r2, r3, #27
 800f444:	bf5e      	ittt	pl
 800f446:	682b      	ldrpl	r3, [r5, #0]
 800f448:	781b      	ldrbpl	r3, [r3, #0]
 800f44a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f44e:	682a      	ldr	r2, [r5, #0]
 800f450:	686b      	ldr	r3, [r5, #4]
 800f452:	3201      	adds	r2, #1
 800f454:	602a      	str	r2, [r5, #0]
 800f456:	68a2      	ldr	r2, [r4, #8]
 800f458:	3b01      	subs	r3, #1
 800f45a:	3a01      	subs	r2, #1
 800f45c:	606b      	str	r3, [r5, #4]
 800f45e:	3701      	adds	r7, #1
 800f460:	60a2      	str	r2, [r4, #8]
 800f462:	b142      	cbz	r2, 800f476 <_scanf_chars+0x8e>
 800f464:	2b00      	cmp	r3, #0
 800f466:	dcd7      	bgt.n	800f418 <_scanf_chars+0x30>
 800f468:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f46c:	4629      	mov	r1, r5
 800f46e:	4640      	mov	r0, r8
 800f470:	4798      	blx	r3
 800f472:	2800      	cmp	r0, #0
 800f474:	d0d0      	beq.n	800f418 <_scanf_chars+0x30>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	f013 0310 	ands.w	r3, r3, #16
 800f47c:	d105      	bne.n	800f48a <_scanf_chars+0xa2>
 800f47e:	68e2      	ldr	r2, [r4, #12]
 800f480:	3201      	adds	r2, #1
 800f482:	60e2      	str	r2, [r4, #12]
 800f484:	69a2      	ldr	r2, [r4, #24]
 800f486:	b102      	cbz	r2, 800f48a <_scanf_chars+0xa2>
 800f488:	7033      	strb	r3, [r6, #0]
 800f48a:	6923      	ldr	r3, [r4, #16]
 800f48c:	443b      	add	r3, r7
 800f48e:	6123      	str	r3, [r4, #16]
 800f490:	2000      	movs	r0, #0
 800f492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f496:	bf00      	nop
 800f498:	080115a9 	.word	0x080115a9

0800f49c <_scanf_i>:
 800f49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a0:	4698      	mov	r8, r3
 800f4a2:	4b76      	ldr	r3, [pc, #472]	; (800f67c <_scanf_i+0x1e0>)
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	4682      	mov	sl, r0
 800f4a8:	4616      	mov	r6, r2
 800f4aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4ae:	b087      	sub	sp, #28
 800f4b0:	ab03      	add	r3, sp, #12
 800f4b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f4b6:	4b72      	ldr	r3, [pc, #456]	; (800f680 <_scanf_i+0x1e4>)
 800f4b8:	69a1      	ldr	r1, [r4, #24]
 800f4ba:	4a72      	ldr	r2, [pc, #456]	; (800f684 <_scanf_i+0x1e8>)
 800f4bc:	2903      	cmp	r1, #3
 800f4be:	bf18      	it	ne
 800f4c0:	461a      	movne	r2, r3
 800f4c2:	68a3      	ldr	r3, [r4, #8]
 800f4c4:	9201      	str	r2, [sp, #4]
 800f4c6:	1e5a      	subs	r2, r3, #1
 800f4c8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f4cc:	bf88      	it	hi
 800f4ce:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f4d2:	4627      	mov	r7, r4
 800f4d4:	bf82      	ittt	hi
 800f4d6:	eb03 0905 	addhi.w	r9, r3, r5
 800f4da:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f4de:	60a3      	strhi	r3, [r4, #8]
 800f4e0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f4e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800f4e8:	bf98      	it	ls
 800f4ea:	f04f 0900 	movls.w	r9, #0
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	463d      	mov	r5, r7
 800f4f2:	f04f 0b00 	mov.w	fp, #0
 800f4f6:	6831      	ldr	r1, [r6, #0]
 800f4f8:	ab03      	add	r3, sp, #12
 800f4fa:	7809      	ldrb	r1, [r1, #0]
 800f4fc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f500:	2202      	movs	r2, #2
 800f502:	f7f0 fe6d 	bl	80001e0 <memchr>
 800f506:	b328      	cbz	r0, 800f554 <_scanf_i+0xb8>
 800f508:	f1bb 0f01 	cmp.w	fp, #1
 800f50c:	d159      	bne.n	800f5c2 <_scanf_i+0x126>
 800f50e:	6862      	ldr	r2, [r4, #4]
 800f510:	b92a      	cbnz	r2, 800f51e <_scanf_i+0x82>
 800f512:	6822      	ldr	r2, [r4, #0]
 800f514:	2308      	movs	r3, #8
 800f516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f51a:	6063      	str	r3, [r4, #4]
 800f51c:	6022      	str	r2, [r4, #0]
 800f51e:	6822      	ldr	r2, [r4, #0]
 800f520:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800f524:	6022      	str	r2, [r4, #0]
 800f526:	68a2      	ldr	r2, [r4, #8]
 800f528:	1e51      	subs	r1, r2, #1
 800f52a:	60a1      	str	r1, [r4, #8]
 800f52c:	b192      	cbz	r2, 800f554 <_scanf_i+0xb8>
 800f52e:	6832      	ldr	r2, [r6, #0]
 800f530:	1c51      	adds	r1, r2, #1
 800f532:	6031      	str	r1, [r6, #0]
 800f534:	7812      	ldrb	r2, [r2, #0]
 800f536:	f805 2b01 	strb.w	r2, [r5], #1
 800f53a:	6872      	ldr	r2, [r6, #4]
 800f53c:	3a01      	subs	r2, #1
 800f53e:	2a00      	cmp	r2, #0
 800f540:	6072      	str	r2, [r6, #4]
 800f542:	dc07      	bgt.n	800f554 <_scanf_i+0xb8>
 800f544:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800f548:	4631      	mov	r1, r6
 800f54a:	4650      	mov	r0, sl
 800f54c:	4790      	blx	r2
 800f54e:	2800      	cmp	r0, #0
 800f550:	f040 8085 	bne.w	800f65e <_scanf_i+0x1c2>
 800f554:	f10b 0b01 	add.w	fp, fp, #1
 800f558:	f1bb 0f03 	cmp.w	fp, #3
 800f55c:	d1cb      	bne.n	800f4f6 <_scanf_i+0x5a>
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	b90b      	cbnz	r3, 800f566 <_scanf_i+0xca>
 800f562:	230a      	movs	r3, #10
 800f564:	6063      	str	r3, [r4, #4]
 800f566:	6863      	ldr	r3, [r4, #4]
 800f568:	4947      	ldr	r1, [pc, #284]	; (800f688 <_scanf_i+0x1ec>)
 800f56a:	6960      	ldr	r0, [r4, #20]
 800f56c:	1ac9      	subs	r1, r1, r3
 800f56e:	f000 f8a7 	bl	800f6c0 <__sccl>
 800f572:	f04f 0b00 	mov.w	fp, #0
 800f576:	68a3      	ldr	r3, [r4, #8]
 800f578:	6822      	ldr	r2, [r4, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d03d      	beq.n	800f5fa <_scanf_i+0x15e>
 800f57e:	6831      	ldr	r1, [r6, #0]
 800f580:	6960      	ldr	r0, [r4, #20]
 800f582:	f891 c000 	ldrb.w	ip, [r1]
 800f586:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d035      	beq.n	800f5fa <_scanf_i+0x15e>
 800f58e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f592:	d124      	bne.n	800f5de <_scanf_i+0x142>
 800f594:	0510      	lsls	r0, r2, #20
 800f596:	d522      	bpl.n	800f5de <_scanf_i+0x142>
 800f598:	f10b 0b01 	add.w	fp, fp, #1
 800f59c:	f1b9 0f00 	cmp.w	r9, #0
 800f5a0:	d003      	beq.n	800f5aa <_scanf_i+0x10e>
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	f109 39ff 	add.w	r9, r9, #4294967295
 800f5a8:	60a3      	str	r3, [r4, #8]
 800f5aa:	6873      	ldr	r3, [r6, #4]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	6073      	str	r3, [r6, #4]
 800f5b2:	dd1b      	ble.n	800f5ec <_scanf_i+0x150>
 800f5b4:	6833      	ldr	r3, [r6, #0]
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	6033      	str	r3, [r6, #0]
 800f5ba:	68a3      	ldr	r3, [r4, #8]
 800f5bc:	3b01      	subs	r3, #1
 800f5be:	60a3      	str	r3, [r4, #8]
 800f5c0:	e7d9      	b.n	800f576 <_scanf_i+0xda>
 800f5c2:	f1bb 0f02 	cmp.w	fp, #2
 800f5c6:	d1ae      	bne.n	800f526 <_scanf_i+0x8a>
 800f5c8:	6822      	ldr	r2, [r4, #0]
 800f5ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800f5ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f5d2:	d1bf      	bne.n	800f554 <_scanf_i+0xb8>
 800f5d4:	2310      	movs	r3, #16
 800f5d6:	6063      	str	r3, [r4, #4]
 800f5d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f5dc:	e7a2      	b.n	800f524 <_scanf_i+0x88>
 800f5de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800f5e2:	6022      	str	r2, [r4, #0]
 800f5e4:	780b      	ldrb	r3, [r1, #0]
 800f5e6:	f805 3b01 	strb.w	r3, [r5], #1
 800f5ea:	e7de      	b.n	800f5aa <_scanf_i+0x10e>
 800f5ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4650      	mov	r0, sl
 800f5f4:	4798      	blx	r3
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d0df      	beq.n	800f5ba <_scanf_i+0x11e>
 800f5fa:	6823      	ldr	r3, [r4, #0]
 800f5fc:	05db      	lsls	r3, r3, #23
 800f5fe:	d50d      	bpl.n	800f61c <_scanf_i+0x180>
 800f600:	42bd      	cmp	r5, r7
 800f602:	d909      	bls.n	800f618 <_scanf_i+0x17c>
 800f604:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f608:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f60c:	4632      	mov	r2, r6
 800f60e:	4650      	mov	r0, sl
 800f610:	4798      	blx	r3
 800f612:	f105 39ff 	add.w	r9, r5, #4294967295
 800f616:	464d      	mov	r5, r9
 800f618:	42bd      	cmp	r5, r7
 800f61a:	d02d      	beq.n	800f678 <_scanf_i+0x1dc>
 800f61c:	6822      	ldr	r2, [r4, #0]
 800f61e:	f012 0210 	ands.w	r2, r2, #16
 800f622:	d113      	bne.n	800f64c <_scanf_i+0x1b0>
 800f624:	702a      	strb	r2, [r5, #0]
 800f626:	6863      	ldr	r3, [r4, #4]
 800f628:	9e01      	ldr	r6, [sp, #4]
 800f62a:	4639      	mov	r1, r7
 800f62c:	4650      	mov	r0, sl
 800f62e:	47b0      	blx	r6
 800f630:	6821      	ldr	r1, [r4, #0]
 800f632:	f8d8 3000 	ldr.w	r3, [r8]
 800f636:	f011 0f20 	tst.w	r1, #32
 800f63a:	d013      	beq.n	800f664 <_scanf_i+0x1c8>
 800f63c:	1d1a      	adds	r2, r3, #4
 800f63e:	f8c8 2000 	str.w	r2, [r8]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6018      	str	r0, [r3, #0]
 800f646:	68e3      	ldr	r3, [r4, #12]
 800f648:	3301      	adds	r3, #1
 800f64a:	60e3      	str	r3, [r4, #12]
 800f64c:	1bed      	subs	r5, r5, r7
 800f64e:	44ab      	add	fp, r5
 800f650:	6925      	ldr	r5, [r4, #16]
 800f652:	445d      	add	r5, fp
 800f654:	6125      	str	r5, [r4, #16]
 800f656:	2000      	movs	r0, #0
 800f658:	b007      	add	sp, #28
 800f65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65e:	f04f 0b00 	mov.w	fp, #0
 800f662:	e7ca      	b.n	800f5fa <_scanf_i+0x15e>
 800f664:	1d1a      	adds	r2, r3, #4
 800f666:	f8c8 2000 	str.w	r2, [r8]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f011 0f01 	tst.w	r1, #1
 800f670:	bf14      	ite	ne
 800f672:	8018      	strhne	r0, [r3, #0]
 800f674:	6018      	streq	r0, [r3, #0]
 800f676:	e7e6      	b.n	800f646 <_scanf_i+0x1aa>
 800f678:	2001      	movs	r0, #1
 800f67a:	e7ed      	b.n	800f658 <_scanf_i+0x1bc>
 800f67c:	0801138c 	.word	0x0801138c
 800f680:	0800f825 	.word	0x0800f825
 800f684:	0800c565 	.word	0x0800c565
 800f688:	0801191e 	.word	0x0801191e

0800f68c <_read_r>:
 800f68c:	b538      	push	{r3, r4, r5, lr}
 800f68e:	4d07      	ldr	r5, [pc, #28]	; (800f6ac <_read_r+0x20>)
 800f690:	4604      	mov	r4, r0
 800f692:	4608      	mov	r0, r1
 800f694:	4611      	mov	r1, r2
 800f696:	2200      	movs	r2, #0
 800f698:	602a      	str	r2, [r5, #0]
 800f69a:	461a      	mov	r2, r3
 800f69c:	f7f4 f954 	bl	8003948 <_read>
 800f6a0:	1c43      	adds	r3, r0, #1
 800f6a2:	d102      	bne.n	800f6aa <_read_r+0x1e>
 800f6a4:	682b      	ldr	r3, [r5, #0]
 800f6a6:	b103      	cbz	r3, 800f6aa <_read_r+0x1e>
 800f6a8:	6023      	str	r3, [r4, #0]
 800f6aa:	bd38      	pop	{r3, r4, r5, pc}
 800f6ac:	20000b00 	.word	0x20000b00

0800f6b0 <nan>:
 800f6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f6b8 <nan+0x8>
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop
 800f6b8:	00000000 	.word	0x00000000
 800f6bc:	7ff80000 	.word	0x7ff80000

0800f6c0 <__sccl>:
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	780b      	ldrb	r3, [r1, #0]
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	2b5e      	cmp	r3, #94	; 0x5e
 800f6c8:	bf0b      	itete	eq
 800f6ca:	784b      	ldrbeq	r3, [r1, #1]
 800f6cc:	1c48      	addne	r0, r1, #1
 800f6ce:	1c88      	addeq	r0, r1, #2
 800f6d0:	2200      	movne	r2, #0
 800f6d2:	bf08      	it	eq
 800f6d4:	2201      	moveq	r2, #1
 800f6d6:	1e61      	subs	r1, r4, #1
 800f6d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800f6dc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f6e0:	42a9      	cmp	r1, r5
 800f6e2:	d1fb      	bne.n	800f6dc <__sccl+0x1c>
 800f6e4:	b90b      	cbnz	r3, 800f6ea <__sccl+0x2a>
 800f6e6:	3801      	subs	r0, #1
 800f6e8:	bd70      	pop	{r4, r5, r6, pc}
 800f6ea:	f082 0201 	eor.w	r2, r2, #1
 800f6ee:	54e2      	strb	r2, [r4, r3]
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f6f8:	292d      	cmp	r1, #45	; 0x2d
 800f6fa:	d006      	beq.n	800f70a <__sccl+0x4a>
 800f6fc:	295d      	cmp	r1, #93	; 0x5d
 800f6fe:	d0f3      	beq.n	800f6e8 <__sccl+0x28>
 800f700:	b909      	cbnz	r1, 800f706 <__sccl+0x46>
 800f702:	4628      	mov	r0, r5
 800f704:	e7f0      	b.n	800f6e8 <__sccl+0x28>
 800f706:	460b      	mov	r3, r1
 800f708:	e7f1      	b.n	800f6ee <__sccl+0x2e>
 800f70a:	786e      	ldrb	r6, [r5, #1]
 800f70c:	2e5d      	cmp	r6, #93	; 0x5d
 800f70e:	d0fa      	beq.n	800f706 <__sccl+0x46>
 800f710:	42b3      	cmp	r3, r6
 800f712:	dcf8      	bgt.n	800f706 <__sccl+0x46>
 800f714:	3502      	adds	r5, #2
 800f716:	4619      	mov	r1, r3
 800f718:	3101      	adds	r1, #1
 800f71a:	428e      	cmp	r6, r1
 800f71c:	5462      	strb	r2, [r4, r1]
 800f71e:	dcfb      	bgt.n	800f718 <__sccl+0x58>
 800f720:	1af1      	subs	r1, r6, r3
 800f722:	3901      	subs	r1, #1
 800f724:	1c58      	adds	r0, r3, #1
 800f726:	42b3      	cmp	r3, r6
 800f728:	bfa8      	it	ge
 800f72a:	2100      	movge	r1, #0
 800f72c:	1843      	adds	r3, r0, r1
 800f72e:	e7e0      	b.n	800f6f2 <__sccl+0x32>

0800f730 <strcpy>:
 800f730:	4603      	mov	r3, r0
 800f732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f736:	f803 2b01 	strb.w	r2, [r3], #1
 800f73a:	2a00      	cmp	r2, #0
 800f73c:	d1f9      	bne.n	800f732 <strcpy+0x2>
 800f73e:	4770      	bx	lr

0800f740 <_strtoul_l.constprop.0>:
 800f740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f744:	4f36      	ldr	r7, [pc, #216]	; (800f820 <_strtoul_l.constprop.0+0xe0>)
 800f746:	4686      	mov	lr, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	4628      	mov	r0, r5
 800f74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f750:	5de6      	ldrb	r6, [r4, r7]
 800f752:	f016 0608 	ands.w	r6, r6, #8
 800f756:	d1f8      	bne.n	800f74a <_strtoul_l.constprop.0+0xa>
 800f758:	2c2d      	cmp	r4, #45	; 0x2d
 800f75a:	d12f      	bne.n	800f7bc <_strtoul_l.constprop.0+0x7c>
 800f75c:	782c      	ldrb	r4, [r5, #0]
 800f75e:	2601      	movs	r6, #1
 800f760:	1c85      	adds	r5, r0, #2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d057      	beq.n	800f816 <_strtoul_l.constprop.0+0xd6>
 800f766:	2b10      	cmp	r3, #16
 800f768:	d109      	bne.n	800f77e <_strtoul_l.constprop.0+0x3e>
 800f76a:	2c30      	cmp	r4, #48	; 0x30
 800f76c:	d107      	bne.n	800f77e <_strtoul_l.constprop.0+0x3e>
 800f76e:	7828      	ldrb	r0, [r5, #0]
 800f770:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f774:	2858      	cmp	r0, #88	; 0x58
 800f776:	d149      	bne.n	800f80c <_strtoul_l.constprop.0+0xcc>
 800f778:	786c      	ldrb	r4, [r5, #1]
 800f77a:	2310      	movs	r3, #16
 800f77c:	3502      	adds	r5, #2
 800f77e:	f04f 38ff 	mov.w	r8, #4294967295
 800f782:	2700      	movs	r7, #0
 800f784:	fbb8 f8f3 	udiv	r8, r8, r3
 800f788:	fb03 f908 	mul.w	r9, r3, r8
 800f78c:	ea6f 0909 	mvn.w	r9, r9
 800f790:	4638      	mov	r0, r7
 800f792:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f796:	f1bc 0f09 	cmp.w	ip, #9
 800f79a:	d814      	bhi.n	800f7c6 <_strtoul_l.constprop.0+0x86>
 800f79c:	4664      	mov	r4, ip
 800f79e:	42a3      	cmp	r3, r4
 800f7a0:	dd22      	ble.n	800f7e8 <_strtoul_l.constprop.0+0xa8>
 800f7a2:	2f00      	cmp	r7, #0
 800f7a4:	db1d      	blt.n	800f7e2 <_strtoul_l.constprop.0+0xa2>
 800f7a6:	4580      	cmp	r8, r0
 800f7a8:	d31b      	bcc.n	800f7e2 <_strtoul_l.constprop.0+0xa2>
 800f7aa:	d101      	bne.n	800f7b0 <_strtoul_l.constprop.0+0x70>
 800f7ac:	45a1      	cmp	r9, r4
 800f7ae:	db18      	blt.n	800f7e2 <_strtoul_l.constprop.0+0xa2>
 800f7b0:	fb00 4003 	mla	r0, r0, r3, r4
 800f7b4:	2701      	movs	r7, #1
 800f7b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7ba:	e7ea      	b.n	800f792 <_strtoul_l.constprop.0+0x52>
 800f7bc:	2c2b      	cmp	r4, #43	; 0x2b
 800f7be:	bf04      	itt	eq
 800f7c0:	782c      	ldrbeq	r4, [r5, #0]
 800f7c2:	1c85      	addeq	r5, r0, #2
 800f7c4:	e7cd      	b.n	800f762 <_strtoul_l.constprop.0+0x22>
 800f7c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f7ca:	f1bc 0f19 	cmp.w	ip, #25
 800f7ce:	d801      	bhi.n	800f7d4 <_strtoul_l.constprop.0+0x94>
 800f7d0:	3c37      	subs	r4, #55	; 0x37
 800f7d2:	e7e4      	b.n	800f79e <_strtoul_l.constprop.0+0x5e>
 800f7d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f7d8:	f1bc 0f19 	cmp.w	ip, #25
 800f7dc:	d804      	bhi.n	800f7e8 <_strtoul_l.constprop.0+0xa8>
 800f7de:	3c57      	subs	r4, #87	; 0x57
 800f7e0:	e7dd      	b.n	800f79e <_strtoul_l.constprop.0+0x5e>
 800f7e2:	f04f 37ff 	mov.w	r7, #4294967295
 800f7e6:	e7e6      	b.n	800f7b6 <_strtoul_l.constprop.0+0x76>
 800f7e8:	2f00      	cmp	r7, #0
 800f7ea:	da07      	bge.n	800f7fc <_strtoul_l.constprop.0+0xbc>
 800f7ec:	2322      	movs	r3, #34	; 0x22
 800f7ee:	f8ce 3000 	str.w	r3, [lr]
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f6:	b932      	cbnz	r2, 800f806 <_strtoul_l.constprop.0+0xc6>
 800f7f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fc:	b106      	cbz	r6, 800f800 <_strtoul_l.constprop.0+0xc0>
 800f7fe:	4240      	negs	r0, r0
 800f800:	2a00      	cmp	r2, #0
 800f802:	d0f9      	beq.n	800f7f8 <_strtoul_l.constprop.0+0xb8>
 800f804:	b107      	cbz	r7, 800f808 <_strtoul_l.constprop.0+0xc8>
 800f806:	1e69      	subs	r1, r5, #1
 800f808:	6011      	str	r1, [r2, #0]
 800f80a:	e7f5      	b.n	800f7f8 <_strtoul_l.constprop.0+0xb8>
 800f80c:	2430      	movs	r4, #48	; 0x30
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1b5      	bne.n	800f77e <_strtoul_l.constprop.0+0x3e>
 800f812:	2308      	movs	r3, #8
 800f814:	e7b3      	b.n	800f77e <_strtoul_l.constprop.0+0x3e>
 800f816:	2c30      	cmp	r4, #48	; 0x30
 800f818:	d0a9      	beq.n	800f76e <_strtoul_l.constprop.0+0x2e>
 800f81a:	230a      	movs	r3, #10
 800f81c:	e7af      	b.n	800f77e <_strtoul_l.constprop.0+0x3e>
 800f81e:	bf00      	nop
 800f820:	080115a9 	.word	0x080115a9

0800f824 <_strtoul_r>:
 800f824:	f7ff bf8c 	b.w	800f740 <_strtoul_l.constprop.0>

0800f828 <strtoul>:
 800f828:	4613      	mov	r3, r2
 800f82a:	460a      	mov	r2, r1
 800f82c:	4601      	mov	r1, r0
 800f82e:	4802      	ldr	r0, [pc, #8]	; (800f838 <strtoul+0x10>)
 800f830:	6800      	ldr	r0, [r0, #0]
 800f832:	f7ff bf85 	b.w	800f740 <_strtoul_l.constprop.0>
 800f836:	bf00      	nop
 800f838:	20000110 	.word	0x20000110

0800f83c <__submore>:
 800f83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f840:	460c      	mov	r4, r1
 800f842:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f848:	4299      	cmp	r1, r3
 800f84a:	d11d      	bne.n	800f888 <__submore+0x4c>
 800f84c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f850:	f7fb f834 	bl	800a8bc <_malloc_r>
 800f854:	b918      	cbnz	r0, 800f85e <__submore+0x22>
 800f856:	f04f 30ff 	mov.w	r0, #4294967295
 800f85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f862:	63a3      	str	r3, [r4, #56]	; 0x38
 800f864:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f868:	6360      	str	r0, [r4, #52]	; 0x34
 800f86a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800f86e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f872:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800f876:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f87a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800f87e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800f882:	6020      	str	r0, [r4, #0]
 800f884:	2000      	movs	r0, #0
 800f886:	e7e8      	b.n	800f85a <__submore+0x1e>
 800f888:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f88a:	0077      	lsls	r7, r6, #1
 800f88c:	463a      	mov	r2, r7
 800f88e:	f000 fb27 	bl	800fee0 <_realloc_r>
 800f892:	4605      	mov	r5, r0
 800f894:	2800      	cmp	r0, #0
 800f896:	d0de      	beq.n	800f856 <__submore+0x1a>
 800f898:	eb00 0806 	add.w	r8, r0, r6
 800f89c:	4601      	mov	r1, r0
 800f89e:	4632      	mov	r2, r6
 800f8a0:	4640      	mov	r0, r8
 800f8a2:	f7fe fc29 	bl	800e0f8 <memcpy>
 800f8a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800f8aa:	f8c4 8000 	str.w	r8, [r4]
 800f8ae:	e7e9      	b.n	800f884 <__submore+0x48>

0800f8b0 <__swbuf_r>:
 800f8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b2:	460e      	mov	r6, r1
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	b118      	cbz	r0, 800f8c2 <__swbuf_r+0x12>
 800f8ba:	6983      	ldr	r3, [r0, #24]
 800f8bc:	b90b      	cbnz	r3, 800f8c2 <__swbuf_r+0x12>
 800f8be:	f000 f9f3 	bl	800fca8 <__sinit>
 800f8c2:	4b21      	ldr	r3, [pc, #132]	; (800f948 <__swbuf_r+0x98>)
 800f8c4:	429c      	cmp	r4, r3
 800f8c6:	d12b      	bne.n	800f920 <__swbuf_r+0x70>
 800f8c8:	686c      	ldr	r4, [r5, #4]
 800f8ca:	69a3      	ldr	r3, [r4, #24]
 800f8cc:	60a3      	str	r3, [r4, #8]
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	071a      	lsls	r2, r3, #28
 800f8d2:	d52f      	bpl.n	800f934 <__swbuf_r+0x84>
 800f8d4:	6923      	ldr	r3, [r4, #16]
 800f8d6:	b36b      	cbz	r3, 800f934 <__swbuf_r+0x84>
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	6820      	ldr	r0, [r4, #0]
 800f8dc:	1ac0      	subs	r0, r0, r3
 800f8de:	6963      	ldr	r3, [r4, #20]
 800f8e0:	b2f6      	uxtb	r6, r6
 800f8e2:	4283      	cmp	r3, r0
 800f8e4:	4637      	mov	r7, r6
 800f8e6:	dc04      	bgt.n	800f8f2 <__swbuf_r+0x42>
 800f8e8:	4621      	mov	r1, r4
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f000 f948 	bl	800fb80 <_fflush_r>
 800f8f0:	bb30      	cbnz	r0, 800f940 <__swbuf_r+0x90>
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	3b01      	subs	r3, #1
 800f8f6:	60a3      	str	r3, [r4, #8]
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	6022      	str	r2, [r4, #0]
 800f8fe:	701e      	strb	r6, [r3, #0]
 800f900:	6963      	ldr	r3, [r4, #20]
 800f902:	3001      	adds	r0, #1
 800f904:	4283      	cmp	r3, r0
 800f906:	d004      	beq.n	800f912 <__swbuf_r+0x62>
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	07db      	lsls	r3, r3, #31
 800f90c:	d506      	bpl.n	800f91c <__swbuf_r+0x6c>
 800f90e:	2e0a      	cmp	r6, #10
 800f910:	d104      	bne.n	800f91c <__swbuf_r+0x6c>
 800f912:	4621      	mov	r1, r4
 800f914:	4628      	mov	r0, r5
 800f916:	f000 f933 	bl	800fb80 <_fflush_r>
 800f91a:	b988      	cbnz	r0, 800f940 <__swbuf_r+0x90>
 800f91c:	4638      	mov	r0, r7
 800f91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f920:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <__swbuf_r+0x9c>)
 800f922:	429c      	cmp	r4, r3
 800f924:	d101      	bne.n	800f92a <__swbuf_r+0x7a>
 800f926:	68ac      	ldr	r4, [r5, #8]
 800f928:	e7cf      	b.n	800f8ca <__swbuf_r+0x1a>
 800f92a:	4b09      	ldr	r3, [pc, #36]	; (800f950 <__swbuf_r+0xa0>)
 800f92c:	429c      	cmp	r4, r3
 800f92e:	bf08      	it	eq
 800f930:	68ec      	ldreq	r4, [r5, #12]
 800f932:	e7ca      	b.n	800f8ca <__swbuf_r+0x1a>
 800f934:	4621      	mov	r1, r4
 800f936:	4628      	mov	r0, r5
 800f938:	f000 f81a 	bl	800f970 <__swsetup_r>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d0cb      	beq.n	800f8d8 <__swbuf_r+0x28>
 800f940:	f04f 37ff 	mov.w	r7, #4294967295
 800f944:	e7ea      	b.n	800f91c <__swbuf_r+0x6c>
 800f946:	bf00      	nop
 800f948:	08011940 	.word	0x08011940
 800f94c:	08011960 	.word	0x08011960
 800f950:	08011920 	.word	0x08011920

0800f954 <__ascii_wctomb>:
 800f954:	b149      	cbz	r1, 800f96a <__ascii_wctomb+0x16>
 800f956:	2aff      	cmp	r2, #255	; 0xff
 800f958:	bf85      	ittet	hi
 800f95a:	238a      	movhi	r3, #138	; 0x8a
 800f95c:	6003      	strhi	r3, [r0, #0]
 800f95e:	700a      	strbls	r2, [r1, #0]
 800f960:	f04f 30ff 	movhi.w	r0, #4294967295
 800f964:	bf98      	it	ls
 800f966:	2001      	movls	r0, #1
 800f968:	4770      	bx	lr
 800f96a:	4608      	mov	r0, r1
 800f96c:	4770      	bx	lr
	...

0800f970 <__swsetup_r>:
 800f970:	4b32      	ldr	r3, [pc, #200]	; (800fa3c <__swsetup_r+0xcc>)
 800f972:	b570      	push	{r4, r5, r6, lr}
 800f974:	681d      	ldr	r5, [r3, #0]
 800f976:	4606      	mov	r6, r0
 800f978:	460c      	mov	r4, r1
 800f97a:	b125      	cbz	r5, 800f986 <__swsetup_r+0x16>
 800f97c:	69ab      	ldr	r3, [r5, #24]
 800f97e:	b913      	cbnz	r3, 800f986 <__swsetup_r+0x16>
 800f980:	4628      	mov	r0, r5
 800f982:	f000 f991 	bl	800fca8 <__sinit>
 800f986:	4b2e      	ldr	r3, [pc, #184]	; (800fa40 <__swsetup_r+0xd0>)
 800f988:	429c      	cmp	r4, r3
 800f98a:	d10f      	bne.n	800f9ac <__swsetup_r+0x3c>
 800f98c:	686c      	ldr	r4, [r5, #4]
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f994:	0719      	lsls	r1, r3, #28
 800f996:	d42c      	bmi.n	800f9f2 <__swsetup_r+0x82>
 800f998:	06dd      	lsls	r5, r3, #27
 800f99a:	d411      	bmi.n	800f9c0 <__swsetup_r+0x50>
 800f99c:	2309      	movs	r3, #9
 800f99e:	6033      	str	r3, [r6, #0]
 800f9a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9a4:	81a3      	strh	r3, [r4, #12]
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f9aa:	e03e      	b.n	800fa2a <__swsetup_r+0xba>
 800f9ac:	4b25      	ldr	r3, [pc, #148]	; (800fa44 <__swsetup_r+0xd4>)
 800f9ae:	429c      	cmp	r4, r3
 800f9b0:	d101      	bne.n	800f9b6 <__swsetup_r+0x46>
 800f9b2:	68ac      	ldr	r4, [r5, #8]
 800f9b4:	e7eb      	b.n	800f98e <__swsetup_r+0x1e>
 800f9b6:	4b24      	ldr	r3, [pc, #144]	; (800fa48 <__swsetup_r+0xd8>)
 800f9b8:	429c      	cmp	r4, r3
 800f9ba:	bf08      	it	eq
 800f9bc:	68ec      	ldreq	r4, [r5, #12]
 800f9be:	e7e6      	b.n	800f98e <__swsetup_r+0x1e>
 800f9c0:	0758      	lsls	r0, r3, #29
 800f9c2:	d512      	bpl.n	800f9ea <__swsetup_r+0x7a>
 800f9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9c6:	b141      	cbz	r1, 800f9da <__swsetup_r+0x6a>
 800f9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9cc:	4299      	cmp	r1, r3
 800f9ce:	d002      	beq.n	800f9d6 <__swsetup_r+0x66>
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	f7fa ff07 	bl	800a7e4 <_free_r>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	6363      	str	r3, [r4, #52]	; 0x34
 800f9da:	89a3      	ldrh	r3, [r4, #12]
 800f9dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9e0:	81a3      	strh	r3, [r4, #12]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6063      	str	r3, [r4, #4]
 800f9e6:	6923      	ldr	r3, [r4, #16]
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	89a3      	ldrh	r3, [r4, #12]
 800f9ec:	f043 0308 	orr.w	r3, r3, #8
 800f9f0:	81a3      	strh	r3, [r4, #12]
 800f9f2:	6923      	ldr	r3, [r4, #16]
 800f9f4:	b94b      	cbnz	r3, 800fa0a <__swsetup_r+0x9a>
 800f9f6:	89a3      	ldrh	r3, [r4, #12]
 800f9f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa00:	d003      	beq.n	800fa0a <__swsetup_r+0x9a>
 800fa02:	4621      	mov	r1, r4
 800fa04:	4630      	mov	r0, r6
 800fa06:	f000 fa11 	bl	800fe2c <__smakebuf_r>
 800fa0a:	89a0      	ldrh	r0, [r4, #12]
 800fa0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa10:	f010 0301 	ands.w	r3, r0, #1
 800fa14:	d00a      	beq.n	800fa2c <__swsetup_r+0xbc>
 800fa16:	2300      	movs	r3, #0
 800fa18:	60a3      	str	r3, [r4, #8]
 800fa1a:	6963      	ldr	r3, [r4, #20]
 800fa1c:	425b      	negs	r3, r3
 800fa1e:	61a3      	str	r3, [r4, #24]
 800fa20:	6923      	ldr	r3, [r4, #16]
 800fa22:	b943      	cbnz	r3, 800fa36 <__swsetup_r+0xc6>
 800fa24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa28:	d1ba      	bne.n	800f9a0 <__swsetup_r+0x30>
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
 800fa2c:	0781      	lsls	r1, r0, #30
 800fa2e:	bf58      	it	pl
 800fa30:	6963      	ldrpl	r3, [r4, #20]
 800fa32:	60a3      	str	r3, [r4, #8]
 800fa34:	e7f4      	b.n	800fa20 <__swsetup_r+0xb0>
 800fa36:	2000      	movs	r0, #0
 800fa38:	e7f7      	b.n	800fa2a <__swsetup_r+0xba>
 800fa3a:	bf00      	nop
 800fa3c:	20000110 	.word	0x20000110
 800fa40:	08011940 	.word	0x08011940
 800fa44:	08011960 	.word	0x08011960
 800fa48:	08011920 	.word	0x08011920

0800fa4c <abort>:
 800fa4c:	b508      	push	{r3, lr}
 800fa4e:	2006      	movs	r0, #6
 800fa50:	f000 fa9e 	bl	800ff90 <raise>
 800fa54:	2001      	movs	r0, #1
 800fa56:	f7f3 ff6d 	bl	8003934 <_exit>
	...

0800fa5c <__env_lock>:
 800fa5c:	4801      	ldr	r0, [pc, #4]	; (800fa64 <__env_lock+0x8>)
 800fa5e:	f7fe bb23 	b.w	800e0a8 <__retarget_lock_acquire_recursive>
 800fa62:	bf00      	nop
 800fa64:	20000af8 	.word	0x20000af8

0800fa68 <__env_unlock>:
 800fa68:	4801      	ldr	r0, [pc, #4]	; (800fa70 <__env_unlock+0x8>)
 800fa6a:	f7fe bb1f 	b.w	800e0ac <__retarget_lock_release_recursive>
 800fa6e:	bf00      	nop
 800fa70:	20000af8 	.word	0x20000af8

0800fa74 <__sflush_r>:
 800fa74:	898a      	ldrh	r2, [r1, #12]
 800fa76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7a:	4605      	mov	r5, r0
 800fa7c:	0710      	lsls	r0, r2, #28
 800fa7e:	460c      	mov	r4, r1
 800fa80:	d458      	bmi.n	800fb34 <__sflush_r+0xc0>
 800fa82:	684b      	ldr	r3, [r1, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	dc05      	bgt.n	800fa94 <__sflush_r+0x20>
 800fa88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	dc02      	bgt.n	800fa94 <__sflush_r+0x20>
 800fa8e:	2000      	movs	r0, #0
 800fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa96:	2e00      	cmp	r6, #0
 800fa98:	d0f9      	beq.n	800fa8e <__sflush_r+0x1a>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800faa0:	682f      	ldr	r7, [r5, #0]
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	d032      	beq.n	800fb0c <__sflush_r+0x98>
 800faa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800faa8:	89a3      	ldrh	r3, [r4, #12]
 800faaa:	075a      	lsls	r2, r3, #29
 800faac:	d505      	bpl.n	800faba <__sflush_r+0x46>
 800faae:	6863      	ldr	r3, [r4, #4]
 800fab0:	1ac0      	subs	r0, r0, r3
 800fab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fab4:	b10b      	cbz	r3, 800faba <__sflush_r+0x46>
 800fab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fab8:	1ac0      	subs	r0, r0, r3
 800faba:	2300      	movs	r3, #0
 800fabc:	4602      	mov	r2, r0
 800fabe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fac0:	6a21      	ldr	r1, [r4, #32]
 800fac2:	4628      	mov	r0, r5
 800fac4:	47b0      	blx	r6
 800fac6:	1c43      	adds	r3, r0, #1
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	d106      	bne.n	800fada <__sflush_r+0x66>
 800facc:	6829      	ldr	r1, [r5, #0]
 800face:	291d      	cmp	r1, #29
 800fad0:	d82c      	bhi.n	800fb2c <__sflush_r+0xb8>
 800fad2:	4a2a      	ldr	r2, [pc, #168]	; (800fb7c <__sflush_r+0x108>)
 800fad4:	40ca      	lsrs	r2, r1
 800fad6:	07d6      	lsls	r6, r2, #31
 800fad8:	d528      	bpl.n	800fb2c <__sflush_r+0xb8>
 800fada:	2200      	movs	r2, #0
 800fadc:	6062      	str	r2, [r4, #4]
 800fade:	04d9      	lsls	r1, r3, #19
 800fae0:	6922      	ldr	r2, [r4, #16]
 800fae2:	6022      	str	r2, [r4, #0]
 800fae4:	d504      	bpl.n	800faf0 <__sflush_r+0x7c>
 800fae6:	1c42      	adds	r2, r0, #1
 800fae8:	d101      	bne.n	800faee <__sflush_r+0x7a>
 800faea:	682b      	ldr	r3, [r5, #0]
 800faec:	b903      	cbnz	r3, 800faf0 <__sflush_r+0x7c>
 800faee:	6560      	str	r0, [r4, #84]	; 0x54
 800faf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faf2:	602f      	str	r7, [r5, #0]
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d0ca      	beq.n	800fa8e <__sflush_r+0x1a>
 800faf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fafc:	4299      	cmp	r1, r3
 800fafe:	d002      	beq.n	800fb06 <__sflush_r+0x92>
 800fb00:	4628      	mov	r0, r5
 800fb02:	f7fa fe6f 	bl	800a7e4 <_free_r>
 800fb06:	2000      	movs	r0, #0
 800fb08:	6360      	str	r0, [r4, #52]	; 0x34
 800fb0a:	e7c1      	b.n	800fa90 <__sflush_r+0x1c>
 800fb0c:	6a21      	ldr	r1, [r4, #32]
 800fb0e:	2301      	movs	r3, #1
 800fb10:	4628      	mov	r0, r5
 800fb12:	47b0      	blx	r6
 800fb14:	1c41      	adds	r1, r0, #1
 800fb16:	d1c7      	bne.n	800faa8 <__sflush_r+0x34>
 800fb18:	682b      	ldr	r3, [r5, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d0c4      	beq.n	800faa8 <__sflush_r+0x34>
 800fb1e:	2b1d      	cmp	r3, #29
 800fb20:	d001      	beq.n	800fb26 <__sflush_r+0xb2>
 800fb22:	2b16      	cmp	r3, #22
 800fb24:	d101      	bne.n	800fb2a <__sflush_r+0xb6>
 800fb26:	602f      	str	r7, [r5, #0]
 800fb28:	e7b1      	b.n	800fa8e <__sflush_r+0x1a>
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb30:	81a3      	strh	r3, [r4, #12]
 800fb32:	e7ad      	b.n	800fa90 <__sflush_r+0x1c>
 800fb34:	690f      	ldr	r7, [r1, #16]
 800fb36:	2f00      	cmp	r7, #0
 800fb38:	d0a9      	beq.n	800fa8e <__sflush_r+0x1a>
 800fb3a:	0793      	lsls	r3, r2, #30
 800fb3c:	680e      	ldr	r6, [r1, #0]
 800fb3e:	bf08      	it	eq
 800fb40:	694b      	ldreq	r3, [r1, #20]
 800fb42:	600f      	str	r7, [r1, #0]
 800fb44:	bf18      	it	ne
 800fb46:	2300      	movne	r3, #0
 800fb48:	eba6 0807 	sub.w	r8, r6, r7
 800fb4c:	608b      	str	r3, [r1, #8]
 800fb4e:	f1b8 0f00 	cmp.w	r8, #0
 800fb52:	dd9c      	ble.n	800fa8e <__sflush_r+0x1a>
 800fb54:	6a21      	ldr	r1, [r4, #32]
 800fb56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb58:	4643      	mov	r3, r8
 800fb5a:	463a      	mov	r2, r7
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	47b0      	blx	r6
 800fb60:	2800      	cmp	r0, #0
 800fb62:	dc06      	bgt.n	800fb72 <__sflush_r+0xfe>
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb6a:	81a3      	strh	r3, [r4, #12]
 800fb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb70:	e78e      	b.n	800fa90 <__sflush_r+0x1c>
 800fb72:	4407      	add	r7, r0
 800fb74:	eba8 0800 	sub.w	r8, r8, r0
 800fb78:	e7e9      	b.n	800fb4e <__sflush_r+0xda>
 800fb7a:	bf00      	nop
 800fb7c:	20400001 	.word	0x20400001

0800fb80 <_fflush_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	690b      	ldr	r3, [r1, #16]
 800fb84:	4605      	mov	r5, r0
 800fb86:	460c      	mov	r4, r1
 800fb88:	b913      	cbnz	r3, 800fb90 <_fflush_r+0x10>
 800fb8a:	2500      	movs	r5, #0
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	bd38      	pop	{r3, r4, r5, pc}
 800fb90:	b118      	cbz	r0, 800fb9a <_fflush_r+0x1a>
 800fb92:	6983      	ldr	r3, [r0, #24]
 800fb94:	b90b      	cbnz	r3, 800fb9a <_fflush_r+0x1a>
 800fb96:	f000 f887 	bl	800fca8 <__sinit>
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <_fflush_r+0x6c>)
 800fb9c:	429c      	cmp	r4, r3
 800fb9e:	d11b      	bne.n	800fbd8 <_fflush_r+0x58>
 800fba0:	686c      	ldr	r4, [r5, #4]
 800fba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d0ef      	beq.n	800fb8a <_fflush_r+0xa>
 800fbaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbac:	07d0      	lsls	r0, r2, #31
 800fbae:	d404      	bmi.n	800fbba <_fflush_r+0x3a>
 800fbb0:	0599      	lsls	r1, r3, #22
 800fbb2:	d402      	bmi.n	800fbba <_fflush_r+0x3a>
 800fbb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbb6:	f7fe fa77 	bl	800e0a8 <__retarget_lock_acquire_recursive>
 800fbba:	4628      	mov	r0, r5
 800fbbc:	4621      	mov	r1, r4
 800fbbe:	f7ff ff59 	bl	800fa74 <__sflush_r>
 800fbc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbc4:	07da      	lsls	r2, r3, #31
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	d4e0      	bmi.n	800fb8c <_fflush_r+0xc>
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	059b      	lsls	r3, r3, #22
 800fbce:	d4dd      	bmi.n	800fb8c <_fflush_r+0xc>
 800fbd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbd2:	f7fe fa6b 	bl	800e0ac <__retarget_lock_release_recursive>
 800fbd6:	e7d9      	b.n	800fb8c <_fflush_r+0xc>
 800fbd8:	4b05      	ldr	r3, [pc, #20]	; (800fbf0 <_fflush_r+0x70>)
 800fbda:	429c      	cmp	r4, r3
 800fbdc:	d101      	bne.n	800fbe2 <_fflush_r+0x62>
 800fbde:	68ac      	ldr	r4, [r5, #8]
 800fbe0:	e7df      	b.n	800fba2 <_fflush_r+0x22>
 800fbe2:	4b04      	ldr	r3, [pc, #16]	; (800fbf4 <_fflush_r+0x74>)
 800fbe4:	429c      	cmp	r4, r3
 800fbe6:	bf08      	it	eq
 800fbe8:	68ec      	ldreq	r4, [r5, #12]
 800fbea:	e7da      	b.n	800fba2 <_fflush_r+0x22>
 800fbec:	08011940 	.word	0x08011940
 800fbf0:	08011960 	.word	0x08011960
 800fbf4:	08011920 	.word	0x08011920

0800fbf8 <std>:
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	b510      	push	{r4, lr}
 800fbfc:	4604      	mov	r4, r0
 800fbfe:	e9c0 3300 	strd	r3, r3, [r0]
 800fc02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc06:	6083      	str	r3, [r0, #8]
 800fc08:	8181      	strh	r1, [r0, #12]
 800fc0a:	6643      	str	r3, [r0, #100]	; 0x64
 800fc0c:	81c2      	strh	r2, [r0, #14]
 800fc0e:	6183      	str	r3, [r0, #24]
 800fc10:	4619      	mov	r1, r3
 800fc12:	2208      	movs	r2, #8
 800fc14:	305c      	adds	r0, #92	; 0x5c
 800fc16:	f7fa fddd 	bl	800a7d4 <memset>
 800fc1a:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <std+0x38>)
 800fc1c:	6263      	str	r3, [r4, #36]	; 0x24
 800fc1e:	4b05      	ldr	r3, [pc, #20]	; (800fc34 <std+0x3c>)
 800fc20:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc22:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <std+0x40>)
 800fc24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc26:	4b05      	ldr	r3, [pc, #20]	; (800fc3c <std+0x44>)
 800fc28:	6224      	str	r4, [r4, #32]
 800fc2a:	6323      	str	r3, [r4, #48]	; 0x30
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	bf00      	nop
 800fc30:	0800b75d 	.word	0x0800b75d
 800fc34:	0800b783 	.word	0x0800b783
 800fc38:	0800b7bb 	.word	0x0800b7bb
 800fc3c:	0800b7df 	.word	0x0800b7df

0800fc40 <_cleanup_r>:
 800fc40:	4901      	ldr	r1, [pc, #4]	; (800fc48 <_cleanup_r+0x8>)
 800fc42:	f000 b8af 	b.w	800fda4 <_fwalk_reent>
 800fc46:	bf00      	nop
 800fc48:	0800fb81 	.word	0x0800fb81

0800fc4c <__sfmoreglue>:
 800fc4c:	b570      	push	{r4, r5, r6, lr}
 800fc4e:	2268      	movs	r2, #104	; 0x68
 800fc50:	1e4d      	subs	r5, r1, #1
 800fc52:	4355      	muls	r5, r2
 800fc54:	460e      	mov	r6, r1
 800fc56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc5a:	f7fa fe2f 	bl	800a8bc <_malloc_r>
 800fc5e:	4604      	mov	r4, r0
 800fc60:	b140      	cbz	r0, 800fc74 <__sfmoreglue+0x28>
 800fc62:	2100      	movs	r1, #0
 800fc64:	e9c0 1600 	strd	r1, r6, [r0]
 800fc68:	300c      	adds	r0, #12
 800fc6a:	60a0      	str	r0, [r4, #8]
 800fc6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fc70:	f7fa fdb0 	bl	800a7d4 <memset>
 800fc74:	4620      	mov	r0, r4
 800fc76:	bd70      	pop	{r4, r5, r6, pc}

0800fc78 <__sfp_lock_acquire>:
 800fc78:	4801      	ldr	r0, [pc, #4]	; (800fc80 <__sfp_lock_acquire+0x8>)
 800fc7a:	f7fe ba15 	b.w	800e0a8 <__retarget_lock_acquire_recursive>
 800fc7e:	bf00      	nop
 800fc80:	20000afa 	.word	0x20000afa

0800fc84 <__sfp_lock_release>:
 800fc84:	4801      	ldr	r0, [pc, #4]	; (800fc8c <__sfp_lock_release+0x8>)
 800fc86:	f7fe ba11 	b.w	800e0ac <__retarget_lock_release_recursive>
 800fc8a:	bf00      	nop
 800fc8c:	20000afa 	.word	0x20000afa

0800fc90 <__sinit_lock_acquire>:
 800fc90:	4801      	ldr	r0, [pc, #4]	; (800fc98 <__sinit_lock_acquire+0x8>)
 800fc92:	f7fe ba09 	b.w	800e0a8 <__retarget_lock_acquire_recursive>
 800fc96:	bf00      	nop
 800fc98:	20000afb 	.word	0x20000afb

0800fc9c <__sinit_lock_release>:
 800fc9c:	4801      	ldr	r0, [pc, #4]	; (800fca4 <__sinit_lock_release+0x8>)
 800fc9e:	f7fe ba05 	b.w	800e0ac <__retarget_lock_release_recursive>
 800fca2:	bf00      	nop
 800fca4:	20000afb 	.word	0x20000afb

0800fca8 <__sinit>:
 800fca8:	b510      	push	{r4, lr}
 800fcaa:	4604      	mov	r4, r0
 800fcac:	f7ff fff0 	bl	800fc90 <__sinit_lock_acquire>
 800fcb0:	69a3      	ldr	r3, [r4, #24]
 800fcb2:	b11b      	cbz	r3, 800fcbc <__sinit+0x14>
 800fcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcb8:	f7ff bff0 	b.w	800fc9c <__sinit_lock_release>
 800fcbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fcc0:	6523      	str	r3, [r4, #80]	; 0x50
 800fcc2:	4b13      	ldr	r3, [pc, #76]	; (800fd10 <__sinit+0x68>)
 800fcc4:	4a13      	ldr	r2, [pc, #76]	; (800fd14 <__sinit+0x6c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	62a2      	str	r2, [r4, #40]	; 0x28
 800fcca:	42a3      	cmp	r3, r4
 800fccc:	bf04      	itt	eq
 800fcce:	2301      	moveq	r3, #1
 800fcd0:	61a3      	streq	r3, [r4, #24]
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f000 f820 	bl	800fd18 <__sfp>
 800fcd8:	6060      	str	r0, [r4, #4]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 f81c 	bl	800fd18 <__sfp>
 800fce0:	60a0      	str	r0, [r4, #8]
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 f818 	bl	800fd18 <__sfp>
 800fce8:	2200      	movs	r2, #0
 800fcea:	60e0      	str	r0, [r4, #12]
 800fcec:	2104      	movs	r1, #4
 800fcee:	6860      	ldr	r0, [r4, #4]
 800fcf0:	f7ff ff82 	bl	800fbf8 <std>
 800fcf4:	68a0      	ldr	r0, [r4, #8]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	2109      	movs	r1, #9
 800fcfa:	f7ff ff7d 	bl	800fbf8 <std>
 800fcfe:	68e0      	ldr	r0, [r4, #12]
 800fd00:	2202      	movs	r2, #2
 800fd02:	2112      	movs	r1, #18
 800fd04:	f7ff ff78 	bl	800fbf8 <std>
 800fd08:	2301      	movs	r3, #1
 800fd0a:	61a3      	str	r3, [r4, #24]
 800fd0c:	e7d2      	b.n	800fcb4 <__sinit+0xc>
 800fd0e:	bf00      	nop
 800fd10:	080113d0 	.word	0x080113d0
 800fd14:	0800fc41 	.word	0x0800fc41

0800fd18 <__sfp>:
 800fd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd1a:	4607      	mov	r7, r0
 800fd1c:	f7ff ffac 	bl	800fc78 <__sfp_lock_acquire>
 800fd20:	4b1e      	ldr	r3, [pc, #120]	; (800fd9c <__sfp+0x84>)
 800fd22:	681e      	ldr	r6, [r3, #0]
 800fd24:	69b3      	ldr	r3, [r6, #24]
 800fd26:	b913      	cbnz	r3, 800fd2e <__sfp+0x16>
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7ff ffbd 	bl	800fca8 <__sinit>
 800fd2e:	3648      	adds	r6, #72	; 0x48
 800fd30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd34:	3b01      	subs	r3, #1
 800fd36:	d503      	bpl.n	800fd40 <__sfp+0x28>
 800fd38:	6833      	ldr	r3, [r6, #0]
 800fd3a:	b30b      	cbz	r3, 800fd80 <__sfp+0x68>
 800fd3c:	6836      	ldr	r6, [r6, #0]
 800fd3e:	e7f7      	b.n	800fd30 <__sfp+0x18>
 800fd40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd44:	b9d5      	cbnz	r5, 800fd7c <__sfp+0x64>
 800fd46:	4b16      	ldr	r3, [pc, #88]	; (800fda0 <__sfp+0x88>)
 800fd48:	60e3      	str	r3, [r4, #12]
 800fd4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd4e:	6665      	str	r5, [r4, #100]	; 0x64
 800fd50:	f7fe f9a8 	bl	800e0a4 <__retarget_lock_init_recursive>
 800fd54:	f7ff ff96 	bl	800fc84 <__sfp_lock_release>
 800fd58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fd5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fd60:	6025      	str	r5, [r4, #0]
 800fd62:	61a5      	str	r5, [r4, #24]
 800fd64:	2208      	movs	r2, #8
 800fd66:	4629      	mov	r1, r5
 800fd68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd6c:	f7fa fd32 	bl	800a7d4 <memset>
 800fd70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd78:	4620      	mov	r0, r4
 800fd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd7c:	3468      	adds	r4, #104	; 0x68
 800fd7e:	e7d9      	b.n	800fd34 <__sfp+0x1c>
 800fd80:	2104      	movs	r1, #4
 800fd82:	4638      	mov	r0, r7
 800fd84:	f7ff ff62 	bl	800fc4c <__sfmoreglue>
 800fd88:	4604      	mov	r4, r0
 800fd8a:	6030      	str	r0, [r6, #0]
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d1d5      	bne.n	800fd3c <__sfp+0x24>
 800fd90:	f7ff ff78 	bl	800fc84 <__sfp_lock_release>
 800fd94:	230c      	movs	r3, #12
 800fd96:	603b      	str	r3, [r7, #0]
 800fd98:	e7ee      	b.n	800fd78 <__sfp+0x60>
 800fd9a:	bf00      	nop
 800fd9c:	080113d0 	.word	0x080113d0
 800fda0:	ffff0001 	.word	0xffff0001

0800fda4 <_fwalk_reent>:
 800fda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fda8:	4606      	mov	r6, r0
 800fdaa:	4688      	mov	r8, r1
 800fdac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fdb0:	2700      	movs	r7, #0
 800fdb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fdb6:	f1b9 0901 	subs.w	r9, r9, #1
 800fdba:	d505      	bpl.n	800fdc8 <_fwalk_reent+0x24>
 800fdbc:	6824      	ldr	r4, [r4, #0]
 800fdbe:	2c00      	cmp	r4, #0
 800fdc0:	d1f7      	bne.n	800fdb2 <_fwalk_reent+0xe>
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdc8:	89ab      	ldrh	r3, [r5, #12]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d907      	bls.n	800fdde <_fwalk_reent+0x3a>
 800fdce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	d003      	beq.n	800fdde <_fwalk_reent+0x3a>
 800fdd6:	4629      	mov	r1, r5
 800fdd8:	4630      	mov	r0, r6
 800fdda:	47c0      	blx	r8
 800fddc:	4307      	orrs	r7, r0
 800fdde:	3568      	adds	r5, #104	; 0x68
 800fde0:	e7e9      	b.n	800fdb6 <_fwalk_reent+0x12>

0800fde2 <__swhatbuf_r>:
 800fde2:	b570      	push	{r4, r5, r6, lr}
 800fde4:	460e      	mov	r6, r1
 800fde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdea:	2900      	cmp	r1, #0
 800fdec:	b096      	sub	sp, #88	; 0x58
 800fdee:	4614      	mov	r4, r2
 800fdf0:	461d      	mov	r5, r3
 800fdf2:	da08      	bge.n	800fe06 <__swhatbuf_r+0x24>
 800fdf4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	602a      	str	r2, [r5, #0]
 800fdfc:	061a      	lsls	r2, r3, #24
 800fdfe:	d410      	bmi.n	800fe22 <__swhatbuf_r+0x40>
 800fe00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe04:	e00e      	b.n	800fe24 <__swhatbuf_r+0x42>
 800fe06:	466a      	mov	r2, sp
 800fe08:	f000 f8de 	bl	800ffc8 <_fstat_r>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	dbf1      	blt.n	800fdf4 <__swhatbuf_r+0x12>
 800fe10:	9a01      	ldr	r2, [sp, #4]
 800fe12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe1a:	425a      	negs	r2, r3
 800fe1c:	415a      	adcs	r2, r3
 800fe1e:	602a      	str	r2, [r5, #0]
 800fe20:	e7ee      	b.n	800fe00 <__swhatbuf_r+0x1e>
 800fe22:	2340      	movs	r3, #64	; 0x40
 800fe24:	2000      	movs	r0, #0
 800fe26:	6023      	str	r3, [r4, #0]
 800fe28:	b016      	add	sp, #88	; 0x58
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}

0800fe2c <__smakebuf_r>:
 800fe2c:	898b      	ldrh	r3, [r1, #12]
 800fe2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe30:	079d      	lsls	r5, r3, #30
 800fe32:	4606      	mov	r6, r0
 800fe34:	460c      	mov	r4, r1
 800fe36:	d507      	bpl.n	800fe48 <__smakebuf_r+0x1c>
 800fe38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe3c:	6023      	str	r3, [r4, #0]
 800fe3e:	6123      	str	r3, [r4, #16]
 800fe40:	2301      	movs	r3, #1
 800fe42:	6163      	str	r3, [r4, #20]
 800fe44:	b002      	add	sp, #8
 800fe46:	bd70      	pop	{r4, r5, r6, pc}
 800fe48:	ab01      	add	r3, sp, #4
 800fe4a:	466a      	mov	r2, sp
 800fe4c:	f7ff ffc9 	bl	800fde2 <__swhatbuf_r>
 800fe50:	9900      	ldr	r1, [sp, #0]
 800fe52:	4605      	mov	r5, r0
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7fa fd31 	bl	800a8bc <_malloc_r>
 800fe5a:	b948      	cbnz	r0, 800fe70 <__smakebuf_r+0x44>
 800fe5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe60:	059a      	lsls	r2, r3, #22
 800fe62:	d4ef      	bmi.n	800fe44 <__smakebuf_r+0x18>
 800fe64:	f023 0303 	bic.w	r3, r3, #3
 800fe68:	f043 0302 	orr.w	r3, r3, #2
 800fe6c:	81a3      	strh	r3, [r4, #12]
 800fe6e:	e7e3      	b.n	800fe38 <__smakebuf_r+0xc>
 800fe70:	4b0d      	ldr	r3, [pc, #52]	; (800fea8 <__smakebuf_r+0x7c>)
 800fe72:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	6020      	str	r0, [r4, #0]
 800fe78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe7c:	81a3      	strh	r3, [r4, #12]
 800fe7e:	9b00      	ldr	r3, [sp, #0]
 800fe80:	6163      	str	r3, [r4, #20]
 800fe82:	9b01      	ldr	r3, [sp, #4]
 800fe84:	6120      	str	r0, [r4, #16]
 800fe86:	b15b      	cbz	r3, 800fea0 <__smakebuf_r+0x74>
 800fe88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe8c:	4630      	mov	r0, r6
 800fe8e:	f000 f8ad 	bl	800ffec <_isatty_r>
 800fe92:	b128      	cbz	r0, 800fea0 <__smakebuf_r+0x74>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f023 0303 	bic.w	r3, r3, #3
 800fe9a:	f043 0301 	orr.w	r3, r3, #1
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	89a0      	ldrh	r0, [r4, #12]
 800fea2:	4305      	orrs	r5, r0
 800fea4:	81a5      	strh	r5, [r4, #12]
 800fea6:	e7cd      	b.n	800fe44 <__smakebuf_r+0x18>
 800fea8:	0800fc41 	.word	0x0800fc41

0800feac <memmove>:
 800feac:	4288      	cmp	r0, r1
 800feae:	b510      	push	{r4, lr}
 800feb0:	eb01 0402 	add.w	r4, r1, r2
 800feb4:	d902      	bls.n	800febc <memmove+0x10>
 800feb6:	4284      	cmp	r4, r0
 800feb8:	4623      	mov	r3, r4
 800feba:	d807      	bhi.n	800fecc <memmove+0x20>
 800febc:	1e43      	subs	r3, r0, #1
 800febe:	42a1      	cmp	r1, r4
 800fec0:	d008      	beq.n	800fed4 <memmove+0x28>
 800fec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feca:	e7f8      	b.n	800febe <memmove+0x12>
 800fecc:	4402      	add	r2, r0
 800fece:	4601      	mov	r1, r0
 800fed0:	428a      	cmp	r2, r1
 800fed2:	d100      	bne.n	800fed6 <memmove+0x2a>
 800fed4:	bd10      	pop	{r4, pc}
 800fed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fede:	e7f7      	b.n	800fed0 <memmove+0x24>

0800fee0 <_realloc_r>:
 800fee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fee4:	4680      	mov	r8, r0
 800fee6:	4614      	mov	r4, r2
 800fee8:	460e      	mov	r6, r1
 800feea:	b921      	cbnz	r1, 800fef6 <_realloc_r+0x16>
 800feec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fef0:	4611      	mov	r1, r2
 800fef2:	f7fa bce3 	b.w	800a8bc <_malloc_r>
 800fef6:	b92a      	cbnz	r2, 800ff04 <_realloc_r+0x24>
 800fef8:	f7fa fc74 	bl	800a7e4 <_free_r>
 800fefc:	4625      	mov	r5, r4
 800fefe:	4628      	mov	r0, r5
 800ff00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff04:	f000 f882 	bl	801000c <_malloc_usable_size_r>
 800ff08:	4284      	cmp	r4, r0
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	d802      	bhi.n	800ff14 <_realloc_r+0x34>
 800ff0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff12:	d812      	bhi.n	800ff3a <_realloc_r+0x5a>
 800ff14:	4621      	mov	r1, r4
 800ff16:	4640      	mov	r0, r8
 800ff18:	f7fa fcd0 	bl	800a8bc <_malloc_r>
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d0ed      	beq.n	800fefe <_realloc_r+0x1e>
 800ff22:	42bc      	cmp	r4, r7
 800ff24:	4622      	mov	r2, r4
 800ff26:	4631      	mov	r1, r6
 800ff28:	bf28      	it	cs
 800ff2a:	463a      	movcs	r2, r7
 800ff2c:	f7fe f8e4 	bl	800e0f8 <memcpy>
 800ff30:	4631      	mov	r1, r6
 800ff32:	4640      	mov	r0, r8
 800ff34:	f7fa fc56 	bl	800a7e4 <_free_r>
 800ff38:	e7e1      	b.n	800fefe <_realloc_r+0x1e>
 800ff3a:	4635      	mov	r5, r6
 800ff3c:	e7df      	b.n	800fefe <_realloc_r+0x1e>

0800ff3e <_raise_r>:
 800ff3e:	291f      	cmp	r1, #31
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	4604      	mov	r4, r0
 800ff44:	460d      	mov	r5, r1
 800ff46:	d904      	bls.n	800ff52 <_raise_r+0x14>
 800ff48:	2316      	movs	r3, #22
 800ff4a:	6003      	str	r3, [r0, #0]
 800ff4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff50:	bd38      	pop	{r3, r4, r5, pc}
 800ff52:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff54:	b112      	cbz	r2, 800ff5c <_raise_r+0x1e>
 800ff56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff5a:	b94b      	cbnz	r3, 800ff70 <_raise_r+0x32>
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f000 f831 	bl	800ffc4 <_getpid_r>
 800ff62:	462a      	mov	r2, r5
 800ff64:	4601      	mov	r1, r0
 800ff66:	4620      	mov	r0, r4
 800ff68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff6c:	f000 b818 	b.w	800ffa0 <_kill_r>
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d00a      	beq.n	800ff8a <_raise_r+0x4c>
 800ff74:	1c59      	adds	r1, r3, #1
 800ff76:	d103      	bne.n	800ff80 <_raise_r+0x42>
 800ff78:	2316      	movs	r3, #22
 800ff7a:	6003      	str	r3, [r0, #0]
 800ff7c:	2001      	movs	r0, #1
 800ff7e:	e7e7      	b.n	800ff50 <_raise_r+0x12>
 800ff80:	2400      	movs	r4, #0
 800ff82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff86:	4628      	mov	r0, r5
 800ff88:	4798      	blx	r3
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	e7e0      	b.n	800ff50 <_raise_r+0x12>
	...

0800ff90 <raise>:
 800ff90:	4b02      	ldr	r3, [pc, #8]	; (800ff9c <raise+0xc>)
 800ff92:	4601      	mov	r1, r0
 800ff94:	6818      	ldr	r0, [r3, #0]
 800ff96:	f7ff bfd2 	b.w	800ff3e <_raise_r>
 800ff9a:	bf00      	nop
 800ff9c:	20000110 	.word	0x20000110

0800ffa0 <_kill_r>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	4d07      	ldr	r5, [pc, #28]	; (800ffc0 <_kill_r+0x20>)
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	4608      	mov	r0, r1
 800ffaa:	4611      	mov	r1, r2
 800ffac:	602b      	str	r3, [r5, #0]
 800ffae:	f7f3 fcb1 	bl	8003914 <_kill>
 800ffb2:	1c43      	adds	r3, r0, #1
 800ffb4:	d102      	bne.n	800ffbc <_kill_r+0x1c>
 800ffb6:	682b      	ldr	r3, [r5, #0]
 800ffb8:	b103      	cbz	r3, 800ffbc <_kill_r+0x1c>
 800ffba:	6023      	str	r3, [r4, #0]
 800ffbc:	bd38      	pop	{r3, r4, r5, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20000b00 	.word	0x20000b00

0800ffc4 <_getpid_r>:
 800ffc4:	f7f3 bc9e 	b.w	8003904 <_getpid>

0800ffc8 <_fstat_r>:
 800ffc8:	b538      	push	{r3, r4, r5, lr}
 800ffca:	4d07      	ldr	r5, [pc, #28]	; (800ffe8 <_fstat_r+0x20>)
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4604      	mov	r4, r0
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	4611      	mov	r1, r2
 800ffd4:	602b      	str	r3, [r5, #0]
 800ffd6:	f7f3 fcfc 	bl	80039d2 <_fstat>
 800ffda:	1c43      	adds	r3, r0, #1
 800ffdc:	d102      	bne.n	800ffe4 <_fstat_r+0x1c>
 800ffde:	682b      	ldr	r3, [r5, #0]
 800ffe0:	b103      	cbz	r3, 800ffe4 <_fstat_r+0x1c>
 800ffe2:	6023      	str	r3, [r4, #0]
 800ffe4:	bd38      	pop	{r3, r4, r5, pc}
 800ffe6:	bf00      	nop
 800ffe8:	20000b00 	.word	0x20000b00

0800ffec <_isatty_r>:
 800ffec:	b538      	push	{r3, r4, r5, lr}
 800ffee:	4d06      	ldr	r5, [pc, #24]	; (8010008 <_isatty_r+0x1c>)
 800fff0:	2300      	movs	r3, #0
 800fff2:	4604      	mov	r4, r0
 800fff4:	4608      	mov	r0, r1
 800fff6:	602b      	str	r3, [r5, #0]
 800fff8:	f7f3 fcfb 	bl	80039f2 <_isatty>
 800fffc:	1c43      	adds	r3, r0, #1
 800fffe:	d102      	bne.n	8010006 <_isatty_r+0x1a>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	b103      	cbz	r3, 8010006 <_isatty_r+0x1a>
 8010004:	6023      	str	r3, [r4, #0]
 8010006:	bd38      	pop	{r3, r4, r5, pc}
 8010008:	20000b00 	.word	0x20000b00

0801000c <_malloc_usable_size_r>:
 801000c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010010:	1f18      	subs	r0, r3, #4
 8010012:	2b00      	cmp	r3, #0
 8010014:	bfbc      	itt	lt
 8010016:	580b      	ldrlt	r3, [r1, r0]
 8010018:	18c0      	addlt	r0, r0, r3
 801001a:	4770      	bx	lr
 801001c:	0000      	movs	r0, r0
	...

08010020 <sin>:
 8010020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010022:	ec53 2b10 	vmov	r2, r3, d0
 8010026:	4828      	ldr	r0, [pc, #160]	; (80100c8 <sin+0xa8>)
 8010028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801002c:	4281      	cmp	r1, r0
 801002e:	dc07      	bgt.n	8010040 <sin+0x20>
 8010030:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80100c0 <sin+0xa0>
 8010034:	2000      	movs	r0, #0
 8010036:	b005      	add	sp, #20
 8010038:	f85d eb04 	ldr.w	lr, [sp], #4
 801003c:	f000 be6c 	b.w	8010d18 <__kernel_sin>
 8010040:	4822      	ldr	r0, [pc, #136]	; (80100cc <sin+0xac>)
 8010042:	4281      	cmp	r1, r0
 8010044:	dd09      	ble.n	801005a <sin+0x3a>
 8010046:	ee10 0a10 	vmov	r0, s0
 801004a:	4619      	mov	r1, r3
 801004c:	f7f0 f926 	bl	800029c <__aeabi_dsub>
 8010050:	ec41 0b10 	vmov	d0, r0, r1
 8010054:	b005      	add	sp, #20
 8010056:	f85d fb04 	ldr.w	pc, [sp], #4
 801005a:	4668      	mov	r0, sp
 801005c:	f000 f838 	bl	80100d0 <__ieee754_rem_pio2>
 8010060:	f000 0003 	and.w	r0, r0, #3
 8010064:	2801      	cmp	r0, #1
 8010066:	d00c      	beq.n	8010082 <sin+0x62>
 8010068:	2802      	cmp	r0, #2
 801006a:	d011      	beq.n	8010090 <sin+0x70>
 801006c:	b9f0      	cbnz	r0, 80100ac <sin+0x8c>
 801006e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010072:	ed9d 0b00 	vldr	d0, [sp]
 8010076:	2001      	movs	r0, #1
 8010078:	f000 fe4e 	bl	8010d18 <__kernel_sin>
 801007c:	ec51 0b10 	vmov	r0, r1, d0
 8010080:	e7e6      	b.n	8010050 <sin+0x30>
 8010082:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010086:	ed9d 0b00 	vldr	d0, [sp]
 801008a:	f000 fa2d 	bl	80104e8 <__kernel_cos>
 801008e:	e7f5      	b.n	801007c <sin+0x5c>
 8010090:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010094:	ed9d 0b00 	vldr	d0, [sp]
 8010098:	2001      	movs	r0, #1
 801009a:	f000 fe3d 	bl	8010d18 <__kernel_sin>
 801009e:	ec53 2b10 	vmov	r2, r3, d0
 80100a2:	ee10 0a10 	vmov	r0, s0
 80100a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80100aa:	e7d1      	b.n	8010050 <sin+0x30>
 80100ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80100b0:	ed9d 0b00 	vldr	d0, [sp]
 80100b4:	f000 fa18 	bl	80104e8 <__kernel_cos>
 80100b8:	e7f1      	b.n	801009e <sin+0x7e>
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w
	...
 80100c8:	3fe921fb 	.word	0x3fe921fb
 80100cc:	7fefffff 	.word	0x7fefffff

080100d0 <__ieee754_rem_pio2>:
 80100d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	ed2d 8b02 	vpush	{d8}
 80100d8:	ec55 4b10 	vmov	r4, r5, d0
 80100dc:	4bca      	ldr	r3, [pc, #808]	; (8010408 <__ieee754_rem_pio2+0x338>)
 80100de:	b08b      	sub	sp, #44	; 0x2c
 80100e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80100e4:	4598      	cmp	r8, r3
 80100e6:	4682      	mov	sl, r0
 80100e8:	9502      	str	r5, [sp, #8]
 80100ea:	dc08      	bgt.n	80100fe <__ieee754_rem_pio2+0x2e>
 80100ec:	2200      	movs	r2, #0
 80100ee:	2300      	movs	r3, #0
 80100f0:	ed80 0b00 	vstr	d0, [r0]
 80100f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80100f8:	f04f 0b00 	mov.w	fp, #0
 80100fc:	e028      	b.n	8010150 <__ieee754_rem_pio2+0x80>
 80100fe:	4bc3      	ldr	r3, [pc, #780]	; (801040c <__ieee754_rem_pio2+0x33c>)
 8010100:	4598      	cmp	r8, r3
 8010102:	dc78      	bgt.n	80101f6 <__ieee754_rem_pio2+0x126>
 8010104:	9b02      	ldr	r3, [sp, #8]
 8010106:	4ec2      	ldr	r6, [pc, #776]	; (8010410 <__ieee754_rem_pio2+0x340>)
 8010108:	2b00      	cmp	r3, #0
 801010a:	ee10 0a10 	vmov	r0, s0
 801010e:	a3b0      	add	r3, pc, #704	; (adr r3, 80103d0 <__ieee754_rem_pio2+0x300>)
 8010110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010114:	4629      	mov	r1, r5
 8010116:	dd39      	ble.n	801018c <__ieee754_rem_pio2+0xbc>
 8010118:	f7f0 f8c0 	bl	800029c <__aeabi_dsub>
 801011c:	45b0      	cmp	r8, r6
 801011e:	4604      	mov	r4, r0
 8010120:	460d      	mov	r5, r1
 8010122:	d01b      	beq.n	801015c <__ieee754_rem_pio2+0x8c>
 8010124:	a3ac      	add	r3, pc, #688	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	f7f0 f8b7 	bl	800029c <__aeabi_dsub>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	e9ca 2300 	strd	r2, r3, [sl]
 8010136:	4620      	mov	r0, r4
 8010138:	4629      	mov	r1, r5
 801013a:	f7f0 f8af 	bl	800029c <__aeabi_dsub>
 801013e:	a3a6      	add	r3, pc, #664	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 8010140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010144:	f7f0 f8aa 	bl	800029c <__aeabi_dsub>
 8010148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801014c:	f04f 0b01 	mov.w	fp, #1
 8010150:	4658      	mov	r0, fp
 8010152:	b00b      	add	sp, #44	; 0x2c
 8010154:	ecbd 8b02 	vpop	{d8}
 8010158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015c:	a3a0      	add	r3, pc, #640	; (adr r3, 80103e0 <__ieee754_rem_pio2+0x310>)
 801015e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010162:	f7f0 f89b 	bl	800029c <__aeabi_dsub>
 8010166:	a3a0      	add	r3, pc, #640	; (adr r3, 80103e8 <__ieee754_rem_pio2+0x318>)
 8010168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016c:	4604      	mov	r4, r0
 801016e:	460d      	mov	r5, r1
 8010170:	f7f0 f894 	bl	800029c <__aeabi_dsub>
 8010174:	4602      	mov	r2, r0
 8010176:	460b      	mov	r3, r1
 8010178:	e9ca 2300 	strd	r2, r3, [sl]
 801017c:	4620      	mov	r0, r4
 801017e:	4629      	mov	r1, r5
 8010180:	f7f0 f88c 	bl	800029c <__aeabi_dsub>
 8010184:	a398      	add	r3, pc, #608	; (adr r3, 80103e8 <__ieee754_rem_pio2+0x318>)
 8010186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018a:	e7db      	b.n	8010144 <__ieee754_rem_pio2+0x74>
 801018c:	f7f0 f888 	bl	80002a0 <__adddf3>
 8010190:	45b0      	cmp	r8, r6
 8010192:	4604      	mov	r4, r0
 8010194:	460d      	mov	r5, r1
 8010196:	d016      	beq.n	80101c6 <__ieee754_rem_pio2+0xf6>
 8010198:	a38f      	add	r3, pc, #572	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	f7f0 f87f 	bl	80002a0 <__adddf3>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	e9ca 2300 	strd	r2, r3, [sl]
 80101aa:	4620      	mov	r0, r4
 80101ac:	4629      	mov	r1, r5
 80101ae:	f7f0 f875 	bl	800029c <__aeabi_dsub>
 80101b2:	a389      	add	r3, pc, #548	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 80101b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b8:	f7f0 f872 	bl	80002a0 <__adddf3>
 80101bc:	f04f 3bff 	mov.w	fp, #4294967295
 80101c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80101c4:	e7c4      	b.n	8010150 <__ieee754_rem_pio2+0x80>
 80101c6:	a386      	add	r3, pc, #536	; (adr r3, 80103e0 <__ieee754_rem_pio2+0x310>)
 80101c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101cc:	f7f0 f868 	bl	80002a0 <__adddf3>
 80101d0:	a385      	add	r3, pc, #532	; (adr r3, 80103e8 <__ieee754_rem_pio2+0x318>)
 80101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d6:	4604      	mov	r4, r0
 80101d8:	460d      	mov	r5, r1
 80101da:	f7f0 f861 	bl	80002a0 <__adddf3>
 80101de:	4602      	mov	r2, r0
 80101e0:	460b      	mov	r3, r1
 80101e2:	e9ca 2300 	strd	r2, r3, [sl]
 80101e6:	4620      	mov	r0, r4
 80101e8:	4629      	mov	r1, r5
 80101ea:	f7f0 f857 	bl	800029c <__aeabi_dsub>
 80101ee:	a37e      	add	r3, pc, #504	; (adr r3, 80103e8 <__ieee754_rem_pio2+0x318>)
 80101f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f4:	e7e0      	b.n	80101b8 <__ieee754_rem_pio2+0xe8>
 80101f6:	4b87      	ldr	r3, [pc, #540]	; (8010414 <__ieee754_rem_pio2+0x344>)
 80101f8:	4598      	cmp	r8, r3
 80101fa:	f300 80d9 	bgt.w	80103b0 <__ieee754_rem_pio2+0x2e0>
 80101fe:	f000 fe49 	bl	8010e94 <fabs>
 8010202:	ec55 4b10 	vmov	r4, r5, d0
 8010206:	ee10 0a10 	vmov	r0, s0
 801020a:	a379      	add	r3, pc, #484	; (adr r3, 80103f0 <__ieee754_rem_pio2+0x320>)
 801020c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010210:	4629      	mov	r1, r5
 8010212:	f7f0 f9fb 	bl	800060c <__aeabi_dmul>
 8010216:	4b80      	ldr	r3, [pc, #512]	; (8010418 <__ieee754_rem_pio2+0x348>)
 8010218:	2200      	movs	r2, #0
 801021a:	f7f0 f841 	bl	80002a0 <__adddf3>
 801021e:	f7f0 fca5 	bl	8000b6c <__aeabi_d2iz>
 8010222:	4683      	mov	fp, r0
 8010224:	f7f0 f988 	bl	8000538 <__aeabi_i2d>
 8010228:	4602      	mov	r2, r0
 801022a:	460b      	mov	r3, r1
 801022c:	ec43 2b18 	vmov	d8, r2, r3
 8010230:	a367      	add	r3, pc, #412	; (adr r3, 80103d0 <__ieee754_rem_pio2+0x300>)
 8010232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010236:	f7f0 f9e9 	bl	800060c <__aeabi_dmul>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4620      	mov	r0, r4
 8010240:	4629      	mov	r1, r5
 8010242:	f7f0 f82b 	bl	800029c <__aeabi_dsub>
 8010246:	a364      	add	r3, pc, #400	; (adr r3, 80103d8 <__ieee754_rem_pio2+0x308>)
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	4606      	mov	r6, r0
 801024e:	460f      	mov	r7, r1
 8010250:	ec51 0b18 	vmov	r0, r1, d8
 8010254:	f7f0 f9da 	bl	800060c <__aeabi_dmul>
 8010258:	f1bb 0f1f 	cmp.w	fp, #31
 801025c:	4604      	mov	r4, r0
 801025e:	460d      	mov	r5, r1
 8010260:	dc0d      	bgt.n	801027e <__ieee754_rem_pio2+0x1ae>
 8010262:	4b6e      	ldr	r3, [pc, #440]	; (801041c <__ieee754_rem_pio2+0x34c>)
 8010264:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026c:	4543      	cmp	r3, r8
 801026e:	d006      	beq.n	801027e <__ieee754_rem_pio2+0x1ae>
 8010270:	4622      	mov	r2, r4
 8010272:	462b      	mov	r3, r5
 8010274:	4630      	mov	r0, r6
 8010276:	4639      	mov	r1, r7
 8010278:	f7f0 f810 	bl	800029c <__aeabi_dsub>
 801027c:	e00f      	b.n	801029e <__ieee754_rem_pio2+0x1ce>
 801027e:	462b      	mov	r3, r5
 8010280:	4622      	mov	r2, r4
 8010282:	4630      	mov	r0, r6
 8010284:	4639      	mov	r1, r7
 8010286:	f7f0 f809 	bl	800029c <__aeabi_dsub>
 801028a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801028e:	9303      	str	r3, [sp, #12]
 8010290:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010294:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010298:	f1b8 0f10 	cmp.w	r8, #16
 801029c:	dc02      	bgt.n	80102a4 <__ieee754_rem_pio2+0x1d4>
 801029e:	e9ca 0100 	strd	r0, r1, [sl]
 80102a2:	e039      	b.n	8010318 <__ieee754_rem_pio2+0x248>
 80102a4:	a34e      	add	r3, pc, #312	; (adr r3, 80103e0 <__ieee754_rem_pio2+0x310>)
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	ec51 0b18 	vmov	r0, r1, d8
 80102ae:	f7f0 f9ad 	bl	800060c <__aeabi_dmul>
 80102b2:	4604      	mov	r4, r0
 80102b4:	460d      	mov	r5, r1
 80102b6:	4602      	mov	r2, r0
 80102b8:	460b      	mov	r3, r1
 80102ba:	4630      	mov	r0, r6
 80102bc:	4639      	mov	r1, r7
 80102be:	f7ef ffed 	bl	800029c <__aeabi_dsub>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4680      	mov	r8, r0
 80102c8:	4689      	mov	r9, r1
 80102ca:	4630      	mov	r0, r6
 80102cc:	4639      	mov	r1, r7
 80102ce:	f7ef ffe5 	bl	800029c <__aeabi_dsub>
 80102d2:	4622      	mov	r2, r4
 80102d4:	462b      	mov	r3, r5
 80102d6:	f7ef ffe1 	bl	800029c <__aeabi_dsub>
 80102da:	a343      	add	r3, pc, #268	; (adr r3, 80103e8 <__ieee754_rem_pio2+0x318>)
 80102dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e0:	4604      	mov	r4, r0
 80102e2:	460d      	mov	r5, r1
 80102e4:	ec51 0b18 	vmov	r0, r1, d8
 80102e8:	f7f0 f990 	bl	800060c <__aeabi_dmul>
 80102ec:	4622      	mov	r2, r4
 80102ee:	462b      	mov	r3, r5
 80102f0:	f7ef ffd4 	bl	800029c <__aeabi_dsub>
 80102f4:	4602      	mov	r2, r0
 80102f6:	460b      	mov	r3, r1
 80102f8:	4604      	mov	r4, r0
 80102fa:	460d      	mov	r5, r1
 80102fc:	4640      	mov	r0, r8
 80102fe:	4649      	mov	r1, r9
 8010300:	f7ef ffcc 	bl	800029c <__aeabi_dsub>
 8010304:	9a03      	ldr	r2, [sp, #12]
 8010306:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	2b31      	cmp	r3, #49	; 0x31
 801030e:	dc24      	bgt.n	801035a <__ieee754_rem_pio2+0x28a>
 8010310:	e9ca 0100 	strd	r0, r1, [sl]
 8010314:	4646      	mov	r6, r8
 8010316:	464f      	mov	r7, r9
 8010318:	e9da 8900 	ldrd	r8, r9, [sl]
 801031c:	4630      	mov	r0, r6
 801031e:	4642      	mov	r2, r8
 8010320:	464b      	mov	r3, r9
 8010322:	4639      	mov	r1, r7
 8010324:	f7ef ffba 	bl	800029c <__aeabi_dsub>
 8010328:	462b      	mov	r3, r5
 801032a:	4622      	mov	r2, r4
 801032c:	f7ef ffb6 	bl	800029c <__aeabi_dsub>
 8010330:	9b02      	ldr	r3, [sp, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010338:	f6bf af0a 	bge.w	8010150 <__ieee754_rem_pio2+0x80>
 801033c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010340:	f8ca 3004 	str.w	r3, [sl, #4]
 8010344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010348:	f8ca 8000 	str.w	r8, [sl]
 801034c:	f8ca 0008 	str.w	r0, [sl, #8]
 8010350:	f8ca 300c 	str.w	r3, [sl, #12]
 8010354:	f1cb 0b00 	rsb	fp, fp, #0
 8010358:	e6fa      	b.n	8010150 <__ieee754_rem_pio2+0x80>
 801035a:	a327      	add	r3, pc, #156	; (adr r3, 80103f8 <__ieee754_rem_pio2+0x328>)
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	ec51 0b18 	vmov	r0, r1, d8
 8010364:	f7f0 f952 	bl	800060c <__aeabi_dmul>
 8010368:	4604      	mov	r4, r0
 801036a:	460d      	mov	r5, r1
 801036c:	4602      	mov	r2, r0
 801036e:	460b      	mov	r3, r1
 8010370:	4640      	mov	r0, r8
 8010372:	4649      	mov	r1, r9
 8010374:	f7ef ff92 	bl	800029c <__aeabi_dsub>
 8010378:	4602      	mov	r2, r0
 801037a:	460b      	mov	r3, r1
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
 8010380:	4640      	mov	r0, r8
 8010382:	4649      	mov	r1, r9
 8010384:	f7ef ff8a 	bl	800029c <__aeabi_dsub>
 8010388:	4622      	mov	r2, r4
 801038a:	462b      	mov	r3, r5
 801038c:	f7ef ff86 	bl	800029c <__aeabi_dsub>
 8010390:	a31b      	add	r3, pc, #108	; (adr r3, 8010400 <__ieee754_rem_pio2+0x330>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4604      	mov	r4, r0
 8010398:	460d      	mov	r5, r1
 801039a:	ec51 0b18 	vmov	r0, r1, d8
 801039e:	f7f0 f935 	bl	800060c <__aeabi_dmul>
 80103a2:	4622      	mov	r2, r4
 80103a4:	462b      	mov	r3, r5
 80103a6:	f7ef ff79 	bl	800029c <__aeabi_dsub>
 80103aa:	4604      	mov	r4, r0
 80103ac:	460d      	mov	r5, r1
 80103ae:	e75f      	b.n	8010270 <__ieee754_rem_pio2+0x1a0>
 80103b0:	4b1b      	ldr	r3, [pc, #108]	; (8010420 <__ieee754_rem_pio2+0x350>)
 80103b2:	4598      	cmp	r8, r3
 80103b4:	dd36      	ble.n	8010424 <__ieee754_rem_pio2+0x354>
 80103b6:	ee10 2a10 	vmov	r2, s0
 80103ba:	462b      	mov	r3, r5
 80103bc:	4620      	mov	r0, r4
 80103be:	4629      	mov	r1, r5
 80103c0:	f7ef ff6c 	bl	800029c <__aeabi_dsub>
 80103c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80103c8:	e9ca 0100 	strd	r0, r1, [sl]
 80103cc:	e694      	b.n	80100f8 <__ieee754_rem_pio2+0x28>
 80103ce:	bf00      	nop
 80103d0:	54400000 	.word	0x54400000
 80103d4:	3ff921fb 	.word	0x3ff921fb
 80103d8:	1a626331 	.word	0x1a626331
 80103dc:	3dd0b461 	.word	0x3dd0b461
 80103e0:	1a600000 	.word	0x1a600000
 80103e4:	3dd0b461 	.word	0x3dd0b461
 80103e8:	2e037073 	.word	0x2e037073
 80103ec:	3ba3198a 	.word	0x3ba3198a
 80103f0:	6dc9c883 	.word	0x6dc9c883
 80103f4:	3fe45f30 	.word	0x3fe45f30
 80103f8:	2e000000 	.word	0x2e000000
 80103fc:	3ba3198a 	.word	0x3ba3198a
 8010400:	252049c1 	.word	0x252049c1
 8010404:	397b839a 	.word	0x397b839a
 8010408:	3fe921fb 	.word	0x3fe921fb
 801040c:	4002d97b 	.word	0x4002d97b
 8010410:	3ff921fb 	.word	0x3ff921fb
 8010414:	413921fb 	.word	0x413921fb
 8010418:	3fe00000 	.word	0x3fe00000
 801041c:	08011980 	.word	0x08011980
 8010420:	7fefffff 	.word	0x7fefffff
 8010424:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010428:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801042c:	ee10 0a10 	vmov	r0, s0
 8010430:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8010434:	ee10 6a10 	vmov	r6, s0
 8010438:	460f      	mov	r7, r1
 801043a:	f7f0 fb97 	bl	8000b6c <__aeabi_d2iz>
 801043e:	f7f0 f87b 	bl	8000538 <__aeabi_i2d>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801044e:	f7ef ff25 	bl	800029c <__aeabi_dsub>
 8010452:	4b23      	ldr	r3, [pc, #140]	; (80104e0 <__ieee754_rem_pio2+0x410>)
 8010454:	2200      	movs	r2, #0
 8010456:	f7f0 f8d9 	bl	800060c <__aeabi_dmul>
 801045a:	460f      	mov	r7, r1
 801045c:	4606      	mov	r6, r0
 801045e:	f7f0 fb85 	bl	8000b6c <__aeabi_d2iz>
 8010462:	f7f0 f869 	bl	8000538 <__aeabi_i2d>
 8010466:	4602      	mov	r2, r0
 8010468:	460b      	mov	r3, r1
 801046a:	4630      	mov	r0, r6
 801046c:	4639      	mov	r1, r7
 801046e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010472:	f7ef ff13 	bl	800029c <__aeabi_dsub>
 8010476:	4b1a      	ldr	r3, [pc, #104]	; (80104e0 <__ieee754_rem_pio2+0x410>)
 8010478:	2200      	movs	r2, #0
 801047a:	f7f0 f8c7 	bl	800060c <__aeabi_dmul>
 801047e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010482:	ad04      	add	r5, sp, #16
 8010484:	f04f 0803 	mov.w	r8, #3
 8010488:	46a9      	mov	r9, r5
 801048a:	2600      	movs	r6, #0
 801048c:	2700      	movs	r7, #0
 801048e:	4632      	mov	r2, r6
 8010490:	463b      	mov	r3, r7
 8010492:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8010496:	46c3      	mov	fp, r8
 8010498:	3d08      	subs	r5, #8
 801049a:	f108 38ff 	add.w	r8, r8, #4294967295
 801049e:	f7f0 fb1d 	bl	8000adc <__aeabi_dcmpeq>
 80104a2:	2800      	cmp	r0, #0
 80104a4:	d1f3      	bne.n	801048e <__ieee754_rem_pio2+0x3be>
 80104a6:	4b0f      	ldr	r3, [pc, #60]	; (80104e4 <__ieee754_rem_pio2+0x414>)
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	2302      	movs	r3, #2
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4622      	mov	r2, r4
 80104b0:	465b      	mov	r3, fp
 80104b2:	4651      	mov	r1, sl
 80104b4:	4648      	mov	r0, r9
 80104b6:	f000 f8df 	bl	8010678 <__kernel_rem_pio2>
 80104ba:	9b02      	ldr	r3, [sp, #8]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	4683      	mov	fp, r0
 80104c0:	f6bf ae46 	bge.w	8010150 <__ieee754_rem_pio2+0x80>
 80104c4:	e9da 2100 	ldrd	r2, r1, [sl]
 80104c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104cc:	e9ca 2300 	strd	r2, r3, [sl]
 80104d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80104d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80104dc:	e73a      	b.n	8010354 <__ieee754_rem_pio2+0x284>
 80104de:	bf00      	nop
 80104e0:	41700000 	.word	0x41700000
 80104e4:	08011a00 	.word	0x08011a00

080104e8 <__kernel_cos>:
 80104e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ec:	ec57 6b10 	vmov	r6, r7, d0
 80104f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80104f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80104f8:	ed8d 1b00 	vstr	d1, [sp]
 80104fc:	da07      	bge.n	801050e <__kernel_cos+0x26>
 80104fe:	ee10 0a10 	vmov	r0, s0
 8010502:	4639      	mov	r1, r7
 8010504:	f7f0 fb32 	bl	8000b6c <__aeabi_d2iz>
 8010508:	2800      	cmp	r0, #0
 801050a:	f000 8088 	beq.w	801061e <__kernel_cos+0x136>
 801050e:	4632      	mov	r2, r6
 8010510:	463b      	mov	r3, r7
 8010512:	4630      	mov	r0, r6
 8010514:	4639      	mov	r1, r7
 8010516:	f7f0 f879 	bl	800060c <__aeabi_dmul>
 801051a:	4b51      	ldr	r3, [pc, #324]	; (8010660 <__kernel_cos+0x178>)
 801051c:	2200      	movs	r2, #0
 801051e:	4604      	mov	r4, r0
 8010520:	460d      	mov	r5, r1
 8010522:	f7f0 f873 	bl	800060c <__aeabi_dmul>
 8010526:	a340      	add	r3, pc, #256	; (adr r3, 8010628 <__kernel_cos+0x140>)
 8010528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052c:	4682      	mov	sl, r0
 801052e:	468b      	mov	fp, r1
 8010530:	4620      	mov	r0, r4
 8010532:	4629      	mov	r1, r5
 8010534:	f7f0 f86a 	bl	800060c <__aeabi_dmul>
 8010538:	a33d      	add	r3, pc, #244	; (adr r3, 8010630 <__kernel_cos+0x148>)
 801053a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801053e:	f7ef feaf 	bl	80002a0 <__adddf3>
 8010542:	4622      	mov	r2, r4
 8010544:	462b      	mov	r3, r5
 8010546:	f7f0 f861 	bl	800060c <__aeabi_dmul>
 801054a:	a33b      	add	r3, pc, #236	; (adr r3, 8010638 <__kernel_cos+0x150>)
 801054c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010550:	f7ef fea4 	bl	800029c <__aeabi_dsub>
 8010554:	4622      	mov	r2, r4
 8010556:	462b      	mov	r3, r5
 8010558:	f7f0 f858 	bl	800060c <__aeabi_dmul>
 801055c:	a338      	add	r3, pc, #224	; (adr r3, 8010640 <__kernel_cos+0x158>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fe9d 	bl	80002a0 <__adddf3>
 8010566:	4622      	mov	r2, r4
 8010568:	462b      	mov	r3, r5
 801056a:	f7f0 f84f 	bl	800060c <__aeabi_dmul>
 801056e:	a336      	add	r3, pc, #216	; (adr r3, 8010648 <__kernel_cos+0x160>)
 8010570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010574:	f7ef fe92 	bl	800029c <__aeabi_dsub>
 8010578:	4622      	mov	r2, r4
 801057a:	462b      	mov	r3, r5
 801057c:	f7f0 f846 	bl	800060c <__aeabi_dmul>
 8010580:	a333      	add	r3, pc, #204	; (adr r3, 8010650 <__kernel_cos+0x168>)
 8010582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010586:	f7ef fe8b 	bl	80002a0 <__adddf3>
 801058a:	4622      	mov	r2, r4
 801058c:	462b      	mov	r3, r5
 801058e:	f7f0 f83d 	bl	800060c <__aeabi_dmul>
 8010592:	4622      	mov	r2, r4
 8010594:	462b      	mov	r3, r5
 8010596:	f7f0 f839 	bl	800060c <__aeabi_dmul>
 801059a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801059e:	4604      	mov	r4, r0
 80105a0:	460d      	mov	r5, r1
 80105a2:	4630      	mov	r0, r6
 80105a4:	4639      	mov	r1, r7
 80105a6:	f7f0 f831 	bl	800060c <__aeabi_dmul>
 80105aa:	460b      	mov	r3, r1
 80105ac:	4602      	mov	r2, r0
 80105ae:	4629      	mov	r1, r5
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7ef fe73 	bl	800029c <__aeabi_dsub>
 80105b6:	4b2b      	ldr	r3, [pc, #172]	; (8010664 <__kernel_cos+0x17c>)
 80105b8:	4598      	cmp	r8, r3
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	dc10      	bgt.n	80105e2 <__kernel_cos+0xfa>
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	4650      	mov	r0, sl
 80105c6:	4659      	mov	r1, fp
 80105c8:	f7ef fe68 	bl	800029c <__aeabi_dsub>
 80105cc:	460b      	mov	r3, r1
 80105ce:	4926      	ldr	r1, [pc, #152]	; (8010668 <__kernel_cos+0x180>)
 80105d0:	4602      	mov	r2, r0
 80105d2:	2000      	movs	r0, #0
 80105d4:	f7ef fe62 	bl	800029c <__aeabi_dsub>
 80105d8:	ec41 0b10 	vmov	d0, r0, r1
 80105dc:	b003      	add	sp, #12
 80105de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e2:	4b22      	ldr	r3, [pc, #136]	; (801066c <__kernel_cos+0x184>)
 80105e4:	4920      	ldr	r1, [pc, #128]	; (8010668 <__kernel_cos+0x180>)
 80105e6:	4598      	cmp	r8, r3
 80105e8:	bfcc      	ite	gt
 80105ea:	4d21      	ldrgt	r5, [pc, #132]	; (8010670 <__kernel_cos+0x188>)
 80105ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80105f0:	2400      	movs	r4, #0
 80105f2:	4622      	mov	r2, r4
 80105f4:	462b      	mov	r3, r5
 80105f6:	2000      	movs	r0, #0
 80105f8:	f7ef fe50 	bl	800029c <__aeabi_dsub>
 80105fc:	4622      	mov	r2, r4
 80105fe:	4680      	mov	r8, r0
 8010600:	4689      	mov	r9, r1
 8010602:	462b      	mov	r3, r5
 8010604:	4650      	mov	r0, sl
 8010606:	4659      	mov	r1, fp
 8010608:	f7ef fe48 	bl	800029c <__aeabi_dsub>
 801060c:	4632      	mov	r2, r6
 801060e:	463b      	mov	r3, r7
 8010610:	f7ef fe44 	bl	800029c <__aeabi_dsub>
 8010614:	4602      	mov	r2, r0
 8010616:	460b      	mov	r3, r1
 8010618:	4640      	mov	r0, r8
 801061a:	4649      	mov	r1, r9
 801061c:	e7da      	b.n	80105d4 <__kernel_cos+0xec>
 801061e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010658 <__kernel_cos+0x170>
 8010622:	e7db      	b.n	80105dc <__kernel_cos+0xf4>
 8010624:	f3af 8000 	nop.w
 8010628:	be8838d4 	.word	0xbe8838d4
 801062c:	bda8fae9 	.word	0xbda8fae9
 8010630:	bdb4b1c4 	.word	0xbdb4b1c4
 8010634:	3e21ee9e 	.word	0x3e21ee9e
 8010638:	809c52ad 	.word	0x809c52ad
 801063c:	3e927e4f 	.word	0x3e927e4f
 8010640:	19cb1590 	.word	0x19cb1590
 8010644:	3efa01a0 	.word	0x3efa01a0
 8010648:	16c15177 	.word	0x16c15177
 801064c:	3f56c16c 	.word	0x3f56c16c
 8010650:	5555554c 	.word	0x5555554c
 8010654:	3fa55555 	.word	0x3fa55555
 8010658:	00000000 	.word	0x00000000
 801065c:	3ff00000 	.word	0x3ff00000
 8010660:	3fe00000 	.word	0x3fe00000
 8010664:	3fd33332 	.word	0x3fd33332
 8010668:	3ff00000 	.word	0x3ff00000
 801066c:	3fe90000 	.word	0x3fe90000
 8010670:	3fd20000 	.word	0x3fd20000
 8010674:	00000000 	.word	0x00000000

08010678 <__kernel_rem_pio2>:
 8010678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	ed2d 8b02 	vpush	{d8}
 8010680:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8010684:	f112 0f14 	cmn.w	r2, #20
 8010688:	9308      	str	r3, [sp, #32]
 801068a:	9101      	str	r1, [sp, #4]
 801068c:	4bc4      	ldr	r3, [pc, #784]	; (80109a0 <__kernel_rem_pio2+0x328>)
 801068e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010690:	900b      	str	r0, [sp, #44]	; 0x2c
 8010692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010696:	9302      	str	r3, [sp, #8]
 8010698:	9b08      	ldr	r3, [sp, #32]
 801069a:	f103 33ff 	add.w	r3, r3, #4294967295
 801069e:	bfa8      	it	ge
 80106a0:	1ed4      	subge	r4, r2, #3
 80106a2:	9306      	str	r3, [sp, #24]
 80106a4:	bfb2      	itee	lt
 80106a6:	2400      	movlt	r4, #0
 80106a8:	2318      	movge	r3, #24
 80106aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80106ae:	f06f 0317 	mvn.w	r3, #23
 80106b2:	fb04 3303 	mla	r3, r4, r3, r3
 80106b6:	eb03 0a02 	add.w	sl, r3, r2
 80106ba:	9b02      	ldr	r3, [sp, #8]
 80106bc:	9a06      	ldr	r2, [sp, #24]
 80106be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010990 <__kernel_rem_pio2+0x318>
 80106c2:	eb03 0802 	add.w	r8, r3, r2
 80106c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80106c8:	1aa7      	subs	r7, r4, r2
 80106ca:	ae22      	add	r6, sp, #136	; 0x88
 80106cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80106d0:	2500      	movs	r5, #0
 80106d2:	4545      	cmp	r5, r8
 80106d4:	dd13      	ble.n	80106fe <__kernel_rem_pio2+0x86>
 80106d6:	9b08      	ldr	r3, [sp, #32]
 80106d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010990 <__kernel_rem_pio2+0x318>
 80106dc:	aa22      	add	r2, sp, #136	; 0x88
 80106de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80106e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80106e6:	f04f 0800 	mov.w	r8, #0
 80106ea:	9b02      	ldr	r3, [sp, #8]
 80106ec:	4598      	cmp	r8, r3
 80106ee:	dc2f      	bgt.n	8010750 <__kernel_rem_pio2+0xd8>
 80106f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80106f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80106f8:	462f      	mov	r7, r5
 80106fa:	2600      	movs	r6, #0
 80106fc:	e01b      	b.n	8010736 <__kernel_rem_pio2+0xbe>
 80106fe:	42ef      	cmn	r7, r5
 8010700:	d407      	bmi.n	8010712 <__kernel_rem_pio2+0x9a>
 8010702:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010706:	f7ef ff17 	bl	8000538 <__aeabi_i2d>
 801070a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801070e:	3501      	adds	r5, #1
 8010710:	e7df      	b.n	80106d2 <__kernel_rem_pio2+0x5a>
 8010712:	ec51 0b18 	vmov	r0, r1, d8
 8010716:	e7f8      	b.n	801070a <__kernel_rem_pio2+0x92>
 8010718:	e9d7 2300 	ldrd	r2, r3, [r7]
 801071c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010720:	f7ef ff74 	bl	800060c <__aeabi_dmul>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801072c:	f7ef fdb8 	bl	80002a0 <__adddf3>
 8010730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010734:	3601      	adds	r6, #1
 8010736:	9b06      	ldr	r3, [sp, #24]
 8010738:	429e      	cmp	r6, r3
 801073a:	f1a7 0708 	sub.w	r7, r7, #8
 801073e:	ddeb      	ble.n	8010718 <__kernel_rem_pio2+0xa0>
 8010740:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010744:	f108 0801 	add.w	r8, r8, #1
 8010748:	ecab 7b02 	vstmia	fp!, {d7}
 801074c:	3508      	adds	r5, #8
 801074e:	e7cc      	b.n	80106ea <__kernel_rem_pio2+0x72>
 8010750:	9b02      	ldr	r3, [sp, #8]
 8010752:	aa0e      	add	r2, sp, #56	; 0x38
 8010754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010758:	930d      	str	r3, [sp, #52]	; 0x34
 801075a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801075c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010760:	9c02      	ldr	r4, [sp, #8]
 8010762:	930c      	str	r3, [sp, #48]	; 0x30
 8010764:	00e3      	lsls	r3, r4, #3
 8010766:	930a      	str	r3, [sp, #40]	; 0x28
 8010768:	ab9a      	add	r3, sp, #616	; 0x268
 801076a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801076e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010772:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010776:	ab72      	add	r3, sp, #456	; 0x1c8
 8010778:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801077c:	46c3      	mov	fp, r8
 801077e:	46a1      	mov	r9, r4
 8010780:	f1b9 0f00 	cmp.w	r9, #0
 8010784:	f1a5 0508 	sub.w	r5, r5, #8
 8010788:	dc77      	bgt.n	801087a <__kernel_rem_pio2+0x202>
 801078a:	ec47 6b10 	vmov	d0, r6, r7
 801078e:	4650      	mov	r0, sl
 8010790:	f000 fc0a 	bl	8010fa8 <scalbn>
 8010794:	ec57 6b10 	vmov	r6, r7, d0
 8010798:	2200      	movs	r2, #0
 801079a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801079e:	ee10 0a10 	vmov	r0, s0
 80107a2:	4639      	mov	r1, r7
 80107a4:	f7ef ff32 	bl	800060c <__aeabi_dmul>
 80107a8:	ec41 0b10 	vmov	d0, r0, r1
 80107ac:	f000 fb7c 	bl	8010ea8 <floor>
 80107b0:	4b7c      	ldr	r3, [pc, #496]	; (80109a4 <__kernel_rem_pio2+0x32c>)
 80107b2:	ec51 0b10 	vmov	r0, r1, d0
 80107b6:	2200      	movs	r2, #0
 80107b8:	f7ef ff28 	bl	800060c <__aeabi_dmul>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	4630      	mov	r0, r6
 80107c2:	4639      	mov	r1, r7
 80107c4:	f7ef fd6a 	bl	800029c <__aeabi_dsub>
 80107c8:	460f      	mov	r7, r1
 80107ca:	4606      	mov	r6, r0
 80107cc:	f7f0 f9ce 	bl	8000b6c <__aeabi_d2iz>
 80107d0:	9004      	str	r0, [sp, #16]
 80107d2:	f7ef feb1 	bl	8000538 <__aeabi_i2d>
 80107d6:	4602      	mov	r2, r0
 80107d8:	460b      	mov	r3, r1
 80107da:	4630      	mov	r0, r6
 80107dc:	4639      	mov	r1, r7
 80107de:	f7ef fd5d 	bl	800029c <__aeabi_dsub>
 80107e2:	f1ba 0f00 	cmp.w	sl, #0
 80107e6:	4606      	mov	r6, r0
 80107e8:	460f      	mov	r7, r1
 80107ea:	dd6d      	ble.n	80108c8 <__kernel_rem_pio2+0x250>
 80107ec:	1e62      	subs	r2, r4, #1
 80107ee:	ab0e      	add	r3, sp, #56	; 0x38
 80107f0:	9d04      	ldr	r5, [sp, #16]
 80107f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80107f6:	f1ca 0118 	rsb	r1, sl, #24
 80107fa:	fa40 f301 	asr.w	r3, r0, r1
 80107fe:	441d      	add	r5, r3
 8010800:	408b      	lsls	r3, r1
 8010802:	1ac0      	subs	r0, r0, r3
 8010804:	ab0e      	add	r3, sp, #56	; 0x38
 8010806:	9504      	str	r5, [sp, #16]
 8010808:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801080c:	f1ca 0317 	rsb	r3, sl, #23
 8010810:	fa40 fb03 	asr.w	fp, r0, r3
 8010814:	f1bb 0f00 	cmp.w	fp, #0
 8010818:	dd65      	ble.n	80108e6 <__kernel_rem_pio2+0x26e>
 801081a:	9b04      	ldr	r3, [sp, #16]
 801081c:	2200      	movs	r2, #0
 801081e:	3301      	adds	r3, #1
 8010820:	9304      	str	r3, [sp, #16]
 8010822:	4615      	mov	r5, r2
 8010824:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010828:	4294      	cmp	r4, r2
 801082a:	f300 809c 	bgt.w	8010966 <__kernel_rem_pio2+0x2ee>
 801082e:	f1ba 0f00 	cmp.w	sl, #0
 8010832:	dd07      	ble.n	8010844 <__kernel_rem_pio2+0x1cc>
 8010834:	f1ba 0f01 	cmp.w	sl, #1
 8010838:	f000 80c0 	beq.w	80109bc <__kernel_rem_pio2+0x344>
 801083c:	f1ba 0f02 	cmp.w	sl, #2
 8010840:	f000 80c6 	beq.w	80109d0 <__kernel_rem_pio2+0x358>
 8010844:	f1bb 0f02 	cmp.w	fp, #2
 8010848:	d14d      	bne.n	80108e6 <__kernel_rem_pio2+0x26e>
 801084a:	4632      	mov	r2, r6
 801084c:	463b      	mov	r3, r7
 801084e:	4956      	ldr	r1, [pc, #344]	; (80109a8 <__kernel_rem_pio2+0x330>)
 8010850:	2000      	movs	r0, #0
 8010852:	f7ef fd23 	bl	800029c <__aeabi_dsub>
 8010856:	4606      	mov	r6, r0
 8010858:	460f      	mov	r7, r1
 801085a:	2d00      	cmp	r5, #0
 801085c:	d043      	beq.n	80108e6 <__kernel_rem_pio2+0x26e>
 801085e:	4650      	mov	r0, sl
 8010860:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010998 <__kernel_rem_pio2+0x320>
 8010864:	f000 fba0 	bl	8010fa8 <scalbn>
 8010868:	4630      	mov	r0, r6
 801086a:	4639      	mov	r1, r7
 801086c:	ec53 2b10 	vmov	r2, r3, d0
 8010870:	f7ef fd14 	bl	800029c <__aeabi_dsub>
 8010874:	4606      	mov	r6, r0
 8010876:	460f      	mov	r7, r1
 8010878:	e035      	b.n	80108e6 <__kernel_rem_pio2+0x26e>
 801087a:	4b4c      	ldr	r3, [pc, #304]	; (80109ac <__kernel_rem_pio2+0x334>)
 801087c:	2200      	movs	r2, #0
 801087e:	4630      	mov	r0, r6
 8010880:	4639      	mov	r1, r7
 8010882:	f7ef fec3 	bl	800060c <__aeabi_dmul>
 8010886:	f7f0 f971 	bl	8000b6c <__aeabi_d2iz>
 801088a:	f7ef fe55 	bl	8000538 <__aeabi_i2d>
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	ec43 2b18 	vmov	d8, r2, r3
 8010896:	4b46      	ldr	r3, [pc, #280]	; (80109b0 <__kernel_rem_pio2+0x338>)
 8010898:	2200      	movs	r2, #0
 801089a:	f7ef feb7 	bl	800060c <__aeabi_dmul>
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	4630      	mov	r0, r6
 80108a4:	4639      	mov	r1, r7
 80108a6:	f7ef fcf9 	bl	800029c <__aeabi_dsub>
 80108aa:	f7f0 f95f 	bl	8000b6c <__aeabi_d2iz>
 80108ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80108b2:	f84b 0b04 	str.w	r0, [fp], #4
 80108b6:	ec51 0b18 	vmov	r0, r1, d8
 80108ba:	f7ef fcf1 	bl	80002a0 <__adddf3>
 80108be:	f109 39ff 	add.w	r9, r9, #4294967295
 80108c2:	4606      	mov	r6, r0
 80108c4:	460f      	mov	r7, r1
 80108c6:	e75b      	b.n	8010780 <__kernel_rem_pio2+0x108>
 80108c8:	d106      	bne.n	80108d8 <__kernel_rem_pio2+0x260>
 80108ca:	1e63      	subs	r3, r4, #1
 80108cc:	aa0e      	add	r2, sp, #56	; 0x38
 80108ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80108d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80108d6:	e79d      	b.n	8010814 <__kernel_rem_pio2+0x19c>
 80108d8:	4b36      	ldr	r3, [pc, #216]	; (80109b4 <__kernel_rem_pio2+0x33c>)
 80108da:	2200      	movs	r2, #0
 80108dc:	f7f0 f91c 	bl	8000b18 <__aeabi_dcmpge>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	d13d      	bne.n	8010960 <__kernel_rem_pio2+0x2e8>
 80108e4:	4683      	mov	fp, r0
 80108e6:	2200      	movs	r2, #0
 80108e8:	2300      	movs	r3, #0
 80108ea:	4630      	mov	r0, r6
 80108ec:	4639      	mov	r1, r7
 80108ee:	f7f0 f8f5 	bl	8000adc <__aeabi_dcmpeq>
 80108f2:	2800      	cmp	r0, #0
 80108f4:	f000 80c0 	beq.w	8010a78 <__kernel_rem_pio2+0x400>
 80108f8:	1e65      	subs	r5, r4, #1
 80108fa:	462b      	mov	r3, r5
 80108fc:	2200      	movs	r2, #0
 80108fe:	9902      	ldr	r1, [sp, #8]
 8010900:	428b      	cmp	r3, r1
 8010902:	da6c      	bge.n	80109de <__kernel_rem_pio2+0x366>
 8010904:	2a00      	cmp	r2, #0
 8010906:	f000 8089 	beq.w	8010a1c <__kernel_rem_pio2+0x3a4>
 801090a:	ab0e      	add	r3, sp, #56	; 0x38
 801090c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010910:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80ad 	beq.w	8010a74 <__kernel_rem_pio2+0x3fc>
 801091a:	4650      	mov	r0, sl
 801091c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010998 <__kernel_rem_pio2+0x320>
 8010920:	f000 fb42 	bl	8010fa8 <scalbn>
 8010924:	ab9a      	add	r3, sp, #616	; 0x268
 8010926:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801092a:	ec57 6b10 	vmov	r6, r7, d0
 801092e:	00ec      	lsls	r4, r5, #3
 8010930:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010934:	46aa      	mov	sl, r5
 8010936:	f1ba 0f00 	cmp.w	sl, #0
 801093a:	f280 80d6 	bge.w	8010aea <__kernel_rem_pio2+0x472>
 801093e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010990 <__kernel_rem_pio2+0x318>
 8010942:	462e      	mov	r6, r5
 8010944:	2e00      	cmp	r6, #0
 8010946:	f2c0 8104 	blt.w	8010b52 <__kernel_rem_pio2+0x4da>
 801094a:	ab72      	add	r3, sp, #456	; 0x1c8
 801094c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010950:	f8df a064 	ldr.w	sl, [pc, #100]	; 80109b8 <__kernel_rem_pio2+0x340>
 8010954:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010958:	f04f 0800 	mov.w	r8, #0
 801095c:	1baf      	subs	r7, r5, r6
 801095e:	e0ea      	b.n	8010b36 <__kernel_rem_pio2+0x4be>
 8010960:	f04f 0b02 	mov.w	fp, #2
 8010964:	e759      	b.n	801081a <__kernel_rem_pio2+0x1a2>
 8010966:	f8d8 3000 	ldr.w	r3, [r8]
 801096a:	b955      	cbnz	r5, 8010982 <__kernel_rem_pio2+0x30a>
 801096c:	b123      	cbz	r3, 8010978 <__kernel_rem_pio2+0x300>
 801096e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010972:	f8c8 3000 	str.w	r3, [r8]
 8010976:	2301      	movs	r3, #1
 8010978:	3201      	adds	r2, #1
 801097a:	f108 0804 	add.w	r8, r8, #4
 801097e:	461d      	mov	r5, r3
 8010980:	e752      	b.n	8010828 <__kernel_rem_pio2+0x1b0>
 8010982:	1acb      	subs	r3, r1, r3
 8010984:	f8c8 3000 	str.w	r3, [r8]
 8010988:	462b      	mov	r3, r5
 801098a:	e7f5      	b.n	8010978 <__kernel_rem_pio2+0x300>
 801098c:	f3af 8000 	nop.w
	...
 801099c:	3ff00000 	.word	0x3ff00000
 80109a0:	08011b48 	.word	0x08011b48
 80109a4:	40200000 	.word	0x40200000
 80109a8:	3ff00000 	.word	0x3ff00000
 80109ac:	3e700000 	.word	0x3e700000
 80109b0:	41700000 	.word	0x41700000
 80109b4:	3fe00000 	.word	0x3fe00000
 80109b8:	08011b08 	.word	0x08011b08
 80109bc:	1e62      	subs	r2, r4, #1
 80109be:	ab0e      	add	r3, sp, #56	; 0x38
 80109c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80109c8:	a90e      	add	r1, sp, #56	; 0x38
 80109ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80109ce:	e739      	b.n	8010844 <__kernel_rem_pio2+0x1cc>
 80109d0:	1e62      	subs	r2, r4, #1
 80109d2:	ab0e      	add	r3, sp, #56	; 0x38
 80109d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80109dc:	e7f4      	b.n	80109c8 <__kernel_rem_pio2+0x350>
 80109de:	a90e      	add	r1, sp, #56	; 0x38
 80109e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80109e4:	3b01      	subs	r3, #1
 80109e6:	430a      	orrs	r2, r1
 80109e8:	e789      	b.n	80108fe <__kernel_rem_pio2+0x286>
 80109ea:	3301      	adds	r3, #1
 80109ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80109f0:	2900      	cmp	r1, #0
 80109f2:	d0fa      	beq.n	80109ea <__kernel_rem_pio2+0x372>
 80109f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80109fa:	446a      	add	r2, sp
 80109fc:	3a98      	subs	r2, #152	; 0x98
 80109fe:	920a      	str	r2, [sp, #40]	; 0x28
 8010a00:	9a08      	ldr	r2, [sp, #32]
 8010a02:	18e3      	adds	r3, r4, r3
 8010a04:	18a5      	adds	r5, r4, r2
 8010a06:	aa22      	add	r2, sp, #136	; 0x88
 8010a08:	f104 0801 	add.w	r8, r4, #1
 8010a0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010a10:	9304      	str	r3, [sp, #16]
 8010a12:	9b04      	ldr	r3, [sp, #16]
 8010a14:	4543      	cmp	r3, r8
 8010a16:	da04      	bge.n	8010a22 <__kernel_rem_pio2+0x3aa>
 8010a18:	461c      	mov	r4, r3
 8010a1a:	e6a3      	b.n	8010764 <__kernel_rem_pio2+0xec>
 8010a1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e7e4      	b.n	80109ec <__kernel_rem_pio2+0x374>
 8010a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010a28:	f7ef fd86 	bl	8000538 <__aeabi_i2d>
 8010a2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a32:	46ab      	mov	fp, r5
 8010a34:	461c      	mov	r4, r3
 8010a36:	f04f 0900 	mov.w	r9, #0
 8010a3a:	2600      	movs	r6, #0
 8010a3c:	2700      	movs	r7, #0
 8010a3e:	9b06      	ldr	r3, [sp, #24]
 8010a40:	4599      	cmp	r9, r3
 8010a42:	dd06      	ble.n	8010a52 <__kernel_rem_pio2+0x3da>
 8010a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8010a4a:	f108 0801 	add.w	r8, r8, #1
 8010a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010a50:	e7df      	b.n	8010a12 <__kernel_rem_pio2+0x39a>
 8010a52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010a56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010a5a:	f7ef fdd7 	bl	800060c <__aeabi_dmul>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	4630      	mov	r0, r6
 8010a64:	4639      	mov	r1, r7
 8010a66:	f7ef fc1b 	bl	80002a0 <__adddf3>
 8010a6a:	f109 0901 	add.w	r9, r9, #1
 8010a6e:	4606      	mov	r6, r0
 8010a70:	460f      	mov	r7, r1
 8010a72:	e7e4      	b.n	8010a3e <__kernel_rem_pio2+0x3c6>
 8010a74:	3d01      	subs	r5, #1
 8010a76:	e748      	b.n	801090a <__kernel_rem_pio2+0x292>
 8010a78:	ec47 6b10 	vmov	d0, r6, r7
 8010a7c:	f1ca 0000 	rsb	r0, sl, #0
 8010a80:	f000 fa92 	bl	8010fa8 <scalbn>
 8010a84:	ec57 6b10 	vmov	r6, r7, d0
 8010a88:	4ba0      	ldr	r3, [pc, #640]	; (8010d0c <__kernel_rem_pio2+0x694>)
 8010a8a:	ee10 0a10 	vmov	r0, s0
 8010a8e:	2200      	movs	r2, #0
 8010a90:	4639      	mov	r1, r7
 8010a92:	f7f0 f841 	bl	8000b18 <__aeabi_dcmpge>
 8010a96:	b1f8      	cbz	r0, 8010ad8 <__kernel_rem_pio2+0x460>
 8010a98:	4b9d      	ldr	r3, [pc, #628]	; (8010d10 <__kernel_rem_pio2+0x698>)
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	f7ef fdb4 	bl	800060c <__aeabi_dmul>
 8010aa4:	f7f0 f862 	bl	8000b6c <__aeabi_d2iz>
 8010aa8:	4680      	mov	r8, r0
 8010aaa:	f7ef fd45 	bl	8000538 <__aeabi_i2d>
 8010aae:	4b97      	ldr	r3, [pc, #604]	; (8010d0c <__kernel_rem_pio2+0x694>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f7ef fdab 	bl	800060c <__aeabi_dmul>
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	4602      	mov	r2, r0
 8010aba:	4639      	mov	r1, r7
 8010abc:	4630      	mov	r0, r6
 8010abe:	f7ef fbed 	bl	800029c <__aeabi_dsub>
 8010ac2:	f7f0 f853 	bl	8000b6c <__aeabi_d2iz>
 8010ac6:	1c65      	adds	r5, r4, #1
 8010ac8:	ab0e      	add	r3, sp, #56	; 0x38
 8010aca:	f10a 0a18 	add.w	sl, sl, #24
 8010ace:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010ad2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010ad6:	e720      	b.n	801091a <__kernel_rem_pio2+0x2a2>
 8010ad8:	4630      	mov	r0, r6
 8010ada:	4639      	mov	r1, r7
 8010adc:	f7f0 f846 	bl	8000b6c <__aeabi_d2iz>
 8010ae0:	ab0e      	add	r3, sp, #56	; 0x38
 8010ae2:	4625      	mov	r5, r4
 8010ae4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010ae8:	e717      	b.n	801091a <__kernel_rem_pio2+0x2a2>
 8010aea:	ab0e      	add	r3, sp, #56	; 0x38
 8010aec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010af0:	f7ef fd22 	bl	8000538 <__aeabi_i2d>
 8010af4:	4632      	mov	r2, r6
 8010af6:	463b      	mov	r3, r7
 8010af8:	f7ef fd88 	bl	800060c <__aeabi_dmul>
 8010afc:	4b84      	ldr	r3, [pc, #528]	; (8010d10 <__kernel_rem_pio2+0x698>)
 8010afe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010b02:	2200      	movs	r2, #0
 8010b04:	4630      	mov	r0, r6
 8010b06:	4639      	mov	r1, r7
 8010b08:	f7ef fd80 	bl	800060c <__aeabi_dmul>
 8010b0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b10:	4606      	mov	r6, r0
 8010b12:	460f      	mov	r7, r1
 8010b14:	e70f      	b.n	8010936 <__kernel_rem_pio2+0x2be>
 8010b16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010b1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010b1e:	f7ef fd75 	bl	800060c <__aeabi_dmul>
 8010b22:	4602      	mov	r2, r0
 8010b24:	460b      	mov	r3, r1
 8010b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b2a:	f7ef fbb9 	bl	80002a0 <__adddf3>
 8010b2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010b32:	f108 0801 	add.w	r8, r8, #1
 8010b36:	9b02      	ldr	r3, [sp, #8]
 8010b38:	4598      	cmp	r8, r3
 8010b3a:	dc01      	bgt.n	8010b40 <__kernel_rem_pio2+0x4c8>
 8010b3c:	45b8      	cmp	r8, r7
 8010b3e:	ddea      	ble.n	8010b16 <__kernel_rem_pio2+0x49e>
 8010b40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010b44:	ab4a      	add	r3, sp, #296	; 0x128
 8010b46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010b4a:	ed87 7b00 	vstr	d7, [r7]
 8010b4e:	3e01      	subs	r6, #1
 8010b50:	e6f8      	b.n	8010944 <__kernel_rem_pio2+0x2cc>
 8010b52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010b54:	2b02      	cmp	r3, #2
 8010b56:	dc0b      	bgt.n	8010b70 <__kernel_rem_pio2+0x4f8>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	dc35      	bgt.n	8010bc8 <__kernel_rem_pio2+0x550>
 8010b5c:	d059      	beq.n	8010c12 <__kernel_rem_pio2+0x59a>
 8010b5e:	9b04      	ldr	r3, [sp, #16]
 8010b60:	f003 0007 	and.w	r0, r3, #7
 8010b64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010b68:	ecbd 8b02 	vpop	{d8}
 8010b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010b72:	2b03      	cmp	r3, #3
 8010b74:	d1f3      	bne.n	8010b5e <__kernel_rem_pio2+0x4e6>
 8010b76:	ab4a      	add	r3, sp, #296	; 0x128
 8010b78:	4423      	add	r3, r4
 8010b7a:	9306      	str	r3, [sp, #24]
 8010b7c:	461c      	mov	r4, r3
 8010b7e:	469a      	mov	sl, r3
 8010b80:	9502      	str	r5, [sp, #8]
 8010b82:	9b02      	ldr	r3, [sp, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f1aa 0a08 	sub.w	sl, sl, #8
 8010b8a:	dc6b      	bgt.n	8010c64 <__kernel_rem_pio2+0x5ec>
 8010b8c:	46aa      	mov	sl, r5
 8010b8e:	f1ba 0f01 	cmp.w	sl, #1
 8010b92:	f1a4 0408 	sub.w	r4, r4, #8
 8010b96:	f300 8085 	bgt.w	8010ca4 <__kernel_rem_pio2+0x62c>
 8010b9a:	9c06      	ldr	r4, [sp, #24]
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	3408      	adds	r4, #8
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	2d01      	cmp	r5, #1
 8010ba4:	f300 809d 	bgt.w	8010ce2 <__kernel_rem_pio2+0x66a>
 8010ba8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010bac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010bb0:	f1bb 0f00 	cmp.w	fp, #0
 8010bb4:	f040 809b 	bne.w	8010cee <__kernel_rem_pio2+0x676>
 8010bb8:	9b01      	ldr	r3, [sp, #4]
 8010bba:	e9c3 5600 	strd	r5, r6, [r3]
 8010bbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010bc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010bc6:	e7ca      	b.n	8010b5e <__kernel_rem_pio2+0x4e6>
 8010bc8:	3408      	adds	r4, #8
 8010bca:	ab4a      	add	r3, sp, #296	; 0x128
 8010bcc:	441c      	add	r4, r3
 8010bce:	462e      	mov	r6, r5
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	2e00      	cmp	r6, #0
 8010bd6:	da36      	bge.n	8010c46 <__kernel_rem_pio2+0x5ce>
 8010bd8:	f1bb 0f00 	cmp.w	fp, #0
 8010bdc:	d039      	beq.n	8010c52 <__kernel_rem_pio2+0x5da>
 8010bde:	4602      	mov	r2, r0
 8010be0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010be4:	9c01      	ldr	r4, [sp, #4]
 8010be6:	e9c4 2300 	strd	r2, r3, [r4]
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010bf2:	f7ef fb53 	bl	800029c <__aeabi_dsub>
 8010bf6:	ae4c      	add	r6, sp, #304	; 0x130
 8010bf8:	2401      	movs	r4, #1
 8010bfa:	42a5      	cmp	r5, r4
 8010bfc:	da2c      	bge.n	8010c58 <__kernel_rem_pio2+0x5e0>
 8010bfe:	f1bb 0f00 	cmp.w	fp, #0
 8010c02:	d002      	beq.n	8010c0a <__kernel_rem_pio2+0x592>
 8010c04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c08:	4619      	mov	r1, r3
 8010c0a:	9b01      	ldr	r3, [sp, #4]
 8010c0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010c10:	e7a5      	b.n	8010b5e <__kernel_rem_pio2+0x4e6>
 8010c12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010c16:	eb0d 0403 	add.w	r4, sp, r3
 8010c1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010c1e:	2000      	movs	r0, #0
 8010c20:	2100      	movs	r1, #0
 8010c22:	2d00      	cmp	r5, #0
 8010c24:	da09      	bge.n	8010c3a <__kernel_rem_pio2+0x5c2>
 8010c26:	f1bb 0f00 	cmp.w	fp, #0
 8010c2a:	d002      	beq.n	8010c32 <__kernel_rem_pio2+0x5ba>
 8010c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c30:	4619      	mov	r1, r3
 8010c32:	9b01      	ldr	r3, [sp, #4]
 8010c34:	e9c3 0100 	strd	r0, r1, [r3]
 8010c38:	e791      	b.n	8010b5e <__kernel_rem_pio2+0x4e6>
 8010c3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c3e:	f7ef fb2f 	bl	80002a0 <__adddf3>
 8010c42:	3d01      	subs	r5, #1
 8010c44:	e7ed      	b.n	8010c22 <__kernel_rem_pio2+0x5aa>
 8010c46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010c4a:	f7ef fb29 	bl	80002a0 <__adddf3>
 8010c4e:	3e01      	subs	r6, #1
 8010c50:	e7c0      	b.n	8010bd4 <__kernel_rem_pio2+0x55c>
 8010c52:	4602      	mov	r2, r0
 8010c54:	460b      	mov	r3, r1
 8010c56:	e7c5      	b.n	8010be4 <__kernel_rem_pio2+0x56c>
 8010c58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010c5c:	f7ef fb20 	bl	80002a0 <__adddf3>
 8010c60:	3401      	adds	r4, #1
 8010c62:	e7ca      	b.n	8010bfa <__kernel_rem_pio2+0x582>
 8010c64:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010c6c:	9b02      	ldr	r3, [sp, #8]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	9302      	str	r3, [sp, #8]
 8010c72:	4632      	mov	r2, r6
 8010c74:	463b      	mov	r3, r7
 8010c76:	4640      	mov	r0, r8
 8010c78:	4649      	mov	r1, r9
 8010c7a:	f7ef fb11 	bl	80002a0 <__adddf3>
 8010c7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010c82:	4602      	mov	r2, r0
 8010c84:	460b      	mov	r3, r1
 8010c86:	4640      	mov	r0, r8
 8010c88:	4649      	mov	r1, r9
 8010c8a:	f7ef fb07 	bl	800029c <__aeabi_dsub>
 8010c8e:	4632      	mov	r2, r6
 8010c90:	463b      	mov	r3, r7
 8010c92:	f7ef fb05 	bl	80002a0 <__adddf3>
 8010c96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010c9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c9e:	ed8a 7b00 	vstr	d7, [sl]
 8010ca2:	e76e      	b.n	8010b82 <__kernel_rem_pio2+0x50a>
 8010ca4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010ca8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010cac:	4640      	mov	r0, r8
 8010cae:	4632      	mov	r2, r6
 8010cb0:	463b      	mov	r3, r7
 8010cb2:	4649      	mov	r1, r9
 8010cb4:	f7ef faf4 	bl	80002a0 <__adddf3>
 8010cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	4640      	mov	r0, r8
 8010cc2:	4649      	mov	r1, r9
 8010cc4:	f7ef faea 	bl	800029c <__aeabi_dsub>
 8010cc8:	4632      	mov	r2, r6
 8010cca:	463b      	mov	r3, r7
 8010ccc:	f7ef fae8 	bl	80002a0 <__adddf3>
 8010cd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010cd8:	ed84 7b00 	vstr	d7, [r4]
 8010cdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010ce0:	e755      	b.n	8010b8e <__kernel_rem_pio2+0x516>
 8010ce2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010ce6:	f7ef fadb 	bl	80002a0 <__adddf3>
 8010cea:	3d01      	subs	r5, #1
 8010cec:	e759      	b.n	8010ba2 <__kernel_rem_pio2+0x52a>
 8010cee:	9b01      	ldr	r3, [sp, #4]
 8010cf0:	9a01      	ldr	r2, [sp, #4]
 8010cf2:	601d      	str	r5, [r3, #0]
 8010cf4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010cf8:	605c      	str	r4, [r3, #4]
 8010cfa:	609f      	str	r7, [r3, #8]
 8010cfc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010d00:	60d3      	str	r3, [r2, #12]
 8010d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d06:	6110      	str	r0, [r2, #16]
 8010d08:	6153      	str	r3, [r2, #20]
 8010d0a:	e728      	b.n	8010b5e <__kernel_rem_pio2+0x4e6>
 8010d0c:	41700000 	.word	0x41700000
 8010d10:	3e700000 	.word	0x3e700000
 8010d14:	00000000 	.word	0x00000000

08010d18 <__kernel_sin>:
 8010d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d1c:	ed2d 8b04 	vpush	{d8-d9}
 8010d20:	eeb0 8a41 	vmov.f32	s16, s2
 8010d24:	eef0 8a61 	vmov.f32	s17, s3
 8010d28:	ec55 4b10 	vmov	r4, r5, d0
 8010d2c:	b083      	sub	sp, #12
 8010d2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010d32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010d36:	9001      	str	r0, [sp, #4]
 8010d38:	da06      	bge.n	8010d48 <__kernel_sin+0x30>
 8010d3a:	ee10 0a10 	vmov	r0, s0
 8010d3e:	4629      	mov	r1, r5
 8010d40:	f7ef ff14 	bl	8000b6c <__aeabi_d2iz>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d051      	beq.n	8010dec <__kernel_sin+0xd4>
 8010d48:	4622      	mov	r2, r4
 8010d4a:	462b      	mov	r3, r5
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	4629      	mov	r1, r5
 8010d50:	f7ef fc5c 	bl	800060c <__aeabi_dmul>
 8010d54:	4682      	mov	sl, r0
 8010d56:	468b      	mov	fp, r1
 8010d58:	4602      	mov	r2, r0
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	4629      	mov	r1, r5
 8010d60:	f7ef fc54 	bl	800060c <__aeabi_dmul>
 8010d64:	a341      	add	r3, pc, #260	; (adr r3, 8010e6c <__kernel_sin+0x154>)
 8010d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6a:	4680      	mov	r8, r0
 8010d6c:	4689      	mov	r9, r1
 8010d6e:	4650      	mov	r0, sl
 8010d70:	4659      	mov	r1, fp
 8010d72:	f7ef fc4b 	bl	800060c <__aeabi_dmul>
 8010d76:	a33f      	add	r3, pc, #252	; (adr r3, 8010e74 <__kernel_sin+0x15c>)
 8010d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d7c:	f7ef fa8e 	bl	800029c <__aeabi_dsub>
 8010d80:	4652      	mov	r2, sl
 8010d82:	465b      	mov	r3, fp
 8010d84:	f7ef fc42 	bl	800060c <__aeabi_dmul>
 8010d88:	a33c      	add	r3, pc, #240	; (adr r3, 8010e7c <__kernel_sin+0x164>)
 8010d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8e:	f7ef fa87 	bl	80002a0 <__adddf3>
 8010d92:	4652      	mov	r2, sl
 8010d94:	465b      	mov	r3, fp
 8010d96:	f7ef fc39 	bl	800060c <__aeabi_dmul>
 8010d9a:	a33a      	add	r3, pc, #232	; (adr r3, 8010e84 <__kernel_sin+0x16c>)
 8010d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da0:	f7ef fa7c 	bl	800029c <__aeabi_dsub>
 8010da4:	4652      	mov	r2, sl
 8010da6:	465b      	mov	r3, fp
 8010da8:	f7ef fc30 	bl	800060c <__aeabi_dmul>
 8010dac:	a337      	add	r3, pc, #220	; (adr r3, 8010e8c <__kernel_sin+0x174>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	f7ef fa75 	bl	80002a0 <__adddf3>
 8010db6:	9b01      	ldr	r3, [sp, #4]
 8010db8:	4606      	mov	r6, r0
 8010dba:	460f      	mov	r7, r1
 8010dbc:	b9eb      	cbnz	r3, 8010dfa <__kernel_sin+0xe2>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4650      	mov	r0, sl
 8010dc4:	4659      	mov	r1, fp
 8010dc6:	f7ef fc21 	bl	800060c <__aeabi_dmul>
 8010dca:	a325      	add	r3, pc, #148	; (adr r3, 8010e60 <__kernel_sin+0x148>)
 8010dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd0:	f7ef fa64 	bl	800029c <__aeabi_dsub>
 8010dd4:	4642      	mov	r2, r8
 8010dd6:	464b      	mov	r3, r9
 8010dd8:	f7ef fc18 	bl	800060c <__aeabi_dmul>
 8010ddc:	4602      	mov	r2, r0
 8010dde:	460b      	mov	r3, r1
 8010de0:	4620      	mov	r0, r4
 8010de2:	4629      	mov	r1, r5
 8010de4:	f7ef fa5c 	bl	80002a0 <__adddf3>
 8010de8:	4604      	mov	r4, r0
 8010dea:	460d      	mov	r5, r1
 8010dec:	ec45 4b10 	vmov	d0, r4, r5
 8010df0:	b003      	add	sp, #12
 8010df2:	ecbd 8b04 	vpop	{d8-d9}
 8010df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dfa:	4b1b      	ldr	r3, [pc, #108]	; (8010e68 <__kernel_sin+0x150>)
 8010dfc:	ec51 0b18 	vmov	r0, r1, d8
 8010e00:	2200      	movs	r2, #0
 8010e02:	f7ef fc03 	bl	800060c <__aeabi_dmul>
 8010e06:	4632      	mov	r2, r6
 8010e08:	ec41 0b19 	vmov	d9, r0, r1
 8010e0c:	463b      	mov	r3, r7
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fbfb 	bl	800060c <__aeabi_dmul>
 8010e16:	4602      	mov	r2, r0
 8010e18:	460b      	mov	r3, r1
 8010e1a:	ec51 0b19 	vmov	r0, r1, d9
 8010e1e:	f7ef fa3d 	bl	800029c <__aeabi_dsub>
 8010e22:	4652      	mov	r2, sl
 8010e24:	465b      	mov	r3, fp
 8010e26:	f7ef fbf1 	bl	800060c <__aeabi_dmul>
 8010e2a:	ec53 2b18 	vmov	r2, r3, d8
 8010e2e:	f7ef fa35 	bl	800029c <__aeabi_dsub>
 8010e32:	a30b      	add	r3, pc, #44	; (adr r3, 8010e60 <__kernel_sin+0x148>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	4606      	mov	r6, r0
 8010e3a:	460f      	mov	r7, r1
 8010e3c:	4640      	mov	r0, r8
 8010e3e:	4649      	mov	r1, r9
 8010e40:	f7ef fbe4 	bl	800060c <__aeabi_dmul>
 8010e44:	4602      	mov	r2, r0
 8010e46:	460b      	mov	r3, r1
 8010e48:	4630      	mov	r0, r6
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	f7ef fa28 	bl	80002a0 <__adddf3>
 8010e50:	4602      	mov	r2, r0
 8010e52:	460b      	mov	r3, r1
 8010e54:	4620      	mov	r0, r4
 8010e56:	4629      	mov	r1, r5
 8010e58:	f7ef fa20 	bl	800029c <__aeabi_dsub>
 8010e5c:	e7c4      	b.n	8010de8 <__kernel_sin+0xd0>
 8010e5e:	bf00      	nop
 8010e60:	55555549 	.word	0x55555549
 8010e64:	3fc55555 	.word	0x3fc55555
 8010e68:	3fe00000 	.word	0x3fe00000
 8010e6c:	5acfd57c 	.word	0x5acfd57c
 8010e70:	3de5d93a 	.word	0x3de5d93a
 8010e74:	8a2b9ceb 	.word	0x8a2b9ceb
 8010e78:	3e5ae5e6 	.word	0x3e5ae5e6
 8010e7c:	57b1fe7d 	.word	0x57b1fe7d
 8010e80:	3ec71de3 	.word	0x3ec71de3
 8010e84:	19c161d5 	.word	0x19c161d5
 8010e88:	3f2a01a0 	.word	0x3f2a01a0
 8010e8c:	1110f8a6 	.word	0x1110f8a6
 8010e90:	3f811111 	.word	0x3f811111

08010e94 <fabs>:
 8010e94:	ec51 0b10 	vmov	r0, r1, d0
 8010e98:	ee10 2a10 	vmov	r2, s0
 8010e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010ea0:	ec43 2b10 	vmov	d0, r2, r3
 8010ea4:	4770      	bx	lr
	...

08010ea8 <floor>:
 8010ea8:	ec51 0b10 	vmov	r0, r1, d0
 8010eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010eb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010eb8:	2e13      	cmp	r6, #19
 8010eba:	ee10 5a10 	vmov	r5, s0
 8010ebe:	ee10 8a10 	vmov	r8, s0
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	dc32      	bgt.n	8010f2c <floor+0x84>
 8010ec6:	2e00      	cmp	r6, #0
 8010ec8:	da14      	bge.n	8010ef4 <floor+0x4c>
 8010eca:	a333      	add	r3, pc, #204	; (adr r3, 8010f98 <floor+0xf0>)
 8010ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed0:	f7ef f9e6 	bl	80002a0 <__adddf3>
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f7ef fe28 	bl	8000b2c <__aeabi_dcmpgt>
 8010edc:	b138      	cbz	r0, 8010eee <floor+0x46>
 8010ede:	2c00      	cmp	r4, #0
 8010ee0:	da57      	bge.n	8010f92 <floor+0xea>
 8010ee2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010ee6:	431d      	orrs	r5, r3
 8010ee8:	d001      	beq.n	8010eee <floor+0x46>
 8010eea:	4c2d      	ldr	r4, [pc, #180]	; (8010fa0 <floor+0xf8>)
 8010eec:	2500      	movs	r5, #0
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	e025      	b.n	8010f40 <floor+0x98>
 8010ef4:	4f2b      	ldr	r7, [pc, #172]	; (8010fa4 <floor+0xfc>)
 8010ef6:	4137      	asrs	r7, r6
 8010ef8:	ea01 0307 	and.w	r3, r1, r7
 8010efc:	4303      	orrs	r3, r0
 8010efe:	d01f      	beq.n	8010f40 <floor+0x98>
 8010f00:	a325      	add	r3, pc, #148	; (adr r3, 8010f98 <floor+0xf0>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	f7ef f9cb 	bl	80002a0 <__adddf3>
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f7ef fe0d 	bl	8000b2c <__aeabi_dcmpgt>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d0eb      	beq.n	8010eee <floor+0x46>
 8010f16:	2c00      	cmp	r4, #0
 8010f18:	bfbe      	ittt	lt
 8010f1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010f1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010f22:	19a4      	addlt	r4, r4, r6
 8010f24:	ea24 0407 	bic.w	r4, r4, r7
 8010f28:	2500      	movs	r5, #0
 8010f2a:	e7e0      	b.n	8010eee <floor+0x46>
 8010f2c:	2e33      	cmp	r6, #51	; 0x33
 8010f2e:	dd0b      	ble.n	8010f48 <floor+0xa0>
 8010f30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010f34:	d104      	bne.n	8010f40 <floor+0x98>
 8010f36:	ee10 2a10 	vmov	r2, s0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	f7ef f9b0 	bl	80002a0 <__adddf3>
 8010f40:	ec41 0b10 	vmov	d0, r0, r1
 8010f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f50:	fa23 f707 	lsr.w	r7, r3, r7
 8010f54:	4207      	tst	r7, r0
 8010f56:	d0f3      	beq.n	8010f40 <floor+0x98>
 8010f58:	a30f      	add	r3, pc, #60	; (adr r3, 8010f98 <floor+0xf0>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef f99f 	bl	80002a0 <__adddf3>
 8010f62:	2200      	movs	r2, #0
 8010f64:	2300      	movs	r3, #0
 8010f66:	f7ef fde1 	bl	8000b2c <__aeabi_dcmpgt>
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d0bf      	beq.n	8010eee <floor+0x46>
 8010f6e:	2c00      	cmp	r4, #0
 8010f70:	da02      	bge.n	8010f78 <floor+0xd0>
 8010f72:	2e14      	cmp	r6, #20
 8010f74:	d103      	bne.n	8010f7e <floor+0xd6>
 8010f76:	3401      	adds	r4, #1
 8010f78:	ea25 0507 	bic.w	r5, r5, r7
 8010f7c:	e7b7      	b.n	8010eee <floor+0x46>
 8010f7e:	2301      	movs	r3, #1
 8010f80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010f84:	fa03 f606 	lsl.w	r6, r3, r6
 8010f88:	4435      	add	r5, r6
 8010f8a:	4545      	cmp	r5, r8
 8010f8c:	bf38      	it	cc
 8010f8e:	18e4      	addcc	r4, r4, r3
 8010f90:	e7f2      	b.n	8010f78 <floor+0xd0>
 8010f92:	2500      	movs	r5, #0
 8010f94:	462c      	mov	r4, r5
 8010f96:	e7aa      	b.n	8010eee <floor+0x46>
 8010f98:	8800759c 	.word	0x8800759c
 8010f9c:	7e37e43c 	.word	0x7e37e43c
 8010fa0:	bff00000 	.word	0xbff00000
 8010fa4:	000fffff 	.word	0x000fffff

08010fa8 <scalbn>:
 8010fa8:	b570      	push	{r4, r5, r6, lr}
 8010faa:	ec55 4b10 	vmov	r4, r5, d0
 8010fae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	462b      	mov	r3, r5
 8010fb6:	b99a      	cbnz	r2, 8010fe0 <scalbn+0x38>
 8010fb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010fbc:	4323      	orrs	r3, r4
 8010fbe:	d036      	beq.n	801102e <scalbn+0x86>
 8010fc0:	4b39      	ldr	r3, [pc, #228]	; (80110a8 <scalbn+0x100>)
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	ee10 0a10 	vmov	r0, s0
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f7ef fb1f 	bl	800060c <__aeabi_dmul>
 8010fce:	4b37      	ldr	r3, [pc, #220]	; (80110ac <scalbn+0x104>)
 8010fd0:	429e      	cmp	r6, r3
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	da10      	bge.n	8010ffa <scalbn+0x52>
 8010fd8:	a32b      	add	r3, pc, #172	; (adr r3, 8011088 <scalbn+0xe0>)
 8010fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fde:	e03a      	b.n	8011056 <scalbn+0xae>
 8010fe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010fe4:	428a      	cmp	r2, r1
 8010fe6:	d10c      	bne.n	8011002 <scalbn+0x5a>
 8010fe8:	ee10 2a10 	vmov	r2, s0
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef f956 	bl	80002a0 <__adddf3>
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	460d      	mov	r5, r1
 8010ff8:	e019      	b.n	801102e <scalbn+0x86>
 8010ffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010ffe:	460b      	mov	r3, r1
 8011000:	3a36      	subs	r2, #54	; 0x36
 8011002:	4432      	add	r2, r6
 8011004:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011008:	428a      	cmp	r2, r1
 801100a:	dd08      	ble.n	801101e <scalbn+0x76>
 801100c:	2d00      	cmp	r5, #0
 801100e:	a120      	add	r1, pc, #128	; (adr r1, 8011090 <scalbn+0xe8>)
 8011010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011014:	da1c      	bge.n	8011050 <scalbn+0xa8>
 8011016:	a120      	add	r1, pc, #128	; (adr r1, 8011098 <scalbn+0xf0>)
 8011018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801101c:	e018      	b.n	8011050 <scalbn+0xa8>
 801101e:	2a00      	cmp	r2, #0
 8011020:	dd08      	ble.n	8011034 <scalbn+0x8c>
 8011022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801102a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801102e:	ec45 4b10 	vmov	d0, r4, r5
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011038:	da19      	bge.n	801106e <scalbn+0xc6>
 801103a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801103e:	429e      	cmp	r6, r3
 8011040:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011044:	dd0a      	ble.n	801105c <scalbn+0xb4>
 8011046:	a112      	add	r1, pc, #72	; (adr r1, 8011090 <scalbn+0xe8>)
 8011048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1e2      	bne.n	8011016 <scalbn+0x6e>
 8011050:	a30f      	add	r3, pc, #60	; (adr r3, 8011090 <scalbn+0xe8>)
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	f7ef fad9 	bl	800060c <__aeabi_dmul>
 801105a:	e7cb      	b.n	8010ff4 <scalbn+0x4c>
 801105c:	a10a      	add	r1, pc, #40	; (adr r1, 8011088 <scalbn+0xe0>)
 801105e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0b8      	beq.n	8010fd8 <scalbn+0x30>
 8011066:	a10e      	add	r1, pc, #56	; (adr r1, 80110a0 <scalbn+0xf8>)
 8011068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801106c:	e7b4      	b.n	8010fd8 <scalbn+0x30>
 801106e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011072:	3236      	adds	r2, #54	; 0x36
 8011074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011078:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801107c:	4620      	mov	r0, r4
 801107e:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <scalbn+0x108>)
 8011080:	2200      	movs	r2, #0
 8011082:	e7e8      	b.n	8011056 <scalbn+0xae>
 8011084:	f3af 8000 	nop.w
 8011088:	c2f8f359 	.word	0xc2f8f359
 801108c:	01a56e1f 	.word	0x01a56e1f
 8011090:	8800759c 	.word	0x8800759c
 8011094:	7e37e43c 	.word	0x7e37e43c
 8011098:	8800759c 	.word	0x8800759c
 801109c:	fe37e43c 	.word	0xfe37e43c
 80110a0:	c2f8f359 	.word	0xc2f8f359
 80110a4:	81a56e1f 	.word	0x81a56e1f
 80110a8:	43500000 	.word	0x43500000
 80110ac:	ffff3cb0 	.word	0xffff3cb0
 80110b0:	3c900000 	.word	0x3c900000

080110b4 <_gettimeofday>:
 80110b4:	4b02      	ldr	r3, [pc, #8]	; (80110c0 <_gettimeofday+0xc>)
 80110b6:	2258      	movs	r2, #88	; 0x58
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	f04f 30ff 	mov.w	r0, #4294967295
 80110be:	4770      	bx	lr
 80110c0:	20000b00 	.word	0x20000b00

080110c4 <_init>:
 80110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c6:	bf00      	nop
 80110c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ca:	bc08      	pop	{r3}
 80110cc:	469e      	mov	lr, r3
 80110ce:	4770      	bx	lr

080110d0 <_fini>:
 80110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110d2:	bf00      	nop
 80110d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110d6:	bc08      	pop	{r3}
 80110d8:	469e      	mov	lr, r3
 80110da:	4770      	bx	lr
